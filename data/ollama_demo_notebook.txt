# The Python Tutorial (Part 1)

This tutorial is designed for
programmers that are new to the Python language,
  who are new to programming.

Python is an easy to learn, powerful programming language. It has efficient
high-level data structures and a simple but effective approach to
object-oriented programming. Pythonâs elegant syntax and dynamic typing,
together with its interpreted nature, make it an ideal language for scripting
and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available
in source or binary form for all major platforms from the Python web site,
https://www.python.org/, and may be freely distributed. The same site also
contains distributions of and pointers to many free third party Python modules,
programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types
implemented in C or C++ (or other languages callable from C). Python is also
suitable as an extension language for customizable applications.

================================================================================

# The Python Tutorial (Part 2)

This tutorial introduces the reader informally to the basic concepts and
features of the Python language and system. Be aware that it expects you to
have a basic understanding of programming in general. It helps to have a Python
interpreter handy for hands-on experience, but all examples are self-contained,
so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library.
The Python Language Reference gives a more formal definition of the language.  To write
extensions in C or C++, read Extending and Embedding the Python Interpreter and
Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single
feature, or even every commonly used feature. Instead, it introduces many of
Pythonâs most noteworthy features, and will give you a good idea of the
languageâs flavor and style. After reading it, you will be able to read and
write Python modules and programs, and you will be ready to learn more about the
various Python library modules described in The Python Standard Library.

The  is also worth going through.

================================================================================

# The Python Tutorial (Part 3)

List:
1. Whetting Your Appetite
2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode


2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding




3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists


3.2. First Steps Towards Programming


4. More Control Flow Tools
4.1.  Statements
4.2.  Statements
4.3. The  Function
4.4.  and  Statements
4.5.  Clauses on Loops
4.6.  Statements
4.7.  Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations


4.10. Intermezzo: Coding Style


5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions


5.2. The  statement
5.3. Tuples and Sequences

================================================================================

# The Python Tutorial (Part 4)

5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types


6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. âCompiledâ Python files


6.2. Standard Modules
6.3. The  Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories




7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting


7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with 




8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes


9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example

================================================================================

# The Python Tutorial (Part 5)


9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables


9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance


9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions


10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included


11. Brief Tour of the Standard Library â Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic


12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip

================================================================================

# The Python Tutorial (Part 6)


13. What Now?
14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter


15. Floating-Point Arithmetic:  Issues and Limitations
15.1. Representation Error


16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules

List:
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode


2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding

List:
2.1.1. Argument Passing
2.1.2. Interactive Mode

List:
2.2.1. Source Code Encoding

List:
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists


3.2. First Steps Towards Programming

List:
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists

================================================================================

# The Python Tutorial (Part 7)

List:
4.1.  Statements
4.2.  Statements
4.3. The  Function
4.4.  and  Statements
4.5.  Clauses on Loops
4.6.  Statements
4.7.  Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations


4.10. Intermezzo: Coding Style

List:
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations

List:
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap

================================================================================

# The Python Tutorial (Part 8)

List:
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions


5.2. The  statement
5.3. Tuples and Sequences

5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types

List:
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions

List:
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. âCompiledâ Python files


6.2. Standard Modules
6.3. The  Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories

List:
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. âCompiledâ Python files

List:
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories

List:
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting


7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with

================================================================================

# The Python Tutorial (Part 9)

List:
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting

List:
7.2.1. Methods of File Objects
7.2.2. Saving structured data with

List:
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes

List:
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example


9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables


9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance


9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions

List:
9.2.1. Scopes and Namespaces Example

List:
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables

List:
9.5.1. Multiple Inheritance

================================================================================

# The Python Tutorial (Part 10)

List:
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included

List:
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic

List:
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip

List:
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter

List:
15.1. Representation Error

List:
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules

List:
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules

================================================================================

# Changelog - Windows

List:
: Fix error installing C runtime on non-updated Windows machines

: Fix error installing C runtime on non-updated Windows machines

================================================================================

# Changelog - Tools/Demos

List:
: The iOS test runner has been simplified, resolving some issues
that have been observed using the runner in GitHub Actions and Azure
Pipelines test environments.

: The iOS test runner has been simplified, resolving some issues
that have been observed using the runner in GitHub Actions and Azure
Pipelines test environments.

================================================================================

# Changelog - Tests

List:
: Fix regrtest  : donât ignore the
 option anymore. Patch by Victor Stinner.

: Fix regrtest  : donât ignore the
 option anymore. Patch by Victor Stinner.

================================================================================

# Changelog - Security

List:
: Fix CDATA section parsing in html.parser.HTMLParser
according to the HTML5 standard:   and   no longer end the
CDATA section. Add private method _set_support_cdata() which can be
used to specify how to parse  â as a CDATA section in
foreign content (SVG or MathML) or as a bogus comment in the HTML
namespace.

: Fix CDATA section parsing in html.parser.HTMLParser
according to the HTML5 standard:   and   no longer end the
CDATA section. Add private method _set_support_cdata() which can be
used to specify how to parse  â as a CDATA section in
foreign content (SVG or MathML) or as a bogus comment in the HTML
namespace.

================================================================================

# Changelog - Library (Part 1)

List:
: Lazy import rlcompleter in  to avoid deadlock
in subprocess.
: Fix crash when calling _interpreters.create when the
process is out of memory.
: Fix a bug in the  module that was hiding functions
in a Python module if they were implemented in an extension module and the
module did not have .
: Update bundled libexpat to 2.7.2
: Fix possible crash in locale.strxfrm() due to a platform
bug on macOS.
: Support device numbers larger than  for the
 field of the os.stat_result
structure.
: Fix crash in PyREPL when os.environ is overwritten with an
invalid value for mac
: Fix normalization of the robots.txt rules and URLs in the
urllib.robotparser module. No longer ignore trailing .
Distinguish raw special characters ,  and  from the
percent-encoded ones.
:  is added to Emscripten build.
: Fix parsing errors in the urllib.robotparser module.
Donât fail trying to parse weird paths. Donât fail trying to decode
non-UTF-8 robots.txt files.
: zoneinfo.reset_tzpath() will now convert any
os.PathLike objects it receives into strings before adding them
to . It will raise  if anything other than a string
is found after this conversion. If given an os.PathLike object
that represents a relative path, it will now raise ValueError instead
of , and present a more informative error message.
: Fix segmentation faults in the  module due to
invalid . Patch by Dung Nguyen.
: Fix locale.strxfrm() on Solaris (and possibly other
platforms).
: Forbid expansion of shared anonymous  
on Linux, which caused a bus error.
: Fix an issue where defining a class with an
@warnings.deprecated-decorated base class
may not invoke the correct __init_subclass__() method in
cases involving multiple inheritance. Patch by Brian Schubert.
: Prevent infinite traceback loop when sending CTRL^C to Python
through .
: Fix an issue where pressing Ctrl+C during tab completion in the
REPL would leave the autocompletion menu in a corrupted state.
: inspect.signature() now correctly handles classes that
use a descriptor on a wrapped __init__() or 
method. Contributed by Yongyu Yan.
: Fix import of the  module if the C
implementation of the  module is not available.
: Handle  in the same way as
 in signal.sigwaitinfo() on NetBSD.
: Fix inspect.getblock(), inspect.getsourcelines()
and inspect.getsource() for generator expressions.
: Fix threading.Thread.is_alive to remain  until
the underlying OS thread is fully cleaned up. This avoids false negatives
in edge cases involving thread monitoring or premature
threading.Thread.is_alive calls.
: SMTP.auth_cram_md5() now raises an
SMTPException instead of a ValueError if Python has
been built without MD5 support. In particular, 
clients will not attempt to use this method even if the remote server is
assumed to support it. Patch by BÃ©nÃ©dikt Tran.
: IMAP4.login_cram_md5 now
raises an IMAP4.error if CRAM-MD5
authentication is not supported. Patch by BÃ©nÃ©dikt Tran.
: Fix opening a dbm.sqlite3 database for reading from
read-only file or directory.
: Fix multiprocessing forkserver bug which prevented
 from being preloaded.
: In a bare call to importlib.resources.files(), ensure the
callerâs frame is properly detected when importlib.resources is itself
available as a compiled module only (no source).
: Fix potential hang in multiprocessing.popen_spawn_posix
that can happen when the child proc dies early by closing the child fds
right away.
: Fix failure when importing a module from the root directory on
unix-like platforms with sys.pycache_prefix set.
: Allow negative priority values from
os.sched_get_priority_min() and os.sched_get_priority_max()
functions.

================================================================================

# Changelog - Library (Part 2)

: Lazy import rlcompleter in  to avoid deadlock
in subprocess.

: Fix crash when calling _interpreters.create when the
process is out of memory.

: Fix a bug in the  module that was hiding functions
in a Python module if they were implemented in an extension module and the
module did not have .

: Update bundled libexpat to 2.7.2

: Fix possible crash in locale.strxfrm() due to a platform
bug on macOS.

: Support device numbers larger than  for the
 field of the os.stat_result
structure.

: Fix crash in PyREPL when os.environ is overwritten with an
invalid value for mac

: Fix normalization of the robots.txt rules and URLs in the
urllib.robotparser module. No longer ignore trailing .
Distinguish raw special characters ,  and  from the
percent-encoded ones.

:  is added to Emscripten build.

: Fix parsing errors in the urllib.robotparser module.
Donât fail trying to parse weird paths. Donât fail trying to decode
non-UTF-8 robots.txt files.

================================================================================

# Changelog - Library (Part 3)

: zoneinfo.reset_tzpath() will now convert any
os.PathLike objects it receives into strings before adding them
to . It will raise  if anything other than a string
is found after this conversion. If given an os.PathLike object
that represents a relative path, it will now raise ValueError instead
of , and present a more informative error message.

: Fix segmentation faults in the  module due to
invalid . Patch by Dung Nguyen.

: Fix locale.strxfrm() on Solaris (and possibly other
platforms).

: Forbid expansion of shared anonymous  
on Linux, which caused a bus error.

: Fix an issue where defining a class with an
@warnings.deprecated-decorated base class
may not invoke the correct __init_subclass__() method in
cases involving multiple inheritance. Patch by Brian Schubert.

: Prevent infinite traceback loop when sending CTRL^C to Python
through .

: Fix an issue where pressing Ctrl+C during tab completion in the
REPL would leave the autocompletion menu in a corrupted state.

: inspect.signature() now correctly handles classes that
use a descriptor on a wrapped __init__() or 
method. Contributed by Yongyu Yan.

: Fix import of the  module if the C
implementation of the  module is not available.

================================================================================

# Changelog - Library (Part 4)

: Handle  in the same way as
 in signal.sigwaitinfo() on NetBSD.

: Fix inspect.getblock(), inspect.getsourcelines()
and inspect.getsource() for generator expressions.

: Fix threading.Thread.is_alive to remain  until
the underlying OS thread is fully cleaned up. This avoids false negatives
in edge cases involving thread monitoring or premature
threading.Thread.is_alive calls.

: SMTP.auth_cram_md5() now raises an
SMTPException instead of a ValueError if Python has
been built without MD5 support. In particular, 
clients will not attempt to use this method even if the remote server is
assumed to support it. Patch by BÃ©nÃ©dikt Tran.

: IMAP4.login_cram_md5 now
raises an IMAP4.error if CRAM-MD5
authentication is not supported. Patch by BÃ©nÃ©dikt Tran.

: Fix opening a dbm.sqlite3 database for reading from
read-only file or directory.

: Fix multiprocessing forkserver bug which prevented
 from being preloaded.

: In a bare call to importlib.resources.files(), ensure the
callerâs frame is properly detected when importlib.resources is itself
available as a compiled module only (no source).

================================================================================

# Changelog - Library (Part 5)

: Fix potential hang in multiprocessing.popen_spawn_posix
that can happen when the child proc dies early by closing the child fds
right away.

: Fix failure when importing a module from the root directory on
unix-like platforms with sys.pycache_prefix set.

: Allow negative priority values from
os.sched_get_priority_min() and os.sched_get_priority_max()
functions.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Donât run PyREPL in a degraded environment where setting
termios attributes is not allowed.
: Raise OverflowError for (-1).to_bytes() for signed
conversions when bytes count is zero.  Patch by Sergey B Kirpichev.
: Remove non-existent __copy__(),
__deepcopy__(), and  from the
 entries of types.GenericAlias.
: Fix a hang when the process is out of memory inside an
exception handler.
: Fix a crash when a generic objectâs __typing_subst__
returns an object that isnât a .
: Fix for incorrect source code being shown in tracebacks from
the Basic REPL when PYTHONSTARTUP is given. Patch by Adam Hartz.
: Certain calls now check for runaway recursion and respect the
system recursion limit.

: Donât run PyREPL in a degraded environment where setting
termios attributes is not allowed.

: Raise OverflowError for (-1).to_bytes() for signed
conversions when bytes count is zero.  Patch by Sergey B Kirpichev.

: Remove non-existent __copy__(),
__deepcopy__(), and  from the
 entries of types.GenericAlias.

: Fix a hang when the process is out of memory inside an
exception handler.

: Fix a crash when a generic objectâs __typing_subst__
returns an object that isnât a .

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix for incorrect source code being shown in tracebacks from
the Basic REPL when PYTHONSTARTUP is given. Patch by Adam Hartz.

: Certain calls now check for runaway recursion and respect the
system recursion limit.

================================================================================

# Changelog - C API (Part 1)

List:
: Attempting to acquire the GIL after runtime finalization has
begun in a different thread now causes the thread to hang rather than
terminate, which avoids potential crashes or memory corruption caused by
attempting to terminate a thread that is running code not specifically
designed to support termination. In most cases this hanging is harmless
since the process will soon exit anyway.
While not officially marked deprecated until 3.14,
PyThread_exit_thread is no longer called internally and remains solely
for interface compatibility. Its behavior is inconsistent across
platforms, and it can only be used safely in the unlikely case that every
function in the entire call stack has been designed to support the
platform-dependent termination mechanism.  It is recommended that users of
this function change their design to not require thread termination.  In
the unlikely case that thread termination is needed and can be done
safely, users may migrate to calling platform-specific APIs such as
pthread_exit (POSIX) or _endthreadex (Windows) directly.

================================================================================

# Changelog - C API (Part 2)

: Attempting to acquire the GIL after runtime finalization has
begun in a different thread now causes the thread to hang rather than
terminate, which avoids potential crashes or memory corruption caused by
attempting to terminate a thread that is running code not specifically
designed to support termination. In most cases this hanging is harmless
since the process will soon exit anyway.

While not officially marked deprecated until 3.14,
PyThread_exit_thread is no longer called internally and remains solely
for interface compatibility. Its behavior is inconsistent across
platforms, and it can only be used safely in the unlikely case that every
function in the entire call stack has been designed to support the
platform-dependent termination mechanism.  It is recommended that users of
this function change their design to not require thread termination.  In
the unlikely case that thread termination is needed and can be done
safely, users may migrate to calling platform-specific APIs such as
pthread_exit (POSIX) or _endthreadex (Windows) directly.

================================================================================

# Changelog - Build

List:
: Python can correctly be configured and built with ./configure
--enable-optimizations --disable-test-modules. Previously, the profile
data generation step failed due to PGO tests where immortalization
couldnât be properly suppressed. Patch by BÃ©nÃ©dikt Tran.

: Python can correctly be configured and built with ./configure
--enable-optimizations --disable-test-modules. Previously, the profile
data generation step failed due to PGO tests where immortalization
couldnât be properly suppressed. Patch by BÃ©nÃ©dikt Tran.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix a deadlock introduced in 3.13.6 when a call to
ssl.SSLSocket.recv was blocked in one thread,
and then another method on the object (such as ssl.SSLSocket.send) was subsequently called in another thread.
: Return large limit values as positive integers instead of
negative integers in resource.getrlimit(). Accept large values and
reject negative values (except RLIM_INFINITY) for limits
in resource.setrlimit().
: Fix retrieval of doctest.DocTest.lineno for objects
decorated with functools.cache() or
functools.cached_property.
: Make ResourceTracker.send from multiprocessing
re-entrant safe

: Fix a deadlock introduced in 3.13.6 when a call to
ssl.SSLSocket.recv was blocked in one thread,
and then another method on the object (such as ssl.SSLSocket.send) was subsequently called in another thread.

: Return large limit values as positive integers instead of
negative integers in resource.getrlimit(). Accept large values and
reject negative values (except RLIM_INFINITY) for limits
in resource.setrlimit().

: Fix retrieval of doctest.DocTest.lineno for objects
decorated with functools.cache() or
functools.cached_property.

================================================================================

# Changelog - Library (Part 2)

: Make ResourceTracker.send from multiprocessing
re-entrant safe

================================================================================

# Changelog - Documentation

List:
: We are now checking for fatal errors in EPUB builds in CI.

: We are now checking for fatal errors in EPUB builds in CI.

================================================================================

# Changelog - Core and Builtins

List:
: Fix a crash in the free threading build when disabling
profiling or tracing across all threads with
PyEval_SetProfileAllThreads() or
PyEval_SetTraceAllThreads() or their Python equivalents
threading.settrace_all_threads() and
threading.setprofile_all_threads().

: Fix a crash in the free threading build when disabling
profiling or tracing across all threads with
PyEval_SetProfileAllThreads() or
PyEval_SetTraceAllThreads() or their Python equivalents
threading.settrace_all_threads() and
threading.setprofile_all_threads().

================================================================================

# Changelog - macOS

List:
: macOS installer shell path management improvements: separate
the installer    postinstall script from the
  Profile.command to enable more robust error handling.
: Update macOS installer to ship with SQLite version 3.50.4.

: macOS installer shell path management improvements: separate
the installer    postinstall script from the
  Profile.command to enable more robust error handling.

: Update macOS installer to ship with SQLite version 3.50.4.

================================================================================

# Changelog - Windows

List:
: Update Windows installer to ship with SQLite 3.50.4.

: Update Windows installer to ship with SQLite 3.50.4.

================================================================================

# Changelog - Tools/Demos

List:
: Stubs for  are now provided as part of an iOS install.

: Stubs for  are now provided as part of an iOS install.

================================================================================

# Changelog - Tests

List:
: The iOS testbed now handles the app_packages folder as a
site directory.
: Fix regrtest to support excluding tests from  tests.
Patch by Victor Stinner.
: Show verbose output for failing tests during PGO profiling step
with âenable-optimizations.

: The iOS testbed now handles the app_packages folder as a
site directory.

: Fix regrtest to support excluding tests from  tests.
Patch by Victor Stinner.

: Show verbose output for failing tests during PGO profiling step
with âenable-optimizations.

================================================================================

# Changelog - Security (Part 1)

List:
: Fix parsing start and end tags in
html.parser.HTMLParser according to the HTML5 standard.

Whitespaces no longer accepted between  and the tag name.
E.g.   does not end the script section.
Vertical tabulation () and non-ASCII whitespaces no longer recognized
as whitespaces. The only whitespaces are  and space.
Null character (U+0000) no longer ends the tag name.
Attributes and slashes after the tag name in end tags are now ignored,
instead of terminating after the first  in quoted attribute value.
E.g. </script/foo=">"/>.
Multiple slashes and whitespaces between the last attribute and closing 
are now ignored in both start and end tags. E.g.   .
Multiple  between attribute name and value are no longer collapsed.
E.g.   produces attribute âfooâ with value â=barâ.

================================================================================

# Changelog - Security (Part 2)


: Fix comment parsing in html.parser.HTMLParser
according to the HTML5 standard.  now ends the comment.  
no longer ends the comment. Support abnormally ended empty comments
 and .
: Fix quadratic complexity in processing specially crafted input
in html.parser.HTMLParser. End-of-file errors are now handled
according to the HTML5 specs â comments and declarations are
automatically closed, tags are ignored.
: Fix support of escapable raw text mode (elements âtextareaâ and
âtitleâ) in html.parser.HTMLParser.

: Fix parsing start and end tags in
html.parser.HTMLParser according to the HTML5 standard.

================================================================================

# Changelog - Security (Part 3)

List:
Whitespaces no longer accepted between  and the tag name.
E.g.   does not end the script section.
Vertical tabulation () and non-ASCII whitespaces no longer recognized
as whitespaces. The only whitespaces are  and space.
Null character (U+0000) no longer ends the tag name.
Attributes and slashes after the tag name in end tags are now ignored,
instead of terminating after the first  in quoted attribute value.
E.g. </script/foo=">"/>.
Multiple slashes and whitespaces between the last attribute and closing 
are now ignored in both start and end tags. E.g.   .
Multiple  between attribute name and value are no longer collapsed.
E.g.   produces attribute âfooâ with value â=barâ.

Whitespaces no longer accepted between  and the tag name.
E.g.   does not end the script section.

Vertical tabulation () and non-ASCII whitespaces no longer recognized
as whitespaces. The only whitespaces are  and space.

Null character (U+0000) no longer ends the tag name.

Attributes and slashes after the tag name in end tags are now ignored,
instead of terminating after the first  in quoted attribute value.
E.g. </script/foo=">"/>.

================================================================================

# Changelog - Security (Part 4)

Multiple slashes and whitespaces between the last attribute and closing 
are now ignored in both start and end tags. E.g.   .

Multiple  between attribute name and value are no longer collapsed.
E.g.   produces attribute âfooâ with value â=barâ.

: Fix comment parsing in html.parser.HTMLParser
according to the HTML5 standard.  now ends the comment.  
no longer ends the comment. Support abnormally ended empty comments
 and .

: Fix quadratic complexity in processing specially crafted input
in html.parser.HTMLParser. End-of-file errors are now handled
according to the HTML5 specs â comments and declarations are
automatically closed, tags are ignored.

: Fix support of escapable raw text mode (elements âtextareaâ and
âtitleâ) in html.parser.HTMLParser.

================================================================================

# Changelog - Library (Part 1)

List:
: If possible, ensure that uuid.getnode() returns the same
result even across different processes. Previously, the result was
constant only within the same process. Patch by BÃ©nÃ©dikt Tran.
: Fix debug assertion failure in locale.setlocale() on
Windows.
: Bump the version of pip bundled in ensurepip to version 25.2
: tarfile.TarFile now accepts a  when working on a tar archive. (Contributed by
Alexander Enrique Urieles Nieto in .)
: Fix unraisable  raised during
interpreter shutdown in the  module.
:  now validates archives to ensure member offsets
are non-negative.  (Contributed by Alexander Enrique Urieles Nieto in
.)
: Fix signature of threading.excepthook().
: Fix wave.Wave_write emitting an unraisable when open
raises.
: Add missing  (default ) parameter to
codecs.StreamReaderWriter.readline() and
codecs.StreamReaderWriter.readlines().
: If zoneinfo._common.load_tzdata is given a package without a
resource a zoneinfo.ZoneInfoNotFoundError is raised rather than a
PermissionError. Patch by Victor Stinner.
: Fix UnboundLocalError in
email.message.Message.get_payload() when the payload to decode is a
 object. Patch by Kliment Lamonov.
: Fix parsing month names containing âÄ°â (U+0130, LATIN CAPITAL
LETTER I WITH DOT ABOVE) in time.strptime(). This affects locales
az_AZ, ber_DZ, ber_MA and crh_UA.
: In the palmos encoding, make byte  decode to 
(U+203A - SINGLE RIGHT-POINTING ANGLE QUOTATION MARK).
: Fix time.strptime() for  and  formats on
locales byn_ER, wal_ET and lzh_TW, and for  format on locales ar_SA,
bg_BG and lzh_TW.
: An earlier change, which was introduced in 3.13.4, has been
reverted. It disabled logging for a logger during handling of log messages
for that logger. Since the reversion, the behaviour should be as it was
before 3.13.4.
: Fixes a crash of types.SimpleNamespace on free
threading builds, when several threads were calling its
__repr__() method at the same time.
: Fix IndexError in asyncio.loop.create_connection()
that could occur when non- exception is raised during
connection and socketâs  raises .
: Fix IndexError in asyncio.loop.create_connection()
that could occur when the Happy Eyeballs algorithm resulted in an empty
exceptions list during connection attempts.
: Raise  instead of SystemError when
_interpreters.set___main___attrs() is passed a non-dict object.
Patch by Brian Schubert.
: : skip security checks if os.getuid() is
missing. Patch by BÃ©nÃ©dikt Tran.
: Address bug where it was possible to call
xml.etree.ElementTree.ElementTree.write() on an ElementTree object
with an invalid root element. This behavior blanked the file passed to
 if it already existed.
: Fix asyncio.DatagramTransport.sendto() to account for
datagram header size when data cannot be sent.
: Fix os.getlogin() failing for longer usernames on
BSD-based platforms.
: Fix reprlib.Repr.repr_int() when given integers with
more than sys.get_int_max_str_digits() digits. Patch by BÃ©nÃ©dikt
Tran.
: multiprocessing: Flush  and  after
preloading modules in the forkserver.
: : when the MAC address cannot be determined, the
48-bit node ID is now generated with a cryptographically-secure
pseudo-random number generator (CSPRNG) as per RFC 9562, Â§6.10.3. This affects .
: Fix the âInvalid error handlingâ exception in
encodings.idna.IncrementalDecoder to correctly replace the
âerrorsâ parameter.
: Fix a crash when calling methods of ssl.SSLContext or
ssl.SSLSocket across multiple threads.
: On POSIX-compliant systems,
multiprocessing.util.get_temp_dir() now ignores 
(and similar environment variables) if the path length of 
socket files exceeds the platform-specific maximum length when using the
forkserver start method. Patch by BÃ©nÃ©dikt Tran.
: Fix dot commands with trailing spaces are mistaken for
multi-line SQL statements in the sqlite3 command-line interface.
: Prevent the ProcessPoolExecutor
executor thread, which remains running when shutdown(wait=False), from attempting to adjust the
poolâs worker processes after the object state has already been reset
during shutdown. A combination of conditions, including a worker process
having terminated abormally, resulted in an exception and a potential hang
when the still-running executor thread attempted to replace dead workers
within the pool.
: Support the  digit separator in formatting of the
integral part of âs.  Patch by Sergey B
Kirpichev.
: If zoneinfo._common.load_tzdata is given a package without a
resource a ZoneInfoNotFoundError is raised rather than a
IsADirectoryError.
: Handle corner-case for âs
formatting: treat zero-padding (preceding the width field by a zero
() character) as an equivalent to a fill character of  with
an alignment type of , just as in case of âs.

================================================================================

# Changelog - Library (Part 2)

: If possible, ensure that uuid.getnode() returns the same
result even across different processes. Previously, the result was
constant only within the same process. Patch by BÃ©nÃ©dikt Tran.

: Fix debug assertion failure in locale.setlocale() on
Windows.

: Bump the version of pip bundled in ensurepip to version 25.2

: tarfile.TarFile now accepts a  when working on a tar archive. (Contributed by
Alexander Enrique Urieles Nieto in .)

: Fix unraisable  raised during
interpreter shutdown in the  module.

:  now validates archives to ensure member offsets
are non-negative.  (Contributed by Alexander Enrique Urieles Nieto in
.)

: Fix signature of threading.excepthook().

: Fix wave.Wave_write emitting an unraisable when open
raises.

: Add missing  (default ) parameter to
codecs.StreamReaderWriter.readline() and
codecs.StreamReaderWriter.readlines().

: If zoneinfo._common.load_tzdata is given a package without a
resource a zoneinfo.ZoneInfoNotFoundError is raised rather than a
PermissionError. Patch by Victor Stinner.

: Fix UnboundLocalError in
email.message.Message.get_payload() when the payload to decode is a
 object. Patch by Kliment Lamonov.

================================================================================

# Changelog - Library (Part 3)

: Fix parsing month names containing âÄ°â (U+0130, LATIN CAPITAL
LETTER I WITH DOT ABOVE) in time.strptime(). This affects locales
az_AZ, ber_DZ, ber_MA and crh_UA.

: In the palmos encoding, make byte  decode to 
(U+203A - SINGLE RIGHT-POINTING ANGLE QUOTATION MARK).

: Fix time.strptime() for  and  formats on
locales byn_ER, wal_ET and lzh_TW, and for  format on locales ar_SA,
bg_BG and lzh_TW.

: An earlier change, which was introduced in 3.13.4, has been
reverted. It disabled logging for a logger during handling of log messages
for that logger. Since the reversion, the behaviour should be as it was
before 3.13.4.

: Fixes a crash of types.SimpleNamespace on free
threading builds, when several threads were calling its
__repr__() method at the same time.

: Fix IndexError in asyncio.loop.create_connection()
that could occur when non- exception is raised during
connection and socketâs  raises .

: Fix IndexError in asyncio.loop.create_connection()
that could occur when the Happy Eyeballs algorithm resulted in an empty
exceptions list during connection attempts.

: Raise  instead of SystemError when
_interpreters.set___main___attrs() is passed a non-dict object.
Patch by Brian Schubert.

================================================================================

# Changelog - Library (Part 4)

: : skip security checks if os.getuid() is
missing. Patch by BÃ©nÃ©dikt Tran.

: Address bug where it was possible to call
xml.etree.ElementTree.ElementTree.write() on an ElementTree object
with an invalid root element. This behavior blanked the file passed to
 if it already existed.

: Fix asyncio.DatagramTransport.sendto() to account for
datagram header size when data cannot be sent.

: Fix os.getlogin() failing for longer usernames on
BSD-based platforms.

: Fix reprlib.Repr.repr_int() when given integers with
more than sys.get_int_max_str_digits() digits. Patch by BÃ©nÃ©dikt
Tran.

: multiprocessing: Flush  and  after
preloading modules in the forkserver.

: : when the MAC address cannot be determined, the
48-bit node ID is now generated with a cryptographically-secure
pseudo-random number generator (CSPRNG) as per RFC 9562, Â§6.10.3. This affects .

: Fix the âInvalid error handlingâ exception in
encodings.idna.IncrementalDecoder to correctly replace the
âerrorsâ parameter.

: Fix a crash when calling methods of ssl.SSLContext or
ssl.SSLSocket across multiple threads.

================================================================================

# Changelog - Library (Part 5)

: On POSIX-compliant systems,
multiprocessing.util.get_temp_dir() now ignores 
(and similar environment variables) if the path length of 
socket files exceeds the platform-specific maximum length when using the
forkserver start method. Patch by BÃ©nÃ©dikt Tran.

: Fix dot commands with trailing spaces are mistaken for
multi-line SQL statements in the sqlite3 command-line interface.

: Prevent the ProcessPoolExecutor
executor thread, which remains running when shutdown(wait=False), from attempting to adjust the
poolâs worker processes after the object state has already been reset
during shutdown. A combination of conditions, including a worker process
having terminated abormally, resulted in an exception and a potential hang
when the still-running executor thread attempted to replace dead workers
within the pool.

: Support the  digit separator in formatting of the
integral part of âs.  Patch by Sergey B
Kirpichev.

: If zoneinfo._common.load_tzdata is given a package without a
resource a ZoneInfoNotFoundError is raised rather than a
IsADirectoryError.

================================================================================

# Changelog - Library (Part 6)

: Handle corner-case for âs
formatting: treat zero-padding (preceding the width field by a zero
() character) as an equivalent to a fill character of  with
an alignment type of , just as in case of âs.

================================================================================

# Changelog - Documentation

List:
: Document that the  for the leftmost
 clause in the generator expression is created immediately.

: Document that the  for the leftmost
 clause in the generator expression is created immediately.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix name of the Python encoding in Unicode errors of the code
page codec: use âcp65000â and âcp65001â instead of âCP_UTF7â and âCP_UTF8â
which are not valid Python code names. Patch by Victor Stinner.
: Fixed a regression where raw f-strings incorrectly interpreted
escape sequences in format specifications. Raw f-strings now properly
preserve literal backslashes in format specs, matching the behavior from
Python 3.11. For example, rf"{obj:\xFF}" now correctly produces
 instead of . Patch by Pablo Galindo.
: Fix some issues with the perf trampolines on x86-64 and
aarch64.  The trampolines were not being generated correctly for some
cases, which could lead to the perf integration not working correctly.
Patch by Pablo Galindo.
: Fix memory error handling in PyDict_SetDefault().
: Fix error message for cls.__new__(cls,  where  is
not instantiable builtin or extension type (with  set to
).
: Non-blocking mutex lock attempts now return immediately when
the lock is busy instead of briefly spinning in the free threading
build.
: Fix potential  races in an objectâs destructor on
the free threaded build.
: Fix typo in the f-string conversion type error (âexclamanationâ
-> âexclamationâ).
: Properly raise custom syntax errors when incorrect syntax
containing names that are prefixes of soft keywords is encountered.  Patch
by Pablo Galindo.
: Fixed a bug where f-string debug expressions (using =) would
incorrectly strip out parts of strings containing escaped quotes and #
characters. Patch by Pablo Galindo.
: Limit excess memory usage in the free threading build
when a large dictionary or list is resized and accessed by multiple
threads.
: Fix dict.update() modification check that could
incorrectly raise a âdict mutated during updateâ error when a different
dictionary was modified that happens to share the same underlying keys
object.
: Fix a crash when a  is concurrently mutated
during item assignment.
: Fix off-by-one read beyond the end of a string in string
search.
: Fix crash with gi_frame.f_locals when generator frames
outlive their generator. Patch by Mikhail Efimov.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix name of the Python encoding in Unicode errors of the code
page codec: use âcp65000â and âcp65001â instead of âCP_UTF7â and âCP_UTF8â
which are not valid Python code names. Patch by Victor Stinner.

: Fixed a regression where raw f-strings incorrectly interpreted
escape sequences in format specifications. Raw f-strings now properly
preserve literal backslashes in format specs, matching the behavior from
Python 3.11. For example, rf"{obj:\xFF}" now correctly produces
 instead of . Patch by Pablo Galindo.

: Fix some issues with the perf trampolines on x86-64 and
aarch64.  The trampolines were not being generated correctly for some
cases, which could lead to the perf integration not working correctly.
Patch by Pablo Galindo.

: Fix memory error handling in PyDict_SetDefault().

: Fix error message for cls.__new__(cls,  where  is
not instantiable builtin or extension type (with  set to
).

: Non-blocking mutex lock attempts now return immediately when
the lock is busy instead of briefly spinning in the free threading
build.

: Fix potential  races in an objectâs destructor on
the free threaded build.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix typo in the f-string conversion type error (âexclamanationâ
-> âexclamationâ).

: Properly raise custom syntax errors when incorrect syntax
containing names that are prefixes of soft keywords is encountered.  Patch
by Pablo Galindo.

: Fixed a bug where f-string debug expressions (using =) would
incorrectly strip out parts of strings containing escaped quotes and #
characters. Patch by Pablo Galindo.

: Limit excess memory usage in the free threading build
when a large dictionary or list is resized and accessed by multiple
threads.

: Fix dict.update() modification check that could
incorrectly raise a âdict mutated during updateâ error when a different
dictionary was modified that happens to share the same underlying keys
object.

: Fix a crash when a  is concurrently mutated
during item assignment.

: Fix off-by-one read beyond the end of a string in string
search.

: Fix crash with gi_frame.f_locals when generator frames
outlive their generator. Patch by Mikhail Efimov.

================================================================================

# Changelog - Build

List:
: Fix the detection of MAXLOGNAME in the configure.ac
script.

: Fix the detection of MAXLOGNAME in the configure.ac
script.

================================================================================

# Changelog - Windows

List:
: Avoid distributing modified pyconfig.h in the
traditional installer. Extension module builds must always specify
Py_GIL_DISABLED when targeting the free-threaded runtime.

: Avoid distributing modified pyconfig.h in the
traditional installer. Extension module builds must always specify
Py_GIL_DISABLED when targeting the free-threaded runtime.

================================================================================

# Changelog - Tests

List:
: Add test.support.subTests().

: Add test.support.subTests().

================================================================================

# Changelog - Library (Part 1)

List:
: Do not normalize  name âC.UTF-8â to âen_US.UTF-8â.
: Restore support of integer-like objects with __index__()
in random.getrandbits().
: Raise a correct exception for values greater than 0x7fffffff
for the  opcode in the C implementation of .
: Backported bugfixes in zipfile.Path from zipp 3.23. Fixed
,  and other basename-based properties on Windows when
working with a zipfile on disk.
: : Fix  in
email.utils.decode_params() when sorting  continuations
that contain an unnumbered section.
: : Fix parsing of email message ID with invalid
domain.
: Fix libc thread safety issues with  by replacing
 with getlogin_r re-entrant version.
: Fix formatting issues in json.dump() when both 
and  are used.

: Do not normalize  name âC.UTF-8â to âen_US.UTF-8â.

: Restore support of integer-like objects with __index__()
in random.getrandbits().

: Raise a correct exception for values greater than 0x7fffffff
for the  opcode in the C implementation of .

: Backported bugfixes in zipfile.Path from zipp 3.23. Fixed
,  and other basename-based properties on Windows when
working with a zipfile on disk.

================================================================================

# Changelog - Library (Part 2)

: : Fix  in
email.utils.decode_params() when sorting  continuations
that contain an unnumbered section.

: : Fix parsing of email message ID with invalid
domain.

: Fix libc thread safety issues with  by replacing
 with getlogin_r re-entrant version.

: Fix formatting issues in json.dump() when both 
and  are used.

================================================================================

# Changelog - Core and Builtins

List:
: Roll back changes to generator and list comprehensions that
went into 3.13.4 to fix , but which involved semantic and
bytecode changes not appropriate for a bugfix release.

: Roll back changes to generator and list comprehensions that
went into 3.13.4 to fix , but which involved semantic and
bytecode changes not appropriate for a bugfix release.

================================================================================

# Changelog - C API

List:
: Fix Py_RETURN_NONE, Py_RETURN_TRUE and
Py_RETURN_FALSE macros in the limited C API 3.11 and older: donât
treat ,  and  as immortal. Patch by
Victor Stinner.
: Implement PyObject_DelAttr() and
PyObject_DelAttrString() as macros in the limited C API 3.12 and
older. Patch by Victor Stinner.

: Fix Py_RETURN_NONE, Py_RETURN_TRUE and
Py_RETURN_FALSE macros in the limited C API 3.11 and older: donât
treat ,  and  as immortal. Patch by
Victor Stinner.

: Implement PyObject_DelAttr() and
PyObject_DelAttrString() as macros in the limited C API 3.12 and
older. Patch by Victor Stinner.

================================================================================

# Changelog - Windows

List:
: Fix a race in internal calls into WMI that can result in an
âinvalid handleâ exception under high load. Patch by Chris Eibl.
: Make os.path.realpath() ignore Windows error 1005 when in
non-strict mode.
: Ensures packages are not accidentally bundled into the
traditional installer.
: Add warnings to Python Launcher for Windows about use of subcommands
belonging to the Python install manager.

: Fix a race in internal calls into WMI that can result in an
âinvalid handleâ exception under high load. Patch by Chris Eibl.

: Make os.path.realpath() ignore Windows error 1005 when in
non-strict mode.

: Ensures packages are not accidentally bundled into the
traditional installer.

: Add warnings to Python Launcher for Windows about use of subcommands
belonging to the Python install manager.

================================================================================

# Changelog - Tests

List:
: Fix multiprocessing interrupt test. Add an event to synchronize
the parent process with the child process: wait until the child process
starts sleeping. Patch by Victor Stinner.
: Fix TestPyReplAutoindent.test_auto_indent_default() doesnât
run input_code.
: The iOS testbed will now select the most recently released
âSE-classâ device for testing if a device isnât explicitly specified.
: The test helper that counts the list of open file descriptors
now uses the optimised  approach on all Apple platforms, not
just macOS. This avoids crashes caused by guarded file descriptors.

: Fix multiprocessing interrupt test. Add an event to synchronize
the parent process with the child process: wait until the child process
starts sleeping. Patch by Victor Stinner.

: Fix TestPyReplAutoindent.test_auto_indent_default() doesnât
run input_code.

: The iOS testbed will now select the most recently released
âSE-classâ device for testing if a device isnât explicitly specified.

: The test helper that counts the list of open file descriptors
now uses the optimised  approach on all Apple platforms, not
just macOS. This avoids crashes caused by guarded file descriptors.

================================================================================

# Changelog - Security

List:
: Fixes multiple issues that allowed  extraction
filters (filter="data" and filter="tar") to be bypassed using
crafted symlinks and hard links.
Addresses CVE 2024-12718, CVE 2025-4138, CVE 2025-4330, and
CVE 2025-4517.

: Fix use-after-free in the âunicode-escapeâ decoder with a
non-âstrictâ error handler.
: Short-circuit the processing of long IPv6 addresses early in
 to prevent excessive memory consumption and a minor
denial-of-service.

: Fixes multiple issues that allowed  extraction
filters (filter="data" and filter="tar") to be bypassed using
crafted symlinks and hard links.

Addresses CVE 2024-12718, CVE 2025-4138, CVE 2025-4330, and
CVE 2025-4517.

: Fix use-after-free in the âunicode-escapeâ decoder with a
non-âstrictâ error handler.

: Short-circuit the processing of long IPv6 addresses early in
 to prevent excessive memory consumption and a minor
denial-of-service.

================================================================================

# Changelog - Library (Part 1)

List:
: ast.dump() now only omits  and  values if
they are default values.
: Fix parsing long IPv6 addresses with embedded IPv4 address.
: Built-in HACL* and OpenSSL implementations of hash function
constructors now correctly accept the same documented named arguments.
For instance,  could be previously invoked as
md5(data=data) or md5(string=string) depending on the underlying
implementation but these calls were not compatible. Patch by BÃ©nÃ©dikt
Tran.
: curses.window.getch() now correctly handles signals.
Patch by BÃ©nÃ©dikt Tran.
: multiprocessing.freeze_support() now checks for work on
any âspawnâ start method platform rather than only on Windows.
: Fix  to not close subprocess pipes which would
otherwise error out when the event loop is already closed.
: Fixed UnboundLocalError that could occur during
 header parsing if an expected trailing delimiter is missing
in some contexts.
: Remove import of C implementation of  from
Python implementation which has its own implementation
: Emit RuntimeWarning in the Python implementation of
 when the file-like object is not closed
explicitly in the presence of multiple I/O layers.
: The  module now handles UnicodeEncodeError
in the same way as  when cannot extract a member.
: Fix interaction of the new  and 
showrefcount command line option.
: The generated directory listing page in
http.server.SimpleHTTPRequestHandler now only shows the decoded
path component of the requested URL, and not the query and fragment.
: Fix handling paths that end with a percent-encoded slash
( or ) in http.server.SimpleHTTPRequestHandler.
: : fix collisions in __hash__()
for IPv4Network and IPv6Network
objects.
: In 3.13.3 we accidentally changed the signature of the asyncio
create_task() family of methods and how it calls a custom task factory
in a backwards incompatible way. Since some 3rd party libraries have
already made changes to work around the issue that might break if we
simply reverted the changes, weâre instead changing things to be backwards
compatible with 3.13.2 while still supporting those workarounds for
3.13.3. In particular, the special-casing of  and  is
back (until 3.14) and consequently eager tasks may still find that their
name hasnât been set before they execute their first yielding await.
: Raise ValueError in  if  returns a
negative file-descriptor in the Python implementation of  to
match the C implementation.
: Fix handling of invalid markup declarations in
html.parser.HTMLParser.
: random.getrandbits() can now generate more that 2 bits. random.randbytes() can now generate more that 256
MiB.
: Fix attribute caching issue when setting
ctypes._Pointer._type_ in the undocumented and deprecated
ctypes.SetPointerType() function and the undocumented
set_type() method.
:  on Windows doesnât round subnormal results before
Windows 11, but should.  Pythonâs math.ldexp() wrapper now does
round them, so results may change slightly, in rare cases of very small
results, on Windows versions before 11.
: Use original timeout value for subprocess.TimeoutExpired
when the func subprocess.run() is called with a timeout instead of
sometimes a confusing partial remaining time out value used internally on
the final .
: xml.etree.ElementTree: Fix a crash in
Element.__deepcopy__ when the element is
concurrently mutated. Patch by BÃ©nÃ©dikt Tran.
: Bump the version of pip bundled in ensurepip to version 25.1.1
: Fix error when  is suspended, then resumed and
terminated.
: Fix a crash when using    and    in
a ctypes.Structure.
: Include the valid typecode âwâ in the error message when an
invalid typecode is passed to array.array.
: Fix  on Windows: characters entered via AltGr are
swallowed. Patch by Chris Eibl.
: Fix support of Bluetooth sockets on NetBSD and DragonFly BSD.
: QueueListener.start now raises a RuntimeError
if the listener is already started.
: Fix a  pointer dereference when a C function called
using  with   returns
.
: Fix instance error suggestions trigger potential exceptions in
object.__getattr__() in .
: A traceback.TracebackException now correctly renders
the __context__ and  attributes from  , and the exceptions attribute from falsey
ExceptionGroup.
: Fixed the SystemError in  when locating
the actual C function of a method raises an exception.
: Prevent exceptions that evaluate as falsey (namely, when their
 method returns  or their  method returns
0) from being ignored by concurrent.futures.ProcessPoolExecutor
and concurrent.futures.ThreadPoolExecutor.
: Respect follow_wrapped for __init__() and
 methods when getting the class signature for a class with
inspect.signature(). Preserve class signature after wrapping with
warnings.deprecated(). Patch by Xuehai Pan.
: Ignore log messages generated during handling of log messages,
to avoid deadlock or infinite recursion. [NOTE: This change has since been
reverted.]
: Improve error reporting for incorrect format in
time.strptime().
: Systems using LibreSSL now successfully build.
: Avoid exiting the new REPL and offer suggestions even if there
are non-string candidates when errors occur.
: Fix configparser.ConfigParser parsing empty
interpolation with allow_no_value set to .
: Fix REPL traceback reporting when using  with an
inexisting file. Patch by BÃ©nÃ©dikt Tran.
: http.cookiejar.join_header_words() is now more similar
to the original Perl version. It now quotes the same set of characters and
always quote values that end with .
: Fix missing socket.CAN_RAW_ERR_FILTER constant in the
socket module on Linux systems. It was missing since Python 3.11.
: Turn on virtual terminal mode and enable bracketed paste in
REPL on Windows console. (If the terminal does not support bracketed
paste, enabling it does nothing.)
: Remove __reduce__() and __reduce_ex__() methods
that always raise  in the C implementation of
, io.BufferedReader, io.BufferedWriter
and io.BufferedRandom and replace them with default
__getstate__() methods that raise . This restores
fine details of behavior of Python 3.11 and older versions.
: hashlib.file_digest() now raises BlockingIOError
when no data is available during non-blocking I/O. Before, it added
spurious null bytes to the digest.
: html.parser.HTMLParser.close() no longer loses data when
the  tag is not closed. Patch by Waylan Limberg.
: Fix html.parser.HTMLParser to not unescape character
entities in attribute values if they are followed by an ASCII alphanumeric
or an equals sign.
: Keep a reference to original  windows in
subwindows so that the original window does not get deleted before
subwindows.

================================================================================

# Changelog - Library (Part 2)

: ast.dump() now only omits  and  values if
they are default values.

: Fix parsing long IPv6 addresses with embedded IPv4 address.

: Built-in HACL* and OpenSSL implementations of hash function
constructors now correctly accept the same documented named arguments.
For instance,  could be previously invoked as
md5(data=data) or md5(string=string) depending on the underlying
implementation but these calls were not compatible. Patch by BÃ©nÃ©dikt
Tran.

: curses.window.getch() now correctly handles signals.
Patch by BÃ©nÃ©dikt Tran.

: multiprocessing.freeze_support() now checks for work on
any âspawnâ start method platform rather than only on Windows.

: Fix  to not close subprocess pipes which would
otherwise error out when the event loop is already closed.

: Fixed UnboundLocalError that could occur during
 header parsing if an expected trailing delimiter is missing
in some contexts.

: Remove import of C implementation of  from
Python implementation which has its own implementation

: Emit RuntimeWarning in the Python implementation of
 when the file-like object is not closed
explicitly in the presence of multiple I/O layers.

================================================================================

# Changelog - Library (Part 3)

: The  module now handles UnicodeEncodeError
in the same way as  when cannot extract a member.

: Fix interaction of the new  and 
showrefcount command line option.

: The generated directory listing page in
http.server.SimpleHTTPRequestHandler now only shows the decoded
path component of the requested URL, and not the query and fragment.

: Fix handling paths that end with a percent-encoded slash
( or ) in http.server.SimpleHTTPRequestHandler.

: : fix collisions in __hash__()
for IPv4Network and IPv6Network
objects.

: In 3.13.3 we accidentally changed the signature of the asyncio
create_task() family of methods and how it calls a custom task factory
in a backwards incompatible way. Since some 3rd party libraries have
already made changes to work around the issue that might break if we
simply reverted the changes, weâre instead changing things to be backwards
compatible with 3.13.2 while still supporting those workarounds for
3.13.3. In particular, the special-casing of  and  is
back (until 3.14) and consequently eager tasks may still find that their
name hasnât been set before they execute their first yielding await.

================================================================================

# Changelog - Library (Part 4)

: Raise ValueError in  if  returns a
negative file-descriptor in the Python implementation of  to
match the C implementation.

: Fix handling of invalid markup declarations in
html.parser.HTMLParser.

: random.getrandbits() can now generate more that 2 bits. random.randbytes() can now generate more that 256
MiB.

: Fix attribute caching issue when setting
ctypes._Pointer._type_ in the undocumented and deprecated
ctypes.SetPointerType() function and the undocumented
set_type() method.

:  on Windows doesnât round subnormal results before
Windows 11, but should.  Pythonâs math.ldexp() wrapper now does
round them, so results may change slightly, in rare cases of very small
results, on Windows versions before 11.

: Use original timeout value for subprocess.TimeoutExpired
when the func subprocess.run() is called with a timeout instead of
sometimes a confusing partial remaining time out value used internally on
the final .

: xml.etree.ElementTree: Fix a crash in
Element.__deepcopy__ when the element is
concurrently mutated. Patch by BÃ©nÃ©dikt Tran.

: Bump the version of pip bundled in ensurepip to version 25.1.1

: Fix error when  is suspended, then resumed and
terminated.

================================================================================

# Changelog - Library (Part 5)

: Fix a crash when using    and    in
a ctypes.Structure.

: Include the valid typecode âwâ in the error message when an
invalid typecode is passed to array.array.

: Fix  on Windows: characters entered via AltGr are
swallowed. Patch by Chris Eibl.

: Fix support of Bluetooth sockets on NetBSD and DragonFly BSD.

: QueueListener.start now raises a RuntimeError
if the listener is already started.

: Fix a  pointer dereference when a C function called
using  with   returns
.

: Fix instance error suggestions trigger potential exceptions in
object.__getattr__() in .

: A traceback.TracebackException now correctly renders
the __context__ and  attributes from  , and the exceptions attribute from falsey
ExceptionGroup.

: Fixed the SystemError in  when locating
the actual C function of a method raises an exception.

: Prevent exceptions that evaluate as falsey (namely, when their
 method returns  or their  method returns
0) from being ignored by concurrent.futures.ProcessPoolExecutor
and concurrent.futures.ThreadPoolExecutor.

================================================================================

# Changelog - Library (Part 6)

: Respect follow_wrapped for __init__() and
 methods when getting the class signature for a class with
inspect.signature(). Preserve class signature after wrapping with
warnings.deprecated(). Patch by Xuehai Pan.

: Ignore log messages generated during handling of log messages,
to avoid deadlock or infinite recursion. [NOTE: This change has since been
reverted.]

: Improve error reporting for incorrect format in
time.strptime().

: Systems using LibreSSL now successfully build.

: Avoid exiting the new REPL and offer suggestions even if there
are non-string candidates when errors occur.

: Fix configparser.ConfigParser parsing empty
interpolation with allow_no_value set to .

: Fix REPL traceback reporting when using  with an
inexisting file. Patch by BÃ©nÃ©dikt Tran.

: http.cookiejar.join_header_words() is now more similar
to the original Perl version. It now quotes the same set of characters and
always quote values that end with .

: Fix missing socket.CAN_RAW_ERR_FILTER constant in the
socket module on Linux systems. It was missing since Python 3.11.

================================================================================

# Changelog - Library (Part 7)

: Turn on virtual terminal mode and enable bracketed paste in
REPL on Windows console. (If the terminal does not support bracketed
paste, enabling it does nothing.)

: Remove __reduce__() and __reduce_ex__() methods
that always raise  in the C implementation of
, io.BufferedReader, io.BufferedWriter
and io.BufferedRandom and replace them with default
__getstate__() methods that raise . This restores
fine details of behavior of Python 3.11 and older versions.

: hashlib.file_digest() now raises BlockingIOError
when no data is available during non-blocking I/O. Before, it added
spurious null bytes to the digest.

: html.parser.HTMLParser.close() no longer loses data when
the  tag is not closed. Patch by Waylan Limberg.

: Fix html.parser.HTMLParser to not unescape character
entities in attribute values if they are followed by an ASCII alphanumeric
or an equals sign.

: Keep a reference to original  windows in
subwindows so that the original window does not get deleted before
subwindows.

================================================================================

# Changelog - IDLE

List:
: fix IDLE: no Shell menu item in single-process mode.

: fix IDLE: no Shell menu item in single-process mode.

================================================================================

# Changelog - Documentation

List:
: Move documentation and example code for
threading.local from its docstring to the official docs.

: Move documentation and example code for
threading.local from its docstring to the official docs.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix crash when iterating over lines in a text file on the
free threaded build.
: No longer call  twice in list comprehensions. This
brings the behavior of list comprehensions in line with other forms of
iteration
: Fix RuntimeError when using a not-started
threading.Thread after calling 
: Fixes an edge case where PyREPL improperly threw an error when
Python is invoked on a read only filesystem while trying to write history
file entries.
: Fix a use-after-free bug that occurs when an imported module
isnât in sys.modules after its initial import. Patch by
Nico-Posada.
: Fix hashtable in dict can be bigger than intended in some
situations.
: Fix crash in the free threading build when accessing an
object attribute that may be concurrently inserted or deleted.
: fromkeys() no longer loops forever when adding a
small set of keys to a large base dict. Patch by Angela Liss.
: Fix a possible memory leak that could occur when directly
accessing instance dictionaries () that later become part of a
reference cycle.
: Raise ValueError when constants ,  or
 are used as an identifier after NFKC normalization.
: Fix crash upon setting an attribute with a 
subclass. Patch by Victor Stinner.
: Fix two races in the type lookup cache.  This affected the
free-threaded build and could cause crashes (apparently quite difficult to
trigger).
: Fix repr(list) race condition: hold a strong reference to
the item while calling repr(item). Patch by Victor Stinner.
: Fix a crash when calling  of a
 with a  second argument.
: Update Thread.native_id
after  to ensure accuracy. Patch by Noam Cohen.
: Fix decoding from the locale encoding in the C.UTF-8 locale.
: Compiler warnings originating from the same module and line
number are now only emitted once, matching the behaviour of warnings
emitted from user code. This can also be configured with 
filters.
: No longer call  twice when creating and executing a
generator expression. Creating a generator expression from a non-interable
will raise only when the generator expression is executed. This brings the
behavior of generator expressions in line with other generators.
: Handle uncaught exceptions in the main input loop for the new
REPL.
: Fix support of unicode characters with two or more codepoints
on Windows in the new REPL.
: Fix support of unicode characters on Windows in the new REPL.
: Fixed an assertion error for  passed a string
 and a non- . Patch by Bartosz SÅawecki.
: Fix a bug that was allowing newlines inconsitently in format
specifiers for single-quoted f-strings. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix crash when iterating over lines in a text file on the
free threaded build.

: No longer call  twice in list comprehensions. This
brings the behavior of list comprehensions in line with other forms of
iteration

: Fix RuntimeError when using a not-started
threading.Thread after calling

: Fixes an edge case where PyREPL improperly threw an error when
Python is invoked on a read only filesystem while trying to write history
file entries.

: Fix a use-after-free bug that occurs when an imported module
isnât in sys.modules after its initial import. Patch by
Nico-Posada.

: Fix hashtable in dict can be bigger than intended in some
situations.

: Fix crash in the free threading build when accessing an
object attribute that may be concurrently inserted or deleted.

: fromkeys() no longer loops forever when adding a
small set of keys to a large base dict. Patch by Angela Liss.

: Fix a possible memory leak that could occur when directly
accessing instance dictionaries () that later become part of a
reference cycle.

: Raise ValueError when constants ,  or
 are used as an identifier after NFKC normalization.

: Fix crash upon setting an attribute with a 
subclass. Patch by Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix two races in the type lookup cache.  This affected the
free-threaded build and could cause crashes (apparently quite difficult to
trigger).

: Fix repr(list) race condition: hold a strong reference to
the item while calling repr(item). Patch by Victor Stinner.

: Fix a crash when calling  of a
 with a  second argument.

: Update Thread.native_id
after  to ensure accuracy. Patch by Noam Cohen.

: Fix decoding from the locale encoding in the C.UTF-8 locale.

: Compiler warnings originating from the same module and line
number are now only emitted once, matching the behaviour of warnings
emitted from user code. This can also be configured with 
filters.

: No longer call  twice when creating and executing a
generator expression. Creating a generator expression from a non-interable
will raise only when the generator expression is executed. This brings the
behavior of generator expressions in line with other generators.

: Handle uncaught exceptions in the main input loop for the new
REPL.

: Fix support of unicode characters with two or more codepoints
on Windows in the new REPL.

: Fix support of unicode characters on Windows in the new REPL.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fixed an assertion error for  passed a string
 and a non- . Patch by Bartosz SÅawecki.

: Fix a bug that was allowing newlines inconsitently in format
specifiers for single-quoted f-strings. Patch by Pablo Galindo.

================================================================================

# Changelog - C API

List:
: Fix an overflow when handling the  format in Py_BuildValue(). Patch by
BÃ©nÃ©dikt Tran.

: Fix an overflow when handling the  format in Py_BuildValue(). Patch by
BÃ©nÃ©dikt Tran.

================================================================================

# Changelog - Build

List:
: Windows builds with profile-guided optimization enabled now use
/GENPROFILE and /USEPROFILE instead of deprecated 
options.
: iOS compiler shims now include IPHONEOS_DEPLOYMENT_TARGET
in target triples, ensuring that SDK version minimums are honored.
: Fix compilation process with --enable-optimizations and
--without-docstrings.
: The  script now allows passing
--include-tcltk on Windows ARM64.
: AIX linker donât support -h option, so avoid it through
platform check
: Fix use of undefined identifiers in platform triplet detection
on MIPS Linux platforms.

: Windows builds with profile-guided optimization enabled now use
/GENPROFILE and /USEPROFILE instead of deprecated 
options.

: iOS compiler shims now include IPHONEOS_DEPLOYMENT_TARGET
in target triples, ensuring that SDK version minimums are honored.

: Fix compilation process with --enable-optimizations and
--without-docstrings.

: The  script now allows passing
--include-tcltk on Windows ARM64.

: AIX linker donât support -h option, so avoid it through
platform check

: Fix use of undefined identifiers in platform triplet detection
on MIPS Linux platforms.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to use Tcl/Tk 8.6.16.
: Update macOS installer to use OpenSSL 3.0.16. Patch by BÃ©nÃ©dikt
Tran.
: Update macOS installer to ship with SQLite 3.49.1.
: Update macOS installer to use ncurses 6.5.

: Update macOS installer to use Tcl/Tk 8.6.16.

: Update macOS installer to use OpenSSL 3.0.16. Patch by BÃ©nÃ©dikt
Tran.

: Update macOS installer to ship with SQLite 3.49.1.

: Update macOS installer to use ncurses 6.5.

================================================================================

# Changelog - Windows

List:
: Update bundled version of OpenSSL to 3.0.16. The new build also
disables uplink support, which may be relevant to embedders but has no
impact on normal use.
: Update Windows installer to ship with SQLite 3.49.1.
: pylauncher correctly detects a BOM
when searching for the shebang. Fix by Chris Eibl.

: Update bundled version of OpenSSL to 3.0.16. The new build also
disables uplink support, which may be relevant to embedders but has no
impact on normal use.

: Update Windows installer to ship with SQLite 3.49.1.

: pylauncher correctly detects a BOM
when searching for the shebang. Fix by Chris Eibl.

================================================================================

# Changelog - Tools/Demos

List:
:  no longer adds the POT-Creation-Date to
generated  files for consistency with GNU .
: Correctly reset  when compiling messages in
.
: The iOS testbed now correctly handles symlinks used as Python
framework references.

:  no longer adds the POT-Creation-Date to
generated  files for consistency with GNU .

: Correctly reset  when compiling messages in
.

: The iOS testbed now correctly handles symlinks used as Python
framework references.

================================================================================

# Changelog - Tests

List:
: test_ssl.test_dh_params is skipped if the underlying TLS
library does not support finite-field ephemeral Diffie-Hellman.
: Multiple iOS testbed runners can now be started at the same
time without introducing an ambiguity over simulator ownership.
: The iOS testbed will now run successfully on a machine that has
not previously run Xcode tests (such as CI configurations).
: The tests of terminal colorization are no longer sensitive to
the value of the  variable in the testing environment.
: Add unit tests for pyrepl.

: test_ssl.test_dh_params is skipped if the underlying TLS
library does not support finite-field ephemeral Diffie-Hellman.

: Multiple iOS testbed runners can now be started at the same
time without introducing an ambiguity over simulator ownership.

: The iOS testbed will now run successfully on a machine that has
not previously run Xcode tests (such as CI configurations).

: The tests of terminal colorization are no longer sensitive to
the value of the  variable in the testing environment.

: Add unit tests for pyrepl.

================================================================================

# Changelog - Security (Part 1)

List:
: Update bundled libexpat to 2.7.1
: Upgrade to libexpat 2.7.0
: Avoid unbounded buffering for
tempfile.SpooledTemporaryFile.writelines(). Previously, disk
spillover was only checked after the lines iterator had been exhausted.
This is now done after each line is written.
: Fix bug in the folding of rfc2047 encoded-words when flattening
an email message using a modern email policy. Previously when an
encoded-word was too long for a line, it would be decoded, split across
lines, and re-encoded. But commas and other special characters in the
original text could be left unencoded and unquoted. This could
theoretically be used to spoof header lines using a carefully constructed
encoded-word if the resulting rendered email was transmitted or re-parsed.

: Update bundled libexpat to 2.7.1

: Upgrade to libexpat 2.7.0

: Avoid unbounded buffering for
tempfile.SpooledTemporaryFile.writelines(). Previously, disk
spillover was only checked after the lines iterator had been exhausted.
This is now done after each line is written.

================================================================================

# Changelog - Security (Part 2)

: Fix bug in the folding of rfc2047 encoded-words when flattening
an email message using a modern email policy. Previously when an
encoded-word was too long for a line, it would be decoded, split across
lines, and re-encoded. But commas and other special characters in the
original text could be left unencoded and unquoted. This could
theoretically be used to spoof header lines using a carefully constructed
encoded-word if the resulting rendered email was transmitted or re-parsed.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix function name in error message of
_interpreters.run_string.
: Fix crash of _interpreters.run_string on string subclasses.
: Introduce new _PYTHON_SUBPROCESS_USE_POSIX_SPAWN
environment variable knob in subprocess to control the use of
os.posix_spawn().
: Do not shadow user arguments in generated  by
decorator warnings.deprecated. Patch by Xuehai Pan.
: Fix possible use of  address structures with
uninitialized members. Now all structure members are initialized with
zeroes by default.
: Fix crash when deallocating contextvars.ContextVar
with weird unahashable string names.
: : Fix code parsing AF_BLUETOOTH socket addresses.
: Fix a resource leak when constructing a gzip.GzipFile
with a filename fails, for example when passing an invalid
compresslevel.
: Fix sendfile fallback implementation to drain data after
writing to transport in .
: Fix incorrect argument passing in
warnings.warn_explicit().
: Use monospace font from System Font Stack for cross-platform
support in difflib.HtmlDiff.
: The PyConfig.use_system_logger attribute, introduced in
Python 3.13.2, has been removed. The introduction of this attribute
inadvertently introduced an ABI breakage on macOS and iOS. The use of the
system logger is now enabled by default on iOS, and disabled by default on
macOS.
: Fix issue with __contains__, values, and pseudo-members for
.
: Fix pure-Python implementation of
datetime.time.fromisoformat() to reject times with spaces in
fractional part (for example, 12:34:56.400 ), matching the C
implementation. Patch by MichaÅ Gorny.
: Add validation for numeric response data in poplib.POP3.stat()
method
: Remove   directives from the  module
documentation. These directives previously created entries in the general
index for  as well as the ,
, , and 
constructor functions.
: The zipapp module now calculates the list of files to be added
to the archive before creating the archive. This avoids accidentally
including the target when it is being created in the source directory.
: Fix corner case for random.sample() allowing the 
parameter to specify an empty population. So now, sample([], 
counts=[]) and sample('abc',  counts=[0,   both give the
same result as sample([], .
: Fix regression in traceback.print_last().
: Fix crash in  with only 
third argument.
: Reverts a change in the previous release attempting to make
some stdlib imports used within the subprocess module lazy as this
was causing errors during  finalizers calling methods such as
, or , or send_signal.
: Fixed failure to raise  in
inspect.Signature.bind() for positional-only arguments provided by
keyword when a variadic keyword argument (e.g. ) is present.
: Fix reference leaks in _hashlib.hmac_new() and
_hashlib.hmac_digest(). Patch by BÃ©nÃ©dikt Tran.
: Fix asyncio.AbstractEventloop.run_forever() when another
loop is already running.
: Fix gzip.GzipFile raising an unraisable exception
during garbage collection when referring to a temporary object by breaking
the reference loop with .
: Remove broken functools.singledispatchmethod() caching
introduced in .
: Update bundled pip to 25.0.1
: Update the deprecation warning of
importlib.abc.Loader.load_module().
: Update the locale alias mapping in the  module to
match the latest X Org locale alias mapping and support new locales in
Glibc 2.41.
: Fix bugs where sqlite3.Row objects could segfault if
their inherited description was set to .
Patch by Erlend Aasland.
: Execution of multiple statements in the new REPL now stops
immediately upon the first exception encountered. Patch by Bartosz
SÅawecki.
: Fix reading duplicated entries in  by name.
Reading duplicated entries (except the last one) by  now emits
a warning instead of raising an exception.
: Fix  for methods with the __module__ attribute
equal to .
: Scheduled the deprecation of the check_home argument of
sysconfig.is_python_build() to Python 3.15.
: Fix possible extra reference when using objects returned by
hashlib.sha256() under free threading.
: Fix mimetypes.guess_type() to use default mapping for
empty Content-Type in registry.
: Support the  keyword argument for eager tasks in
asyncio.loop.create_task(),  asyncio.create_task() and
asyncio.TaskGroup.create_task(), by passing on all  to the
task factory set by asyncio.loop.set_task_factory().
: Fix  on Windows to support more keybindings, like the
- and - word-skipping keybindings and those
with meta (i.e. ), e.g. - to  or
- backward-kill-word.
: xml.etree.ElementTree: Fix a crash in
Element.find,
Element.findtext and
Element.findall when the
tag to find implements an  method mutating the
element being queried. Patch by BÃ©nÃ©dikt Tran.
: Fix handling of the  argument of
logging.handlers.SMTPHandler.
: xml.etree.ElementTree: Fix a crash in
Element.remove when the
element is concurrently mutated. Patch by BÃ©nÃ©dikt Tran.
: Fixed intermittent failures of os.confstr,
os.pathconf and os.sysconf on iOS and Android.
: Non-printing characters are now properly handled in the new
REPL.

================================================================================

# Changelog - Library (Part 2)

: Fix function name in error message of
_interpreters.run_string.

: Fix crash of _interpreters.run_string on string subclasses.

: Introduce new _PYTHON_SUBPROCESS_USE_POSIX_SPAWN
environment variable knob in subprocess to control the use of
os.posix_spawn().

: Do not shadow user arguments in generated  by
decorator warnings.deprecated. Patch by Xuehai Pan.

: Fix possible use of  address structures with
uninitialized members. Now all structure members are initialized with
zeroes by default.

: Fix crash when deallocating contextvars.ContextVar
with weird unahashable string names.

: : Fix code parsing AF_BLUETOOTH socket addresses.

: Fix a resource leak when constructing a gzip.GzipFile
with a filename fails, for example when passing an invalid
compresslevel.

: Fix sendfile fallback implementation to drain data after
writing to transport in .

: Fix incorrect argument passing in
warnings.warn_explicit().

: Use monospace font from System Font Stack for cross-platform
support in difflib.HtmlDiff.

================================================================================

# Changelog - Library (Part 3)

: The PyConfig.use_system_logger attribute, introduced in
Python 3.13.2, has been removed. The introduction of this attribute
inadvertently introduced an ABI breakage on macOS and iOS. The use of the
system logger is now enabled by default on iOS, and disabled by default on
macOS.

: Fix issue with __contains__, values, and pseudo-members for
.

: Fix pure-Python implementation of
datetime.time.fromisoformat() to reject times with spaces in
fractional part (for example, 12:34:56.400 ), matching the C
implementation. Patch by MichaÅ Gorny.

: Add validation for numeric response data in poplib.POP3.stat()
method

: Remove   directives from the  module
documentation. These directives previously created entries in the general
index for  as well as the ,
, , and 
constructor functions.

: The zipapp module now calculates the list of files to be added
to the archive before creating the archive. This avoids accidentally
including the target when it is being created in the source directory.

: Fix corner case for random.sample() allowing the 
parameter to specify an empty population. So now, sample([], 
counts=[]) and sample('abc',  counts=[0,   both give the
same result as sample([], .

================================================================================

# Changelog - Library (Part 4)

: Fix regression in traceback.print_last().

: Fix crash in  with only 
third argument.

: Reverts a change in the previous release attempting to make
some stdlib imports used within the subprocess module lazy as this
was causing errors during  finalizers calling methods such as
, or , or send_signal.

: Fixed failure to raise  in
inspect.Signature.bind() for positional-only arguments provided by
keyword when a variadic keyword argument (e.g. ) is present.

: Fix reference leaks in _hashlib.hmac_new() and
_hashlib.hmac_digest(). Patch by BÃ©nÃ©dikt Tran.

: Fix asyncio.AbstractEventloop.run_forever() when another
loop is already running.

: Fix gzip.GzipFile raising an unraisable exception
during garbage collection when referring to a temporary object by breaking
the reference loop with .

: Remove broken functools.singledispatchmethod() caching
introduced in .

: Update bundled pip to 25.0.1

: Update the deprecation warning of
importlib.abc.Loader.load_module().

: Update the locale alias mapping in the  module to
match the latest X Org locale alias mapping and support new locales in
Glibc 2.41.

================================================================================

# Changelog - Library (Part 5)

: Fix bugs where sqlite3.Row objects could segfault if
their inherited description was set to .
Patch by Erlend Aasland.

: Execution of multiple statements in the new REPL now stops
immediately upon the first exception encountered. Patch by Bartosz
SÅawecki.

: Fix reading duplicated entries in  by name.
Reading duplicated entries (except the last one) by  now emits
a warning instead of raising an exception.

: Fix  for methods with the __module__ attribute
equal to .

: Scheduled the deprecation of the check_home argument of
sysconfig.is_python_build() to Python 3.15.

: Fix possible extra reference when using objects returned by
hashlib.sha256() under free threading.

: Fix mimetypes.guess_type() to use default mapping for
empty Content-Type in registry.

: Support the  keyword argument for eager tasks in
asyncio.loop.create_task(),  asyncio.create_task() and
asyncio.TaskGroup.create_task(), by passing on all  to the
task factory set by asyncio.loop.set_task_factory().

: Fix  on Windows to support more keybindings, like the
- and - word-skipping keybindings and those
with meta (i.e. ), e.g. - to  or
- backward-kill-word.

================================================================================

# Changelog - Library (Part 6)

: xml.etree.ElementTree: Fix a crash in
Element.find,
Element.findtext and
Element.findall when the
tag to find implements an  method mutating the
element being queried. Patch by BÃ©nÃ©dikt Tran.

: Fix handling of the  argument of
logging.handlers.SMTPHandler.

: xml.etree.ElementTree: Fix a crash in
Element.remove when the
element is concurrently mutated. Patch by BÃ©nÃ©dikt Tran.

: Fixed intermittent failures of os.confstr,
os.pathconf and os.sysconf on iOS and Android.

: Non-printing characters are now properly handled in the new
REPL.

================================================================================

# Changelog - IDLE

List:
: Simplify displaying the IDLE doc by only copying the text
section of idle.html to idlelib/help.html. Patch by Stan Ulbrych.

: Simplify displaying the IDLE doc by only copying the text
section of idle.html to idlelib/help.html. Patch by Stan Ulbrych.

================================================================================

# Changelog - Documentation

List:
: Mention asyncio.Future and asyncio.Task in
generic classes list.
: Require Sphinx 8.2.0 or later to build the Python
documentation. Patch by Adam Turner.
: The wheel tags supported by each macOS universal SDK option are
now documented.
: C API: Document PyUnicode_RSplit(),
PyUnicode_Partition() and PyUnicode_RPartition().

: Mention asyncio.Future and asyncio.Task in
generic classes list.

: Require Sphinx 8.2.0 or later to build the Python
documentation. Patch by Adam Turner.

: The wheel tags supported by each macOS universal SDK option are
now documented.

: C API: Document PyUnicode_RSplit(),
PyUnicode_Partition() and PyUnicode_RPartition().

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix crash when calling list.append() as an unbound
method.
: Fix a crash when using an unbound method descriptor
object in a function where a bound method descriptor was used.
: Fix a performance regression that caused scaling bottlenecks in
the free threaded build in 3.13.1 and 3.13.2.
: Fix missing NULL check in _PyMem_FreeDelayed in
free-threaded build.
: Fix  failing on sync __anext__()
raising an exception.
: Fix data race in sys.monitoring instrumentation while
registering callback.
: Fix incorrect exception handling in
_PyModule_IsPossiblyShadowing
: Fix a crash in the free threading build when
constructing a  object with 
that contains instances of types that are not otherwise generated by the
bytecode compiler.
: Fix memory leak in the free threaded
build when resizing a shared list or dictionary from multiple short-lived
threads.
: Do not crash on negative  and end_column in
 locations.
: Fix PyRefTracer_DESTROY not being sent from
Python/ceval.c Py_DECREF().
: Fix a bug that was causing UnicodeDecodeError or
SystemError to be raised when using f-strings with 
expressions with non-ASCII characters. Patch by Pablo Galindo
: Fix possible crashes related to concurrent change and use of
the  module attributes.
: Fixing multiprocessing Resource Tracker process leaking, usually
observed when running Python as PID 1.
: Fix an issue with thread identifiers being sign-extended on
some platforms.
: Fix a crash that occurs when calling  inside an
inline comprehension that uses the same local variable as the outer frame
scope where the variable is a free or cell var.
: Fix location for SyntaxErrors of invalid escapes in the
tokenizer. Patch by Pablo Galindo
: Fix data race in compile_template in .
: Fix a race condition in the free threading build when
 is called concurrently with set.clear().
: Fix return codes inside SystemExit not getting returned
by the REPL.
: Fixed a race in _Py_qsbr_reserve in the free threading
build.
: Fix thread safety of PyList_Insert() in free-threading
builds.
: Fix race condition when raising MemoryError in the free
threaded build.
: Fix thread safety of PyList_SetItem() in free-threading
builds. Patch by Kumar Aditya.
: Fix the potential races in get/set dunder methods
__annotations__, __annotate__ and __type_params__ for function
object, and add related tests.
: Disallow __classdict__ as the name of a type parameter.
Using this name would previously crash the interpreter in some
circumstances.
: The time to handle a  event in sys.monitoring (and
sys.settrace) is now independent of the number of lines in the code
object.
:  __future__  barry_as_FLUFL now works in more
contexts, including when it is used in files, with the  flag, and in
the REPL when there are multiple statements on the same line. Previously,
it worked only on subsequent lines in the REPL, and when the appropriate
flags were passed directly to . Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix crash when calling list.append() as an unbound
method.

: Fix a crash when using an unbound method descriptor
object in a function where a bound method descriptor was used.

: Fix a performance regression that caused scaling bottlenecks in
the free threaded build in 3.13.1 and 3.13.2.

: Fix missing NULL check in _PyMem_FreeDelayed in
free-threaded build.

: Fix  failing on sync __anext__()
raising an exception.

: Fix data race in sys.monitoring instrumentation while
registering callback.

: Fix incorrect exception handling in
_PyModule_IsPossiblyShadowing

: Fix a crash in the free threading build when
constructing a  object with 
that contains instances of types that are not otherwise generated by the
bytecode compiler.

: Fix memory leak in the free threaded
build when resizing a shared list or dictionary from multiple short-lived
threads.

: Do not crash on negative  and end_column in
 locations.

: Fix PyRefTracer_DESTROY not being sent from
Python/ceval.c Py_DECREF().

: Fix a bug that was causing UnicodeDecodeError or
SystemError to be raised when using f-strings with 
expressions with non-ASCII characters. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix possible crashes related to concurrent change and use of
the  module attributes.

: Fixing multiprocessing Resource Tracker process leaking, usually
observed when running Python as PID 1.

: Fix an issue with thread identifiers being sign-extended on
some platforms.

: Fix a crash that occurs when calling  inside an
inline comprehension that uses the same local variable as the outer frame
scope where the variable is a free or cell var.

: Fix location for SyntaxErrors of invalid escapes in the
tokenizer. Patch by Pablo Galindo

: Fix data race in compile_template in .

: Fix a race condition in the free threading build when
 is called concurrently with set.clear().

: Fix return codes inside SystemExit not getting returned
by the REPL.

: Fixed a race in _Py_qsbr_reserve in the free threading
build.

: Fix thread safety of PyList_Insert() in free-threading
builds.

: Fix race condition when raising MemoryError in the free
threaded build.

: Fix thread safety of PyList_SetItem() in free-threading
builds. Patch by Kumar Aditya.

: Fix the potential races in get/set dunder methods
__annotations__, __annotate__ and __type_params__ for function
object, and add related tests.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Disallow __classdict__ as the name of a type parameter.
Using this name would previously crash the interpreter in some
circumstances.

: The time to handle a  event in sys.monitoring (and
sys.settrace) is now independent of the number of lines in the code
object.

:  __future__  barry_as_FLUFL now works in more
contexts, including when it is used in files, with the  flag, and in
the REPL when there are multiple statements on the same line. Previously,
it worked only on subsequent lines in the REPL, and when the appropriate
flags were passed directly to . Patch by Pablo Galindo.

================================================================================

# Changelog - C API

List:
: Update PyUnstable_GC_VisitObjects to traverse perm gen.
: Update PyGC_Enable(), PyGC_Disable(),
PyGC_IsEnabled() to use atomic operation for thread-safety at
free-threading build. Patch by Donghee Na.

: Update PyUnstable_GC_VisitObjects to traverse perm gen.

: Update PyGC_Enable(), PyGC_Disable(),
PyGC_IsEnabled() to use atomic operation for thread-safety at
free-threading build. Patch by Donghee Na.

================================================================================

# Changelog - Build

List:
: The DTrace build now properly passes the  and 
variables to the  command when utilizing SystemTap on Linux.
: Fix mimalloc library builds for 32-bit ARM targets.
: Fix potential  when handling object sections during
JIT building process.
: Ensure that  is included before 
unless pyconfig.h is included before or in some platform-specific
contexts.
: Donât redefine _Py_NO_SANITIZE_UNDEFINED when compiling
with a recent GCC version and undefined sanitizer enabled.
: Drop test_embed from PGO training, whose contribution in
recent versions is considered to be ignorable.

: The DTrace build now properly passes the  and 
variables to the  command when utilizing SystemTap on Linux.

: Fix mimalloc library builds for 32-bit ARM targets.

: Fix potential  when handling object sections during
JIT building process.

: Ensure that  is included before 
unless pyconfig.h is included before or in some platform-specific
contexts.

: Donât redefine _Py_NO_SANITIZE_UNDEFINED when compiling
with a recent GCC version and undefined sanitizer enabled.

: Drop test_embed from PGO training, whose contribution in
recent versions is considered to be ignorable.

================================================================================

# Changelog - macOS

List:
: Usage of the unified Apple System Log APIs was disabled when
the minimum macOS version is earlier than 10.12.

: Usage of the unified Apple System Log APIs was disabled when
the minimum macOS version is earlier than 10.12.

================================================================================

# Changelog - Windows

List:
: Allow to force color output on Windows using environment
variables. Patch by Andrey Efremov.

: Allow to force color output on Windows using environment
variables. Patch by Andrey Efremov.

================================================================================

# Changelog - Tools/Demos

List:
: The iOS test runner now strips the log prefix from each line
output by the test suite.
: Fix a bug where Argument Clinicâs C pre-processor parser tried
to parse pre-processor directives inside C comments. Patch by Erlend
Aasland.

: The iOS test runner now strips the log prefix from each line
output by the test suite.

: Fix a bug where Argument Clinicâs C pre-processor parser tried
to parse pre-processor directives inside C comments. Patch by Erlend
Aasland.

================================================================================

# Changelog - Tests

List:
: Test the limited C API in test_cppext. Patch by Victor Stinner.
: Add tests for the  command-line interface. Patch by
BÃ©nÃ©dikt Tran.
: iOS test results are now streamed during test execution, and
the deprecated xcresulttool is no longer used.

: Test the limited C API in test_cppext. Patch by Victor Stinner.

: Add tests for the  command-line interface. Patch by
BÃ©nÃ©dikt Tran.

: iOS test results are now streamed during test execution, and
the deprecated xcresulttool is no longer used.

================================================================================

# Changelog - Security (Part 1)

List:
: When using urllib.parse.urlsplit() and
urllib.parse.urlparse() host parsing would not reject domain names
containing square brackets ( and ). Square brackets are only
valid for IPv6 and IPvFuture hosts according to RFC 3986 Section 3.2.2.
: Fixed the
asyncio.selector_events._SelectorSocketTransport transport not
pausing writes for the protocol when the buffer reaches the high water
mark when using asyncio.WriteTransport.writelines().
: Fix a possible  pointer dereference in
PySys_AddWarnOptionUnicode().
: Fix bug in the folding of quoted strings when flattening an
email message using a modern email policy. Previously when a quoted string
was folded so that it spanned more than one line, the surrounding quotes
and internal escapes would be omitted. This could theoretically be used to
spoof header lines using a carefully constructed quoted string if the
resulting rendered email was transmitted or re-parsed.
: Fix a potential denial of service in the  module.
When connecting to a malicious server, it could cause an arbitrary amount
of memory to be allocated. On many systems this is harmless as unused
virtual memory is only a mapping, but if this hit a virtual address size
limit it could lead to a MemoryError or other process crash. On
unusual systems or builds where all allocated memory is touched and backed
by actual ram or storage it couldâve consumed resources doing so until
similarly crashing.

================================================================================

# Changelog - Security (Part 2)

: When using urllib.parse.urlsplit() and
urllib.parse.urlparse() host parsing would not reject domain names
containing square brackets ( and ). Square brackets are only
valid for IPv6 and IPvFuture hosts according to RFC 3986 Section 3.2.2.

: Fixed the
asyncio.selector_events._SelectorSocketTransport transport not
pausing writes for the protocol when the buffer reaches the high water
mark when using asyncio.WriteTransport.writelines().

: Fix a possible  pointer dereference in
PySys_AddWarnOptionUnicode().

: Fix bug in the folding of quoted strings when flattening an
email message using a modern email policy. Previously when a quoted string
was folded so that it spanned more than one line, the surrounding quotes
and internal escapes would be omitted. This could theoretically be used to
spoof header lines using a carefully constructed quoted string if the
resulting rendered email was transmitted or re-parsed.

================================================================================

# Changelog - Security (Part 3)

: Fix a potential denial of service in the  module.
When connecting to a malicious server, it could cause an arbitrary amount
of memory to be allocated. On many systems this is harmless as unused
virtual memory is only a mapping, but if this hit a virtual address size
limit it could lead to a MemoryError or other process crash. On
unusual systems or builds where all allocated memory is touched and backed
by actual ram or storage it couldâve consumed resources doing so until
similarly crashing.

================================================================================

# Changelog - Library (Part 1)

List:
: Unlikely errors in preparing arguments for 
callback are now handled in the same way as errors raised in the callback
of in converting the result of the callback â using
sys.unraisablehook() instead of sys.excepthook() and not
setting sys.last_exc and other variables.
: Corrected ValueError message for
asyncio.Barrier and threading.Barrier.
: Fix an integer overflow in the  module when writing a
data field larger than 2GB.
: Improve import time of subprocess by lazy importing
 and . Patch by Taneli Hukkinen.
: In , handle out-of-memory when creating
user-defined SQL functions.
: Fix FORCE_COLOR and NO_COLOR when empty strings. Patch by Hugo
van Kemenade.
: Removed an incorrect optimization relating to eager tasks in
asyncio.TaskGroup that resulted in cancellations being missed.
: Release the enter frame reference within  callback
: Fix a  in
sysconfig.expand_makefile_vars(). Patch by BÃ©nÃ©dikt Tran.
: Fix a crash when setting state on an exhausted
array.array iterator.
: Fix traceback.TracebackException._format_syntax_error not
to fail on exceptions with custom metadata.
: Do not attempt to set SO_REUSEPORT on sockets of address
families other than  and , as it is meaningless
with these address families, and the call with fail with Linux kernel
6.12.9 and newer.
: Fix tracemalloc.stop() race condition. Fix
tracemalloc to support calling tracemalloc.stop() in one
thread, while another thread is tracing memory allocations. Patch by
Victor Stinner.
: Fix PyREPL failure when os.environ is overwritten with
an invalid value.
: Fix possible conflicts in generated  widget names
if the widget class name ends with a digit.
: Default to stdout isatty for color detection instead of stderr.
Patch by Hugo van Kemenade.
: Fix cyclic garbage introduced by
asyncio.loop.create_task() and asyncio.TaskGroup.create_task()
holding a reference to the created task if it is eager.
: Fix asyncio.staggered.staggered_race() leaking tasks and
issuing an unhandled exception.
: Fix crash when using faulthandler.dump_traceback() while
other threads are active on the free threaded
build.
: Unify the instance check for typing.Union and
types.UnionType:  now uses the instance checks
against its parameters instead of the subclass checks.
: Fix
xml.dom.xmlbuilder.DOMEntityResolver.resolveEntity(), which was
broken by the Python 3.0 transition.
: Allow xml.dom.xmlbuilder.DOMParser.parse() to correctly
handle xml.dom.xmlbuilder.DOMInputSource instances that only
have a  attribute set.
: Fix incorrect handling of negative read sizes in
HTTPResponse.read. Patch by Yury
Manushkin.
: Fixed a frame reference leak in .
: Completely support random access of uncompressed unencrypted
read-only zip files obtained by ZipFile.open.
: enum.EnumDict can now be used without resorting to
private API.
: Avoid reusing quote types in ast.unparse() if not needed.
: Revert the font of turtledemoâs menu bar to its default
value and display the shortcut keys in the correct position.
: Fix resetting the default window icon by passing default=''
to the  method wm_iconbitmap().
: Fix exceptions and incomplete writes after
asyncio._SelectorTransport is closed before writes are
completed.
: Fix quick extraction of module docstrings from a file in
. It now supports docstrings with single quotes, escape
sequences, raw string literals, and other Python syntax.
: Set TERM environment variable to âdumbâ to disable traceback
colors in IDLE, since IDLE doesnât understand ANSI escape sequences. Patch
by Victor Stinner.
: Fix support of localized error messages reported by
dlerror(3) and gdbm_strerror in
 and  functions respectively. Patch by BÃ©nÃ©dikt
Tran.
: When  is set, only ignore PYTHON_COLORS and not
FORCE_COLOR// when colourising output. Patch by
Hugo van Kemenade.
: Detect recursive calls in ctypes _as_parameter_ handling.
Patch by Victor Stinner.
: Fix the position when doing interleaved seeks and reads in
uncompressed, unencrypted zip files returned by
zipfile.ZipFile.open().
: The  module now correctly detects Windows Server
2025.
: macOS and iOS apps can now choose to redirect stdout and stderr
to the system log during interpreter configuration.
: Include <sys/pidfd.h> to get os.PIDFD_NONBLOCK constant.
Patch by Victor Stinner.
: Add missing __class_getitem__ method to the Python
implementation of functools.partial(), to make it compatible with
the C version. This is mainly relevant for alternative Python
implementations like PyPy and GraalPy, because CPython will usually use
the C-implementation of that function.
: multiprocessing.pool.Pool now properly restores
blocked signal handlers of the parent thread when creating processes via
either  or forkserver.
: Fix an issue in email.message.Message.get_payload() where
data cannot be decoded if the Content Transfer Encoding mechanism contains
trailing whitespaces or additional junk text. Patch by Hui Liu.
: In , system call failures that OpenSSL reports using
ERR_LIB_SYS are now raised as .
: Do not recreate unnamed section on every read in
configparser.ConfigParser. Patch by Andrey Efremov.
: Fix crash when dict with keys in invalid encoding were passed
to several functions in _interpreters module.
: Make linecache.checkcache() thread safe and GC
re-entrancy safe.
: Fix _pyrepl crash when entering a double CTRL-Z on an
overflowing line.
:  and  are no longer marked as
deprecated. There are legitimate reasons to use one of these modules in
preference to , and none of these modules are at risk of
being removed from the standard library. Of the three, 
remains the recommended default choice,  one of the concerns noted
at the top of the  module documentation applies.
: Fix round-trip invariance for backslash continuations in
tokenize.untokenize().
: Fixed issue in NamespaceReader where a non-path item in a
namespace path, such as a sentinel added by an editable installer, would
break resource loading.
: The http.cookies module now supports parsing obsolete
 date formats, in accordance with  requirements.
Patch by Nano Zheng.
: readline.append_history_file() now raises a
ValueError when given a negative value.
: Show tab completions menu below the current line, which results
in less janky behaviour, and fixes a cursor movement bug. Patch by Daniel
Hollas

================================================================================

# Changelog - Library (Part 2)

: Unlikely errors in preparing arguments for 
callback are now handled in the same way as errors raised in the callback
of in converting the result of the callback â using
sys.unraisablehook() instead of sys.excepthook() and not
setting sys.last_exc and other variables.

: Corrected ValueError message for
asyncio.Barrier and threading.Barrier.

: Fix an integer overflow in the  module when writing a
data field larger than 2GB.

: Improve import time of subprocess by lazy importing
 and . Patch by Taneli Hukkinen.

: In , handle out-of-memory when creating
user-defined SQL functions.

: Fix FORCE_COLOR and NO_COLOR when empty strings. Patch by Hugo
van Kemenade.

: Removed an incorrect optimization relating to eager tasks in
asyncio.TaskGroup that resulted in cancellations being missed.

: Release the enter frame reference within  callback

: Fix a  in
sysconfig.expand_makefile_vars(). Patch by BÃ©nÃ©dikt Tran.

: Fix a crash when setting state on an exhausted
array.array iterator.

: Fix traceback.TracebackException._format_syntax_error not
to fail on exceptions with custom metadata.

================================================================================

# Changelog - Library (Part 3)

: Do not attempt to set SO_REUSEPORT on sockets of address
families other than  and , as it is meaningless
with these address families, and the call with fail with Linux kernel
6.12.9 and newer.

: Fix tracemalloc.stop() race condition. Fix
tracemalloc to support calling tracemalloc.stop() in one
thread, while another thread is tracing memory allocations. Patch by
Victor Stinner.

: Fix PyREPL failure when os.environ is overwritten with
an invalid value.

: Fix possible conflicts in generated  widget names
if the widget class name ends with a digit.

: Default to stdout isatty for color detection instead of stderr.
Patch by Hugo van Kemenade.

: Fix cyclic garbage introduced by
asyncio.loop.create_task() and asyncio.TaskGroup.create_task()
holding a reference to the created task if it is eager.

: Fix asyncio.staggered.staggered_race() leaking tasks and
issuing an unhandled exception.

: Fix crash when using faulthandler.dump_traceback() while
other threads are active on the free threaded
build.

: Unify the instance check for typing.Union and
types.UnionType:  now uses the instance checks
against its parameters instead of the subclass checks.

================================================================================

# Changelog - Library (Part 4)

: Fix
xml.dom.xmlbuilder.DOMEntityResolver.resolveEntity(), which was
broken by the Python 3.0 transition.

: Allow xml.dom.xmlbuilder.DOMParser.parse() to correctly
handle xml.dom.xmlbuilder.DOMInputSource instances that only
have a  attribute set.

: Fix incorrect handling of negative read sizes in
HTTPResponse.read. Patch by Yury
Manushkin.

: Fixed a frame reference leak in .

: Completely support random access of uncompressed unencrypted
read-only zip files obtained by ZipFile.open.

: enum.EnumDict can now be used without resorting to
private API.

: Avoid reusing quote types in ast.unparse() if not needed.

: Revert the font of turtledemoâs menu bar to its default
value and display the shortcut keys in the correct position.

: Fix resetting the default window icon by passing default=''
to the  method wm_iconbitmap().

: Fix exceptions and incomplete writes after
asyncio._SelectorTransport is closed before writes are
completed.

: Fix quick extraction of module docstrings from a file in
. It now supports docstrings with single quotes, escape
sequences, raw string literals, and other Python syntax.

================================================================================

# Changelog - Library (Part 5)

: Set TERM environment variable to âdumbâ to disable traceback
colors in IDLE, since IDLE doesnât understand ANSI escape sequences. Patch
by Victor Stinner.

: Fix support of localized error messages reported by
dlerror(3) and gdbm_strerror in
 and  functions respectively. Patch by BÃ©nÃ©dikt
Tran.

: When  is set, only ignore PYTHON_COLORS and not
FORCE_COLOR// when colourising output. Patch by
Hugo van Kemenade.

: Detect recursive calls in ctypes _as_parameter_ handling.
Patch by Victor Stinner.

: Fix the position when doing interleaved seeks and reads in
uncompressed, unencrypted zip files returned by
zipfile.ZipFile.open().

: The  module now correctly detects Windows Server
2025.

: macOS and iOS apps can now choose to redirect stdout and stderr
to the system log during interpreter configuration.

: Include <sys/pidfd.h> to get os.PIDFD_NONBLOCK constant.
Patch by Victor Stinner.

: Add missing __class_getitem__ method to the Python
implementation of functools.partial(), to make it compatible with
the C version. This is mainly relevant for alternative Python
implementations like PyPy and GraalPy, because CPython will usually use
the C-implementation of that function.

================================================================================

# Changelog - Library (Part 6)

: multiprocessing.pool.Pool now properly restores
blocked signal handlers of the parent thread when creating processes via
either  or forkserver.

: Fix an issue in email.message.Message.get_payload() where
data cannot be decoded if the Content Transfer Encoding mechanism contains
trailing whitespaces or additional junk text. Patch by Hui Liu.

: In , system call failures that OpenSSL reports using
ERR_LIB_SYS are now raised as .

: Do not recreate unnamed section on every read in
configparser.ConfigParser. Patch by Andrey Efremov.

: Fix crash when dict with keys in invalid encoding were passed
to several functions in _interpreters module.

: Make linecache.checkcache() thread safe and GC
re-entrancy safe.

: Fix _pyrepl crash when entering a double CTRL-Z on an
overflowing line.

:  and  are no longer marked as
deprecated. There are legitimate reasons to use one of these modules in
preference to , and none of these modules are at risk of
being removed from the standard library. Of the three, 
remains the recommended default choice,  one of the concerns noted
at the top of the  module documentation applies.

: Fix round-trip invariance for backslash continuations in
tokenize.untokenize().

================================================================================

# Changelog - Library (Part 7)

: Fixed issue in NamespaceReader where a non-path item in a
namespace path, such as a sentinel added by an editable installer, would
break resource loading.

: The http.cookies module now supports parsing obsolete
 date formats, in accordance with  requirements.
Patch by Nano Zheng.

: readline.append_history_file() now raises a
ValueError when given a negative value.

: Show tab completions menu below the current line, which results
in less janky behaviour, and fixes a cursor movement bug. Patch by Daniel
Hollas

================================================================================

# Changelog - Documentation

List:
: Require Sphinx 8.1.3 or later to build the Python
documentation. Patch by Adam Turner.
: Document that string.printable is not printable in the
POSIX sense. In particular, string.printable.isprintable() returns . Patch by BÃ©nÃ©dikt Tran.

: Require Sphinx 8.1.3 or later to build the Python
documentation. Patch by Adam Turner.

: Document that string.printable is not printable in the
POSIX sense. In particular, string.printable.isprintable() returns . Patch by BÃ©nÃ©dikt Tran.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix null pointer dereference in syslog.openlog() when an
audit hook raises an exception.
: Fix f-strings such as f'{expr=}' sometimes not displaying
the full expression when the expression contains .
: Treat debug expressions in f-string as raw strings. Patch by
Pablo Galindo
: Add frame of  to traceback when it wraps a naked
exception.
: Fix a SystemError when using  with a
default tuple value. Patch by BÃ©nÃ©dikt Tran.
: Fix a crash when setting the recursion limit while other
threads are active on the free threaded build.
: Restore terminal control characters on REPL exit.
: Fix a bug where  does not
properly check the return value of an ExceptionGroupâs
 function, leading to a crash in some
cases. Now when  returns an invalid
object,  raises a  with
the original raised ExceptionGroup object chained to it.
: Avoid error from calling PyModule_GetFilenameObject on a
non-module object when importing a non-existent symbol from a non-module
object.
: Objects/unicodeobject.c: fix a crash on DEBUG builds in
_copy_characters when there is nothing to copy.
: Fix statistics for increments of object reference counts (in
particular, when a reference count was increased by more than 1 in a
single operation).
: When raising ImportError for missing symbols in 
imports, use  in the error message if __spec__.origin is
not a location
: Fix non-thread-safe object resurrection when calling finalizers
and watcher callbacks in the free threading build.
: The iOS compiler shims can now accept arguments with spaces.
: Add missing locks around some list assignment operations in the
free threading build.
: Fix a possible overflow when a class inherits from an absurd
number of super-classes. Reported by Valery Fedorenko. Patch by BÃ©nÃ©dikt
Tran.
: Fixed the error when resizing terminal in Python REPL. Patch by
Semyon Moroz.
: Relocated objects such as ,  and 
objects are properly tracked by tracemalloc and its associated
hooks. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix null pointer dereference in syslog.openlog() when an
audit hook raises an exception.

: Fix f-strings such as f'{expr=}' sometimes not displaying
the full expression when the expression contains .

: Treat debug expressions in f-string as raw strings. Patch by
Pablo Galindo

: Add frame of  to traceback when it wraps a naked
exception.

: Fix a SystemError when using  with a
default tuple value. Patch by BÃ©nÃ©dikt Tran.

: Fix a crash when setting the recursion limit while other
threads are active on the free threaded build.

: Restore terminal control characters on REPL exit.

: Fix a bug where  does not
properly check the return value of an ExceptionGroupâs
 function, leading to a crash in some
cases. Now when  returns an invalid
object,  raises a  with
the original raised ExceptionGroup object chained to it.

: Avoid error from calling PyModule_GetFilenameObject on a
non-module object when importing a non-existent symbol from a non-module
object.

: Objects/unicodeobject.c: fix a crash on DEBUG builds in
_copy_characters when there is nothing to copy.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix statistics for increments of object reference counts (in
particular, when a reference count was increased by more than 1 in a
single operation).

: When raising ImportError for missing symbols in 
imports, use  in the error message if __spec__.origin is
not a location

: Fix non-thread-safe object resurrection when calling finalizers
and watcher callbacks in the free threading build.

: The iOS compiler shims can now accept arguments with spaces.

: Add missing locks around some list assignment operations in the
free threading build.

: Fix a possible overflow when a class inherits from an absurd
number of super-classes. Reported by Valery Fedorenko. Patch by BÃ©nÃ©dikt
Tran.

: Fixed the error when resizing terminal in Python REPL. Patch by
Semyon Moroz.

: Relocated objects such as ,  and 
objects are properly tracked by tracemalloc and its associated
hooks. Patch by Pablo Galindo.

================================================================================

# Changelog - C API

List:
: Fix loss of callbacks after more than one call to
PyUnstable_AtExit().

: Fix loss of callbacks after more than one call to
PyUnstable_AtExit().

================================================================================

# Changelog - Build

List:
: Donât redefine  when the system has the sysexits.h
header.
: Skip BOLT optimization of functions using computed gotos,
fixing errors on build with LLVM 19.
: Fix building the  module on platforms with
libncurses but without libncursesw.
: Set  instead of  when checking if
 library functions are available. This fixes the ordering of
linked libraries during checks, which was incorrect when using a
statically linked libsqlite3.
: Fix build failure on systems without thread-locals support.

: Donât redefine  when the system has the sysexits.h
header.

: Skip BOLT optimization of functions using computed gotos,
fixing errors on build with LLVM 19.

: Fix building the  module on platforms with
libncurses but without libncursesw.

: Set  instead of  when checking if
 library functions are available. This fixes the ordering of
linked libraries during checks, which was incorrect when using a
statically linked libsqlite3.

: Fix build failure on systems without thread-locals support.

================================================================================

# Changelog - macOS

List:
: Update bundled Tcl/Tk in macOS installer to 8.6.15.

: Update bundled Tcl/Tk in macOS installer to 8.6.15.

================================================================================

# Changelog - Windows (Part 1)

List:
: Update credits command output.
: Ensures the experimental free-threaded install includes the
 module. The optional Tcl/Tk component must also be installed
in order for the module to work.
: Fixes venv failure due to missing redirector executables in
experimental free-threaded installs.
: Removed unnecessary DLLs from Windows embeddable package
: Avoid crashing in  due to slow WMI calls on some
Windows machines.
: Fix venvwlauncher to launch pythonw instead of python so no
extra console window is created.
: Fix a SystemError when sys.exit() is called with
0xffffffff on Windows.
: Enable the Python Launcher for Windows to detect Python 3.14 installs from
the Windows Store.
: Updated bundled Tcl/Tk to 8.6.15.

: Update credits command output.

: Ensures the experimental free-threaded install includes the
 module. The optional Tcl/Tk component must also be installed
in order for the module to work.

: Fixes venv failure due to missing redirector executables in
experimental free-threaded installs.

: Removed unnecessary DLLs from Windows embeddable package

: Avoid crashing in  due to slow WMI calls on some
Windows machines.

================================================================================

# Changelog - Windows (Part 2)

: Fix venvwlauncher to launch pythonw instead of python so no
extra console window is created.

: Fix a SystemError when sys.exit() is called with
0xffffffff on Windows.

: Enable the Python Launcher for Windows to detect Python 3.14 installs from
the Windows Store.

: Updated bundled Tcl/Tk to 8.6.15.

================================================================================

# Changelog - Tools/Demos

List:
: Fix extraction warnings in pygettext.py caused by
mistaking function definitions for function calls.
: The iOS testbed was modified so that it can be used by
third-party projects for testing purposes.

: Fix extraction warnings in pygettext.py caused by
mistaking function definitions for function calls.

: The iOS testbed was modified so that it can be used by
third-party projects for testing purposes.

================================================================================

# Changelog - Tests

List:
: Fix test_os extended attribute tests to work on filesystems
with 1 KiB xattr size limit.
: Re-enable skipped tests for  on the s390x
architecture: only skip checks of the compressed bytes, which can be
different between zlibâs software implementation and the
hardware-accelerated implementation.
: Add translation tests to the  module.

: Fix test_os extended attribute tests to work on filesystems
with 1 KiB xattr size limit.

: Re-enable skipped tests for  on the s390x
architecture: only skip checks of the compressed bytes, which can be
different between zlibâs software implementation and the
hardware-accelerated implementation.

: Add translation tests to the  module.

================================================================================

# Changelog - Security

List:
: Upgrade libexpat to 2.6.4
: Remove the current directory from  when using
PyREPL.
: Changed IPv4-mapped ipaddress.IPv6Address to consistently
use the mapped IPv4 address value for deciding properties. Properties
which have their behavior fixed are is_multicast, is_reserved,
is_link_local, , and is_unspecified.

: Upgrade libexpat to 2.6.4

: Remove the current directory from  when using
PyREPL.

: Changed IPv4-mapped ipaddress.IPv6Address to consistently
use the mapped IPv4 address value for deciding properties. Properties
which have their behavior fixed are is_multicast, is_reserved,
is_link_local, , and is_unspecified.

================================================================================

# Changelog - Library (Part 1)

List:
: pdb.set_trace() will not stop at an opcode that does not
have an associated line number anymore.
: Publicly expose EXACT_TOKEN_TYPES in
token.__all__.
: Fix faulthandler for trampoline frames. If the top-most frame
is a trampoline frame, skip it. Patch by Victor Stinner.
: Fix io.StringIO.__setstate__() crash, when 
was passed as the first value.
: Fix urllib.request.pathname2url() for paths starting with
multiple slashes on Posix.
: Fix shutil.which on Windows. Now it looks at direct
match if and only if the command ends with a PATHEXT extension or X_OK is
not in mode. Support extensionless files if â.â is in PATHEXT. Support
PATHEXT extensions that end with a dot.
: Support PyREPL history on Windows. Patch by devdanzin and
Victor Stinner.
: Fix issue where urllib.request.url2pathname() failed to
discard an extra slash before a UNC drive in the URL path on Windows.
: Fix issue where urllib.request.url2pathname() failed to
discard any âlocalhostâ authority present in the URL.
: Fix crash when calling a operator.methodcaller() instance
from multiple threads in the free threading build.
: Fix support of STRING and GLOBAL opcodes with non-ASCII
arguments in pickletools. pickletools.dis() now outputs
non-ASCII bytes in STRING, BINSTRING and SHORT_BINSTRING arguments as
escaped ().
: : Make grp.getgrall() thread-safe by adding a
mutex. Patch by Victor Stinner.
: Fix the representation of itertools.count objects when
the count value is sys.maxsize.
: Fix issue where urllib.request.url2pathname() and
pathname2url() always used UTF-8 when quoting and
unquoting file URIs. They now use the filesystem encoding and error
handler.
: Fix memory leaks when  expression matching
terminates abruptly, either because of a signal or because memory
allocation fails.
: Fixed the values of sysconfig.get_config_vars(),
sysconfig.get_paths(), and their siblings when the 
initialization happens after  has built a cache for
sysconfig.get_config_vars().
: Update bundled pip to 24.3.1
: Fix os.path.normpath() for drive-relative paths on
Windows.
: Fix issue where urllib.request.url2pathname() failed to
discard two leading slashes introducing an empty authority section.
: locale.nl_langinfo(locale.ERA) now returns multiple era
description segments separated by semicolons. Previously it only returned
the first segment on platforms with Glibc.
: Allow collections.abc.AsyncIterator to be a base for
Protocols.
: Fix crash when non-dict was passed to several functions in
_interpreters module.
: Limit starting a patcher (from unittest.mock.patch() or
unittest.mock.patch.object()) more than once without stopping it
: Fix a crash when instantiating itertools.count with an
initial count of sys.maxsize on debug builds. Patch by BÃ©nÃ©dikt
Tran.
: Fix issue where urllib.request.pathname2url() mishandled
Windows paths with embedded forward slashes.
: Improve performances of zipfile.Path.open() for
non-reading modes.
: Fix bugs in compiling case-insensitive 
expressions with character classes containing non-BMP characters:
upper-case non-BMP character did was ignored and the ASCII flag was
ignored when matching a character range whose upper bound is beyond the
BMP region.
: Fixed the multiprocessing "forkserver" start method
forkserver process to correctly inherit the parentâs 
during the importing of multiprocessing.set_forkserver_preload()
modules in the same manner as  is configured in workers
before executing work items.
This bug caused some forkserver module preloading to silently fail to
preload. This manifested as a performance degration in child processes
when the  was required due to additional repeated work in
every worker.
It could also have a side effect of  remaining in 
during forkserver preload imports instead of the absolute path from
os.getcwd() at multiprocessing import time used in the worker
.
The  differences between phases in the child process could
potentially have caused preload to import incorrect things from the wrong
location.  We are unaware of that actually having happened in practice.

================================================================================

# Changelog - Library (Part 2)

: The multiprocessing.Lock and
multiprocessing.RLock  values no longer say âunknownâ on
macOS.
: Raise calendar.IllegalMonthError (now a subclass of
IndexError) for calendar.month() when the input month is
not correct.
: The Python implementation of  no longer calls
pickle.Pickler.persistent_id() for the result of
persistent_id().
: Fix an issue in curses.napms() when
curses.initscr() has not yet been called. Patch by BÃ©nÃ©dikt Tran.
: Fix pickling and copying of os.sched_param objects.
: Fix a use-after-free crash on asyncio.Task objects
whose underlying coroutine yields an object that implements an evil
__getattribute__(). Patch by Nico Posada.
: Fix crash in cProfile.Profile and
_lsprof.Profiler when their callbacks were directly called with
0 arguments.
: Fix issue where urllib.request.pathname2url() and
url2pathname() removed slashes from Windows DOS
drive paths and URLs.
: Raise a UnicodeEncodeError instead of a
SystemError upon calling _interpreters.create() with an
invalid Unicode character.
: Fix issue where urllib.request.pathname2url() generated
URLs beginning with four slashes (rather than two) when given a Windows
UNC path.
: Fix a crash in  when the ast.AST._fields
attribute is deleted.
: Fixes a possible  pointer dereference in .
: Fix a use-after-free crash on asyncio.Task objects for
which the underlying event loop implements an evil
__getattribute__(). Reported by Nico-Posada. Patch by
BÃ©nÃ©dikt Tran.
: Fixed a reference leak in asyncio.Task objects when
reinitializing the same object with a non- context. Patch by Nico
Posada.
: Fix use-after-free crashes on asyncio.Future objects
for which the underlying event loop implements an evil
__getattribute__(). Reported by Nico-Posada. Patch by
BÃ©nÃ©dikt Tran.
: Fix an out-of-bounds crash when an evil
asyncio.loop.call_soon() mutates the length of the internal
callbacks list. Patch by BÃ©nÃ©dikt Tran.
: Fix a use-after-free crash in
asyncio.Future.remove_done_callback(). Patch by BÃ©nÃ©dikt Tran.
: Fix possible crash when mutating list of callbacks returned by
asyncio.Future._callbacks. It now always returns a new copy in C
implementation . Patch by Kumar Aditya.
: Fix an issue in
email.policy.EmailPolicy.header_source_parse() and
email.policy.Compat32.header_source_parse() that introduced spurious
leading whitespaces into header values when the header includes a newline
character after the header name delimiter () and before the value.
: Fixed the bug for  where it canât set breakpoints on
functions with certain annotations.
: Fix several bugs in
argparse.ArgumentParser.parse_intermixed_args().

================================================================================

# Changelog - Library (Part 3)

The parser no longer changes temporarily during parsing.
Default values are not processed twice.
Required mutually exclusive groups containing positional arguments are now supported.
The missing arguments report now includes the names of all required optional and positional arguments.
Unknown options can be intermixed with positional arguments in parse_known_intermixed_args().

================================================================================

# Changelog - Library (Part 4)


: Avoid the exiting the interpreter if a null byte is given as
input in the new REPL.
: [Enum] fix hashable<->nonhashable comparisons for member values
: Restore ability to set persistent_id
and persistent_load attributes of instances of
the  and  classes in the 
module.
: Fixed the bug in  where after a multi-line command,
an empty line repeats the first line of the multi-line command, instead of
the full command.
: Reject non-ASCII digits in the Python implementation of
json.loads() conforming to the JSON specification.
: Reject invalid unicode escapes for Python implementation of
json.loads().
: Fix the notes removal logic for errors thrown in enum
initialization.
: Allow FrameLocalsProxy to delete and pop if the key is not
a fast variable.
: Improve traceback if importlib.reload() is called with an
object that is not a module. Patch by Alex Waygood.
: Fix deadlock when
concurrent.futures.ProcessPoolExecutor shuts down concurrently
with an error when feeding a job to a worker process.
: Fixed the bug where  and  can step into the
bottom caller frame.
: Fixed the bug where  will be stuck in an infinite
loop when debugging an empty file.
: Fixed a bug in  where arguments starting with 
canât be passed to the debugged script.
: Fix time.strptime() for ,  and  formats
in many locales that use non-ASCII digits, like Persian, Burmese, Odia and
Shan.
: Fix the conversion of the VIRTUAL_ENV path in the
activate script in  when running in Git Bash for Windows.
: Fix using functools.partial() as 
member. A FutureWarning with suggestion to use enum.member() is now
emitted when the  instance is used as an enum member.
: Fix race condition when importing collections.abc, which
could incorrectly return an empty module.
: Fix data race when creating zoneinfo.ZoneInfo objects
in the free threading build.
: Fix a bug where ArgumentError includes the incorrect ambiguous
option in .
: Keep  TCL paths in venv pointing to base
installation on Windows.
: Fix inheritance of nested mutually exclusive groups from parent
parser in argparse.ArgumentParser. Previously, all nested
mutually exclusive groups lost their connection to the group containing
them and were displayed as belonging directly to the parser.
: Fix encoding issues in time.strftime(), the
strftime() method of the  classes
,  and
 and formatting of these classes. Characters not
encodable in the current locale are now acceptable in the format string.
Surrogate pairs and sequence of surrogatescape-encoded bytes are no longer
recombinated. Embedded null character no longer terminates the format
string.
: Donât copy arbitrary values to  in the
 module.
: Fix an issue where providing a pathlib.PurePath object
as an initializer argument to a second  object
with a different  resulted in arguments to
the former objectâs initializer being joined by the latter objectâs
parser.
: If the PYTHON_BASIC_REPL environment variable is set,
the  module no longer imports the  module.
Moreover, the  module now respects  and
 command line options: ignore PYTHON_BASIC_REPL in
this case. Patch by Victor Stinner.
: Fix locale.nl_langinfo(locale.ALT_DIGITS) on platforms with
glibc. Now it returns a string consisting of up to 100 semicolon-separated
symbols (an empty string in most locales) on all Posix platforms.
Previously it only returned the first symbol or an empty string.
: Fix support for the barry_as_FLUFL future flag in the new
REPL.
: Fixed thread safety in  in the free-threaded build.
OpenSSL operations are now protected by a per-object lock.
: Fix refcycles in exceptions raised from
asyncio.TaskGroup and the python implementation of
asyncio.Future
: Fix time.strptime() for  and  formats in many
locales: Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash, Estonian,
French, Irish, Geâez, Gurajati, Manx Gaelic, Hebrew, Hindi, Chhattisgarhi,
Haitian Kreyol, Japanese, Kannada, Korean, Marathi, Malay, Norwegian,
Nynorsk, Punjabi, Rajasthani, Tok Pisin, Yoruba, Yue Chinese, Yau/Nungon
and Chinese.
: Allow calling os.path.exists() and
os.path.lexists() with keyword arguments on Windows. Fixes a
regression in 3.13.0.
: Fix detection of the minimal Queue API needed by the
 module. Patch by BÃ©nÃ©dikt Tran.
: Fix reference cycles left in tracebacks in
asyncio.open_connection() when used with happy_eyeballs_delay
: Fixed AssertionError when using
asyncio.staggered.staggered_race() with
asyncio.eager_task_factory.
: Properly quote template strings in  activation
scripts.
: Fix  for namespaces with not directly writable
dict (e.g. classes).
: Fix conflicts between abbreviated long options in the parent
parser and subparsers in .
: All  REPL prompts run in the same . Contributed by Bartosz SÅawecki.
: Fix support of  with string value in
. Substrings of the specified string no longer considered
valid values.
: Fix  support of positional arguments with
, default=argparse.SUPPRESS and specified .
: Fix a crash related to an integer overflow in
curses.resizeterm() and curses.resize_term().
: Fixed bug in itertools.tee() handling of other tee inputs (a
tee in a tee). The output now has the promised  independent new
iterators.  Formerly, the first iterator was identical (not independent)
to the input iterator. This would sometimes give surprising results.
: Fixed a bug in  where sometimes the breakpoint wonât
trigger if it was set on a function which is already in the call stack.
:  vim supports abbreviated single-dash long
options separated by  from its value.
: Fix disallowing abbreviation of single-dash long options in
 with allow_abbrev=False.
: Fix parsing mutually exclusive arguments in .
Arguments with the value identical to the default value (e.g. booleans,
small integers, empty or 1-character strings) are no longer considered
ânot presentâ.
: Positional arguments with  equal to  or
argparse.REMAINDER are no longer required. This allows to use
positional argument with  and without  in mutually
exclusive group and improves error message about required arguments.
: Fix parsing positional argument with  equal to
 or  if it is preceded by an option and another positional
argument.
:  now ignores the first  (double dash)
between an option and command.
: Add RFC 9637 reserved IPv6 block  in
 module.
: Fix handling of multiple  (double dashes) in
. Only the first one has now been removed, all subsequent
ones are now taken literally.
: Remove broken time.thread_time() and
time.thread_time_ns() on NetBSD.
: Fix possible crash (in debug build), incorrect output or
returning incorrect value from raw binary  when writing to
console on Windows.
: Fix parent slots detection for dataclasses that inherit from
classes with __dictoffset__.
: Fix unbalanced quote errors occurring when activate.csh in
 was sourced with a custom prompt containing unpaired quotes or
newlines.
: Fix the canvas not clearing after running turtledemo clock.
: Resolve a memory leak introduced in CPython 3.10âs 
when the ssl.SSLSocket.session property was accessed.  Speeds up
read and write access to said property by no longer unnecessarily cloning
session objects via serialization.
: Update unbounded  calls in  to specify an
explicit  putting a limit on how much data they may read. This
also updates handling around ZIP max comment size to match the standard
instead of reading comments that are one byte too long.
: Fixed an issue where inspect.getclosurevars() would
incorrectly classify an attribute name as a global variable when the name
exists both as an attribute name and a global variable.
: posixpath.realpath() now raises
NotADirectoryError when  mode is enabled and a
non-directory path with a trailing slash is supplied.
: Always return an absolute path for os.path.abspath() on
Windows.
: Always use  to print  in .
: Fix SystemError when match regular expression pattern
containing some combination of possessive quantifier, alternative and
capture group.
: Fixed multiprocessing.Process reporting a 
of 1 even on success when using the  start method while using a
concurrent.futures.ThreadPoolExecutor.
: Fix a race condition in multiprocessing.pool.Pool.
: Strip unittest.IsolatedAsyncioTestCase stack frames
from reported stacktraces.
: Fix  metavar processing to allow positional
arguments to have a tuple metavar.

================================================================================

# Changelog - Library (Part 5)

: pdb.set_trace() will not stop at an opcode that does not
have an associated line number anymore.

: Publicly expose EXACT_TOKEN_TYPES in
token.__all__.

: Fix faulthandler for trampoline frames. If the top-most frame
is a trampoline frame, skip it. Patch by Victor Stinner.

: Fix io.StringIO.__setstate__() crash, when 
was passed as the first value.

: Fix urllib.request.pathname2url() for paths starting with
multiple slashes on Posix.

: Fix shutil.which on Windows. Now it looks at direct
match if and only if the command ends with a PATHEXT extension or X_OK is
not in mode. Support extensionless files if â.â is in PATHEXT. Support
PATHEXT extensions that end with a dot.

: Support PyREPL history on Windows. Patch by devdanzin and
Victor Stinner.

: Fix issue where urllib.request.url2pathname() failed to
discard an extra slash before a UNC drive in the URL path on Windows.

: Fix issue where urllib.request.url2pathname() failed to
discard any âlocalhostâ authority present in the URL.

: Fix crash when calling a operator.methodcaller() instance
from multiple threads in the free threading build.

================================================================================

# Changelog - Library (Part 6)

: Fix support of STRING and GLOBAL opcodes with non-ASCII
arguments in pickletools. pickletools.dis() now outputs
non-ASCII bytes in STRING, BINSTRING and SHORT_BINSTRING arguments as
escaped ().

: : Make grp.getgrall() thread-safe by adding a
mutex. Patch by Victor Stinner.

: Fix the representation of itertools.count objects when
the count value is sys.maxsize.

: Fix issue where urllib.request.url2pathname() and
pathname2url() always used UTF-8 when quoting and
unquoting file URIs. They now use the filesystem encoding and error
handler.

: Fix memory leaks when  expression matching
terminates abruptly, either because of a signal or because memory
allocation fails.

: Fixed the values of sysconfig.get_config_vars(),
sysconfig.get_paths(), and their siblings when the 
initialization happens after  has built a cache for
sysconfig.get_config_vars().

: Update bundled pip to 24.3.1

: Fix os.path.normpath() for drive-relative paths on
Windows.

: Fix issue where urllib.request.url2pathname() failed to
discard two leading slashes introducing an empty authority section.

================================================================================

# Changelog - Library (Part 7)

: locale.nl_langinfo(locale.ERA) now returns multiple era
description segments separated by semicolons. Previously it only returned
the first segment on platforms with Glibc.

: Allow collections.abc.AsyncIterator to be a base for
Protocols.

: Fix crash when non-dict was passed to several functions in
_interpreters module.

: Limit starting a patcher (from unittest.mock.patch() or
unittest.mock.patch.object()) more than once without stopping it

: Fix a crash when instantiating itertools.count with an
initial count of sys.maxsize on debug builds. Patch by BÃ©nÃ©dikt
Tran.

: Fix issue where urllib.request.pathname2url() mishandled
Windows paths with embedded forward slashes.

: Improve performances of zipfile.Path.open() for
non-reading modes.

: Fix bugs in compiling case-insensitive 
expressions with character classes containing non-BMP characters:
upper-case non-BMP character did was ignored and the ASCII flag was
ignored when matching a character range whose upper bound is beyond the
BMP region.

================================================================================

# Changelog - Library (Part 8)

: Fixed the multiprocessing "forkserver" start method
forkserver process to correctly inherit the parentâs 
during the importing of multiprocessing.set_forkserver_preload()
modules in the same manner as  is configured in workers
before executing work items.

This bug caused some forkserver module preloading to silently fail to
preload. This manifested as a performance degration in child processes
when the  was required due to additional repeated work in
every worker.

It could also have a side effect of  remaining in 
during forkserver preload imports instead of the absolute path from
os.getcwd() at multiprocessing import time used in the worker
.

The  differences between phases in the child process could
potentially have caused preload to import incorrect things from the wrong
location.  We are unaware of that actually having happened in practice.

: The multiprocessing.Lock and
multiprocessing.RLock  values no longer say âunknownâ on
macOS.

: Raise calendar.IllegalMonthError (now a subclass of
IndexError) for calendar.month() when the input month is
not correct.

: The Python implementation of  no longer calls
pickle.Pickler.persistent_id() for the result of
persistent_id().

================================================================================

# Changelog - Library (Part 9)

: Fix an issue in curses.napms() when
curses.initscr() has not yet been called. Patch by BÃ©nÃ©dikt Tran.

: Fix pickling and copying of os.sched_param objects.

: Fix a use-after-free crash on asyncio.Task objects
whose underlying coroutine yields an object that implements an evil
__getattribute__(). Patch by Nico Posada.

: Fix crash in cProfile.Profile and
_lsprof.Profiler when their callbacks were directly called with
0 arguments.

: Fix issue where urllib.request.pathname2url() and
url2pathname() removed slashes from Windows DOS
drive paths and URLs.

: Raise a UnicodeEncodeError instead of a
SystemError upon calling _interpreters.create() with an
invalid Unicode character.

: Fix issue where urllib.request.pathname2url() generated
URLs beginning with four slashes (rather than two) when given a Windows
UNC path.

: Fix a crash in  when the ast.AST._fields
attribute is deleted.

: Fixes a possible  pointer dereference in .

: Fix a use-after-free crash on asyncio.Task objects for
which the underlying event loop implements an evil
__getattribute__(). Reported by Nico-Posada. Patch by
BÃ©nÃ©dikt Tran.

================================================================================

# Changelog - Library (Part 10)

: Fixed a reference leak in asyncio.Task objects when
reinitializing the same object with a non- context. Patch by Nico
Posada.

: Fix use-after-free crashes on asyncio.Future objects
for which the underlying event loop implements an evil
__getattribute__(). Reported by Nico-Posada. Patch by
BÃ©nÃ©dikt Tran.

: Fix an out-of-bounds crash when an evil
asyncio.loop.call_soon() mutates the length of the internal
callbacks list. Patch by BÃ©nÃ©dikt Tran.

: Fix a use-after-free crash in
asyncio.Future.remove_done_callback(). Patch by BÃ©nÃ©dikt Tran.

: Fix possible crash when mutating list of callbacks returned by
asyncio.Future._callbacks. It now always returns a new copy in C
implementation . Patch by Kumar Aditya.

: Fix an issue in
email.policy.EmailPolicy.header_source_parse() and
email.policy.Compat32.header_source_parse() that introduced spurious
leading whitespaces into header values when the header includes a newline
character after the header name delimiter () and before the value.

: Fixed the bug for  where it canât set breakpoints on
functions with certain annotations.

: Fix several bugs in
argparse.ArgumentParser.parse_intermixed_args().

================================================================================

# Changelog - Library (Part 11)

List:
The parser no longer changes temporarily during parsing.
Default values are not processed twice.
Required mutually exclusive groups containing positional arguments are now supported.
The missing arguments report now includes the names of all required optional and positional arguments.
Unknown options can be intermixed with positional arguments in parse_known_intermixed_args().

The parser no longer changes temporarily during parsing.

Default values are not processed twice.

Required mutually exclusive groups containing positional arguments are now supported.

The missing arguments report now includes the names of all required optional and positional arguments.

Unknown options can be intermixed with positional arguments in parse_known_intermixed_args().

: Avoid the exiting the interpreter if a null byte is given as
input in the new REPL.

: [Enum] fix hashable<->nonhashable comparisons for member values

: Restore ability to set persistent_id
and persistent_load attributes of instances of
the  and  classes in the 
module.

: Fixed the bug in  where after a multi-line command,
an empty line repeats the first line of the multi-line command, instead of
the full command.

================================================================================

# Changelog - Library (Part 12)

: Reject non-ASCII digits in the Python implementation of
json.loads() conforming to the JSON specification.

: Reject invalid unicode escapes for Python implementation of
json.loads().

: Fix the notes removal logic for errors thrown in enum
initialization.

: Allow FrameLocalsProxy to delete and pop if the key is not
a fast variable.

: Improve traceback if importlib.reload() is called with an
object that is not a module. Patch by Alex Waygood.

: Fix deadlock when
concurrent.futures.ProcessPoolExecutor shuts down concurrently
with an error when feeding a job to a worker process.

: Fixed the bug where  and  can step into the
bottom caller frame.

: Fixed the bug where  will be stuck in an infinite
loop when debugging an empty file.

: Fixed a bug in  where arguments starting with 
canât be passed to the debugged script.

: Fix time.strptime() for ,  and  formats
in many locales that use non-ASCII digits, like Persian, Burmese, Odia and
Shan.

: Fix the conversion of the VIRTUAL_ENV path in the
activate script in  when running in Git Bash for Windows.

================================================================================

# Changelog - Library (Part 13)

: Fix using functools.partial() as 
member. A FutureWarning with suggestion to use enum.member() is now
emitted when the  instance is used as an enum member.

: Fix race condition when importing collections.abc, which
could incorrectly return an empty module.

: Fix data race when creating zoneinfo.ZoneInfo objects
in the free threading build.

: Fix a bug where ArgumentError includes the incorrect ambiguous
option in .

: Keep  TCL paths in venv pointing to base
installation on Windows.

: Fix inheritance of nested mutually exclusive groups from parent
parser in argparse.ArgumentParser. Previously, all nested
mutually exclusive groups lost their connection to the group containing
them and were displayed as belonging directly to the parser.

: Fix encoding issues in time.strftime(), the
strftime() method of the  classes
,  and
 and formatting of these classes. Characters not
encodable in the current locale are now acceptable in the format string.
Surrogate pairs and sequence of surrogatescape-encoded bytes are no longer
recombinated. Embedded null character no longer terminates the format
string.

: Donât copy arbitrary values to  in the
 module.

================================================================================

# Changelog - Library (Part 14)

: Fix an issue where providing a pathlib.PurePath object
as an initializer argument to a second  object
with a different  resulted in arguments to
the former objectâs initializer being joined by the latter objectâs
parser.

: If the PYTHON_BASIC_REPL environment variable is set,
the  module no longer imports the  module.
Moreover, the  module now respects  and
 command line options: ignore PYTHON_BASIC_REPL in
this case. Patch by Victor Stinner.

: Fix locale.nl_langinfo(locale.ALT_DIGITS) on platforms with
glibc. Now it returns a string consisting of up to 100 semicolon-separated
symbols (an empty string in most locales) on all Posix platforms.
Previously it only returned the first symbol or an empty string.

: Fix support for the barry_as_FLUFL future flag in the new
REPL.

: Fixed thread safety in  in the free-threaded build.
OpenSSL operations are now protected by a per-object lock.

: Fix refcycles in exceptions raised from
asyncio.TaskGroup and the python implementation of
asyncio.Future

================================================================================

# Changelog - Library (Part 15)

: Fix time.strptime() for  and  formats in many
locales: Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash, Estonian,
French, Irish, Geâez, Gurajati, Manx Gaelic, Hebrew, Hindi, Chhattisgarhi,
Haitian Kreyol, Japanese, Kannada, Korean, Marathi, Malay, Norwegian,
Nynorsk, Punjabi, Rajasthani, Tok Pisin, Yoruba, Yue Chinese, Yau/Nungon
and Chinese.

: Allow calling os.path.exists() and
os.path.lexists() with keyword arguments on Windows. Fixes a
regression in 3.13.0.

: Fix detection of the minimal Queue API needed by the
 module. Patch by BÃ©nÃ©dikt Tran.

: Fix reference cycles left in tracebacks in
asyncio.open_connection() when used with happy_eyeballs_delay

: Fixed AssertionError when using
asyncio.staggered.staggered_race() with
asyncio.eager_task_factory.

: Properly quote template strings in  activation
scripts.

: Fix  for namespaces with not directly writable
dict (e.g. classes).

: Fix conflicts between abbreviated long options in the parent
parser and subparsers in .

: All  REPL prompts run in the same . Contributed by Bartosz SÅawecki.

: Fix support of  with string value in
. Substrings of the specified string no longer considered
valid values.

================================================================================

# Changelog - Library (Part 16)

: Fix  support of positional arguments with
, default=argparse.SUPPRESS and specified .

: Fix a crash related to an integer overflow in
curses.resizeterm() and curses.resize_term().

: Fixed bug in itertools.tee() handling of other tee inputs (a
tee in a tee). The output now has the promised  independent new
iterators.  Formerly, the first iterator was identical (not independent)
to the input iterator. This would sometimes give surprising results.

: Fixed a bug in  where sometimes the breakpoint wonât
trigger if it was set on a function which is already in the call stack.

:  vim supports abbreviated single-dash long
options separated by  from its value.

: Fix disallowing abbreviation of single-dash long options in
 with allow_abbrev=False.

: Fix parsing mutually exclusive arguments in .
Arguments with the value identical to the default value (e.g. booleans,
small integers, empty or 1-character strings) are no longer considered
ânot presentâ.

: Positional arguments with  equal to  or
argparse.REMAINDER are no longer required. This allows to use
positional argument with  and without  in mutually
exclusive group and improves error message about required arguments.

================================================================================

# Changelog - Library (Part 17)

: Fix parsing positional argument with  equal to
 or  if it is preceded by an option and another positional
argument.

:  now ignores the first  (double dash)
between an option and command.

: Add RFC 9637 reserved IPv6 block  in
 module.

: Fix handling of multiple  (double dashes) in
. Only the first one has now been removed, all subsequent
ones are now taken literally.

: Remove broken time.thread_time() and
time.thread_time_ns() on NetBSD.

: Fix possible crash (in debug build), incorrect output or
returning incorrect value from raw binary  when writing to
console on Windows.

: Fix parent slots detection for dataclasses that inherit from
classes with __dictoffset__.

: Fix unbalanced quote errors occurring when activate.csh in
 was sourced with a custom prompt containing unpaired quotes or
newlines.

: Fix the canvas not clearing after running turtledemo clock.

: Resolve a memory leak introduced in CPython 3.10âs 
when the ssl.SSLSocket.session property was accessed.  Speeds up
read and write access to said property by no longer unnecessarily cloning
session objects via serialization.

================================================================================

# Changelog - Library (Part 18)

: Update unbounded  calls in  to specify an
explicit  putting a limit on how much data they may read. This
also updates handling around ZIP max comment size to match the standard
instead of reading comments that are one byte too long.

: Fixed an issue where inspect.getclosurevars() would
incorrectly classify an attribute name as a global variable when the name
exists both as an attribute name and a global variable.

: posixpath.realpath() now raises
NotADirectoryError when  mode is enabled and a
non-directory path with a trailing slash is supplied.

: Always return an absolute path for os.path.abspath() on
Windows.

: Always use  to print  in .

: Fix SystemError when match regular expression pattern
containing some combination of possessive quantifier, alternative and
capture group.

: Fixed multiprocessing.Process reporting a 
of 1 even on success when using the  start method while using a
concurrent.futures.ThreadPoolExecutor.

: Fix a race condition in multiprocessing.pool.Pool.

: Strip unittest.IsolatedAsyncioTestCase stack frames
from reported stacktraces.

: Fix  metavar processing to allow positional
arguments to have a tuple metavar.

================================================================================

# Changelog - IDLE

List:
: Increase currently inadequate vertical spacing for the IDLE
browsers (path, module, and stack) on high-resolution monitors.

: Increase currently inadequate vertical spacing for the IDLE
browsers (path, module, and stack) on high-resolution monitors.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Added stub pages for removed modules explaining their removal,
where to find replacements, and linking to the last Python version that
supported them. Contributed by Ned Batchelder.
: Require Sphinx 7.2.6 or later to build the Python
documentation. Patch by Adam Turner.
: Added definitions for , current context,
and context management protocol, updated related definitions to be
consistent, and expanded the documentation for
contextvars.Context.
: The importlib.metadata documentation now includes
semantic cross-reference targets for the significant documented APIs. This
means intersphinx references like importlib.metadata.version() will
now work as expected.
: Clarified the dual usage of the term âfree variableâ (both the
formal meaning of any reference to names defined outside the local scope,
and the narrower pragmatic meaning of nonlocal variables named in
co_freevars).
: Writers of CPythonâs documentation can now use  as the
version for the versionchanged, versionadded, deprecated
directives.
: Include the  type in the lists of documented
types. Change by Furkan Onder and Martin Panter.
: The  documentation moved from the âVery High
Level APIâ section to the âInitialization and Finalizationâ section.
Also make it explicit that we expect  to typically be called
instead of Py_Initialize rather than after it (since  makes
its own call to Py_Initialize). Document that calling both is
supported but is version dependent on which settings will be applied
correctly.

================================================================================

# Changelog - Documentation (Part 2)

: Added stub pages for removed modules explaining their removal,
where to find replacements, and linking to the last Python version that
supported them. Contributed by Ned Batchelder.

: Require Sphinx 7.2.6 or later to build the Python
documentation. Patch by Adam Turner.

: Added definitions for , current context,
and context management protocol, updated related definitions to be
consistent, and expanded the documentation for
contextvars.Context.

: The importlib.metadata documentation now includes
semantic cross-reference targets for the significant documented APIs. This
means intersphinx references like importlib.metadata.version() will
now work as expected.

: Clarified the dual usage of the term âfree variableâ (both the
formal meaning of any reference to names defined outside the local scope,
and the narrower pragmatic meaning of nonlocal variables named in
co_freevars).

: Writers of CPythonâs documentation can now use  as the
version for the versionchanged, versionadded, deprecated
directives.

: Include the  type in the lists of documented
types. Change by Furkan Onder and Martin Panter.

================================================================================

# Changelog - Documentation (Part 3)

: The  documentation moved from the âVery High
Level APIâ section to the âInitialization and Finalizationâ section.

Also make it explicit that we expect  to typically be called
instead of Py_Initialize rather than after it (since  makes
its own call to Py_Initialize). Document that calling both is
supported but is version dependent on which settings will be applied
correctly.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix possible undefined behavior division by zero in
âs _Py_c_pow().
: Fix a crash in the free threading build when
PyCode_GetCode(), PyCode_GetVarnames(),
PyCode_GetCellvars(), or PyCode_GetFreevars() were called
from multiple threads at the same time.
: Fix __buffer__() of  crashing
when  or
 are passed as flags.
: Fix crash in finalization of dtoa state. Patch by Kumar Aditya.
: Now ValueError is raised instead of SystemError
when trying to iterate over a released memoryview object.
: Fix a crash when calling  on some operating
systems, including SerenityOS.
: Fix  to not write an incomplete .pyc files when
a ulimit or some other operating system mechanism is preventing the write
to go through fully.
: Fix crash during garbage collection on an object frozen by
gc.freeze() on the free-threaded build.
: Provide better error location when attempting to use a
future statement with an unknown future feature.
: Fix a crash in sys.audit() when passing a non-string as
first argument and Python was compiled in debug mode.
: On Android, the  setting of sys.stdout was
changed from surrogateescape to backslashreplace.
: Fix a crash in the free threading build when
gc.get_objects() or gc.get_referrers() is called during an
in-progress garbage collection.
: Correctly honour tracemalloc hooks in specialized
 paths. Patch by Pablo Galindo
: Use color to highlight error locations in traceback from
exception group
: Fix illegal instruction for older Arm architectures. Patch by
Diego Russo, testing by Ross Burton.
: Fix a crash in the free threading build when the GC runs
concurrently with a new thread starting.
: Fix possible race condition when calling
__reduce_ex__() for the first time in the free threading
build.
: Fix crash when iterating over a generator expression after
direct changes on gi_frame.f_locals. Patch by Mikhail Efimov.
: Fix a crash in the  method of
UnicodeError objects when the UnicodeError.start and
UnicodeError.end values are invalid or out-of-range. Patch by
BÃ©nÃ©dikt Tran.
: Fix a crash caused by immortal interned strings being shared
between sub-interpreters that use basic single-phase init.  In that case,
the string can be used by an interpreter that outlives the interpreter
that created and interned it.  For interpreters that share obmalloc state,
also share the interned dict with the main interpreter.
: Use the  binary, if available (e.g. on Debian and
derivatives), to display REPL .
: Fix reading and decoding a line from the source file witn
non-UTF-8 encoding for syntax errors raised in the compiler.
: Improve the error message when a script shadowing a module from
the standard library causes ImportError to be raised during a
âfromâ import. Similarly, improve the error message when a script
shadowing a third party module attempts to âfromâ import an attribute from
that third party module while still initialising.
: Building with HAVE_DYNAMIC_LOADING now works as well as it
did in 3.12. Existing deficiences will be addressed separately. (See
https://github.com/python/cpython/issues/122950.)
: Fix bug where SSLProtocol.connection_lost wasnât getting called
when OSError was thrown on writing to socket.
: Fixed a bug in reprlib.repr where it incorrectly called the
repr method on shadowed Python built-in types.
: If _thread.start_new_thread() fails to start a new
thread, it deletes its state from interpreter and thus avoids its repeated
cleanup on finalization.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix possible undefined behavior division by zero in
âs _Py_c_pow().

: Fix a crash in the free threading build when
PyCode_GetCode(), PyCode_GetVarnames(),
PyCode_GetCellvars(), or PyCode_GetFreevars() were called
from multiple threads at the same time.

: Fix __buffer__() of  crashing
when  or
 are passed as flags.

: Fix crash in finalization of dtoa state. Patch by Kumar Aditya.

: Now ValueError is raised instead of SystemError
when trying to iterate over a released memoryview object.

: Fix a crash when calling  on some operating
systems, including SerenityOS.

: Fix  to not write an incomplete .pyc files when
a ulimit or some other operating system mechanism is preventing the write
to go through fully.

: Fix crash during garbage collection on an object frozen by
gc.freeze() on the free-threaded build.

: Provide better error location when attempting to use a
future statement with an unknown future feature.

: Fix a crash in sys.audit() when passing a non-string as
first argument and Python was compiled in debug mode.

: On Android, the  setting of sys.stdout was
changed from surrogateescape to backslashreplace.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix a crash in the free threading build when
gc.get_objects() or gc.get_referrers() is called during an
in-progress garbage collection.

: Correctly honour tracemalloc hooks in specialized
 paths. Patch by Pablo Galindo

: Use color to highlight error locations in traceback from
exception group

: Fix illegal instruction for older Arm architectures. Patch by
Diego Russo, testing by Ross Burton.

: Fix a crash in the free threading build when the GC runs
concurrently with a new thread starting.

: Fix possible race condition when calling
__reduce_ex__() for the first time in the free threading
build.

: Fix crash when iterating over a generator expression after
direct changes on gi_frame.f_locals. Patch by Mikhail Efimov.

: Fix a crash in the  method of
UnicodeError objects when the UnicodeError.start and
UnicodeError.end values are invalid or out-of-range. Patch by
BÃ©nÃ©dikt Tran.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix a crash caused by immortal interned strings being shared
between sub-interpreters that use basic single-phase init.  In that case,
the string can be used by an interpreter that outlives the interpreter
that created and interned it.  For interpreters that share obmalloc state,
also share the interned dict with the main interpreter.

: Use the  binary, if available (e.g. on Debian and
derivatives), to display REPL .

: Fix reading and decoding a line from the source file witn
non-UTF-8 encoding for syntax errors raised in the compiler.

: Improve the error message when a script shadowing a module from
the standard library causes ImportError to be raised during a
âfromâ import. Similarly, improve the error message when a script
shadowing a third party module attempts to âfromâ import an attribute from
that third party module while still initialising.

: Building with HAVE_DYNAMIC_LOADING now works as well as it
did in 3.12. Existing deficiences will be addressed separately. (See
https://github.com/python/cpython/issues/122950.)

: Fix bug where SSLProtocol.connection_lost wasnât getting called
when OSError was thrown on writing to socket.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Fixed a bug in reprlib.repr where it incorrectly called the
repr method on shadowed Python built-in types.

: If _thread.start_new_thread() fails to start a new
thread, it deletes its state from interpreter and thus avoids its repeated
cleanup on finalization.

================================================================================

# Changelog - C API

List:
: Fix error handling in ctypes.CDLL objects which could
result in a crash in rare situations.
: Fix a bug where dictionary watchers (e.g.,
PyDict_Watch()) on an objectâs attribute dictionary
() were not triggered when the objectâs attributes
were modified.
: Added Py_IsInitialized to the list of APIs that are safe to
call before the interpreter is initialized, and updated the embedding
tests to cover it.

: Fix error handling in ctypes.CDLL objects which could
result in a crash in rare situations.

: Fix a bug where dictionary watchers (e.g.,
PyDict_Watch()) on an objectâs attribute dictionary
() were not triggered when the objectâs attributes
were modified.

: Added Py_IsInitialized to the list of APIs that are safe to
call before the interpreter is initialized, and updated the embedding
tests to cover it.

================================================================================

# Changelog - Build

List:
: Set wasm32-wasip1 as the WASI target. The old
wasm32-wasi target is deprecated so it can be used for an eventual
WASI 1.0.
: Hard-code float word ordering as little endian on WASM.
: The Android build now supports 16 KB page sizes.
: Improve detection of float word ordering on Linux when link-time
optimizations are enabled.
: Fix detection of whether  is needed when
cross-compiling CPython using the configure script.
: Allow for specifying the target compile triple for WASI.
: Use WASI SDK 24 for testing.
: Fix cross compile failures when the host and target SOABIs
match.

: Set wasm32-wasip1 as the WASI target. The old
wasm32-wasi target is deprecated so it can be used for an eventual
WASI 1.0.

: Hard-code float word ordering as little endian on WASM.

: The Android build now supports 16 KB page sizes.

: Improve detection of float word ordering on Linux when link-time
optimizations are enabled.

: Fix detection of whether  is needed when
cross-compiling CPython using the configure script.

: Allow for specifying the target compile triple for WASI.

: Use WASI SDK 24 for testing.

: Fix cross compile failures when the host and target SOABIs
match.

================================================================================

# Changelog - Core and Builtins

List:
: Fix tokenize.untokenize() producing invalid syntax for
double braces preceded by certain escape characters.
: Fix compiler bug (in some versions of 3.13) where an assertion
fails during reachability analysis.

: Fix tokenize.untokenize() producing invalid syntax for
double braces preceded by certain escape characters.

: Fix compiler bug (in some versions of 3.13) where an assertion
fails during reachability analysis.

================================================================================

# Changelog - macOS

List:
: Check for runtime availability of  function on
macos.

: Check for runtime availability of  function on
macos.

================================================================================

# Changelog - Windows

List:
: Fix _Py_ThreadId for Windows builds using MinGW. Patch by
Tony Roberts.
: Ensures experimental free-threaded binaries remain installed
when updating.
: Ensure that Tools\msi\buildrelease.bat uses different
directories for AMD64 and ARM64 builds.

: Fix _Py_ThreadId for Windows builds using MinGW. Patch by
Tony Roberts.

: Ensures experimental free-threaded binaries remain installed
when updating.

: Ensure that Tools\msi\buildrelease.bat uses different
directories for AMD64 and ARM64 builds.

================================================================================

# Changelog - Tests

List:
: Updated  to pass with Tcl/Tk 8.6.15.

: Updated  to pass with Tcl/Tk 8.6.15.

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed crash when using gc.get_referents() on a capsule
object.
: Fix typing.TypeAliasType not to be generic, when
type_params is an empty tuple.
: Due to unreliable results on some devices,
time.strftime() no longer accepts negative years on Android.
: os.pidfd_open() and signal.pidfd_send_signal() are
now unavailable when building against Android API levels older than 31,
since the underlying system calls may cause a crash.
: Fixed potential crash when using  to process
zero-width âPascal stringâ fields ().
: Fix a bug in  where lengthy subparser argument
help is incorrectly indented.
: Fix invalid variable in  handling of failed symlink
on Windows
: Add workaround for broken  implementations on
Windows, that loose zero sign (e.g.   returns ).
Patch by Sergey B Kirpichev.
: Fix unittest.mock.MagicMock reseting magic methods
return values after .reset_mock(return_value=True) was called.
: Fix the command-line interface for the  module to
select floats between 0 and N, not 1 and N.
: Add  to sys.stdlib_module_names. Patch by
Victor Stinner.
: Fix inspect.getsource() for classes in
collections.abc and  (for pure Python implementation)
modules. inspect.getcomments() now raises OSError instead of
IndexError if the __firstlineno__ value for a class is out of bound.
: When working with zip archives, importlib.resources now
properly honors module-adjacent references (e.g. files(pkg.mod) and
not just files(pkg)).
: Fix an issue when reporting tracebacks corresponding to Python
code emitting an empty AST body. Patch by Nikita Sobolev and BÃ©nÃ©dikt
Tran.
: Fix a crash in OrderedDict.__eq__ when operands are mutated during the
check. Patch by BÃ©nÃ©dikt Tran.
: Do not translate user-provided strings in
argparse.ArgumentParser.

================================================================================

# Changelog - Library (Part 2)

: Fixed crash when using gc.get_referents() on a capsule
object.

: Fix typing.TypeAliasType not to be generic, when
type_params is an empty tuple.

: Due to unreliable results on some devices,
time.strftime() no longer accepts negative years on Android.

: os.pidfd_open() and signal.pidfd_send_signal() are
now unavailable when building against Android API levels older than 31,
since the underlying system calls may cause a crash.

: Fixed potential crash when using  to process
zero-width âPascal stringâ fields ().

: Fix a bug in  where lengthy subparser argument
help is incorrectly indented.

: Fix invalid variable in  handling of failed symlink
on Windows

: Add workaround for broken  implementations on
Windows, that loose zero sign (e.g.   returns ).
Patch by Sergey B Kirpichev.

: Fix unittest.mock.MagicMock reseting magic methods
return values after .reset_mock(return_value=True) was called.

: Fix the command-line interface for the  module to
select floats between 0 and N, not 1 and N.

: Add  to sys.stdlib_module_names. Patch by
Victor Stinner.

================================================================================

# Changelog - Library (Part 3)

: Fix inspect.getsource() for classes in
collections.abc and  (for pure Python implementation)
modules. inspect.getcomments() now raises OSError instead of
IndexError if the __firstlineno__ value for a class is out of bound.

: When working with zip archives, importlib.resources now
properly honors module-adjacent references (e.g. files(pkg.mod) and
not just files(pkg)).

: Fix an issue when reporting tracebacks corresponding to Python
code emitting an empty AST body. Patch by Nikita Sobolev and BÃ©nÃ©dikt
Tran.

: Fix a crash in OrderedDict.__eq__ when operands are mutated during the
check. Patch by BÃ©nÃ©dikt Tran.

: Do not translate user-provided strings in
argparse.ArgumentParser.

================================================================================

# Changelog - IDLE

List:
: Fix uninteruptable hang when Shell gets rapid continuous
output.
: Fix padding in config and search dialog windows in IDLE.

: Fix uninteruptable hang when Shell gets rapid continuous
output.

: Fix padding in config and search dialog windows in IDLE.

================================================================================

# Changelog - Documentation

List:
: Update âUsing Python on a Macâ section of the âPython Setup and
Usageâ document and include information on installing free-threading
support.
: Add an Android platform guide, and flag modules not available
on Android.

: Update âUsing Python on a Macâ section of the âPython Setup and
Usageâ document and include information on installing free-threading
support.

: Add an Android platform guide, and flag modules not available
on Android.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Revert the incremental GC (in 3.13), since itâs not clear the
benefits outweigh the costs at this point.
: Fixed scalability issue in free-threaded builds for lock-free
reads from dictionaries in multi-threaded scenarios
: Fix a bug that can cause a crash when sub-interpreters use
âbasicâ single-phase extension modules.  Shared objects could refer to
PyGC_Head nodes that had been freed as part of interpreter cleanup.
: When deallocating an object with inline values whose
 is still live: if memory allocation for the inline values
fails, clear the dictionary. Prevents an interpreter crash.
: Fix a crash in FrameLocalsProxy constructor: check the number
of arguments. Patch by Victor Stinner.
: Fix nondeterminism in compilation by sorting the value of
__static_attributes__. Patch by kp2pml30.
: Fix PyREPL failure when a keyboard interrupt is triggered after
using a history search
: Document the deprecation of setting and using __package__
and __cached__.
: Support  ,  , and  keys
in the Python REPL when  is set to .
: Fix possible crash in the garbage collector when it tries to
break a reference loop containing a memoryview object. Now a
memoryview object can only be cleared if there are no buffers
that refer it.
: Setting the __module__ attribute for a class now
removes the __firstlineno__ item from the typeâs dict, so they will no
longer be inconsistent.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Revert the incremental GC (in 3.13), since itâs not clear the
benefits outweigh the costs at this point.

: Fixed scalability issue in free-threaded builds for lock-free
reads from dictionaries in multi-threaded scenarios

: Fix a bug that can cause a crash when sub-interpreters use
âbasicâ single-phase extension modules.  Shared objects could refer to
PyGC_Head nodes that had been freed as part of interpreter cleanup.

: When deallocating an object with inline values whose
 is still live: if memory allocation for the inline values
fails, clear the dictionary. Prevents an interpreter crash.

: Fix a crash in FrameLocalsProxy constructor: check the number
of arguments. Patch by Victor Stinner.

: Fix nondeterminism in compilation by sorting the value of
__static_attributes__. Patch by kp2pml30.

: Fix PyREPL failure when a keyboard interrupt is triggered after
using a history search

: Document the deprecation of setting and using __package__
and __cached__.

: Support  ,  , and  keys
in the Python REPL when  is set to .

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix possible crash in the garbage collector when it tries to
break a reference loop containing a memoryview object. Now a
memoryview object can only be cleared if there are no buffers
that refer it.

: Setting the __module__ attribute for a class now
removes the __firstlineno__ item from the typeâs dict, so they will no
longer be inconsistent.

================================================================================

# Changelog - C API

List:
: Fix crash when importing modules containing state and
single-phase initialization in a subinterpreter.
: Fixed a bug that prevented circular imports of extension
modules that use single-phase initialization.

: Fix crash when importing modules containing state and
single-phase initialization in a subinterpreter.

: Fixed a bug that prevented circular imports of extension
modules that use single-phase initialization.

================================================================================

# Changelog - Build

List:
: Windows builds now use Windows 8.1 as their API baseline
(installation already required Windows 8.1).
: Building using --with-trace-refs is (temporarily)
disallowed when the GIL is disabled.

: Windows builds now use Windows 8.1 as their API baseline
(installation already required Windows 8.1).

: Building using --with-trace-refs is (temporarily)
disallowed when the GIL is disabled.

================================================================================

# Changelog - macOS

List:
: Updated macOS installer build to use OpenSSL 3.0.15.

: Updated macOS installer build to use OpenSSL 3.0.15.

================================================================================

# Changelog - Windows

List:
: Updated Windows build to use OpenSSL 3.0.15.
: The Windows build of CPython now requires 3.10 or newer.
:  no longer fails when it encounters an
inaccessible registry key.
: Makes ssl.create_default_context() ignore invalid
certificates in the Windows certificate store

: Updated Windows build to use OpenSSL 3.0.15.

: The Windows build of CPython now requires 3.10 or newer.

:  no longer fails when it encounters an
inaccessible registry key.

: Makes ssl.create_default_context() ignore invalid
certificates in the Windows certificate store

================================================================================

# Changelog - Tools/Demos

List:
: Update GitHub CI workflows to use OpenSSL 3.0.15 and
multissltests to use 3.0.15, 3.1.7, and 3.2.3.

: Update GitHub CI workflows to use OpenSSL 3.0.15 and
multissltests to use 3.0.15, 3.1.7, and 3.2.3.

================================================================================

# Changelog - Tests

List:
: Add --single-process command line option to Python test
runner (regrtest). Patch by Victor Stinner.
: Skip  if the binary is relocated by BOLT. Patch by
Donghee Na.

: Add --single-process command line option to Python test
runner (regrtest). Patch by Victor Stinner.

: Skip  if the binary is relocated by BOLT. Patch by
Donghee Na.

================================================================================

# Changelog - Security

List:
: Upgrade libexpat to 2.6.3
: Remove backtracking from tarfile header parsing for
hdrcharset, PAX, and GNU sparse headers.

: Upgrade libexpat to 2.6.3

: Remove backtracking from tarfile header parsing for
hdrcharset, PAX, and GNU sparse headers.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix crash and memory leak in decimal.getcontext(). It
crashed when using a thread-local context by
--with-decimal-contextvar=no.
: Fixed memory leak of typing.NoDefault by moving it to
the static types array.
: Fix ipaddress.IPv6Address.reverse_pointer output
according to RFC 3596, Â§2.5.  Patch by BÃ©nÃ©dikt
Tran.
: Applied a more surgical fix for malformed payloads in
zipfile.Path causing infinite loops () without breaking
contents using legitimate characters.
: Fix return type for
_pyrepl.readline._ReadlineWrapper.get_line_buffer() to be
.  Patch by Sergey B Kirpichev.
: Raise audit events for the  in the new REPL.
: Fix memory leak in .
: Consistently use same file name for different exceptions in the
new repl. Patch by Sergey B Kirpichev.
: xml.etree.ElementTree.Element.extend() and
 assignment no longer hide the
internal exception if an erronous generator is passed. Patch by Bar Harel.
: Preserve relative path in URL without netloc in
urllib.parse.urlunsplit() and urllib.parse.urlunparse().
: Fix quadratic complexity in parsing -quoted cookie values
with backslashes by http.cookies.
: Fix inspect.getsource() for generated classes with Python
base classes (e.g. enums).
: zipfile.Path.glob now correctly matches directories instead
of silently omitting them.
: zipfile.Path objects now sanitize names from the
zipfile.
: Fixed double-free when using gc.get_referents() with a
freed asyncio.Future iterator.
: logging.handlers.RotatingFileHandler no longer rolls
over empty log files.
: Restore the deprecated   method. It was
removed in Python 3.13 alpha 1. Keep the deprecated  method in
Python 3.13. Patch by Victor Stinner.
: Bump the version of pip bundled in ensurepip to version 24.2.
: Fix the typing.TypeVar constructor when name is passed
by keyword.
: Remove internal frames from tracebacks shown in
code.InteractiveInterpreter with non-default
sys.excepthook(). Save correct tracebacks in
sys.last_traceback and update __traceback__ attribute of
sys.last_value and sys.last_exc.
: On Android, the  and FICLONERANGE constants are
no longer exposed by , as these ioctls are blocked by SELinux.
: Make sure that the new  interprets
sys.tracebacklimit in the same way that the classic REPL did.
: Fix crash when importing  after the main interpreter
restarts.
: In code.InteractiveInterpreter, handle exceptions
caused by calling a non-default sys.excepthook(). Before, the
exception bubbled up to the caller, ending the .
:  headers with embedded newlines are now quoted on
output. The  will now refuse to serialize (write)
headers that are unsafely folded or delimited; see
verify_generated_headers. (Contributed by Bas
Bloemsaat and Petr Viktorin in .)
: Make logging.config.dictConfig() accept any object
implementing the Queue public API. See the queue configuration section for details. Patch by BÃ©nÃ©dikt Tran.
: Fix a crash in the decimal.IEEEContext() optional
function available via the EXTRA_FUNCTIONALITY configuration flag.
: Correctly show error locations, when SyntaxError raised
in new repl. Patch by Sergey B Kirpichev.
: Fix wrapping of long usage text of arguments inside a mutually
exclusive group in .
: webbrowser honors OS preferred browser on Linux when its
desktop entry name contains the text of a known browser name.
: You can now get the raw TLS certificate chains from TLS
connections via ssl.SSLSocket.get_verified_chain() and
ssl.SSLSocket.get_unverified_chain() methods.
Contributed by Mateusz Nowak.

================================================================================

# Changelog - Library (Part 2)

: Fix crash and memory leak in decimal.getcontext(). It
crashed when using a thread-local context by
--with-decimal-contextvar=no.

: Fixed memory leak of typing.NoDefault by moving it to
the static types array.

: Fix ipaddress.IPv6Address.reverse_pointer output
according to RFC 3596, Â§2.5.  Patch by BÃ©nÃ©dikt
Tran.

: Applied a more surgical fix for malformed payloads in
zipfile.Path causing infinite loops () without breaking
contents using legitimate characters.

: Fix return type for
_pyrepl.readline._ReadlineWrapper.get_line_buffer() to be
.  Patch by Sergey B Kirpichev.

: Raise audit events for the  in the new REPL.

: Fix memory leak in .

: Consistently use same file name for different exceptions in the
new repl. Patch by Sergey B Kirpichev.

: xml.etree.ElementTree.Element.extend() and
 assignment no longer hide the
internal exception if an erronous generator is passed. Patch by Bar Harel.

: Preserve relative path in URL without netloc in
urllib.parse.urlunsplit() and urllib.parse.urlunparse().

: Fix quadratic complexity in parsing -quoted cookie values
with backslashes by http.cookies.

: Fix inspect.getsource() for generated classes with Python
base classes (e.g. enums).

================================================================================

# Changelog - Library (Part 3)

: zipfile.Path.glob now correctly matches directories instead
of silently omitting them.

: zipfile.Path objects now sanitize names from the
zipfile.

: Fixed double-free when using gc.get_referents() with a
freed asyncio.Future iterator.

: logging.handlers.RotatingFileHandler no longer rolls
over empty log files.

: Restore the deprecated   method. It was
removed in Python 3.13 alpha 1. Keep the deprecated  method in
Python 3.13. Patch by Victor Stinner.

: Bump the version of pip bundled in ensurepip to version 24.2.

: Fix the typing.TypeVar constructor when name is passed
by keyword.

: Remove internal frames from tracebacks shown in
code.InteractiveInterpreter with non-default
sys.excepthook(). Save correct tracebacks in
sys.last_traceback and update __traceback__ attribute of
sys.last_value and sys.last_exc.

: On Android, the  and FICLONERANGE constants are
no longer exposed by , as these ioctls are blocked by SELinux.

: Make sure that the new  interprets
sys.tracebacklimit in the same way that the classic REPL did.

: Fix crash when importing  after the main interpreter
restarts.

================================================================================

# Changelog - Library (Part 4)

: In code.InteractiveInterpreter, handle exceptions
caused by calling a non-default sys.excepthook(). Before, the
exception bubbled up to the caller, ending the .

:  headers with embedded newlines are now quoted on
output. The  will now refuse to serialize (write)
headers that are unsafely folded or delimited; see
verify_generated_headers. (Contributed by Bas
Bloemsaat and Petr Viktorin in .)

: Make logging.config.dictConfig() accept any object
implementing the Queue public API. See the queue configuration section for details. Patch by BÃ©nÃ©dikt Tran.

: Fix a crash in the decimal.IEEEContext() optional
function available via the EXTRA_FUNCTIONALITY configuration flag.

: Correctly show error locations, when SyntaxError raised
in new repl. Patch by Sergey B Kirpichev.

: Fix wrapping of long usage text of arguments inside a mutually
exclusive group in .

: webbrowser honors OS preferred browser on Linux when its
desktop entry name contains the text of a known browser name.

: You can now get the raw TLS certificate chains from TLS
connections via ssl.SSLSocket.get_verified_chain() and
ssl.SSLSocket.get_unverified_chain() methods.

Contributed by Mateusz Nowak.

================================================================================

# Changelog - IDLE

List:
: Add explicit black IDLE Hovertip foreground color needed for
recent macOS. Fixes Sonoma showing unreadable white on pale yellow.  Patch
by John Riggles.

: Add explicit black IDLE Hovertip foreground color needed for
recent macOS. Fixes Sonoma showing unreadable white on pale yellow.  Patch
by John Riggles.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: asyncio REPL is now again properly recognizing
KeyboardInterrupts. Display of exceptions raised in secondary threads is
fixed.
: Allow the new interactive shell to read history files written
with the editline library that use unicode-escaped entries.  Patch by
aorcajo and Åukasz Langa.
: Fix key mappings for various F-keys in Windows for the new
REPL. Patch by devdanzin
: Change   and   keys of the Python
REPL to history search forward/backward. Patch by Victor Stinner.
: Fix a double decref in rare cases on experimental JIT builds.
: Fix _Py_DebugOffsets for long objects to be relative to the
start of the object rather than the start of a subobject.
: Add AST optimizations for type parameter defaults.
: Prevent Parser/myreadline race condition from segfaulting on
multi-threaded use. Patch by Bar Harel and Amit Wienner.
: Fix a bug causing stray prompts to appear in the middle of
wrapped lines in the new REPL.
: Extend the deprecation period for bool inversion () by two
years.
: Support   and PYTHON_GIL=1 on non-free-threaded builds.
: Deactivate line wrap in the Apple Terminal via a ANSI escape
code. Patch by Pablo Galindo
: Fix valgrind warning by initializing the f-string buffers to 0
in the tokenizer. Patch by Pablo Galindo
: Restore printout of GC stats when
gc.set_debug(gc.DEBUG_STATS) is called. This featue was accidentally
removed when implementing incremental GC.
: Correctly show error locations when a SyntaxError is
raised in the basic REPL. Patch by Sergey B Kirpichev.
: Fix too-wide source location in exception tracebacks coming
from broken iterables in comprehensions.
: Fix a bug where pattern matching code could emit a
JUMP_FORWARD with no source location.
: Fix displaying SyntaxError exceptions covering multiple
lines. Patch by Pablo Galindo
: Fix a potential use-after-free in STORE_ATTR_WITH_HINT.
: Fix crash in free-threaded build when calling
Py_Initialize() from a non-main thread.
: Fix crash on certain calls to  with positional
arguments of the wrong type. Patch by Jelle Zijlstra.
: Fix Android stdout and stderr messages being truncated or lost.
: Fix a crash that occurred when a PyStructSequence was
deallocated after its typeâs dictionary was cleared by the GC.  The typeâs
tp_basicsize now accounts for non-sequence
fields that arenât included in the  of the sequence.
: Add only fields which are modified via self.* to
__static_attributes__.
: Fix too wide source locations of the cleanup instructions of a
with statement.
: Fix source locations of instructions generated for with
statements.
: FrameLocalsProxy now subclasses collections.abc.Mapping
and can be matched as a mapping in  statements

================================================================================

# Changelog - Core and Builtins (Part 2)

: asyncio REPL is now again properly recognizing
KeyboardInterrupts. Display of exceptions raised in secondary threads is
fixed.

: Allow the new interactive shell to read history files written
with the editline library that use unicode-escaped entries.  Patch by
aorcajo and Åukasz Langa.

: Fix key mappings for various F-keys in Windows for the new
REPL. Patch by devdanzin

: Change   and   keys of the Python
REPL to history search forward/backward. Patch by Victor Stinner.

: Fix a double decref in rare cases on experimental JIT builds.

: Fix _Py_DebugOffsets for long objects to be relative to the
start of the object rather than the start of a subobject.

: Add AST optimizations for type parameter defaults.

: Prevent Parser/myreadline race condition from segfaulting on
multi-threaded use. Patch by Bar Harel and Amit Wienner.

: Fix a bug causing stray prompts to appear in the middle of
wrapped lines in the new REPL.

: Extend the deprecation period for bool inversion () by two
years.

: Support   and PYTHON_GIL=1 on non-free-threaded builds.

: Deactivate line wrap in the Apple Terminal via a ANSI escape
code. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix valgrind warning by initializing the f-string buffers to 0
in the tokenizer. Patch by Pablo Galindo

: Restore printout of GC stats when
gc.set_debug(gc.DEBUG_STATS) is called. This featue was accidentally
removed when implementing incremental GC.

: Correctly show error locations when a SyntaxError is
raised in the basic REPL. Patch by Sergey B Kirpichev.

: Fix too-wide source location in exception tracebacks coming
from broken iterables in comprehensions.

: Fix a bug where pattern matching code could emit a
JUMP_FORWARD with no source location.

: Fix displaying SyntaxError exceptions covering multiple
lines. Patch by Pablo Galindo

: Fix a potential use-after-free in STORE_ATTR_WITH_HINT.

: Fix crash in free-threaded build when calling
Py_Initialize() from a non-main thread.

: Fix crash on certain calls to  with positional
arguments of the wrong type. Patch by Jelle Zijlstra.

: Fix Android stdout and stderr messages being truncated or lost.

: Fix a crash that occurred when a PyStructSequence was
deallocated after its typeâs dictionary was cleared by the GC.  The typeâs
tp_basicsize now accounts for non-sequence
fields that arenât included in the  of the sequence.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Add only fields which are modified via self.* to
__static_attributes__.

: Fix too wide source locations of the cleanup instructions of a
with statement.

: Fix source locations of instructions generated for with
statements.

: FrameLocalsProxy now subclasses collections.abc.Mapping
and can be matched as a mapping in  statements

================================================================================

# Changelog - C API

List:
: Fix PyEval_GetLocals() to avoid SystemError
(âbad argument to internal functionâ). Patch by Victor Stinner.

: Fix PyEval_GetLocals() to avoid SystemError
(âbad argument to internal functionâ). Patch by Victor Stinner.

================================================================================

# Changelog - Build

List:
: Updated Android build to use OpenSSL 3.0.15.
: Propagate the value of  to LDCXXSHARED in
. Patch by Pablo Galindo
: Rename build variable MODULE_LDFLAGS back to ,
as itâs used by package build systems (e.g. Meson).
: Fix an issue where the experimental JIT could be built several
times by the   target, leading to possible race
conditions on heavily parallelized builds.
: Fix a possible race condition affecting parallel builds
configured with --enable-experimental-jit, in which
FileNotFoundError could be caused by another process already moving
jit_stencils.h.new to jit_stencils.h.

: Updated Android build to use OpenSSL 3.0.15.

: Propagate the value of  to LDCXXSHARED in
. Patch by Pablo Galindo

: Rename build variable MODULE_LDFLAGS back to ,
as itâs used by package build systems (e.g. Meson).

: Fix an issue where the experimental JIT could be built several
times by the   target, leading to possible race
conditions on heavily parallelized builds.

: Fix a possible race condition affecting parallel builds
configured with --enable-experimental-jit, in which
FileNotFoundError could be caused by another process already moving
jit_stencils.h.new to jit_stencils.h.

================================================================================

# Changelog - Tests

List:
: Add tests for pkgutil.extend_path(). Patch by Andreas
Stocker.
: os.getloadavg() may throw  when running
regression tests under certain conditions (e.g. chroot). This error is now
caught and ignored, since reporting load average is optional.

: Add tests for pkgutil.extend_path(). Patch by Andreas
Stocker.

: os.getloadavg() may throw  when running
regression tests under certain conditions (e.g. chroot). This error is now
caught and ignored, since reporting load average is optional.

================================================================================

# Changelog - Security

List:
: Authenticate the socket connection for the
socket.socketpair() fallback on platforms where  is not
available like Windows.
Patch by Gregory P. Smith <gregkryptoorg> and Seth Larson
<sethpythonorg>. Reported by Ellie <elhorse64org>

: Fixed missing audit events around interactive use of Python,
now also properly firing for  , as well as for  
. The events in question are cpython.run_stdin and
cpython.run_startup.

: Authenticate the socket connection for the
socket.socketpair() fallback on platforms where  is not
available like Windows.

Patch by Gregory P. Smith <gregkryptoorg> and Seth Larson
<sethpythonorg>. Reported by Ellie <elhorse64org>

: Fixed missing audit events around interactive use of Python,
now also properly firing for  , as well as for  
. The events in question are cpython.run_stdin and
cpython.run_startup.

================================================================================

# Changelog - Library (Part 1)

List:
: Handle ValueErrors raised by  in
filecmp.dircmp and filecmp.cmpfiles(). Patch by BÃ©nÃ©dikt
Tran.
: Fix some error messages in .
: Fixed segfault with asyncio.Task.get_coro() when using an
eager task factory.
: ctypes.ARRAY() is now soft deprecated: it no
longer emits deprecation warnings and is not scheduled for removal.
: Restore inspect.ismethoddescriptor() and
inspect.isroutine() returning  for
functools.partial objects.
: Handle ValueErrors raised by  in
. Patch by BÃ©nÃ©dikt Tran.
: Serializing objects with complex __qualname__ (such as
unbound methods and nested classes) by name no longer involves serializing
parent objects by value in pickle protocols < 4.
:  now correctly parses numeric fields (when used with
csv.QUOTE_NONNUMERIC or csv.QUOTE_STRINGS) which start
with an escape character.
: @warnings.deprecated now copies
the coroutine status of functions and methods so that
inspect.iscoroutinefunction() returns the correct result.
: Fixed a bug introduced by  that added an incorrect
extra blank to encoded words occurring in wrapped headers.
: Fix missing sanity check for  arg in
threading.Barrier constructor. Patch by Clinton Christian
(pygeek).
: Fixed the use-after-free issue in  by
disallowing  and  in external timers.

================================================================================

# Changelog - Library (Part 2)

: Handle ValueErrors raised by  in
filecmp.dircmp and filecmp.cmpfiles(). Patch by BÃ©nÃ©dikt
Tran.

: Fix some error messages in .

: Fixed segfault with asyncio.Task.get_coro() when using an
eager task factory.

: ctypes.ARRAY() is now soft deprecated: it no
longer emits deprecation warnings and is not scheduled for removal.

: Restore inspect.ismethoddescriptor() and
inspect.isroutine() returning  for
functools.partial objects.

: Handle ValueErrors raised by  in
. Patch by BÃ©nÃ©dikt Tran.

: Serializing objects with complex __qualname__ (such as
unbound methods and nested classes) by name no longer involves serializing
parent objects by value in pickle protocols < 4.

:  now correctly parses numeric fields (when used with
csv.QUOTE_NONNUMERIC or csv.QUOTE_STRINGS) which start
with an escape character.

: @warnings.deprecated now copies
the coroutine status of functions and methods so that
inspect.iscoroutinefunction() returns the correct result.

: Fixed a bug introduced by  that added an incorrect
extra blank to encoded words occurring in wrapped headers.

: Fix missing sanity check for  arg in
threading.Barrier constructor. Patch by Clinton Christian
(pygeek).

================================================================================

# Changelog - Library (Part 3)

: Fixed the use-after-free issue in  by
disallowing  and  in external timers.

================================================================================

# Changelog - IDLE

List:
: Change About IDLE to direct users to discuss.python.org instead
of the now unused idle-dev email and mailing list.

: Change About IDLE to direct users to discuss.python.org instead
of the now unused idle-dev email and mailing list.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix an issue in JIT builds that prevented some 
loops from correctly firing  monitoring events.
: Dictionary watchers now only deliver the PyDict_EVENT_ADDED
event when the insertion is in a known good state to succeed.
: Preserve AST nodes for f-string with single-element format
specifiers. Patch by Pablo Galindo
: frame.f_locals now supports arbitrary hashable objects
as keys.
: Emit  events in sys.setprofile() when a
PyMethodObject pointing to a PyCFunction is called.
: Fix a bug that caused the tokenizer to not correctly identify
mismatched parentheses inside f-strings in some situations. Patch by Pablo
Galindo
: Make PyEval_GetLocals return borrowed reference

: Fix an issue in JIT builds that prevented some 
loops from correctly firing  monitoring events.

: Dictionary watchers now only deliver the PyDict_EVENT_ADDED
event when the insertion is in a known good state to succeed.

: Preserve AST nodes for f-string with single-element format
specifiers. Patch by Pablo Galindo

: frame.f_locals now supports arbitrary hashable objects
as keys.

: Emit  events in sys.setprofile() when a
PyMethodObject pointing to a PyCFunction is called.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix a bug that caused the tokenizer to not correctly identify
mismatched parentheses inside f-strings in some situations. Patch by Pablo
Galindo

: Make PyEval_GetLocals return borrowed reference

================================================================================

# Changelog - C API

List:
: Make PyObject_Print work around a bug in Android and
OpenBSD which prevented it from throwing an exception when trying to write
to a read-only stream.
: Export private _PyBytes_Join() again.

: Make PyObject_Print work around a bug in Android and
OpenBSD which prevented it from throwing an exception when trying to write
to a read-only stream.

: Export private _PyBytes_Join() again.

================================================================================

# Changelog - Build

List:
: Added a --with-app-store-compliance option to patch
out known issues with macOS/iOS App Store review processes.

: Added a --with-app-store-compliance option to patch
out known issues with macOS/iOS App Store review processes.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_typing random leaks. Clear typing ABC caches when
running tests for refleaks ( option): call _abc_caches_clear()
on typing abstract classes and their subclasses. Patch by Victor Stinner.
: Add a test for readline.set_history_length(). Note that
this test may fail on readline libraries.
: Fix test_expanduser_pwd2() of test_posixpath.  Call
getpwnam() to get , since it can be different than
getpwall() . Patch by Victor Stinner.
: When creating the JUnit XML file, regrtest now escapes
characters which are invalid in XML, such as the chr(27) control character
used in ANSI escape sequences. Patch by Victor Stinner.

: Fix test_typing random leaks. Clear typing ABC caches when
running tests for refleaks ( option): call _abc_caches_clear()
on typing abstract classes and their subclasses. Patch by Victor Stinner.

: Add a test for readline.set_history_length(). Note that
this test may fail on readline libraries.

: Fix test_expanduser_pwd2() of test_posixpath.  Call
getpwnam() to get , since it can be different than
getpwall() . Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 2)

: When creating the JUnit XML file, regrtest now escapes
characters which are invalid in XML, such as the chr(27) control character
used in ANSI escape sequences. Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 1)

List:
: The  argument to filecmp.dircmp (new in Python
3.13) is now keyword-only.
: Simplify handling of the history file in
site.register_readline() helper. The CAN_USE_PYREPL variable now
will be initialized, when imported.  Patch by Sergey B Kirpichev.
: Fix constructor of  nodes with custom
_attributes. Previously, passing custom attributes would raise a
DeprecationWarning. Passing arguments to the constructor that
are not in  or _attributes remains deprecated. Patch by
Jelle Zijlstra.
: Avoid  for the  module when
accessing the depracated atributes of the importlib.abc module.
: Fix a bug in the handling of the command history of the new
 that caused the history file to be wiped at REPL exit.
: Fix waitpid race while calling
send_signal() in asyncio. Patch by Kumar
Aditya.
: Fixed other issues where argparse.ArgumentParser did
not honor exit_on_error=False.
: Fix regression in the new REPL that meant that globals from
files passed using the  argument would not be included in the REPLâs
global namespace. Patch by Alex Waygood.
: Fix wrong references of the  types after
reloading the module.
: datetime.datetime.strftime() now 0-pads years with less
than four digits for the format specifiers  and  on Linux.
Patch by Ben Hsing
: Defer the  import in importlib.util until lazy
loading is used.
: When using the  operator or  with
 as the base and an exponent that is not
rational, a float, or a complex, the fraction is no longer converted to a
float.
: Allow  in post-mortem debugging of .
Removed restart message when the user quits pdb from post-mortem mode.
: Fix performance degradation in
logging.handlers.RotatingFileHandler. Patch by Craig Robson.

================================================================================

# Changelog - Library (Part 2)

: The  argument to filecmp.dircmp (new in Python
3.13) is now keyword-only.

: Simplify handling of the history file in
site.register_readline() helper. The CAN_USE_PYREPL variable now
will be initialized, when imported.  Patch by Sergey B Kirpichev.

: Fix constructor of  nodes with custom
_attributes. Previously, passing custom attributes would raise a
DeprecationWarning. Passing arguments to the constructor that
are not in  or _attributes remains deprecated. Patch by
Jelle Zijlstra.

: Avoid  for the  module when
accessing the depracated atributes of the importlib.abc module.

: Fix a bug in the handling of the command history of the new
 that caused the history file to be wiped at REPL exit.

: Fix waitpid race while calling
send_signal() in asyncio. Patch by Kumar
Aditya.

: Fixed other issues where argparse.ArgumentParser did
not honor exit_on_error=False.

: Fix regression in the new REPL that meant that globals from
files passed using the  argument would not be included in the REPLâs
global namespace. Patch by Alex Waygood.

: Fix wrong references of the  types after
reloading the module.

================================================================================

# Changelog - Library (Part 3)

: datetime.datetime.strftime() now 0-pads years with less
than four digits for the format specifiers  and  on Linux.
Patch by Ben Hsing

: Defer the  import in importlib.util until lazy
loading is used.

: When using the  operator or  with
 as the base and an exponent that is not
rational, a float, or a complex, the fraction is no longer converted to a
float.

: Allow  in post-mortem debugging of .
Removed restart message when the user quits pdb from post-mortem mode.

: Fix performance degradation in
logging.handlers.RotatingFileHandler. Patch by Craig Robson.

================================================================================

# Changelog - IDLE

List:
: Stop Shell freezes by blocking user access to non-method
sys.stdout.shell attributes, which are all private.

: Stop Shell freezes by blocking user access to non-method
sys.stdout.shell attributes, which are all private.

================================================================================

# Changelog - Documentation

List:
: Fix documentation for PyModule_AddObjectRef().
: Clarify the behaviours of multiprocessing.Queue.empty()
and multiprocessing.SimpleQueue.empty() on closed queues. Patch by
BÃ©nÃ©dikt Tran.

: Fix documentation for PyModule_AddObjectRef().

: Clarify the behaviours of multiprocessing.Queue.empty()
and multiprocessing.SimpleQueue.empty() on closed queues. Patch by
BÃ©nÃ©dikt Tran.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix crash when rematerializing a managed dictionary after it
was deleted.
: Fixed the SegFault when PyEval_SetTrace() is used with
no Python frame on stack.
: Fix PyREPL console getting into a blocked state after
interrupting a long paste
: Fix bug in free-threaded Python where a resurrected object
could lead to a negative ref count assertion failure.
: Improve the SyntaxError message if the user tries to use
  outside a function.
: Fix pasting of characters containing unicode character joiners
in the new REPL. Patch by Marta Gomez Macias
: Unexpected slot wrappers are no longer created for builtin
static types in subinterpreters.
: Fix a bug affecting how multi-line history was being rendered
in the new REPL after interacting with the new screen cache. Patch by
Pablo Galindo
: Fix a bug that was preventing the REPL to correctly respect the
history when an input hook was set. Patch by Pablo Galindo
: Tier 2 execution now ensures that list iterators remain
exhausted, once they become exhausted.
: Allow tuples of length 20 in the freelist to be reused.
: Fix race condition in _PyType_Lookup in the free-threaded
build due to a missing memory fence.  This could lead to
_PyType_Lookup returning incorrect results on arm64.
: Fix f-strings with debug expressions in format specifiers.
Patch by Pablo Galindo
: PyLong_AsNativeBytes() no longer uses
__index__() methods by default. The
Py_ASNATIVEBYTES_ALLOW_INDEX flag has been added to allow it.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix crash when rematerializing a managed dictionary after it
was deleted.

: Fixed the SegFault when PyEval_SetTrace() is used with
no Python frame on stack.

: Fix PyREPL console getting into a blocked state after
interrupting a long paste

: Fix bug in free-threaded Python where a resurrected object
could lead to a negative ref count assertion failure.

: Improve the SyntaxError message if the user tries to use
  outside a function.

: Fix pasting of characters containing unicode character joiners
in the new REPL. Patch by Marta Gomez Macias

: Unexpected slot wrappers are no longer created for builtin
static types in subinterpreters.

: Fix a bug affecting how multi-line history was being rendered
in the new REPL after interacting with the new screen cache. Patch by
Pablo Galindo

: Fix a bug that was preventing the REPL to correctly respect the
history when an input hook was set. Patch by Pablo Galindo

: Tier 2 execution now ensures that list iterators remain
exhausted, once they become exhausted.

: Allow tuples of length 20 in the freelist to be reused.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix race condition in _PyType_Lookup in the free-threaded
build due to a missing memory fence.  This could lead to
_PyType_Lookup returning incorrect results on arm64.

: Fix f-strings with debug expressions in format specifiers.
Patch by Pablo Galindo

: PyLong_AsNativeBytes() no longer uses
__index__() methods by default. The
Py_ASNATIVEBYTES_ALLOW_INDEX flag has been added to allow it.

================================================================================

# Changelog - C API (Part 1)

List:
: Export the PySignal_SetWakeupFd() function. Previously,
the function was documented but it couldnât be used in 3rd party code.
Patch by Victor Stinner.
: PyUnicode_InternInPlace() no longer prevents its
argument from being garbage collected.
Several functions that take   are now documented as possibly
preventing string objects from being garbage collected; refer to their
documentation for details: PyUnicode_InternFromString(),
PyDict_SetItemString(), PyObject_SetAttrString(),
PyObject_DelAttrString(), PyUnicode_InternFromString(),
and PyModule_Add* convenience functions.

: Removed debug build assertions related to interning strings,
which were falsely triggered by stable ABI extensions.
: Restore the private _PyArg_Parser structure and the private
_PyArg_ParseTupleAndKeywordsFast() function, previously removed in
Python 3.13 alpha 1. Patch by Victor Stinner.

: Export the PySignal_SetWakeupFd() function. Previously,
the function was documented but it couldnât be used in 3rd party code.
Patch by Victor Stinner.

: PyUnicode_InternInPlace() no longer prevents its
argument from being garbage collected.

================================================================================

# Changelog - C API (Part 2)

Several functions that take   are now documented as possibly
preventing string objects from being garbage collected; refer to their
documentation for details: PyUnicode_InternFromString(),
PyDict_SetItemString(), PyObject_SetAttrString(),
PyObject_DelAttrString(), PyUnicode_InternFromString(),
and PyModule_Add* convenience functions.

: Removed debug build assertions related to interning strings,
which were falsely triggered by stable ABI extensions.

: Restore the private _PyArg_Parser structure and the private
_PyArg_ParseTupleAndKeywordsFast() function, previously removed in
Python 3.13 alpha 1. Patch by Victor Stinner.

================================================================================

# Changelog - Build

List:
: Support WASI SDK 22 by explicitly skipping functions that are
just stubs in wasi-libc.
: Fix mimalloc compile error on GNU/Hurd
: Fix deprecation warning for ATOMIC_VAR_INIT in mimalloc.
: Fix a Makefile bug that prevented mimalloc header files from
being installed.
: On POSIX systems, excluding macOS framework installs, the lib
directory for the free-threaded build now includes a âtâ suffix to avoid
conflicts with a co-located default build installation.
: The default minimum iOS version was increased to 13.0.
: Improve  and curses.panel dependency checks
in .

: Support WASI SDK 22 by explicitly skipping functions that are
just stubs in wasi-libc.

: Fix mimalloc compile error on GNU/Hurd

: Fix deprecation warning for ATOMIC_VAR_INIT in mimalloc.

: Fix a Makefile bug that prevented mimalloc header files from
being installed.

: On POSIX systems, excluding macOS framework installs, the lib
directory for the free-threaded build now includes a âtâ suffix to avoid
conflicts with a co-located default build installation.

: The default minimum iOS version was increased to 13.0.

: Improve  and curses.panel dependency checks
in .

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Py_Finalize() and Py_FinalizeEx() now
always run with the main interpreter active.
: Subinterpreters now get cleaned up automatically during runtime
finalization.
: Make sure that invariants of type versioning are maintained: *
Superclasses always have their version number assigned before subclasses *
The version tag is always zero if the tag is not valid. * The version tag
is always non-zero if the tag is valid.
: Fix _CHECK_STACK_SPACE optimization problems introduced in
.
: Correctly set the bytecode position on return instructions
within lambdas. Patch by Jelle Zijlstra.
: Fix bug where compiler creates a redundant jump during
pseudo-op replacement. Can only happen with a synthetic AST that has a try
on the same line as the instruction following the exception handler.
: Strings interned with sys.intern() are again
garbage-collected when no longer used, as per the documentation. Strings
interned with the C function PyUnicode_InternInPlace() are still
immortal. Internals of the string interning mechanism have been changed.
This may affect performance and identities of  objects.
: Fix an array out of bounds crash in list_ass_subscript,
which could be invoked via some specificly tailored input: including
concurrent modification of a list object, where one thread assigns a slice
and another clears it.
: Fix crash in compiler on code with redundant NOPs and JUMPs
which show up after exception handlers are moved to the end of the code.
: Fix Python implementation of pickle.Pickler for
 and  objects when using protocol version
5. Patch by BÃ©nÃ©dikt Tran.
: Support Linux perf profiler to see Python calls on RISC-V
architecture.
: Deliver real signals on Ctrl-C and Ctrl-Z in the new REPL.
Patch by Pablo Galindo
: Respect PYTHON_BASIC_REPL when running in interative
inspect mode ( ). Patch by Pablo Galindo
: Fix source locations of instructions generated for the iterator
of a for statement.
: Fix a crash when multiple threads read and write to the same
 of an object concurrently.
: Fix use-after free in list_richcompare_impl which can be
invoked via some specificly tailored evil input.
: Fix a compiler crash in the case where two comprehensions in
class scope both reference .
: Fix crash in compiler on empty block at end of exception
handler.
: Improve SyntaxError messages for invalid expressions in
a type parameters bound, a type parameter constraint tuple or a default
type parameter. Patch by BÃ©nÃ©dikt Tran.
: Fix handling of  argument to subclasses of .

================================================================================

# Changelog - Core and Builtins (Part 2)

: Py_Finalize() and Py_FinalizeEx() now
always run with the main interpreter active.

: Subinterpreters now get cleaned up automatically during runtime
finalization.

: Make sure that invariants of type versioning are maintained: *
Superclasses always have their version number assigned before subclasses *
The version tag is always zero if the tag is not valid. * The version tag
is always non-zero if the tag is valid.

: Fix _CHECK_STACK_SPACE optimization problems introduced in
.

: Correctly set the bytecode position on return instructions
within lambdas. Patch by Jelle Zijlstra.

: Fix bug where compiler creates a redundant jump during
pseudo-op replacement. Can only happen with a synthetic AST that has a try
on the same line as the instruction following the exception handler.

: Strings interned with sys.intern() are again
garbage-collected when no longer used, as per the documentation. Strings
interned with the C function PyUnicode_InternInPlace() are still
immortal. Internals of the string interning mechanism have been changed.
This may affect performance and identities of  objects.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix an array out of bounds crash in list_ass_subscript,
which could be invoked via some specificly tailored input: including
concurrent modification of a list object, where one thread assigns a slice
and another clears it.

: Fix crash in compiler on code with redundant NOPs and JUMPs
which show up after exception handlers are moved to the end of the code.

: Fix Python implementation of pickle.Pickler for
 and  objects when using protocol version
5. Patch by BÃ©nÃ©dikt Tran.

: Support Linux perf profiler to see Python calls on RISC-V
architecture.

: Deliver real signals on Ctrl-C and Ctrl-Z in the new REPL.
Patch by Pablo Galindo

: Respect PYTHON_BASIC_REPL when running in interative
inspect mode ( ). Patch by Pablo Galindo

: Fix source locations of instructions generated for the iterator
of a for statement.

: Fix a crash when multiple threads read and write to the same
 of an object concurrently.

: Fix use-after free in list_richcompare_impl which can be
invoked via some specificly tailored evil input.

: Fix a compiler crash in the case where two comprehensions in
class scope both reference .

: Fix crash in compiler on empty block at end of exception
handler.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Improve SyntaxError messages for invalid expressions in
a type parameters bound, a type parameter constraint tuple or a default
type parameter. Patch by BÃ©nÃ©dikt Tran.

: Fix handling of  argument to subclasses of .

================================================================================

# Changelog - Library (Part 1)

List:
: Add a future warning in functools.partial.__get__(). In
future Python versions functools.partial will be a method
descriptor.
: Improve the __repr__() of
functools.partialmethod. Patch by BÃ©nÃ©dikt Tran.
: Fixed an issue where
argparse.ArgumentParser.parses_args() did not honor
exit_on_error=False when given unrecognized arguments. Patch by Ben
Hsing.
: Fix truncation of strings with embedded null characters in some
internal operations in .
: When reading installed files from an egg, use
relative_to(walk_up=True) to honor files installed outside of the
installation root.
: Upgrade pip wheel bundled with ensurepip (pip 24.1.1)
: Accessing the  objectâs string representation no
longer converts the underlying Tcl object to a string on Windows.
: Fix possible memory leak in contextvars.Context.run().
: Make empty line in  repeats the last command even
when the command is from .
: Fix  passing to unittest.mock.Mock object when
using unittest.mock.create_autospec().
: Fix an error in logging.LogRecord, when the integer
part of the timestamp is rounded up, while the millisecond calculation
truncates, causing the log timestamp to be wrong by up to 999 ms (affected
roughly 1 in 8 million timestamps).
: Move scrollbar and remove tear-off menus in turtledemo.
: Improve the prompt in the âlessâ pager when  is
called with non-string argument.
: Fix incorrect exception handling in Tab Nanny. Patch by
Wulian233.
: Correct inspect.ismethoddescriptor() to check also for
the lack of __delete__().  Patch by Jan Kaliszewski.
: The OS byte in gzip headers is now always set to 255 when using
gzip.compress().
: Fix column offset reporting for tokens that come after
multiline f-strings in the  module.
: Fix unittest.mock.patch() to not read attributes of the
target when new_callable is set. Patch by Robert Collins.
: Fix edge-case bug where typing.get_type_hints() would
produce incorrect results if type parameters in a class scope were
overridden by assignments in a class scope and  __future__ 
annotations semantics were enabled. Patch by Alex Waygood.
: Fix erroneous  when calling
inspect.get_annotations() with eval_str=True` on a class that
made use of  type parameters in a module that had 
__future__  annotations at the top of the file. Patch by Alex
Waygood.
: Prohibit passing  to pure-Python
datetime.date.fromtimestamp() to achieve consistency with
C-extension implementation.
: Fix memory leak in  when the replacement string
contains backreferences.
: Fix tkinter.ttk with Tcl/Tk 9.0.
: Fix crash in C version of datetime.datetime.strptime()
when called again on the restarted interpreter.
:  no longer crashes in certain complex reference
cycle situations.
: Fix symtable.Class.get_methods() and document its
behaviour. Patch by BÃ©nÃ©dikt Tran.
: Add concurrent.futures.InvalidStateError to moduleâs
.
: Add the symtable.SymbolTableType enumeration to
represent the possible outputs of the
symtable.SymbolTable.get_type method. Patch by BÃ©nÃ©dikt Tran.
: Fix calling copy.deepcopy() on  trees that have
been modified to have references to parent nodes. Patch by Jelle Zijlstra.
: Support building  with Tcl 9.0.
: unittest.mock.Mock.attach_mock() no longer triggers a call
to a PropertyMock being attached.
:  and showtopic() methods now respect a
configured  argument to pydoc.Helper and not use the
pager in such cases. Patch by Enrico TrÃ¶ger.
: The DeprecationWarning emitted when testing the truth
value of an xml.etree.ElementTree.Element now describes
unconditionally returning  in a future version rather than raising
an exception in Python 3.14.
: Limit exposed globals from internal imports and definitions on
new REPL startup. Patch by Eugene Triguba and Pablo Galindo.
: Fix io.TextIOWrapper.write() method breaks internal
buffer when the method is called again during flushing internal buffer.

================================================================================

# Changelog - Library (Part 2)

: Add a future warning in functools.partial.__get__(). In
future Python versions functools.partial will be a method
descriptor.

: Improve the __repr__() of
functools.partialmethod. Patch by BÃ©nÃ©dikt Tran.

: Fixed an issue where
argparse.ArgumentParser.parses_args() did not honor
exit_on_error=False when given unrecognized arguments. Patch by Ben
Hsing.

: Fix truncation of strings with embedded null characters in some
internal operations in .

: When reading installed files from an egg, use
relative_to(walk_up=True) to honor files installed outside of the
installation root.

: Upgrade pip wheel bundled with ensurepip (pip 24.1.1)

: Accessing the  objectâs string representation no
longer converts the underlying Tcl object to a string on Windows.

: Fix possible memory leak in contextvars.Context.run().

: Make empty line in  repeats the last command even
when the command is from .

: Fix  passing to unittest.mock.Mock object when
using unittest.mock.create_autospec().

================================================================================

# Changelog - Library (Part 3)

: Fix an error in logging.LogRecord, when the integer
part of the timestamp is rounded up, while the millisecond calculation
truncates, causing the log timestamp to be wrong by up to 999 ms (affected
roughly 1 in 8 million timestamps).

: Move scrollbar and remove tear-off menus in turtledemo.

: Improve the prompt in the âlessâ pager when  is
called with non-string argument.

: Fix incorrect exception handling in Tab Nanny. Patch by
Wulian233.

: Correct inspect.ismethoddescriptor() to check also for
the lack of __delete__().  Patch by Jan Kaliszewski.

: The OS byte in gzip headers is now always set to 255 when using
gzip.compress().

: Fix column offset reporting for tokens that come after
multiline f-strings in the  module.

: Fix unittest.mock.patch() to not read attributes of the
target when new_callable is set. Patch by Robert Collins.

: Fix edge-case bug where typing.get_type_hints() would
produce incorrect results if type parameters in a class scope were
overridden by assignments in a class scope and  __future__ 
annotations semantics were enabled. Patch by Alex Waygood.

================================================================================

# Changelog - Library (Part 4)

: Fix erroneous  when calling
inspect.get_annotations() with eval_str=True` on a class that
made use of  type parameters in a module that had 
__future__  annotations at the top of the file. Patch by Alex
Waygood.

: Prohibit passing  to pure-Python
datetime.date.fromtimestamp() to achieve consistency with
C-extension implementation.

: Fix memory leak in  when the replacement string
contains backreferences.

: Fix tkinter.ttk with Tcl/Tk 9.0.

: Fix crash in C version of datetime.datetime.strptime()
when called again on the restarted interpreter.

:  no longer crashes in certain complex reference
cycle situations.

: Fix symtable.Class.get_methods() and document its
behaviour. Patch by BÃ©nÃ©dikt Tran.

: Add concurrent.futures.InvalidStateError to moduleâs
.

: Add the symtable.SymbolTableType enumeration to
represent the possible outputs of the
symtable.SymbolTable.get_type method. Patch by BÃ©nÃ©dikt Tran.

: Fix calling copy.deepcopy() on  trees that have
been modified to have references to parent nodes. Patch by Jelle Zijlstra.

: Support building  with Tcl 9.0.

: unittest.mock.Mock.attach_mock() no longer triggers a call
to a PropertyMock being attached.

================================================================================

# Changelog - Library (Part 5)

:  and showtopic() methods now respect a
configured  argument to pydoc.Helper and not use the
pager in such cases. Patch by Enrico TrÃ¶ger.

: The DeprecationWarning emitted when testing the truth
value of an xml.etree.ElementTree.Element now describes
unconditionally returning  in a future version rather than raising
an exception in Python 3.14.

: Limit exposed globals from internal imports and definitions on
new REPL startup. Patch by Eugene Triguba and Pablo Galindo.

: Fix io.TextIOWrapper.write() method breaks internal
buffer when the method is called again during flushing internal buffer.

================================================================================

# Changelog - Build

List:
: Fix failing configure tests due to a missing space when
appending to CFLAGS.
: Correctly handle LLVM installs with LLVM_VERSION_SUFFIX
when building with --enable-experimental-jit.
: On Windows, fix build error when --disable-gil and
--experimental-jit options are combined.
: Make the python-config shell script compatible with
non-bash shells.

: Fix failing configure tests due to a missing space when
appending to CFLAGS.

: Correctly handle LLVM installs with LLVM_VERSION_SUFFIX
when building with --enable-experimental-jit.

: On Windows, fix build error when --disable-gil and
--experimental-jit options are combined.

: Make the python-config shell script compatible with
non-bash shells.

================================================================================

# Changelog - C API (Part 1)

List:
: Remove the private _Py_CODEUNIT type from the public C API.
The internal pycore_code.h header should now be used to get this
internal type. Patch by Victor Stinner.
: PyDict_Next() no longer locks the dictionary in the
free-threaded build.  The locking needs to be done by the caller around
the entire iteration loop.
: Remove the following unstable functions:

PyUnstable_Replace_Executor()
PyUnstable_SetOptimizer()
PyUnstable_GetOptimizer()
PyUnstable_GetExecutor()
PyUnstable_Optimizer_NewCounter()
PyUnstable_Optimizer_NewUOpOptimizer()

Patch by Victor Stinner.

: The critical section API is now public as part of the
non-limited C API.
: Add PyUnstable_Object_ClearWeakRefsNoCallbacks(), which
clears weakrefs without calling their callbacks.
: Make the  public in the non-limited C API.

: Remove the private _Py_CODEUNIT type from the public C API.
The internal pycore_code.h header should now be used to get this
internal type. Patch by Victor Stinner.

: PyDict_Next() no longer locks the dictionary in the
free-threaded build.  The locking needs to be done by the caller around
the entire iteration loop.

: Remove the following unstable functions:

================================================================================

# Changelog - C API (Part 2)

List:
PyUnstable_Replace_Executor()
PyUnstable_SetOptimizer()
PyUnstable_GetOptimizer()
PyUnstable_GetExecutor()
PyUnstable_Optimizer_NewCounter()
PyUnstable_Optimizer_NewUOpOptimizer()

PyUnstable_Replace_Executor()

PyUnstable_SetOptimizer()

PyUnstable_GetOptimizer()

PyUnstable_GetExecutor()

PyUnstable_Optimizer_NewCounter()

PyUnstable_Optimizer_NewUOpOptimizer()

Patch by Victor Stinner.

: The critical section API is now public as part of the
non-limited C API.

: Add PyUnstable_Object_ClearWeakRefsNoCallbacks(), which
clears weakrefs without calling their callbacks.

: Make the  public in the non-limited C API.

================================================================================

# Changelog - Security

List:
: Fixes creation of ACLs in os.mkdir() on Windows to work
correctly on non-English machines.
: os.mkdir() on Windows now accepts  of  to
restrict the new directory to the current user. This fixes
CVE 2024-4030 affecting tempfile.mkdtemp() in scenarios where the
base temporary directory is more permissive than the default.

: Fixes creation of ACLs in os.mkdir() on Windows to work
correctly on non-English machines.

: os.mkdir() on Windows now accepts  of  to
restrict the new directory to the current user. This fixes
CVE 2024-4030 affecting tempfile.mkdtemp() in scenarios where the
base temporary directory is more permissive than the default.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Reverted improvements to error messages for /
statements not matching any valid statements, which made in hard to locate
the syntax errors inside those / blocks.
: Honor PyOS_InputHook() in the new REPL. Patch by Pablo
Galindo
: Fix execution of annotation scopes
within classes when  is set to a non-dict. Patch by Jelle
Zijlstra.
: Add a  command to the REPL. Patch by Pablo Galindo
: Fix the signature of str.format_map().
: An invalid assert in beta 1 has been removed.  The assert would
fail if PyState_FindModule() was used in an extension moduleâs init
function before the module def had been initialized.
: Fix deadlock during thread deletion in free-threaded build,
which could occur when the GIL was enabled at runtime.
: Fix deadlock involving _PyType_Lookup() cache in the
free-threaded build when the GIL is dynamically enabled at runtime.
: Fix bug where names are unexpectedly mangled in the bases of
generic classes.
: Fix bug where names appearing after a generic class are mangled
as if they are in the generic class.
: Non-builtin modules built with argument clinic were crashing if
used in a subinterpreter before the main interpreter.  The objects that
were causing the problem by leaking between interpreters carelessly have
been fixed.
: Fixes type.__type_params__ to return an empty tuple instead
of a descriptor.
: Avoid creating unnecessary StopIteration instances for
monitoring.
: Fix displaying the source line for warnings created by the C
API if the  module had not yet been imported.
: Fix build failures when configuring with both --disable-gil
and --enable-experimental-jit.
: Add  method for FrameLocalsProxy which returns a
snapshot  for local variables.
: Fix data races on the field that stores a pointer to the
interpreterâs main thread that occur in free-threaded builds.
: Fix race condition in free-threaded build where
list.extend() could expose uninitialised memory to concurrent
readers.
: Avoid assertion failure for debug builds when calling
object.__sizeof__(1)

================================================================================

# Changelog - Core and Builtins (Part 2)

: Reverted improvements to error messages for /
statements not matching any valid statements, which made in hard to locate
the syntax errors inside those / blocks.

: Honor PyOS_InputHook() in the new REPL. Patch by Pablo
Galindo

: Fix execution of annotation scopes
within classes when  is set to a non-dict. Patch by Jelle
Zijlstra.

: Add a  command to the REPL. Patch by Pablo Galindo

: Fix the signature of str.format_map().

: An invalid assert in beta 1 has been removed.  The assert would
fail if PyState_FindModule() was used in an extension moduleâs init
function before the module def had been initialized.

: Fix deadlock during thread deletion in free-threaded build,
which could occur when the GIL was enabled at runtime.

: Fix deadlock involving _PyType_Lookup() cache in the
free-threaded build when the GIL is dynamically enabled at runtime.

: Fix bug where names are unexpectedly mangled in the bases of
generic classes.

: Fix bug where names appearing after a generic class are mangled
as if they are in the generic class.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Non-builtin modules built with argument clinic were crashing if
used in a subinterpreter before the main interpreter.  The objects that
were causing the problem by leaking between interpreters carelessly have
been fixed.

: Fixes type.__type_params__ to return an empty tuple instead
of a descriptor.

: Avoid creating unnecessary StopIteration instances for
monitoring.

: Fix displaying the source line for warnings created by the C
API if the  module had not yet been imported.

: Fix build failures when configuring with both --disable-gil
and --enable-experimental-jit.

: Add  method for FrameLocalsProxy which returns a
snapshot  for local variables.

: Fix data races on the field that stores a pointer to the
interpreterâs main thread that occur in free-threaded builds.

: Fix race condition in free-threaded build where
list.extend() could expose uninitialised memory to concurrent
readers.

: Avoid assertion failure for debug builds when calling
object.__sizeof__(1)

================================================================================

# Changelog - Library (Part 1)

List:
: Fix regression to allow logging configuration with
multiprocessing queue types.
: The  module may now be imported in all
subinterpreters, including those that have their own GIL.
: Fix _pyrepl crash when using custom prompt with ANSI escape
codes.
: The  module (C implementation for )
now supports being imported in multiple interpreters.
: Fix issue with shutil.rmtree() where a
RecursionError is raised on deep directory trees.
: Partially fix issue with shutil.rmtree() where a
RecursionError is raised on deep directory trees. A recursion error
is no longer raised when rmtree.avoids_symlink_attacks is false.
: Fix performance regression in the  module by
caching the  token attribute and calculating the column offset
more efficiently.
: Fix issue with os.fwalk() where a RecursionError
was raised on deep directory trees by adjusting the implementation to be
iterative instead of recursive.
: zipfile.Path.is_symlink now assesses if the given path is a
symlink.
: Catch SyntaxError from  in the
runsource() method of the InteractiveColoredConsole.  Patch by Sergey B
Kirpichev.
: Now, the method sock_connect of
asyncio.ProactorEventLoop raises a ValueError if given
socket is not in non-blocking mode, as well as in other loop
implementations.
: The interactive REPL no longer runs with  __future__
 annotations enabled. Patch by Jelle Zijlstra.
: Objects in the datetime C-API are now all statically allocated,
which means better memory safety, especially when the module is reloaded.
This should be transparent to users.
:  REPL now has the same capabilities as PyREPL.
: In PyREPL, updated maybe-acceptâs logic so that if the user
hits  twice, they are able to terminate the block even if
thereâs trailing whitespace. Also, now when the user hits arrow up, the
cursor is on the last functional line. This matches IPythonâs behavior.
Patch by Aya Elsayed.
: Remove dependency to  from the new Python REPL.
: Fix high DPI causes turtledemo(turtle-graphics examples)
windows blurry Patch by Wulian233 and Terry Jan Reedy
: Fix a NameError happening in
asyncio.staggered.staggered_race. This function is now tested.
: Fix issue where pathlib.PurePath.with_suffix() didnât
raise  when given  as a suffix.
: Fix an AttributeError in the  module when re-fold a
long address list. Also fix more cases of incorrect encoding of the
address separator in the address list.
: Make  return to caller frame correctly when
 of the caller frame is not set
: Setting attributes on typing.NoDefault now raises
AttributeError instead of .
: Fixed issue where kwargs were no longer passed to the logging
handler QueueHandler
:  arguments to the constructors of  node
classes now default to ast.Load(). Patch by Jelle
Zijlstra.
: Restore the default value of tkiter.wantobjects to .
: Fix errors in calling Tkinter bindings on Windows.
: Fix os.path.isfile() on Windows for pipes. Speedup
os.path.isjunction() and os.path.lexists() on Windows with a
native implementation.
: Allow typing.TypeVar instances without a default to
follow instances without a default in some cases. Patch by Jelle Zijlstra.
: os.path.realpath() now suppresses any  from
os.readlink() when  mode is disabled (the default).
: Speed up os.path.splitroot() & os.path.normpath()
with a direct C call.
: Fix dataclasses.dataclass() not creating a
__weakref__ slot when subclassing typing.Generic.
: In importlib.resources, sync with importlib_resources
6.3.2,
including: MultiplexedPath now expects Traversable paths,
deprecating string arguments to MultiplexedPath; Enabled support for
resources in namespace packages in zip files; Fixed NotADirectoryError
when calling files on a subdirectory of a namespace package.
: Ignore warnings on text completion inside REPL.
: Fix lack of newline characters in  module output
when line tracing is enabled but source code line for current frame is not
available.
: Fix missing spaces in email headers when the spaces are mixed
with encoded 8-bit characters.
: Prepare Tkinter for C API changes in Tcl 8.7/9.0 to avoid
_tkinter.Tcl_Obj being unexpectedly returned instead of
, , , or .
: Fixed handling in inspect.Signature.bind() of keyword
arguments having the same name as positional-only arguments when a
variadic keyword argument (e.g. ) is present.
: Fix integer conversion in os.major(), os.minor(),
and os.makedev(). Support device numbers larger than .
Support non-existent device number ().
: Fix urllib.parse.urlunparse() and
urllib.parse.urlunsplit() for URIs with path starting with multiple
slashes and no authority. Based on patch by Ashwin Ramaswami.

================================================================================

# Changelog - Library (Part 2)

: Fix regression to allow logging configuration with
multiprocessing queue types.

: The  module may now be imported in all
subinterpreters, including those that have their own GIL.

: Fix _pyrepl crash when using custom prompt with ANSI escape
codes.

: The  module (C implementation for )
now supports being imported in multiple interpreters.

: Fix issue with shutil.rmtree() where a
RecursionError is raised on deep directory trees.

: Partially fix issue with shutil.rmtree() where a
RecursionError is raised on deep directory trees. A recursion error
is no longer raised when rmtree.avoids_symlink_attacks is false.

: Fix performance regression in the  module by
caching the  token attribute and calculating the column offset
more efficiently.

: Fix issue with os.fwalk() where a RecursionError
was raised on deep directory trees by adjusting the implementation to be
iterative instead of recursive.

: zipfile.Path.is_symlink now assesses if the given path is a
symlink.

: Catch SyntaxError from  in the
runsource() method of the InteractiveColoredConsole.  Patch by Sergey B
Kirpichev.

================================================================================

# Changelog - Library (Part 3)

: Now, the method sock_connect of
asyncio.ProactorEventLoop raises a ValueError if given
socket is not in non-blocking mode, as well as in other loop
implementations.

: The interactive REPL no longer runs with  __future__
 annotations enabled. Patch by Jelle Zijlstra.

: Objects in the datetime C-API are now all statically allocated,
which means better memory safety, especially when the module is reloaded.
This should be transparent to users.

:  REPL now has the same capabilities as PyREPL.

: In PyREPL, updated maybe-acceptâs logic so that if the user
hits  twice, they are able to terminate the block even if
thereâs trailing whitespace. Also, now when the user hits arrow up, the
cursor is on the last functional line. This matches IPythonâs behavior.
Patch by Aya Elsayed.

: Remove dependency to  from the new Python REPL.

: Fix high DPI causes turtledemo(turtle-graphics examples)
windows blurry Patch by Wulian233 and Terry Jan Reedy

: Fix a NameError happening in
asyncio.staggered.staggered_race. This function is now tested.

: Fix issue where pathlib.PurePath.with_suffix() didnât
raise  when given  as a suffix.

================================================================================

# Changelog - Library (Part 4)

: Fix an AttributeError in the  module when re-fold a
long address list. Also fix more cases of incorrect encoding of the
address separator in the address list.

: Make  return to caller frame correctly when
 of the caller frame is not set

: Setting attributes on typing.NoDefault now raises
AttributeError instead of .

: Fixed issue where kwargs were no longer passed to the logging
handler QueueHandler

:  arguments to the constructors of  node
classes now default to ast.Load(). Patch by Jelle
Zijlstra.

: Restore the default value of tkiter.wantobjects to .

: Fix errors in calling Tkinter bindings on Windows.

: Fix os.path.isfile() on Windows for pipes. Speedup
os.path.isjunction() and os.path.lexists() on Windows with a
native implementation.

: Allow typing.TypeVar instances without a default to
follow instances without a default in some cases. Patch by Jelle Zijlstra.

: os.path.realpath() now suppresses any  from
os.readlink() when  mode is disabled (the default).

: Speed up os.path.splitroot() & os.path.normpath()
with a direct C call.

: Fix dataclasses.dataclass() not creating a
__weakref__ slot when subclassing typing.Generic.

================================================================================

# Changelog - Library (Part 5)

: In importlib.resources, sync with importlib_resources
6.3.2,
including: MultiplexedPath now expects Traversable paths,
deprecating string arguments to MultiplexedPath; Enabled support for
resources in namespace packages in zip files; Fixed NotADirectoryError
when calling files on a subdirectory of a namespace package.

: Ignore warnings on text completion inside REPL.

: Fix lack of newline characters in  module output
when line tracing is enabled but source code line for current frame is not
available.

: Fix missing spaces in email headers when the spaces are mixed
with encoded 8-bit characters.

: Prepare Tkinter for C API changes in Tcl 8.7/9.0 to avoid
_tkinter.Tcl_Obj being unexpectedly returned instead of
, , , or .

: Fixed handling in inspect.Signature.bind() of keyword
arguments having the same name as positional-only arguments when a
variadic keyword argument (e.g. ) is present.

: Fix integer conversion in os.major(), os.minor(),
and os.makedev(). Support device numbers larger than .
Support non-existent device number ().

================================================================================

# Changelog - Library (Part 6)

: Fix urllib.parse.urlunparse() and
urllib.parse.urlunsplit() for URIs with path starting with multiple
slashes and no authority. Based on patch by Ashwin Ramaswami.

================================================================================

# Changelog - Tests

List:
: regrtest test runner: Add XML support to the refleak checker
(-R option). Patch by Victor Stinner.

: regrtest test runner: Add XML support to the refleak checker
(-R option). Patch by Victor Stinner.

================================================================================

# Changelog - Build (Part 1)

List:
: On POSIX systems, the pkg-config () filenames now
include the ABI flags, which may include debug (âdâ) and free-threaded
(âtâ).  For example: * python-3.14.pc (default, non-debug build) *
python-3.14d.pc (default, debug build) * python-3.14t.pc
(free-threaded build)
: Fall back to the bundled libmpdec if a system version cannot be
found.
: Update sys.version to identify whether the build is
default build or free-threading build. Patch By Donghee Na.
: Fix an AssertionError when building with
--enable-experimental-jit and the compiler emits a 
section.
: Fix a possible race condition affecting parallel builds
configured with --enable-experimental-jit, in which compilation errors
could be caused by an incompletely-generated header file.

: On POSIX systems, the pkg-config () filenames now
include the ABI flags, which may include debug (âdâ) and free-threaded
(âtâ).  For example: * python-3.14.pc (default, non-debug build) *
python-3.14d.pc (default, debug build) * python-3.14t.pc
(free-threaded build)

: Fall back to the bundled libmpdec if a system version cannot be
found.

================================================================================

# Changelog - Build (Part 2)

: Update sys.version to identify whether the build is
default build or free-threading build. Patch By Donghee Na.

: Fix an AssertionError when building with
--enable-experimental-jit and the compiler emits a 
section.

: Fix a possible race condition affecting parallel builds
configured with --enable-experimental-jit, in which compilation errors
could be caused by an incompletely-generated header file.

================================================================================

# Changelog - Windows (Part 1)

List:
: Ensures correct import libraries are included in Windows
installs.
: Adds Unicode support and fixes audit events for
_winapi.CreateNamedPipe.
: Add support for new pyrepl on Windows
: Fixes  handling of shebangs like /usr/bin/env
python3.12, which were previously interpreted as python3.exe instead
of python3.12.exe.
: Fixes an issue with the Windows installer not running ensurepip
in a fully isolated environment. This could cause unexpected interactions
with the user site-packages.
: Avoid crashing in  on Windows when the mapped memory
is inaccessible due to file system errors or access violations.
: Updated bundled Tcl/Tk to 8.6.14.

: Ensures correct import libraries are included in Windows
installs.

: Adds Unicode support and fixes audit events for
_winapi.CreateNamedPipe.

: Add support for new pyrepl on Windows

: Fixes  handling of shebangs like /usr/bin/env
python3.12, which were previously interpreted as python3.exe instead
of python3.12.exe.

: Fixes an issue with the Windows installer not running ensurepip
in a fully isolated environment. This could cause unexpected interactions
with the user site-packages.

================================================================================

# Changelog - Windows (Part 2)

: Avoid crashing in  on Windows when the mapped memory
is inaccessible due to file system errors or access violations.

: Updated bundled Tcl/Tk to 8.6.14.

================================================================================

# Changelog - C API (Part 1)

List:
: Fix crash when a thread state that was created by
PyGILState_Ensure() calls a destructor that during
PyThreadState_Clear() that calls back into
PyGILState_Ensure() and PyGILState_Release(). This might
occur when in the free-threaded build or when using thread-local variables
whose destructors call PyGILState_Ensure().
: Restore the removed _PyLong_NumBits() function. It is used
by the pywin32 project. Patch by Ethan Smith
: Added Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST and
Py_END_CRITICAL_SECTION_SEQUENCE_FAST macros to make it possible to
use PySequence_Fast APIs safely when free-threaded, and update str.join to
work without the GIL using them.
: Add PyHASH_MULTIPLIER constant: prime multiplier
used in string and various other hashes. Patch by Victor Stinner.
: Make mimalloc includes relative to the current file to avoid
embedders or extensions needing to include Internal/mimalloc if they
are already including internal CPython headers.
: Restore _PyWeakref_ClearRef that was previously removed in
Python 3.13 alpha 1.

================================================================================

# Changelog - C API (Part 2)

: Fix crash when a thread state that was created by
PyGILState_Ensure() calls a destructor that during
PyThreadState_Clear() that calls back into
PyGILState_Ensure() and PyGILState_Release(). This might
occur when in the free-threaded build or when using thread-local variables
whose destructors call PyGILState_Ensure().

: Restore the removed _PyLong_NumBits() function. It is used
by the pywin32 project. Patch by Ethan Smith

: Added Py_BEGIN_CRITICAL_SECTION_SEQUENCE_FAST and
Py_END_CRITICAL_SECTION_SEQUENCE_FAST macros to make it possible to
use PySequence_Fast APIs safely when free-threaded, and update str.join to
work without the GIL using them.

: Add PyHASH_MULTIPLIER constant: prime multiplier
used in string and various other hashes. Patch by Victor Stinner.

: Make mimalloc includes relative to the current file to avoid
embedders or extensions needing to include Internal/mimalloc if they
are already including internal CPython headers.

: Restore _PyWeakref_ClearRef that was previously removed in
Python 3.13 alpha 1.

================================================================================

# Changelog - Security

List:
: Update bundled libexpat to 2.6.2
: Detect BLAKE2, SHA3, Shake, & truncated SHA512 support in the
OpenSSL-ish libcrypto library at build time.  This allows 
to be used with libraries that do not to support every algorithm that
upstream OpenSSL does.

: Update bundled libexpat to 2.6.2

: Detect BLAKE2, SHA3, Shake, & truncated SHA512 support in the
OpenSSL-ish libcrypto library at build time.  This allows 
to be used with libraries that do not to support every algorithm that
upstream OpenSSL does.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Add instrumented opcodes to YIELD_VALUE assertion for tracing
cases.
: When a builtin or extension module is imported for the first
time, while a subinterpreter is active, the moduleâs init function is now
run by the main interpreter first before import continues in the
subinterpreter. Consequently, single-phase init modules now fail in an
isolated subinterpreter without the init function running under that
interpreter, whereas before it would run under the subinterpreter 
failing, potentially leaving behind global state and callbacks and
otherwise leaving the module in an inconsistent state.
: Donât use designated initializer syntax in inline functions in
internal headers. They cause problems for C++ or MSVC users who arenât yet
using the latest C++ standard (C++20). While internal, pycore_backoff.h,
is included (indirectly, via pycore_code.h) by some key 3rd party software
that does so for speed.
: Improve performance of json.dumps() and json.dump()
when using the argument . Depending on the data the encoding using
json.dumps() with  can be up to 2 to 3 times faster.
: In --disable-gil builds, the GIL will be enabled while
loading C extension modules. If the module indicates that it supports
running without the GIL, the GIL will be disabled once loading is
complete. Otherwise, the GIL will remain enabled for the remainder of the
interpreterâs lifetime. This behavior does not apply if the GIL has been
explicitly enabled or disabled with PYTHON_GIL or .
: Fix incorrect UnboundLocalError when two comprehensions
in the same function both reference the same name, and in one
comprehension the name is bound while in the other itâs an implicit
global.
: Allow the Linux perf support to work without frame pointers
using perfâs advanced JIT support. The feature is activated when using the
PYTHON_PERF_JIT_SUPPORT environment variable or when running Python
with -Xperf_jit. Patch by Pablo Galindo.
: Add sys._is_gil_enabled() function that returns whether the
GIL is currently enabled.  In the default build it always returns 
because the GIL is always enabled.  In the free-threaded build, it may
return  or .
: Break a loop between the Python implementation of the
 module and the Python code for integer to string
conversion. Also optimize integer to string conversion for values in the
range from 9_000 to 135_000 decimal digits.
: Fix sys.set_asyncgen_hooks() not to be partially set when
raising .
: Compiler populates the new __firstlineno__ field on a class
with the line number of the first line of the class definition.
: Fix an issue where the type cache can expose a previously
accessed attribute when a finalizer is run.
: update async_generator.athrow().close() and
async_generator.asend().close() to close their section of the
underlying async generator
: The interactive interpreter is now implemented in
Python, which allows for a number of new features like colors, multiline
input, history viewing, and paste mode. Contributed by Pablo Galindo,
Åukasz Langa and Lysandros Nikolaou based on code from the PyPy project.
: Implement PEP 667: converted FrameType.f_locals and PyFrame_GetLocals() to return a
write-through proxy object when the frame refers to a function or
comprehension.
: Fix crash in compiler on âasync withâ that has many context
managers.
: Change how to use the tier 2 interpreter. Instead of running
Python with   or setting the environment variable
PYTHON_UOPS=1, this choice is now made at build time by configuring
with --enable-experimental-jit=interpreter.
 This changes the environment variable to enable or disable
micro-ops to PYTHON_JIT. The old PYTHON_UOPS is no longer used.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Update JIT compilation to use LLVM 18
: Annotation scopes within classes can
now contain comprehensions. However, such comprehensions are not inlined
into their parent scope at runtime. Patch by Jelle Zijlstra.
: Fix bug where generator.close does not free the generator
frameâs locals.
: Donât consider __future__ imports with dots before the
module name.
: Make sure that the Executor objects in the COLD_EXITS array
arenât assumed to be GC-able (which would access bytes outside the
object).
: Lazy load frame line number to improve performance of tracing
: Improve SyntaxError message for imports without names,
like in    and  cases. It now points out to users
that  expects at least one name after it.
: Improve SyntaxError message for empty type param
brackets.
: Added a get_jit_code() method to access JIT compiled
machine code from the UOp Executor when the experimental JIT is enabled.
Patch by Anthony Shaw.
: Add option for compilerâs codegen to save nested instruction
sequences for introspection.
: Redirect stdout and stderr to system log when embedded in an
Android app.
: annotation scope within class scopes
can now contain lambdas.
: Prevent agen.aclose() objects being re-used after
.
: prevent concurrent access to an async generator via
athrow().throw() or asend().throw()
: Fix a RuntimeWarning when calling
agen.aclose().throw(Exception).
: Fix mimalloc allocator for huge memory allocation (around
8,589,934,592 GiB) on s390x. Patch by Victor Stinner.
: Fix issue where an objectâs dict would get out of sync with the
objectâs internal values when being cleared. obj.__dict__.clear() now
clears the internal values, but leaves the dict attached to the object.
: Improve the performance of the following  and
 methods by adapting them to the
METH_FASTCALL calling convention:

================================================================================

# Changelog - Core and Builtins (Part 3)







================================================================================

# Changelog - Core and Builtins (Part 4)


: Speed up calls to  with positional-only argument, by
using the  vectorcall calling convention. Patch by Erlend
Aasland.
: Give _PyInstructionSequence a Python interface and use it
in tests.
: Statically allocated objects are, by definition, immortal so
must be marked as such regardless of whether they are in extension modules
or not.
: Remove unhandled PY_MONITORING_EVENT_BRANCH and
PY_MONITORING_EVENT_EXCEPTION_HANDLED events from
sys.settrace().
: Extension modules may indicate to the runtime that they can run
without the GIL. Multi-phase init modules do so by calling providing
Py_MOD_GIL_NOT_USED for the Py_mod_gil slot, while single-phase
init modules call PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED)
from their init function.
: Implement , adding support for defaults on type
parameters. Patch by Jelle Zijlstra.
: Add two new functions to the C-API,
PyRefTracer_SetTracer() and PyRefTracer_GetTracer(), that
allows to track object creation and destruction the same way the
tracemalloc module does. Patch by Pablo Galindo
: Improved the performance of sys.settrace() significantly
: Improve the error message when a script shadowing a module from
the standard library causes AttributeError to be raised. Similarly,
improve the error message when a script shadowing a third party module
attempts to access an attribute from that third party module while still
initialising.
: Elide uninformative traceback indicators in  and
simple assignment statements. Patch by Pablo Galindo.
: Allow the  and  arguments to  and
 to be passed as keywords.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Add instrumented opcodes to YIELD_VALUE assertion for tracing
cases.

: When a builtin or extension module is imported for the first
time, while a subinterpreter is active, the moduleâs init function is now
run by the main interpreter first before import continues in the
subinterpreter. Consequently, single-phase init modules now fail in an
isolated subinterpreter without the init function running under that
interpreter, whereas before it would run under the subinterpreter 
failing, potentially leaving behind global state and callbacks and
otherwise leaving the module in an inconsistent state.

: Donât use designated initializer syntax in inline functions in
internal headers. They cause problems for C++ or MSVC users who arenât yet
using the latest C++ standard (C++20). While internal, pycore_backoff.h,
is included (indirectly, via pycore_code.h) by some key 3rd party software
that does so for speed.

: Improve performance of json.dumps() and json.dump()
when using the argument . Depending on the data the encoding using
json.dumps() with  can be up to 2 to 3 times faster.

================================================================================

# Changelog - Core and Builtins (Part 6)

: In --disable-gil builds, the GIL will be enabled while
loading C extension modules. If the module indicates that it supports
running without the GIL, the GIL will be disabled once loading is
complete. Otherwise, the GIL will remain enabled for the remainder of the
interpreterâs lifetime. This behavior does not apply if the GIL has been
explicitly enabled or disabled with PYTHON_GIL or .

: Fix incorrect UnboundLocalError when two comprehensions
in the same function both reference the same name, and in one
comprehension the name is bound while in the other itâs an implicit
global.

: Allow the Linux perf support to work without frame pointers
using perfâs advanced JIT support. The feature is activated when using the
PYTHON_PERF_JIT_SUPPORT environment variable or when running Python
with -Xperf_jit. Patch by Pablo Galindo.

: Add sys._is_gil_enabled() function that returns whether the
GIL is currently enabled.  In the default build it always returns 
because the GIL is always enabled.  In the free-threaded build, it may
return  or .

================================================================================

# Changelog - Core and Builtins (Part 7)

: Break a loop between the Python implementation of the
 module and the Python code for integer to string
conversion. Also optimize integer to string conversion for values in the
range from 9_000 to 135_000 decimal digits.

: Fix sys.set_asyncgen_hooks() not to be partially set when
raising .

: Compiler populates the new __firstlineno__ field on a class
with the line number of the first line of the class definition.

: Fix an issue where the type cache can expose a previously
accessed attribute when a finalizer is run.

: update async_generator.athrow().close() and
async_generator.asend().close() to close their section of the
underlying async generator

: The interactive interpreter is now implemented in
Python, which allows for a number of new features like colors, multiline
input, history viewing, and paste mode. Contributed by Pablo Galindo,
Åukasz Langa and Lysandros Nikolaou based on code from the PyPy project.

: Implement PEP 667: converted FrameType.f_locals and PyFrame_GetLocals() to return a
write-through proxy object when the frame refers to a function or
comprehension.

: Fix crash in compiler on âasync withâ that has many context
managers.

================================================================================

# Changelog - Core and Builtins (Part 8)

: Change how to use the tier 2 interpreter. Instead of running
Python with   or setting the environment variable
PYTHON_UOPS=1, this choice is now made at build time by configuring
with --enable-experimental-jit=interpreter.

This changes the environment variable to enable or disable
micro-ops to PYTHON_JIT. The old PYTHON_UOPS is no longer used.

: Update JIT compilation to use LLVM 18

: Annotation scopes within classes can
now contain comprehensions. However, such comprehensions are not inlined
into their parent scope at runtime. Patch by Jelle Zijlstra.

: Fix bug where generator.close does not free the generator
frameâs locals.

: Donât consider __future__ imports with dots before the
module name.

: Make sure that the Executor objects in the COLD_EXITS array
arenât assumed to be GC-able (which would access bytes outside the
object).

: Lazy load frame line number to improve performance of tracing

: Improve SyntaxError message for imports without names,
like in    and  cases. It now points out to users
that  expects at least one name after it.

: Improve SyntaxError message for empty type param
brackets.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Added a get_jit_code() method to access JIT compiled
machine code from the UOp Executor when the experimental JIT is enabled.
Patch by Anthony Shaw.

: Add option for compilerâs codegen to save nested instruction
sequences for introspection.

: Redirect stdout and stderr to system log when embedded in an
Android app.

: annotation scope within class scopes
can now contain lambdas.

: Prevent agen.aclose() objects being re-used after
.

: prevent concurrent access to an async generator via
athrow().throw() or asend().throw()

: Fix a RuntimeWarning when calling
agen.aclose().throw(Exception).

: Fix mimalloc allocator for huge memory allocation (around
8,589,934,592 GiB) on s390x. Patch by Victor Stinner.

: Fix issue where an objectâs dict would get out of sync with the
objectâs internal values when being cleared. obj.__dict__.clear() now
clears the internal values, but leaves the dict attached to the object.

: Improve the performance of the following  and
 methods by adapting them to the
METH_FASTCALL calling convention:

: Speed up calls to  with positional-only argument, by
using the  vectorcall calling convention. Patch by Erlend
Aasland.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Give _PyInstructionSequence a Python interface and use it
in tests.

: Statically allocated objects are, by definition, immortal so
must be marked as such regardless of whether they are in extension modules
or not.

: Remove unhandled PY_MONITORING_EVENT_BRANCH and
PY_MONITORING_EVENT_EXCEPTION_HANDLED events from
sys.settrace().

: Extension modules may indicate to the runtime that they can run
without the GIL. Multi-phase init modules do so by calling providing
Py_MOD_GIL_NOT_USED for the Py_mod_gil slot, while single-phase
init modules call PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED)
from their init function.

: Implement , adding support for defaults on type
parameters. Patch by Jelle Zijlstra.

: Add two new functions to the C-API,
PyRefTracer_SetTracer() and PyRefTracer_GetTracer(), that
allows to track object creation and destruction the same way the
tracemalloc module does. Patch by Pablo Galindo

: Improved the performance of sys.settrace() significantly

================================================================================

# Changelog - Core and Builtins (Part 11)

: Improve the error message when a script shadowing a module from
the standard library causes AttributeError to be raised. Similarly,
improve the error message when a script shadowing a third party module
attempts to access an attribute from that third party module while still
initialising.

: Elide uninformative traceback indicators in  and
simple assignment statements. Patch by Pablo Galindo.

: Allow the  and  arguments to  and
 to be passed as keywords.

================================================================================

# Changelog - Library (Part 1)

List:
: A DeprecationWarning is now emitted if you fail to pass
a value to the new type_params parameter of typing._eval_type() or
typing.ForwardRef._evaluate(). (Using either of these private and
undocumented functions is discouraged to begin with, but failing to pass a
value to the type_params parameter may lead to incorrect behaviour on
Python 3.12 or newer.)
: Add an optional second type parameter to
typing.ContextManager and typing.AsyncContextManager,
representing the return types of __exit__() and
__aexit__() respectively. This parameter defaults to 
 .
: The  module allows method named  to be
defined on  types.
: Add type parameter defaults to typing.Generator and
typing.AsyncGenerator.
: Mime type text/x-rst is now supported by .
: The Python implementation of the  module could
appear to hang in relatively small power cases (like ) if
context precision was set to a very high value. A different method to
check for exactly representable results is used now that doesnât rely on
computing 10**precision (which could be effectively too large to
compute).
: breakpoint() and pdb.set_trace() now enter the debugger
immediately after the call rather than before the next line is executed.
: Add  support for zipapps
: Add signature for sqlite3.Connection objects.
: Use a Y2038 compatible openssl time function when available.
: Fix inspect.signature() for non-comparable callables.
: Fix inspect.signature() for the result of the
functools.cmp_to_key() call.
: On Android, sysconfig.get_platform now returns the
format specified by .
: Allow to specify the signature of custom callable instances of
extension type by the __text_signature__ attribute. Specify signatures
of operator.attrgetter, operator.itemgetter, and
operator.methodcaller instances.
: Fix an edge case in binascii.a2b_base64() strict mode,
where excessive padding is not detected when no padding is necessary.
: Add the PhotoImage methods  to read an
image from a file and  to get the image data. Add
background and  parameters to PhotoImage method
.
: Add the PhotoImage method copy_replace() to
copy a region from one image to other image, possibly with pixel zooming
and/or subsampling. Add from_coords parameter to PhotoImage
methods ,  and subsample(). Add 
and  parameters to PhotoImage method .
: Fix a bug where sqlite3.Connection.iterdump() could fail
if a custom   was used.
Patch by Erlend Aasland.
: Fix regression introduced in  that meant that calling
inspect.getattr_static() on an instance would cause a strong
reference to that instanceâs class to persist in an internal cache in the
 module. This caused unexpected memory consumption if the
class was dynamically created, the class held strong references to other
objects which took up a significant amount of memory, and the cache
contained the sole strong reference to the class. The fix for the
regression leads to a slowdown in getattr_static(), but the
function should still be significantly faster than it was in Python 3.11.
Patch by Alex Waygood.
: Speed up itertools.pairwise() in the common case by up to
1.8x.
: Improve the behavior of user-defined subclasses of
. Such classes will now require no changes in the usual
case to conform with the behavior changes of the  module in
Python 3.13. Patch by Jelle Zijlstra.
: Fixed unittest.mock.create_autospec() to configure parent
mock with keyword arguments.
: Fix incorrect argument substitution when typing.Unpack
is used with the builtin . typing.Unpack now raises
 when used with certain invalid types. Patch by Jelle
Zijlstra.
: Add command-line interface for the  module. Patch
by Hugo van Kemenade.
: Fix  reading of ZIP64 files with file entries
that are too big or offset too far.
: Fix os.path.normpath() for UNC paths on Windows. Speed up
os.path.splitroot() with a native implementation.
: Change the unknown filename of  from  to
 to clarify that itâs not a real filename.
: Fix erroneous  when calling
typing.get_type_hints() on a class that made use of  type
parameters in a module that had  __future__  annotations at
the top of the file. Patch by Alex Waygood.
: Add parameter  check for
tarfile.TarFile.addfile()
: Donât raise DeprecationWarning when a 
of parameters is used to bind indexed, nameless placeholders. See also
.
: Fix TypeError in email.message.Message.get_payload() when
the charset is  encoded.
: Fix IndexError when parse some emails with invalid Message-ID
(including one-off addresses generated by Microsoft Outlook).
: Improve the error messages emitted by 
deprecation warnings relating to PEP 706. If a  argument is not
provided to  or extractall, the deprecation warning now
points to the line in the userâs code where the relevant function was
called. Patch by Alex Waygood.
: Fixed a possible segfault during garbage collection of
_asyncio.FutureIter objects. Patch by Savannah Ostrowski.
: Speed up pathlib.Path.glob() by omitting an initial
 call. As a result of this change,
 can no longer raise .
:  module now parses  file with UTF-8 first,
and locale encoding if UnicodeDecodeError happened. It
supported only locale encoding before.
: Weâve exposed the low-level _interpreters module for the
sake of the PyPI implementation of .  It was sometimes available
as the _xxsubinterpreters module and was formerly used only for
testing. For the most part, it should be considered an internal module,
like  and . See
https://discuss.python.org/t/pep-734-multiple-interpreters-in-the-stdlib/41147/26.
: Speed up pathlib.Path.glob() by not scanning directories
for non-wildcard pattern segments.
: Speed up pathlib.Path.iterdir() by using
os.scandir() internally.
: Speed up pathlib.Path.walk() by working with strings
internally.
: Change the new multi-separator support in
asyncio.StreamReader.readuntil() to only accept tuples of separators
rather than arbitrary iterables.
: Fixes a bug when doctest.DocTestFinder was failing on
wrapped builtin_function_or_method.
: Largely restored import time performance of configparser by
avoiding dataclasses.
: Speedup os.path.commonpath() on Unix.
: Fix _simple_enum to detect aliases when multiple arguments
are present but only one is the member value.
: Speedup os.path.join().
: Support package.module as  for 
command of 
: the status codes enum with constants in http.HTTPStatus are
updated to include the names from RFC9110. This RFC includes some HTTP
statuses previously only used for WEBDAV and assigns more generic names to
them.
The old constants are preserved for backwards compatibility.

================================================================================

# Changelog - Library (Part 2)

: Speedup os.path.relpath().
: Speed up pathlib.Path.glob() by working with strings
internally.
: Add colour to doctest output. Patch by Hugo van Kemenade.
: ipaddress.IPv6Address.is_loopback() will now return
 for IPv4-mapped loopback addresses, i.e. addresses in the
::ffff:127.0.0.0/104 address space.
: Fix issue where os.path.realpath() stopped resolving
symlinks after encountering a symlink loop on POSIX.
: Improved behavior of asyncio.TaskGroup when an
external cancellation collides with an internal cancellation. For example,
when two task groups are nested and both experience an exception in a
child task simultaneously, it was possible that the outer task group would
misbehave, because its internal cancellation was swallowed by the inner
task group.
In the case where a task group is cancelled externally and also must raise
an ExceptionGroup, it will now call the parent taskâs
 method. This ensures that a
asyncio.CancelledError will be raised at the next ,
so the cancellation is not lost.
An added benefit of these changes is that task groups now preserve the
cancellation count (asyncio.Task.cancelling()).
In order to handle some corner cases, asyncio.Task.uncancel() may
now reset the undocumented _must_cancel flag when the cancellation
count reaches zero.

================================================================================

# Changelog - Library (Part 3)

: Add typing.TypeIs, implementing . Patch by
Jelle Zijlstra.
: Fix support of non-ASCII user names in bytes paths in
os.path.expanduser() on Posix.
: os.path.ismount() is now 2-3 times faster if the user has
permissions.
: Only treat ,  and  as line separators
in re-folding the  messages. Preserve control characters
, , ,  and  and Unicode line
separators ,  and  as is.
: Convert  to multi-phase initialisation
().
: Add the mimetypes.guess_file_type() function which works
with file path. Passing file path instead of URL in
guess_type() is soft deprecated.
: webbrowser CLI: replace getopt with argparse, add long options.
Patch by Hugo van Kemenade.
: Name suggestions for AttributeError and
ImportError now only include underscored names if the original name
was underscored.
: Donât show empty fields (value  or ) in
ast.dump() by default. Add show_empty=False parameter to
optionally show them.
: Added  and  attributes for compressed
and archived file-like objects in modules , ,
 and . The value of the 
attribute of gzip.GzipFile was changed from integer ( or
) to string ( or ). The value of the 
attribute of the readable file-like object returned by
zipfile.ZipFile.open() was changed from  to .
: Fix inspect.signature() to correctly handle parameter
defaults on methods in extension modules that use names defined in the
module namespace.
: Honor  for all multiprocessing start methods
: Print colorized exception just like built-in traceback in

================================================================================

# Changelog - Library (Part 4)

: Speed up pickling of pathlib.PurePath objects. Patch
by Barney Gale.
: Support opcode events in 
: : fixed a crash that could occur on macOS 13 or
earlier when Python was built with Apple Xcode 15âs SDK.
: Enabled arbitrary statements and evaluations in  shell
to access the local variables of the current frame, which made it possible
for multi-scope code like generators or nested function to work.
: Add __class_getitem__() to
types.GeneratorType and types.CoroutineType for type
hinting purposes. Patch by James Hilton-Balfe.
: The types.SimpleNamespace now accepts an optional
positional argument which specifies initial values of attributes as a dict
or an iterable of key-value pairs.
: Fix assertion errors caused by whitespace in metavars or
-ed groups in  by simplifying usage formatting.
Patch by Ali Hamdan.
: Adjust logging.LogRecord to use time.time_ns() and fix
minor bug related to floating-point math.
: Bring pure Python implementation functools.partial.__new__
more in line with the C-implementation by not just always checking for the
presence of the attribute  on the first argument of .
Instead, both the Python version and the C version perform an
isinstance(func,  check on the first argument of .
: HEAD requests are no longer upgraded to GET request during
redirects in urllib.
: Setting the  module global wantobjects
to  before creating the  object or call the
wantobjects() method of the  object with argument 
makes now arguments to callbacks registered in the  module
to be passed as various Python objects (, , ,
), depending on their internal representation in Tcl, instead of
always . tkinter.wantobjects is now set to  by
default.
: Fix several IndexError when parse emails with truncated
Message-ID, address, routes, etc, e.g. .
: Add mime type mapping for .md <-> text/markdown
: shutil.chown() now supports  and
follow_symlinks keyword arguments.
: Fix parsing of emails with invalid address headers having a
leading or trailing dot. Patch by tsufeki.
: Add the after_info() method for Tkinter widgets.

================================================================================

# Changelog - Library (Part 5)

: A DeprecationWarning is now emitted if you fail to pass
a value to the new type_params parameter of typing._eval_type() or
typing.ForwardRef._evaluate(). (Using either of these private and
undocumented functions is discouraged to begin with, but failing to pass a
value to the type_params parameter may lead to incorrect behaviour on
Python 3.12 or newer.)

: Add an optional second type parameter to
typing.ContextManager and typing.AsyncContextManager,
representing the return types of __exit__() and
__aexit__() respectively. This parameter defaults to 
 .

: The  module allows method named  to be
defined on  types.

: Add type parameter defaults to typing.Generator and
typing.AsyncGenerator.

: Mime type text/x-rst is now supported by .

: The Python implementation of the  module could
appear to hang in relatively small power cases (like ) if
context precision was set to a very high value. A different method to
check for exactly representable results is used now that doesnât rely on
computing 10**precision (which could be effectively too large to
compute).

: breakpoint() and pdb.set_trace() now enter the debugger
immediately after the call rather than before the next line is executed.

================================================================================

# Changelog - Library (Part 6)

: Add  support for zipapps

: Add signature for sqlite3.Connection objects.

: Use a Y2038 compatible openssl time function when available.

: Fix inspect.signature() for non-comparable callables.

: Fix inspect.signature() for the result of the
functools.cmp_to_key() call.

: On Android, sysconfig.get_platform now returns the
format specified by .

: Allow to specify the signature of custom callable instances of
extension type by the __text_signature__ attribute. Specify signatures
of operator.attrgetter, operator.itemgetter, and
operator.methodcaller instances.

: Fix an edge case in binascii.a2b_base64() strict mode,
where excessive padding is not detected when no padding is necessary.

: Add the PhotoImage methods  to read an
image from a file and  to get the image data. Add
background and  parameters to PhotoImage method
.

: Add the PhotoImage method copy_replace() to
copy a region from one image to other image, possibly with pixel zooming
and/or subsampling. Add from_coords parameter to PhotoImage
methods ,  and subsample(). Add 
and  parameters to PhotoImage method .

: Fix a bug where sqlite3.Connection.iterdump() could fail
if a custom   was used.
Patch by Erlend Aasland.

================================================================================

# Changelog - Library (Part 7)

: Fix regression introduced in  that meant that calling
inspect.getattr_static() on an instance would cause a strong
reference to that instanceâs class to persist in an internal cache in the
 module. This caused unexpected memory consumption if the
class was dynamically created, the class held strong references to other
objects which took up a significant amount of memory, and the cache
contained the sole strong reference to the class. The fix for the
regression leads to a slowdown in getattr_static(), but the
function should still be significantly faster than it was in Python 3.11.
Patch by Alex Waygood.

: Speed up itertools.pairwise() in the common case by up to
1.8x.

: Improve the behavior of user-defined subclasses of
. Such classes will now require no changes in the usual
case to conform with the behavior changes of the  module in
Python 3.13. Patch by Jelle Zijlstra.

: Fixed unittest.mock.create_autospec() to configure parent
mock with keyword arguments.

: Fix incorrect argument substitution when typing.Unpack
is used with the builtin . typing.Unpack now raises
 when used with certain invalid types. Patch by Jelle
Zijlstra.

================================================================================

# Changelog - Library (Part 8)

: Add command-line interface for the  module. Patch
by Hugo van Kemenade.

: Fix  reading of ZIP64 files with file entries
that are too big or offset too far.

: Fix os.path.normpath() for UNC paths on Windows. Speed up
os.path.splitroot() with a native implementation.

: Change the unknown filename of  from  to
 to clarify that itâs not a real filename.

: Fix erroneous  when calling
typing.get_type_hints() on a class that made use of  type
parameters in a module that had  __future__  annotations at
the top of the file. Patch by Alex Waygood.

: Add parameter  check for
tarfile.TarFile.addfile()

: Donât raise DeprecationWarning when a 
of parameters is used to bind indexed, nameless placeholders. See also
.

: Fix TypeError in email.message.Message.get_payload() when
the charset is  encoded.

: Fix IndexError when parse some emails with invalid Message-ID
(including one-off addresses generated by Microsoft Outlook).

: Improve the error messages emitted by 
deprecation warnings relating to PEP 706. If a  argument is not
provided to  or extractall, the deprecation warning now
points to the line in the userâs code where the relevant function was
called. Patch by Alex Waygood.

================================================================================

# Changelog - Library (Part 9)

: Fixed a possible segfault during garbage collection of
_asyncio.FutureIter objects. Patch by Savannah Ostrowski.

: Speed up pathlib.Path.glob() by omitting an initial
 call. As a result of this change,
 can no longer raise .

:  module now parses  file with UTF-8 first,
and locale encoding if UnicodeDecodeError happened. It
supported only locale encoding before.

: Weâve exposed the low-level _interpreters module for the
sake of the PyPI implementation of .  It was sometimes available
as the _xxsubinterpreters module and was formerly used only for
testing. For the most part, it should be considered an internal module,
like  and . See
https://discuss.python.org/t/pep-734-multiple-interpreters-in-the-stdlib/41147/26.

: Speed up pathlib.Path.glob() by not scanning directories
for non-wildcard pattern segments.

: Speed up pathlib.Path.iterdir() by using
os.scandir() internally.

: Speed up pathlib.Path.walk() by working with strings
internally.

: Change the new multi-separator support in
asyncio.StreamReader.readuntil() to only accept tuples of separators
rather than arbitrary iterables.

: Fixes a bug when doctest.DocTestFinder was failing on
wrapped builtin_function_or_method.

================================================================================

# Changelog - Library (Part 10)

: Largely restored import time performance of configparser by
avoiding dataclasses.

: Speedup os.path.commonpath() on Unix.

: Fix _simple_enum to detect aliases when multiple arguments
are present but only one is the member value.

: Speedup os.path.join().

: Support package.module as  for 
command of

: the status codes enum with constants in http.HTTPStatus are
updated to include the names from RFC9110. This RFC includes some HTTP
statuses previously only used for WEBDAV and assigns more generic names to
them.

The old constants are preserved for backwards compatibility.

: Speedup os.path.relpath().

: Speed up pathlib.Path.glob() by working with strings
internally.

: Add colour to doctest output. Patch by Hugo van Kemenade.

: ipaddress.IPv6Address.is_loopback() will now return
 for IPv4-mapped loopback addresses, i.e. addresses in the
::ffff:127.0.0.0/104 address space.

: Fix issue where os.path.realpath() stopped resolving
symlinks after encountering a symlink loop on POSIX.

================================================================================

# Changelog - Library (Part 11)

: Improved behavior of asyncio.TaskGroup when an
external cancellation collides with an internal cancellation. For example,
when two task groups are nested and both experience an exception in a
child task simultaneously, it was possible that the outer task group would
misbehave, because its internal cancellation was swallowed by the inner
task group.

In the case where a task group is cancelled externally and also must raise
an ExceptionGroup, it will now call the parent taskâs
 method. This ensures that a
asyncio.CancelledError will be raised at the next ,
so the cancellation is not lost.

An added benefit of these changes is that task groups now preserve the
cancellation count (asyncio.Task.cancelling()).

In order to handle some corner cases, asyncio.Task.uncancel() may
now reset the undocumented _must_cancel flag when the cancellation
count reaches zero.

: Add typing.TypeIs, implementing . Patch by
Jelle Zijlstra.

: Fix support of non-ASCII user names in bytes paths in
os.path.expanduser() on Posix.

: os.path.ismount() is now 2-3 times faster if the user has
permissions.

================================================================================

# Changelog - Library (Part 12)

: Only treat ,  and  as line separators
in re-folding the  messages. Preserve control characters
, , ,  and  and Unicode line
separators ,  and  as is.

: Convert  to multi-phase initialisation
().

: Add the mimetypes.guess_file_type() function which works
with file path. Passing file path instead of URL in
guess_type() is soft deprecated.

: webbrowser CLI: replace getopt with argparse, add long options.
Patch by Hugo van Kemenade.

: Name suggestions for AttributeError and
ImportError now only include underscored names if the original name
was underscored.

: Donât show empty fields (value  or ) in
ast.dump() by default. Add show_empty=False parameter to
optionally show them.

: Added  and  attributes for compressed
and archived file-like objects in modules , ,
 and . The value of the 
attribute of gzip.GzipFile was changed from integer ( or
) to string ( or ). The value of the 
attribute of the readable file-like object returned by
zipfile.ZipFile.open() was changed from  to .

: Fix inspect.signature() to correctly handle parameter
defaults on methods in extension modules that use names defined in the
module namespace.

: Honor  for all multiprocessing start methods

================================================================================

# Changelog - Library (Part 13)

: Print colorized exception just like built-in traceback in

: Speed up pickling of pathlib.PurePath objects. Patch
by Barney Gale.

: Support opcode events in

: : fixed a crash that could occur on macOS 13 or
earlier when Python was built with Apple Xcode 15âs SDK.

: Enabled arbitrary statements and evaluations in  shell
to access the local variables of the current frame, which made it possible
for multi-scope code like generators or nested function to work.

: Add __class_getitem__() to
types.GeneratorType and types.CoroutineType for type
hinting purposes. Patch by James Hilton-Balfe.

: The types.SimpleNamespace now accepts an optional
positional argument which specifies initial values of attributes as a dict
or an iterable of key-value pairs.

: Fix assertion errors caused by whitespace in metavars or
-ed groups in  by simplifying usage formatting.
Patch by Ali Hamdan.

: Adjust logging.LogRecord to use time.time_ns() and fix
minor bug related to floating-point math.

================================================================================

# Changelog - Library (Part 14)

: Bring pure Python implementation functools.partial.__new__
more in line with the C-implementation by not just always checking for the
presence of the attribute  on the first argument of .
Instead, both the Python version and the C version perform an
isinstance(func,  check on the first argument of .

: HEAD requests are no longer upgraded to GET request during
redirects in urllib.

: Setting the  module global wantobjects
to  before creating the  object or call the
wantobjects() method of the  object with argument 
makes now arguments to callbacks registered in the  module
to be passed as various Python objects (, , ,
), depending on their internal representation in Tcl, instead of
always . tkinter.wantobjects is now set to  by
default.

: Fix several IndexError when parse emails with truncated
Message-ID, address, routes, etc, e.g. .

: Add mime type mapping for .md <-> text/markdown

: shutil.chown() now supports  and
follow_symlinks keyword arguments.

: Fix parsing of emails with invalid address headers having a
leading or trailing dot. Patch by tsufeki.

: Add the after_info() method for Tkinter widgets.

================================================================================

# Changelog - Documentation

List:
: The minimum Sphinx version required for the documentation is
now 6.2.1.

: The minimum Sphinx version required for the documentation is
now 6.2.1.

================================================================================

# Changelog - Build

List:
: Fixes Windows build when invoked directly (not through the
 script) without specifying a value for .
: The  option --with-system-libmpdec
now defaults to . The bundled copy of libmpdecimal will be
removed in Python 3.15.
: Fix building against recent libedit versions by detecting
readline hook signatures in .
: A testbed project was added to run the test suite on Android.
: Increase WASI stack size from 512 KiB to 8 MiB and the initial
memory from 10 MiB to 20 MiB. Patch by Victor Stinner.
:  now uses pkg-config to detect
 dependencies if the --with-system-libmpdec option
is given.

: Fixes Windows build when invoked directly (not through the
 script) without specifying a value for .

: The  option --with-system-libmpdec
now defaults to . The bundled copy of libmpdecimal will be
removed in Python 3.15.

: Fix building against recent libedit versions by detecting
readline hook signatures in .

: A testbed project was added to run the test suite on Android.

: Increase WASI stack size from 512 KiB to 8 MiB and the initial
memory from 10 MiB to 20 MiB. Patch by Victor Stinner.

:  now uses pkg-config to detect
 dependencies if the --with-system-libmpdec option
is given.

================================================================================

# Changelog - Windows (Part 1)

List:
: Update Windows installer to use libmpdecimal 4.0.0.
: os.mkdir() now accepts  of  to restrict
the new directory to the current user.
: Fixes launcher updates not being installed.
: The multiprocessing module now passes the
STARTF_FORCEOFFFEEDBACK flag when spawning processes to tell Windows
not to change the mouse cursor.
: Update Windows installer to use SQLite 3.45.3.
: Suppress the warning displayed on virtual environment creation
when the requested and created paths differ only by a short (8.3 style)
name. Warnings will continue to be shown if a junction or symlink in the
path caused the venv to be created in a different location than originally
requested.
: Fixes virtual environments not correctly launching when created
from a Store install.

: Update Windows installer to use libmpdecimal 4.0.0.

: os.mkdir() now accepts  of  to restrict
the new directory to the current user.

: Fixes launcher updates not being installed.

: The multiprocessing module now passes the
STARTF_FORCEOFFFEEDBACK flag when spawning processes to tell Windows
not to change the mouse cursor.

: Update Windows installer to use SQLite 3.45.3.

================================================================================

# Changelog - Windows (Part 2)

: Suppress the warning displayed on virtual environment creation
when the requested and created paths differ only by a short (8.3 style)
name. Warnings will continue to be shown if a junction or symlink in the
path caused the venv to be created in a different location than originally
requested.

: Fixes virtual environments not correctly launching when created
from a Store install.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to use libmpdecimal 4.0.0.
: iOS preprocessor symbol usage was made compatible with older
macOS SDKs.
: Update macOS installer to use SQLite 3.45.3.
: Use ~/.config/fish/conf.d configs and
fish_add_path to set  when installing for the
Fish shell.

: Update macOS installer to use libmpdecimal 4.0.0.

: iOS preprocessor symbol usage was made compatible with older
macOS SDKs.

: Update macOS installer to use SQLite 3.45.3.

: Use ~/.config/fish/conf.d configs and
fish_add_path to set  when installing for the
Fish shell.

================================================================================

# Changelog - IDLE

List:
: Use user-selected color theme for Help => IDLE Doc.

: Use user-selected color theme for Help => IDLE Doc.

================================================================================

# Changelog - C API (Part 1)

List:
: Fix Py_BUILD_ASSERT and
Py_BUILD_ASSERT_EXPR for non-constant expressions: use
static_assert() on C11 and newer. Patch by Victor Stinner.
: Add âRawâ variant of PyTime functions

PyTime_MonotonicRaw()
PyTime_PerfCounterRaw()
PyTime_TimeRaw()

Patch by Victor Stinner.

: Restore functions removed in Python 3.13 alpha 1:

Py_SetPythonHome()
Py_SetProgramName()
PySys_SetArgvEx()
PySys_SetArgv()

Patch by Victor Stinner.

: Restore removed PyEval_InitThreads() function. Patch by
Victor Stinner.
: Improve validation logic in the C implementation of
datetime.datetime.fromisoformat() to better handle invalid years.
Patch by Vlad Efanov.
: Fixed skipitem()âs handling of the old âwâ and âw#â formatters.
These are no longer supported and now raise an exception if used.
: Add a C-API for firing monitoring events.

: Fix Py_BUILD_ASSERT and
Py_BUILD_ASSERT_EXPR for non-constant expressions: use
static_assert() on C11 and newer. Patch by Victor Stinner.

: Add âRawâ variant of PyTime functions

List:
PyTime_MonotonicRaw()
PyTime_PerfCounterRaw()
PyTime_TimeRaw()

PyTime_MonotonicRaw()

PyTime_PerfCounterRaw()

Patch by Victor Stinner.

: Restore functions removed in Python 3.13 alpha 1:

================================================================================

# Changelog - C API (Part 2)

List:
Py_SetPythonHome()
Py_SetProgramName()
PySys_SetArgvEx()
PySys_SetArgv()

Patch by Victor Stinner.

: Restore removed PyEval_InitThreads() function. Patch by
Victor Stinner.

: Improve validation logic in the C implementation of
datetime.datetime.fromisoformat() to better handle invalid years.
Patch by Vlad Efanov.

: Fixed skipitem()âs handling of the old âwâ and âw#â formatters.
These are no longer supported and now raise an exception if used.

: Add a C-API for firing monitoring events.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Refactored the instruction sequence data structure out of
compile.c into instruction_sequence.c.
: Introduce a unified 16-bit backoff counter type
(_Py_BackoffCounter), shared between the Tier 1 adaptive specializer
and the Tier 2 optimizer. The API used for adaptive specialization
counters is changed but the behavior is (supposed to be) identical.
The behavior of the Tier 2 counters is changed:

There are no longer dynamic thresholds (we never varied these).
All counters now use the same exponential backoff.
The counter for JUMP_BACKWARD starts counting down from 16.
The temperature in side exits starts counting down from 64.


: Improve the performance of the following  and
 methods by adapting them to the
METH_FASTCALL calling convention:

endswith()
startswith()


: Improve the performance of the following  methods
by adapting them to the METH_FASTCALL calling convention:


endswith()




startswith()

================================================================================

# Changelog - Core and Builtins (Part 2)


: Move PyFutureFeatures to an internal header and make it
private.
: Added handle of incorrect star expressions, e.g  .
Patch by Grigoryev Semyon
: Fix crashes for certain user-created subclasses of
. Such classes are now expected to set the
_field_types attribute.
: Updated the  built-in HACL* project C code
from upstream that we use for many implementations when they are not
present via OpenSSL in a given build.  This also avoids the rare potential
for a C symbol name one definition rule linking issue.

: Change the old space bit of objects in the young generation
from 0 to gcstate->visited, so that any objects created during GC will
have the old bit set correctly if they get moved into the old generation.
: The cycle GC now chooses the size of increments based on the
total heap size, instead of the rate of object creation. This ensures that
it can keep up with growing heaps.
: For INSTRUMENTED_CALL_FUNCTION_EX, set  to
sys.monitoring.MISSING instead of  for
 event.
: Starting new threads and process creation through
 are now only prevented once all non-daemon threads exit.
: Ensure INSTRUMENTED_CALL_FUNCTION_EX always emits

================================================================================

# Changelog - Core and Builtins (Part 3)

: list.sort() now exploits more cases of partial ordering,
particularly those with long descending runs with sub-runs of equal
values. Those are recognized as single runs now (previously, each block of
repeated values caused a new run to be created).
: Added a Loader that can discover extension modules in an
iOS-style Frameworks folder.
: Compiler populates the new __static_attributes__ field on a
class with the names of attributes of this class which are accessed
through self.X from any function in its body.
: The array of values, the PyDictValues struct is now
embedded in the object during allocation. This provides better performance
in the common case, and does not degrade as much when the objectâs
 is materialized.
: Implement an incremental cyclic garbage collector. By
collecting the old generation in increments, there is no need for a full
heap scan. This can hugely reduce maximum pause time for programs with
large heaps.
Reduce the number of generations from three to two. The old generation is
split into two spaces, âvisitedâ and âpendingâ.
Collection happens in two steps:: * An increment is formed from the young
generation and a small part of the pending space. * This increment is
scanned and the survivors moved to the end of the visited space.
When the collecting space becomes empty, the two spaces are swapped.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Dataclasses now calls  once per dataclass, instead
of once per method being added.  This can speed up dataclass creation by
up to 20%.
: Mime type  is now supported by .
: Improve the SyntaxError that happens when ânotâ appears
after an operator. Patch by Pablo Galindo

: Refactored the instruction sequence data structure out of
compile.c into instruction_sequence.c.

: Introduce a unified 16-bit backoff counter type
(_Py_BackoffCounter), shared between the Tier 1 adaptive specializer
and the Tier 2 optimizer. The API used for adaptive specialization
counters is changed but the behavior is (supposed to be) identical.

The behavior of the Tier 2 counters is changed:

List:
There are no longer dynamic thresholds (we never varied these).
All counters now use the same exponential backoff.
The counter for JUMP_BACKWARD starts counting down from 16.
The temperature in side exits starts counting down from 64.

There are no longer dynamic thresholds (we never varied these).

All counters now use the same exponential backoff.

The counter for JUMP_BACKWARD starts counting down from 16.

The temperature in side exits starts counting down from 64.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Improve the performance of the following  and
 methods by adapting them to the
METH_FASTCALL calling convention:

List:
endswith()
startswith()

: Improve the performance of the following  methods
by adapting them to the METH_FASTCALL calling convention:

List:
endswith()




startswith()

: Move PyFutureFeatures to an internal header and make it
private.

: Added handle of incorrect star expressions, e.g  .
Patch by Grigoryev Semyon

: Fix crashes for certain user-created subclasses of
. Such classes are now expected to set the
_field_types attribute.

: Updated the  built-in HACL* project C code
from upstream that we use for many implementations when they are not
present via OpenSSL in a given build.  This also avoids the rare potential
for a C symbol name one definition rule linking issue.

: Change the old space bit of objects in the young generation
from 0 to gcstate->visited, so that any objects created during GC will
have the old bit set correctly if they get moved into the old generation.

: The cycle GC now chooses the size of increments based on the
total heap size, instead of the rate of object creation. This ensures that
it can keep up with growing heaps.

================================================================================

# Changelog - Core and Builtins (Part 6)

: For INSTRUMENTED_CALL_FUNCTION_EX, set  to
sys.monitoring.MISSING instead of  for
 event.

: Starting new threads and process creation through
 are now only prevented once all non-daemon threads exit.

: Ensure INSTRUMENTED_CALL_FUNCTION_EX always emits

: list.sort() now exploits more cases of partial ordering,
particularly those with long descending runs with sub-runs of equal
values. Those are recognized as single runs now (previously, each block of
repeated values caused a new run to be created).

: Added a Loader that can discover extension modules in an
iOS-style Frameworks folder.

: Compiler populates the new __static_attributes__ field on a
class with the names of attributes of this class which are accessed
through self.X from any function in its body.

: The array of values, the PyDictValues struct is now
embedded in the object during allocation. This provides better performance
in the common case, and does not degrade as much when the objectâs
 is materialized.

: Implement an incremental cyclic garbage collector. By
collecting the old generation in increments, there is no need for a full
heap scan. This can hugely reduce maximum pause time for programs with
large heaps.

================================================================================

# Changelog - Core and Builtins (Part 7)

Reduce the number of generations from three to two. The old generation is
split into two spaces, âvisitedâ and âpendingâ.

Collection happens in two steps:: * An increment is formed from the young
generation and a small part of the pending space. * This increment is
scanned and the survivors moved to the end of the visited space.

When the collecting space becomes empty, the two spaces are swapped.

: Dataclasses now calls  once per dataclass, instead
of once per method being added.  This can speed up dataclass creation by
up to 20%.

: Mime type  is now supported by .

: Improve the SyntaxError that happens when ânotâ appears
after an operator. Patch by Pablo Galindo

================================================================================

# Changelog - Library (Part 1)

List:
: Improve performance of os.path.join() and
os.path.expanduser().
: Raise  for non-paths in
posixpath.relpath().
: Preserve mailbox ownership when rewriting in
mailbox.mbox.flush(). Patch by Tony Mountifield.
: Raise FileNotFoundError when  returns
â(unreachable)â, which can happen on Linux >= 2.6.36 with glibc < 2.27.
: asyncio.asyncio.run_coroutine_threadsafe() now keeps the
traceback of CancelledError, TimeoutError and
InvalidStateError which are raised in the coroutine.
: Fix error message for ntpath.commonpath().
: Deprecate undocumented glob.glob0() and
glob.glob1() functions. Use glob.glob() and pass a directory
to its  argument instead.
: Optimise several functions in .
: Refactored configparser.RawConfigParser._read() to reduce
cyclometric complexity and improve comprehensibility.
: Raise TypeError for non-sequences for
ntpath.commonpath().
: configparser.ConfigParser now accepts unnamed sections
before named ones, if configured to do so.
: In documentation of gzip.GzipFile in module gzip,
explain data type of optional constructor argument , and recommend
   for generating deterministic streams.
: Fixed an unlikely early & extra  triggered crash
in  when creating a new _ssl._SSLContext if CPython was
built implausibly such that the default cipher list is empty  the
SSL library it was linked against reports a failure from its C
SSL_CTX_set_cipher_list() API.
: A DocTestCase now reports as skipped if all examples in the
doctest are skipped.
: In subprocess, raise a more informative message when
stdout=STDOUT.
: doctest: only print âand X failedâ when non-zero, donât
pluralise â1 itemsâ. Patch by Hugo van Kemenade.
: Speed up compileall.compile_dir() by 20% when using
multiprocessing by increasing .
: Fix regression in lazy loading of self-referential modules,
introduced in .
: Fix  moduleâs handling of ENTER_EXECUTOR
instructions.
: Lazy-loading of modules that modify their own  no
longer reverts the  to types.ModuleType.
: Fix  extraction for directory entries with the
name containing backslashes on Windows.
: Make os.path.isdevdrive() available on all platforms. For
those that do not offer Dev Drives, it will always return .
: Fix a bug that prevents subclasses of typing.Any to be
instantiated with arguments. Patch by Chris Fu.
: Deferred select imports in importlib.metadata and
importlib.resources for a 14% speedup.
: Start the deprecation period for the current behavior of
datetime.datetime.strptime() and time.strptime() which always
fails to parse a date string with a ValueError involving a day of
month such as strptime("02-29",  when a year is 
specified and the date happen to be February 29th.  This should help avoid
users finding new bugs every four years due to a natural mistaken
assumption about the API when parsing partial date values.
: Fixed inspect.findsource() for class code objects.
: Modify standard library to allow for iOS platform differences.
: On Windows, subprocess.Popen.wait() no longer calls
WaitForSingleObject() with a negative timeout: pass  ms if the
timeout is negative. Patch by Victor Stinner.
: configparser: Donât leave ConfigParser values in an invalid
state (stored as a list instead of a str) after an earlier read raised
DuplicateSectionError or DuplicateOptionError.
: _io.WindowsConsoleIO now emit a warning if a boolean
value is passed as a filedescriptor argument.
: Ignore empty lines and comments in 
: Refreshed zipfile._path from , providing
better compatibility for PyPy, better glob performance for deeply nested
zipfiles, and providing internal access to CompleteDirs.inject for use
in other tests (like importlib.resources).
: On Windows, time.time() now uses the
GetSystemTimePreciseAsFileTime() clock to have a resolution better
than 1 us, instead of the GetSystemTimeAsFileTime() clock which has a
resolution of 15.6 ms. Patch by Victor Stinner.
: Restore support of  and other false values in
urllib.parse functions parse_qs() and
parse_qsl(). Also, they now raise a TypeError for
non-zero integers and non-empty sequences.
: In PathFinder.invalidate_caches, delegate to
MetadataPathFinder.invalidate_caches.
: Fix recursive child in dataclasses
: Fixed various false positives and false negatives in

================================================================================

# Changelog - Library (Part 2)

ipaddress.IPv4Address.is_private (see these docs for details)
ipaddress.IPv4Address.is_global
ipaddress.IPv6Address.is_private
ipaddress.IPv6Address.is_global

Also in the corresponding ipaddress.IPv4Network and
ipaddress.IPv6Network attributes.

================================================================================

# Changelog - Library (Part 3)

: In encodings.idna, any capitalization of the ACE prefix
() is now acceptable. Patch by Pepijn de Vos and Zackery Spytz.
: Add platform.android_ver(), which provides device and OS
information on Android.
: Added new math.fma() function, wrapping C99âs 
operation: fused multiply-add function. Patch by Mark Dickinson and Victor
Stinner.
: The importlib.resources functions
is_resource(),
open_binary(),
open_text(), ,
read_binary(), and
read_text() are un-deprecated, and support
subdirectories via multiple positional arguments. The
contents() function also allows subdirectories,
but remains deprecated.
: Change automatically generated tkinter.Checkbutton
widget names to avoid collisions with automatically generated
tkinter.ttk.Checkbutton widget names within the same parent
widget.
: In , ctype data is now stored in type objects
directly rather than in a dict subclass. This is an internal change that
should not affect usage.
: Fix blocking os.fwalk() and shutil.rmtree() on
opening named pipe.
: Implement ctypes.util.find_library() on Android.
: Fix support of  values > 1 in
logging.TimedRotatingFileHandler for when='MIDNIGHT' and
.
: Remove some internal protected parts from :
_has_uuid_generate_time_safe, _netbios_getnode,
_ipconfig_getnode, and _load_system_functions. They were unused.
: Fix the  module error handling of connection
terminate by peer. It now throws an OSError with the appropriate error
code instead of an EOFError.
: Speed up os.path.realpath() on non-Windows platforms.
: Fix a race in threading.Thread.join().
threading._MainThread now always represents the main thread of the
main interpreter.
PyThreadState.on_delete and PyThreadState.on_delete_data have been
removed.

================================================================================

# Changelog - Library (Part 4)

: Add asyncio.Server.close_clients() and
asyncio.Server.abort_clients() methods which allow to more
forcefully close an asyncio server.
: Changes Unicode codecs to return UnicodeEncodeError or
UnicodeDecodeError, rather than just UnicodeError.
:  now allows CLI arguments to  .
: Make completion of  similar to Python REPL
: Fixed _get_slots bug which caused error when defining
dataclasses with slots and a weakref_slot.
: Add asyncio.Queue termination with
shutdown() method.
: The  module can now read ZIP64 files.
: asyncio.as_completed() now returns an object that is both
an asynchronous iterator and plain iterator. The new asynchronous
iteration pattern allows for easier correlation between prior tasks and
their completed results. This is a closer match to
concurrent.futures.as_completed()âs iteration pattern. Patch by
Justin Arthur.
: inspect.getsource() (and related functions) work with
empty module files, returning  (or reasonable equivalent) instead
of raising . Patch by Kernc.
: Accept an iterable of separators in
asyncio.StreamReader.readuntil(), stopping when one of them is
encountered.
: Make mimetypes.guess_type() properly parsing of URLs with
only a host name, URLs containing fragment or query, and filenames with
only a UNC sharepoint on Windows. Based on patch by Dong-hee Na.
: unittest.TestLoader.discover() now saves the original
value of unittest.TestLoader._top_level_dir and restores it at the end
of the call.

================================================================================

# Changelog - Library (Part 5)

: Improve performance of os.path.join() and
os.path.expanduser().

: Raise  for non-paths in
posixpath.relpath().

: Preserve mailbox ownership when rewriting in
mailbox.mbox.flush(). Patch by Tony Mountifield.

: Raise FileNotFoundError when  returns
â(unreachable)â, which can happen on Linux >= 2.6.36 with glibc < 2.27.

: asyncio.asyncio.run_coroutine_threadsafe() now keeps the
traceback of CancelledError, TimeoutError and
InvalidStateError which are raised in the coroutine.

: Fix error message for ntpath.commonpath().

: Deprecate undocumented glob.glob0() and
glob.glob1() functions. Use glob.glob() and pass a directory
to its  argument instead.

: Optimise several functions in .

: Refactored configparser.RawConfigParser._read() to reduce
cyclometric complexity and improve comprehensibility.

: Raise TypeError for non-sequences for
ntpath.commonpath().

: configparser.ConfigParser now accepts unnamed sections
before named ones, if configured to do so.

: In documentation of gzip.GzipFile in module gzip,
explain data type of optional constructor argument , and recommend
   for generating deterministic streams.

================================================================================

# Changelog - Library (Part 6)

: Fixed an unlikely early & extra  triggered crash
in  when creating a new _ssl._SSLContext if CPython was
built implausibly such that the default cipher list is empty  the
SSL library it was linked against reports a failure from its C
SSL_CTX_set_cipher_list() API.

: A DocTestCase now reports as skipped if all examples in the
doctest are skipped.

: In subprocess, raise a more informative message when
stdout=STDOUT.

: doctest: only print âand X failedâ when non-zero, donât
pluralise â1 itemsâ. Patch by Hugo van Kemenade.

: Speed up compileall.compile_dir() by 20% when using
multiprocessing by increasing .

: Fix regression in lazy loading of self-referential modules,
introduced in .

: Fix  moduleâs handling of ENTER_EXECUTOR
instructions.

: Lazy-loading of modules that modify their own  no
longer reverts the  to types.ModuleType.

: Fix  extraction for directory entries with the
name containing backslashes on Windows.

: Make os.path.isdevdrive() available on all platforms. For
those that do not offer Dev Drives, it will always return .

: Fix a bug that prevents subclasses of typing.Any to be
instantiated with arguments. Patch by Chris Fu.

================================================================================

# Changelog - Library (Part 7)

: Deferred select imports in importlib.metadata and
importlib.resources for a 14% speedup.

: Start the deprecation period for the current behavior of
datetime.datetime.strptime() and time.strptime() which always
fails to parse a date string with a ValueError involving a day of
month such as strptime("02-29",  when a year is 
specified and the date happen to be February 29th.  This should help avoid
users finding new bugs every four years due to a natural mistaken
assumption about the API when parsing partial date values.

: Fixed inspect.findsource() for class code objects.

: Modify standard library to allow for iOS platform differences.

: On Windows, subprocess.Popen.wait() no longer calls
WaitForSingleObject() with a negative timeout: pass  ms if the
timeout is negative. Patch by Victor Stinner.

: configparser: Donât leave ConfigParser values in an invalid
state (stored as a list instead of a str) after an earlier read raised
DuplicateSectionError or DuplicateOptionError.

: _io.WindowsConsoleIO now emit a warning if a boolean
value is passed as a filedescriptor argument.

: Ignore empty lines and comments in

================================================================================

# Changelog - Library (Part 8)

: Refreshed zipfile._path from , providing
better compatibility for PyPy, better glob performance for deeply nested
zipfiles, and providing internal access to CompleteDirs.inject for use
in other tests (like importlib.resources).

: On Windows, time.time() now uses the
GetSystemTimePreciseAsFileTime() clock to have a resolution better
than 1 us, instead of the GetSystemTimeAsFileTime() clock which has a
resolution of 15.6 ms. Patch by Victor Stinner.

: Restore support of  and other false values in
urllib.parse functions parse_qs() and
parse_qsl(). Also, they now raise a TypeError for
non-zero integers and non-empty sequences.

: In PathFinder.invalidate_caches, delegate to
MetadataPathFinder.invalidate_caches.

: Fix recursive child in dataclasses

: Fixed various false positives and false negatives in

List:
ipaddress.IPv4Address.is_private (see these docs for details)
ipaddress.IPv4Address.is_global
ipaddress.IPv6Address.is_private
ipaddress.IPv6Address.is_global

ipaddress.IPv4Address.is_private (see these docs for details)

ipaddress.IPv4Address.is_global

ipaddress.IPv6Address.is_private

ipaddress.IPv6Address.is_global

================================================================================

# Changelog - Library (Part 9)

Also in the corresponding ipaddress.IPv4Network and
ipaddress.IPv6Network attributes.

: In encodings.idna, any capitalization of the ACE prefix
() is now acceptable. Patch by Pepijn de Vos and Zackery Spytz.

: Add platform.android_ver(), which provides device and OS
information on Android.

: Added new math.fma() function, wrapping C99âs 
operation: fused multiply-add function. Patch by Mark Dickinson and Victor
Stinner.

: The importlib.resources functions
is_resource(),
open_binary(),
open_text(), ,
read_binary(), and
read_text() are un-deprecated, and support
subdirectories via multiple positional arguments. The
contents() function also allows subdirectories,
but remains deprecated.

: Change automatically generated tkinter.Checkbutton
widget names to avoid collisions with automatically generated
tkinter.ttk.Checkbutton widget names within the same parent
widget.

: In , ctype data is now stored in type objects
directly rather than in a dict subclass. This is an internal change that
should not affect usage.

: Fix blocking os.fwalk() and shutil.rmtree() on
opening named pipe.

: Implement ctypes.util.find_library() on Android.

================================================================================

# Changelog - Library (Part 10)

: Fix support of  values > 1 in
logging.TimedRotatingFileHandler for when='MIDNIGHT' and
.

: Remove some internal protected parts from :
_has_uuid_generate_time_safe, _netbios_getnode,
_ipconfig_getnode, and _load_system_functions. They were unused.

: Fix the  module error handling of connection
terminate by peer. It now throws an OSError with the appropriate error
code instead of an EOFError.

: Speed up os.path.realpath() on non-Windows platforms.

: Fix a race in threading.Thread.join().

threading._MainThread now always represents the main thread of the
main interpreter.

PyThreadState.on_delete and PyThreadState.on_delete_data have been
removed.

: Add asyncio.Server.close_clients() and
asyncio.Server.abort_clients() methods which allow to more
forcefully close an asyncio server.

: Changes Unicode codecs to return UnicodeEncodeError or
UnicodeDecodeError, rather than just UnicodeError.

:  now allows CLI arguments to  .

: Make completion of  similar to Python REPL

: Fixed _get_slots bug which caused error when defining
dataclasses with slots and a weakref_slot.

: Add asyncio.Queue termination with
shutdown() method.

: The  module can now read ZIP64 files.

================================================================================

# Changelog - Library (Part 11)

: asyncio.as_completed() now returns an object that is both
an asynchronous iterator and plain iterator. The new asynchronous
iteration pattern allows for easier correlation between prior tasks and
their completed results. This is a closer match to
concurrent.futures.as_completed()âs iteration pattern. Patch by
Justin Arthur.

: inspect.getsource() (and related functions) work with
empty module files, returning  (or reasonable equivalent) instead
of raising . Patch by Kernc.

: Accept an iterable of separators in
asyncio.StreamReader.readuntil(), stopping when one of them is
encountered.

: Make mimetypes.guess_type() properly parsing of URLs with
only a host name, URLs containing fragment or query, and filenames with
only a UNC sharepoint on Windows. Based on patch by Dong-hee Na.

: unittest.TestLoader.discover() now saves the original
value of unittest.TestLoader._top_level_dir and restores it at the end
of the call.

================================================================================

# Changelog - Documentation

List:
: Remove compatibility references to Emscripten.
: Add an iOS platform guide, and flag modules not available on
iOS.
: Changes to documentation files and config outputs to reflect the
new location for reporting bugs - i.e. GitHub rather than bugs.python.org.

: Remove compatibility references to Emscripten.

: Add an iOS platform guide, and flag modules not available on
iOS.

: Changes to documentation files and config outputs to reflect the
new location for reporting bugs - i.e. GitHub rather than bugs.python.org.

================================================================================

# Changelog - Tests (Part 1)

List:
: Disable JUnit XML output (--junit-xml=FILE command line
option) in regrtest when hunting for reference leaks ( option).
Patch by Victor Stinner.
: Fix XML tests for vanilla Expat <2.6.0.
: Tests of TLS related things (error codes, etc) were updated to
be more lenient about specific error message strings and behaviors as seen
in the BoringSSL and AWS-LC forks of OpenSSL.
: Consolidated tests for importlib.metadata in their own
 package.
: Update test_importlib so that it passes under WASI SDK 21.
: Add âtsan to test.regrtest for running TSAN tests in
reasonable execution times. Patch by Donghee Na.
: Added import helper isolated_modules as CleanImport
does not remove modules imported during the context. Use it in
importlib.resources tests to avoid leaving  around to impede
importlib.metadata tests.

: Disable JUnit XML output (--junit-xml=FILE command line
option) in regrtest when hunting for reference leaks ( option).
Patch by Victor Stinner.

: Fix XML tests for vanilla Expat <2.6.0.

: Tests of TLS related things (error codes, etc) were updated to
be more lenient about specific error message strings and behaviors as seen
in the BoringSSL and AWS-LC forks of OpenSSL.

================================================================================

# Changelog - Tests (Part 2)

: Consolidated tests for importlib.metadata in their own
 package.

: Update test_importlib so that it passes under WASI SDK 21.

: Add âtsan to test.regrtest for running TSAN tests in
reasonable execution times. Patch by Donghee Na.

: Added import helper isolated_modules as CleanImport
does not remove modules imported during the context. Use it in
importlib.resources tests to avoid leaving  around to impede
importlib.metadata tests.

================================================================================

# Changelog - Build

List:
: Have WASI builds use WASI SDK 21.
: Skip building test modules that must be built as shared under
WASI.
: Add Android build script and instructions.

: Have WASI builds use WASI SDK 21.

: Skip building test modules that must be built as shared under
WASI.

: Add Android build script and instructions.

================================================================================

# Changelog - Windows (Part 1)

List:
: Ensure DirEntry.stat().st_ctime behaves consistently with
 during the deprecation period of  by
containing the same value as st_birthtime. After the deprecation
period,  will be the metadata change time (or unavailable
through ), and only st_birthtime will contain the creation
time.
: Improves performance of os.getppid() by using an
alternate system API when available. Contributed by vxiiduu.
: On Windows, time.monotonic() now uses the
QueryPerformanceCounter() clock to have a resolution better than 1 us,
instead of the GetTickCount64() clock which has a resolution of 15.6
ms. Patch by Victor Stinner.
: Fix instances of <_overlapped.Overlapped   
     deallocation,    .
: Fix the asyncio ProactorEventLoop implementation so that sending
a datagram to an address that is not listening does not prevent receiving
any more datagrams.
: Switched from vendored libmpdecimal code to a
separately-hosted external package in the cpython-source-deps
repository when building the  module.

================================================================================

# Changelog - Windows (Part 2)

: Ensure DirEntry.stat().st_ctime behaves consistently with
 during the deprecation period of  by
containing the same value as st_birthtime. After the deprecation
period,  will be the metadata change time (or unavailable
through ), and only st_birthtime will contain the creation
time.

: Improves performance of os.getppid() by using an
alternate system API when available. Contributed by vxiiduu.

: On Windows, time.monotonic() now uses the
QueryPerformanceCounter() clock to have a resolution better than 1 us,
instead of the GetTickCount64() clock which has a resolution of 15.6
ms. Patch by Victor Stinner.

: Fix instances of <_overlapped.Overlapped   
     deallocation,    .

: Fix the asyncio ProactorEventLoop implementation so that sending
a datagram to an address that is not listening does not prevent receiving
any more datagrams.

: Switched from vendored libmpdecimal code to a
separately-hosted external package in the cpython-source-deps
repository when building the  module.

================================================================================

# Changelog - C API (Part 1)

List:
: Fix  implementation for  and .
: _PyBytes_Resize() can now be called for bytes objects
with reference count > 1, including 1-byte bytes objects. It creates a new
bytes object and destroys the old one if it has reference count > 1.
: Fix integer overflow in PyLong_AsPid() on non-Windows
64-bit platforms.
: PyCode_GetFirstFree() is an ustable API now and has
been renamed to PyUnstable_Code_GetFirstFree(). (Contributed by
Bogdan Romanyuk in )
: Add  test: build a C extension to check if the
Python C API emits C compiler warnings. Patch by Victor Stinner.
: Make the C API compatible with
-Werror=declaration-after-statement compiler flag again. Patch by
Victor Stinner.
: Add PyType_GetModuleByDef() to the limited C API. Patch
by Victor Stinner.
: Restore removed private _PyErr_ChainExceptions1() function.
Patch by Victor Stinner.
: In the limited C API version 3.13, getting ,
, , Py_Ellipsis and Py_NotImplemented
singletons is now implemented as function calls at the stable ABI level to
hide implementation details. Getting these constants still return borrowed
references. Patch by Victor Stinner.
: Add Py_GetConstant() and
Py_GetConstantBorrowed() functions to get constants. For example,
Py_GetConstant(Py_CONSTANT_ZERO) returns a strong reference to
the constant zero. Patch by Victor Stinner.
: Add support for , ,  and  formats to
PyUnicode_FromFormat(): format the fully qualified name of an
object type and of a type: call PyType_GetModuleName(). See
 for more information. Patch by Victor Stinner.
: Add PyType_GetModuleName() function to get the typeâs
module name. Equivalent to getting the type.__module__ attribute.
Patch by Eric Snow and Victor Stinner.
: Add PyType_GetFullyQualifiedName() function to get the
typeâs fully qualified name. Equivalent to
f"{type.__module__}.{type.__qualname__}", or type.__qualname__ if
type.__module__ is not a string or is equal to "builtins". Patch
by Victor Stinner.
: The , , , , _statistics
and _testconsole C extensions are now built with the limited C
API. Patch by Victor Stinner.
: Add additional flags to PyLong_AsNativeBytes() and
PyLong_FromNativeBytes() to allow the caller to determine how to
handle edge cases around values that fill the entire buffer.
: Add PyObject_GenericHash() function.

================================================================================

# Changelog - C API (Part 2)

: Fix  implementation for  and .

: _PyBytes_Resize() can now be called for bytes objects
with reference count > 1, including 1-byte bytes objects. It creates a new
bytes object and destroys the old one if it has reference count > 1.

: Fix integer overflow in PyLong_AsPid() on non-Windows
64-bit platforms.

: PyCode_GetFirstFree() is an ustable API now and has
been renamed to PyUnstable_Code_GetFirstFree(). (Contributed by
Bogdan Romanyuk in )

: Add  test: build a C extension to check if the
Python C API emits C compiler warnings. Patch by Victor Stinner.

: Make the C API compatible with
-Werror=declaration-after-statement compiler flag again. Patch by
Victor Stinner.

: Add PyType_GetModuleByDef() to the limited C API. Patch
by Victor Stinner.

: Restore removed private _PyErr_ChainExceptions1() function.
Patch by Victor Stinner.

: In the limited C API version 3.13, getting ,
, , Py_Ellipsis and Py_NotImplemented
singletons is now implemented as function calls at the stable ABI level to
hide implementation details. Getting these constants still return borrowed
references. Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 3)

: Add Py_GetConstant() and
Py_GetConstantBorrowed() functions to get constants. For example,
Py_GetConstant(Py_CONSTANT_ZERO) returns a strong reference to
the constant zero. Patch by Victor Stinner.

: Add support for , ,  and  formats to
PyUnicode_FromFormat(): format the fully qualified name of an
object type and of a type: call PyType_GetModuleName(). See
 for more information. Patch by Victor Stinner.

: Add PyType_GetModuleName() function to get the typeâs
module name. Equivalent to getting the type.__module__ attribute.
Patch by Eric Snow and Victor Stinner.

: Add PyType_GetFullyQualifiedName() function to get the
typeâs fully qualified name. Equivalent to
f"{type.__module__}.{type.__qualname__}", or type.__qualname__ if
type.__module__ is not a string or is equal to "builtins". Patch
by Victor Stinner.

: The , , , , _statistics
and _testconsole C extensions are now built with the limited C
API. Patch by Victor Stinner.

: Add additional flags to PyLong_AsNativeBytes() and
PyLong_FromNativeBytes() to allow the caller to determine how to
handle edge cases around values that fill the entire buffer.

: Add PyObject_GenericHash() function.

================================================================================

# Changelog - Security (Part 1)

List:
: Allow controlling Expat >=2.6.0 reparse deferral
(CVE 2023-52425) by adding five new methods:

xml.etree.ElementTree.XMLParser.flush()
xml.etree.ElementTree.XMLPullParser.flush()
xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()
xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()
xml.sax.expatreader.ExpatParser.flush()


: ssl.SSLContext.cert_store_stats() and
ssl.SSLContext.get_ca_certs() now correctly lock access to the
certificate store, when the ssl.SSLContext is shared across
multiple threads.

: Allow controlling Expat >=2.6.0 reparse deferral
(CVE 2023-52425) by adding five new methods:

List:
xml.etree.ElementTree.XMLParser.flush()
xml.etree.ElementTree.XMLPullParser.flush()
xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()
xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()
xml.sax.expatreader.ExpatParser.flush()

xml.etree.ElementTree.XMLParser.flush()

xml.etree.ElementTree.XMLPullParser.flush()

xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()

xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()

xml.sax.expatreader.ExpatParser.flush()

================================================================================

# Changelog - Security (Part 2)

: ssl.SSLContext.cert_store_stats() and
ssl.SSLContext.get_ca_certs() now correctly lock access to the
certificate store, when the ssl.SSLContext is shared across
multiple threads.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Respect the status of the garbage collector when indirect calls
are made via PyErr_CheckSignals() and the evaluation breaker.
Patch by Pablo Galindo
:  is now compatible with the implementation of
.
: Add specialization for CONTAINS_OP.
: Fix possible refleak in object.__reduce__() internal
error handling.
: Properly calculate error ranges in the parser when raising
SyntaxError exceptions caused by invalid byte sequences. Patch by
Pablo Galindo
: Add  annotation for instruction definition in
interpreter DSL.
: Fix crash when calling  on exhausted list iterators.
: The regen-cases build stage now works on Windows.
: Fix bug where docstring was replaced by a redundant NOP when
Python is run with .
: Make error message more meaningful for when
bytearray.extend() is called with a  object.
: Every PyThreadState now has its own eval_breaker,
allowing specific threads to be interrupted.
: Fix a bug that was causing the tokenize.untokenize()
function to handle unicode named literals incorrectly. Patch by Pablo
Galindo
: Add ability to force alignment of ctypes.Structure by
way of the new  attribute on the class.
: The multiprocessing resource tracker now exits with non-zero
status code if a resource leak was detected. It still exits with status
code 0 otherwise.
: Improve the constructors for  nodes. Arguments of
list types now default to an empty list if omitted, and optional fields
default to . AST nodes now have an __annotations__ attribute
with the expected types of their attributes. Passing unrecognized extra
arguments to AST nodes is deprecated and will become an error in Python
3.15. Omitting a required argument to an AST node is deprecated and will
become an error in Python 3.15. Patch by Jelle Zijlstra.
: Expose  attribute on property.
: Fix incorrect resolution of mangled class variables used in
assignment expressions in comprehensions.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Respect the status of the garbage collector when indirect calls
are made via PyErr_CheckSignals() and the evaluation breaker.
Patch by Pablo Galindo

:  is now compatible with the implementation of
.

: Add specialization for CONTAINS_OP.

: Fix possible refleak in object.__reduce__() internal
error handling.

: Properly calculate error ranges in the parser when raising
SyntaxError exceptions caused by invalid byte sequences. Patch by
Pablo Galindo

: Add  annotation for instruction definition in
interpreter DSL.

: Fix crash when calling  on exhausted list iterators.

: The regen-cases build stage now works on Windows.

: Fix bug where docstring was replaced by a redundant NOP when
Python is run with .

: Make error message more meaningful for when
bytearray.extend() is called with a  object.

: Every PyThreadState now has its own eval_breaker,
allowing specific threads to be interrupted.

: Fix a bug that was causing the tokenize.untokenize()
function to handle unicode named literals incorrectly. Patch by Pablo
Galindo

: Add ability to force alignment of ctypes.Structure by
way of the new  attribute on the class.

================================================================================

# Changelog - Core and Builtins (Part 3)

: The multiprocessing resource tracker now exits with non-zero
status code if a resource leak was detected. It still exits with status
code 0 otherwise.

: Improve the constructors for  nodes. Arguments of
list types now default to an empty list if omitted, and optional fields
default to . AST nodes now have an __annotations__ attribute
with the expected types of their attributes. Passing unrecognized extra
arguments to AST nodes is deprecated and will become an error in Python
3.15. Omitting a required argument to an AST node is deprecated and will
become an error in Python 3.15. Patch by Jelle Zijlstra.

: Expose  attribute on property.

: Fix incorrect resolution of mangled class variables used in
assignment expressions in comprehensions.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix  for global  members.
: platform.java_ver() is deprecated and will be removed in
3.15. It was largely untested, had a confusing API, and was only useful
for Jython support.
: Fix a race in pydoc _start_server, eliminating a window in
which _start_server can return a thread that is âservingâ but without
a  set.
: : implement  which adds
typing.ReadOnly support to typing.TypedDict.
: : raise SyntaxError instead of
AttributeError on forward references as empty strings.
: When asyncio.TaskGroup.create_task is called on an inactive
asyncio.TaskGroup, the given coroutine will be closed (which prevents
a RuntimeWarning).
: Disable preadv(), readv(), pwritev(), and writev() on WASI.
Under wasmtime for WASI 0.2, these functions donât pass test_posix
(https://github.com/bytecodealliance/wasmtime/issues/7830).

================================================================================

# Changelog - Library (Part 2)

: Fix the computation of the next rollover time in the
logging.TimedRotatingFileHandler handler.
computeRollover() now always returns a timestamp larger than the
specified time and works correctly during the DST change.
doRollover() no longer overwrite the already rolled over file,
saving from data loss when run at midnight or during repeated time at the
DST change.
: Set __main__.__spec__ to  when running a script with

================================================================================

# Changelog - Library (Part 3)

: Fix UnicodeEncodeError in email.Message.as_string() that
results when a message that claims to be in the ascii character set
actually has non-ascii characters. Non-ascii characters are now replaced
with the U+FFFD replacement character, like in the  error
handler.
: Add support for nested typing special forms like
Final[ClassVar[int]].
: Improve the  prompt in .
: [Enum] fix by-value calls when second value is falsey; e.g.
Cardinal(1, 0)
: [Enum] Improve error message when calling super().__new__() in
custom __new__.
: Use the XDG_CURRENT_DESKTOP environment variable in
webbrowser to check desktop. Prefer it to the deprecated
GNOME_DESKTOP_SESSION_ID for GNOME detection.
: Fixed unittest.mock.create_autospec() to pass the call
through to the wrapped object to return the real result.
: Fix issue where ast.parse() would incorrectly flag
conditional context managers (such as       )
as invalid syntax if feature_version=(3,  was passed. This reverts
changes to the grammar made as part of .
: Fix silent truncation of the name with an embedded null
character in multiprocessing.shared_memory.SharedMemory.
: Add kernel density estimation to the statistics module.
: On WASI, the  module no longer get process time
using  or CLOCK_PROCESS_CPUTIME_ID, system API is that is
unreliable and is likely to be removed from WASI. The affected clock
functions fall back to calling .
: Improve algorithm for computing which rolled-over log files to
delete in logging.TimedRotatingFileHandler. It is now reliable
for handlers without  and with arbitrary deterministic 
that leaves the datetime part in the file name unmodified.
: urllib.parse functions parse_qs() and
parse_qsl() now support bytes arguments containing raw
and percent-encoded non-ASCII data.
: csv.writer() now always quotes or escapes  and
, regardless of lineterminator value.
: Restore support of space delimiter with
skipinitialspace=True in . csv.writer() now quotes
empty fields if delimiter is a space and skipinitialspace is true and
raises exception if quoting is not possible.
: Fixed ast.unparse() to handle format_spec with ,
 or . Patched by Frank Hoffmann.
: Stop logging potentially sensitive callback arguments in
 unless debug mode is active.
: Fix an issue where an abandoned StreamWriter would not
be garbage collected.
: Fix a bug in
asyncio.BaseEventLoop.shutdown_default_executor() to ensure the
timeout passed to the coroutine behaves as expected.
: Fix improper decreasing the reference count for 
argument in  methods ,
 and .
: Refactor dis.ArgResolver to make it possible to
subclass and change the way jump args are interpreted.
: Fix inspect.unwrap() for types with the __wrapper__
data descriptor. Fix inspect.Signature.from_callable() for builtins
classmethod() and staticmethod().
: Support callables with the __call__() method and types with
 and __init__() methods set to class methods, static
methods, bound methods, partial functions, and other types of methods and
descriptors in inspect.Signature.from_callable().
: Isolate  (apply ).
:  no longer skips global functions implemented as
builtin methods, such as MethodDescriptorType and
WrapperDescriptorType.
: Added DeprecationWarning when accessing the tarfile attribute
of TarInfo objects. The attribute is never used internally and is only
attached to TarInfos when the tarfile is opened in write-mode, not
read-mode. The attribute creates an unnecessary reference cycle which may
cause corruption when not closing the handle after writing a tarfile.
: urllib.request no longer resolves the hostname before
checking it against the systemâs proxy bypass list on macOS and Windows.
: DatagramTransport.sendto() will now send zero-length
datagrams if called with an empty bytes object. The transport flow control
also now accounts for the datagram header when calculating the buffer
size.
: Protect modules loaded with importlib.util.LazyLoader
from race conditions when multiple threads try to access attributes before
the loading is complete.
: posixpath.commonpath() now raises a ValueError
exception when passed an empty iterable. Previously, IndexError was
raised.
posixpath.commonpath() now raises a  exception when
passed . Previously, ValueError was raised.

================================================================================

# Changelog - Library (Part 4)

: Fix bug where pathlib.PurePath.with_stem() converted a
non-empty path suffix to a stem when given an empty  argument. It
now raises ValueError, just like
pathlib.PurePath.with_suffix() does when called on a path with an
empty stem, given a non-empty  argument.
: Add ssl.VERIFY_X509_PARTIAL_CHAIN and
VERIFY_X509_STRICT to the default SSL context created with
ssl.create_default_context().
: Allow creating union of types for
typing.Annotated with unhashable metadata.
: Fix importlib.resources.simple.ResourceHandle.open() for
text mode, added missed  argument.
: Make .pdbrc and -c work with any valid pdb commands.
: Raise configparser.ParsingError from
 and
read_file() methods of
configparser.ConfigParser if a key without a corresponding value
is continued (that is, followed by an indented line).
: Fix incorrect output of  where  is a
 function, which has an __annotations__ dictionary
attribute with a  key.
: Add option for non-shallow comparisons to
filecmp.dircmp like filecmp.cmp(). Original patch by Steven
Ward. Enhanced by Tobias Rautenkranz
: Profile.print_stats() has been improved to accept multiple
sort arguments. Patched by Chiu-Hsiang Hsu and Furkan Onder.
: Add socket.SO_BINDTOIFINDEX constant.
: Fix ArgumentParser inconsistent with parse_known_args.
: Add windows_31j to aliases for  codec
: Always include the  name in the  of
functools.partial() objects.  Patch by Furkan Onder and Anilyka
Barry.
: Update HTTPSConnection to consistently wrap IPv6 Addresses when
using a proxy.
: email: fix misfolding of comma in address-lists over multiple
lines in combination with unicode encoding.
: Fix io.BufferedReader.tell(),
io.BufferedReader.seek(), _pyio.BufferedReader.tell(),
io.BufferedRandom.tell(), io.BufferedRandom.seek() and
_pyio.BufferedRandom.tell() being able to return negative offsets.
: Fix a traceback in  when all options in a
mutually exclusive group are suppressed.
: Fixed a bug in
logging.handlers.TimedRotatingFileHandler where multiple rotating
handler instances pointing to files with the same name but different
extensions would conflict and not delete the correct files.
: Add Z85 encoding to .
: Add missing call to localization function in .
: Fix multiprocessing.connection.Listener.accept() to
accept empty bytes as authkey. Not accepting empty bytes as key causes it
to hang indefinitely.
: linecache: get module name from  if available. This
allows getting source code for the  module when a custom
loader is used.
: Failing to pass arguments properly to
functools.singledispatchmethod() now throws a TypeError instead of
hitting an index out of bounds internally.
: The asyncio REPL now runs sys.__interactivehook__ on
startup. The default implementation of sys.__interactivehook__
provides auto-completion to the asyncio REPL. Patch contributed by RÃ©mi
Lapeyre.
: Add âdefaultâ and âversionâ help text for localization in
argparse.

================================================================================

# Changelog - Library (Part 5)

: Fix  for global  members.

: platform.java_ver() is deprecated and will be removed in
3.15. It was largely untested, had a confusing API, and was only useful
for Jython support.

: Fix a race in pydoc _start_server, eliminating a window in
which _start_server can return a thread that is âservingâ but without
a  set.

: : implement  which adds
typing.ReadOnly support to typing.TypedDict.

: : raise SyntaxError instead of
AttributeError on forward references as empty strings.

: When asyncio.TaskGroup.create_task is called on an inactive
asyncio.TaskGroup, the given coroutine will be closed (which prevents
a RuntimeWarning).

: Disable preadv(), readv(), pwritev(), and writev() on WASI.

Under wasmtime for WASI 0.2, these functions donât pass test_posix
(https://github.com/bytecodealliance/wasmtime/issues/7830).

: Fix the computation of the next rollover time in the
logging.TimedRotatingFileHandler handler.
computeRollover() now always returns a timestamp larger than the
specified time and works correctly during the DST change.
doRollover() no longer overwrite the already rolled over file,
saving from data loss when run at midnight or during repeated time at the
DST change.

================================================================================

# Changelog - Library (Part 6)

: Set __main__.__spec__ to  when running a script with

: Fix UnicodeEncodeError in email.Message.as_string() that
results when a message that claims to be in the ascii character set
actually has non-ascii characters. Non-ascii characters are now replaced
with the U+FFFD replacement character, like in the  error
handler.

: Add support for nested typing special forms like
Final[ClassVar[int]].

: Improve the  prompt in .

: [Enum] fix by-value calls when second value is falsey; e.g.
Cardinal(1, 0)

: [Enum] Improve error message when calling super().__new__() in
custom __new__.

: Use the XDG_CURRENT_DESKTOP environment variable in
webbrowser to check desktop. Prefer it to the deprecated
GNOME_DESKTOP_SESSION_ID for GNOME detection.

: Fixed unittest.mock.create_autospec() to pass the call
through to the wrapped object to return the real result.

: Fix issue where ast.parse() would incorrectly flag
conditional context managers (such as       )
as invalid syntax if feature_version=(3,  was passed. This reverts
changes to the grammar made as part of .

: Fix silent truncation of the name with an embedded null
character in multiprocessing.shared_memory.SharedMemory.

================================================================================

# Changelog - Library (Part 7)

: Add kernel density estimation to the statistics module.

: On WASI, the  module no longer get process time
using  or CLOCK_PROCESS_CPUTIME_ID, system API is that is
unreliable and is likely to be removed from WASI. The affected clock
functions fall back to calling .

: Improve algorithm for computing which rolled-over log files to
delete in logging.TimedRotatingFileHandler. It is now reliable
for handlers without  and with arbitrary deterministic 
that leaves the datetime part in the file name unmodified.

: urllib.parse functions parse_qs() and
parse_qsl() now support bytes arguments containing raw
and percent-encoded non-ASCII data.

: csv.writer() now always quotes or escapes  and
, regardless of lineterminator value.

: Restore support of space delimiter with
skipinitialspace=True in . csv.writer() now quotes
empty fields if delimiter is a space and skipinitialspace is true and
raises exception if quoting is not possible.

: Fixed ast.unparse() to handle format_spec with ,
 or . Patched by Frank Hoffmann.

: Stop logging potentially sensitive callback arguments in
 unless debug mode is active.

: Fix an issue where an abandoned StreamWriter would not
be garbage collected.

================================================================================

# Changelog - Library (Part 8)

: Fix a bug in
asyncio.BaseEventLoop.shutdown_default_executor() to ensure the
timeout passed to the coroutine behaves as expected.

: Fix improper decreasing the reference count for 
argument in  methods ,
 and .

: Refactor dis.ArgResolver to make it possible to
subclass and change the way jump args are interpreted.

: Fix inspect.unwrap() for types with the __wrapper__
data descriptor. Fix inspect.Signature.from_callable() for builtins
classmethod() and staticmethod().

: Support callables with the __call__() method and types with
 and __init__() methods set to class methods, static
methods, bound methods, partial functions, and other types of methods and
descriptors in inspect.Signature.from_callable().

:  no longer skips global functions implemented as
builtin methods, such as MethodDescriptorType and
WrapperDescriptorType.

: Added DeprecationWarning when accessing the tarfile attribute
of TarInfo objects. The attribute is never used internally and is only
attached to TarInfos when the tarfile is opened in write-mode, not
read-mode. The attribute creates an unnecessary reference cycle which may
cause corruption when not closing the handle after writing a tarfile.

================================================================================

# Changelog - Library (Part 9)

: urllib.request no longer resolves the hostname before
checking it against the systemâs proxy bypass list on macOS and Windows.

: DatagramTransport.sendto() will now send zero-length
datagrams if called with an empty bytes object. The transport flow control
also now accounts for the datagram header when calculating the buffer
size.

: Protect modules loaded with importlib.util.LazyLoader
from race conditions when multiple threads try to access attributes before
the loading is complete.

: posixpath.commonpath() now raises a ValueError
exception when passed an empty iterable. Previously, IndexError was
raised.

posixpath.commonpath() now raises a  exception when
passed . Previously, ValueError was raised.

: Fix bug where pathlib.PurePath.with_stem() converted a
non-empty path suffix to a stem when given an empty  argument. It
now raises ValueError, just like
pathlib.PurePath.with_suffix() does when called on a path with an
empty stem, given a non-empty  argument.

: Add ssl.VERIFY_X509_PARTIAL_CHAIN and
VERIFY_X509_STRICT to the default SSL context created with
ssl.create_default_context().

: Allow creating union of types for
typing.Annotated with unhashable metadata.

================================================================================

# Changelog - Library (Part 10)

: Fix importlib.resources.simple.ResourceHandle.open() for
text mode, added missed  argument.

: Make .pdbrc and -c work with any valid pdb commands.

: Raise configparser.ParsingError from
 and
read_file() methods of
configparser.ConfigParser if a key without a corresponding value
is continued (that is, followed by an indented line).

: Fix incorrect output of  where  is a
 function, which has an __annotations__ dictionary
attribute with a  key.

: Add option for non-shallow comparisons to
filecmp.dircmp like filecmp.cmp(). Original patch by Steven
Ward. Enhanced by Tobias Rautenkranz

: Profile.print_stats() has been improved to accept multiple
sort arguments. Patched by Chiu-Hsiang Hsu and Furkan Onder.

: Add socket.SO_BINDTOIFINDEX constant.

: Fix ArgumentParser inconsistent with parse_known_args.

: Add windows_31j to aliases for  codec

: Always include the  name in the  of
functools.partial() objects.  Patch by Furkan Onder and Anilyka
Barry.

: Update HTTPSConnection to consistently wrap IPv6 Addresses when
using a proxy.

: email: fix misfolding of comma in address-lists over multiple
lines in combination with unicode encoding.

================================================================================

# Changelog - Library (Part 11)

: Fix io.BufferedReader.tell(),
io.BufferedReader.seek(), _pyio.BufferedReader.tell(),
io.BufferedRandom.tell(), io.BufferedRandom.seek() and
_pyio.BufferedRandom.tell() being able to return negative offsets.

: Fix a traceback in  when all options in a
mutually exclusive group are suppressed.

: Fixed a bug in
logging.handlers.TimedRotatingFileHandler where multiple rotating
handler instances pointing to files with the same name but different
extensions would conflict and not delete the correct files.

: Add Z85 encoding to .

: Add missing call to localization function in .

: Fix multiprocessing.connection.Listener.accept() to
accept empty bytes as authkey. Not accepting empty bytes as key causes it
to hang indefinitely.

: linecache: get module name from  if available. This
allows getting source code for the  module when a custom
loader is used.

: Failing to pass arguments properly to
functools.singledispatchmethod() now throws a TypeError instead of
hitting an index out of bounds internally.

: The asyncio REPL now runs sys.__interactivehook__ on
startup. The default implementation of sys.__interactivehook__
provides auto-completion to the asyncio REPL. Patch contributed by RÃ©mi
Lapeyre.

================================================================================

# Changelog - Library (Part 12)

: Add âdefaultâ and âversionâ help text for localization in
argparse.

================================================================================

# Changelog - Documentation

List:
: Document CVE 2023-52425 of Expat <2.6.0 under âXML
vulnerabilitiesâ.
: Improve import time of  on Linux.

: Document CVE 2023-52425 of Expat <2.6.0 under âXML
vulnerabilitiesâ.

: Improve import time of  on Linux.

================================================================================

# Changelog - Tests (Part 1)

List:
: Add test exclusions to support running the test suite on
Android.
: Enable test_concurrent_futures on platforms that support
threading but not multiprocessing.
: Make â_testinternalcapi.assemble_code_objectâ construct the
exception table for the code object.
: Leak tests (, --huntrleaks) now show a summary of the
number of leaks found in each iteration.
: Add  option to regrtest test runner: run failed
tests with test.bisect_cmd to identify failing tests. Patch by Victor
Stinner.
: Fix ProgramPriorityTests in  permanently
changing the process priority.
: On Windows, commas passed in arguments to
Tools\buildbot\test.bat and PCbuild\\rt.bat are now properly
handled.
: Fix translation of exception handler targets by
_testinternalcapi.optimize_cfg.
: Fix segfault in _testinternalcapi.compiler_codegen on bad
input.

: Add test exclusions to support running the test suite on
Android.

: Enable test_concurrent_futures on platforms that support
threading but not multiprocessing.

: Make â_testinternalcapi.assemble_code_objectâ construct the
exception table for the code object.

: Leak tests (, --huntrleaks) now show a summary of the
number of leaks found in each iteration.

================================================================================

# Changelog - Tests (Part 2)

: Add  option to regrtest test runner: run failed
tests with test.bisect_cmd to identify failing tests. Patch by Victor
Stinner.

: Fix ProgramPriorityTests in  permanently
changing the process priority.

: On Windows, commas passed in arguments to
Tools\buildbot\test.bat and PCbuild\\rt.bat are now properly
handled.

: Fix translation of exception handler targets by
_testinternalcapi.optimize_cfg.

: Fix segfault in _testinternalcapi.compiler_codegen on bad
input.

================================================================================

# Changelog - Build

List:
: Get WASI builds to work under wasmtime 18 w/ WASI 0.2/preview2
primitives.
: Change Androidâs sys.platform from  to
.
: Backport âs PR #42 to fix compiling CPython on 32-bit
Windows with .
: Fix several Android build issues
: A testbed project was added to run the test suite on iOS.
: Fix building ctypes module with -DWIN32_LEAN_AND_MEAN defined
: Link extension modules against libpython on Android.
: The install name for libPython is now correctly set for
non-framework macOS builds.
: Makefile targets were added to support compiling an
iOS-compatible framework build.

: Get WASI builds to work under wasmtime 18 w/ WASI 0.2/preview2
primitives.

: Change Androidâs sys.platform from  to
.

: Backport âs PR #42 to fix compiling CPython on 32-bit
Windows with .

: Fix several Android build issues

: A testbed project was added to run the test suite on iOS.

: Fix building ctypes module with -DWIN32_LEAN_AND_MEAN defined

: Link extension modules against libpython on Android.

: The install name for libPython is now correctly set for
non-framework macOS builds.

: Makefile targets were added to support compiling an
iOS-compatible framework build.

================================================================================

# Changelog - Windows (Part 1)

List:
: Ensure the value of GetLastError() is preserved across GIL
operations.
: Building extensions intended for free-threaded builds of
CPython now require compiling with /DPy_GIL_DISABLED manually when
using a regular install. This is expected to change in future releases.
: The installer now has more strict rules about updating the
Python Launcher for Windows. In general, most users only have a single launcher
installed and will see no difference. When multiple launchers have been
installed, the option to install the launcher is disabled until all but
one have been removed. Downgrading the launcher (which was never allowed)
is now more obviously blocked.
: Python Launcher for Windows can now detect Python 3.13 when installed from
the Microsoft Store, and will install Python 3.12 by default when
PYLAUNCHER_ALLOW_INSTALL is set.

: Ensure the value of GetLastError() is preserved across GIL
operations.

: Building extensions intended for free-threaded builds of
CPython now require compiling with /DPy_GIL_DISABLED manually when
using a regular install. This is expected to change in future releases.

================================================================================

# Changelog - Windows (Part 2)

: The installer now has more strict rules about updating the
Python Launcher for Windows. In general, most users only have a single launcher
installed and will see no difference. When multiple launchers have been
installed, the option to install the launcher is disabled until all but
one have been removed. Downgrading the launcher (which was never allowed)
is now more obviously blocked.

: Python Launcher for Windows can now detect Python 3.13 when installed from
the Microsoft Store, and will install Python 3.12 by default when
PYLAUNCHER_ALLOW_INSTALL is set.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to Tcl/Tk 8.6.14.

: Update macOS installer to Tcl/Tk 8.6.14.

================================================================================

# Changelog - IDLE

List:
: On macOS show a proxy icon in the title bar of editor windows to
match platform behaviour.

: On macOS show a proxy icon in the title bar of editor windows to
match platform behaviour.

================================================================================

# Changelog - Tools/Demos

List:
: Remove outdated Tools/{io,cc,string}bench
: Add consistency in usage message IO between 2 versions of
python-config.

: Remove outdated Tools/{io,cc,string}bench

: Add consistency in usage message IO between 2 versions of
python-config.

================================================================================

# Changelog - C API

List:
: Add again _PyCFunctionFastWithKeywords name, removed in
Python 3.13 alpha 4 by mistake.  Keep the old private
_PyCFunctionFastWithKeywords name (Python 3.7) as an alias to the new
public name PyCFunctionFastWithKeywords (Python 3.13a4). Patch by
Victor Stinner.
: Add PyHASH_MODULUS, PyHASH_BITS,
PyHASH_INF and PyHASH_IMAG C macros.  Patch by
Sergey B Kirpichev.

: Add again _PyCFunctionFastWithKeywords name, removed in
Python 3.13 alpha 4 by mistake.  Keep the old private
_PyCFunctionFastWithKeywords name (Python 3.7) as an alias to the new
public name PyCFunctionFastWithKeywords (Python 3.13a4). Patch by
Victor Stinner.

: Add PyHASH_MODULUS, PyHASH_BITS,
PyHASH_INF and PyHASH_IMAG C macros.  Patch by
Sergey B Kirpichev.

================================================================================

# Changelog - Security

List:
: Update bundled libexpat to 2.6.0
: Fix possible crashes in collections.deque.index() when
the deque is concurrently modified.

: Update bundled libexpat to 2.6.0

: Fix possible crashes in collections.deque.index() when
the deque is concurrently modified.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: For an empty reverse iterator for list will be reduced to
reversed(). Patch by Donghee Na
: Add PythonFinalizationError exception. This exception
derived from RuntimeError is raised when an operation is blocked
during the Python finalization. Patch by
Victor Stinner.
: Add sys._clear_internal_caches(), which clears all
internal performance-related caches (and deprecate the less-general
sys._clear_type_cache() function).
: Fix compilation crashes in uncommon code examples using
 inside a comprehension in a class body.
: Adapt  and  methods to Argument
Clinic.
: Setters for members with an unsigned integer type now support
the same range of valid values for objects that has a
__index__() method as for .
: Changed socket type validation in
create_datagram_endpoint() to accept all non-stream
sockets. This fixes a regression in compatibility with raw sockets.
: Fixes a race between PyParkingLot_Park and
_PyParkingLot_UnparkAll.
: Limit the number of versions that a single class can use.
Prevents a few wayward classes using up all the version numbers.
: The  builtin function now always raises
ValueError for values outside the valid range. Previously it raised
OverflowError for very large or small values.
: No longer specialize calls to classes, if those classes have
metaclasses. Fixes bug where the  method of the metaclass was
not being called.
: Improve error message for function calls with bad keyword
arguments via getargs
: The free-threaded build no longer allocates space for the
 structure in objects that support cyclic garbage collection.
A number of other fields and data structures are used as replacements,
including ob_gc_bits, , and mimalloc internal data
structures.
: Lower the recursion limit under a debug build of WASI.
: Compiler applies folding of LOAD_CONST with following
instruction in a separate pass before other optimisations. This enables
jump threading in certain circumstances.
: Fix a RuntimeWarning emitted when assign an integer-like
value that is not an instance of  to an attribute that
corresponds to a C struct member of  T_UINT
and T_ULONG. Fix a double RuntimeWarning emitted when assign a
negative integer value to an attribute that corresponds to a C struct
member of type T_UINT.
: Compiler propagates line numbers before optimization, leading
to more optimization opportunities and removing the need for the
guarantee_lineno_for_exits hack.
: The free-threaded build now has its own thread-safe GC
implementation that uses mimalloc to find GC tracked objects. It is
non-generational, unlike the existing GC implementation.
: Fix segmentation fault caused by an incorrect format string in
 exception when more than two arguments are passed to
.
: The  instruction now pops only one value. This is to
better support side exits in loops.
: Make queue.SimpleQueue thread safe when the GIL is
disabled.
: Implement the foundations of the Tier 2 redundancy eliminator.
: frame.clear(): Clear frame.f_locals as well, and not only the
fast locals. This is relevant once frame.f_locals was accessed, which
would contain also references to all the locals.
: Convert collections.deque to use Argument Clinic.
: Make methods on collections.deque thread-safe when the
GIL is disabled.
: Add an option (--enable-experimental-jit for
-based builds or --experimental-jit for -based
ones) to build an experimental just-in-time compiler, based on
copy-and-patch
: Make interp->obmalloc a pointer. For interpreters that share
state with the main interpreter, this points to the same static memory
structure. For interpreters with their own obmalloc state, it is heap
allocated. Add free_obmalloc_arenas() which will free the obmalloc arenas
and radix tree structures for interpreters with their own obmalloc state.
: Add warning when creating  using a namespace
dictionary with non-string keys. Patched by Daniel Urban and Furkan Onder.
: Use native Win32 condition variables.

================================================================================

# Changelog - Core and Builtins (Part 2)

: For an empty reverse iterator for list will be reduced to
reversed(). Patch by Donghee Na

: Add PythonFinalizationError exception. This exception
derived from RuntimeError is raised when an operation is blocked
during the Python finalization. Patch by
Victor Stinner.

: Add sys._clear_internal_caches(), which clears all
internal performance-related caches (and deprecate the less-general
sys._clear_type_cache() function).

: Fix compilation crashes in uncommon code examples using
 inside a comprehension in a class body.

: Adapt  and  methods to Argument
Clinic.

: Setters for members with an unsigned integer type now support
the same range of valid values for objects that has a
__index__() method as for .

: Changed socket type validation in
create_datagram_endpoint() to accept all non-stream
sockets. This fixes a regression in compatibility with raw sockets.

: Fixes a race between PyParkingLot_Park and
_PyParkingLot_UnparkAll.

: Limit the number of versions that a single class can use.
Prevents a few wayward classes using up all the version numbers.

================================================================================

# Changelog - Core and Builtins (Part 3)

: The  builtin function now always raises
ValueError for values outside the valid range. Previously it raised
OverflowError for very large or small values.

: No longer specialize calls to classes, if those classes have
metaclasses. Fixes bug where the  method of the metaclass was
not being called.

: Improve error message for function calls with bad keyword
arguments via getargs

: The free-threaded build no longer allocates space for the
 structure in objects that support cyclic garbage collection.
A number of other fields and data structures are used as replacements,
including ob_gc_bits, , and mimalloc internal data
structures.

: Lower the recursion limit under a debug build of WASI.

: Compiler applies folding of LOAD_CONST with following
instruction in a separate pass before other optimisations. This enables
jump threading in certain circumstances.

: Fix a RuntimeWarning emitted when assign an integer-like
value that is not an instance of  to an attribute that
corresponds to a C struct member of  T_UINT
and T_ULONG. Fix a double RuntimeWarning emitted when assign a
negative integer value to an attribute that corresponds to a C struct
member of type T_UINT.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Compiler propagates line numbers before optimization, leading
to more optimization opportunities and removing the need for the
guarantee_lineno_for_exits hack.

: The free-threaded build now has its own thread-safe GC
implementation that uses mimalloc to find GC tracked objects. It is
non-generational, unlike the existing GC implementation.

: Fix segmentation fault caused by an incorrect format string in
 exception when more than two arguments are passed to
.

: The  instruction now pops only one value. This is to
better support side exits in loops.

: Make queue.SimpleQueue thread safe when the GIL is
disabled.

: Implement the foundations of the Tier 2 redundancy eliminator.

: frame.clear(): Clear frame.f_locals as well, and not only the
fast locals. This is relevant once frame.f_locals was accessed, which
would contain also references to all the locals.

: Convert collections.deque to use Argument Clinic.

: Make methods on collections.deque thread-safe when the
GIL is disabled.

: Add an option (--enable-experimental-jit for
-based builds or --experimental-jit for -based
ones) to build an experimental just-in-time compiler, based on
copy-and-patch

================================================================================

# Changelog - Core and Builtins (Part 5)

: Make interp->obmalloc a pointer. For interpreters that share
state with the main interpreter, this points to the same static memory
structure. For interpreters with their own obmalloc state, it is heap
allocated. Add free_obmalloc_arenas() which will free the obmalloc arenas
and radix tree structures for interpreters with their own obmalloc state.

: Add warning when creating  using a namespace
dictionary with non-string keys. Patched by Daniel Urban and Furkan Onder.

: Use native Win32 condition variables.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix a bug in  where incorrect line numbers would
be reported for decorated functions.
: Fix several  bugs when using the C implementation
of : * memory leak in some rare cases when using
the  format option (coerce negative 0) * incorrect output when
applying the  format option to type  (fixed-point with capital
 / ) * incorrect output when applying the  format
option (alternate form)
: Fix confused traceback when floordiv, mod, or divmod operations
happens between instances of fractions.Fraction and
.
: Most exceptions are now ignored when attempting to set the
__orig_class__ attribute on objects returned when calling
 generic aliases (including generic aliases created using
typing.Annotated). Previously only AttributeError was
ignored. Patch by Dave Shawley.
: Fix âissubclass() arg 1 must be a classâ errors in certain
cases of multiple inheritance with generic aliases (regression in early
3.13 alpha releases).
: Fix tests for XMLPullParser
with Expat 2.6.0.
: io.BufferedRandom.read1() now flushes the underlying
write buffer.
: Trailing  no longer allows to match files and non-existing
paths in recursive .
: Avoid race conditions in the creation of directories during
concurrent extraction in  and .
: Speed up pathlib.Path.glob() by removing redundant regex
matching.
: Partially revert the behavior of tkinter.Text.count(). By
default it preserves the behavior of older Python versions, except that
setting wantobjects to 0 no longer has effect. Add a new parameter
return_ints: specifying return_ints=True makes Text.count()
always returning the single count as an integer instead of a 1-tuple or
.
: When csv.Error is raised when handling TypeError, do not print
the TypeError traceback.
: Added _POSIX_VDISABLE from Câs <unistd.h> to
.
: Update bundled pip to 24.0
:  no longer ignores errors when trying to extract
a directory on top of a file.
: Add array.array.clear().
: Support tuple subclasses using auto() for enum member value.
: Fix support of explicit option value âââ in 
(e.g. --option=--).
: Fix -
comparison. Now the special comparison methods like  and
 return NotImplemented if one of comparands is
 and other is  instead of ignoring the
time part and the time zone or forcefully return ânot equalâ or raise
. It makes comparison of  and
 subclasses more symmetric and allows to change the
default behavior by overriding the special comparison methods in
subclasses.
: Fix ctypes structs with array on Windows ARM64 platform by
setting MAX_STRUCT_SIZE to 32 in stgdict. Patch by Diego Russo
: Ensure that deprecation warning for âNâ specifier in
 format is not raised for cases where âNâ appears
in other places in the format specifier. Based on patch by Stefan Krah.
: Return both files and directories from pathlib.Path.glob()
if a pattern ends with ââ. Previously only directories were
returned.
: Improve import time of importlib.metadata and
email.utils.
: Fix a leak of open socket in rare cases when error occurred in
ssl.SSLSocket creation.
: email.policy.EmailPolicy.fold() now always encodes
non-ASCII characters in headers if 
is false.
: Synchronization of the  database is now no-op if
there was no modification since opening or last synchronization. The
directory file for a newly created empty  database is now
created immediately after opening instead of deferring this until
synchronizing or closing.
: Add  keyword-only parameter to
sqlite3.Connection.iterdump() for filtering database objects to
dump. Patch by Mariusz Felisiak.
: Prohibit subclassing pure-Python datetime.timezone.
This is consistent with C-extension implementation. Patch by Mariusz
Felisiak.
: Add the  method for the iterator returned by
xml.etree.ElementTree.iterparse().
: Reduce the import time of  module by ~50%.
Patch by Daniel Hollas.
: Make the result of termios.tcgetattr() reproducible on
Alpine Linux. Previously it could leave a random garbage in some fields.
: Make threading.Lock a real class, not a factory
function. Add  to _thread.lock type.
: Add dbm.sqlite3 as a backend to , and make it
the new default  backend. Patch by Raymond Hettinger and Erlend
E. Aasland.
: Revert changes in  which made calls of
TestResult methods startTest() and stopTest() unbalanced.
: Ignore an  in
asyncio.BaseEventLoop.create_server() when IPv6 is available but the
interface cannot actually support it.
: _DummyThread entries in threading._active are now
automatically removed when the related thread dies.
: Dismiss the FileNotFound error in
ctypes.util.find_library() and just return  on Linux.
: Expose more platform specific constants in the 
module on Linux, macOS, FreeBSD and NetBSD.
: The tty.setcbreak() and new tty.cfmakecbreak() no
longer clears the terminal input ICRLF flag. This fixes a regression
introduced in 3.12 that no longer matched how OSes define cbreak mode in
their  manual pages.
: Remove type hints from Lib/asyncio/staggered.py. The
annotations in the 
project should be used instead.
: Avoid reference cycle in ElementTree.iterparse. The iterator
returned by ElementTree.iterparse may hold on to a file descriptor.
The reference cycle prevented prompt clean-up of the file descriptor if
the returned iterator was not exhausted.
: The signature for the __replace__ method on
dataclasses now has the first argument named , rather than
.
:  raised when run a subprocess now only has
 attribute set to  if the error was caused by a failed
attempt to change the current directory.
: Enum: correctly handle tuple subclasses in custom .
: Support deprecation of options, positional arguments and
subcommands in .
: Speed up dataclasses.asdict up to 1.35x.
: Fix a reference leak in
asyncio.selector_events.BaseSelectorEventLoop when SSL handshakes
fail. Patch contributed by Jamie Phan.
: Accept path-like objects as patterns
in pathlib.Path.glob() and .
: Ensure that a asyncio.Condition.notify() call does not
get lost if the awakened  is simultaneously cancelled or
encounters any other error.
: Fix the behavior of tag_unbind() methods of
tkinter.Text and tkinter.Canvas classes with three
arguments. Previously, widget.tag_unbind(tag,  
destroyed the current binding for , leaving  unbound,
and deleted the  command. Now it removes only  from the
binding for , keeping other commands, and deletes the 
command. It leaves  unbound only if  was the last bound
command.
: Fix rendering class methods, bound methods, method and function
aliases in . Class methods no longer have âmethod of
builtins.type instanceâ note. Corresponding notes are now added for class
and unbound methods. Method and function aliases now have references to
the module or the class where the origin was defined if it differs from
the current. Bound methods are now listed in the static methods section.
Methods of builtin classes are now supported as well as methods of Python
classes.
: Add more validation checks in the csv.Dialect
constructor. ValueError is now raised if the same character is used
in different roles.
: Fix support of QUOTE_NOTNULL and
QUOTE_STRINGS in csv.reader().
: Speed up pathlib.Path.walk() by using
os.DirEntry.path where possible.
: When replace() method is called on a subclass of datetime, date
or time, properly call derived constructor. Previously, only the base
classâs constructor was called.
Also, make sure to pass non-zero fold values when creating subclasses in
various methods. Previously, fold was silently ignored.

================================================================================

# Changelog - Library (Part 2)

: Speed-up datetime.datetime.replace(),
datetime.date.replace() and datetime.time.replace().
: Set breakpoint on the first executable line of the function,
instead of the line of function definition when the user do  
using 
: Improve handling of pdb convenience variables to avoid
replacing string contents.
: Add option to calendar module CLI to specify the weekday to
start each week. Patch by Steven Ward.
: Recognise image/webp as a standard format in the
 module.
: Fix the  widget method wm_attributes(). It
now accepts the attribute name without the minus prefix to get window
attributes and allows to specify attributes and values to set as keyword
arguments. Add new optional keyword argument return_python_dict: calling
w.wm_attributes(return_python_dict=True) returns the attributes as a
dict instead of a tuple. Calling w.wm_attributes() now returns a tuple
instead of string if wantobjects was set to 0.
: Many functions now emit a warning if a boolean value is passed
as a file descriptor argument.
: Added check for file modification during debugging with

================================================================================

# Changelog - Library (Part 3)

: Show the Tcl/Tk patchlevel (rather than version) in
tkinter._test().
: Fix race condition in . Instead of checking if a
directory exists and creating it, directly call os.makedirs() with
the kwarg exist_ok=True.
: Set unixfrom envelope in mailbox.mbox and
mailbox.MMDF.
: Fix stacklevel in InvalidTZPathWarning during
 module import.
: Allow ctypes.Union to be nested in
ctypes.Structure when the system endianness is the opposite of
the classes.
: Fix null pointer dereference in
lzma._decode_filter_properties() due to improper handling of BCJ
filters with properties of zero length. Patch by Radislav Chugunov.
: Add queue.Queue termination with
shutdown().
: Changed argparse flag options formatting to remove redundancy.
: Add POSIX pseudo-terminal functions os.posix_openpt(),
os.grantpt(), os.unlockpt(), and os.ptsname().
: When  is called from a foreign thread (aka
_DummyThread), the type of the thread in a child process is changed to
_MainThread. Also changed its name and daemonic status, it can be now
joined.
: Add os.path.isreserved(), which identifies reserved
pathnames such as âNULâ, âAUXâ and âCONâ. This function is only available
on Windows.
Deprecate pathlib.PurePath.is_reserved().

================================================================================

# Changelog - Library (Part 4)

: The  functions isgeneratorfunction,
iscoroutinefunction, isasyncgenfunction now support
functools.partialmethod wrapped functions the same way they support
functools.partial.

: Fix a bug in  where incorrect line numbers would
be reported for decorated functions.

: Fix several  bugs when using the C implementation
of : * memory leak in some rare cases when using
the  format option (coerce negative 0) * incorrect output when
applying the  format option to type  (fixed-point with capital
 / ) * incorrect output when applying the  format
option (alternate form)

: Fix confused traceback when floordiv, mod, or divmod operations
happens between instances of fractions.Fraction and
.

: Most exceptions are now ignored when attempting to set the
__orig_class__ attribute on objects returned when calling
 generic aliases (including generic aliases created using
typing.Annotated). Previously only AttributeError was
ignored. Patch by Dave Shawley.

: Fix âissubclass() arg 1 must be a classâ errors in certain
cases of multiple inheritance with generic aliases (regression in early
3.13 alpha releases).

: Fix tests for XMLPullParser
with Expat 2.6.0.

================================================================================

# Changelog - Library (Part 5)

: io.BufferedRandom.read1() now flushes the underlying
write buffer.

: Trailing  no longer allows to match files and non-existing
paths in recursive .

: Avoid race conditions in the creation of directories during
concurrent extraction in  and .

: Speed up pathlib.Path.glob() by removing redundant regex
matching.

: Partially revert the behavior of tkinter.Text.count(). By
default it preserves the behavior of older Python versions, except that
setting wantobjects to 0 no longer has effect. Add a new parameter
return_ints: specifying return_ints=True makes Text.count()
always returning the single count as an integer instead of a 1-tuple or
.

: When csv.Error is raised when handling TypeError, do not print
the TypeError traceback.

: Added _POSIX_VDISABLE from Câs <unistd.h> to
.

: Update bundled pip to 24.0

:  no longer ignores errors when trying to extract
a directory on top of a file.

: Add array.array.clear().

: Support tuple subclasses using auto() for enum member value.

: Fix support of explicit option value âââ in 
(e.g. --option=--).

================================================================================

# Changelog - Library (Part 6)

: Fix -
comparison. Now the special comparison methods like  and
 return NotImplemented if one of comparands is
 and other is  instead of ignoring the
time part and the time zone or forcefully return ânot equalâ or raise
. It makes comparison of  and
 subclasses more symmetric and allows to change the
default behavior by overriding the special comparison methods in
subclasses.

: Fix ctypes structs with array on Windows ARM64 platform by
setting MAX_STRUCT_SIZE to 32 in stgdict. Patch by Diego Russo

: Ensure that deprecation warning for âNâ specifier in
 format is not raised for cases where âNâ appears
in other places in the format specifier. Based on patch by Stefan Krah.

: Return both files and directories from pathlib.Path.glob()
if a pattern ends with ââ. Previously only directories were
returned.

: Improve import time of importlib.metadata and
email.utils.

: Fix a leak of open socket in rare cases when error occurred in
ssl.SSLSocket creation.

: email.policy.EmailPolicy.fold() now always encodes
non-ASCII characters in headers if 
is false.

================================================================================

# Changelog - Library (Part 7)

: Synchronization of the  database is now no-op if
there was no modification since opening or last synchronization. The
directory file for a newly created empty  database is now
created immediately after opening instead of deferring this until
synchronizing or closing.

: Add  keyword-only parameter to
sqlite3.Connection.iterdump() for filtering database objects to
dump. Patch by Mariusz Felisiak.

: Prohibit subclassing pure-Python datetime.timezone.
This is consistent with C-extension implementation. Patch by Mariusz
Felisiak.

: Add the  method for the iterator returned by
xml.etree.ElementTree.iterparse().

: Reduce the import time of  module by ~50%.
Patch by Daniel Hollas.

: Make the result of termios.tcgetattr() reproducible on
Alpine Linux. Previously it could leave a random garbage in some fields.

: Make threading.Lock a real class, not a factory
function. Add  to _thread.lock type.

: Add dbm.sqlite3 as a backend to , and make it
the new default  backend. Patch by Raymond Hettinger and Erlend
E. Aasland.

: Revert changes in  which made calls of
TestResult methods startTest() and stopTest() unbalanced.

================================================================================

# Changelog - Library (Part 8)

: Ignore an  in
asyncio.BaseEventLoop.create_server() when IPv6 is available but the
interface cannot actually support it.

: _DummyThread entries in threading._active are now
automatically removed when the related thread dies.

: Dismiss the FileNotFound error in
ctypes.util.find_library() and just return  on Linux.

: Expose more platform specific constants in the 
module on Linux, macOS, FreeBSD and NetBSD.

: The tty.setcbreak() and new tty.cfmakecbreak() no
longer clears the terminal input ICRLF flag. This fixes a regression
introduced in 3.12 that no longer matched how OSes define cbreak mode in
their  manual pages.

: Remove type hints from Lib/asyncio/staggered.py. The
annotations in the 
project should be used instead.

: Avoid reference cycle in ElementTree.iterparse. The iterator
returned by ElementTree.iterparse may hold on to a file descriptor.
The reference cycle prevented prompt clean-up of the file descriptor if
the returned iterator was not exhausted.

: The signature for the __replace__ method on
dataclasses now has the first argument named , rather than
.

================================================================================

# Changelog - Library (Part 9)

:  raised when run a subprocess now only has
 attribute set to  if the error was caused by a failed
attempt to change the current directory.

: Enum: correctly handle tuple subclasses in custom .

: Support deprecation of options, positional arguments and
subcommands in .

: Speed up dataclasses.asdict up to 1.35x.

: Fix a reference leak in
asyncio.selector_events.BaseSelectorEventLoop when SSL handshakes
fail. Patch contributed by Jamie Phan.

: Accept path-like objects as patterns
in pathlib.Path.glob() and .

: Ensure that a asyncio.Condition.notify() call does not
get lost if the awakened  is simultaneously cancelled or
encounters any other error.

: Fix the behavior of tag_unbind() methods of
tkinter.Text and tkinter.Canvas classes with three
arguments. Previously, widget.tag_unbind(tag,  
destroyed the current binding for , leaving  unbound,
and deleted the  command. Now it removes only  from the
binding for , keeping other commands, and deletes the 
command. It leaves  unbound only if  was the last bound
command.

================================================================================

# Changelog - Library (Part 10)

: Fix rendering class methods, bound methods, method and function
aliases in . Class methods no longer have âmethod of
builtins.type instanceâ note. Corresponding notes are now added for class
and unbound methods. Method and function aliases now have references to
the module or the class where the origin was defined if it differs from
the current. Bound methods are now listed in the static methods section.
Methods of builtin classes are now supported as well as methods of Python
classes.

: Add more validation checks in the csv.Dialect
constructor. ValueError is now raised if the same character is used
in different roles.

: Fix support of QUOTE_NOTNULL and
QUOTE_STRINGS in csv.reader().

: Speed up pathlib.Path.walk() by using
os.DirEntry.path where possible.

: When replace() method is called on a subclass of datetime, date
or time, properly call derived constructor. Previously, only the base
classâs constructor was called.

Also, make sure to pass non-zero fold values when creating subclasses in
various methods. Previously, fold was silently ignored.

: Speed-up datetime.datetime.replace(),
datetime.date.replace() and datetime.time.replace().

================================================================================

# Changelog - Library (Part 11)

: Set breakpoint on the first executable line of the function,
instead of the line of function definition when the user do  
using

: Improve handling of pdb convenience variables to avoid
replacing string contents.

: Add option to calendar module CLI to specify the weekday to
start each week. Patch by Steven Ward.

: Recognise image/webp as a standard format in the
 module.

: Fix the  widget method wm_attributes(). It
now accepts the attribute name without the minus prefix to get window
attributes and allows to specify attributes and values to set as keyword
arguments. Add new optional keyword argument return_python_dict: calling
w.wm_attributes(return_python_dict=True) returns the attributes as a
dict instead of a tuple. Calling w.wm_attributes() now returns a tuple
instead of string if wantobjects was set to 0.

: Many functions now emit a warning if a boolean value is passed
as a file descriptor argument.

: Added check for file modification during debugging with

: Show the Tcl/Tk patchlevel (rather than version) in
tkinter._test().

: Fix race condition in . Instead of checking if a
directory exists and creating it, directly call os.makedirs() with
the kwarg exist_ok=True.

================================================================================

# Changelog - Library (Part 12)

: Set unixfrom envelope in mailbox.mbox and
mailbox.MMDF.

: Fix stacklevel in InvalidTZPathWarning during
 module import.

: Allow ctypes.Union to be nested in
ctypes.Structure when the system endianness is the opposite of
the classes.

: Fix null pointer dereference in
lzma._decode_filter_properties() due to improper handling of BCJ
filters with properties of zero length. Patch by Radislav Chugunov.

: Add queue.Queue termination with
shutdown().

: Changed argparse flag options formatting to remove redundancy.

: Add POSIX pseudo-terminal functions os.posix_openpt(),
os.grantpt(), os.unlockpt(), and os.ptsname().

: When  is called from a foreign thread (aka
_DummyThread), the type of the thread in a child process is changed to
_MainThread. Also changed its name and daemonic status, it can be now
joined.

: Add os.path.isreserved(), which identifies reserved
pathnames such as âNULâ, âAUXâ and âCONâ. This function is only available
on Windows.

Deprecate pathlib.PurePath.is_reserved().

: The  functions isgeneratorfunction,
iscoroutinefunction, isasyncgenfunction now support
functools.partialmethod wrapped functions the same way they support
functools.partial.

================================================================================

# Changelog - Documentation

List:
: Fix an example for LoggerAdapter in the
Logging Cookbook.
: Move the  module docstring to the  module
instead of reexporting it from the internal  module, and
remove  from csv.__all__.
Move csv.__version__ to the  module instead of
reexporting it from the internal  module, and remove
__version__ from csv.__all__.

: Fix an example for LoggerAdapter in the
Logging Cookbook.

: Move the  module docstring to the  module
instead of reexporting it from the internal  module, and
remove  from csv.__all__.

Move csv.__version__ to the  module instead of
reexporting it from the internal  module, and remove
__version__ from csv.__all__.

================================================================================

# Changelog - Tests

List:
: Added test exclusions required to run the test suite on iOS.
: Fix
test.test_zipfile.test_core.TestWithDirectory.test_create_directory_with_write
test in AIX by doing a bitwise AND of 0xFFFF on mode , so that it will be
in sync with zinfo.external_attr

: Added test exclusions required to run the test suite on iOS.

: Fix
test.test_zipfile.test_core.TestWithDirectory.test_create_directory_with_write
test in AIX by doing a bitwise AND of 0xFFFF on mode , so that it will be
in sync with zinfo.external_attr

================================================================================

# Changelog - Build

List:
: Avoid vendoring vcruntime140_threads.dll when building with
Visual Studio 2022 version 17.8.
: Promote WASI to a tier 2 platform and drop Emscripten from tier
3 in configure.ac.
: configure and Makefile were refactored to accommodate framework
builds on Apple platforms other than macOS.
: Add getgrent() as a prerequisite for building the
 module.

: Avoid vendoring vcruntime140_threads.dll when building with
Visual Studio 2022 version 17.8.

: Promote WASI to a tier 2 platform and drop Emscripten from tier
3 in configure.ac.

: configure and Makefile were refactored to accommodate framework
builds on Apple platforms other than macOS.

: Add getgrent() as a prerequisite for building the
 module.

================================================================================

# Changelog - Windows

List:
: Fixes  launcher failing when run as users without
user profiles.
: Update Windows installer to use SQLite 3.45.1.
: Update Windows build to use OpenSSL 3.0.13.
: Update Windows builds to use zlib v1.3.1.
: The  launcher will no longer attempt to run the
Microsoft Store redirector when launching a script containing a
/usr/bin/env shebang
: Adds free-threaded binaries to Windows installer as an optional
component.
: Allows multiprocessing to create pools of greater than 62
processes.

: Fixes  launcher failing when run as users without
user profiles.

: Update Windows installer to use SQLite 3.45.1.

: Update Windows build to use OpenSSL 3.0.13.

: Update Windows builds to use zlib v1.3.1.

: The  launcher will no longer attempt to run the
Microsoft Store redirector when launching a script containing a
/usr/bin/env shebang

: Adds free-threaded binaries to Windows installer as an optional
component.

: Allows multiprocessing to create pools of greater than 62
processes.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to use SQLite 3.45.1.
: Update macOS installer to use OpenSSL 3.0.13.
: Add Mach-O linkage support for platform.architecture().
: On macOS the result of os.statvfs and os.fstatvfs now
correctly report the size of very large disks, in previous versions the
reported number of blocks was wrong for disks with at least 2**32 blocks.

: Update macOS installer to use SQLite 3.45.1.

: Update macOS installer to use OpenSSL 3.0.13.

: Add Mach-O linkage support for platform.architecture().

: On macOS the result of os.statvfs and os.fstatvfs now
correctly report the size of very large disks, in previous versions the
reported number of blocks was wrong for disks with at least 2**32 blocks.

================================================================================

# Changelog - IDLE

List:
: In idlelib code, stop redefining built-ins âdictâ and âobjectâ.
: Revise IDLE bindings so that events from mouse button 4/5 on
non-X11 windowing systems (i.e. Win32 and Aqua) are not mistaken for
scrolling.

: In idlelib code, stop redefining built-ins âdictâ and âobjectâ.

: Revise IDLE bindings so that events from mouse button 4/5 on
non-X11 windowing systems (i.e. Win32 and Aqua) are not mistaken for
scrolling.

================================================================================

# Changelog - Tools/Demos

List:
: Donât set  when building for WASI.
: Update GitHub CI workflows to use OpenSSL 3.0.13 and
multissltests to use 1.1.1w, 3.0.13, 3.1.5, and 3.2.1.
: Fix a bug in Argument Clinic that generated incorrect code for
methods with no parameters that use the METH_METHOD | METH_FASTCALL
| METH_KEYWORDS calling
convention. Only the positional parameter count was checked; any keyword
argument passed would be silently accepted.

: Donât set  when building for WASI.

: Update GitHub CI workflows to use OpenSSL 3.0.13 and
multissltests to use 1.1.1w, 3.0.13, 3.1.5, and 3.2.1.

: Fix a bug in Argument Clinic that generated incorrect code for
methods with no parameters that use the METH_METHOD | METH_FASTCALL
| METH_KEYWORDS calling
convention. Only the positional parameter count was checked; any keyword
argument passed would be silently accepted.

================================================================================

# Changelog - C API (Part 1)

List:
: Adds PyLong_AsNativeBytes(),
PyLong_FromNativeBytes() and
PyLong_FromUnsignedNativeBytes() functions.
: PyBuffer_FillInfo() now raises a SystemError if
called with PyBUF_READ or PyBUF_WRITE as flags.
These flags should only be used with the PyMemoryView_* C API.
: PyObject_GetBuffer() now raises a SystemError if
called with PyBUF_READ or PyBUF_WRITE as flags.
These flags should only be used with the PyMemoryView_* C API.
: Add PyCFunctionFast and PyCFunctionFastWithKeywords
typedefs (identical to the existing _PyCFunctionFast and
_PyCFunctionFastWithKeywords typedefs, just without a leading 
prefix).
: Add PyList_GetItemRef(), which is similar to
PyList_GetItem() but returns a strong reference instead of
a borrowed reference.
: Add PyTime C API:

 type.
PyTime_MIN and PyTime_MAX constants.
PyTime_AsSecondsDouble(),
PyTime_Monotonic(), PyTime_PerfCounter(), and
PyTime_Time() functions.

Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 2)

: Add PyDict_SetDefaultRef(): insert a key and value into
a dictionary if the key is not already present. This is similar to
dict.setdefault(), but returns an integer value indicating if the
key was already present. It is also similar to
PyDict_SetDefault(), but returns a strong reference instead of a
borrowed reference.

: Adds PyLong_AsNativeBytes(),
PyLong_FromNativeBytes() and
PyLong_FromUnsignedNativeBytes() functions.

: PyBuffer_FillInfo() now raises a SystemError if
called with PyBUF_READ or PyBUF_WRITE as flags.
These flags should only be used with the PyMemoryView_* C API.

: PyObject_GetBuffer() now raises a SystemError if
called with PyBUF_READ or PyBUF_WRITE as flags.
These flags should only be used with the PyMemoryView_* C API.

: Add PyCFunctionFast and PyCFunctionFastWithKeywords
typedefs (identical to the existing _PyCFunctionFast and
_PyCFunctionFastWithKeywords typedefs, just without a leading 
prefix).

: Add PyList_GetItemRef(), which is similar to
PyList_GetItem() but returns a strong reference instead of
a borrowed reference.

List:
type.
PyTime_MIN and PyTime_MAX constants.
PyTime_AsSecondsDouble(),
PyTime_Monotonic(), PyTime_PerfCounter(), and
PyTime_Time() functions.

================================================================================

# Changelog - C API (Part 3)

PyTime_MIN and PyTime_MAX constants.

PyTime_AsSecondsDouble(),
PyTime_Monotonic(), PyTime_PerfCounter(), and
PyTime_Time() functions.

Patch by Victor Stinner.

: Add PyDict_SetDefaultRef(): insert a key and value into
a dictionary if the key is not already present. This is similar to
dict.setdefault(), but returns an integer value indicating if the
key was already present. It is also similar to
PyDict_SetDefault(), but returns a strong reference instead of a
borrowed reference.

================================================================================

# Changelog - Security

List:
: Skip  files with names starting with a dot or hidden
file attribute.
: Created a Software Bill-of-Materials document and tooling for
tracking dependencies.

: Skip  files with names starting with a dot or hidden
file attribute.

: Created a Software Bill-of-Materials document and tooling for
tracking dependencies.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Compiler duplicates basic blocks that have an eval breaker
check, no line number, and multiple predecessors.
: A jump leaving an exception handler back to normal code no
longer checks the eval breaker.
: Set the C recursion limit to 4000 on Windows, and 10000 on
Linux/OSX. This seems to be near the sweet spot to maintain safety, but
not compromise backwards compatibility.
: Add typed stack effects to the interpreter DSL, along with
various instruction annotations.
: On Windows, file descriptors wrapping Windows handles are now
created non inheritable by default (). Patch by Zackery Spytz
and Victor Stinner.
: Guarantee that all executors make progress. This then
guarantees that tier 2 execution always makes progress.
: Fix an issue where the finalizer of PyAsyncGenASend objects
might not be called if they were allocated from a free list.
: Compiler changed so that synthetic jumps which are not at loop
end no longer check the eval breaker.
: Fix a regression in the  module that was causing
it to incorrectly identify incomplete f-strings. Patch by Pablo Galindo
: Check for a valid tp_version_tag before performing bytecode
specializations that rely on this value being usable.
: Changed error message in case of no âinâ keyword after âforâ in
list comprehensions
: Fix an issue that caused important instruction pointer updates
to be optimized out of tier two traces.
: Fixed bug where a redundant NOP is not removed, causing an
assertion to fail in the compiler in debug mode.
: Fix an error that was causing the parser to try to overwrite
existing errors and crashing in the process. Patch by Pablo Galindo
: No longer issue spurious  events for optimized
calls to classes.
: Fix segfault in the compiler on with statement with 19 context
managers.
: Improve  error messages.
: Only use  in the exception stack to indicate an
exception was handled. Patch by Carey Metcalfe.
: Increase the C recursion limit by a factor of 3 for non-debug
builds, except for webassembly and s390 platforms which are unchanged.
This mitigates some regressions in 3.12 with deep recursion mixing builtin
(C) and Python code.
: Fixed bug where a redundant NOP is not removed, causing an
assertion to fail in the compiler in debug mode.
: Use per AST-parser state rather than global state to track
recursion depth within the AST parser to prevent potential race condition
due to simultaneous parsing.
The issue primarily showed up in 3.11 by multithreaded users of
ast.parse().  In 3.12 a change to when garbage collection can be
triggered prevented the race condition from occurring.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Change the API and contract of _PyExecutorObject to return
the next_instr pointer, instead of the frame, and to always execute at
least one instruction.
: Optimize builtin functions  and .
: Correctly compute end column offsets for multiline tokens in
the  module. Patch by Pablo Galindo
: Fix None.__ne__(None) returning NotImplemented instead
of .
:  now raises a ValueError when output on the
terminal if the prompt contains embedded null characters instead of
silently truncating it.
: Fix SystemError in the  statement and in
__reduce__() methods of builtin types when __builtins__ is not a
dict.
: Use color to highlight error locations in tracebacks. Patch by
Pablo Galindo
: Fixes a bug where a bytearray object could be cleared while
iterating over an argument in the bytearray.join() method that could
result in reading memory after it was freed.
: Do not clear unexpected errors during formatting error messages
for ImportError and AttributeError for modules.
: Workaround a bug in Appleâs macOS platform zlib library where
zlib.crc32() and binascii.crc32() could produce incorrect
results on multi-gigabyte inputs. Including when using  on
zips containing large data.
: Provide a better error message when accessing invalid attributes
on partially initialized modules. The origin of the module being accessed
is now included in the message to help with the common issue of shadowing
other modules.
: Add check for the type of  returned from calling
the type  in   .
: Change coro.cr_frame/gen.gi_frame to return  after the
coroutine/generator has been closed. This fixes a bug where
getcoroutinestate() and getgeneratorstate()
return the wrong state for a closed coroutine/generator.
: Fix an error that was causing the parser to try to overwrite
tokenizer errors. Patch by pablo Galindo
: Fix error positions for decoded strings with backwards tokenize
errors. Patch by Pablo Galindo
: Make code generated for an empty f-string identical to the code
of an empty normal string.
: Avoid undefined behaviour when using the perf trampolines by
not freeing the code arenas until shutdown. Patch by Pablo Galindo
: The Tier 2 translator now tracks the confidence level for
staying âon traceâ (i.e. not exiting back to the Tier 1 interpreter) for
branch instructions based on the number of bits set in the branch
âcounterâ. Trace translation ends when the confidence drops below 1/3rd.
:
PyComplex_RealAsDouble()/PyComplex_ImagAsDouble() now
tries to convert an object to a  instance using its
__complex__() method before falling back to the __float__()
method. Patch by Sergey B Kirpichev.
: Fix UnicodeEncodeError when email.message.get_payload()
reads a message with a Unicode surrogate character and the message content
is not well-formed for surrogateescape encoding. Patch by Sidney
Markowitz.
: Use the objectâs actual class name in
_io.FileIO.__repr__(), _io._WindowsConsoleIO() and
_io.TextIOWrapper.__repr__(), to make these methods subclass
friendly.
: Remove LibreSSL workarounds as per .
: Added sys._is_interned().

================================================================================

# Changelog - Core and Builtins (Part 3)

: Compiler duplicates basic blocks that have an eval breaker
check, no line number, and multiple predecessors.

: A jump leaving an exception handler back to normal code no
longer checks the eval breaker.

: Set the C recursion limit to 4000 on Windows, and 10000 on
Linux/OSX. This seems to be near the sweet spot to maintain safety, but
not compromise backwards compatibility.

: Add typed stack effects to the interpreter DSL, along with
various instruction annotations.

: On Windows, file descriptors wrapping Windows handles are now
created non inheritable by default (). Patch by Zackery Spytz
and Victor Stinner.

: Guarantee that all executors make progress. This then
guarantees that tier 2 execution always makes progress.

: Fix an issue where the finalizer of PyAsyncGenASend objects
might not be called if they were allocated from a free list.

: Compiler changed so that synthetic jumps which are not at loop
end no longer check the eval breaker.

: Fix a regression in the  module that was causing
it to incorrectly identify incomplete f-strings. Patch by Pablo Galindo

: Check for a valid tp_version_tag before performing bytecode
specializations that rely on this value being usable.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Changed error message in case of no âinâ keyword after âforâ in
list comprehensions

: Fix an issue that caused important instruction pointer updates
to be optimized out of tier two traces.

: Fixed bug where a redundant NOP is not removed, causing an
assertion to fail in the compiler in debug mode.

: Fix an error that was causing the parser to try to overwrite
existing errors and crashing in the process. Patch by Pablo Galindo

: No longer issue spurious  events for optimized
calls to classes.

: Fix segfault in the compiler on with statement with 19 context
managers.

: Improve  error messages.

: Only use  in the exception stack to indicate an
exception was handled. Patch by Carey Metcalfe.

: Increase the C recursion limit by a factor of 3 for non-debug
builds, except for webassembly and s390 platforms which are unchanged.
This mitigates some regressions in 3.12 with deep recursion mixing builtin
(C) and Python code.

: Fixed bug where a redundant NOP is not removed, causing an
assertion to fail in the compiler in debug mode.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Use per AST-parser state rather than global state to track
recursion depth within the AST parser to prevent potential race condition
due to simultaneous parsing.

The issue primarily showed up in 3.11 by multithreaded users of
ast.parse().  In 3.12 a change to when garbage collection can be
triggered prevented the race condition from occurring.

: Change the API and contract of _PyExecutorObject to return
the next_instr pointer, instead of the frame, and to always execute at
least one instruction.

: Optimize builtin functions  and .

: Correctly compute end column offsets for multiline tokens in
the  module. Patch by Pablo Galindo

: Fix None.__ne__(None) returning NotImplemented instead
of .

:  now raises a ValueError when output on the
terminal if the prompt contains embedded null characters instead of
silently truncating it.

: Fix SystemError in the  statement and in
__reduce__() methods of builtin types when __builtins__ is not a
dict.

: Use color to highlight error locations in tracebacks. Patch by
Pablo Galindo

: Fixes a bug where a bytearray object could be cleared while
iterating over an argument in the bytearray.join() method that could
result in reading memory after it was freed.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Do not clear unexpected errors during formatting error messages
for ImportError and AttributeError for modules.

: Workaround a bug in Appleâs macOS platform zlib library where
zlib.crc32() and binascii.crc32() could produce incorrect
results on multi-gigabyte inputs. Including when using  on
zips containing large data.

: Provide a better error message when accessing invalid attributes
on partially initialized modules. The origin of the module being accessed
is now included in the message to help with the common issue of shadowing
other modules.

: Add check for the type of  returned from calling
the type  in   .

: Change coro.cr_frame/gen.gi_frame to return  after the
coroutine/generator has been closed. This fixes a bug where
getcoroutinestate() and getgeneratorstate()
return the wrong state for a closed coroutine/generator.

: Fix an error that was causing the parser to try to overwrite
tokenizer errors. Patch by pablo Galindo

: Fix error positions for decoded strings with backwards tokenize
errors. Patch by Pablo Galindo

: Make code generated for an empty f-string identical to the code
of an empty normal string.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Avoid undefined behaviour when using the perf trampolines by
not freeing the code arenas until shutdown. Patch by Pablo Galindo

: The Tier 2 translator now tracks the confidence level for
staying âon traceâ (i.e. not exiting back to the Tier 1 interpreter) for
branch instructions based on the number of bits set in the branch
âcounterâ. Trace translation ends when the confidence drops below 1/3rd.

:
PyComplex_RealAsDouble()/PyComplex_ImagAsDouble() now
tries to convert an object to a  instance using its
__complex__() method before falling back to the __float__()
method. Patch by Sergey B Kirpichev.

: Fix UnicodeEncodeError when email.message.get_payload()
reads a message with a Unicode surrogate character and the message content
is not well-formed for surrogateescape encoding. Patch by Sidney
Markowitz.

: Use the objectâs actual class name in
_io.FileIO.__repr__(), _io._WindowsConsoleIO() and
_io.TextIOWrapper.__repr__(), to make these methods subclass
friendly.

: Remove LibreSSL workarounds as per .

: Added sys._is_interned().

================================================================================

# Changelog - Library (Part 1)

List:
: Fix possible OverflowError in
socket.socket.sendfile() when pass  larger than 2 GiB on
32-bit platform.
:  now supports loading more deeply nested lists
in binary format.
: Fixed a bug in fractions.Fraction where an invalid
string using  in the decimals part creates a different error compared
to other invalid letters/characters. Patch by Jeremiah Gabriel Pascual.
: sqlite3.Connection.iterdump() now ensures that foreign
key support is disabled before dumping the database schema, if there is
any foreign key violation. Patch by Erlend E. Aasland and Mariusz
Felisiak.
: The zipfile.ZipInfo previously protected
._compresslevel attribute has been made public as .compress_level
with the old _compresslevel name remaining available as a property to
retain compatibility.
: Fix  method winfo_pathname() on 64-bit
Windows.
: Added mmap.MAP_NORESERVE, mmap.MAP_NOEXTEND,
mmap.MAP_HASSEMAPHORE, mmap.MAP_NOCACHE,
mmap.MAP_JIT, mmap.MAP_RESILIENT_CODESIGN,
mmap.MAP_RESILIENT_MEDIA, mmap.MAP_32BIT,
mmap.MAP_TRANSLATED_ALLOW_EXECUTE, mmap.MAP_UNIX03 and
mmap.MAP_TPRO. All of them are  flags on macOS.
: asyncio.TaskGroup() and asyncio.timeout() context
managers now handle CancelledError subclasses as well as
exact CancelledError.
: unittest runner: Donât exit 5 if tests were skipped. The
intention of exiting 5 was to detect issues where the test suite wasnât
discovered at all. If we skipped tests, it was correctly discovered.
: Insert TimeoutError in the context of the exception that
was raised during exiting an expired asyncio.timeout() block.
: Silence unraisable AttributeError when warnings are emitted
during Python finalization.
: Add  to importlib.resources (in order for the
code to comply with the documentation)
: asyncio.Condition.wait() now re-raises the same
CancelledError instance that may have caused it to be interrupted.
Fixed race condition in asyncio.Semaphore.acquire() when interrupted
with a CancelledError.
: Add CLOCK_MONOTONIC_RAW_APPROX and
CLOCK_UPTIME_RAW_APPROX to  on macOS. These are clocks
available on macOS 10.12 or later.
: Restore the ability for  to extractall from
zip files with a â/â directory entry in them as is commonly added to zips
by some wiki or bug tracker data exporters.
: Raise deprecation warnings from pathlib.PurePath and
not its private base class PurePathBase.
: Fix UnicodeEncodeError in  when re-fold
lines that contain unknown-8bit encoded part followed by non-unknown-8bit
encoded part.
: In asyncio.StreamReaderProtocol.connection_made(), there
is callback that logs an error if the task wrapping the âconnected
callbackâ fails. This callback would itself fail if the task was
cancelled. Prevent this by checking whether the task was cancelled first.
If so, close the transport but donât log an error.
: Add support for the allow_code argument in the 
module. Passing allow_code=False prevents serialization and
de-serialization of code objects which is incompatible between Python
versions.
: Fix resource warnings for unclosed files in  and
pickletools command line interfaces.
: Support loads  in plistlib.loads().
: Add default implementations of
pickle.Pickler.persistent_id() and
pickle.Unpickler.persistent_load() methods in the C implementation.
Calling super().persistent_id() and super().persistent_load() in
subclasses of the C implementation of pickle.Pickler and
pickle.Unpickler classes no longer causes infinite recursion.
: Indicate if there were no actual calls in unittest
assert_has_calls() failure.
: Increase the backlog for
multiprocessing.connection.Listener objects created by
multiprocessing.manager and multiprocessing.resource_sharer
to significantly reduce the risk of getting a connection refused error
when creating a multiprocessing.connection.Connection to them.
: Raise audit events from pathlib.Path and not its
private base class .
: Make sure that webbrowser.MacOSXOSAScript sends
webbrowser.open audit event.
: When a second reference to a string appears in the input to
, and the Python implementation is in use, we are guaranteed
that a single copy gets pickled and a single object is shared when
reloaded. Previously, in protocol 0, when a string contained certain
characters (e.g. newline) it resulted in duplicate objects.
: Fix multiprocessing logger for %(filename)s.
: Fix segfaults in the _elementtree module. Fix first
segfault during deallocation of _elementtree.XMLParser instances by
keeping strong reference to  module in module state for capsule
lifetime. Fix second segfault which happens in the same deallocation
process  by keeping strong reference to _elementtree module in
 structure for _elementtree module lifetime.
: Fix import of unittest.mock when CPython is built
without docstrings.
: Fix regression in Python 3.12 where 
classes that were not marked as runtime-checkable would be unnecessarily introspected,
potentially causing exceptions to be raised if the protocol had
problematic members. Patch by Alex Waygood.
: Add a new option aware_datetime in  to loads
or dumps aware datetime.
: Fix rendering tracebacks with exceptions with a broken
__getattr__
: Fix an AttributeError during asyncio SSL protocol aborts in
SSL-over-SSL scenarios.
: Update bundled pip to 23.3.2.
: Fixed tarfile list() method to show file type.
: asyncio.futures.Future.set_exception() now transforms
StopIteration into RuntimeError instead of hanging or other
misbehavior. Patch contributed by Jamie Phan.
: Speed up pathlib.Path.glob() by using
os.DirEntry.path where possible.
: Improve error message when a JSON array or object contains a
trailing comma. Patch by Carson Radtke.
: The subprocess module can now use the
os.posix_spawn() function with close_fds=True on platforms where
posix_spawn_file_actions_addclosefrom_np is available. Patch by Jakub
Kulik.
: Make http.client.HTTPResponse.read1 and
http.client.HTTPResponse.readline close IO after reading all data when
content length is known. Patch by Illia Volochii.
: Add support of os.fchmod() and a file descriptor in
os.chmod() on Windows.
: Fix shutil.copymode() and shutil.copystat() on
Windows. Previously they worked differently if  is a symbolic link:
they modified the permission bits of  itself rather than the file it
points to if follow_symlinks is true or  is not a symbolic link,
and did not modify the permission bits if follow_symlinks is false and
 is a symbolic link.
: os.posix_spawn() now accepts , which makes
the newly spawned process use the current process environment. Patch by
Jakub Kulik.
: Add a  option to  in the 
module.
: Detect line numbers of properties in doctests.
: Sync with importlib_metadata 7.0, including improved type
annotations, fixed issue with symlinked packages in
package_distributions, added EntryPoints.__repr__, introduced the
 script, added Distribution.origin property, and removed
deprecated EntryPoint access by numeric index (tuple behavior).
: Add support of os.lchmod() and the follow_symlinks
argument in os.chmod() on Windows. Note that the default value of
follow_symlinks in os.lchmod() is  on Windows.
: signal.signal() and signal.getsignal() no longer
call  on callable handlers. asyncio.run() and
asyncio.Runner.run() no longer call  on the task results.
Patch by Yilei Yang.
:  module functions add cache information to the
Instruction instance rather than creating fake
Instruction instances to represent the cache entries.
: Reduce overhead to connect sockets with 
SelectorEventLoop.
: Use closefrom() on Linux where available (e.g.
glibc-2.34), rather than only FreeBSD.
: Fix ctypes structs with array on PPC64LE platform by setting
MAX_STRUCT_SIZE to 64 in stgdict. Patch by Diego Russo.
: The statistics.geometric_mean() function now returns zero for
datasets containing a zero.  Formerly, it would raise an exception.
: Added , LOG_NETINFO,
LOG_REMOTEAUTH, LOG_INSTALL, , and
LOG_LAUNCHD tot the  module, all of them constants
on used on macOS.
: Fix  SubprocessTransport.close() not to throw
PermissionError when used with setuid executables.
: Add the following constants to the  module. These
values are present in macOS system headers: , ,
, , , CCAR_OFLOW, CCTS_OFLOW,
CDSR_OFLOW, CDTR_IFLOW, , CRTS_IFLOW, ,
, , , , NOKERNINFO, ,
, , .
: Fix an infinite recursion error in
tempfile.TemporaryDirectory() cleanup on Windows.
: shutil.rmtree() now only catches OSError exceptions.
Previously a symlink attack resistant version of shutil.rmtree() could
ignore or pass to the error handler arbitrary exception when invalid
arguments were provided.
: The use of del-safe symbols in subprocess was refactored to
allow for use in cross-platform build environments.
: Speed up pathlib.Path.absolute(). Patch by Barney Gale.
: Speedup issubclass() checks against simple
runtime-checkable  by around
6%. Patch by Alex Waygood.
: Speedup isinstance() checks by roughly 20% for
runtime-checkable  that only
have one callable member. Speedup issubclass() checks for these
protocols by roughly 10%. Patch by Alex Waygood.
: Remove deprecation error on passing  to
shutil.rmtree().
: Add kwdefaults parameter to types.FunctionType to
set default keyword argument values.
: Ensure  parameter is passed to event loop in
asyncio.create_task().
: Fix a caching bug relating to typing.Annotated.
Annotated[str,  is no longer identical to Annotated[str, .
: Fixed a performance regression in 3.12âs subprocess on
Linux where it would no longer use the fast-path  system call
when it could have due to a logic bug, instead falling back to the safe
but slower .
Also fixed a second 3.12.0 potential security bug.  If a value of
extra_groups=[] was passed to subprocess.Popen or related APIs,
the underlying setgroups(0,  system call to clear the groups list
would not be made in the child process prior to .
This was identified via code inspection in the process of fixing the first
bug.

================================================================================

# Changelog - Library (Part 2)

: Fix ctypes structs with array on Arm platform by setting
MAX_STRUCT_SIZE to 32 in stgdict. Patch by Diego Russo.
: Fix a crash in socket.if_indextoname() with specific value
(UINT_MAX). Fix an integer overflow in socket.if_indextoname() on
64-bit non-Windows platforms.
: Fix a spurious RuntimeWarning when executing the
 module.
: Update the bundled copy of pip to version 23.3.1.
: Add readline.backend for the backend readline uses
( or )
: [Enum] Make , EnumDict.member_names,
EnumType._add_alias_ and EnumType._add_value_alias_ public.
: Fix edge cases that could cause a key to be present in both the
__required_keys__ and __optional_keys__ attributes of a
typing.TypedDict. Patch by Jelle Zijlstra.
: Add keep_alive keyword parameter for
AbstractEventLoop.create_server() and
BaseEventLoop.create_server().
: Added support for TLS-PSK (pre-shared key) mode to the
 module.
: Fix regression in Python 3.12 where calling  on a
module that had been imported using a custom  could fail
with AttributeError. Patch by Alex Waygood.
: Revert change to struct.Struct initialization that
broke some cases of subclassing.
: Optimize pathlib.PurePath.relative_to(). Patch by Alex
Waygood.
: Fix bug where comparison between instances of
 fails if one of them has  as its lineno.
: Speed up a small handful of  methods by removing
some temporary objects.
: Improve error message when trying to call issubclass()
against a typing.Protocol that has non-method members. Patch by
Randolf Scholz.
: Change  output to display no-lineno as âââ instead
of âNoneâ.
: Deprecate the  field of
traceback.TracebackException. Add exc_type_str to replace it.
: Add extra tests for random.binomialvariate()
: Fix a crash in  when imported from a sub
interpreter. Patch by Anthony Shaw
: Slightly improve the import time of the  module by
deferring some imports. Patch by Barney Gale.
: Change  output to display logical labels for jump
targets instead of offsets.
: Add Signature.format() to format signatures to string
with extra options. And use it in  to render more readable
signatures that have new lines between parameters.
: Make readline.set_completer_delims() work with libedit
: Display multiple lines with  when errors span
multiple lines.
: When creating a typing.NamedTuple class, ensure
__set_name__() is called on all objects that define
__set_name__ and exist in the values of the NamedTuple classâs
class dictionary. Patch by Alex Waygood.
: Add support of the âvsapiâ element type in
tkinter.ttk.Style.element_create().
: Named tupleâs methods _replace() and __replace__() now
raise TypeError instead of ValueError for invalid keyword arguments.
: Do not mangle sys.path[0] in  if safe_path is set
: Fix a regression caused by a fix to  whereby you
couldnât configure a QueueHandler without specifying handlers.
: Fix the behavior of  widgetâs  method
with two arguments. Previously, widget.unbind(sequence, 
destroyed the current binding for , leaving  unbound,
and deleted the  command. Now it removes only  from the
binding for , keeping other commands, and deletes the 
command. It leaves  unbound only if  was the last bound
command.
: Implement basic formatting support (minimum width, alignment,
fill) for fractions.Fraction.
: Fix crash during garbage collection of the io.BytesIO
buffer object.
: Redirect the output of  command of  to
the same channel as the debugger. Add tests and improve docs.
: email.utils.getaddresses() and
email.utils.parseaddr() now return   2-tuples in more
situations where invalid email addresses are encountered instead of
potentially inaccurate values. Add optional  parameter to these
two functions: use strict=False to get the old behavior, accept
malformed inputs. getattr(email.utils, 'supports_strict_parsing',
 can be use to check if the  parameter is available. Patch
by Thomas Dwyer and Victor Stinner to improve the CVE 2023-27043 fix.
: cmd.Cmd.do_help() now cleans docstrings with
inspect.cleandoc() before writing them. Patch by Filip Åapkiewicz.
: Add  parameter to
multiprocessing.shared_memory.SharedMemory that allows using
shared memory blocks without having to register with the POSIX resource
tracker that automatically releases them upon process exit.
: Add private pathlib._PurePathBase class: a base class for
pathlib.PurePath that omits certain magic methods. It may be made
public (along with ) in future.
: Protect  from âquoted-overlapâ zipbomb. It now
raises BadZipFile when try to read an entry that overlaps with other entry
or central directory.
: Fix possible reference leaks and crash when re-enter the
__next__() method of itertools.pairwise.
: Small (10 - 20%) and trivial performance improvement of
urllib.request.getproxies_environment(), typically useful when there
are many environment variables to go over.
: Add follow_symlinks keyword-only argument to
pathlib.Path.owner() and , defaulting to
.
: Support tab completion in  for .
: runpy.run_path() now decodes path-like objects, making
sure __file__ and sys.argv[0] of the module being run are always strings.
: Add warnings.deprecated(), a decorator to mark deprecated
functions to static type checkers and to warn on usage of deprecated
classes and functions. See . Patch by Jelle Zijlstra.
: Make hardcoded python name, a configurable parameter so that
different implementations of python can override it instead of making huge
diffs in sysconfig.py
: mailbox.MH now supports folders that do not contain a
.mh_sequences file (e.g. Claws Mail IMAP-cache folders). Patch by
Serhiy Storchaka.
: Renamed  to PatternError for clarity, and
kept  for backward compatibility. Patch by Matthias
Bussonnier and Adam Chhina.
: Fix a bug in tempfile.TemporaryDirectory cleanup, which
now no longer dereferences symlinks when working around file system
permission errors.
: On Windows, tempfile.TemporaryDirectory previously masked a
PermissionError with NotADirectoryError during directory cleanup.
It now correctly raises PermissionError if errors are not ignored.
Patch by Andrei Kulakov and Ken Jin.
: getpass.getuser() now raises  for all
failures rather than ImportError on systems lacking the 
module or  if the password database is empty.
:  now has a  parameter on Unix; if it
is , the file descriptor specified by  will not be
duplicated.
: The shutil.rmtree() function now ignores errors when
calling os.close() when ignore_errors is , and
os.close() no longer retried after error.
: io.TextIOWrapper now correctly handles the decoding
buffer after  and .
: shutil.move() now moves a symlink into a directory when
that directory is the target of the symlink.  This provides the same
behavior as the mv shell command.  The previous behavior raised an
exception.  Patch by Jeffrey Kintscher.
: Fixed memory leaks of pickle.Pickler and
pickle.Unpickler involving cyclic references via the internal
memo mapping.
: The pydoc.ispackage() function has been deprecated.
: The ssl.SSLSocket.recv_into() method no longer requires
the  argument to implement  and supports buffers with
arbitrary item size.
: warnings.filterwarnings() and
warnings.simplefilter() now raise appropriate exceptions instead of
AssertionError. Patch contributed by RÃ©mi Lapeyre.
: Fixed a race condition in shutil.rmtree() in which
directory entries removed by another process or thread while
shutil.rmtree() is running can cause it to raise FileNotFoundError.
Patch by Jeffrey Kintscher.
: Fix some error messages for invalid ISO format string
combinations in strptime() that referred to directives not contained
in the format string. Patch by Gordon P. Hemsley.
: Fixed a class inheritance issue that can cause segfaults when
deriving two or more levels of subclasses from a base class of Structure
or Union.
: Add a new PYTHON_HISTORY environment variable to set
the location of a .python_history file.
: mailbox.Maildir now ignores files with a leading dot.

================================================================================

# Changelog - Library (Part 3)

: Fix possible OverflowError in
socket.socket.sendfile() when pass  larger than 2 GiB on
32-bit platform.

:  now supports loading more deeply nested lists
in binary format.

: Fixed a bug in fractions.Fraction where an invalid
string using  in the decimals part creates a different error compared
to other invalid letters/characters. Patch by Jeremiah Gabriel Pascual.

: sqlite3.Connection.iterdump() now ensures that foreign
key support is disabled before dumping the database schema, if there is
any foreign key violation. Patch by Erlend E. Aasland and Mariusz
Felisiak.

: The zipfile.ZipInfo previously protected
._compresslevel attribute has been made public as .compress_level
with the old _compresslevel name remaining available as a property to
retain compatibility.

: Fix  method winfo_pathname() on 64-bit
Windows.

: Added mmap.MAP_NORESERVE, mmap.MAP_NOEXTEND,
mmap.MAP_HASSEMAPHORE, mmap.MAP_NOCACHE,
mmap.MAP_JIT, mmap.MAP_RESILIENT_CODESIGN,
mmap.MAP_RESILIENT_MEDIA, mmap.MAP_32BIT,
mmap.MAP_TRANSLATED_ALLOW_EXECUTE, mmap.MAP_UNIX03 and
mmap.MAP_TPRO. All of them are  flags on macOS.

================================================================================

# Changelog - Library (Part 4)

: asyncio.TaskGroup() and asyncio.timeout() context
managers now handle CancelledError subclasses as well as
exact CancelledError.

: unittest runner: Donât exit 5 if tests were skipped. The
intention of exiting 5 was to detect issues where the test suite wasnât
discovered at all. If we skipped tests, it was correctly discovered.

: Insert TimeoutError in the context of the exception that
was raised during exiting an expired asyncio.timeout() block.

: Silence unraisable AttributeError when warnings are emitted
during Python finalization.

: Add  to importlib.resources (in order for the
code to comply with the documentation)

: asyncio.Condition.wait() now re-raises the same
CancelledError instance that may have caused it to be interrupted.
Fixed race condition in asyncio.Semaphore.acquire() when interrupted
with a CancelledError.

: Add CLOCK_MONOTONIC_RAW_APPROX and
CLOCK_UPTIME_RAW_APPROX to  on macOS. These are clocks
available on macOS 10.12 or later.

: Restore the ability for  to extractall from
zip files with a â/â directory entry in them as is commonly added to zips
by some wiki or bug tracker data exporters.

================================================================================

# Changelog - Library (Part 5)

: Raise deprecation warnings from pathlib.PurePath and
not its private base class PurePathBase.

: Fix UnicodeEncodeError in  when re-fold
lines that contain unknown-8bit encoded part followed by non-unknown-8bit
encoded part.

: In asyncio.StreamReaderProtocol.connection_made(), there
is callback that logs an error if the task wrapping the âconnected
callbackâ fails. This callback would itself fail if the task was
cancelled. Prevent this by checking whether the task was cancelled first.
If so, close the transport but donât log an error.

: Add support for the allow_code argument in the 
module. Passing allow_code=False prevents serialization and
de-serialization of code objects which is incompatible between Python
versions.

: Fix resource warnings for unclosed files in  and
pickletools command line interfaces.

: Support loads  in plistlib.loads().

: Add default implementations of
pickle.Pickler.persistent_id() and
pickle.Unpickler.persistent_load() methods in the C implementation.
Calling super().persistent_id() and super().persistent_load() in
subclasses of the C implementation of pickle.Pickler and
pickle.Unpickler classes no longer causes infinite recursion.

================================================================================

# Changelog - Library (Part 6)

: Indicate if there were no actual calls in unittest
assert_has_calls() failure.

: Increase the backlog for
multiprocessing.connection.Listener objects created by
multiprocessing.manager and multiprocessing.resource_sharer
to significantly reduce the risk of getting a connection refused error
when creating a multiprocessing.connection.Connection to them.

: Raise audit events from pathlib.Path and not its
private base class .

: Make sure that webbrowser.MacOSXOSAScript sends
webbrowser.open audit event.

: When a second reference to a string appears in the input to
, and the Python implementation is in use, we are guaranteed
that a single copy gets pickled and a single object is shared when
reloaded. Previously, in protocol 0, when a string contained certain
characters (e.g. newline) it resulted in duplicate objects.

: Fix multiprocessing logger for %(filename)s.

================================================================================

# Changelog - Library (Part 7)

: Fix segfaults in the _elementtree module. Fix first
segfault during deallocation of _elementtree.XMLParser instances by
keeping strong reference to  module in module state for capsule
lifetime. Fix second segfault which happens in the same deallocation
process  by keeping strong reference to _elementtree module in
 structure for _elementtree module lifetime.

: Fix import of unittest.mock when CPython is built
without docstrings.

: Fix regression in Python 3.12 where 
classes that were not marked as runtime-checkable would be unnecessarily introspected,
potentially causing exceptions to be raised if the protocol had
problematic members. Patch by Alex Waygood.

: Add a new option aware_datetime in  to loads
or dumps aware datetime.

: Fix rendering tracebacks with exceptions with a broken
__getattr__

: Fix an AttributeError during asyncio SSL protocol aborts in
SSL-over-SSL scenarios.

: Update bundled pip to 23.3.2.

: Fixed tarfile list() method to show file type.

: asyncio.futures.Future.set_exception() now transforms
StopIteration into RuntimeError instead of hanging or other
misbehavior. Patch contributed by Jamie Phan.

================================================================================

# Changelog - Library (Part 8)

: Speed up pathlib.Path.glob() by using
os.DirEntry.path where possible.

: Improve error message when a JSON array or object contains a
trailing comma. Patch by Carson Radtke.

: The subprocess module can now use the
os.posix_spawn() function with close_fds=True on platforms where
posix_spawn_file_actions_addclosefrom_np is available. Patch by Jakub
Kulik.

: Make http.client.HTTPResponse.read1 and
http.client.HTTPResponse.readline close IO after reading all data when
content length is known. Patch by Illia Volochii.

: Add support of os.fchmod() and a file descriptor in
os.chmod() on Windows.

: Fix shutil.copymode() and shutil.copystat() on
Windows. Previously they worked differently if  is a symbolic link:
they modified the permission bits of  itself rather than the file it
points to if follow_symlinks is true or  is not a symbolic link,
and did not modify the permission bits if follow_symlinks is false and
 is a symbolic link.

: os.posix_spawn() now accepts , which makes
the newly spawned process use the current process environment. Patch by
Jakub Kulik.

: Add a  option to  in the 
module.

: Detect line numbers of properties in doctests.

================================================================================

# Changelog - Library (Part 9)

: Sync with importlib_metadata 7.0, including improved type
annotations, fixed issue with symlinked packages in
package_distributions, added EntryPoints.__repr__, introduced the
 script, added Distribution.origin property, and removed
deprecated EntryPoint access by numeric index (tuple behavior).

: Add support of os.lchmod() and the follow_symlinks
argument in os.chmod() on Windows. Note that the default value of
follow_symlinks in os.lchmod() is  on Windows.

: signal.signal() and signal.getsignal() no longer
call  on callable handlers. asyncio.run() and
asyncio.Runner.run() no longer call  on the task results.
Patch by Yilei Yang.

:  module functions add cache information to the
Instruction instance rather than creating fake
Instruction instances to represent the cache entries.

: Reduce overhead to connect sockets with 
SelectorEventLoop.

: Use closefrom() on Linux where available (e.g.
glibc-2.34), rather than only FreeBSD.

: Fix ctypes structs with array on PPC64LE platform by setting
MAX_STRUCT_SIZE to 64 in stgdict. Patch by Diego Russo.

: The statistics.geometric_mean() function now returns zero for
datasets containing a zero.  Formerly, it would raise an exception.

================================================================================

# Changelog - Library (Part 10)

: Added , LOG_NETINFO,
LOG_REMOTEAUTH, LOG_INSTALL, , and
LOG_LAUNCHD tot the  module, all of them constants
on used on macOS.

: Fix  SubprocessTransport.close() not to throw
PermissionError when used with setuid executables.

: Add the following constants to the  module. These
values are present in macOS system headers: , ,
, , , CCAR_OFLOW, CCTS_OFLOW,
CDSR_OFLOW, CDTR_IFLOW, , CRTS_IFLOW, ,
, , , , NOKERNINFO, ,
, , .

: Fix an infinite recursion error in
tempfile.TemporaryDirectory() cleanup on Windows.

: shutil.rmtree() now only catches OSError exceptions.
Previously a symlink attack resistant version of shutil.rmtree() could
ignore or pass to the error handler arbitrary exception when invalid
arguments were provided.

: The use of del-safe symbols in subprocess was refactored to
allow for use in cross-platform build environments.

: Speed up pathlib.Path.absolute(). Patch by Barney Gale.

: Speedup issubclass() checks against simple
runtime-checkable  by around
6%. Patch by Alex Waygood.

: Speedup isinstance() checks by roughly 20% for
runtime-checkable  that only
have one callable member. Speedup issubclass() checks for these
protocols by roughly 10%. Patch by Alex Waygood.

================================================================================

# Changelog - Library (Part 11)

: Remove deprecation error on passing  to
shutil.rmtree().

: Add kwdefaults parameter to types.FunctionType to
set default keyword argument values.

: Ensure  parameter is passed to event loop in
asyncio.create_task().

: Fix a caching bug relating to typing.Annotated.
Annotated[str,  is no longer identical to Annotated[str, .

: Fixed a performance regression in 3.12âs subprocess on
Linux where it would no longer use the fast-path  system call
when it could have due to a logic bug, instead falling back to the safe
but slower .

Also fixed a second 3.12.0 potential security bug.  If a value of
extra_groups=[] was passed to subprocess.Popen or related APIs,
the underlying setgroups(0,  system call to clear the groups list
would not be made in the child process prior to .

This was identified via code inspection in the process of fixing the first
bug.

: Fix ctypes structs with array on Arm platform by setting
MAX_STRUCT_SIZE to 32 in stgdict. Patch by Diego Russo.

: Fix a crash in socket.if_indextoname() with specific value
(UINT_MAX). Fix an integer overflow in socket.if_indextoname() on
64-bit non-Windows platforms.

: Fix a spurious RuntimeWarning when executing the
 module.

================================================================================

# Changelog - Library (Part 12)

: Update the bundled copy of pip to version 23.3.1.

: Add readline.backend for the backend readline uses
( or )

: [Enum] Make , EnumDict.member_names,
EnumType._add_alias_ and EnumType._add_value_alias_ public.

: Fix edge cases that could cause a key to be present in both the
__required_keys__ and __optional_keys__ attributes of a
typing.TypedDict. Patch by Jelle Zijlstra.

: Add keep_alive keyword parameter for
AbstractEventLoop.create_server() and
BaseEventLoop.create_server().

: Added support for TLS-PSK (pre-shared key) mode to the
 module.

: Fix regression in Python 3.12 where calling  on a
module that had been imported using a custom  could fail
with AttributeError. Patch by Alex Waygood.

: Revert change to struct.Struct initialization that
broke some cases of subclassing.

: Optimize pathlib.PurePath.relative_to(). Patch by Alex
Waygood.

: Fix bug where comparison between instances of
 fails if one of them has  as its lineno.

: Speed up a small handful of  methods by removing
some temporary objects.

: Improve error message when trying to call issubclass()
against a typing.Protocol that has non-method members. Patch by
Randolf Scholz.

================================================================================

# Changelog - Library (Part 13)

: Change  output to display no-lineno as âââ instead
of âNoneâ.

: Deprecate the  field of
traceback.TracebackException. Add exc_type_str to replace it.

: Add extra tests for random.binomialvariate()

: Fix a crash in  when imported from a sub
interpreter. Patch by Anthony Shaw

: Slightly improve the import time of the  module by
deferring some imports. Patch by Barney Gale.

: Change  output to display logical labels for jump
targets instead of offsets.

: Add Signature.format() to format signatures to string
with extra options. And use it in  to render more readable
signatures that have new lines between parameters.

: Make readline.set_completer_delims() work with libedit

: Display multiple lines with  when errors span
multiple lines.

: When creating a typing.NamedTuple class, ensure
__set_name__() is called on all objects that define
__set_name__ and exist in the values of the NamedTuple classâs
class dictionary. Patch by Alex Waygood.

: Add support of the âvsapiâ element type in
tkinter.ttk.Style.element_create().

: Named tupleâs methods _replace() and __replace__() now
raise TypeError instead of ValueError for invalid keyword arguments.

================================================================================

# Changelog - Library (Part 14)

: Do not mangle sys.path[0] in  if safe_path is set

: Fix a regression caused by a fix to  whereby you
couldnât configure a QueueHandler without specifying handlers.

: Fix the behavior of  widgetâs  method
with two arguments. Previously, widget.unbind(sequence, 
destroyed the current binding for , leaving  unbound,
and deleted the  command. Now it removes only  from the
binding for , keeping other commands, and deletes the 
command. It leaves  unbound only if  was the last bound
command.

: Implement basic formatting support (minimum width, alignment,
fill) for fractions.Fraction.

: Fix crash during garbage collection of the io.BytesIO
buffer object.

: Redirect the output of  command of  to
the same channel as the debugger. Add tests and improve docs.

================================================================================

# Changelog - Library (Part 15)

: email.utils.getaddresses() and
email.utils.parseaddr() now return   2-tuples in more
situations where invalid email addresses are encountered instead of
potentially inaccurate values. Add optional  parameter to these
two functions: use strict=False to get the old behavior, accept
malformed inputs. getattr(email.utils, 'supports_strict_parsing',
 can be use to check if the  parameter is available. Patch
by Thomas Dwyer and Victor Stinner to improve the CVE 2023-27043 fix.

: cmd.Cmd.do_help() now cleans docstrings with
inspect.cleandoc() before writing them. Patch by Filip Åapkiewicz.

: Add  parameter to
multiprocessing.shared_memory.SharedMemory that allows using
shared memory blocks without having to register with the POSIX resource
tracker that automatically releases them upon process exit.

: Add private pathlib._PurePathBase class: a base class for
pathlib.PurePath that omits certain magic methods. It may be made
public (along with ) in future.

: Protect  from âquoted-overlapâ zipbomb. It now
raises BadZipFile when try to read an entry that overlaps with other entry
or central directory.

================================================================================

# Changelog - Library (Part 16)

: Fix possible reference leaks and crash when re-enter the
__next__() method of itertools.pairwise.

: Small (10 - 20%) and trivial performance improvement of
urllib.request.getproxies_environment(), typically useful when there
are many environment variables to go over.

: Add follow_symlinks keyword-only argument to
pathlib.Path.owner() and , defaulting to
.

: Support tab completion in  for .

: runpy.run_path() now decodes path-like objects, making
sure __file__ and sys.argv[0] of the module being run are always strings.

: Add warnings.deprecated(), a decorator to mark deprecated
functions to static type checkers and to warn on usage of deprecated
classes and functions. See . Patch by Jelle Zijlstra.

: Make hardcoded python name, a configurable parameter so that
different implementations of python can override it instead of making huge
diffs in sysconfig.py

: mailbox.MH now supports folders that do not contain a
.mh_sequences file (e.g. Claws Mail IMAP-cache folders). Patch by
Serhiy Storchaka.

: Renamed  to PatternError for clarity, and
kept  for backward compatibility. Patch by Matthias
Bussonnier and Adam Chhina.

================================================================================

# Changelog - Library (Part 17)

: Fix a bug in tempfile.TemporaryDirectory cleanup, which
now no longer dereferences symlinks when working around file system
permission errors.

: On Windows, tempfile.TemporaryDirectory previously masked a
PermissionError with NotADirectoryError during directory cleanup.
It now correctly raises PermissionError if errors are not ignored.
Patch by Andrei Kulakov and Ken Jin.

: getpass.getuser() now raises  for all
failures rather than ImportError on systems lacking the 
module or  if the password database is empty.

:  now has a  parameter on Unix; if it
is , the file descriptor specified by  will not be
duplicated.

: The shutil.rmtree() function now ignores errors when
calling os.close() when ignore_errors is , and
os.close() no longer retried after error.

: io.TextIOWrapper now correctly handles the decoding
buffer after  and .

: shutil.move() now moves a symlink into a directory when
that directory is the target of the symlink.  This provides the same
behavior as the mv shell command.  The previous behavior raised an
exception.  Patch by Jeffrey Kintscher.

: Fixed memory leaks of pickle.Pickler and
pickle.Unpickler involving cyclic references via the internal
memo mapping.

================================================================================

# Changelog - Library (Part 18)

: The pydoc.ispackage() function has been deprecated.

: The ssl.SSLSocket.recv_into() method no longer requires
the  argument to implement  and supports buffers with
arbitrary item size.

: warnings.filterwarnings() and
warnings.simplefilter() now raise appropriate exceptions instead of
AssertionError. Patch contributed by RÃ©mi Lapeyre.

: Fixed a race condition in shutil.rmtree() in which
directory entries removed by another process or thread while
shutil.rmtree() is running can cause it to raise FileNotFoundError.
Patch by Jeffrey Kintscher.

: Fix some error messages for invalid ISO format string
combinations in strptime() that referred to directives not contained
in the format string. Patch by Gordon P. Hemsley.

: Fixed a class inheritance issue that can cause segfaults when
deriving two or more levels of subclasses from a base class of Structure
or Union.

: Add a new PYTHON_HISTORY environment variable to set
the location of a .python_history file.

: mailbox.Maildir now ignores files with a leading dot.

================================================================================

# Changelog - Documentation

List:
: Relocate  deprecation notice to its own section rather
than under  in Whatâs New in Python 3.12 document
: Improved markup for valid options/values for methods
ttk.treeview.column and ttk.treeview.heading, and for Layouts.
: Document that the  module contains code taken from
v0.16.0 of the uvloop project, as well as the
required MIT licensing information.

: Relocate  deprecation notice to its own section rather
than under  in Whatâs New in Python 3.12 document

: Improved markup for valid options/values for methods
ttk.treeview.column and ttk.treeview.heading, and for Layouts.

: Document that the  module contains code taken from
v0.16.0 of the uvloop project, as well as the
required MIT licensing information.

================================================================================

# Changelog - Tests (Part 1)

List:
: Disable test_super_deep() from  under pydebug
builds on WASI; the stack depth is too small to make the test useful.
: Lower the recursion limit in test_isinstance for
test_infinitely_many_bases(). This prevents a stack overflow on a
pydebug build of WASI.
: Specify a low recursion depth for test_bad_getattr() in
test.pickletester to avoid exhausting the stack under a pydebug build
for WASI.
: Fix os.path.isabs() incorrectly returning  when
given a path that starts with exactly one (back)slash on Windows.
Fix pathlib.PureWindowsPath.is_absolute() incorrectly returning
 for some paths beginning with two (back)slashes.

================================================================================

# Changelog - Tests (Part 2)

: Use module state for the _testcapi extension module.
: Fix test_tarfile_vs_tar in test_shutil for macOS, where
system tar can include more information in the archive than
shutil.make_archive.
: The tests now correctly compare zlib version when
zlib.ZLIB_RUNTIME_VERSION contains non-integer suffixes. For
example zlib-ng defines the version as 1.3.0.zlib-ng.
: Adds a regression test to verify that  is used when
expected by subprocess on vfork enabled POSIX systems (Linux).
: Fixed order dependence in running tests in the same process
when a test that has submodules (e.g. test_importlib) follows a test that
imports its submodule (e.g. test_importlib.util) and precedes a test (e.g.
test_unittest or test_compileall) that uses that submodule.
: Test modes that file can get with chmod() on Windows.

: Disable test_super_deep() from  under pydebug
builds on WASI; the stack depth is too small to make the test useful.

: Lower the recursion limit in test_isinstance for
test_infinitely_many_bases(). This prevents a stack overflow on a
pydebug build of WASI.

: Specify a low recursion depth for test_bad_getattr() in
test.pickletester to avoid exhausting the stack under a pydebug build
for WASI.

================================================================================

# Changelog - Tests (Part 3)

: Fix os.path.isabs() incorrectly returning  when
given a path that starts with exactly one (back)slash on Windows.

Fix pathlib.PureWindowsPath.is_absolute() incorrectly returning
 for some paths beginning with two (back)slashes.

: Use module state for the _testcapi extension module.

: Fix test_tarfile_vs_tar in test_shutil for macOS, where
system tar can include more information in the archive than
shutil.make_archive.

: The tests now correctly compare zlib version when
zlib.ZLIB_RUNTIME_VERSION contains non-integer suffixes. For
example zlib-ng defines the version as 1.3.0.zlib-ng.

: Adds a regression test to verify that  is used when
expected by subprocess on vfork enabled POSIX systems (Linux).

: Fixed order dependence in running tests in the same process
when a test that has submodules (e.g. test_importlib) follows a test that
imports its submodule (e.g. test_importlib.util) and precedes a test (e.g.
test_unittest or test_compileall) that uses that submodule.

: Test modes that file can get with chmod() on Windows.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix Tools/wasm/wasi.py to not include the path to
python.wasm as part of HOSTRUNNER. The environment variable is
meant to specify how to run the WASI host only, having python.wasm and
relevant flags appended to the HOSTRUNNER. This fixes  
work.
: Changed the Windows build to write out generated frozen modules
into the build tree instead of the source tree.
: Fixed the check-clean-src step performed on out of tree
builds to detect errant $(srcdir)/Python/frozen_modules/*.h files and
recommend appropriate source tree cleanup steps to get a working build
again.
: Add support for thread sanitizer (TSAN)
: Fix the build for the case that WITH_PYMALLOC_RADIX_TREE=0 set.
: Introduce Tools/wasm/wasi.py to simplify doing a WASI
build.
: The os.major(), os.makedev(), and os.minor()
functions are now available on HP-UX v3.
: Do not set ipv6type when cross-compiling.

: Fix Tools/wasm/wasi.py to not include the path to
python.wasm as part of HOSTRUNNER. The environment variable is
meant to specify how to run the WASI host only, having python.wasm and
relevant flags appended to the HOSTRUNNER. This fixes  
work.

================================================================================

# Changelog - Build (Part 2)

: Changed the Windows build to write out generated frozen modules
into the build tree instead of the source tree.

: Fixed the check-clean-src step performed on out of tree
builds to detect errant $(srcdir)/Python/frozen_modules/*.h files and
recommend appropriate source tree cleanup steps to get a working build
again.

: Add support for thread sanitizer (TSAN)

: Fix the build for the case that WITH_PYMALLOC_RADIX_TREE=0 set.

: Introduce Tools/wasm/wasi.py to simplify doing a WASI
build.

: The os.major(), os.makedev(), and os.minor()
functions are now available on HP-UX v3.

: Do not set ipv6type when cross-compiling.

================================================================================

# Changelog - Windows (Part 1)

List:
: Process privileges that are activated for creating directory
junctions are now restored afterwards, avoiding behaviour changes in other
parts of the program.
:  calls were returning incorrect time values for
files that could not be accessed directly.
: Update Windows installer to use SQLite 3.44.2.
: multiprocessing: On Windows, fix a race condition in
Process.terminate(): no longer set the returncode attribute to
always call WaitForSingleObject() in Process.wait().  Previously,
sometimes the process was still running after TerminateProcess() even
if GetExitCodeProcess() is not STILL_ACTIVE. Patch by Victor
Stinner.
: Fixes path calculations when launching Python on Windows through
a symlink.
: Update Tcl/Tk in Windows installer to 8.6.13 with a patch to
suppress incorrect ThemeChanged warnings.
: Ensures the Py_GIL_DISABLED preprocessor variable is
defined in pyconfig.h so that extension modules written in C are
able to use it.
: Reduce the time cost for some functions in  on
Windows if current user has no permission to the WMI.
: Deprecate sys._enablelegacywindowsfsencoding(). Use
PYTHONLEGACYWINDOWSFSENCODING instead. Patch by Inada Naoki.
: Correctly sort and remove duplicate environment variables in
_winapi.CreateProcess().
: Fix mojibake in  when using a non-ASCII
 argument on Windows.

================================================================================

# Changelog - Windows (Part 2)

: Process privileges that are activated for creating directory
junctions are now restored afterwards, avoiding behaviour changes in other
parts of the program.

:  calls were returning incorrect time values for
files that could not be accessed directly.

: Update Windows installer to use SQLite 3.44.2.

: multiprocessing: On Windows, fix a race condition in
Process.terminate(): no longer set the returncode attribute to
always call WaitForSingleObject() in Process.wait().  Previously,
sometimes the process was still running after TerminateProcess() even
if GetExitCodeProcess() is not STILL_ACTIVE. Patch by Victor
Stinner.

: Fixes path calculations when launching Python on Windows through
a symlink.

: Update Tcl/Tk in Windows installer to 8.6.13 with a patch to
suppress incorrect ThemeChanged warnings.

: Ensures the Py_GIL_DISABLED preprocessor variable is
defined in pyconfig.h so that extension modules written in C are
able to use it.

: Reduce the time cost for some functions in  on
Windows if current user has no permission to the WMI.

: Deprecate sys._enablelegacywindowsfsencoding(). Use
PYTHONLEGACYWINDOWSFSENCODING instead. Patch by Inada Naoki.

================================================================================

# Changelog - Windows (Part 3)

: Correctly sort and remove duplicate environment variables in
_winapi.CreateProcess().

: Fix mojibake in  when using a non-ASCII
 argument on Windows.

================================================================================

# Changelog - macOS (Part 1)

List:
: Add the following constants to module :
UF_SETTABLE, UF_TRACKED, UF_DATAVAULT, SF_SUPPORTED,
SF_SETTABLE, SF_SYNTHETIC, SF_RESTRICTED, SF_FIRMLINK and
SF_DATALESS. The values UF_SETTABLE, SF_SUPPORTED,
SF_SETTABLE and SF_SYNTHETIC are only available on macOS.
: os.waitid() is now available on macOS
: Running   --with-openssl-rpath=X/Y/Z no longer
fails to detect OpenSSL on macOS.
: Document that  can silently corrupt DBM files on
updates when exceeding undocumented platform limits, and can crash
(segmentation fault) when reading such a corrupted file. (FB8919203)
: The  tool doesnât work with framework builds of
Python. Document this and bail out early when running the tool with such a
build.
: webbrowser: Donât look for X11 browsers on macOS. Those are
generally not used and probing for them can result in starting XQuartz
even if it isnât used otherwise.
: Update macOS installer to use SQLite 3.44.2.
: Set CFBundleAllowMixedLocalizations to true in the
Info.plist for the framework, embedded Python.app and IDLE.app with
framework installs on macOS.  This allows applications to pick up the
userâs preferred locale when thatâs different from english.
: Make sure the result of sysconfig.get_plaform() includes
at least a major and minor versions, even if MACOSX_DEPLOYMENT_TARGET
is set to only a major version during build to match the format expected
by pip.
: Disable a signal handling stress test on macOS due to a bug in
macOS (FB13453490).
: Make sure the preprocessor definitions for
ALIGNOF_MAX_ALIGN_T, SIZEOF_LONG_DOUBLE and
HAVE_GCC_ASM_FOR_X64 are correct for Universal 2 builds on macOS.
: Use  on macOS to determine the number of open files
in test.support.os_helper.fd_count to avoid a crash with âguardedâ
file descriptors when probing for open files.

================================================================================

# Changelog - macOS (Part 2)

: Add the following constants to module :
UF_SETTABLE, UF_TRACKED, UF_DATAVAULT, SF_SUPPORTED,
SF_SETTABLE, SF_SYNTHETIC, SF_RESTRICTED, SF_FIRMLINK and
SF_DATALESS. The values UF_SETTABLE, SF_SUPPORTED,
SF_SETTABLE and SF_SYNTHETIC are only available on macOS.

: os.waitid() is now available on macOS

: Running   --with-openssl-rpath=X/Y/Z no longer
fails to detect OpenSSL on macOS.

: Document that  can silently corrupt DBM files on
updates when exceeding undocumented platform limits, and can crash
(segmentation fault) when reading such a corrupted file. (FB8919203)

: The  tool doesnât work with framework builds of
Python. Document this and bail out early when running the tool with such a
build.

: webbrowser: Donât look for X11 browsers on macOS. Those are
generally not used and probing for them can result in starting XQuartz
even if it isnât used otherwise.

: Update macOS installer to use SQLite 3.44.2.

: Set CFBundleAllowMixedLocalizations to true in the
Info.plist for the framework, embedded Python.app and IDLE.app with
framework installs on macOS.  This allows applications to pick up the
userâs preferred locale when thatâs different from english.

================================================================================

# Changelog - macOS (Part 3)

: Make sure the result of sysconfig.get_plaform() includes
at least a major and minor versions, even if MACOSX_DEPLOYMENT_TARGET
is set to only a major version during build to match the format expected
by pip.

: Disable a signal handling stress test on macOS due to a bug in
macOS (FB13453490).

: Make sure the preprocessor definitions for
ALIGNOF_MAX_ALIGN_T, SIZEOF_LONG_DOUBLE and
HAVE_GCC_ASM_FOR_X64 are correct for Universal 2 builds on macOS.

: Use  on macOS to determine the number of open files
in test.support.os_helper.fd_count to avoid a crash with âguardedâ
file descriptors when probing for open files.

================================================================================

# Changelog - IDLE

List:
: Improve the lists of features, editor key bindings, and shell
key bingings in the IDLE doc.
: Fix rare failure of test.test_idle, in test_configdialog.
: Fix the âHelp -> IDLE Docâ menu bug in 3.11.7 and 3.12.1.
: Fix test_editor hang on macOS Catalina.
: Fix processing unsaved files when quitting IDLE on macOS.
: Enter the selected text when opening the âReplaceâ dialog.

: Improve the lists of features, editor key bindings, and shell
key bingings in the IDLE doc.

: Fix rare failure of test.test_idle, in test_configdialog.

: Fix the âHelp -> IDLE Docâ menu bug in 3.11.7 and 3.12.1.

: Fix test_editor hang on macOS Catalina.

: Fix processing unsaved files when quitting IDLE on macOS.

: Enter the selected text when opening the âReplaceâ dialog.

================================================================================

# Changelog - C API

List:
: Fix redundant declarations in the public C API. Declare
PyBool_Type, PyLong_Type and PySys_Audit() only once. Patch by Victor
Stinner.
: Fix support of format units âesâ, âetâ, âes#â, and âet#â in
nested tuples in PyArg_ParseTuple()-like functions.
: Add Py_HashPointer() function to hash a pointer. Patch
by Victor Stinner.
: Change the declaration of the  parameter of
PyArg_ParseTupleAndKeywords() and
PyArg_VaParseTupleAndKeywords() for better compatibility with C++.

: Fix redundant declarations in the public C API. Declare
PyBool_Type, PyLong_Type and PySys_Audit() only once. Patch by Victor
Stinner.

: Fix support of format units âesâ, âetâ, âes#â, and âet#â in
nested tuples in PyArg_ParseTuple()-like functions.

: Add Py_HashPointer() function to hash a pointer. Patch
by Victor Stinner.

: Change the declaration of the  parameter of
PyArg_ParseTupleAndKeywords() and
PyArg_VaParseTupleAndKeywords() for better compatibility with C++.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Donât include comments in f-string debug expressions. Patch by
Pablo Galindo
: Slightly optimize the Tier 2 (uop) interpreter by only loading
 and  when needed. Also double the trace size limit
again, to 512 this time.
: Change docstrings of  and
__weakref__.
: Lower the max parser stack depth to 1000 under WASI debug
builds.
: When Python is built in debug mode, set the C recursion limit
to 500 instead of 1500. A debug build is likely built with low
optimization level which implies higher stack memory usage than a release
build. Patch by Victor Stinner.
: Enable translating unspecialized  to Tier 2.
: Make hashlib related modules thread-safe without the GIL
: Deprecate assignment to a functionâs  field when the
new code object is of a mismatched type (e.g., from a generator to a plain
function).
: Raise exception if frame.clear() is called on a suspended
frame.
: Implement native thread ids for GNU KFreeBSD.
: Use exponential backoff to reduce the number of failed tier 2
optimization attempts by over 99%.
: Joining a thread now ensures the underlying OS thread has
exited. This is required for safer fork() in multi-threaded processes.
: Make sure that tier 2 traces are de-optimized if the code is
instrumented
: Specialize slot loads and stores for _Py_T_OBJECT as well as
Py_T_OBJECT_EX
: Speed up BaseExceptionGroup.derive(),
BaseExceptionGroup.subgroup(), and BaseExceptionGroup.split()
by changing how they parse passed arguments.
: Fix runtime crash when some error happens in opcode
LOAD_FROM_DICT_OR_DEREF.
: Add support for sharing tuples between interpreters using the
cross-interpreter API.  Patch by Anthony Shaw.
: The oparg of YIELD_VALUE is now  if the
instruction is part of a yield-from or await, and  otherwise.
The SUSPENDED frame state is now split into  and
SUSPENDED_YIELD_FROM. This simplifies the code in .

================================================================================

# Changelog - Core and Builtins (Part 2)

: Merge the Tier 1 (bytecode) and Tier 2 (micro-ops) interpreters
together, moving the Tier 2 interpreter loop and switch into
_PyEval_EvalFrameDefault() in Python/ceval.c. The
Python/executor.c file is gone. Also the  and 
macros are now handled by the code generator.
 This changes the environment variables to enable micro-ops and
their debugging to PYTHON_UOPS and PYTHON_LLTRACE.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Speed up  object creation by lazily compute
the line number. Patch by Pablo Galindo
: Allow type comments in parenthesized  statements
: Add support for sharing floats between interpreters using the
cross-interpreter API.  Patch by Anthony Shaw.
: Add support for sharing of  and  between
interpreters using the cross-interpreter API.  Patch by Anthony Shaw.
: Fix a bug where iso2022_jp_3 and iso2022_jp_2004 codecs
read out of bounds
: Fix an issue in the  that was causing
SyntaxError exceptions raised in the presence of invalid syntax to
not contain precise error messages. Patch by Pablo Galindo
: Fix a bug that was causing SyntaxWarning to appear twice
when parsing if invalid syntax is encountered later. Patch by Pablo
galindo
: Added a new environment variable
PYTHON_FROZEN_MODULES. It determines whether or not frozen
modules are ignored by the import machinery, equivalent of the 
frozen_modules command-line option.
: Remove  from YIELD_VALUE. Change 
of  to include information about the except-depth. These
changes make it possible to simplify the code in generator close.
: Fix a regression that prevented jumping across   and
   when debugging. Patch by Savannah Ostrowski.
: Show source lines in tracebacks when using the  option
when running Python. Patch by Pablo Galindo
: Fix a bug where a  declaration in an
 block is rejected when the global is used in the
 block.
: Fix error messages for indented blocks with functions and
classes with generic type parameters. Patch by Pablo Galindo
: Remove unnecessary instruction pointer updates before returning
from frames.
: Correctly display the traceback for MemoryError
exceptions using the  module. Patch by Pablo Galindo
: Fixed crash due to improperly initialized static
MemoryError in subinterpreter.
: Return  for PyTrace_RETURN events caused by an
exception
: Fix argument parsing by _PyArg_UnpackKeywordsWithVararg for
functions defining pos-or-keyword, vararg, and kw-only parameters.
: Replace prev_instr on the interpreter frame by
 which points to the beginning of the instruction that is
currently executing (or will execute once the frame resumes).
: Allow the repl to show source code and complete tracebacks.
Patch by Pablo Galindo
: Add PYTHON_PRESITE=package.module to import a module
early in the interpreter lifecycle before  is executed.  Python
needs to be built in debug mode for this option to
exist.
: Implement biased reference counting in --disable-gil
builds.
: Fix regression in Python 3.12 where
types.CodeType.replace() would produce a broken code object if
called on a module or class code object that contains a comprehension.
Patch by Jelle Zijlstra.
: Removed chained classmethod descriptors (introduced in
).  This can no longer be used to wrap other descriptors
such as .  The core design of this feature was flawed and
caused a number of downstream problems.  To âpass-throughâ a
classmethod, consider using the __wrapped__ attribute
that was added in Python 3.10.
: Use local events for opcode tracing
: Add mimalloc memory allocator support.
: When PyConfig.stdlib_dir is explicitly set, itâs now respected
and wonât be overridden by PyConfig.home.
: Fix incorrect SystemError about AST constructor recursion depth
mismatch.
: Improve error message for unterminated strings with escapes.
: Improved error messages for / statements not
matching any valid statements. Patch by Jeremiah Vivian.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Donât include comments in f-string debug expressions. Patch by
Pablo Galindo

: Slightly optimize the Tier 2 (uop) interpreter by only loading
 and  when needed. Also double the trace size limit
again, to 512 this time.

: Change docstrings of  and
__weakref__.

: Lower the max parser stack depth to 1000 under WASI debug
builds.

: When Python is built in debug mode, set the C recursion limit
to 500 instead of 1500. A debug build is likely built with low
optimization level which implies higher stack memory usage than a release
build. Patch by Victor Stinner.

: Enable translating unspecialized  to Tier 2.

: Make hashlib related modules thread-safe without the GIL

: Deprecate assignment to a functionâs  field when the
new code object is of a mismatched type (e.g., from a generator to a plain
function).

: Raise exception if frame.clear() is called on a suspended
frame.

: Implement native thread ids for GNU KFreeBSD.

: Use exponential backoff to reduce the number of failed tier 2
optimization attempts by over 99%.

: Joining a thread now ensures the underlying OS thread has
exited. This is required for safer fork() in multi-threaded processes.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Make sure that tier 2 traces are de-optimized if the code is
instrumented

: Specialize slot loads and stores for _Py_T_OBJECT as well as
Py_T_OBJECT_EX

: Speed up BaseExceptionGroup.derive(),
BaseExceptionGroup.subgroup(), and BaseExceptionGroup.split()
by changing how they parse passed arguments.

: Fix runtime crash when some error happens in opcode
LOAD_FROM_DICT_OR_DEREF.

: Add support for sharing tuples between interpreters using the
cross-interpreter API.  Patch by Anthony Shaw.

: The oparg of YIELD_VALUE is now  if the
instruction is part of a yield-from or await, and  otherwise.

The SUSPENDED frame state is now split into  and
SUSPENDED_YIELD_FROM. This simplifies the code in .

: Merge the Tier 1 (bytecode) and Tier 2 (micro-ops) interpreters
together, moving the Tier 2 interpreter loop and switch into
_PyEval_EvalFrameDefault() in Python/ceval.c. The
Python/executor.c file is gone. Also the  and 
macros are now handled by the code generator.

This changes the environment variables to enable micro-ops and
their debugging to PYTHON_UOPS and PYTHON_LLTRACE.

: Speed up  object creation by lazily compute
the line number. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 6)

: Allow type comments in parenthesized  statements

: Add support for sharing floats between interpreters using the
cross-interpreter API.  Patch by Anthony Shaw.

: Add support for sharing of  and  between
interpreters using the cross-interpreter API.  Patch by Anthony Shaw.

: Fix a bug where iso2022_jp_3 and iso2022_jp_2004 codecs
read out of bounds

: Fix an issue in the  that was causing
SyntaxError exceptions raised in the presence of invalid syntax to
not contain precise error messages. Patch by Pablo Galindo

: Fix a bug that was causing SyntaxWarning to appear twice
when parsing if invalid syntax is encountered later. Patch by Pablo
galindo

: Added a new environment variable
PYTHON_FROZEN_MODULES. It determines whether or not frozen
modules are ignored by the import machinery, equivalent of the 
frozen_modules command-line option.

: Remove  from YIELD_VALUE. Change 
of  to include information about the except-depth. These
changes make it possible to simplify the code in generator close.

: Fix a regression that prevented jumping across   and
   when debugging. Patch by Savannah Ostrowski.

: Show source lines in tracebacks when using the  option
when running Python. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 7)

: Fix a bug where a  declaration in an
 block is rejected when the global is used in the
 block.

: Fix error messages for indented blocks with functions and
classes with generic type parameters. Patch by Pablo Galindo

: Remove unnecessary instruction pointer updates before returning
from frames.

: Correctly display the traceback for MemoryError
exceptions using the  module. Patch by Pablo Galindo

: Fixed crash due to improperly initialized static
MemoryError in subinterpreter.

: Return  for PyTrace_RETURN events caused by an
exception

: Fix argument parsing by _PyArg_UnpackKeywordsWithVararg for
functions defining pos-or-keyword, vararg, and kw-only parameters.

: Replace prev_instr on the interpreter frame by
 which points to the beginning of the instruction that is
currently executing (or will execute once the frame resumes).

: Allow the repl to show source code and complete tracebacks.
Patch by Pablo Galindo

: Add PYTHON_PRESITE=package.module to import a module
early in the interpreter lifecycle before  is executed.  Python
needs to be built in debug mode for this option to
exist.

: Implement biased reference counting in --disable-gil
builds.

================================================================================

# Changelog - Core and Builtins (Part 8)

: Fix regression in Python 3.12 where
types.CodeType.replace() would produce a broken code object if
called on a module or class code object that contains a comprehension.
Patch by Jelle Zijlstra.

: Removed chained classmethod descriptors (introduced in
).  This can no longer be used to wrap other descriptors
such as .  The core design of this feature was flawed and
caused a number of downstream problems.  To âpass-throughâ a
classmethod, consider using the __wrapped__ attribute
that was added in Python 3.10.

: Use local events for opcode tracing

: Add mimalloc memory allocator support.

: When PyConfig.stdlib_dir is explicitly set, itâs now respected
and wonât be overridden by PyConfig.home.

: Fix incorrect SystemError about AST constructor recursion depth
mismatch.

: Improve error message for unterminated strings with escapes.

: Improved error messages for / statements not
matching any valid statements. Patch by Jeremiah Vivian.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix SystemError in the TextIOWrapper constructor with
non-encodable âerrorsâ argument in non-debug mode.
: Added the  constant to the  module when
present in C at build time for use with socket.getnameinfo().
: Issue warning message instead of having RuntimeError
be displayed when event loop has already been closed at
StreamWriter.__del__().
: Fix crashes in io.TextIOWrapper.reconfigure() when pass
invalid arguments, e.g. non-string encoding.
: : restore wide character support (including
curses.unget_wch() and ) on macOS,
which was unavailable due to a regression in Python 3.12.
: contextlib.suppress now supports suppressing
exceptions raised as part of a BaseExceptionGroup, in addition to
the recent support for ExceptionGroup.
: The  class now has an
seekable() method that can be used when a seekable
file-like object is required. The  method now
returns the new absolute position. Patch by Donghee Na.
: Remove posix.fallocate() under WASI as the underlying
posix_fallocate() is not available in WASI preview2.
: Fix truncating arguments on an embedded null character in
os.putenv() and os.unsetenv() on Windows.
: wsgiref.util.is_hop_by_hop() is now exposed correctly in
.
: Avoid executing the default function in  in an
except block
: Fix  for SyntaxError not-builtin
subclasses.
: Add extra argument validation for  command in

================================================================================

# Changelog - Library (Part 2)

: : Make time.clock_gettime() and
time.clock_gettime_ns() functions up to 2x faster by faster calling
convention. Patch by Victor Stinner.
: Call loop exception handler for exceptions in
client_connected_cb of asyncio.start_server() so that
applications can handle it. Patch by Kumar Aditya.
: Fix reference leaks in bind_class() and bind_all()
methods of  widgets.
: asyncio.loop.create_unix_server() will now automatically
remove the Unix socket when the server is closed.
: Added io.text_encoding(), io.DEFAULT_BUFFER_SIZE,
and io.IncrementalNewlineDecoder to io.__all__.
: Remove the code to set the REMOTE_HOST header from wsgiref
module, as it is unreachable. This header is used for performance reasons,
which is not necessary in the wsgiref module.
: Speed up pathlib.PurePath.relative_to() and
is_relative_to().
: Fixed typo in math.sumprod().
: Remove mention of not supported âvsapiâ element type in
tkinter.ttk.Style.element_create(). Add tests for
element_create() and other  methods. Add examples for
element_create() in the documentation.
: Add show_group parameter to
traceback.format_exception_only(), which allows to format
ExceptionGroup instances.
: Another attempt at fixing asyncio.Server.wait_closed(). It
now blocks until both conditions are true: the server is closed, 
there are no more active connections. (This means that in some cases where
in 3.12.0 this function would incorrectly have returned immediately, it
will now block; in particular, when there are no active connections but
the server hasnât been closed yet.)
: Optimize recursive wildcards in .
: Fix  not checking for errors when initializing.
: Add error checking during  module init.
: Fix  not checking for errors when initializing.
: Fix  not checking for errors when initializing.
: Fix  not checking for errors when initializing.
: Fix crash in io.BytesIO.getbuffer() called repeatedly for
empty BytesIO.
: Postpone removal version for locale.getdefaultlocale() to
Python 3.15.
: Fix  output comparison for exceptions with notes.
: Fix invalid state handling in asyncio.TaskGroup and
asyncio.Timeout. They now raise proper RuntimeError if they are
improperly used and are left in consistent state after this.
: Make turtledemo run without default root enabled.
: Support alias and convenience vars for  completion
: Added  parameter to pathlib.Path.read_text().
Patch by Junya Okabe.
: Make  enter post-mortem mode even for
SyntaxError
: Set f_trace_lines   on all frames upon
pdb.set_trace()
: Expose the setup and cleanup portions of
asyncio.run_forever() as the standalone methods
asyncio.run_forever_setup() and asyncio.run_forever_cleanup().
This allows for tighter integration with GUI event loops.
: Support setting the asyncio.Runner loop_factory kwarg
in unittest.IsolatedAsyncioTestCase
: Fix tty.setraw() and tty.setcbreak(): previously
they returned partially modified list of the original tty attributes.
tty.cfmakeraw() and tty.cfmakecbreak() now make a copy of the
list of special characters before modifying it.
: Make line number of function breakpoint more precise in

================================================================================

# Changelog - Library (Part 3)

: Emit deprecation warning for non-integer numbers in
 functions and methods that consider plural forms even if
the translation was not found.
: Ensure that select.kqueue() objects correctly appear as
closed in forked children, to prevent operations on an invalid file
descriptor.
: Add __reduce__ method to IPv6Address in order to
keep 
: Improve errors for unsupported look-behind patterns. Now
re.error is raised instead of OverflowError or RuntimeError for too large
width of look-behind pattern.
: Add the ipaddress.IPv4Address.ipv6_mapped property,
which returns the IPv4-mapped IPv6 address.
: Implement the CLI of the  module and improve the
repr of .
: Improved error handling in  command line interface,
making it produce more concise error messages.
: Change compileall to only strip the stripdir prefix from
the full path recorded in the compiled  file, when the prefix
matches the start of the full path in its entirety. When the prefix does
not match, no stripping is performed and a warning to this effect is
displayed.
Previously all path components of the stripdir prefix that matched the
full path were removed, while those that did not match were left alone
(including ones interspersed between matching components).

================================================================================

# Changelog - Library (Part 4)

: Make the  and  types in
multiprocessing.managers Generic Alias
Types for  use in typing contexts.
: Add glob.translate(). This function converts a pathname
with shell-style wildcards to a regular expression.
: Define USE_XATTRS on Cygwin so that XATTR-related functions
in the  module become available.
: New methods mailbox.Maildir.get_info(),
mailbox.Maildir.set_info(), mailbox.Maildir.get_flags(),
mailbox.Maildir.set_flags(), mailbox.Maildir.add_flag(),
mailbox.Maildir.remove_flag(). These methods speed up accessing a
messageâs info and/or flags and are useful when it is not necessary to
access the messageâs contents, as when iterating over a Maildir to find
messages with specific flags.
: Fix returning of empty byte strings after seek in zipfile
module
: Added a parameter local_exit for code.interact() to
prevent  and  from closing  and raise
SystemExit.
: Change the behavior of tkinter.Text.count(). It now always
returns an integer if one or less counting options are specified.
Previously it could return a single count as a 1-tuple, an integer (only
if option  was specified) or  if no items found. The
result is now the same if wantobjects is set to .
: Switch the storage of the unicode codepoint names to use a
different data-structure, a directed acyclic word graph.
This makes the unicodedata shared library about 440 KiB smaller.
Contributed by Carl Friedrich Bolz-Tereick using code from the PyPy
project.
: Omit the interface scope from an IPv6 address when used as Host
header by http.client.
:  now supports the full range of values in the TZ
string determined by RFC 8536 and detects all invalid formats. Both Python
and C implementations now raise exceptions of the same type on invalid
data.

================================================================================

# Changelog - Library (Part 5)

: Fix SystemError in the TextIOWrapper constructor with
non-encodable âerrorsâ argument in non-debug mode.

: Added the  constant to the  module when
present in C at build time for use with socket.getnameinfo().

: Issue warning message instead of having RuntimeError
be displayed when event loop has already been closed at
StreamWriter.__del__().

: Fix crashes in io.TextIOWrapper.reconfigure() when pass
invalid arguments, e.g. non-string encoding.

: : restore wide character support (including
curses.unget_wch() and ) on macOS,
which was unavailable due to a regression in Python 3.12.

: contextlib.suppress now supports suppressing
exceptions raised as part of a BaseExceptionGroup, in addition to
the recent support for ExceptionGroup.

: The  class now has an
seekable() method that can be used when a seekable
file-like object is required. The  method now
returns the new absolute position. Patch by Donghee Na.

: Remove posix.fallocate() under WASI as the underlying
posix_fallocate() is not available in WASI preview2.

: Fix truncating arguments on an embedded null character in
os.putenv() and os.unsetenv() on Windows.

: wsgiref.util.is_hop_by_hop() is now exposed correctly in
.

================================================================================

# Changelog - Library (Part 6)

: Avoid executing the default function in  in an
except block

: Fix  for SyntaxError not-builtin
subclasses.

: Add extra argument validation for  command in

: : Make time.clock_gettime() and
time.clock_gettime_ns() functions up to 2x faster by faster calling
convention. Patch by Victor Stinner.

: Call loop exception handler for exceptions in
client_connected_cb of asyncio.start_server() so that
applications can handle it. Patch by Kumar Aditya.

: Fix reference leaks in bind_class() and bind_all()
methods of  widgets.

: asyncio.loop.create_unix_server() will now automatically
remove the Unix socket when the server is closed.

: Added io.text_encoding(), io.DEFAULT_BUFFER_SIZE,
and io.IncrementalNewlineDecoder to io.__all__.

: Remove the code to set the REMOTE_HOST header from wsgiref
module, as it is unreachable. This header is used for performance reasons,
which is not necessary in the wsgiref module.

: Speed up pathlib.PurePath.relative_to() and
is_relative_to().

: Fixed typo in math.sumprod().

================================================================================

# Changelog - Library (Part 7)

: Remove mention of not supported âvsapiâ element type in
tkinter.ttk.Style.element_create(). Add tests for
element_create() and other  methods. Add examples for
element_create() in the documentation.

: Add show_group parameter to
traceback.format_exception_only(), which allows to format
ExceptionGroup instances.

: Another attempt at fixing asyncio.Server.wait_closed(). It
now blocks until both conditions are true: the server is closed, 
there are no more active connections. (This means that in some cases where
in 3.12.0 this function would incorrectly have returned immediately, it
will now block; in particular, when there are no active connections but
the server hasnât been closed yet.)

: Optimize recursive wildcards in .

: Fix  not checking for errors when initializing.

: Add error checking during  module init.

: Fix  not checking for errors when initializing.

: Fix  not checking for errors when initializing.

: Fix  not checking for errors when initializing.

: Fix crash in io.BytesIO.getbuffer() called repeatedly for
empty BytesIO.

: Postpone removal version for locale.getdefaultlocale() to
Python 3.15.

: Fix  output comparison for exceptions with notes.

================================================================================

# Changelog - Library (Part 8)

: Fix invalid state handling in asyncio.TaskGroup and
asyncio.Timeout. They now raise proper RuntimeError if they are
improperly used and are left in consistent state after this.

: Make turtledemo run without default root enabled.

: Support alias and convenience vars for  completion

: Added  parameter to pathlib.Path.read_text().
Patch by Junya Okabe.

: Make  enter post-mortem mode even for
SyntaxError

: Set f_trace_lines   on all frames upon
pdb.set_trace()

: Expose the setup and cleanup portions of
asyncio.run_forever() as the standalone methods
asyncio.run_forever_setup() and asyncio.run_forever_cleanup().
This allows for tighter integration with GUI event loops.

: Support setting the asyncio.Runner loop_factory kwarg
in unittest.IsolatedAsyncioTestCase

: Fix tty.setraw() and tty.setcbreak(): previously
they returned partially modified list of the original tty attributes.
tty.cfmakeraw() and tty.cfmakecbreak() now make a copy of the
list of special characters before modifying it.

: Make line number of function breakpoint more precise in

: Emit deprecation warning for non-integer numbers in
 functions and methods that consider plural forms even if
the translation was not found.

================================================================================

# Changelog - Library (Part 9)

: Ensure that select.kqueue() objects correctly appear as
closed in forked children, to prevent operations on an invalid file
descriptor.

: Add __reduce__ method to IPv6Address in order to
keep

: Improve errors for unsupported look-behind patterns. Now
re.error is raised instead of OverflowError or RuntimeError for too large
width of look-behind pattern.

: Add the ipaddress.IPv4Address.ipv6_mapped property,
which returns the IPv4-mapped IPv6 address.

: Implement the CLI of the  module and improve the
repr of .

: Improved error handling in  command line interface,
making it produce more concise error messages.

: Change compileall to only strip the stripdir prefix from
the full path recorded in the compiled  file, when the prefix
matches the start of the full path in its entirety. When the prefix does
not match, no stripping is performed and a warning to this effect is
displayed.

Previously all path components of the stripdir prefix that matched the
full path were removed, while those that did not match were left alone
(including ones interspersed between matching components).

: Make the  and  types in
multiprocessing.managers Generic Alias
Types for  use in typing contexts.

================================================================================

# Changelog - Library (Part 10)

: Add glob.translate(). This function converts a pathname
with shell-style wildcards to a regular expression.

: Define USE_XATTRS on Cygwin so that XATTR-related functions
in the  module become available.

: New methods mailbox.Maildir.get_info(),
mailbox.Maildir.set_info(), mailbox.Maildir.get_flags(),
mailbox.Maildir.set_flags(), mailbox.Maildir.add_flag(),
mailbox.Maildir.remove_flag(). These methods speed up accessing a
messageâs info and/or flags and are useful when it is not necessary to
access the messageâs contents, as when iterating over a Maildir to find
messages with specific flags.

: Fix returning of empty byte strings after seek in zipfile
module

: Added a parameter local_exit for code.interact() to
prevent  and  from closing  and raise
SystemExit.

: Change the behavior of tkinter.Text.count(). It now always
returns an integer if one or less counting options are specified.
Previously it could return a single count as a 1-tuple, an integer (only
if option  was specified) or  if no items found. The
result is now the same if wantobjects is set to .

================================================================================

# Changelog - Library (Part 11)

: Switch the storage of the unicode codepoint names to use a
different data-structure, a directed acyclic word graph.
This makes the unicodedata shared library about 440 KiB smaller.
Contributed by Carl Friedrich Bolz-Tereick using code from the PyPy
project.

: Omit the interface scope from an IPv6 address when used as Host
header by http.client.

:  now supports the full range of values in the TZ
string determined by RFC 8536 and detects all invalid formats. Both Python
and C implementations now raise exceptions of the same type on invalid
data.

================================================================================

# Changelog - Tests (Part 1)

List:
: Make the default value of test.support.infinite_recursion()
to be conditional based on whether optimizations were used when compiling
the interpreter. This helps with platforms like WASI whose stack size is
greatly restricted in debug builds.
: Gathering line coverage of standard libraries within the
regression test suite is now precise, as well as much faster. Patch by
Åukasz Langa.
: Make regrtest --verbose3 option compatible with
--huntrleaks  options. The      
--verbose3 command now works as expected. Patch by Victor Stinner.
: Remove no longer used functions run_unittest() and
run_doctest() from the test.support module.
: Fix regrtest if the SOURCE_DATE_EPOCH environment variable
is defined: use the variable value as the random seed. Patch by Victor
Stinner.
: test_gdb: Fix detection of gdb built without Python scripting
support. Patch by Victor Stinner.
: Test case matching patterns specified by options ,
, --matchfile and --ignorefile are now tested in the
order of specification, and the last match determines whether the test
case be run or ignored.
: Add unit test for usercustomize and sitecustomize hooks
from .

================================================================================

# Changelog - Tests (Part 2)

: Make the default value of test.support.infinite_recursion()
to be conditional based on whether optimizations were used when compiling
the interpreter. This helps with platforms like WASI whose stack size is
greatly restricted in debug builds.

: Gathering line coverage of standard libraries within the
regression test suite is now precise, as well as much faster. Patch by
Åukasz Langa.

: Make regrtest --verbose3 option compatible with
--huntrleaks  options. The      
--verbose3 command now works as expected. Patch by Victor Stinner.

: Remove no longer used functions run_unittest() and
run_doctest() from the test.support module.

: Fix regrtest if the SOURCE_DATE_EPOCH environment variable
is defined: use the variable value as the random seed. Patch by Victor
Stinner.

: test_gdb: Fix detection of gdb built without Python scripting
support. Patch by Victor Stinner.

: Test case matching patterns specified by options ,
, --matchfile and --ignorefile are now tested in the
order of specification, and the last match determines whether the test
case be run or ignored.

: Add unit test for usercustomize and sitecustomize hooks
from .

================================================================================

# Changelog - Build

List:
: Make  regen-unicodedata work for out-of-tree builds of
CPython.
: Add Tools/build/regen-configure.sh script to regenerate the
 with an Ubuntu container image. The
quay.io/tiran/cpython_autoconf:271 container image
(tiran/cpython_autoconf) is
no longer used. Patch by Victor Stinner.
: For wasi-threads, memory is now exported to fix compatibility
issues with some wasm runtimes.
: AIX 32bit needs  to build the 
extension module.
: The , , , ,
_ctypes_test, _multiprocessing.posixshmem, ,
, _testimportmultiple and  C extensions are now
built with the limited C API. Patch by Victor
Stinner.

: Make  regen-unicodedata work for out-of-tree builds of
CPython.

: Add Tools/build/regen-configure.sh script to regenerate the
 with an Ubuntu container image. The
quay.io/tiran/cpython_autoconf:271 container image
(tiran/cpython_autoconf) is
no longer used. Patch by Victor Stinner.

: For wasi-threads, memory is now exported to fix compatibility
issues with some wasm runtimes.

: AIX 32bit needs  to build the 
extension module.

: The , , , ,
_ctypes_test, _multiprocessing.posixshmem, ,
, _testimportmultiple and  C extensions are now
built with the limited C API. Patch by Victor
Stinner.

================================================================================

# Changelog - Windows

List:
: Fixes  on file systems that do not support
file ID requests. This includes FAT32 and exFAT.
: Fix os.DirEntry.inode dropping higher 64 bits of a file
id on some filesystems on Windows.
: WindowsConsoleIO now correctly chunks large buffers without
splitting up UTF-8 sequences.

: Fixes  on file systems that do not support
file ID requests. This includes FAT32 and exFAT.

: Fix os.DirEntry.inode dropping higher 64 bits of a file
id on some filesystems on Windows.

: WindowsConsoleIO now correctly chunks large buffers without
splitting up UTF-8 sequences.

================================================================================

# Changelog - macOS (Part 1)

List:
: For macOS framework builds, in  use the system
 function to find the path to the shared library rather than
depending on deprecated macOS APIs.
: Update macOS installer to include an upstream Tcl/Tk fix for
the       restorable  warning
encountered in Tkinter on macOS 14 Sonoma.
: Ensure that IDLE.app and Python Launcher.app are installed with
appropriate permissions on macOS builds.
: Update macOS installer to include an upstream Tcl/Tk fix for the
ttk::ThemeChanged error encountered in Tkinter.
: Update macOS installer to include a fix accepted by upstream
Tcl/Tk for a crash encountered after the first tkinter.Tk() instance
is destroyed.

: For macOS framework builds, in  use the system
 function to find the path to the shared library rather than
depending on deprecated macOS APIs.

: Update macOS installer to include an upstream Tcl/Tk fix for
the       restorable  warning
encountered in Tkinter on macOS 14 Sonoma.

: Ensure that IDLE.app and Python Launcher.app are installed with
appropriate permissions on macOS builds.

: Update macOS installer to include an upstream Tcl/Tk fix for the
ttk::ThemeChanged error encountered in Tkinter.

================================================================================

# Changelog - macOS (Part 2)

: Update macOS installer to include a fix accepted by upstream
Tcl/Tk for a crash encountered after the first tkinter.Tk() instance
is destroyed.

================================================================================

# Changelog - IDLE

List:
: Add docstrings to the IDLE debugger module. Fix two bugs:
initialize Idb.botframe (should be in Bdb); in Idb.in_rpc_code,
check whether prev_frame is  before trying to use it. Greatly
expand test_debugger.

: Add docstrings to the IDLE debugger module. Fix two bugs:
initialize Idb.botframe (should be in Bdb); in Idb.in_rpc_code,
check whether prev_frame is  before trying to use it. Greatly
expand test_debugger.

================================================================================

# Changelog - Tools/Demos

List:
: Argument Clinic now supports the @critical_section
directive that instructs Argument Clinic to generate a critical section
around the function call, which locks the  object in
--disable-gil builds. Patch by Sam Gross.

: Argument Clinic now supports the @critical_section
directive that instructs Argument Clinic to generate a critical section
around the function call, which locks the  object in
--disable-gil builds. Patch by Sam Gross.

================================================================================

# Changelog - C API (Part 1)

List:
: Add again the private _PyThreadState_UncheckedGet()
function as an alias to the new public
PyThreadState_GetUnchecked() function. Patch by Victor Stinner.
: Restore the removed _PyDict_GetItemStringWithError()
function. It is used by numpy. Patch by Victor Stinner.
: Restore removed private C API functions, macros and structures
which have no simple replacement for now:

================================================================================

# Changelog - C API (Part 2)

_PyDict_GetItem_KnownHash()
_PyDict_NewPresized()
_PyHASH_BITS
_PyHASH_IMAG
_PyHASH_INF
_PyHASH_MODULUS
_PyHASH_MULTIPLIER
_PyLong_Copy()
_PyLong_FromDigits()
_PyLong_New()
_PyLong_Sign()
_PyObject_CallMethodId()
_PyObject_CallMethodNoArgs()
_PyObject_CallMethodOneArg()
_PyObject_CallOneArg()
_PyObject_EXTRA_INIT
_PyObject_FastCallDict()
_PyObject_GetAttrId()
_PyObject_Vectorcall()
_PyObject_VectorcallMethod()
_PyStack_AsDict()
_PyThread_CurrentFrames()
_PyUnicodeWriter structure
_PyUnicodeWriter_Dealloc()
_PyUnicodeWriter_Finish()
_PyUnicodeWriter_Init()
_PyUnicodeWriter_Prepare()
_PyUnicodeWriter_PrepareKind()
_PyUnicodeWriter_WriteASCIIString()
_PyUnicodeWriter_WriteChar()
_PyUnicodeWriter_WriteLatin1String()
_PyUnicodeWriter_WriteStr()
_PyUnicodeWriter_WriteSubstring()
_PyUnicode_AsString()
_PyUnicode_FromId()
_PyVectorcall_Function()
_Py_IDENTIFIER()
_Py_c_abs()
_Py_c_diff()
_Py_c_neg()
_Py_c_pow()
_Py_c_prod()
_Py_c_quot()
_Py_c_sum()
_Py_static_string()
_Py_static_string_init()

Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 3)

: Add again  and <unistd.h> includes in
, but donât include them in the limited C API version 3.13 and
newer. Patch by Victor Stinner.
: Add internal-only one-time initialization API: _PyOnceFlag
and _PyOnceFlag_CallOnce.
: Add PyDict_Pop() and PyDict_PopString()
functions: remove a key from a dictionary and optionally return the
removed value. This is similar to dict.pop(), but without the
default value and not raising  if the key missing. Patch by
Stefan Behnel and Victor Stinner.
: Rename  to Py_GIL_DISABLED. Patch by Hugo van
Kemenade.
: Add PyList_Extend() and PyList_Clear()
functions: similar to Python list.extend() and list.clear()
methods. Patch by Victor Stinner.
: On Windows,  no longer includes the <stddef.h>
standard header file. If needed, it should now be included explicitly.
Patch by Victor Stinner.
: Implement âPython Critical Sectionsâ from . These are
macros to help replace the GIL with per-object locks in the
--disable-gil build of CPython. The macros are no-ops in the default
build.
: In the limited C API version 3.13, Py_SET_REFCNT()
function is now implemented as an opaque function call. Patch by Victor
Stinner.
: Add PyErr_FormatUnraisable() function.
: Move the undocumented private _PyArg functions and
_PyArg_Parser structure to internal C API (pycore_modsupport.h). Patch
by Victor Stinner.
: Support non-ASCII keyword names in
PyArg_ParseTupleAndKeywords().
: Introduced PyUnstable_PerfTrampoline_CompileCode(),
PyUnstable_PerfTrampoline_SetPersistAfterFork() and
PyUnstable_CopyPerfMapFile(). These functions allow extension
modules to initialize trampolines eagerly, after the application is
âwarmed upâ. This makes it possible to have perf-trampolines running in an
always-enabled fashion.
: Add the PySys_Audit() function to the limited C API.
Patch by Victor Stinner.
: Add PyMem_RawMalloc(), PyMem_RawCalloc(),
PyMem_RawRealloc() and PyMem_RawFree() to the limited C
API. Patch by Victor Stinner.
: Functions PyDict_GetItem(),
PyDict_GetItemString(), PyMapping_HasKey(),
PyMapping_HasKeyString(), PyObject_HasAttr(),
PyObject_HasAttrString(), and PySys_GetObject(), which
clear all errors occurred during calling the function, report now them
using sys.unraisablehook().
: Remove redundant C-contiguity check in ,
,  and Argument Clinic. Patched by Stefan Krah
and Furkan Onder

================================================================================

# Changelog - C API (Part 4)

: Add again the private _PyThreadState_UncheckedGet()
function as an alias to the new public
PyThreadState_GetUnchecked() function. Patch by Victor Stinner.

: Restore the removed _PyDict_GetItemStringWithError()
function. It is used by numpy. Patch by Victor Stinner.

: Restore removed private C API functions, macros and structures
which have no simple replacement for now:

================================================================================

# Changelog - C API (Part 5)

List:
_PyDict_GetItem_KnownHash()
_PyDict_NewPresized()
_PyHASH_BITS
_PyHASH_IMAG
_PyHASH_INF
_PyHASH_MODULUS
_PyHASH_MULTIPLIER
_PyLong_Copy()
_PyLong_FromDigits()
_PyLong_New()
_PyLong_Sign()
_PyObject_CallMethodId()
_PyObject_CallMethodNoArgs()
_PyObject_CallMethodOneArg()
_PyObject_CallOneArg()
_PyObject_EXTRA_INIT
_PyObject_FastCallDict()
_PyObject_GetAttrId()
_PyObject_Vectorcall()
_PyObject_VectorcallMethod()
_PyStack_AsDict()
_PyThread_CurrentFrames()
_PyUnicodeWriter structure
_PyUnicodeWriter_Dealloc()
_PyUnicodeWriter_Finish()
_PyUnicodeWriter_Init()
_PyUnicodeWriter_Prepare()
_PyUnicodeWriter_PrepareKind()
_PyUnicodeWriter_WriteASCIIString()
_PyUnicodeWriter_WriteChar()
_PyUnicodeWriter_WriteLatin1String()
_PyUnicodeWriter_WriteStr()
_PyUnicodeWriter_WriteSubstring()
_PyUnicode_AsString()
_PyUnicode_FromId()
_PyVectorcall_Function()
_Py_IDENTIFIER()
_Py_c_abs()
_Py_c_diff()
_Py_c_neg()
_Py_c_pow()
_Py_c_prod()
_Py_c_quot()
_Py_c_sum()
_Py_static_string()
_Py_static_string_init()

_PyDict_GetItem_KnownHash()

_PyDict_NewPresized()

_PyObject_CallMethodId()

_PyObject_CallMethodNoArgs()

_PyObject_CallMethodOneArg()

_PyObject_CallOneArg()

_PyObject_FastCallDict()

_PyObject_GetAttrId()

================================================================================

# Changelog - C API (Part 6)

_PyObject_Vectorcall()

_PyObject_VectorcallMethod()

_PyThread_CurrentFrames()

_PyUnicodeWriter structure

_PyUnicodeWriter_Dealloc()

_PyUnicodeWriter_Finish()

_PyUnicodeWriter_Init()

_PyUnicodeWriter_Prepare()

_PyUnicodeWriter_PrepareKind()

_PyUnicodeWriter_WriteASCIIString()

_PyUnicodeWriter_WriteChar()

_PyUnicodeWriter_WriteLatin1String()

_PyUnicodeWriter_WriteStr()

_PyUnicodeWriter_WriteSubstring()

_PyUnicode_AsString()

_PyVectorcall_Function()

_Py_static_string_init()

Patch by Victor Stinner.

: Add again  and <unistd.h> includes in
, but donât include them in the limited C API version 3.13 and
newer. Patch by Victor Stinner.

: Add internal-only one-time initialization API: _PyOnceFlag
and _PyOnceFlag_CallOnce.

: Add PyDict_Pop() and PyDict_PopString()
functions: remove a key from a dictionary and optionally return the
removed value. This is similar to dict.pop(), but without the
default value and not raising  if the key missing. Patch by
Stefan Behnel and Victor Stinner.

: Rename  to Py_GIL_DISABLED. Patch by Hugo van
Kemenade.

: Add PyList_Extend() and PyList_Clear()
functions: similar to Python list.extend() and list.clear()
methods. Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 7)

: On Windows,  no longer includes the <stddef.h>
standard header file. If needed, it should now be included explicitly.
Patch by Victor Stinner.

: Implement âPython Critical Sectionsâ from . These are
macros to help replace the GIL with per-object locks in the
--disable-gil build of CPython. The macros are no-ops in the default
build.

: In the limited C API version 3.13, Py_SET_REFCNT()
function is now implemented as an opaque function call. Patch by Victor
Stinner.

: Add PyErr_FormatUnraisable() function.

: Move the undocumented private _PyArg functions and
_PyArg_Parser structure to internal C API (pycore_modsupport.h). Patch
by Victor Stinner.

: Support non-ASCII keyword names in
PyArg_ParseTupleAndKeywords().

: Introduced PyUnstable_PerfTrampoline_CompileCode(),
PyUnstable_PerfTrampoline_SetPersistAfterFork() and
PyUnstable_CopyPerfMapFile(). These functions allow extension
modules to initialize trampolines eagerly, after the application is
âwarmed upâ. This makes it possible to have perf-trampolines running in an
always-enabled fashion.

: Add the PySys_Audit() function to the limited C API.
Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 8)

: Add PyMem_RawMalloc(), PyMem_RawCalloc(),
PyMem_RawRealloc() and PyMem_RawFree() to the limited C
API. Patch by Victor Stinner.

: Functions PyDict_GetItem(),
PyDict_GetItemString(), PyMapping_HasKey(),
PyMapping_HasKeyString(), PyObject_HasAttr(),
PyObject_HasAttrString(), and PySys_GetObject(), which
clear all errors occurred during calling the function, report now them
using sys.unraisablehook().

: Remove redundant C-contiguity check in ,
,  and Argument Clinic. Patched by Stefan Krah
and Furkan Onder

================================================================================

# Changelog - Security (Part 1)

List:
: Fixed an issue where instances of ssl.SSLSocket were
vulnerable to a bypass of the TLS handshake and included protections (like
certificate verification) and treating sent unencrypted data as if it were
post-handshake TLS encrypted data.  Security issue reported as
CVE 2023-40217 by Aapo Oksman. Patch by Gregory P. Smith.
: PEP 669 specifies that sys.monitoring.register_callback
will generate an audit event. Pre-releases of Python 3.12 did not generate
the audit event. This is now fixed.
: Reverted the email.utils security improvement change
released in 3.12beta4 that unintentionally caused
email.utils.getaddresses to fail to parse email addresses with a
comma in the quoted name field. See .
: Refresh our new HACL* built-in  code from
upstream. Built-in SHA2 should be faster and an issue with SHA3 on 32-bit
platforms is fixed.
: Start initializing  during creation of
PyLongObject objects. Patch by Illia Volochii.

================================================================================

# Changelog - Security (Part 2)

: Fixed an issue where instances of ssl.SSLSocket were
vulnerable to a bypass of the TLS handshake and included protections (like
certificate verification) and treating sent unencrypted data as if it were
post-handshake TLS encrypted data.  Security issue reported as
CVE 2023-40217 by Aapo Oksman. Patch by Gregory P. Smith.

: PEP 669 specifies that sys.monitoring.register_callback
will generate an audit event. Pre-releases of Python 3.12 did not generate
the audit event. This is now fixed.

: Reverted the email.utils security improvement change
released in 3.12beta4 that unintentionally caused
email.utils.getaddresses to fail to parse email addresses with a
comma in the quoted name field. See .

: Refresh our new HACL* built-in  code from
upstream. Built-in SHA2 should be faster and an issue with SHA3 on 32-bit
platforms is fixed.

: Start initializing  during creation of
PyLongObject objects. Patch by Illia Volochii.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix crash when typing.TypeVar is constructed with a
keyword argument. Patch by Jelle Zijlstra.
: Reset ceval.eval_breaker in interpreter_clear()
: Use the  implementation for the default
PyErr_Display() functionality. Patch by Pablo Galindo
: Fix incorrect error message for invalid argument unpacking.
Patch by Pablo Galindo
: Split the tokenizer into two separate directories: - One part
includes the actual lexeme producing logic and lives in Parser/lexer.
- The second part wraps the lexer according to the different tokenization
modes   we have (string, utf-8, file, interactive, readline) and lives in
Parser/tokenizer.
: Remove undocumented test_c_api method from ,
which was only defined for testing purposes under . Now we
have proper CAPI tests.
: Fix a reference leak when running with PYTHONUOPS or
  enabled.
: Add  to sys.setprofile() events
: Optimise math.ceil() when the input is exactly a float,
resulting in about a 10% improvement.
: Guard assert(tstate->thread_id   with 
HAVE_PTHREAD_STUBS. This allows for for pydebug builds to work under
WASI which (currently) lacks thread support.
: Remove unnecessary empty constant nodes in the ast of f-string
specs.
: Correctly identify the format spec in f-strings (with single or
triple quotes) that have multiple lines in the expression part and include
a formatting spec. Patch by Pablo Galindo
: Fix missing error checks for calls to PyList_Append in
_PyEval_MatchClass.
: regrtest: If the SOURCE_DATE_EPOCH environment variable is
defined, regrtest now disables tests randomization. Patch by Victor
Stinner.
: Fix the compilerâs redundant NOP detection algorithm to skip
over NOPs with no line number when looking for the next instructionâs
lineno.
: sys.path[0] is now set correctly for subinterpreters.
: Set line number on the  that follows a
RETURN_GENERATOR.
: Subinterpreters now correctly handle the case where they have
threads running in the background.  Before, such threads would interfere
with cleaning up and destroying them, as well as prevent running another
script.
: The internal eval_breaker and supporting flags, plus the
monitoring version have been merged into a single atomic integer to speed
up checks.
: Fix bug where compiler does not adjust labels when removing an
empty basic block which is a jump target.
: The main thread no longer exits prematurely when a
subinterpreter is cleaned up during runtime finalization.  The bug was a
problem particularly because, when triggered, the Python process would
always return with a 0 exitcode, even if it failed.
: Fix missing jump target labels when compiler reorders cold/warm
blocks.
: Add    command line option to
override return results of os.cpu_count() and
os.process_cpu_count(). This option is useful for users who need to
limit CPU resources of a container system without having to modify the
container (application code). Patch by Donghee Na.
: Fix bug where the compiler does not assign a new jump target
label to a duplicated small exit block.
: Fix some tokens in the grammar that were incorrectly marked as
soft keywords. Also fix some repeated rule names and ensure that repeated
rules are not allowed. Patch by Pablo Galindo
: On a Python built in debug mode, Py_DECREF() now
calls _Py_NegativeRefcount() if the object is a dangling pointer to
deallocated memory: memory filled with  âdead byteâ by the debug
hook on memory allocators. The fix is to check the reference count
 checking for _Py_IsImmortal(). Patch by Victor Stinner.
: Deopt opcodes hidden by the executor when base opcode is needed
: Deopted instructions correctly for tool initialization and
modified the incorrect assertion in instrumentation, when a previous tool
already sets INSTRUCTION events
: Fix bug where the line trace of an except block ending with a
conditional includes an excess event with the line of the conditional
expression.
: Fix compiling type param scopes that use a name which is also
free in an inner scope.
: Fix crash when compiling an invalid AST involving a named
(walrus) expression.
: Fix crash when compiling an invalid AST involving a
ast.TypeAlias.
: Fix source location for the  instruction preceding a
LOAD_SUPER_ATTR to load the  global (or shadowing variable)
so that it encompasses only the name  and not the following
parentheses.
: Opcode IDs for specialized opcodes are allocated in their own
range to improve stability of the IDs for the ârealâ opcodes.
: Fix possible memory leak in .
: Fix a SystemError in  of symtable entry object.
: Fix bug where the C traceback display drops notes from
SyntaxError.
: Disallow nested scopes (lambdas, generator expressions, and
comprehensions) within PEP 695 annotation scopes that are nested within
classes.
: Add tests for de-instrumenting instructions while keeping the
instrumentation for lines
: Relax the detection of the error message for invalid lambdas
inside f-strings to not search for arbitrary replacement fields to avoid
false positives. Patch by Pablo Galindo
: Add a new  opcode, used for calls containing
keyword arguments. Also, fix a possible crash when jumping over method
calls in a debugger.
: Use the base opcode when comparing code objects to avoid
interference from instrumentation
: Fix interpreter crash when a NameError is raised inside the
type parameters of a generic class.
: Improve syntax error for non-ASCII character that follows a
numerical literal. It now points on the invalid non-ASCII character, not
on the valid numerical literal.
: Fix crash that occurs after de-instrumenting a code object in a
monitoring callback.
: Make iteration variables of module- and class-scoped
comprehensions visible to pdb and other tools that use frame.f_locals
again.
: Fix caret placement for error locations for subscript and
binary operations that involve non-semantic parentheses and spaces. Patch
by Pablo Galindo
: Fix a crash when running with PYTHONUOPS or
  enabled and an error occurs during optimization.
: Define tp_dealloc for CounterOptimizer_Type. This fixes
a segfault on deallocation.
: Fix multiprocessing.synchronize.SemLock.__setstate__() to
properly initialize
multiprocessing.synchronize.SemLock._is_fork_ctx. This fixes a
regression when passing a SemLock across nested processes.
Rename multiprocessing.synchronize.SemLock.is_fork_ctx to
multiprocessing.synchronize.SemLock._is_fork_ctx to avoid exposing
it as public API.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Restore locals shadowed by an inlined comprehension if the
comprehension raises an exception.
: Change the initialization of inline cache entries so that the
cache entry for JUMP_BACKWARD is initialized to zero, instead of the
adaptive_counter_warmup() value used for all other instructions. This
counter, unique among instructions, counts up from zero.
: Turn off deep-freezing of code objects. Modules are still
frozen, so that a file system search is not needed for common modules.
: Add RESUME_CHECK instruction, to avoid having to handle
instrumentation, signals, and contexts switches in the tier 2 execution
engine.
: Move an assert that would cause a spurious crash in a devious
case that should only trigger deoptimization.
: Use a WeakValueDictionary to track the lists containing the
modules each thread is currently importing. This helps avoid a reference
leak from keeping the list around longer than necessary. Weakrefs are used
as GC canât interrupt the cleanup.
: The regen-opcode build stage was removed and its work is now
done in regen-cases.
: Fix missing line number on JUMP_BACKWARD at the end
of a for loop.
: The  built-in can now accept a new flag,
ast.PyCF_OPTIMIZED_AST, which is similar to ast.PyCF_ONLY_AST
except that the returned  is optimized according to the value of
the  argument.
ast.parse() now accepts an optional argument  which is
passed on to the  built-in. This makes it possible to
obtain an optimized .

================================================================================

# Changelog - Core and Builtins (Part 3)

: Opcode IDs are generated from bytecodes.c instead of being hard
coded in opcode.py.
: Improve error message for function calls with bad keyword
arguments. Patch by Pablo Galindo
: Raise an exception when setting a non-local event (,
EXCEPTION_HANDLED, etc.) in sys.monitoring.set_local_events.
Fixes crash when tracing in recursive calls to Python classes.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Remove the  struct, moving the pointer to the
current interpreter frame back to the threadstate, as it was for 3.10 and
earlier. The  existed as a performance optimization for
tracing. Since PEP 669 has been implemented, this optimization no longer
applies.
: Fix abort / segfault when using all eight type watcher slots, on
platforms where  is signed by default.
: Fix possible assertion failures and missing instrumentation
events when PYTHONUOPS or   is enabled.
: Revert converting , , , , and
 to argument clinic.
: Autogenerate signature for METH_NOARGS and
 extension functions.
: Make the dump_stack() routine used by the 
feature (low-level interpreter debugging) robust against recursion by
ensuring that it never calls a  method implemented in Python.
Also make the similar output for Tier-2 uops appear on  (instead
of ), to match the  code in ceval.c.
: Add docstrings for ctypes.pointer() and
ctypes.POINTER().
: Modify the bytecode so that the actual callable for a
 is at a consistent position on the stack (regardless of
whether or not bound-method-calling optimizations are active).
: Fixed performance regression in sys.settrace.
: In pre-release versions of 3.12, up to rc1, the sys.monitoring
callback function for the  event was missing the third,
exception argument. That is now fixed.
: Skip reference count modifications for many known immortal
objects.
: Specialize subscripting  objects by 
indexes.
: Trace refs builds (--with-trace-refs) were crashing when
used with isolated subinterpreters.  The problematic global state has been
isolated to each interpreter.  Other fixing the crashes, this change does
not affect users.
: Generate the cases needed for the barebones tier 2 abstract
interpreter for optimization passes in CPython.
: Make _PyUOpExecutorObject variable length.
: Clear generatorsâ exception state after  to break
reference cycles.
: Improve error messages when converting an incompatible type to
ctypes.c_char_p, ctypes.c_wchar_p and
ctypes.c_void_p.
: Increase C recursion limit for functions other than the main
interpreter from 800 to 1500. This should allow functions like
list.__repr__ and json.dumps to handle all the inputs that they
could prior to 3.12
: Fix an issue which caused incorrect inline caches to be read
when running with PYTHONUOPS or   enabled.
: Fix potential unaligned memory access on C APIs involving
returned sequences of   pointers within the  and
 modules. These were revealed using a
-fsaniziter=alignment build on ARM macOS. Patch by Christopher Chavez.
: Isolate  (apply ). Patch by Charlie
Zhao.
: Add the exception as the third argument to 
callbacks in sys.monitoring. This makes the  callback
consistent with the other exception handling callbacks.
: Raise a ValueError when a monitoring callback function
returns  for events that cannot be disabled locally.
: Add a  event to sys.monitoring, which occurs
when an exception is reraise, either explicitly by a plain 
statement, or implicitly in an  or  block.
: Ensure that multiprocessing synchronization objects created in a
fork context are not sent to a different process created in a spawn
context. This changes a segfault into an actionable RuntimeError in the
parent process.
: Statically allocated string objects are now interned globally
instead of per-interpreter.  This fixes a situation where such a string
would only be interned in a single interpreter. Normal string objects are
unaffected.
: Unsupported modules now always fail to be imported.
: Add dbm.ndbm.ndbm.clear() to . Patch By
Donghee Na.
: Add dbm.gnu.gdbm.clear() to . Patch By
Donghee Na.
: The ASYNC and AWAIT tokens are removed from the Grammar, which
removes the possibility of making  and  soft keywords
when using feature_version<7 in ast.parse().
: Fix classmethod-style  method calls (i.e., where
the second argument to , or the implied second argument drawn
from  in the case of zero-arg super, is a type) when the
target of the call is not a classmethod.
: Python no longer crashes due an infrequent race when
initializing per-interpreter interned strings.  The crash would manifest
when the interpreter was finalized.
: Python no longer crashes due to an infrequent race in setting
Py_FileSystemDefaultEncoding and Py_FileSystemDefaultEncodeErrors
(both deprecated), when simultaneously initializing two isolated
subinterpreters.  Now they are only set during runtime initialization.
: Fix various hangs, reference leaks, test failures, and
tracing/introspection bugs when running with PYTHONUOPS or
  enabled.
: Fix a segmentation fault caused by a use-after-free bug in
frame_dealloc when the trashcan delays the deallocation of a
PyFrameObject.
: Reduce the number of materialized instances dictionaries by
dematerializing them when possible.
: No longer suppress arbitrary errors in the __annotations__
getter and setter in the type and module types.
: Propagate frozen_modules to multiprocessing spawned process
interpreters.
: Split LOAD_ATTR_INSTANCE_VALUE into micro-ops.
: Split LOAD_GLOBAL specializations into micro-ops.
: A new debug structure of offsets has been added to the
_PyRuntimeState that will help out-of-process debuggers and profilers
to obtain the offsets to relevant interpreter structures in a way that is
agnostic of how Python was compiled and that doesnât require copying the
headers. Patch by Pablo Galindo
: Allow the  argument of str.replace() to be a
keyword. Patch by Hugo van Kemenade.
: Improve error message of list.remove(). Patch by Donghee
Na.
: Compiler now strips indents from docstrings. It reduces 
file size 5% when the module is heavily documented. This change affects to
 so tools like doctest will be affected.
: When the format specification of an f-string expression is
empty, the parser now generates an empty ast.JoinedStr node for
it instead of an one-element ast.JoinedStr with an empty string
ast.Constant.
: Specialize  for non-descriptors on the
class. Adds LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES and
LOAD_ATTR_NONDESCRIPTOR_NO_DICT.
: Fix possible reference leaks when failing to optimize
comparisons with  in the bytecode compiler.
: Make end_lineno and end_col_offset required on
type_param ast nodes.
: Changed the way that Emscripten call trampolines work for
compatibility with Wasm/JS Promise integration.
: sys.getfilesystemencoding() and
sys.getfilesystemencodeerrors now return interned Unicode object.
: Removed Emscripten import trampoline as it was no longer
necessary for Pyodide.
: Added a new, experimental, tracing optimizer and interpreter
(a.k.a. âtier 2â). This currently pessimizes, so donât use yet â this is
infrastructure so we can experiment with optimizing passes. To enable it,
pass  or set PYTHONUOPS=1. To get debug output, set
PYTHONUOPSDEBUG=N where  is a debug level (0-4, where 0 is no
debug output and 4 is excessively verbose).
: LOAD_CLOSURE is now a pseudo-op.
: Allow any callable other than type objects as the condition
predicate in BaseExceptionGroup.split() and
BaseExceptionGroup.subgroup().
: Fix crash in _imp.get_frozen_object() due to improper
exception handling.
: Add a new  instruction, which performs boolean
conversions for POP_JUMP_IF_TRUE, POP_JUMP_IF_FALSE,
and  (which all expect exact  values now).
Also, modify the oparg of COMPARE_OP to include an optional
âboolean conversionâ flag.
: Ensure custom SyntaxError error messages are raised for
invalid imports with multiple targets. Patch by Pablo Galindo
: Improve  error messages by providing exact error
range.
: Fixed bug where  breaks future import
barry_as_FLUFL in the Python REPL.
: Fix possible crashes when specializing function calls with too
many __defaults__.
: Fix an f-string bug, where using a debug expression (the 
sign) that appears in the last line of a file results to the debug buffer
that holds the expression text being one character too small.
: Correctly issue SyntaxWarning in f-strings if invalid
sequences are used. Patch by Pablo Galindo
: Include the comprehension iteration variable in 
inside a module- or class-scope comprehension.
: Raise ValueError if the  argument to
asyncio.sleep() is a NaN (matching time.sleep()).
: The runtime canât guarantee that immortal objects will not be
mutated by Extensions. Thus, this modifies _PyStaticObject_CheckRefcnt to
warn instead of asserting.
: Donât include artificil newlines in the  attribute of
tokens in the APIs of the  module. Patch by Pablo Galindo
: Tokenize separately  and  tokens that are not
ambiguous. Patch by Pablo Galindo.
: Fix an issue that could result in crashes when compiling
malformed  nodes.
: Allow objects other than code objects as the âexecutableâ in
internal frames. In the long term, this can help tools like Cython and
PySpy interact more efficiently. In the shorter term, it allows us to
perform some optimizations more simply.
: Fix bugs in the  module where exceptions could
end up being overwritten.
: Fix bug in the compiler where an exception could end up being
overwritten.
: Improve error handling in PyUnicode_BuildEncodingMap()
where an exception could end up being overwritten.
: Change the repr of  list of args in
types.GenericAlias.
: Break the MAKE_FUNCTION instruction into two parts,
MAKE_FUNCTION which makes the function and SET_FUNCTION_ATTRIBUTE
which sets the attributes on the function. This makes the stack effect of
MAKE_FUNCTION regular to ease optimization and code generation.
: Fix spurious newline character if file ends on a comment
without a newline. Patch by Pablo Galindo
: Correctly raise tokenize.TokenError exceptions instead
of SyntaxError for tokenize errors such as incomplete input. Patch
by Pablo Galindo
: Donât include newline character for trailing  tokens
emitted in the  module. Patch by Pablo Galindo
: Eliminate redundant STORE_FAST instructions in the
compiler. Patch by Donghee Na and Carl Meyer.
: Fix the main function of the  module when
reading from . Patch by Pablo Galindo
: Simplify and speed up interpreter for f-strings. Removes
FORMAT_VALUE opcode. Add CONVERT_VALUE, FORMAT_SIMPLE and
FORMAT_WITH_SPEC opcode. Compiler emits more efficient sequence for
each format expression.
: Remove remaining two-codeunit superinstructions. All remaining
superinstructions only take a single codeunit, simplifying instrumentation
and quickening.
: Prevent out-of-bounds memory access during mmap.find()
calls.
: Restore the ability for a subclass of  to
define  or otherwise be dict-less by ignoring failures to set
a docstring on such a class.  This behavior had regressed in 3.12beta1.
An AttributeError where there had not previously been one was
disruptive to existing code.
: The âpending callâ machinery now works for all interpreters,
not just the main interpreter, and runs in all threads, not just the main
thread. Some calls are still only done in the main thread, ergo in the
main interpreter. This change does not affect signal handling nor the
existing public C-API (Py_AddPendingCall()), which both still only
target the main thread. The new functionality is meant strictly for
internal use for now, since consequences of its use are not well
understood yet outside some very restricted cases.  This change brings the
capability in line with the intention when the state was made
per-interpreter several years ago.
: Do not escape with backslashes f-string format specifiers.
Patch by Pablo Galindo
: Replace some dynamic superinstructions with single instruction
equivalents.
: Fixed bug in generator.close()/throw() where an inner iterator
would be ignored when the outer iterator was instrumented.
: Ensure annotations are set up correctly if the only annotation
in a block is within a  block. Patch by Jelle Zijlstra.
: Make _PyASTOptimizeState internal to ast_opt.c. Make
_PyAST_Optimize take two integers instead of a pointer to this struct.
This avoids the need to include pycore_compile.h in ast_opt.c.
: Attributes of  nodes that are lists now default to
the empty list if omitted. This means that some code that previously
raised  when the AST node was used will now proceed with
the empty list instead. Patch by Jelle Zijlstra.
: Remove the old trashcan macros Py_TRASHCAN_SAFE_BEGIN and
Py_TRASHCAN_SAFE_END. They should be replaced by the new macros
Py_TRASHCAN_BEGIN and Py_TRASHCAN_END.
: Fix  calls on types with custom
tp_getattro implementation (e.g. meta-types.)
: Show CRLF lines in the tokenize string attribute in both NL and
NEWLINE tokens. Patch by Marta GÃ³mez.
: Fix handling of multiline parenthesized lambdas in
inspect.getsource(). Patch by Pablo Galindo
: Do not include an additional final  token when parsing
files having CRLF lines. Patch by Marta GÃ³mez.
: Ensure that trailing  tokenize.TokenInfo
objects emitted by the  module are reported as in Python
3.11. Patch by Pablo Galindo
: Ensure that the  attribute in
tokenize.TokenInfo objects in the  module are
always correct. Patch by Pablo Galindo
: Fix signature for the new __release_buffer__()
slot. Patch by Jelle Zijlstra.
: Starting new threads and process creation through
 during interpreter shutdown (such as from 
handlers) is no longer supported.  It can lead to race condition between
the main Python runtime thread freeing thread states while internal
 routines are trying to allocate and use the state of just
created threads. Or forked children trying to use the mid-shutdown runtime
and thread state in the child process.
: Fix crash when accessing the __module__ attribute of type
aliases defined outside a module. Patch by Jelle Zijlstra.
: Tokens emitted by the  module do not include an
implicit  character in the  attribute anymore. Patch by
Pablo Galindo
: If a generator returns a value upon being closed, the value is
now returned by generator.close().
: Raise RuntimeWarning for unawaited async generator
methods like ,  and
. Patch by Kumar Aditya.
: Add a better, more introspect-able error message when setting
attributes on classes without a  and no slot member for the
attribute.
: Update the Python pickle module implementation to match the C
implementation of the pickle module. For objects setting reduction methods
like __reduce_ex__() or __reduce__() to
, pickling will result in a .
: Improve error handling when read  data.
: Specializes calls to most Python classes. Specifically, any
class that inherits from , or another Python class, and does not
override .
The specialized instruction does the following:

================================================================================

# Changelog - Core and Builtins (Part 5)

Creates the object (by calling object.__new__)
Pushes a shim frame to the frame stack (to cleanup after )
Pushes the frame for  to the frame stack

Speeds up the instantiation of most Python classes.

: Fix crash when typing.TypeVar is constructed with a
keyword argument. Patch by Jelle Zijlstra.

: Reset ceval.eval_breaker in interpreter_clear()

: Use the  implementation for the default
PyErr_Display() functionality. Patch by Pablo Galindo

: Fix incorrect error message for invalid argument unpacking.
Patch by Pablo Galindo

: Split the tokenizer into two separate directories: - One part
includes the actual lexeme producing logic and lives in Parser/lexer.
- The second part wraps the lexer according to the different tokenization
modes   we have (string, utf-8, file, interactive, readline) and lives in
Parser/tokenizer.

: Remove undocumented test_c_api method from ,
which was only defined for testing purposes under . Now we
have proper CAPI tests.

: Fix a reference leak when running with PYTHONUOPS or
  enabled.

: Add  to sys.setprofile() events

: Optimise math.ceil() when the input is exactly a float,
resulting in about a 10% improvement.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Guard assert(tstate->thread_id   with 
HAVE_PTHREAD_STUBS. This allows for for pydebug builds to work under
WASI which (currently) lacks thread support.

: Remove unnecessary empty constant nodes in the ast of f-string
specs.

: Correctly identify the format spec in f-strings (with single or
triple quotes) that have multiple lines in the expression part and include
a formatting spec. Patch by Pablo Galindo

: Fix missing error checks for calls to PyList_Append in
_PyEval_MatchClass.

: regrtest: If the SOURCE_DATE_EPOCH environment variable is
defined, regrtest now disables tests randomization. Patch by Victor
Stinner.

: Fix the compilerâs redundant NOP detection algorithm to skip
over NOPs with no line number when looking for the next instructionâs
lineno.

: sys.path[0] is now set correctly for subinterpreters.

: Set line number on the  that follows a
RETURN_GENERATOR.

: Subinterpreters now correctly handle the case where they have
threads running in the background.  Before, such threads would interfere
with cleaning up and destroying them, as well as prevent running another
script.

================================================================================

# Changelog - Core and Builtins (Part 7)

: The internal eval_breaker and supporting flags, plus the
monitoring version have been merged into a single atomic integer to speed
up checks.

: Fix bug where compiler does not adjust labels when removing an
empty basic block which is a jump target.

: The main thread no longer exits prematurely when a
subinterpreter is cleaned up during runtime finalization.  The bug was a
problem particularly because, when triggered, the Python process would
always return with a 0 exitcode, even if it failed.

: Fix missing jump target labels when compiler reorders cold/warm
blocks.

: Add    command line option to
override return results of os.cpu_count() and
os.process_cpu_count(). This option is useful for users who need to
limit CPU resources of a container system without having to modify the
container (application code). Patch by Donghee Na.

: Fix bug where the compiler does not assign a new jump target
label to a duplicated small exit block.

: Fix some tokens in the grammar that were incorrectly marked as
soft keywords. Also fix some repeated rule names and ensure that repeated
rules are not allowed. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 8)

: On a Python built in debug mode, Py_DECREF() now
calls _Py_NegativeRefcount() if the object is a dangling pointer to
deallocated memory: memory filled with  âdead byteâ by the debug
hook on memory allocators. The fix is to check the reference count
 checking for _Py_IsImmortal(). Patch by Victor Stinner.

: Deopt opcodes hidden by the executor when base opcode is needed

: Deopted instructions correctly for tool initialization and
modified the incorrect assertion in instrumentation, when a previous tool
already sets INSTRUCTION events

: Fix bug where the line trace of an except block ending with a
conditional includes an excess event with the line of the conditional
expression.

: Fix compiling type param scopes that use a name which is also
free in an inner scope.

: Fix crash when compiling an invalid AST involving a named
(walrus) expression.

: Fix crash when compiling an invalid AST involving a
ast.TypeAlias.

: Fix source location for the  instruction preceding a
LOAD_SUPER_ATTR to load the  global (or shadowing variable)
so that it encompasses only the name  and not the following
parentheses.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Opcode IDs for specialized opcodes are allocated in their own
range to improve stability of the IDs for the ârealâ opcodes.

: Fix possible memory leak in .

: Fix a SystemError in  of symtable entry object.

: Fix bug where the C traceback display drops notes from
SyntaxError.

: Disallow nested scopes (lambdas, generator expressions, and
comprehensions) within PEP 695 annotation scopes that are nested within
classes.

: Add tests for de-instrumenting instructions while keeping the
instrumentation for lines

: Relax the detection of the error message for invalid lambdas
inside f-strings to not search for arbitrary replacement fields to avoid
false positives. Patch by Pablo Galindo

: Add a new  opcode, used for calls containing
keyword arguments. Also, fix a possible crash when jumping over method
calls in a debugger.

: Use the base opcode when comparing code objects to avoid
interference from instrumentation

: Fix interpreter crash when a NameError is raised inside the
type parameters of a generic class.

: Improve syntax error for non-ASCII character that follows a
numerical literal. It now points on the invalid non-ASCII character, not
on the valid numerical literal.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Fix crash that occurs after de-instrumenting a code object in a
monitoring callback.

: Make iteration variables of module- and class-scoped
comprehensions visible to pdb and other tools that use frame.f_locals
again.

: Fix caret placement for error locations for subscript and
binary operations that involve non-semantic parentheses and spaces. Patch
by Pablo Galindo

: Fix a crash when running with PYTHONUOPS or
  enabled and an error occurs during optimization.

: Define tp_dealloc for CounterOptimizer_Type. This fixes
a segfault on deallocation.

: Fix multiprocessing.synchronize.SemLock.__setstate__() to
properly initialize
multiprocessing.synchronize.SemLock._is_fork_ctx. This fixes a
regression when passing a SemLock across nested processes.

Rename multiprocessing.synchronize.SemLock.is_fork_ctx to
multiprocessing.synchronize.SemLock._is_fork_ctx to avoid exposing
it as public API.

: Restore locals shadowed by an inlined comprehension if the
comprehension raises an exception.

================================================================================

# Changelog - Core and Builtins (Part 11)

: Change the initialization of inline cache entries so that the
cache entry for JUMP_BACKWARD is initialized to zero, instead of the
adaptive_counter_warmup() value used for all other instructions. This
counter, unique among instructions, counts up from zero.

: Turn off deep-freezing of code objects. Modules are still
frozen, so that a file system search is not needed for common modules.

: Add RESUME_CHECK instruction, to avoid having to handle
instrumentation, signals, and contexts switches in the tier 2 execution
engine.

: Move an assert that would cause a spurious crash in a devious
case that should only trigger deoptimization.

: Use a WeakValueDictionary to track the lists containing the
modules each thread is currently importing. This helps avoid a reference
leak from keeping the list around longer than necessary. Weakrefs are used
as GC canât interrupt the cleanup.

: The regen-opcode build stage was removed and its work is now
done in regen-cases.

: Fix missing line number on JUMP_BACKWARD at the end
of a for loop.

================================================================================

# Changelog - Core and Builtins (Part 12)

: The  built-in can now accept a new flag,
ast.PyCF_OPTIMIZED_AST, which is similar to ast.PyCF_ONLY_AST
except that the returned  is optimized according to the value of
the  argument.

ast.parse() now accepts an optional argument  which is
passed on to the  built-in. This makes it possible to
obtain an optimized .

: Opcode IDs are generated from bytecodes.c instead of being hard
coded in opcode.py.

: Improve error message for function calls with bad keyword
arguments. Patch by Pablo Galindo

: Raise an exception when setting a non-local event (,
EXCEPTION_HANDLED, etc.) in sys.monitoring.set_local_events.

Fixes crash when tracing in recursive calls to Python classes.

: Remove the  struct, moving the pointer to the
current interpreter frame back to the threadstate, as it was for 3.10 and
earlier. The  existed as a performance optimization for
tracing. Since PEP 669 has been implemented, this optimization no longer
applies.

: Fix abort / segfault when using all eight type watcher slots, on
platforms where  is signed by default.

: Fix possible assertion failures and missing instrumentation
events when PYTHONUOPS or   is enabled.

: Revert converting , , , , and
 to argument clinic.

================================================================================

# Changelog - Core and Builtins (Part 13)

: Autogenerate signature for METH_NOARGS and
 extension functions.

: Make the dump_stack() routine used by the 
feature (low-level interpreter debugging) robust against recursion by
ensuring that it never calls a  method implemented in Python.
Also make the similar output for Tier-2 uops appear on  (instead
of ), to match the  code in ceval.c.

: Add docstrings for ctypes.pointer() and
ctypes.POINTER().

: Modify the bytecode so that the actual callable for a
 is at a consistent position on the stack (regardless of
whether or not bound-method-calling optimizations are active).

: Fixed performance regression in sys.settrace.

: In pre-release versions of 3.12, up to rc1, the sys.monitoring
callback function for the  event was missing the third,
exception argument. That is now fixed.

: Skip reference count modifications for many known immortal
objects.

: Specialize subscripting  objects by 
indexes.

: Trace refs builds (--with-trace-refs) were crashing when
used with isolated subinterpreters.  The problematic global state has been
isolated to each interpreter.  Other fixing the crashes, this change does
not affect users.

================================================================================

# Changelog - Core and Builtins (Part 14)

: Generate the cases needed for the barebones tier 2 abstract
interpreter for optimization passes in CPython.

: Make _PyUOpExecutorObject variable length.

: Clear generatorsâ exception state after  to break
reference cycles.

: Improve error messages when converting an incompatible type to
ctypes.c_char_p, ctypes.c_wchar_p and
ctypes.c_void_p.

: Increase C recursion limit for functions other than the main
interpreter from 800 to 1500. This should allow functions like
list.__repr__ and json.dumps to handle all the inputs that they
could prior to 3.12

: Fix an issue which caused incorrect inline caches to be read
when running with PYTHONUOPS or   enabled.

: Fix potential unaligned memory access on C APIs involving
returned sequences of   pointers within the  and
 modules. These were revealed using a
-fsaniziter=alignment build on ARM macOS. Patch by Christopher Chavez.

: Isolate  (apply ). Patch by Charlie
Zhao.

: Add the exception as the third argument to 
callbacks in sys.monitoring. This makes the  callback
consistent with the other exception handling callbacks.

: Raise a ValueError when a monitoring callback function
returns  for events that cannot be disabled locally.

================================================================================

# Changelog - Core and Builtins (Part 15)

: Add a  event to sys.monitoring, which occurs
when an exception is reraise, either explicitly by a plain 
statement, or implicitly in an  or  block.

: Ensure that multiprocessing synchronization objects created in a
fork context are not sent to a different process created in a spawn
context. This changes a segfault into an actionable RuntimeError in the
parent process.

: Statically allocated string objects are now interned globally
instead of per-interpreter.  This fixes a situation where such a string
would only be interned in a single interpreter. Normal string objects are
unaffected.

: Unsupported modules now always fail to be imported.

: Add dbm.ndbm.ndbm.clear() to . Patch By
Donghee Na.

: Add dbm.gnu.gdbm.clear() to . Patch By
Donghee Na.

: The ASYNC and AWAIT tokens are removed from the Grammar, which
removes the possibility of making  and  soft keywords
when using feature_version<7 in ast.parse().

: Fix classmethod-style  method calls (i.e., where
the second argument to , or the implied second argument drawn
from  in the case of zero-arg super, is a type) when the
target of the call is not a classmethod.

================================================================================

# Changelog - Core and Builtins (Part 16)

: Python no longer crashes due an infrequent race when
initializing per-interpreter interned strings.  The crash would manifest
when the interpreter was finalized.

: Python no longer crashes due to an infrequent race in setting
Py_FileSystemDefaultEncoding and Py_FileSystemDefaultEncodeErrors
(both deprecated), when simultaneously initializing two isolated
subinterpreters.  Now they are only set during runtime initialization.

: Fix various hangs, reference leaks, test failures, and
tracing/introspection bugs when running with PYTHONUOPS or
  enabled.

: Fix a segmentation fault caused by a use-after-free bug in
frame_dealloc when the trashcan delays the deallocation of a
PyFrameObject.

: Reduce the number of materialized instances dictionaries by
dematerializing them when possible.

: No longer suppress arbitrary errors in the __annotations__
getter and setter in the type and module types.

: Propagate frozen_modules to multiprocessing spawned process
interpreters.

: Split LOAD_ATTR_INSTANCE_VALUE into micro-ops.

: Split LOAD_GLOBAL specializations into micro-ops.

================================================================================

# Changelog - Core and Builtins (Part 17)

: A new debug structure of offsets has been added to the
_PyRuntimeState that will help out-of-process debuggers and profilers
to obtain the offsets to relevant interpreter structures in a way that is
agnostic of how Python was compiled and that doesnât require copying the
headers. Patch by Pablo Galindo

: Allow the  argument of str.replace() to be a
keyword. Patch by Hugo van Kemenade.

: Improve error message of list.remove(). Patch by Donghee
Na.

: Compiler now strips indents from docstrings. It reduces 
file size 5% when the module is heavily documented. This change affects to
 so tools like doctest will be affected.

: When the format specification of an f-string expression is
empty, the parser now generates an empty ast.JoinedStr node for
it instead of an one-element ast.JoinedStr with an empty string
ast.Constant.

: Specialize  for non-descriptors on the
class. Adds LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES and
LOAD_ATTR_NONDESCRIPTOR_NO_DICT.

: Fix possible reference leaks when failing to optimize
comparisons with  in the bytecode compiler.

: Make end_lineno and end_col_offset required on
type_param ast nodes.

================================================================================

# Changelog - Core and Builtins (Part 18)

: Changed the way that Emscripten call trampolines work for
compatibility with Wasm/JS Promise integration.

: sys.getfilesystemencoding() and
sys.getfilesystemencodeerrors now return interned Unicode object.

: Removed Emscripten import trampoline as it was no longer
necessary for Pyodide.

: Added a new, experimental, tracing optimizer and interpreter
(a.k.a. âtier 2â). This currently pessimizes, so donât use yet â this is
infrastructure so we can experiment with optimizing passes. To enable it,
pass  or set PYTHONUOPS=1. To get debug output, set
PYTHONUOPSDEBUG=N where  is a debug level (0-4, where 0 is no
debug output and 4 is excessively verbose).

: LOAD_CLOSURE is now a pseudo-op.

: Allow any callable other than type objects as the condition
predicate in BaseExceptionGroup.split() and
BaseExceptionGroup.subgroup().

: Fix crash in _imp.get_frozen_object() due to improper
exception handling.

: Add a new  instruction, which performs boolean
conversions for POP_JUMP_IF_TRUE, POP_JUMP_IF_FALSE,
and  (which all expect exact  values now).
Also, modify the oparg of COMPARE_OP to include an optional
âboolean conversionâ flag.

================================================================================

# Changelog - Core and Builtins (Part 19)

: Ensure custom SyntaxError error messages are raised for
invalid imports with multiple targets. Patch by Pablo Galindo

: Improve  error messages by providing exact error
range.

: Fixed bug where  breaks future import
barry_as_FLUFL in the Python REPL.

: Fix possible crashes when specializing function calls with too
many __defaults__.

: Fix an f-string bug, where using a debug expression (the 
sign) that appears in the last line of a file results to the debug buffer
that holds the expression text being one character too small.

: Correctly issue SyntaxWarning in f-strings if invalid
sequences are used. Patch by Pablo Galindo

: Include the comprehension iteration variable in 
inside a module- or class-scope comprehension.

: Raise ValueError if the  argument to
asyncio.sleep() is a NaN (matching time.sleep()).

: The runtime canât guarantee that immortal objects will not be
mutated by Extensions. Thus, this modifies _PyStaticObject_CheckRefcnt to
warn instead of asserting.

: Donât include artificil newlines in the  attribute of
tokens in the APIs of the  module. Patch by Pablo Galindo

: Tokenize separately  and  tokens that are not
ambiguous. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 20)

: Fix an issue that could result in crashes when compiling
malformed  nodes.

: Allow objects other than code objects as the âexecutableâ in
internal frames. In the long term, this can help tools like Cython and
PySpy interact more efficiently. In the shorter term, it allows us to
perform some optimizations more simply.

: Fix bugs in the  module where exceptions could
end up being overwritten.

: Fix bug in the compiler where an exception could end up being
overwritten.

: Improve error handling in PyUnicode_BuildEncodingMap()
where an exception could end up being overwritten.

: Change the repr of  list of args in
types.GenericAlias.

: Break the MAKE_FUNCTION instruction into two parts,
MAKE_FUNCTION which makes the function and SET_FUNCTION_ATTRIBUTE
which sets the attributes on the function. This makes the stack effect of
MAKE_FUNCTION regular to ease optimization and code generation.

: Fix spurious newline character if file ends on a comment
without a newline. Patch by Pablo Galindo

: Correctly raise tokenize.TokenError exceptions instead
of SyntaxError for tokenize errors such as incomplete input. Patch
by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 21)

: Donât include newline character for trailing  tokens
emitted in the  module. Patch by Pablo Galindo

: Eliminate redundant STORE_FAST instructions in the
compiler. Patch by Donghee Na and Carl Meyer.

: Fix the main function of the  module when
reading from . Patch by Pablo Galindo

: Simplify and speed up interpreter for f-strings. Removes
FORMAT_VALUE opcode. Add CONVERT_VALUE, FORMAT_SIMPLE and
FORMAT_WITH_SPEC opcode. Compiler emits more efficient sequence for
each format expression.

: Remove remaining two-codeunit superinstructions. All remaining
superinstructions only take a single codeunit, simplifying instrumentation
and quickening.

: Prevent out-of-bounds memory access during mmap.find()
calls.

: Restore the ability for a subclass of  to
define  or otherwise be dict-less by ignoring failures to set
a docstring on such a class.  This behavior had regressed in 3.12beta1.
An AttributeError where there had not previously been one was
disruptive to existing code.

================================================================================

# Changelog - Core and Builtins (Part 22)

: The âpending callâ machinery now works for all interpreters,
not just the main interpreter, and runs in all threads, not just the main
thread. Some calls are still only done in the main thread, ergo in the
main interpreter. This change does not affect signal handling nor the
existing public C-API (Py_AddPendingCall()), which both still only
target the main thread. The new functionality is meant strictly for
internal use for now, since consequences of its use are not well
understood yet outside some very restricted cases.  This change brings the
capability in line with the intention when the state was made
per-interpreter several years ago.

: Do not escape with backslashes f-string format specifiers.
Patch by Pablo Galindo

: Replace some dynamic superinstructions with single instruction
equivalents.

: Fixed bug in generator.close()/throw() where an inner iterator
would be ignored when the outer iterator was instrumented.

: Ensure annotations are set up correctly if the only annotation
in a block is within a  block. Patch by Jelle Zijlstra.

================================================================================

# Changelog - Core and Builtins (Part 23)

: Make _PyASTOptimizeState internal to ast_opt.c. Make
_PyAST_Optimize take two integers instead of a pointer to this struct.
This avoids the need to include pycore_compile.h in ast_opt.c.

: Attributes of  nodes that are lists now default to
the empty list if omitted. This means that some code that previously
raised  when the AST node was used will now proceed with
the empty list instead. Patch by Jelle Zijlstra.

: Remove the old trashcan macros Py_TRASHCAN_SAFE_BEGIN and
Py_TRASHCAN_SAFE_END. They should be replaced by the new macros
Py_TRASHCAN_BEGIN and Py_TRASHCAN_END.

: Fix  calls on types with custom
tp_getattro implementation (e.g. meta-types.)

: Show CRLF lines in the tokenize string attribute in both NL and
NEWLINE tokens. Patch by Marta GÃ³mez.

: Fix handling of multiline parenthesized lambdas in
inspect.getsource(). Patch by Pablo Galindo

: Do not include an additional final  token when parsing
files having CRLF lines. Patch by Marta GÃ³mez.

: Ensure that trailing  tokenize.TokenInfo
objects emitted by the  module are reported as in Python
3.11. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 24)

: Ensure that the  attribute in
tokenize.TokenInfo objects in the  module are
always correct. Patch by Pablo Galindo

: Fix signature for the new __release_buffer__()
slot. Patch by Jelle Zijlstra.

: Starting new threads and process creation through
 during interpreter shutdown (such as from 
handlers) is no longer supported.  It can lead to race condition between
the main Python runtime thread freeing thread states while internal
 routines are trying to allocate and use the state of just
created threads. Or forked children trying to use the mid-shutdown runtime
and thread state in the child process.

: Fix crash when accessing the __module__ attribute of type
aliases defined outside a module. Patch by Jelle Zijlstra.

: Tokens emitted by the  module do not include an
implicit  character in the  attribute anymore. Patch by
Pablo Galindo

: If a generator returns a value upon being closed, the value is
now returned by generator.close().

: Raise RuntimeWarning for unawaited async generator
methods like ,  and
. Patch by Kumar Aditya.

: Add a better, more introspect-able error message when setting
attributes on classes without a  and no slot member for the
attribute.

================================================================================

# Changelog - Core and Builtins (Part 25)

: Update the Python pickle module implementation to match the C
implementation of the pickle module. For objects setting reduction methods
like __reduce_ex__() or __reduce__() to
, pickling will result in a .

: Improve error handling when read  data.

: Specializes calls to most Python classes. Specifically, any
class that inherits from , or another Python class, and does not
override .

The specialized instruction does the following:

List:
Creates the object (by calling object.__new__)
Pushes a shim frame to the frame stack (to cleanup after )
Pushes the frame for  to the frame stack

Creates the object (by calling object.__new__)

Pushes a shim frame to the frame stack (to cleanup after )

Pushes the frame for  to the frame stack

Speeds up the instantiation of most Python classes.

================================================================================

# Changelog - Library (Part 1)

List:
: âs CLI now ignores BrokenPipeError,
making it exit normally if its output is being piped and the pipe closes.
: The  module is now a package, instead of a
single-file module.
: Micro-optimization: Avoid calling ,  in
BaseEventLoop._run_once().
: Added asyncio.EventLoop for use with the
asyncio.run() loop_factory kwarg to avoid calling the asyncio
policy system.
: runtime-checkable 
used to consider __match_args__ a protocol member in
__instancecheck__ if it was present on the protocol. Now, this
attribute is ignored if it is present.
: Fix a couple of issues in pathlib.PurePath.with_name(): a
single dot was incorrectly considered a valid name, and in
PureWindowsPath, a name with an NTFS alternate data stream, like
, was incorrectly considered invalid.
: Fix a bug in _sre.compile() where  would
be overwritten by OverflowError when the  argument was a list
of non-ints.
: Prevent  from crashing when trying to display
undisplayable objects
: Deprecation warning about non-integer number in 
now always refers to the line in the user code where gettext function or
method is used. Previously it could refer to a line in  code.
: Deprecate non-standard format specifier âNâ for
decimal.Decimal. It was not documented and only supported in the
C implementation.
: contextmanager() and
asynccontextmanager() context managers now close an
invalid underlying generator object that yields more then one value.
: In , set convenience variable $_exception for
post mortem debugging.
: Fix termios.tcsetattr() bug that was overwriting existing
errors during parsing integers from  list.
: Slightly improve the import time of several standard-library
modules by deferring imports of  within those modules.
Patch by Alex Waygood.
: dataclasses.replace() now raises TypeError instead of
ValueError if specify keyword argument for a field declared with
init=False or miss keyword argument for required InitVar field.
: Add --inline-caches flag to  command line.
: Fix a Python 3.12 regression in the import time of
. Patch by Alex Waygood.
: Add support of struct sequence objects in copy.replace().
Patched by Xuehai Pan.
: multiprocessing, concurrent.futures,
compileall: Replace os.cpu_count() with
os.process_cpu_count() to select the default number of worker
threads and processes. Get the CPU affinity if supported. Patch by Victor
Stinner.
: Fix base case handling in statistics.quantiles.  Now allows a
single data point.
: On Windows, multiprocessing Popen.terminate() now catches
PermissionError and get the process exit code. If the process is
still running, raise again the PermissionError. Otherwise, the
process terminated as expected: store its exit code. Patch by Victor
Stinner.
: Fixed an issue that caused KqueueSelector.select() to not
return all the ready events in some cases when a file descriptor is
registered for both read and write.
: Update the  module to support the new scopes
introduced by .
: Add new variables to sysconfig.get_config_vars() on
Windows: , , , , and
.
:  functions such as re.findall(),
re.split(), re.search() and  which perform short
repeated matches can now be interrupted by user.
: Reduce the import time of email.utils by around 43%.
This results in the import time of email.message falling by around
18%, which in turn reduces the import time of importlib.metadata by
around 6%. Patch by Alex Waygood.
: Fix reprlib.recursive_repr() not copying
__type_params__ from decorated function.
: concurrent.futures: The executor manager thread now
catches exceptions when adding an item to the call queue. During Python
finalization, creating a new thread can now raise RuntimeError.
Catch the exception and call terminate_broken() in this case. Patch by
Victor Stinner.
: Ensure the signature of os.path.isdir() is identical on
all platforms. Patch by Amin Alaee.
: Improve import time of  by around 13%. Patch by
Alex Waygood.
: shutil.which() will prefer files with an extension in
 if the given mode includes  on win32. If no
 match is found, a file without an extension in  can
be returned. This change will have shutil.which() act more similarly
to previous behavior in Python 3.11.
: Reduce the import time of  by over 50%. Patch by
Alex Waygood.
: Avoid deadlocking on a reentrant call to the multiprocessing
resource tracker. Such a reentrant call, though unlikely, can happen if a
GC pass invokes the finalizer for a multiprocessing object such as
SemLock.
: Reduce the import time of  by around a third.
Patch by Alex Waygood.
: Add os.process_cpu_count() function to get the number of
logical CPUs usable by the calling thread of the current process. Patch by
Victor Stinner.
: Add set_error_mode related constants in  module in
Python debug build.
: Fix  and os.DirEntry.stat(): check for
exceptions. Previously, on Python built in debug mode, these functions
could trigger a fatal Python error (and abort the process) when a function
succeeded with an exception set. Patch by Victor Stinner.
: Expose the type of PyCapsule objects as types.CapsuleType.
: You can now get the raw TLS certificate chains from TLS
connections via ssl.SSLSocket.get_verified_chain() and
ssl.SSLSocket.get_unverified_chain() methods.
Contributed by Mateusz Nowak.

================================================================================

# Changelog - Library (Part 2)

: Update unicodedata database to Unicode 15.1.0.
: Remove unnecessary  check during
typing.TypedDict creation.
: Remove unnecessary extra  in
's pure python implementation to reduce memory
size, as they are defined in the superclass. Patch by James Hilton-Balfe
: : Use a context manager for lock acquisition.
: http.server.CGIHTTPRequestHandler has been deprecated
for removal in 3.15.  Its design is old and the web world has long since
moved beyond CGI.
: Fix error when it was possible to inherit a frozen dataclass
from multiple parents some of which were possibly not frozen.
: The   command now prevents registering
aliases without arguments.
: Deprecate the dis.HAVE_ARGUMENT field in favour of
dis.hasarg.
: Fix a race condition in concurrent.futures. When a process
in the process pool was terminated abruptly (while the future was running
or pending), close the connection write end. If the call queue is blocked
on sending bytes to a worker process, closing the connection write end
interrupts the send, so the queue can be closed. Patch by Victor Stinner.
: The codecs.CodecInfo object has been made copyable and
pickleable. Patched by Robert Lehmann and Furkan Onder.
: pathlib.Path.resolve() now treats symlink loops like
other errors: in strict mode,  is raised, and in non-strict
mode, no exception is raised.
: Attempts to pickle or create a shallow or deep copy of
 streams now raise a TypeError. Previously, copying failed
with a RecursionError, while pickling produced wrong results that
eventually caused unpickling to fail with a RecursionError.
: Add support of types.SimpleNamespace in
copy.replace().
: : Replace  with  for
parsing command line arguments.
: Enable  editing features in the sqlite3
command-line interface (  ).
: Fix _thread.start_new_thread() race condition. If a
thread is created during Python finalization, the newly spawned thread now
exits immediately instead of trying to access freed memory and lead to a
crash. Patch by Victor Stinner.
: Enum: require  or  to create an empty
enum using the functional syntax.
: Exceptions raised by os.utime builtin function now include the
related filename
: Fix an issue in ast.unparse() when unparsing f-strings
containing many quote types.
: ast.unparse() now supports new  syntax
introduced in Python 3.12. Note that the  quotes are
reselected for simplicity under the new syntax. (Patch by Steven Sun)
: Add copy.replace() function which allows to create a
modified copy of an object. It supports named tuples, dataclasses, and
many other objects.
: Enum: raise  if super().__new__() is called
from a custom .
: Deprecate passing the callback callable by keyword for the
following sqlite3.Connection APIs:

================================================================================

# Changelog - Library (Part 3)

set_authorizer()
set_progress_handler()
set_trace_callback()

The affected parameters will become positional-only in Python 3.15.
Patch by Erlend E. Aasland.

: Fix concurrent.futures.ProcessPoolExecutor deadlock
: Fix crashes related to use of weakrefs on
typing.TypeVar.
: Make expressions/statements work as expected in pdb
: Add os.timerfd_create(), os.timerfd_settime(),
os.timerfd_gettime(), os.timerfd_settime_ns(), and
os.timerfd_gettime_ns() to provide a low level interface for Linuxâs
timer notification file descriptor.
: : extraction of members with overly large UID or
GID (e.g. on an OS with 32-bit ) now fails in the same way
as failing to set the ID.
: Fix support for virtual tables in
sqlite3.Connection.iterdump(). Patch by Aviv Palivoda.
: Fix a regression introduced in  for 3.12, resulting in
an incorrect offset calculation in gzip.GzipFile.seek().
: time.sleep() now raises an auditing event.
: Deprecate passing name, number of arguments, and the callable
as keyword arguments, for the following sqlite3.Connection APIs:

create_function()
create_aggregate()

The affected parameters will become positional-only in Python 3.15.
Patch by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 4)

: Speed-up NormalDist.samples() by using the inverse CDF method
instead of calling random.gauss().
: Add the ability for venv to create a .gitignore file which
causes the created environment to be ignored by Git. It is on by default
when venv is called via its CLI.
: Harmonized the pure Python version of
OrderedDict with the C version. Now, both versions
set up their internal state in .  Formerly, the pure Python
version did the set up in .
: Fix bugs in the constructor of sqlite3.Connection and
sqlite3.Connection.close() where exceptions could be leaked. Patch
by Erlend E. Aasland.
: Fix  module to properly report and display bytecode that
do not have source lines.
:  now emits an ResourceWarning if a
sqlite3.Connection object is not  explicitly. Patch by Erlend E. Aasland.
: The __module__ attribute on instances of
functools.cached_property is now set to the name of the module in
which the cached_property is defined, rather than âfunctoolsâ. This means
that doctests in cached_property docstrings are now properly collected
by the  module. Patch by Tyler Smart.
: Fix multiprocessing.set_forkserver_preload() to check the
given list of modules names. Patch by Donghee Na.
: Fixes os.path.normpath() to handle embedded null
characters without truncating the path.
: xml.dom.minidom now only quotes  in attributes.
: xml.dom.minidom now preserves whitespaces in attributes.
: Passing more than one positional argument to
sqlite3.connect() and the sqlite3.Connection constructor is
deprecated. The remaining parameters will become keyword-only in Python
3.15. Patch by Erlend E. Aasland.
: Add merge_extra parameter/feature to
logging.LoggerAdapter
: Fix possible losses of  and  values in
 exceptions if they were cleared or modified by the cleanup
code before creating the exception object.
: tarfile.data_filter() now takes the location of symlinks
into account when determining their target, so it will no longer reject
some valid tarballs with LinkOutsideDestinationError.
: Extend socketâs netlink support to the FreeBSD platform.
: Fix signatures of module-level generated functions in
.
:  is now able to show signatures which are not
representable in Python, e.g. for  and .
: Deprecate passing optional arguments ,  and
 in module-level functions re.split(),  and
 as positional. They should only be passed by keyword.
: Speed up logging.getHandlerNames().
: Fix doctest.DocTestFinder.find() in presence of class
names with special characters. Patch by Gertjan van Zwieten.
: Passing a callable object as an option value to a Tkinter image
now raises the expected TclError instead of an AttributeError.
: Add  widget methods: tk_busy_hold(),
tk_busy_configure(), tk_busy_cget(),
tk_busy_forget(), tk_busy_current(), and
tk_busy_status().
: Raise ResourceWarning when asyncio.StreamWriter
is not closed leading to memory leaks. Patch by Kumar Aditya.
: Add pathlib.Path.from_uri() classmethod.
: Seems that in some conditions, OpenSSL will return
SSL_ERROR_SYSCALL instead of SSL_ERROR_SSL when a certification
verification has failed, but the error parameters will still contain
ERR_LIB_SSL and SSL_R_CERTIFICATE_VERIFY_FAILED. We are now
detecting this situation and raising the appropriate
ssl.SSLCertVerificationError. Patch by Pablo Galindo
: Fix types.get_original_bases() to only return
__orig_bases__ if it is present on  directly. Patch by
James Hilton-Balfe.
: Remove opcode.is_pseudo, opcode.MIN_PSEUDO_OPCODE and
opcode.MAX_PSEUDO_OPCODE, which were added in 3.12, were never
documented and were not intended to be used externally.
: opcode.ENABLE_SPECIALIZATION (which was added in 3.12
but never documented or intended for external usage) is moved to
_opcode.ENABLE_SPECIALIZATION where tests can access it.
: tarfiles; Fixed use before assignment of self.exception for
gzip decompression
: Set __wrapped__ attribute in
reprlib.recursive_repr().
: Implement new __repr__() method for
struct.Struct. Now it returns Struct(<format .
: Optimize textwrap.indent(). It is ~30% faster for large
input. Patch by Inada Naoki.
: Fix issue where pathlib.Path.iterdir() did not raise
 until iterated.
: Deprecate typing.AnyStr in favor of the new Type
Parameter syntax. See PEP 695.
: Make gettext.pgettext() search plural definitions when
translation is not found.
: Shelves opened with shelve.open() have a much faster
 method. Patch by James Cave.
: Fix overflow on 32-bit systems with 
os.sendfile() implementation.
: Document behavior of shutil.disk_usage() for non-mounted
filesystems on Unix.
: Use lowercase   and   in
smptlib.SMTP.
: Do not report MultipartInvariantViolationDefect defect when
the email.parser.Parser class is used to parse emails with
headersonly=True.
: Fix invalid result from PurePath.relative_to() method
when attempting to walk a ââ segment in  with 
enabled. A ValueError exception is now raised in this case.
: Add the rtype_cache to the warning message (as an addition
to the type of leaked objects and the number of leaked objects already
included in the message) to make debugging leaked objects easier when the
multiprocessing resource tracker process finds leaked objects at shutdown.
This helps more quickly identify what was leaked and/or why the leaked
object was not properly cleaned up.
: Optimize SelectSelector.select() for many iteration case.
Patch By Donghee Na.
: Optimize _PollLikeSelector.select() for many iteration
case.
: Optimize KqueueSelector.select() for many iteration case.
Patch By Donghee Na.
: Fix potential missing  check of d2i_SSL_SESSION
result in .
: The various opcode lists in the  module are now
generated from bytecodes.c instead of explicitly constructed in opcode.py.
: Make inspect.getsource() smarter for class for same name
definitions
: Remove import of  from .
: Added  to
contextlib.AbstractContextManager and
contextlib.AbstractAsyncContextManager so that child classes can
use .
: Update the bundled copy of pip to version 23.2.1.
: : Optimize EpollSelector.select() code by
moving some code outside of the loop.
: Fixed several bugs in zipfile.Path, including: in
zipfile.Path.match(), Windows separators are no longer honored (and
never were meant to be); Fixed ///
operations when no filename is present and the Path is not at the root of
the zipfile; Reworked glob for performance and more correct matching
behavior.
: Remove call to SSL_CTX_set_session_id_context during client
side context creation in the  module.
: Disable tab completion in multiline mode of 
: Expose opcode metadata through .
: Add the new exceptions command to the Pdb debugger. It
makes it possible to move between chained exceptions when using post
mortem debugging.
: Add __copy__ and __deepcopy__ in 
: : Add _SelectorMapping.get() method and
optimize _SelectorMapping.__getitem__().
: Speed up parsing of emails by about 20% by not compiling a new
regular expression for every single email.
: Set the environment variable VIRTUAL_ENV_PROMPT at
 activation, even when VIRTUAL_ENV_DISABLE_PROMPT is set.
: Revert a change to colorsys.rgb_to_hls() that caused
division by zero for certain almost-white inputs.  Patch by Terry Jan
Reedy.
: Fix exit code for  if all tests are skipped. Patch
by Egor Eliseev.
: Optimize  (pattern which always fails) in regular
expressions.
: : Reduce Selector overhead by using a
dict.get() to lookup file descriptors.
: Remove ref cycle in callers of
convert_to_error() by deleting 
from scope in a  block.
: Add pathlib.PurePath.pathmod class attribute that
stores the implementation of  used for low-level path
operations: either  or .
: Reduce overhead to add and remove  readers and
writers.
: Fix crash in _sre.template() with templates containing
invalid group indices.
: Removed  and the names it provided from
importlib.resources: , , is_resource,
open_binary, , , read_binary, and
.
:  module: fix the matching of possessive quantifiers in
the case of a subpattern containing backtracking.
: Improve debug output for atomic groups in regular expressions.
: Fix ref cycle in asyncio._SelectorSocketTransport by
removing _write_ready in .
: Fix flag mask inversion when unnamed flags exist.
: Prevent multiprocessing.spawn from failing to  in
environments where sys.executable is .  This regressed in 3.11
with the addition of support for path-like objects in multiprocessing.
: Instances of typing.TypeVar,
typing.ParamSpec, typing.ParamSpecArgs,
typing.ParamSpecKwargs, and typing.TypeVarTuple once
again support weak references, fixing a regression introduced in Python
3.12.0 beta 1. Patch by Jelle Zijlstra.
: Add private pathlib._PathBase class, which provides
experimental support for virtual filesystems, and may be made public in a
future version of Python.
: Check for an instance-dict cached value in the 
method of functools.cached_property(). This better matches the
pre-3.12 behavior and improves compatibility for users subclassing
functools.cached_property() and adding a  method.
: Detect possible memory allocation failure in the libtommath
function  used by the  module.
: Fix incorrect matching of empty paths in
pathlib.PurePath.match(). This bug was introduced in Python 3.12.0
beta 1.
: Deprecate typing.no_type_check_decorator(). No major type
checker ever added support for this decorator. Patch by Alex Waygood.
: Make pydoc.doc() catch bad module ImportError when
output stream is not .
: Fix crash when calling  with a manually constructed
SignalDict object. Patch by Charlie Zhao.
: Replace  statements with  RuntimeError in
, so that _DummyThread cannot be joined even with
.
: Fix rare concurrency bug in lock acquisition by the logging
package.
: Added PY_THROW event hook for  for generators
: Added asyncio.taskgroups.__all__ to asyncio.__all__ for
export in star imports.
: Zipapp will now skip over appending an archive to itself.
: Improve the error message from os.fspath() if called on
an object where __fspath__ is set to . Patch by Alex Waygood.
: Fix crash due to improper reference counting in 
eager task factory internal routines.
: Fix bug where a typing.Protocol class that had one or
more non-callable members would raise  when
issubclass() was called against it, even if it defined a custom
__subclasshook__ method. The behaviour in Python 3.11 and lower â
which has now been restored â was not to raise  in these
situations if a custom __subclasshook__ method was defined. Patch by
Alex Waygood.
: Reverted addition of json.AttrDict.
: Add pathlib.UnsupportedOperation, which is raised instead
of NotImplementedError when a path operation isnât supported.
: Fix a regression introduced in  for 3.12, causing
gzip.GzipFile.flush() to not flush the compressor (nor pass along
the  argument).
: stack_effect() no longer raises an exception if an
 is provided for an  that doesnât use its arg, or when
it is not provided for an  that does use it. In the latter case,
the stack effect is returned for .
: Enable ast.unparse() to unparse function and class
definitions created without the new type_params field from .
Patch by Jelle Zijlstra.
: Add follow_symlinks keyword-only argument to
pathlib.Path.is_dir() and , defaulting
to .
: Deprecate two methods of creating typing.TypedDict
classes with 0 fields using the functional syntax:  
TypedDict("TD") and   TypedDict("TD", . Both will be
disallowed in Python 3.15. To create a  class with 0 fields,
either use  TD(TypedDict):  or   TypedDict("TD", .
: Fix webbrowser.Konqueror.open method.
: : Deprecate undocumented
ctypes.SetPointerType() and ctypes.ARRAY() functions. Patch
by Victor Stinner.
: Remove deprecated re.template, , re.TEMPLATE,
sre_constans.SRE_FLAG_TEMPLATE.
: Supporting asyncio.Task.set_name() is now mandatory for
third party task implementations. The undocumented _set_task_name()
function (deprecated since 3.8) has been removed. Patch by Kumar Aditya.
: Fix a bug in _Unpickler_SetInputStream() where an
exception could end up being overwritten in case of failure.
: Change the default return value of
http.client.HTTPConnection.get_proxy_response_headers() to be
 and not .
: Fix bugs in  where exceptions could end up being
overwritten because of deferred error handling.
: Harden  error handling during module
initialisation to prevent exceptions from possibly being overwritten, and
objects from being dereferenced twice.
: Fix bug in  where an exception could end up being
overwritten.
: Fix bugs in  where exceptions could be
overwritten in case of module initialisation failure.
: Fix bugs in  initialisation which could lead to
leaked references and overwritten exceptions.
: Fix a bug in array.array where an exception could end
up being overwritten.
: Fix bugs in  where exceptions could end up being
overwritten.
: Fix a bug in the  module where an exception could
be overwritten.
: Fix bugs in _elementtree where exceptions could be
overwritten.
: Fix bugs in  where exceptions could be
overwritten.
: Fix bugs in  where exceptions could be overwritten.
: Deprecate creating a typing.NamedTuple class using
keyword arguments to denote the fields (  NamedTuple("NT", 
). This will be disallowed in Python 3.15. Use the class-based
syntax or the functional syntax instead.
Two methods of creating NamedTuple classes with 0 fields using the
functional syntax are also deprecated, and will be disallowed in Python
3.15:   NamedTuple("NT") and   NamedTuple("NT", . To
create a NamedTuple class with 0 fields, either use 
NT(NamedTuple):  or   NamedTuple("NT", .

================================================================================

# Changelog - Library (Part 5)

: Remove deprecated in 3.11 webbrowser.MacOSXOSAScript._name
attribute.
: Fix flag inversion when alias/mask members exist.
: typing.Annotated is now implemented as an instance of
typing._SpecialForm rather than a class. This should have no
user-facing impact for users of the  module public API.
: Fix bugs in  where exceptions could be
overwritten.
: Emit FutureWarning from pathlib.Path.glob() and
 if the given pattern ends with ââ. In a
future Python release, patterns with this ending will match both files and
directories. Add a trailing slash to only match directories.
: Fix a bug in  where an exception could be
overwritten in the 
callback.
: Remove ,  and  parameters of the
urllib.request.urlopen() function, deprecated in Python 3.6. Patch
by Victor Stinner.
: : Remove undocumented and untested
Logger.warn() and LoggerAdapter.warn() methods and
logging.warn() function. Deprecated since Python 3.3, they were
aliases to the logging.Logger.warning() method,
logging.LoggerAdapter.warning() method and logging.warning()
function. Patch by Victor Stinner.
: Revert pickling method from by-name back to by-value.
: Add RTSPS scheme support in urllib.parse
: Add option to traceback.format_exception_only() to
recurse into the nested exception of a BaseExceptionGroup.
: Fix bug where isinstance([], collections.abc.Mapping) could
evaluate to  if garbage collection happened at the wrong time. The
bug was caused by changes to the implementation of
typing.Protocol in Python 3.12.
: : Add  typecode that represents .
: Fix longstanding bug where issubclass(object,
typing.Protocol) would evaluate to  in some edge cases. Patch by
Alex Waygood.
: In the beta 1 release we added a utility function for extension
module authors, to use when testing their module for support in multiple
interpreters or under a per-interpreter GIL.  The name of that function
has changed from allowing_all_extensions to
_incompatible_extension_module_restrictions.  The default for the
âdisable_checkâ argument has change from  to , to better
match the new function name.
: Fixed inconsistent signature on derived classes for
inspect.signature()
: Fix a recent regression in the  module. The
regression meant that doing   typing.Protocol), where 
was a class that had abc.ABCMeta as its metaclass, would then
cause subsequent isinstance(1,  calls to erroneously raise
. Patch by Alex Waygood.
: The  finalizer now logs the  method
errors with sys.unraisablehook. Previously, errors were ignored
silently by default, and only logged in Python Development Mode or on Python built on debug mode.  Patch
by Victor Stinner.
: : Deprecate the ,  and
getmarkers() methods of the wave.Wave_read and
wave.Wave_write classes. They will be removed in Python 3.15.
Patch by Victor Stinner.
: Remove the untested and undocumented
unittest.TestProgram.usageExit() method, deprecated in Python 3.11.
Patch by Hugo van Kemenade.
: Improve performance of pathlib.PurePath initialisation
by deferring joining of paths when multiple arguments are given.
: Deprecate undocumented copy/deepcopy/pickle support for
itertools.
: Fix pathlib.PurePosixPath(pathlib.PureWindowsPath(...)) not
converting path separators to restore 3.11 compatible behavior.
: Make comparisons between pathlib.PureWindowsPath
objects consistent across Windows and Posix to match 3.11 behavior.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in Python
3.11. Patch by Victor Stinner.
: Fix bugs with the interaction between
typing.runtime_checkable() and typing.Generic that were
introduced by the  implementation. Patch by Jelle Zijlstra.
: : Remove the  module and its private
 extension, deprecated in Python 3.11. Patch by Victor
Stinner.
: : Remove the  module, deprecated in Python
3.11. Patch by Victor Stinner.
: Add missing  to os.PathLike.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: Remove the undocumented
configparser.LegacyInterpolation class, deprecated in the
docstring since Python 3.2, and with a deprecation warning since Python
3.11. Patch by Hugo van Kemenade.
: Remove kwargs-based typing.TypedDict creation
: Remove the turtle.RawTurtle.settiltangle() method,
deprecated in docs since Python 3.1 and with a deprecation warning since
Python 3.11. Patch by Hugo van Kemenade.
: : Removed the  package, deprecated in
Python 3.11.
: : Remove the  module, deprecated in
Python 3.11: the python-pam project can be used instead. Patch by
Victor Stinner.
: Removed the tkinter.tix module, deprecated since Python 3.6.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the ossaudiodev module, deprecated
in Python 3.11. Patch Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: Add typing.get_protocol_members() to return the set of
members defining a typing.Protocol.  Add
typing.is_protocol() to check whether a class is a
typing.Protocol. Patch by Jelle Zijlstra.
: Document the  and __supertype__ attributes of
typing.NewType. Patch by Jelle Zijlstra.
: Removed the following  functions, deprecated in
Python 3.11:

================================================================================

# Changelog - Library (Part 6)

unittest.findTestCases()
unittest.makeSuite()
unittest.getTestCaseNames()

Use TestLoader methods instead:

unittest.TestLoader.loadTestsFromModule()
unittest.TestLoader.loadTestsFromTestCase()
unittest.TestLoader.getTestCaseNames()

Patch by Hugo van Kemenade.

================================================================================

# Changelog - Library (Part 7)

: Remove the untested and undocumented webbrowser
 class, deprecated in Python 3.11. Patch by Hugo van
Kemenade.
: Support for using pathlib.Path objects as context
managers has been removed. Before Python 3.9, exiting the context manager
marked a path as âclosedâ, which caused some (but not all!) methods to
raise when called. Since Python 3.9, using a path as a context manager
does nothing.
: Adjust the location of the (see ) type_params
field on ast.ClassDef, ast.AsyncFunctionDef, and
ast.FunctionDef to better preserve backward compatibility. Patch
by Jelle Zijlstra
: Allow typing.Protocol classes to inherit from
collections.abc.Buffer. Patch by Jelle Zijlstra.
: Remove locale.resetlocale() function deprecated in Python
3.11. Patch by Victor Stinner.
: Remove the  program and the  module,
deprecated in Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: : Remove the  and  modules,
deprecated in Python 3.11. Patch by Victor Stinner.
: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.
: On Linux where subprocess can use the 
syscall for faster spawning, prevent the parent process from blocking
other threads by dropping the GIL while it waits for the vforkâed child
process  outcome. This prevents spawning a binary from a slow
filesystem from blocking the rest of the application.
: We now release the GIL around built-in 
computations of reasonable size for the SHA families and MD5 hash
functions, matching what our OpenSSL backed hash computations already
does.
: Improve performance of pathlib.Path.glob() when expanding
a pattern with a non-terminal ââ component by filtering walked paths
through a regular expression, rather than calling os.scandir() more
than once on each directory.
: Prepare the  module for building with Tcl 9.0 and
future libtommath by replacing usage of deprecated functions
mp_to_unsigned_bin_n() and mp_unsigned_bin_size() when
necessary.
: Add fields start_offset, cache_offset, end_offset,
baseopname, baseopcode, jump_target and  to
dis.Instruction.
: Fixed  argument validation mechanism of
. Improved test coverage.
: Provide helpful usage messages when parsing incorrect
 commands.
: Generalize the regex pattern BaseConfigurator.INDEX_PATTERN
to allow spaces and non-alphanumeric characters in keys.
: Added multiline statement support for 
: Forbid using builtins.issubclass() with
types.GenericAlias as the first argument.
: Fix cache repopulation semantics of
zipimport.invalidate_caches(). The cache is now repopulated upon
retrieving files with an invalid cache, not when the cache is invalidated.
: Fix a bug that causes wrong matches for regular expressions
with possessive qualifier.
: Add follow_symlinks argument to pathlib.Path.glob() and
, defaulting to false.
: Hide traceback in  prompt, when import failed.
: Added a stream mode to  that allows for reading
archives without caching info about the inner files.
: Deprecate passing any arguments to threading.RLock().
: Refactored zipfile._strip_extra to use higher level
abstractions for extras instead of a heavy-state loop.
: Reduce calls of _idle_semaphore.release() in
concurrent.futures.thread._worker().
: Add support for recursive wildcards in
pathlib.PurePath.match().
: unittest.TestLoader no longer loads test cases from
exact unittest.TestCase and unittest.FunctionTestCase
classes.
: Restore following CPython <= 3.10.5 behavior of
shutil.make_archive(): do not create an empty archive if
 is not a directory, and, in that case, raise
FileNotFoundError or NotADirectoryError regardless of
 choice. Beyond the brought-back behavior, the function may now
also raise these exceptions in  mode.
: Emit DeprecationWarning for âs  type
code, deprecated in docs since Python 3.3.
: unittest.mock.create_autospec() now properly returns
coroutine functions compatible with inspect.iscoroutinefunction()
: Fix hanging multiprocessing ProcessPoolExecutor when
a child process crashes while data is being written in the call queue.
: Remove the  and  namespaces,
deprecated since Python 3.8. All items are still available from the main
 module.
: Improve the textual representation of IPv4-mapped IPv6
addresses ( Sections 2.2, 2.5.5.2) in . Patch
by Oleksandr Pavliuk.
: Improve performance of operator.methodcaller() using the
 vectorcall convention. Patch by Anthony Lee and Pieter
Eendebak.
: unittest.mock.mock_open() will call the 
method of the file handle mock when it is exiting from the context
manager. Patch by Samet Yaslan.
: Improve performance of functools.singledispatchmethod
by caching the generated dispatch wrapper. Optimization suggested by
frederico. Patch by @mental32, Alex Waygood and Pieter Eendebak.
: unittest.mock speccing no longer calls class properties.
Patch by Melanie Witt.
: Ensure gettext(msg) retrieve translations even if a plural
form exists. In other words: gettext(msg)  ngettext(msg,  .
: Add ThreadingMock to unittest.mock that can be used
to create Mock objects that can wait until they are called. Patch by
Karthikeyan Singaravelan and Mario Corchero.

================================================================================

# Changelog - Library (Part 8)

: âs CLI now ignores BrokenPipeError,
making it exit normally if its output is being piped and the pipe closes.

: The  module is now a package, instead of a
single-file module.

: Micro-optimization: Avoid calling ,  in
BaseEventLoop._run_once().

: Added asyncio.EventLoop for use with the
asyncio.run() loop_factory kwarg to avoid calling the asyncio
policy system.

: runtime-checkable 
used to consider __match_args__ a protocol member in
__instancecheck__ if it was present on the protocol. Now, this
attribute is ignored if it is present.

: Fix a couple of issues in pathlib.PurePath.with_name(): a
single dot was incorrectly considered a valid name, and in
PureWindowsPath, a name with an NTFS alternate data stream, like
, was incorrectly considered invalid.

: Fix a bug in _sre.compile() where  would
be overwritten by OverflowError when the  argument was a list
of non-ints.

: Prevent  from crashing when trying to display
undisplayable objects

: Deprecation warning about non-integer number in 
now always refers to the line in the user code where gettext function or
method is used. Previously it could refer to a line in  code.

================================================================================

# Changelog - Library (Part 9)

: Deprecate non-standard format specifier âNâ for
decimal.Decimal. It was not documented and only supported in the
C implementation.

: contextmanager() and
asynccontextmanager() context managers now close an
invalid underlying generator object that yields more then one value.

: In , set convenience variable $_exception for
post mortem debugging.

: Fix termios.tcsetattr() bug that was overwriting existing
errors during parsing integers from  list.

: Slightly improve the import time of several standard-library
modules by deferring imports of  within those modules.
Patch by Alex Waygood.

: dataclasses.replace() now raises TypeError instead of
ValueError if specify keyword argument for a field declared with
init=False or miss keyword argument for required InitVar field.

: Add --inline-caches flag to  command line.

: Fix a Python 3.12 regression in the import time of
. Patch by Alex Waygood.

: Add support of struct sequence objects in copy.replace().
Patched by Xuehai Pan.

================================================================================

# Changelog - Library (Part 10)

: multiprocessing, concurrent.futures,
compileall: Replace os.cpu_count() with
os.process_cpu_count() to select the default number of worker
threads and processes. Get the CPU affinity if supported. Patch by Victor
Stinner.

: Fix base case handling in statistics.quantiles.  Now allows a
single data point.

: On Windows, multiprocessing Popen.terminate() now catches
PermissionError and get the process exit code. If the process is
still running, raise again the PermissionError. Otherwise, the
process terminated as expected: store its exit code. Patch by Victor
Stinner.

: Fixed an issue that caused KqueueSelector.select() to not
return all the ready events in some cases when a file descriptor is
registered for both read and write.

: Update the  module to support the new scopes
introduced by .

: Add new variables to sysconfig.get_config_vars() on
Windows: , , , , and
.

:  functions such as re.findall(),
re.split(), re.search() and  which perform short
repeated matches can now be interrupted by user.

================================================================================

# Changelog - Library (Part 11)

: Reduce the import time of email.utils by around 43%.
This results in the import time of email.message falling by around
18%, which in turn reduces the import time of importlib.metadata by
around 6%. Patch by Alex Waygood.

: Fix reprlib.recursive_repr() not copying
__type_params__ from decorated function.

: concurrent.futures: The executor manager thread now
catches exceptions when adding an item to the call queue. During Python
finalization, creating a new thread can now raise RuntimeError.
Catch the exception and call terminate_broken() in this case. Patch by
Victor Stinner.

: Ensure the signature of os.path.isdir() is identical on
all platforms. Patch by Amin Alaee.

: Improve import time of  by around 13%. Patch by
Alex Waygood.

: shutil.which() will prefer files with an extension in
 if the given mode includes  on win32. If no
 match is found, a file without an extension in  can
be returned. This change will have shutil.which() act more similarly
to previous behavior in Python 3.11.

: Reduce the import time of  by over 50%. Patch by
Alex Waygood.

================================================================================

# Changelog - Library (Part 12)

: Avoid deadlocking on a reentrant call to the multiprocessing
resource tracker. Such a reentrant call, though unlikely, can happen if a
GC pass invokes the finalizer for a multiprocessing object such as
SemLock.

: Reduce the import time of  by around a third.
Patch by Alex Waygood.

: Add os.process_cpu_count() function to get the number of
logical CPUs usable by the calling thread of the current process. Patch by
Victor Stinner.

: Add set_error_mode related constants in  module in
Python debug build.

: Fix  and os.DirEntry.stat(): check for
exceptions. Previously, on Python built in debug mode, these functions
could trigger a fatal Python error (and abort the process) when a function
succeeded with an exception set. Patch by Victor Stinner.

: Expose the type of PyCapsule objects as types.CapsuleType.

: You can now get the raw TLS certificate chains from TLS
connections via ssl.SSLSocket.get_verified_chain() and
ssl.SSLSocket.get_unverified_chain() methods.

Contributed by Mateusz Nowak.

: Update unicodedata database to Unicode 15.1.0.

: Remove unnecessary  check during
typing.TypedDict creation.

================================================================================

# Changelog - Library (Part 13)

: Remove unnecessary extra  in
's pure python implementation to reduce memory
size, as they are defined in the superclass. Patch by James Hilton-Balfe

: : Use a context manager for lock acquisition.

: http.server.CGIHTTPRequestHandler has been deprecated
for removal in 3.15.  Its design is old and the web world has long since
moved beyond CGI.

: Fix error when it was possible to inherit a frozen dataclass
from multiple parents some of which were possibly not frozen.

: The   command now prevents registering
aliases without arguments.

: Deprecate the dis.HAVE_ARGUMENT field in favour of
dis.hasarg.

: Fix a race condition in concurrent.futures. When a process
in the process pool was terminated abruptly (while the future was running
or pending), close the connection write end. If the call queue is blocked
on sending bytes to a worker process, closing the connection write end
interrupts the send, so the queue can be closed. Patch by Victor Stinner.

: The codecs.CodecInfo object has been made copyable and
pickleable. Patched by Robert Lehmann and Furkan Onder.

================================================================================

# Changelog - Library (Part 14)

: pathlib.Path.resolve() now treats symlink loops like
other errors: in strict mode,  is raised, and in non-strict
mode, no exception is raised.

: Attempts to pickle or create a shallow or deep copy of
 streams now raise a TypeError. Previously, copying failed
with a RecursionError, while pickling produced wrong results that
eventually caused unpickling to fail with a RecursionError.

: Add support of types.SimpleNamespace in
copy.replace().

: : Replace  with  for
parsing command line arguments.

: Enable  editing features in the sqlite3
command-line interface (  ).

: Fix _thread.start_new_thread() race condition. If a
thread is created during Python finalization, the newly spawned thread now
exits immediately instead of trying to access freed memory and lead to a
crash. Patch by Victor Stinner.

: Enum: require  or  to create an empty
enum using the functional syntax.

: Exceptions raised by os.utime builtin function now include the
related filename

: Fix an issue in ast.unparse() when unparsing f-strings
containing many quote types.

================================================================================

# Changelog - Library (Part 15)

: ast.unparse() now supports new  syntax
introduced in Python 3.12. Note that the  quotes are
reselected for simplicity under the new syntax. (Patch by Steven Sun)

: Add copy.replace() function which allows to create a
modified copy of an object. It supports named tuples, dataclasses, and
many other objects.

: Enum: raise  if super().__new__() is called
from a custom .

: Deprecate passing the callback callable by keyword for the
following sqlite3.Connection APIs:

List:
set_authorizer()
set_progress_handler()
set_trace_callback()

set_progress_handler()

The affected parameters will become positional-only in Python 3.15.

Patch by Erlend E. Aasland.

: Fix concurrent.futures.ProcessPoolExecutor deadlock

: Fix crashes related to use of weakrefs on
typing.TypeVar.

: Make expressions/statements work as expected in pdb

: Add os.timerfd_create(), os.timerfd_settime(),
os.timerfd_gettime(), os.timerfd_settime_ns(), and
os.timerfd_gettime_ns() to provide a low level interface for Linuxâs
timer notification file descriptor.

: : extraction of members with overly large UID or
GID (e.g. on an OS with 32-bit ) now fails in the same way
as failing to set the ID.

================================================================================

# Changelog - Library (Part 16)

: Fix support for virtual tables in
sqlite3.Connection.iterdump(). Patch by Aviv Palivoda.

: Fix a regression introduced in  for 3.12, resulting in
an incorrect offset calculation in gzip.GzipFile.seek().

: time.sleep() now raises an auditing event.

: Deprecate passing name, number of arguments, and the callable
as keyword arguments, for the following sqlite3.Connection APIs:

List:
create_function()
create_aggregate()

The affected parameters will become positional-only in Python 3.15.

Patch by Erlend E. Aasland.

: Speed-up NormalDist.samples() by using the inverse CDF method
instead of calling random.gauss().

: Add the ability for venv to create a .gitignore file which
causes the created environment to be ignored by Git. It is on by default
when venv is called via its CLI.

: Harmonized the pure Python version of
OrderedDict with the C version. Now, both versions
set up their internal state in .  Formerly, the pure Python
version did the set up in .

: Fix bugs in the constructor of sqlite3.Connection and
sqlite3.Connection.close() where exceptions could be leaked. Patch
by Erlend E. Aasland.

: Fix  module to properly report and display bytecode that
do not have source lines.

================================================================================

# Changelog - Library (Part 17)

:  now emits an ResourceWarning if a
sqlite3.Connection object is not  explicitly. Patch by Erlend E. Aasland.

: The __module__ attribute on instances of
functools.cached_property is now set to the name of the module in
which the cached_property is defined, rather than âfunctoolsâ. This means
that doctests in cached_property docstrings are now properly collected
by the  module. Patch by Tyler Smart.

: Fix multiprocessing.set_forkserver_preload() to check the
given list of modules names. Patch by Donghee Na.

: Fixes os.path.normpath() to handle embedded null
characters without truncating the path.

: xml.dom.minidom now only quotes  in attributes.

: xml.dom.minidom now preserves whitespaces in attributes.

: Passing more than one positional argument to
sqlite3.connect() and the sqlite3.Connection constructor is
deprecated. The remaining parameters will become keyword-only in Python
3.15. Patch by Erlend E. Aasland.

: Add merge_extra parameter/feature to
logging.LoggerAdapter

: Fix possible losses of  and  values in
 exceptions if they were cleared or modified by the cleanup
code before creating the exception object.

================================================================================

# Changelog - Library (Part 18)

: tarfile.data_filter() now takes the location of symlinks
into account when determining their target, so it will no longer reject
some valid tarballs with LinkOutsideDestinationError.

: Extend socketâs netlink support to the FreeBSD platform.

: Fix signatures of module-level generated functions in
.

:  is now able to show signatures which are not
representable in Python, e.g. for  and .

: Deprecate passing optional arguments ,  and
 in module-level functions re.split(),  and
 as positional. They should only be passed by keyword.

: Speed up logging.getHandlerNames().

: Fix doctest.DocTestFinder.find() in presence of class
names with special characters. Patch by Gertjan van Zwieten.

: Passing a callable object as an option value to a Tkinter image
now raises the expected TclError instead of an AttributeError.

: Add  widget methods: tk_busy_hold(),
tk_busy_configure(), tk_busy_cget(),
tk_busy_forget(), tk_busy_current(), and
tk_busy_status().

: Raise ResourceWarning when asyncio.StreamWriter
is not closed leading to memory leaks. Patch by Kumar Aditya.

: Add pathlib.Path.from_uri() classmethod.

================================================================================

# Changelog - Library (Part 19)

: Seems that in some conditions, OpenSSL will return
SSL_ERROR_SYSCALL instead of SSL_ERROR_SSL when a certification
verification has failed, but the error parameters will still contain
ERR_LIB_SSL and SSL_R_CERTIFICATE_VERIFY_FAILED. We are now
detecting this situation and raising the appropriate
ssl.SSLCertVerificationError. Patch by Pablo Galindo

: Fix types.get_original_bases() to only return
__orig_bases__ if it is present on  directly. Patch by
James Hilton-Balfe.

: Remove opcode.is_pseudo, opcode.MIN_PSEUDO_OPCODE and
opcode.MAX_PSEUDO_OPCODE, which were added in 3.12, were never
documented and were not intended to be used externally.

: opcode.ENABLE_SPECIALIZATION (which was added in 3.12
but never documented or intended for external usage) is moved to
_opcode.ENABLE_SPECIALIZATION where tests can access it.

: tarfiles; Fixed use before assignment of self.exception for
gzip decompression

: Set __wrapped__ attribute in
reprlib.recursive_repr().

: Implement new __repr__() method for
struct.Struct. Now it returns Struct(<format .

: Optimize textwrap.indent(). It is ~30% faster for large
input. Patch by Inada Naoki.

================================================================================

# Changelog - Library (Part 20)

: Fix issue where pathlib.Path.iterdir() did not raise
 until iterated.

: Deprecate typing.AnyStr in favor of the new Type
Parameter syntax. See PEP 695.

: Make gettext.pgettext() search plural definitions when
translation is not found.

: Shelves opened with shelve.open() have a much faster
 method. Patch by James Cave.

: Fix overflow on 32-bit systems with 
os.sendfile() implementation.

: Document behavior of shutil.disk_usage() for non-mounted
filesystems on Unix.

: Use lowercase   and   in
smptlib.SMTP.

: Do not report MultipartInvariantViolationDefect defect when
the email.parser.Parser class is used to parse emails with
headersonly=True.

: Fix invalid result from PurePath.relative_to() method
when attempting to walk a ââ segment in  with 
enabled. A ValueError exception is now raised in this case.

: Add the rtype_cache to the warning message (as an addition
to the type of leaked objects and the number of leaked objects already
included in the message) to make debugging leaked objects easier when the
multiprocessing resource tracker process finds leaked objects at shutdown.
This helps more quickly identify what was leaked and/or why the leaked
object was not properly cleaned up.

================================================================================

# Changelog - Library (Part 21)

: Optimize SelectSelector.select() for many iteration case.
Patch By Donghee Na.

: Optimize _PollLikeSelector.select() for many iteration
case.

: Optimize KqueueSelector.select() for many iteration case.
Patch By Donghee Na.

: Fix potential missing  check of d2i_SSL_SESSION
result in .

: The various opcode lists in the  module are now
generated from bytecodes.c instead of explicitly constructed in opcode.py.

: Make inspect.getsource() smarter for class for same name
definitions

: Remove import of  from .

: Added  to
contextlib.AbstractContextManager and
contextlib.AbstractAsyncContextManager so that child classes can
use .

: Update the bundled copy of pip to version 23.2.1.

: : Optimize EpollSelector.select() code by
moving some code outside of the loop.

: Fixed several bugs in zipfile.Path, including: in
zipfile.Path.match(), Windows separators are no longer honored (and
never were meant to be); Fixed ///
operations when no filename is present and the Path is not at the root of
the zipfile; Reworked glob for performance and more correct matching
behavior.

: Remove call to SSL_CTX_set_session_id_context during client
side context creation in the  module.

================================================================================

# Changelog - Library (Part 22)

: Disable tab completion in multiline mode of

: Expose opcode metadata through .

: Add the new exceptions command to the Pdb debugger. It
makes it possible to move between chained exceptions when using post
mortem debugging.

: Add __copy__ and __deepcopy__ in

: : Add _SelectorMapping.get() method and
optimize _SelectorMapping.__getitem__().

: Speed up parsing of emails by about 20% by not compiling a new
regular expression for every single email.

: Set the environment variable VIRTUAL_ENV_PROMPT at
 activation, even when VIRTUAL_ENV_DISABLE_PROMPT is set.

: Revert a change to colorsys.rgb_to_hls() that caused
division by zero for certain almost-white inputs.  Patch by Terry Jan
Reedy.

: Fix exit code for  if all tests are skipped. Patch
by Egor Eliseev.

: Optimize  (pattern which always fails) in regular
expressions.

: : Reduce Selector overhead by using a
dict.get() to lookup file descriptors.

: Remove ref cycle in callers of
convert_to_error() by deleting 
from scope in a  block.

: Add pathlib.PurePath.pathmod class attribute that
stores the implementation of  used for low-level path
operations: either  or .

: Reduce overhead to add and remove  readers and
writers.

================================================================================

# Changelog - Library (Part 23)

: Fix crash in _sre.template() with templates containing
invalid group indices.

: Removed  and the names it provided from
importlib.resources: , , is_resource,
open_binary, , , read_binary, and
.

:  module: fix the matching of possessive quantifiers in
the case of a subpattern containing backtracking.

: Improve debug output for atomic groups in regular expressions.

: Fix ref cycle in asyncio._SelectorSocketTransport by
removing _write_ready in .

: Fix flag mask inversion when unnamed flags exist.

: Prevent multiprocessing.spawn from failing to  in
environments where sys.executable is .  This regressed in 3.11
with the addition of support for path-like objects in multiprocessing.

: Instances of typing.TypeVar,
typing.ParamSpec, typing.ParamSpecArgs,
typing.ParamSpecKwargs, and typing.TypeVarTuple once
again support weak references, fixing a regression introduced in Python
3.12.0 beta 1. Patch by Jelle Zijlstra.

: Add private pathlib._PathBase class, which provides
experimental support for virtual filesystems, and may be made public in a
future version of Python.

================================================================================

# Changelog - Library (Part 24)

: Check for an instance-dict cached value in the 
method of functools.cached_property(). This better matches the
pre-3.12 behavior and improves compatibility for users subclassing
functools.cached_property() and adding a  method.

: Detect possible memory allocation failure in the libtommath
function  used by the  module.

: Fix incorrect matching of empty paths in
pathlib.PurePath.match(). This bug was introduced in Python 3.12.0
beta 1.

: Deprecate typing.no_type_check_decorator(). No major type
checker ever added support for this decorator. Patch by Alex Waygood.

: Make pydoc.doc() catch bad module ImportError when
output stream is not .

: Fix crash when calling  with a manually constructed
SignalDict object. Patch by Charlie Zhao.

: Replace  statements with  RuntimeError in
, so that _DummyThread cannot be joined even with
.

: Fix rare concurrency bug in lock acquisition by the logging
package.

: Added PY_THROW event hook for  for generators

: Added asyncio.taskgroups.__all__ to asyncio.__all__ for
export in star imports.

: Zipapp will now skip over appending an archive to itself.

================================================================================

# Changelog - Library (Part 25)

: Improve the error message from os.fspath() if called on
an object where __fspath__ is set to . Patch by Alex Waygood.

: Fix crash due to improper reference counting in 
eager task factory internal routines.

: Fix bug where a typing.Protocol class that had one or
more non-callable members would raise  when
issubclass() was called against it, even if it defined a custom
__subclasshook__ method. The behaviour in Python 3.11 and lower â
which has now been restored â was not to raise  in these
situations if a custom __subclasshook__ method was defined. Patch by
Alex Waygood.

: Reverted addition of json.AttrDict.

: Add pathlib.UnsupportedOperation, which is raised instead
of NotImplementedError when a path operation isnât supported.

: Fix a regression introduced in  for 3.12, causing
gzip.GzipFile.flush() to not flush the compressor (nor pass along
the  argument).

: stack_effect() no longer raises an exception if an
 is provided for an  that doesnât use its arg, or when
it is not provided for an  that does use it. In the latter case,
the stack effect is returned for .

================================================================================

# Changelog - Library (Part 26)

: Enable ast.unparse() to unparse function and class
definitions created without the new type_params field from .
Patch by Jelle Zijlstra.

: Add follow_symlinks keyword-only argument to
pathlib.Path.is_dir() and , defaulting
to .

: Deprecate two methods of creating typing.TypedDict
classes with 0 fields using the functional syntax:  
TypedDict("TD") and   TypedDict("TD", . Both will be
disallowed in Python 3.15. To create a  class with 0 fields,
either use  TD(TypedDict):  or   TypedDict("TD", .

: Fix webbrowser.Konqueror.open method.

: : Deprecate undocumented
ctypes.SetPointerType() and ctypes.ARRAY() functions. Patch
by Victor Stinner.

: Remove deprecated re.template, , re.TEMPLATE,
sre_constans.SRE_FLAG_TEMPLATE.

: Supporting asyncio.Task.set_name() is now mandatory for
third party task implementations. The undocumented _set_task_name()
function (deprecated since 3.8) has been removed. Patch by Kumar Aditya.

: Fix a bug in _Unpickler_SetInputStream() where an
exception could end up being overwritten in case of failure.

: Change the default return value of
http.client.HTTPConnection.get_proxy_response_headers() to be
 and not .

================================================================================

# Changelog - Library (Part 27)

: Fix bugs in  where exceptions could end up being
overwritten because of deferred error handling.

: Harden  error handling during module
initialisation to prevent exceptions from possibly being overwritten, and
objects from being dereferenced twice.

: Fix bug in  where an exception could end up being
overwritten.

: Fix bugs in  where exceptions could be
overwritten in case of module initialisation failure.

: Fix bugs in  initialisation which could lead to
leaked references and overwritten exceptions.

: Fix a bug in array.array where an exception could end
up being overwritten.

: Fix bugs in  where exceptions could end up being
overwritten.

: Fix a bug in the  module where an exception could
be overwritten.

: Fix bugs in _elementtree where exceptions could be
overwritten.

: Fix bugs in  where exceptions could be
overwritten.

: Fix bugs in  where exceptions could be overwritten.

: Deprecate creating a typing.NamedTuple class using
keyword arguments to denote the fields (  NamedTuple("NT", 
). This will be disallowed in Python 3.15. Use the class-based
syntax or the functional syntax instead.

================================================================================

# Changelog - Library (Part 28)

Two methods of creating NamedTuple classes with 0 fields using the
functional syntax are also deprecated, and will be disallowed in Python
3.15:   NamedTuple("NT") and   NamedTuple("NT", . To
create a NamedTuple class with 0 fields, either use 
NT(NamedTuple):  or   NamedTuple("NT", .

: Remove deprecated in 3.11 webbrowser.MacOSXOSAScript._name
attribute.

: Fix flag inversion when alias/mask members exist.

: typing.Annotated is now implemented as an instance of
typing._SpecialForm rather than a class. This should have no
user-facing impact for users of the  module public API.

: Fix bugs in  where exceptions could be
overwritten.

: Emit FutureWarning from pathlib.Path.glob() and
 if the given pattern ends with ââ. In a
future Python release, patterns with this ending will match both files and
directories. Add a trailing slash to only match directories.

: Fix a bug in  where an exception could be
overwritten in the 
callback.

: Remove ,  and  parameters of the
urllib.request.urlopen() function, deprecated in Python 3.6. Patch
by Victor Stinner.

================================================================================

# Changelog - Library (Part 29)

: : Remove undocumented and untested
Logger.warn() and LoggerAdapter.warn() methods and
logging.warn() function. Deprecated since Python 3.3, they were
aliases to the logging.Logger.warning() method,
logging.LoggerAdapter.warning() method and logging.warning()
function. Patch by Victor Stinner.

: Revert pickling method from by-name back to by-value.

: Add RTSPS scheme support in urllib.parse

: Add option to traceback.format_exception_only() to
recurse into the nested exception of a BaseExceptionGroup.

: Fix bug where isinstance([], collections.abc.Mapping) could
evaluate to  if garbage collection happened at the wrong time. The
bug was caused by changes to the implementation of
typing.Protocol in Python 3.12.

: : Add  typecode that represents .

: Fix longstanding bug where issubclass(object,
typing.Protocol) would evaluate to  in some edge cases. Patch by
Alex Waygood.

================================================================================

# Changelog - Library (Part 30)

: In the beta 1 release we added a utility function for extension
module authors, to use when testing their module for support in multiple
interpreters or under a per-interpreter GIL.  The name of that function
has changed from allowing_all_extensions to
_incompatible_extension_module_restrictions.  The default for the
âdisable_checkâ argument has change from  to , to better
match the new function name.

: Fixed inconsistent signature on derived classes for
inspect.signature()

: Fix a recent regression in the  module. The
regression meant that doing   typing.Protocol), where 
was a class that had abc.ABCMeta as its metaclass, would then
cause subsequent isinstance(1,  calls to erroneously raise
. Patch by Alex Waygood.

: The  finalizer now logs the  method
errors with sys.unraisablehook. Previously, errors were ignored
silently by default, and only logged in Python Development Mode or on Python built on debug mode.  Patch
by Victor Stinner.

: : Deprecate the ,  and
getmarkers() methods of the wave.Wave_read and
wave.Wave_write classes. They will be removed in Python 3.15.
Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 31)

: Remove the untested and undocumented
unittest.TestProgram.usageExit() method, deprecated in Python 3.11.
Patch by Hugo van Kemenade.

: Improve performance of pathlib.PurePath initialisation
by deferring joining of paths when multiple arguments are given.

: Deprecate undocumented copy/deepcopy/pickle support for
itertools.

: Fix pathlib.PurePosixPath(pathlib.PureWindowsPath(...)) not
converting path separators to restore 3.11 compatible behavior.

: Make comparisons between pathlib.PureWindowsPath
objects consistent across Windows and Posix to match 3.11 behavior.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in Python
3.11. Patch by Victor Stinner.

: Fix bugs with the interaction between
typing.runtime_checkable() and typing.Generic that were
introduced by the  implementation. Patch by Jelle Zijlstra.

: : Remove the  module and its private
 extension, deprecated in Python 3.11. Patch by Victor
Stinner.

: : Remove the  module, deprecated in Python
3.11. Patch by Victor Stinner.

: Add missing  to os.PathLike.

================================================================================

# Changelog - Library (Part 32)

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: Remove the undocumented
configparser.LegacyInterpolation class, deprecated in the
docstring since Python 3.2, and with a deprecation warning since Python
3.11. Patch by Hugo van Kemenade.

: Remove kwargs-based typing.TypedDict creation

: Remove the turtle.RawTurtle.settiltangle() method,
deprecated in docs since Python 3.1 and with a deprecation warning since
Python 3.11. Patch by Hugo van Kemenade.

: : Removed the  package, deprecated in
Python 3.11.

: : Remove the  module, deprecated in
Python 3.11: the python-pam project can be used instead. Patch by
Victor Stinner.

: Removed the tkinter.tix module, deprecated since Python 3.6.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the ossaudiodev module, deprecated
in Python 3.11. Patch Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 33)

: Add typing.get_protocol_members() to return the set of
members defining a typing.Protocol.  Add
typing.is_protocol() to check whether a class is a
typing.Protocol. Patch by Jelle Zijlstra.

: Document the  and __supertype__ attributes of
typing.NewType. Patch by Jelle Zijlstra.

: Removed the following  functions, deprecated in
Python 3.11:

List:
unittest.findTestCases()
unittest.makeSuite()
unittest.getTestCaseNames()

unittest.findTestCases()

unittest.getTestCaseNames()

Use TestLoader methods instead:

List:
unittest.TestLoader.loadTestsFromModule()
unittest.TestLoader.loadTestsFromTestCase()
unittest.TestLoader.getTestCaseNames()

unittest.TestLoader.loadTestsFromModule()

unittest.TestLoader.loadTestsFromTestCase()

unittest.TestLoader.getTestCaseNames()

Patch by Hugo van Kemenade.

: Remove the untested and undocumented webbrowser
 class, deprecated in Python 3.11. Patch by Hugo van
Kemenade.

: Support for using pathlib.Path objects as context
managers has been removed. Before Python 3.9, exiting the context manager
marked a path as âclosedâ, which caused some (but not all!) methods to
raise when called. Since Python 3.9, using a path as a context manager
does nothing.

================================================================================

# Changelog - Library (Part 34)

: Adjust the location of the (see ) type_params
field on ast.ClassDef, ast.AsyncFunctionDef, and
ast.FunctionDef to better preserve backward compatibility. Patch
by Jelle Zijlstra

: Allow typing.Protocol classes to inherit from
collections.abc.Buffer. Patch by Jelle Zijlstra.

: Remove locale.resetlocale() function deprecated in Python
3.11. Patch by Victor Stinner.

: Remove the  program and the  module,
deprecated in Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: : Remove the  and  modules,
deprecated in Python 3.11. Patch by Victor Stinner.

: : Remove the  module, deprecated in
Python 3.11. Patch by Victor Stinner.

: On Linux where subprocess can use the 
syscall for faster spawning, prevent the parent process from blocking
other threads by dropping the GIL while it waits for the vforkâed child
process  outcome. This prevents spawning a binary from a slow
filesystem from blocking the rest of the application.

================================================================================

# Changelog - Library (Part 35)

: We now release the GIL around built-in 
computations of reasonable size for the SHA families and MD5 hash
functions, matching what our OpenSSL backed hash computations already
does.

: Improve performance of pathlib.Path.glob() when expanding
a pattern with a non-terminal ââ component by filtering walked paths
through a regular expression, rather than calling os.scandir() more
than once on each directory.

: Prepare the  module for building with Tcl 9.0 and
future libtommath by replacing usage of deprecated functions
mp_to_unsigned_bin_n() and mp_unsigned_bin_size() when
necessary.

: Add fields start_offset, cache_offset, end_offset,
baseopname, baseopcode, jump_target and  to
dis.Instruction.

: Fixed  argument validation mechanism of
. Improved test coverage.

: Provide helpful usage messages when parsing incorrect
 commands.

: Generalize the regex pattern BaseConfigurator.INDEX_PATTERN
to allow spaces and non-alphanumeric characters in keys.

: Added multiline statement support for

: Forbid using builtins.issubclass() with
types.GenericAlias as the first argument.

================================================================================

# Changelog - Library (Part 36)

: Fix cache repopulation semantics of
zipimport.invalidate_caches(). The cache is now repopulated upon
retrieving files with an invalid cache, not when the cache is invalidated.

: Fix a bug that causes wrong matches for regular expressions
with possessive qualifier.

: Add follow_symlinks argument to pathlib.Path.glob() and
, defaulting to false.

: Hide traceback in  prompt, when import failed.

: Added a stream mode to  that allows for reading
archives without caching info about the inner files.

: Deprecate passing any arguments to threading.RLock().

: Refactored zipfile._strip_extra to use higher level
abstractions for extras instead of a heavy-state loop.

: Reduce calls of _idle_semaphore.release() in
concurrent.futures.thread._worker().

: Add support for recursive wildcards in
pathlib.PurePath.match().

: unittest.TestLoader no longer loads test cases from
exact unittest.TestCase and unittest.FunctionTestCase
classes.

================================================================================

# Changelog - Library (Part 37)

: Restore following CPython <= 3.10.5 behavior of
shutil.make_archive(): do not create an empty archive if
 is not a directory, and, in that case, raise
FileNotFoundError or NotADirectoryError regardless of
 choice. Beyond the brought-back behavior, the function may now
also raise these exceptions in  mode.

: Emit DeprecationWarning for âs  type
code, deprecated in docs since Python 3.3.

: unittest.mock.create_autospec() now properly returns
coroutine functions compatible with inspect.iscoroutinefunction()

: Fix hanging multiprocessing ProcessPoolExecutor when
a child process crashes while data is being written in the call queue.

: Remove the  and  namespaces,
deprecated since Python 3.8. All items are still available from the main
 module.

: Improve the textual representation of IPv4-mapped IPv6
addresses ( Sections 2.2, 2.5.5.2) in . Patch
by Oleksandr Pavliuk.

: Improve performance of operator.methodcaller() using the
 vectorcall convention. Patch by Anthony Lee and Pieter
Eendebak.

: unittest.mock.mock_open() will call the 
method of the file handle mock when it is exiting from the context
manager. Patch by Samet Yaslan.

================================================================================

# Changelog - Library (Part 38)

: Improve performance of functools.singledispatchmethod
by caching the generated dispatch wrapper. Optimization suggested by
frederico. Patch by @mental32, Alex Waygood and Pieter Eendebak.

: unittest.mock speccing no longer calls class properties.
Patch by Melanie Witt.

: Ensure gettext(msg) retrieve translations even if a plural
form exists. In other words: gettext(msg)  ngettext(msg,  .

: Add ThreadingMock to unittest.mock that can be used
to create Mock objects that can wait until they are called. Patch by
Karthikeyan Singaravelan and Mario Corchero.

================================================================================

# Changelog - Documentation (Part 1)

List:
: The minimum Sphinx version required for the documentation is
now 4.2.
:  module command-line interface is now mentioned in
documentation.
: Add documentation for PyInterpreterConfig and
Py_NewInterpreterFromConfig().  Also clarify some of the nearby
docs relative to per-interpreter GIL.
: Document the  module variables
 and .
: Add a number of standard external names to nitpick_ignore.
: Make timeit doc command lines compatible with Windows by using
double quotes for arguments.  This works on linux and macOS also.
: Fixed functools.lru_cache() docstring accounting for
 argumentâs different handling of str and int. Patch by Bar
Harel.
: Update  doc to specify that time in seconds is just
the default.
: Add missing documentation for the max_group_depth and
max_group_width parameters and the exceptions attribute of the
traceback.TracebackException class.
: Add missing documentation for the end_lineno and
end_offset attributes of the traceback.TracebackException
class.
: Remove mentions of old Python versions in
typing.NamedTuple.
: Add documentation on how to localize the  module.
: Document the return type of    when  and 
have type .
: Align function signature for functools.reduce in
documentation and docstring with the C implementation.

================================================================================

# Changelog - Documentation (Part 2)

: The minimum Sphinx version required for the documentation is
now 4.2.

:  module command-line interface is now mentioned in
documentation.

: Add documentation for PyInterpreterConfig and
Py_NewInterpreterFromConfig().  Also clarify some of the nearby
docs relative to per-interpreter GIL.

: Document the  module variables
 and .

: Add a number of standard external names to nitpick_ignore.

: Make timeit doc command lines compatible with Windows by using
double quotes for arguments.  This works on linux and macOS also.

: Fixed functools.lru_cache() docstring accounting for
 argumentâs different handling of str and int. Patch by Bar
Harel.

: Update  doc to specify that time in seconds is just
the default.

: Add missing documentation for the max_group_depth and
max_group_width parameters and the exceptions attribute of the
traceback.TracebackException class.

: Add missing documentation for the end_lineno and
end_offset attributes of the traceback.TracebackException
class.

: Remove mentions of old Python versions in
typing.NamedTuple.

: Add documentation on how to localize the  module.

: Document the return type of    when  and 
have type .

================================================================================

# Changelog - Documentation (Part 3)

: Align function signature for functools.reduce in
documentation and docstring with the C implementation.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_stress_modifying_handlers() of test_signal. Patch by
Victor Stinner.
: Fix test_tools.test_freeze on FreeBSD: run âmake distcleanâ
instead of âmake cleanâ in the copied source directory to remove also the
âpythonâ program. Patch by Victor Stinner.
: Fix a deadlock in test_socket when server fails with a timeout
but the client is still running in its thread. Donât hold a lock to call
cleanup functions in doCleanups(). One of the cleanup function waits until
the client completes, whereas the client could deadlock if it called
addCleanup() in such situation. Patch by Victor Stinner.
: Add tests for .
: Add tests for .
: regrtest: When using worker processes (-jN) with âverbose3
option, regrtest can now display the worker output even if a worker
process does crash. Previously, sys.stdout and sys.stderr were replaced
and so the worker output was lost on a crash. Patch by Victor Stinner.
: Add tests for pickling and copying PyStructSequence objects.
Patched by Xuehai Pan.
: libregrtest now always sets and shows random.seed, so
tests are more reproducible. Use --randseed flag to pass the explicit
random seed for tests.
: Remove Tools/scripts/run_tests.py and 
hostrunnertest. Just run    , 
buildbottest or   instead. Python test runner (regrtest) now
handles cross-compilation and HOSTRUNNER. It also adds options to Python
such fast      when  or 
option is used. Patch by Victor Stinner.
: Skip test_threading tests using thread+fork if Python is built
with Address Sanitizer (ASAN). Patch by Victor Stinner.
: Fix test_asyncio timeouts: donât measure the maximum duration,
a test should not measure a CI performance. Only measure the minimum
duration when a task has a timeout or delay. Add  to
test_asyncio.utils. Patch by Victor Stinner.
: Fix race conditions in test_threading lock tests. Wait until a
condition is met rather than using time.sleep() with a hardcoded
number of seconds. Patch by Victor Stinner.
: Fix test_interprocess_signal() of test_signal. Make
sure that the subprocess.Popen object is deleted before the test
raising an exception in a signal handler. Otherwise, Popen.__del__()
can get the exception which is logged as     and
the test fails. Patch by Victor Stinner.
: Fix test_timeout() of test_concurrent_futures.test_wait. Remove
the future which may or may not complete depending if it takes longer than
the timeout or not. Keep the second future which does not complete before
wait() timeout. Patch by Victor Stinner.
: Split test_gdb.py file into a test_gdb package made of multiple
tests, so tests can now be run in parallel. Patch by Victor Stinner.
: regrtest: When  or  option is used,
regrtest now replaces the current process with a new process to add 
    options to Python. Patch by Victor Stinner.
: Fix test_zippath_from_non_installed_posix() of test_venv:
donât copy __pycache__/ sub-directories, because they can be modified
by other Python tests running in parallel. Patch by Victor Stinner.
: regrtest: Fix reference leak check on Windows. Disable the load
tracker on Windows in the reference leak check mode (-R option). Patch by
Victor Stinner.
: regrtest: When a test fails with âenv changedâ and the ârerun
option is used, the test is now re-run in verbose mode in a fresh process.
Patch by Victor Stinner.
: Skip test_freeze_simple_script() of test_tools.test_freeze if
Python is built with ./configure --enable-optimizations, which means
with Profile Guided Optimization (PGO): it just makes the test too slow.
The freeze tool is tested by many other CIs with other (faster) compiler
flags. Patch by Victor Stinner.
: Skip test_perf_profiler if Python is built with ASAN, MSAN
or UBSAN sanitizer. Python does crash randomly in this test on such build.
Patch by Victor Stinner.
: regrtest: Add  and  options.
 uses a default timeout of 10 minutes and  
(skip slowest tests).  uses a default timeout of 20 minutes
and   (run all tests). Patch by Victor Stinner.
: libregrtest now decodes stdout of test worker processes with
the âbackslashreplaceâ error handler to log corrupted stdout, instead of
failing with an error and not logging the stdout. Patch by Victor Stinner.
: Fix test_socket.test_hmac_sha1() in FIPS mode. Use a longer
key: FIPS mode requires at least of at least 112 bits. The previous key
was only 32 bits. Patch by Victor Stinner.
: Fix test_gdb on Python built with LLVM clang 16 on Linux
ppc64le (ex: Fedora 38). Search patterns in gdb âbtâ command output to
detect when gdb fails to retrieve the traceback. For example, skip a test
if         is found. Patch by
Victor Stinner.
: libregrtest now calls random.seed() before running each
test file when -r/--randomize command line option is used. Moreover,
itâs also called in worker processes.  It should help to make tests more
deterministic. Previously, it was only called once in the main process
before running all test files and it was not called in worker processes.
Patch by Victor Stinner.
: libregrtest now uses a separated file descriptor to write test
result as JSON. Previously, if a test wrote debug messages late around the
JSON, the main test process failed to parse JSON. Patch by Victor Stinner.
: Fix and enable test_msvcrt.
: Fix test_site.test_underpth_basic() when the working
directory contains at least one non-ASCII character: encode the 
file to UTF-8 and enable the UTF-8 Mode to use UTF-8 for the child process
stdout. Patch by Victor Stinner.
: Fix test_pyexpat.test_exception(): it can now be run from a
directory different than Python source code directory. Before, the test
failed in this case.  Skip the test if Modules/pyexpat.c source is not
available. Skip also the test on Python implementations other than
CPython. Patch by Victor Stinner.
: Add tests for .
: Fix test_asyncio, test_imaplib and test_socket tests on FreeBSD
if the TCP blackhole is enabled ( net.inet.tcp.blackhole). Skip
the few tests which failed with  which such non standard
configuration. Currently, the FreeBSD GCP image enables TCP and UDP
blackhole (
net.inet.tcp.blackhole=2 and  net.inet.udp.blackhole=1).
Patch by Victor Stinner.
: Skip  if gdb is unable to retrieve Python frame
objects: if a frame is <optimized . When Python is built with
âclang -Ogâ, gdb can fail to retrieve the  parameter of
_PyEval_EvalFrameDefault(). In this case, tests like  are
likely to fail. Without getting access to Python frames, python-gdb.py
is mostly clueless on retrieving the Python traceback. Moreover,
 is no longer skipped on macOS if Python is built with Clang.
Patch by Victor Stinner.
: Skip test_tempfile.test_flags() if  fails with
âOSError: [Errno 45] Operation not supportedâ (ex: on FreeBSD 13). Patch
by Victor Stinner.
: FreeBSD 13.2 CI coverage for pull requests is now provided by
Cirrus-CI (a hosted CI service that supports Linux, macOS, Windows, and
FreeBSD).
: Removed support of test_main() function in tests. They now
always use normal unittest test runner.
: Fix test_tomllib recursion tests for WASI buildbots: reduce
the recursion limit and compute the maximum nested array/dict depending on
the current available recursion limit. Patch by Victor Stinner.
: Add get_recursion_available() and get_recursion_depth()
functions to the test.support module. Patch by Victor Stinner.
: Add --fail-rerun  option to regrtest: if a test
failed when then passed when rerun in verbose mode, exit the process with
exit code 2 (error), instead of exit code 0 (success). Patch by Victor
Stinner.
: Rename regrtest --verbose2 option () to .
Keep --verbose2 as a deprecated alias. Patch by Victor Stinner.
: When regrtest reruns failed tests in verbose mode (
  ), tests are now rerun in fresh worker processes rather
than being executed in the main process. If a test does crash or is killed
by a timeout, the main process can detect and handle the killed worker
process. Tests are rerun in parallel if the  option is used to run
tests in parallel. Patch by Victor Stinner.
:  now computes statistics on all tests: successes,
failures and skipped. test_netrc, test_pep646_syntax and
test_xml_etree now return results in their test_main() function.
Patch by Victor Stinner and Alex Waygood.
: The doctest.DocTestRunner.run() method now counts the
number of skipped tests. Add doctest.DocTestRunner.skips and
doctest.TestResults.skipped attributes. Patch by Victor Stinner.
: Convert test_concurrent_futures to a package of 7 sub-tests.
Patch by Victor Stinner.
: Split test_multiprocessing_fork,
test_multiprocessing_forkserver and test_multiprocessing_spawn into test
packages. Each package is made of 4 sub-tests: processes, threads, manager
and misc. It allows running more tests in parallel and so reduce the total
test duration. Patch by Victor Stinner.
: Fix test_cppext when the C compiler command 
option: remove  options from the compiler command. Patch by
Victor Stinner.
: Set up CIFuzz to run fuzz targets in GitHub Actions. Patch by
Illia Volochii.
: test_logging: Fix test_udp_reconnection() by increasing
the timeout from 100 ms to 5 minutes (LONG_TIMEOUT). Patch by Victor
Stinner.
: Add the C API test for functions in the Mapping Protocol, the
Sequence Protocol and some functions in the Object Protocol.
: test_capi: Fix test_no_FatalError_infinite_loop() to no longer
write a coredump, by using test.support.SuppressCrashReport. Patch by
Victor Stinner.
: Avoid creating a reference to the test object in
collectedDurations().
: Moved tests for zipfile.Path into
Lib/test/test_zipfile/_path. Made zipfile._path a package.
: Add .coveragerc to cpython repository for use with coverage
package.
: When running the Python test suite with  option, if a
worker stdout cannot be decoded from the locale encoding report a failed
testn so the exitcode is non-zero. Patch by Victor Stinner.
: When the Python build is configured --with-wheel-pkg-dir,
tests requiring the setuptools and  wheels will search for
the wheels in WHEEL_PKG_DIR.
: String tests are modified to reflect that  and
 are merged in Python 3. Patch by Daniel Fortunov.
: Suppress and assert expected RuntimeWarnings in
test_sys_settrace.py
: Add additional tests to  to achieve full test
coverage.

================================================================================

# Changelog - Tests (Part 2)

: Fix test_stress_modifying_handlers() of test_signal. Patch by
Victor Stinner.

: Fix test_tools.test_freeze on FreeBSD: run âmake distcleanâ
instead of âmake cleanâ in the copied source directory to remove also the
âpythonâ program. Patch by Victor Stinner.

: Fix a deadlock in test_socket when server fails with a timeout
but the client is still running in its thread. Donât hold a lock to call
cleanup functions in doCleanups(). One of the cleanup function waits until
the client completes, whereas the client could deadlock if it called
addCleanup() in such situation. Patch by Victor Stinner.

: regrtest: When using worker processes (-jN) with âverbose3
option, regrtest can now display the worker output even if a worker
process does crash. Previously, sys.stdout and sys.stderr were replaced
and so the worker output was lost on a crash. Patch by Victor Stinner.

: Add tests for pickling and copying PyStructSequence objects.
Patched by Xuehai Pan.

: libregrtest now always sets and shows random.seed, so
tests are more reproducible. Use --randseed flag to pass the explicit
random seed for tests.

================================================================================

# Changelog - Tests (Part 3)

: Remove Tools/scripts/run_tests.py and 
hostrunnertest. Just run    , 
buildbottest or   instead. Python test runner (regrtest) now
handles cross-compilation and HOSTRUNNER. It also adds options to Python
such fast      when  or 
option is used. Patch by Victor Stinner.

: Skip test_threading tests using thread+fork if Python is built
with Address Sanitizer (ASAN). Patch by Victor Stinner.

: Fix test_asyncio timeouts: donât measure the maximum duration,
a test should not measure a CI performance. Only measure the minimum
duration when a task has a timeout or delay. Add  to
test_asyncio.utils. Patch by Victor Stinner.

: Fix race conditions in test_threading lock tests. Wait until a
condition is met rather than using time.sleep() with a hardcoded
number of seconds. Patch by Victor Stinner.

: Fix test_interprocess_signal() of test_signal. Make
sure that the subprocess.Popen object is deleted before the test
raising an exception in a signal handler. Otherwise, Popen.__del__()
can get the exception which is logged as     and
the test fails. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 4)

: Fix test_timeout() of test_concurrent_futures.test_wait. Remove
the future which may or may not complete depending if it takes longer than
the timeout or not. Keep the second future which does not complete before
wait() timeout. Patch by Victor Stinner.

: Split test_gdb.py file into a test_gdb package made of multiple
tests, so tests can now be run in parallel. Patch by Victor Stinner.

: regrtest: When  or  option is used,
regrtest now replaces the current process with a new process to add 
    options to Python. Patch by Victor Stinner.

: Fix test_zippath_from_non_installed_posix() of test_venv:
donât copy __pycache__/ sub-directories, because they can be modified
by other Python tests running in parallel. Patch by Victor Stinner.

: regrtest: Fix reference leak check on Windows. Disable the load
tracker on Windows in the reference leak check mode (-R option). Patch by
Victor Stinner.

: regrtest: When a test fails with âenv changedâ and the ârerun
option is used, the test is now re-run in verbose mode in a fresh process.
Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 5)

: Skip test_freeze_simple_script() of test_tools.test_freeze if
Python is built with ./configure --enable-optimizations, which means
with Profile Guided Optimization (PGO): it just makes the test too slow.
The freeze tool is tested by many other CIs with other (faster) compiler
flags. Patch by Victor Stinner.

: Skip test_perf_profiler if Python is built with ASAN, MSAN
or UBSAN sanitizer. Python does crash randomly in this test on such build.
Patch by Victor Stinner.

: regrtest: Add  and  options.
 uses a default timeout of 10 minutes and  
(skip slowest tests).  uses a default timeout of 20 minutes
and   (run all tests). Patch by Victor Stinner.

: libregrtest now decodes stdout of test worker processes with
the âbackslashreplaceâ error handler to log corrupted stdout, instead of
failing with an error and not logging the stdout. Patch by Victor Stinner.

: Fix test_socket.test_hmac_sha1() in FIPS mode. Use a longer
key: FIPS mode requires at least of at least 112 bits. The previous key
was only 32 bits. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 6)

: Fix test_gdb on Python built with LLVM clang 16 on Linux
ppc64le (ex: Fedora 38). Search patterns in gdb âbtâ command output to
detect when gdb fails to retrieve the traceback. For example, skip a test
if         is found. Patch by
Victor Stinner.

: libregrtest now calls random.seed() before running each
test file when -r/--randomize command line option is used. Moreover,
itâs also called in worker processes.  It should help to make tests more
deterministic. Previously, it was only called once in the main process
before running all test files and it was not called in worker processes.
Patch by Victor Stinner.

: libregrtest now uses a separated file descriptor to write test
result as JSON. Previously, if a test wrote debug messages late around the
JSON, the main test process failed to parse JSON. Patch by Victor Stinner.

: Fix and enable test_msvcrt.

: Fix test_site.test_underpth_basic() when the working
directory contains at least one non-ASCII character: encode the 
file to UTF-8 and enable the UTF-8 Mode to use UTF-8 for the child process
stdout. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 7)

: Fix test_pyexpat.test_exception(): it can now be run from a
directory different than Python source code directory. Before, the test
failed in this case.  Skip the test if Modules/pyexpat.c source is not
available. Skip also the test on Python implementations other than
CPython. Patch by Victor Stinner.

: Fix test_asyncio, test_imaplib and test_socket tests on FreeBSD
if the TCP blackhole is enabled ( net.inet.tcp.blackhole). Skip
the few tests which failed with  which such non standard
configuration. Currently, the FreeBSD GCP image enables TCP and UDP
blackhole (
net.inet.tcp.blackhole=2 and  net.inet.udp.blackhole=1).
Patch by Victor Stinner.

: Skip  if gdb is unable to retrieve Python frame
objects: if a frame is <optimized . When Python is built with
âclang -Ogâ, gdb can fail to retrieve the  parameter of
_PyEval_EvalFrameDefault(). In this case, tests like  are
likely to fail. Without getting access to Python frames, python-gdb.py
is mostly clueless on retrieving the Python traceback. Moreover,
 is no longer skipped on macOS if Python is built with Clang.
Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 8)

: Skip test_tempfile.test_flags() if  fails with
âOSError: [Errno 45] Operation not supportedâ (ex: on FreeBSD 13). Patch
by Victor Stinner.

: FreeBSD 13.2 CI coverage for pull requests is now provided by
Cirrus-CI (a hosted CI service that supports Linux, macOS, Windows, and
FreeBSD).

: Removed support of test_main() function in tests. They now
always use normal unittest test runner.

: Fix test_tomllib recursion tests for WASI buildbots: reduce
the recursion limit and compute the maximum nested array/dict depending on
the current available recursion limit. Patch by Victor Stinner.

: Add get_recursion_available() and get_recursion_depth()
functions to the test.support module. Patch by Victor Stinner.

: Add --fail-rerun  option to regrtest: if a test
failed when then passed when rerun in verbose mode, exit the process with
exit code 2 (error), instead of exit code 0 (success). Patch by Victor
Stinner.

: Rename regrtest --verbose2 option () to .
Keep --verbose2 as a deprecated alias. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 9)

: When regrtest reruns failed tests in verbose mode (
  ), tests are now rerun in fresh worker processes rather
than being executed in the main process. If a test does crash or is killed
by a timeout, the main process can detect and handle the killed worker
process. Tests are rerun in parallel if the  option is used to run
tests in parallel. Patch by Victor Stinner.

:  now computes statistics on all tests: successes,
failures and skipped. test_netrc, test_pep646_syntax and
test_xml_etree now return results in their test_main() function.
Patch by Victor Stinner and Alex Waygood.

: The doctest.DocTestRunner.run() method now counts the
number of skipped tests. Add doctest.DocTestRunner.skips and
doctest.TestResults.skipped attributes. Patch by Victor Stinner.

: Convert test_concurrent_futures to a package of 7 sub-tests.
Patch by Victor Stinner.

: Split test_multiprocessing_fork,
test_multiprocessing_forkserver and test_multiprocessing_spawn into test
packages. Each package is made of 4 sub-tests: processes, threads, manager
and misc. It allows running more tests in parallel and so reduce the total
test duration. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 10)

: Fix test_cppext when the C compiler command 
option: remove  options from the compiler command. Patch by
Victor Stinner.

: Set up CIFuzz to run fuzz targets in GitHub Actions. Patch by
Illia Volochii.

: test_logging: Fix test_udp_reconnection() by increasing
the timeout from 100 ms to 5 minutes (LONG_TIMEOUT). Patch by Victor
Stinner.

: Add the C API test for functions in the Mapping Protocol, the
Sequence Protocol and some functions in the Object Protocol.

: test_capi: Fix test_no_FatalError_infinite_loop() to no longer
write a coredump, by using test.support.SuppressCrashReport. Patch by
Victor Stinner.

: Avoid creating a reference to the test object in
collectedDurations().

: Moved tests for zipfile.Path into
Lib/test/test_zipfile/_path. Made zipfile._path a package.

: Add .coveragerc to cpython repository for use with coverage
package.

: When running the Python test suite with  option, if a
worker stdout cannot be decoded from the locale encoding report a failed
testn so the exitcode is non-zero. Patch by Victor Stinner.

: When the Python build is configured --with-wheel-pkg-dir,
tests requiring the setuptools and  wheels will search for
the wheels in WHEEL_PKG_DIR.

================================================================================

# Changelog - Tests (Part 11)

: String tests are modified to reflect that  and
 are merged in Python 3. Patch by Daniel Fortunov.

: Suppress and assert expected RuntimeWarnings in
test_sys_settrace.py

: Add additional tests to  to achieve full test
coverage.

================================================================================

# Changelog - Build (Part 1)

List:
: âmake check-clean-srcâ now also checks if the âpythonâ program
is found in the source directory: fail with an error if it does exist.
Patch by Victor Stinner.
: Fix compile error when building with recent versions of
libedit.
: No longer ignore PROFILE_TASK failure silently:
command used by Profile Guided Optimization (PGO). Patch by Victor
Stinner.
: Remove   target: use  buildbottest
instead. Patch by Victor Stinner.
: The experimental --disable-gil configure flag now includes
âtâ (for âthreadedâ) in extension ABI tags.
: Fix building the  extension on Linux AArch64 which
requires linking to libatomic when <cpython/pyatomic.h> is used: the
_Py_atomic_or_uint64() function requires libatomic
__atomic_fetch_or_8() on this platform. The configure script now
checks if linking to libatomic is needed and generates a new LIBATOMIC
variable used to build the _testcapi extension. Patch by Victor Stinner.
: Fix Solaris build: no longer redefine the gethostname()
function. Solaris defines the function since 2005. Patch by Victor
Stinner, original patch by Jakub KulÃ­k.
: Fix a race condition in  . The
deepfreeze.c source and files generated by Argument Clinic are now
generated or updated before generating âglobal objectsâ. Previously, some
identifiers may miss depending on the order in which these files were
generated. Patch by Victor Stinner.
: Python built with  --with-trace-refs
(tracing references) is now ABI compatible with Python release build and
debug build. Patch by Victor Stinner.
: The  C extension is now built with the limited C
API. Patch by Victor Stinner.
: Fix x86_64 GNU/Hurd build
: When calling find_python.bat with  it did not
properly silence the output of nuget. That is now fixed.
: Remove the make target regen-opcode-targets, merge its work
into regen-opcode which repeats most of the calculation. This
simplifies the code for the build and reduces code duplication.
: Check for linux/limits.h before including it in
Modules/posixmodule.c.
: Refactor platform triplet detection code and add detection for
MIPS soft float and musl libc.
: Detect MPI compilers in .
: Fix compilation for platforms without . The
issue was introduced with Python 3.12b1 in . Patch by Erlend
Aasland.
: SQLite 3.15.2 or newer is required to build the 
extension module. Patch by Erlend Aasland.
: Fix a regression in  where we could end up
unintentionally linking with .
: Document how to perform a WASI build on Linux. Also add
Tools/wasm/build_wasi.sh as a reference implementation of the docs.
: Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate
!configure.
: Include commoninstall as a prerequisite for bininstall
This ensures that commoninstall is completed before bininstall is
started when parallel builds are used (  ), and so the
 symlink is only installed after all standard library modules
are installed.

================================================================================

# Changelog - Build (Part 2)

: Add experimental wasi-threads support. Patch by Takashi
Yamamoto.

: âmake check-clean-srcâ now also checks if the âpythonâ program
is found in the source directory: fail with an error if it does exist.
Patch by Victor Stinner.

: Fix compile error when building with recent versions of
libedit.

: No longer ignore PROFILE_TASK failure silently:
command used by Profile Guided Optimization (PGO). Patch by Victor
Stinner.

: Remove   target: use  buildbottest
instead. Patch by Victor Stinner.

: The experimental --disable-gil configure flag now includes
âtâ (for âthreadedâ) in extension ABI tags.

: Fix building the  extension on Linux AArch64 which
requires linking to libatomic when <cpython/pyatomic.h> is used: the
_Py_atomic_or_uint64() function requires libatomic
__atomic_fetch_or_8() on this platform. The configure script now
checks if linking to libatomic is needed and generates a new LIBATOMIC
variable used to build the _testcapi extension. Patch by Victor Stinner.

: Fix Solaris build: no longer redefine the gethostname()
function. Solaris defines the function since 2005. Patch by Victor
Stinner, original patch by Jakub KulÃ­k.

================================================================================

# Changelog - Build (Part 3)

: Fix a race condition in  . The
deepfreeze.c source and files generated by Argument Clinic are now
generated or updated before generating âglobal objectsâ. Previously, some
identifiers may miss depending on the order in which these files were
generated. Patch by Victor Stinner.

: Python built with  --with-trace-refs
(tracing references) is now ABI compatible with Python release build and
debug build. Patch by Victor Stinner.

: The  C extension is now built with the limited C
API. Patch by Victor Stinner.

: Fix x86_64 GNU/Hurd build

: When calling find_python.bat with  it did not
properly silence the output of nuget. That is now fixed.

: Remove the make target regen-opcode-targets, merge its work
into regen-opcode which repeats most of the calculation. This
simplifies the code for the build and reduces code duplication.

: Check for linux/limits.h before including it in
Modules/posixmodule.c.

: Refactor platform triplet detection code and add detection for
MIPS soft float and musl libc.

: Detect MPI compilers in .

: Fix compilation for platforms without . The
issue was introduced with Python 3.12b1 in . Patch by Erlend
Aasland.

================================================================================

# Changelog - Build (Part 4)

: SQLite 3.15.2 or newer is required to build the 
extension module. Patch by Erlend Aasland.

: Fix a regression in  where we could end up
unintentionally linking with .

: Document how to perform a WASI build on Linux. Also add
Tools/wasm/build_wasi.sh as a reference implementation of the docs.

: Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate
!configure.

: Include commoninstall as a prerequisite for bininstall

This ensures that commoninstall is completed before bininstall is
started when parallel builds are used (  ), and so the
 symlink is only installed after all standard library modules
are installed.

: Add experimental wasi-threads support. Patch by Takashi
Yamamoto.

================================================================================

# Changelog - Windows (Part 1)

List:
: Allows overriding the source of VC redistributables so that
releases can be guaranteed to never downgrade between updates.
: Update Windows installer to use SQLite 3.43.1.
: os.path.realpath() now resolves MS-DOS style file names
even if the file is not accessible. Patch by Moonsik Park.
: Update Windows build to use OpenSSL 3.0.11.
: Fixes realpath() to behave consistently when
passed a path containing an embedded null character on Windows. In strict
mode, it now raises  instead of the unexpected
ValueError, and in non-strict mode will make the path absolute.
: Changes the Python Launcher for Windows to prefer an active virtual
environment when the launched script has a shebang line using a Unix-like
virtual command, even if the command requests a specific version of
Python.
: Fix integer overflow and truncating by the null character in
_winapi.LCMapStringEx() which affects ntpath.normcase().
: Ensure that an empty environment block is terminated by two
null characters, as is required by Windows.
: Updated the links at the end of the installer to point to
Discourse rather than the mailing lists.
: When installed from the Microsoft Store,  no longer
defaults to per-user installs. However, as the install directory is
unwritable, it should automatically decide to do a per-user install
anyway. This should resolve issues when  is passed an option that
conflicts with .
: Improve performance of shutil.copy2() by using the
operating systemâs  function. This may result in subtle
changes to metadata copied along with some files, bringing them in line
with normal OS behavior.
: Fixes  and related functions on file systems
that do not support file ID requests. This includes FAT32 and exFAT.
: Add os.path.isdevdrive() to detect whether a path is on a
Windows Dev Drive. Returns  on platforms that do not support Dev
Drive, and is absent on non-Windows platforms.

================================================================================

# Changelog - Windows (Part 2)

: Allows overriding the source of VC redistributables so that
releases can be guaranteed to never downgrade between updates.

: Update Windows installer to use SQLite 3.43.1.

: os.path.realpath() now resolves MS-DOS style file names
even if the file is not accessible. Patch by Moonsik Park.

: Update Windows build to use OpenSSL 3.0.11.

: Fixes realpath() to behave consistently when
passed a path containing an embedded null character on Windows. In strict
mode, it now raises  instead of the unexpected
ValueError, and in non-strict mode will make the path absolute.

: Changes the Python Launcher for Windows to prefer an active virtual
environment when the launched script has a shebang line using a Unix-like
virtual command, even if the command requests a specific version of
Python.

: Fix integer overflow and truncating by the null character in
_winapi.LCMapStringEx() which affects ntpath.normcase().

: Ensure that an empty environment block is terminated by two
null characters, as is required by Windows.

: Updated the links at the end of the installer to point to
Discourse rather than the mailing lists.

================================================================================

# Changelog - Windows (Part 3)

: When installed from the Microsoft Store,  no longer
defaults to per-user installs. However, as the install directory is
unwritable, it should automatically decide to do a per-user install
anyway. This should resolve issues when  is passed an option that
conflicts with .

: Improve performance of shutil.copy2() by using the
operating systemâs  function. This may result in subtle
changes to metadata copied along with some files, bringing them in line
with normal OS behavior.

: Fixes  and related functions on file systems
that do not support file ID requests. This includes FAT32 and exFAT.

: Add os.path.isdevdrive() to detect whether a path is on a
Windows Dev Drive. Returns  on platforms that do not support Dev
Drive, and is absent on non-Windows platforms.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to use SQLite 3.43.1.
: Update macOS installer to use OpenSSL 3.0.11.
: Update macOS installer to use OpenSSL 3.0.9.

: Update macOS installer to use SQLite 3.43.1.

: Update macOS installer to use OpenSSL 3.0.11.

: Update macOS installer to use OpenSSL 3.0.9.

================================================================================

# Changelog - IDLE

List:
: Remove IDLEâs modification of tokenize.tabsize and test other
uses of tokenize data and methods.

: Remove IDLEâs modification of tokenize.tabsize and test other
uses of tokenize data and methods.

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: Update GitHub CI workflows to use OpenSSL 3.0.11 and
multissltests to use 1.1.1w, 3.0.11, and 3.1.3.
: Argument Clinic now has a
partial support of the Limited API: see
documentation in the Python Developerâs Guide
Patch by Victor Stinner.
: It is now possible to deprecate passing keyword arguments for
keyword-or-positional parameters with Argument Clinic, using the new 
  syntax. (To be read as âpositional-only from Python version
X.Yâ.) See documentation in the Python Developerâs Guide
for more information.
: Argument Clinic can now clone __init__() and
 methods.
: Add  option to Argument Clinic CLI.
: Argument Clinic now supports overriding automatically generated
signature by using directive @text_signature. See documentation in
the Python Developerâs Guide
: Fix duplicate module check in Argument Clinic. Previously, a
duplicate definition would incorrectly be silently accepted. Patch by
Erlend E. Aasland.
: The Argument Clinic command-line tool now prints to stderr
instead of stdout on failure.
: Fix bugs in the Argument Clinic destination  
command; the destination buffers would never be cleared, and the
destination directive parser would simply continue to the fault
handler after processing the command. Patch by Erlend E. Aasland.
: Change bytecode syntax for families to remove redundant name
matching pseudo syntax.
: Argument Clinic now explicitly forbids âkwarg splatsâ in
function calls used as annotations.
:  now fetches CONFIG_ARGS from the original
CPython instance the Makefile uses to call utility scripts. Patch by
Ijtaba Hussain.
: It is now possible to deprecate passing parameters positionally
with Argument Clinic, using the new    syntax. (To be read
as âkeyword-only from Python version X.Yâ.) See documentation in the
Python Developerâs Guide
for more information. Patch by Erlend E. Aasland with help from Alex
Waygood, Nikita Sobolev, and Serhiy Storchaka.

================================================================================

# Changelog - Tools/Demos (Part 2)

: Update GitHub CI workflows to use OpenSSL 3.0.11 and
multissltests to use 1.1.1w, 3.0.11, and 3.1.3.

: Argument Clinic now has a
partial support of the Limited API: see
documentation in the Python Developerâs Guide
Patch by Victor Stinner.

: It is now possible to deprecate passing keyword arguments for
keyword-or-positional parameters with Argument Clinic, using the new 
  syntax. (To be read as âpositional-only from Python version
X.Yâ.) See documentation in the Python Developerâs Guide
for more information.

: Argument Clinic can now clone __init__() and
 methods.

: Add  option to Argument Clinic CLI.

: Argument Clinic now supports overriding automatically generated
signature by using directive @text_signature. See documentation in
the Python Developerâs Guide

: Fix duplicate module check in Argument Clinic. Previously, a
duplicate definition would incorrectly be silently accepted. Patch by
Erlend E. Aasland.

: The Argument Clinic command-line tool now prints to stderr
instead of stdout on failure.

================================================================================

# Changelog - Tools/Demos (Part 3)

: Fix bugs in the Argument Clinic destination  
command; the destination buffers would never be cleared, and the
destination directive parser would simply continue to the fault
handler after processing the command. Patch by Erlend E. Aasland.

: Change bytecode syntax for families to remove redundant name
matching pseudo syntax.

: Argument Clinic now explicitly forbids âkwarg splatsâ in
function calls used as annotations.

:  now fetches CONFIG_ARGS from the original
CPython instance the Makefile uses to call utility scripts. Patch by
Ijtaba Hussain.

: It is now possible to deprecate passing parameters positionally
with Argument Clinic, using the new    syntax. (To be read
as âkeyword-only from Python version X.Yâ.) See documentation in the
Python Developerâs Guide
for more information. Patch by Erlend E. Aasland with help from Alex
Waygood, Nikita Sobolev, and Serhiy Storchaka.

================================================================================

# Changelog - C API (Part 1)

List:
: If the Py_LIMITED_API macro is defined,
Py_BUILD_CORE, Py_BUILD_CORE_BUILTIN and
Py_BUILD_CORE_MODULE macros are now undefined by
<Python.h>. Patch by Victor Stinner.
: Add PyUnicode_EqualToUTF8AndSize() and
PyUnicode_EqualToUTF8() functions.
: Raise  for duplicate/unknown fields in
PyStructSequence constructor. Patched by Xuehai Pan.
: Remove undocumented PY_TIMEOUT_MAX constant from the
limited C API. Patch by Victor Stinner.
: PyImport_GetImporter() now sets RuntimeError if it
fails to get sys.path_hooks or sys.path_importer_cache or
they are not list and dict correspondingly. Previously it could return
NULL without setting error in obscure cases, crash or raise SystemError if
these attributes have wrong type.
: Add  internal-only lightweight locking API.
: Add PySys_AuditTuple() function: similar to
PySys_Audit(), but pass event arguments as a Python 
object.  Patch by Victor Stinner.
: Add PyThreadState_GetUnchecked() function: similar to
PyThreadState_Get(), but donât kill the process with a fatal
error if it is NULL. The caller is responsible to check if the result is
NULL. Previously, the function was private and known as
_PyThreadState_UncheckedGet(). Patch by Victor Stinner.
:  no longer includes the  standard
header file. If needed, it should now be included explicitly. For example,
it provides  and  functions which are locale
dependent. Python provides locale independent functions, like
Py_ISALPHA() and Py_TOLOWER(). Patch by Victor Stinner.
:  no longer includes the <unistd.h> standard
header file. If needed, it should now be included explicitly. For example,
it provides the functions: , getpagesize(), 
and . Patch by Victor Stinner.
:  no longer includes the <ieeefp.h> standard
header. It was included for the  function which is now
provided by the  header. It should now be included explicitly
if needed. Remove also the HAVE_IEEEFP_H macro. Patch by Victor
Stinner.
:  no longer includes these standard header files:
, <sys/select.h> and <sys/time.h>. If needed, they
should now be included explicitly. For example,  provides the
 and  functions, <sys/select.h> provides the
 function, and <sys/time.h> provides the ,
gettimeofday() and setitimer() functions. Patch by Victor Stinner.
: Add functions PyObject_HasAttrWithError(),
PyObject_HasAttrStringWithError(),
PyMapping_HasKeyWithError() and
PyMapping_HasKeyStringWithError().
: Add PyObject_VisitManagedDict() and
PyObject_ClearManagedDict() functions which must be called by the
traverse and clear functions of a type using
Py_TPFLAGS_MANAGED_DICT flag. Patch by Victor Stinner.
: Python built with  --with-trace-refs
(tracing references) now supports the Limited API.
Patch by Victor Stinner.
: Add PyLong_AsInt() function: similar to
PyLong_AsLong(), but store the result in a C  instead
of a C . Previously, it was known as the private function
_PyLong_AsInt() (with an underscore prefix). Patch by Victor
Stinner.
: Add PyDict_ContainsString() function: same as
PyDict_Contains(), but  is specified as a  UTF-8 encoded bytes string, rather than a .
Patch by Victor Stinner.
: Add atomic operations on additional data types in pyatomic.h.
: Add Py_IsFinalizing() function: check if the main
Python interpreter is shutting down. Patch
by Victor Stinner.
: C API functions PyErr_SetFromErrnoWithFilename(),
PyErr_SetExcFromWindowsErrWithFilename() and
PyErr_SetFromWindowsErrWithFilename() save now the error code
before calling PyUnicode_DecodeFSDefault().
: Such C API functions as PyErr_SetString(),
PyErr_Format(), PyErr_SetFromErrnoWithFilename() and many others
no longer crash or ignore errors if it failed to format the error message
or decode the filename. Instead, they keep a corresponding error.
: Improve DeprecationWarning for uses of
PyType_Spec with metaclasses that have custom .
: Implement the  macro for Windows MSVC
compiler. Patch by Victor Stinner.
: PyModule_AddObjectRef() is now only available in the
limited API version 3.10 or later.
: Remove private _PyUnicode_AsString() alias to
PyUnicode_AsUTF8(). It was kept for backward compatibility with
Python 3.0 - 3.2. The PyUnicode_AsUTF8() is available since Python
3.3. The PyUnicode_AsUTF8String() function can be used to keep
compatibility with Python 3.2 and older. Patch by Victor Stinner.
: Convert PyObject_DelAttr() and
PyObject_DelAttrString() macros to functions. Patch by Victor
Stinner.
: Add PyMapping_GetOptionalItem() function.
: Add PyObject_GetOptionalAttr() and
PyObject_GetOptionalAttrString() functions.
: Remove _PyInterpreterState_Get() alias to
PyInterpreterState_Get() which was kept for backward
compatibility with Python 3.8. Patch by Victor Stinner.
: Remove cpython/pytime.h header file: it only contained
private functions. Patch by Victor Stinner.
: Remove private _PyObject_FastCall() function: use
PyObject_Vectorcall() which is available since Python 3.8
(). Patch by Victor Stinner.
: If Python is built in debug mode or
 assertions, PyTuple_SET_ITEM()
and PyList_SET_ITEM() now check the index argument with an
assertion. If the assertion fails, make sure that the size is set before.
Patch by Victor Stinner.
: Remove the old aliases to functions calling functions which
were kept for backward compatibility with Python 3.8 provisional API:

================================================================================

# Changelog - C API (Part 2)

_PyObject_CallMethodNoArgs(): use PyObject_CallMethodNoArgs()
_PyObject_CallMethodOneArg(): use PyObject_CallMethodOneArg()
_PyObject_CallOneArg(): use PyObject_CallOneArg()
_PyObject_FastCallDict(): use PyObject_VectorcallDict()
_PyObject_Vectorcall(): use PyObject_Vectorcall()
_PyObject_VectorcallMethod(): use PyObject_VectorcallMethod()
_PyVectorcall_Function(): use PyVectorcall_Function()

Just remove the underscore prefix to update your code. Patch by Victor
Stinner.

================================================================================

# Changelog - C API (Part 3)

: Adds PyDict_GetItemRef() and
PyDict_GetItemStringRef() functions: similar to
PyDict_GetItemWithError() but returning a strong reference
instead of a borrowed reference. Patch by Victor Stinner.
: Deprecate the PyWeakref_GetObject() and
PyWeakref_GET_OBJECT() functions: use the new
PyWeakref_GetRef() function instead. Patch by Victor Stinner.
: Add PyWeakref_GetRef() function: similar to
PyWeakref_GetObject() but returns a strong reference, or
 if the referent is no longer live. Patch by Victor Stinner.
: Add PyImport_AddModuleRef(): similar to
PyImport_AddModule(), but return a strong reference
instead of a borrowed reference. Patch by Victor Stinner.
: The new PyType_GetDict() provides the dictionary for
the given type object that is normally exposed by cls.__dict__.
Normally itâs sufficient to use , but for
the static builtin types  is now always .
PyType_GetDict() provides the correct dict object instead.
: Fix a bug in PyErr_WarnExplicit() where an exception
could end up being overwritten if the API failed internally.
: Weâve renamed the new (in 3.12) PyInterpreterConfig.own_gil
to PyInterpreterConfig.gil and changed the meaning of the value from
âboolâ to an integer with supported values of
PyInterpreterConfig_DEFAULT_GIL, PyInterpreterConfig_SHARED_GIL,
and PyInterpreterConfig_OWN_GIL. The default is âsharedâ.
: In the limited C API version 3.12, Py_INCREF() and
Py_DECREF() functions are now implemented as opaque function calls
to hide implementation details. Patch by Victor Stinner.
: Deprecate the PyImport_ImportModuleNoBlock() function
which is just an alias to PyImport_ImportModule() since Python
3.3. Patch by Victor Stinner.
: PyType_FromMetaclass() now allows metaclasses with
 set to .
: Remove the old private, undocumented and untested
_PyGC_FINALIZED() macro which was kept for backward compatibility with
Python 3.8 and older. Patch by Victor Stinner.
: Remove PyEval_AcquireLock() and PyEval_ReleaseLock()
functions, deprecated in Python 3.2. Patch by Victor Stinner.
: Remove PyEval_InitThreads() and
PyEval_ThreadsInitialized() functions, deprecated in Python 3.9. Patch
by Victor Stinner.
: Deprecate old Python initialization functions:

================================================================================

# Changelog - C API (Part 4)

PySys_ResetWarnOptions()
Py_GetExecPrefix()
Py_GetPath()
Py_GetPrefix()
Py_GetProgramFullPath()
Py_GetProgramName()
Py_GetPythonHome()

Patch by Victor Stinner.

: PyObject_AsCharBuffer(), PyObject_AsReadBuffer(),
PyObject_CheckReadBuffer(), and PyObject_AsWriteBuffer() are
removed. Please migrate to new buffer protocol;
PyObject_GetBuffer() and PyBuffer_Release().
: Deprecate the old Py_UNICODE and PY_UNICODE_TYPE types:
use directly the  type instead. Since Python 3.3,
Py_UNICODE and PY_UNICODE_TYPE are just aliases to
. Patch by Victor Stinner.
: Remove the following old functions to configure the Python
initialization, deprecated in Python 3.11:

PySys_AddWarnOptionUnicode()
PySys_AddWarnOption()
PySys_AddXOption()
PySys_HasWarnOptions()
PySys_SetArgvEx()
PySys_SetArgv()
PySys_SetPath()
Py_SetPath()
Py_SetProgramName()
Py_SetPythonHome()
Py_SetStandardStreamEncoding()
_Py_SetProgramFullPath()

Patch by Victor Stinner.

: Remove functions deprecated in Python 3.9.

================================================================================

# Changelog - C API (Part 5)

PyEval_CallObject(), PyEval_CallObjectWithKeywords(): use
PyObject_CallNoArgs() and PyObject_Call() (positional
arguments must not be ) instead.
PyEval_CallFunction(): use PyObject_CallFunction() instead.
PyEval_CallMethod(): use PyObject_CallMethod() instead.
PyCFunction_Call(): use PyObject_Call() instead.

Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 6)

: PyTypeObject.tp_bases (and ) for builtin static
types are now shared by all interpreters, whereas in 3.12-beta1 they were
stored on PyInterpreterState.  Also note that now the tuples are
immortal objects.
: Add PyUnstable_Exc_PrepReraiseStar to the unstable C api to
expose the implementation of .
: PY_SSIZE_T_CLEAN is no longer required to use 
formats in APIs like PyArg_ParseTuple() and
Py_BuildValue(). They uses Py_ssize_t for  regardless
PY_SSIZE_T_CLEAN.
: Add an unstable C API for hooking in an optimizer. This is
mainly internal, but marked âunstableâ to allow third-party
experimentation.
: Donât call PyOS_InputHook or
PyOS_ReadlineFunctionPointer in subinterpreters, since itâs
generally difficult to avoid using global state in their registered
callbacks. This also avoids situations where extensions may find
themselves running in a subinterpreter they donât support (or havenât yet
been loaded in).
: Add PyModule_Add() function: similar to
PyModule_AddObjectRef() and PyModule_AddObject(), but
always steals a reference to the value.
: Properly handle trailing spaces before closing parenthesis in
Py_BuildValue() format strings.

================================================================================

# Changelog - C API (Part 7)

: If the Py_LIMITED_API macro is defined,
Py_BUILD_CORE, Py_BUILD_CORE_BUILTIN and
Py_BUILD_CORE_MODULE macros are now undefined by
<Python.h>. Patch by Victor Stinner.

: Add PyUnicode_EqualToUTF8AndSize() and
PyUnicode_EqualToUTF8() functions.

: Raise  for duplicate/unknown fields in
PyStructSequence constructor. Patched by Xuehai Pan.

: Remove undocumented PY_TIMEOUT_MAX constant from the
limited C API. Patch by Victor Stinner.

: PyImport_GetImporter() now sets RuntimeError if it
fails to get sys.path_hooks or sys.path_importer_cache or
they are not list and dict correspondingly. Previously it could return
NULL without setting error in obscure cases, crash or raise SystemError if
these attributes have wrong type.

: Add  internal-only lightweight locking API.

: Add PySys_AuditTuple() function: similar to
PySys_Audit(), but pass event arguments as a Python 
object.  Patch by Victor Stinner.

: Add PyThreadState_GetUnchecked() function: similar to
PyThreadState_Get(), but donât kill the process with a fatal
error if it is NULL. The caller is responsible to check if the result is
NULL. Previously, the function was private and known as
_PyThreadState_UncheckedGet(). Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 8)

:  no longer includes the  standard
header file. If needed, it should now be included explicitly. For example,
it provides  and  functions which are locale
dependent. Python provides locale independent functions, like
Py_ISALPHA() and Py_TOLOWER(). Patch by Victor Stinner.

:  no longer includes the <unistd.h> standard
header file. If needed, it should now be included explicitly. For example,
it provides the functions: , getpagesize(), 
and . Patch by Victor Stinner.

:  no longer includes the <ieeefp.h> standard
header. It was included for the  function which is now
provided by the  header. It should now be included explicitly
if needed. Remove also the HAVE_IEEEFP_H macro. Patch by Victor
Stinner.

:  no longer includes these standard header files:
, <sys/select.h> and <sys/time.h>. If needed, they
should now be included explicitly. For example,  provides the
 and  functions, <sys/select.h> provides the
 function, and <sys/time.h> provides the ,
gettimeofday() and setitimer() functions. Patch by Victor Stinner.

: Add functions PyObject_HasAttrWithError(),
PyObject_HasAttrStringWithError(),
PyMapping_HasKeyWithError() and
PyMapping_HasKeyStringWithError().

================================================================================

# Changelog - C API (Part 9)

: Add PyObject_VisitManagedDict() and
PyObject_ClearManagedDict() functions which must be called by the
traverse and clear functions of a type using
Py_TPFLAGS_MANAGED_DICT flag. Patch by Victor Stinner.

: Python built with  --with-trace-refs
(tracing references) now supports the Limited API.
Patch by Victor Stinner.

: Add PyLong_AsInt() function: similar to
PyLong_AsLong(), but store the result in a C  instead
of a C . Previously, it was known as the private function
_PyLong_AsInt() (with an underscore prefix). Patch by Victor
Stinner.

: Add PyDict_ContainsString() function: same as
PyDict_Contains(), but  is specified as a  UTF-8 encoded bytes string, rather than a .
Patch by Victor Stinner.

: Add atomic operations on additional data types in pyatomic.h.

: Add Py_IsFinalizing() function: check if the main
Python interpreter is shutting down. Patch
by Victor Stinner.

: C API functions PyErr_SetFromErrnoWithFilename(),
PyErr_SetExcFromWindowsErrWithFilename() and
PyErr_SetFromWindowsErrWithFilename() save now the error code
before calling PyUnicode_DecodeFSDefault().

================================================================================

# Changelog - C API (Part 10)

: Such C API functions as PyErr_SetString(),
PyErr_Format(), PyErr_SetFromErrnoWithFilename() and many others
no longer crash or ignore errors if it failed to format the error message
or decode the filename. Instead, they keep a corresponding error.

: Improve DeprecationWarning for uses of
PyType_Spec with metaclasses that have custom .

: Implement the  macro for Windows MSVC
compiler. Patch by Victor Stinner.

: PyModule_AddObjectRef() is now only available in the
limited API version 3.10 or later.

: Remove private _PyUnicode_AsString() alias to
PyUnicode_AsUTF8(). It was kept for backward compatibility with
Python 3.0 - 3.2. The PyUnicode_AsUTF8() is available since Python
3.3. The PyUnicode_AsUTF8String() function can be used to keep
compatibility with Python 3.2 and older. Patch by Victor Stinner.

: Convert PyObject_DelAttr() and
PyObject_DelAttrString() macros to functions. Patch by Victor
Stinner.

: Add PyMapping_GetOptionalItem() function.

: Add PyObject_GetOptionalAttr() and
PyObject_GetOptionalAttrString() functions.

: Remove _PyInterpreterState_Get() alias to
PyInterpreterState_Get() which was kept for backward
compatibility with Python 3.8. Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 11)

: Remove cpython/pytime.h header file: it only contained
private functions. Patch by Victor Stinner.

: Remove private _PyObject_FastCall() function: use
PyObject_Vectorcall() which is available since Python 3.8
(). Patch by Victor Stinner.

: If Python is built in debug mode or
 assertions, PyTuple_SET_ITEM()
and PyList_SET_ITEM() now check the index argument with an
assertion. If the assertion fails, make sure that the size is set before.
Patch by Victor Stinner.

: Remove the old aliases to functions calling functions which
were kept for backward compatibility with Python 3.8 provisional API:

List:
_PyObject_CallMethodNoArgs(): use PyObject_CallMethodNoArgs()
_PyObject_CallMethodOneArg(): use PyObject_CallMethodOneArg()
_PyObject_CallOneArg(): use PyObject_CallOneArg()
_PyObject_FastCallDict(): use PyObject_VectorcallDict()
_PyObject_Vectorcall(): use PyObject_Vectorcall()
_PyObject_VectorcallMethod(): use PyObject_VectorcallMethod()
_PyVectorcall_Function(): use PyVectorcall_Function()

_PyObject_CallMethodNoArgs(): use PyObject_CallMethodNoArgs()

_PyObject_CallMethodOneArg(): use PyObject_CallMethodOneArg()

_PyObject_CallOneArg(): use PyObject_CallOneArg()

================================================================================

# Changelog - C API (Part 12)

_PyObject_FastCallDict(): use PyObject_VectorcallDict()

_PyObject_Vectorcall(): use PyObject_Vectorcall()

_PyObject_VectorcallMethod(): use PyObject_VectorcallMethod()

_PyVectorcall_Function(): use PyVectorcall_Function()

Just remove the underscore prefix to update your code. Patch by Victor
Stinner.

: Adds PyDict_GetItemRef() and
PyDict_GetItemStringRef() functions: similar to
PyDict_GetItemWithError() but returning a strong reference
instead of a borrowed reference. Patch by Victor Stinner.

: Deprecate the PyWeakref_GetObject() and
PyWeakref_GET_OBJECT() functions: use the new
PyWeakref_GetRef() function instead. Patch by Victor Stinner.

: Add PyWeakref_GetRef() function: similar to
PyWeakref_GetObject() but returns a strong reference, or
 if the referent is no longer live. Patch by Victor Stinner.

: Add PyImport_AddModuleRef(): similar to
PyImport_AddModule(), but return a strong reference
instead of a borrowed reference. Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 13)

: The new PyType_GetDict() provides the dictionary for
the given type object that is normally exposed by cls.__dict__.
Normally itâs sufficient to use , but for
the static builtin types  is now always .
PyType_GetDict() provides the correct dict object instead.

: Fix a bug in PyErr_WarnExplicit() where an exception
could end up being overwritten if the API failed internally.

: Weâve renamed the new (in 3.12) PyInterpreterConfig.own_gil
to PyInterpreterConfig.gil and changed the meaning of the value from
âboolâ to an integer with supported values of
PyInterpreterConfig_DEFAULT_GIL, PyInterpreterConfig_SHARED_GIL,
and PyInterpreterConfig_OWN_GIL. The default is âsharedâ.

: In the limited C API version 3.12, Py_INCREF() and
Py_DECREF() functions are now implemented as opaque function calls
to hide implementation details. Patch by Victor Stinner.

: Deprecate the PyImport_ImportModuleNoBlock() function
which is just an alias to PyImport_ImportModule() since Python
3.3. Patch by Victor Stinner.

: PyType_FromMetaclass() now allows metaclasses with
 set to .

================================================================================

# Changelog - C API (Part 14)

: Remove the old private, undocumented and untested
_PyGC_FINALIZED() macro which was kept for backward compatibility with
Python 3.8 and older. Patch by Victor Stinner.

: Remove PyEval_AcquireLock() and PyEval_ReleaseLock()
functions, deprecated in Python 3.2. Patch by Victor Stinner.

: Remove PyEval_InitThreads() and
PyEval_ThreadsInitialized() functions, deprecated in Python 3.9. Patch
by Victor Stinner.

: Deprecate old Python initialization functions:

List:
PySys_ResetWarnOptions()
Py_GetExecPrefix()
Py_GetPath()
Py_GetPrefix()
Py_GetProgramFullPath()
Py_GetProgramName()
Py_GetPythonHome()

PySys_ResetWarnOptions()

Py_GetProgramFullPath()

Patch by Victor Stinner.

: PyObject_AsCharBuffer(), PyObject_AsReadBuffer(),
PyObject_CheckReadBuffer(), and PyObject_AsWriteBuffer() are
removed. Please migrate to new buffer protocol;
PyObject_GetBuffer() and PyBuffer_Release().

: Deprecate the old Py_UNICODE and PY_UNICODE_TYPE types:
use directly the  type instead. Since Python 3.3,
Py_UNICODE and PY_UNICODE_TYPE are just aliases to
. Patch by Victor Stinner.

: Remove the following old functions to configure the Python
initialization, deprecated in Python 3.11:

================================================================================

# Changelog - C API (Part 15)

List:
PySys_AddWarnOptionUnicode()
PySys_AddWarnOption()
PySys_AddXOption()
PySys_HasWarnOptions()
PySys_SetArgvEx()
PySys_SetArgv()
PySys_SetPath()
Py_SetPath()
Py_SetProgramName()
Py_SetPythonHome()
Py_SetStandardStreamEncoding()
_Py_SetProgramFullPath()

PySys_AddWarnOptionUnicode()

PySys_AddWarnOption()

PySys_HasWarnOptions()

Py_SetStandardStreamEncoding()

_Py_SetProgramFullPath()

Patch by Victor Stinner.

: Remove functions deprecated in Python 3.9.

List:
PyEval_CallObject(), PyEval_CallObjectWithKeywords(): use
PyObject_CallNoArgs() and PyObject_Call() (positional
arguments must not be ) instead.
PyEval_CallFunction(): use PyObject_CallFunction() instead.
PyEval_CallMethod(): use PyObject_CallMethod() instead.
PyCFunction_Call(): use PyObject_Call() instead.

PyEval_CallObject(), PyEval_CallObjectWithKeywords(): use
PyObject_CallNoArgs() and PyObject_Call() (positional
arguments must not be ) instead.

PyEval_CallFunction(): use PyObject_CallFunction() instead.

PyEval_CallMethod(): use PyObject_CallMethod() instead.

PyCFunction_Call(): use PyObject_Call() instead.

Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 16)

: PyTypeObject.tp_bases (and ) for builtin static
types are now shared by all interpreters, whereas in 3.12-beta1 they were
stored on PyInterpreterState.  Also note that now the tuples are
immortal objects.

: Add PyUnstable_Exc_PrepReraiseStar to the unstable C api to
expose the implementation of .

: PY_SSIZE_T_CLEAN is no longer required to use 
formats in APIs like PyArg_ParseTuple() and
Py_BuildValue(). They uses Py_ssize_t for  regardless
PY_SSIZE_T_CLEAN.

: Add an unstable C API for hooking in an optimizer. This is
mainly internal, but marked âunstableâ to allow third-party
experimentation.

: Donât call PyOS_InputHook or
PyOS_ReadlineFunctionPointer in subinterpreters, since itâs
generally difficult to avoid using global state in their registered
callbacks. This also avoids situations where extensions may find
themselves running in a subinterpreter they donât support (or havenât yet
been loaded in).

: Add PyModule_Add() function: similar to
PyModule_AddObjectRef() and PyModule_AddObject(), but
always steals a reference to the value.

: Properly handle trailing spaces before closing parenthesis in
Py_BuildValue() format strings.

================================================================================

# Changelog - Security

List:
: Fixed a security in flaw in uu.decode() that could allow
for directory traversal based on the input if no  was
specified.
: Do not expose the local on-disk location in directory indexes
produced by http.client.SimpleHTTPRequestHandler.
: Upgrade built-in  SHA3 implementation to a
verified implementation from the  project.  Used when OpenSSL is
not present or lacks SHA3.
: urllib.parse.urlsplit() now strips leading C0 control and
space characters following the specification for URLs defined by WHATWG in
response to CVE 2023-24329. Patch by Illia Volochii.

: Fixed a security in flaw in uu.decode() that could allow
for directory traversal based on the input if no  was
specified.

: Do not expose the local on-disk location in directory indexes
produced by http.client.SimpleHTTPRequestHandler.

: Upgrade built-in  SHA3 implementation to a
verified implementation from the  project.  Used when OpenSSL is
not present or lacks SHA3.

: urllib.parse.urlsplit() now strips leading C0 control and
space characters following the specification for URLs defined by WHATWG in
response to CVE 2023-24329. Patch by Illia Volochii.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Implement PEP 701 changes in the  module. Patch
by Marta GÃ³mez MacÃ­as and Pablo Galindo Salgado
: Fix wrong ordering of assignments in code like     .
Contributed by Carl Meyer.
: Improve syntax error message for invalid constructs in
 contexts and in annotations when  __future__ 
annotations is active.
: Fix three error handling bugs in ast.câs validation of pattern
matching statements.
: Do not add a frame to the traceback in the sys.setprofile
and sys.settrace trampoline functions. This ensures that frames are
not duplicated if an exception is raised in the callback function, and
ensures that frames are not omitted if a C callback is used and that does
not add the frame.
: Fix an issue where some  instructions could
ignore  when âinliningâ calls.
: Change behavior of sys.monitoring.events.LINE events in
sys.monitoring: Line events now occur when a new line is reached
dynamically, instead of using a static approximation, as before. This
makes the behavior very similar to that of âlineâ events in
sys.settrace. This should ease porting of tools from 3.11 to 3.12.
: Fix float("nan") to produce a quiet NaN on platforms (like
MIPS) where the meaning of the signalling / quiet bit is inverted from its
usual meaning. Also introduce a new macro Py_INFINITY matching C99âs
, and refactor internals to rely on C99âs  and
 macros instead of hard-coding bit patterns for infinities and
NaNs. Thanks Sebastian Berg.
: Multi-phase init extension modules may now indicate that they
support running in subinterpreters that have their own GIL.  This is done
by using Py_MOD_PER_INTERPRETER_GIL_SUPPORTED as the value for the
Py_mod_multiple_interpreters module def slot.  Otherwise the module,
by default, cannot be imported in such subinterpreters.  (This does not
affect the main interpreter or subinterpreters that do not have their own
GIL.)  In addition to the isolation that multi-phase init already normally
requires, support for per-interpreter GIL involves one additional
constraint: thread-safety.  If the module has external (linked)
dependencies and those libraries have any state that isnât thread-safe
then the module must do the additional work to add thread-safety.  This
should be an uncommon case.
: The GIL is now (optionally) per-interpreter.  This is the
fundamental change for PEP 684.  This is all made possible by virtue of
the isolated state of each interpreter in the process.  The behavior of
the main interpreter remains unchanged.  Likewise, interpreters created
using Py_NewInterpreter() are not affected.  To get an interpreter
with its own GIL, call Py_NewInterpreterFromConfig().
: Multi-phase init extension modules may now indicate whether or
not they actually support multiple interpreters.  By default such modules
are expected to support use in multiple interpreters.  In the uncommon
case that one does not, it may use the new
Py_mod_multiple_interpreters module def slot.  A value of  means
the module does not support them.  means it does.  The default is
.
: Fix an issue where  or  repetition
could fail to respect .
: Improve the performance of PyObject_HasAttrString()
: Improve the performance of  for module objects
with a missing attribute.
: Reduce object creation while calling callback function from gc.
Patch by Donghee Na.
: Disallow the âzâ format specifier in %-format of bytes objects.
: Fix performance loss when accessing an objectâs attributes with
__getattr__  defined.
: Improve handling of edge cases in showing
Exception.__notes__. Ensures that the messages always end with a
newline and that string/bytes are not exploded over multiple lines. Patch
by Carey Metcalfe.
: Donât modify the refcounts of known immortal objects
(, , and ) in the main interpreter
loop.
: Provide a helpful hint in the  message when
accidentally calling a  object that has a callable attribute
of the same name (such as  or datetime.datetime).
: Remove both line and instruction instrumentation before adding
new ones for monitoring, to avoid newly added instrumentation being
removed immediately.
: Implement , adding syntactic support for generic
classes, generic functions, and type aliases.
A new     syntax is added for type aliases, which resolves at
runtime to an instance of the new class typing.TypeAliasType. The
value is lazily evaluated and is accessible through the .__value__
attribute. This is implemented as a new AST node ast.TypeAlias.
New syntax (  ,  func[T](): ) is added for
defining generic functions and classes. This is implemented as a new
type_params attribute on the AST nodes for classes and functions. This
node holds instances of the new AST classes ast.TypeVar,
ast.ParamSpec, and ast.TypeVarTuple.
typing.TypeVar, typing.ParamSpec, typing.ParamSpecArgs,
typing.ParamSpecKwargs, typing.TypeVarTuple, and
typing.Generic are now implemented in C rather than Python.
There are new bytecode instructions LOAD_LOCALS,
LOAD_CLASSDICT_OR_GLOBAL, and LOAD_CLASSDICT_OR_DEREF to support
correct resolution of names in class namespaces.
Patch by Eric Traut, Larry Hastings, and Jelle Zijlstra.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Adds three minor linting fixes to the wasm module caught that
were caught by ruff.
: Optimized asyncio Task creation by deferring expensive string
formatting (task name generation) from Task creation to the first time
 is called. This makes asyncio benchmarks up to 5% faster.
: Change the error range for invalid bytes literals.
: Do not wrap a single exception raised from a try-except*
construct in an ExceptionGroup.
: Change the perf map format to remove the â0xâ prefix from the
addresses
: Implement the required C tokenizer changes for PEP 701. Patch
by Pablo Galindo Salgado, Lysandros Nikolaou, Batuhan Taskaya, Marta GÃ³mez
MacÃ­as and sunmy2019.
: Clarify the error message raised when the called part of a
class pattern isnât actually a class.
: Fix bug in line numbers of instructions emitted for
.
: Clarify SyntaxWarning with literal  comparison by
specifying which literal is problematic, since comparisons using 
with e.g.  and bool literals are idiomatic.
: Add LOAD_SUPER_ATTR (and a specialization for
super().method()) to speed up super().method() and
super().attr. This makes super().method() roughly 2.3x faster and
brings it within 20% of the performance of a simple method call. Patch by
Vladimir Matveev and Carl Meyer.
: Change the internal offset distinguishing yield and return
target addresses, so that the instruction pointer is correct for exception
handling and other stack unwinding.
: The bitwise inversion operator () on bool is deprecated. It
returns the bitwise inversion of the underlying  representation
such that bool(~True)  , which can be confusing. Use  for
logical negation of bools. In the rare case that you really need the
bitwise inversion of the underlying , convert to int explicitly
.
: Exceptions raised in a typeobjectâs __set_name__ method are
no longer wrapped by a RuntimeError. Context information is added
to the exception as a  note.
: AttributeError now retains the  attribute when
pickled and unpickled.
: Migrate set_ecdh_curve() method not to
use deprecated OpenSSL APIs. Patch by Donghee Na.
: Weâve replaced our use of _PyRuntime.tstate_current with a
thread-local variable.  This is a fairly low-level implementation detail,
and there should be no change in behavior.
: The implementation of PEP-683 which adds Immortal Objects by
using a fixed reference count that skips reference counting to make
objects truly immutable.
: Allow built-in modules to be submodules. This allows submodules
to be statically linked into a CPython binary.
: Implement  Low Impact Monitoring for CPython.
: Reduce the number of inline  entries for
.
: Make the buffer protocol accessible in Python code using the
new __buffer__ and __release_buffer__ magic methods. See
 for details. Patch by Jelle Zijlstra.
: : inline list, dict and set comprehensions to improve
performance and reduce bytecode size.
: Bypass instance attribute access of  in  of
weakref.ref.
: Complex function calls are now faster and consume no C stack
space.
:  for 0-dimensional memoryview objects (such
as memoryview(ctypes.c_uint8(42))) now raises a .
Previously this returned , which was not consistent with
 raising an IndexError.
: Fix pause_reading() to work when called from
connection_made() in .

================================================================================

# Changelog - Core and Builtins (Part 3)

: Implement PEP 701 changes in the  module. Patch
by Marta GÃ³mez MacÃ­as and Pablo Galindo Salgado

: Fix wrong ordering of assignments in code like     .
Contributed by Carl Meyer.

: Improve syntax error message for invalid constructs in
 contexts and in annotations when  __future__ 
annotations is active.

: Fix three error handling bugs in ast.câs validation of pattern
matching statements.

: Do not add a frame to the traceback in the sys.setprofile
and sys.settrace trampoline functions. This ensures that frames are
not duplicated if an exception is raised in the callback function, and
ensures that frames are not omitted if a C callback is used and that does
not add the frame.

: Fix an issue where some  instructions could
ignore  when âinliningâ calls.

: Change behavior of sys.monitoring.events.LINE events in
sys.monitoring: Line events now occur when a new line is reached
dynamically, instead of using a static approximation, as before. This
makes the behavior very similar to that of âlineâ events in
sys.settrace. This should ease porting of tools from 3.11 to 3.12.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix float("nan") to produce a quiet NaN on platforms (like
MIPS) where the meaning of the signalling / quiet bit is inverted from its
usual meaning. Also introduce a new macro Py_INFINITY matching C99âs
, and refactor internals to rely on C99âs  and
 macros instead of hard-coding bit patterns for infinities and
NaNs. Thanks Sebastian Berg.

: Multi-phase init extension modules may now indicate that they
support running in subinterpreters that have their own GIL.  This is done
by using Py_MOD_PER_INTERPRETER_GIL_SUPPORTED as the value for the
Py_mod_multiple_interpreters module def slot.  Otherwise the module,
by default, cannot be imported in such subinterpreters.  (This does not
affect the main interpreter or subinterpreters that do not have their own
GIL.)  In addition to the isolation that multi-phase init already normally
requires, support for per-interpreter GIL involves one additional
constraint: thread-safety.  If the module has external (linked)
dependencies and those libraries have any state that isnât thread-safe
then the module must do the additional work to add thread-safety.  This
should be an uncommon case.

================================================================================

# Changelog - Core and Builtins (Part 5)

: The GIL is now (optionally) per-interpreter.  This is the
fundamental change for PEP 684.  This is all made possible by virtue of
the isolated state of each interpreter in the process.  The behavior of
the main interpreter remains unchanged.  Likewise, interpreters created
using Py_NewInterpreter() are not affected.  To get an interpreter
with its own GIL, call Py_NewInterpreterFromConfig().

: Multi-phase init extension modules may now indicate whether or
not they actually support multiple interpreters.  By default such modules
are expected to support use in multiple interpreters.  In the uncommon
case that one does not, it may use the new
Py_mod_multiple_interpreters module def slot.  A value of  means
the module does not support them.  means it does.  The default is
.

: Fix an issue where  or  repetition
could fail to respect .

: Improve the performance of PyObject_HasAttrString()

: Improve the performance of  for module objects
with a missing attribute.

: Reduce object creation while calling callback function from gc.
Patch by Donghee Na.

: Disallow the âzâ format specifier in %-format of bytes objects.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Fix performance loss when accessing an objectâs attributes with
__getattr__  defined.

: Improve handling of edge cases in showing
Exception.__notes__. Ensures that the messages always end with a
newline and that string/bytes are not exploded over multiple lines. Patch
by Carey Metcalfe.

: Donât modify the refcounts of known immortal objects
(, , and ) in the main interpreter
loop.

: Provide a helpful hint in the  message when
accidentally calling a  object that has a callable attribute
of the same name (such as  or datetime.datetime).

: Remove both line and instruction instrumentation before adding
new ones for monitoring, to avoid newly added instrumentation being
removed immediately.

: Implement , adding syntactic support for generic
classes, generic functions, and type aliases.

A new     syntax is added for type aliases, which resolves at
runtime to an instance of the new class typing.TypeAliasType. The
value is lazily evaluated and is accessible through the .__value__
attribute. This is implemented as a new AST node ast.TypeAlias.

================================================================================

# Changelog - Core and Builtins (Part 7)

New syntax (  ,  func[T](): ) is added for
defining generic functions and classes. This is implemented as a new
type_params attribute on the AST nodes for classes and functions. This
node holds instances of the new AST classes ast.TypeVar,
ast.ParamSpec, and ast.TypeVarTuple.

typing.TypeVar, typing.ParamSpec, typing.ParamSpecArgs,
typing.ParamSpecKwargs, typing.TypeVarTuple, and
typing.Generic are now implemented in C rather than Python.

There are new bytecode instructions LOAD_LOCALS,
LOAD_CLASSDICT_OR_GLOBAL, and LOAD_CLASSDICT_OR_DEREF to support
correct resolution of names in class namespaces.

Patch by Eric Traut, Larry Hastings, and Jelle Zijlstra.

: Adds three minor linting fixes to the wasm module caught that
were caught by ruff.

: Optimized asyncio Task creation by deferring expensive string
formatting (task name generation) from Task creation to the first time
 is called. This makes asyncio benchmarks up to 5% faster.

: Change the error range for invalid bytes literals.

: Do not wrap a single exception raised from a try-except*
construct in an ExceptionGroup.

: Change the perf map format to remove the â0xâ prefix from the
addresses

================================================================================

# Changelog - Core and Builtins (Part 8)

: Implement the required C tokenizer changes for PEP 701. Patch
by Pablo Galindo Salgado, Lysandros Nikolaou, Batuhan Taskaya, Marta GÃ³mez
MacÃ­as and sunmy2019.

: Clarify the error message raised when the called part of a
class pattern isnât actually a class.

: Fix bug in line numbers of instructions emitted for
.

: Clarify SyntaxWarning with literal  comparison by
specifying which literal is problematic, since comparisons using 
with e.g.  and bool literals are idiomatic.

: Add LOAD_SUPER_ATTR (and a specialization for
super().method()) to speed up super().method() and
super().attr. This makes super().method() roughly 2.3x faster and
brings it within 20% of the performance of a simple method call. Patch by
Vladimir Matveev and Carl Meyer.

: Change the internal offset distinguishing yield and return
target addresses, so that the instruction pointer is correct for exception
handling and other stack unwinding.

================================================================================

# Changelog - Core and Builtins (Part 9)

: The bitwise inversion operator () on bool is deprecated. It
returns the bitwise inversion of the underlying  representation
such that bool(~True)  , which can be confusing. Use  for
logical negation of bools. In the rare case that you really need the
bitwise inversion of the underlying , convert to int explicitly
.

: Exceptions raised in a typeobjectâs __set_name__ method are
no longer wrapped by a RuntimeError. Context information is added
to the exception as a  note.

: AttributeError now retains the  attribute when
pickled and unpickled.

: Migrate set_ecdh_curve() method not to
use deprecated OpenSSL APIs. Patch by Donghee Na.

: Weâve replaced our use of _PyRuntime.tstate_current with a
thread-local variable.  This is a fairly low-level implementation detail,
and there should be no change in behavior.

: The implementation of PEP-683 which adds Immortal Objects by
using a fixed reference count that skips reference counting to make
objects truly immutable.

: Allow built-in modules to be submodules. This allows submodules
to be statically linked into a CPython binary.

: Implement  Low Impact Monitoring for CPython.

: Reduce the number of inline  entries for
.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Make the buffer protocol accessible in Python code using the
new __buffer__ and __release_buffer__ magic methods. See
 for details. Patch by Jelle Zijlstra.

: : inline list, dict and set comprehensions to improve
performance and reduce bytecode size.

: Bypass instance attribute access of  in  of
weakref.ref.

: Complex function calls are now faster and consume no C stack
space.

:  for 0-dimensional memoryview objects (such
as memoryview(ctypes.c_uint8(42))) now raises a .
Previously this returned , which was not consistent with
 raising an IndexError.

: Fix pause_reading() to work when called from
connection_made() in .

================================================================================

# Changelog - Library (Part 1)

List:
: functools.update_wrapper() now sets the
__type_params__ attribute (added by ).
: When an  pipe protocol loses its connection due to
an error, and the caller doesnât await wait_closed() on the
corresponding StreamWriter, donât log a warning about an exception
that was never retrieved. After all, according to the
StreamWriter.close() docs, the wait_closed() call is optional
(ânot mandatoryâ).
: Fix issue where an issubclass() check comparing a class
 against a runtime-checkable   with non-callable members would not
cause  to be raised if an isinstance() call had
previously been made comparing an instance of  to . This issue
was present in edge cases on Python 3.11, but became more prominent in
3.12 due to some unrelated changes that were made to runtime-checkable
protocols. Patch by Alex Waygood.
: Refactored the _posixsubprocess internals to avoid Python C
API usage between fork and exec when marking  file
descriptors inheritable.
: Added case_sensitive argument to
pathlib.PurePath.match()
: Fix data descriptor detection in
inspect.getattr_static().
: Fix a race condition in the internal
multiprocessing.process cleanup logic that could manifest as an
unintended AttributeError when calling process.close().
: Update datetime deprecationsâ stracktrace to point to the
calling line
: Move the core functionality of the tracemalloc module in
the  folder, leaving just the module wrapper in .
: Remove undocumented and unused _paramspec_tvars attribute
from some classes in .
: Fix issue where pathlib.Path.glob() raised
RecursionError when walking deep directory trees.
: Improve performance of dataclasses.asdict() for the
common case where dict_factory is . Patch by David C Ellis.
: Allow leading whitespace in disambiguated statements in
.
: Teach urllib.parse.unsplit() to retain the  when
assembling itms-services://?action=generate-bugs style Apple Platform
Deployment
URLs.
: socket.getnameinfo() now releases the GIL while
contacting the DNS server
: Users may now use importlib.util.allowing_all_extensions()
(a context manager) to temporarily disable the strict compatibility checks
for importing extension modules in subinterpreters.
: Fix issue where pathlib.Path.glob() raised 
when it encountered a symlink to an overly long path.
: Prevent possible crash by disallowing instantiation of the
_csv.Reader and _csv.Writer types. The regression was
introduced in 3.10.0a4 with PR 23224 (). Patch by Radislav
Chugunov.
: Improve performance of pathlib.Path.glob() when expanding
recursive wildcards (ââ) by merging adjacent wildcards and
de-duplicating results only when necessary.
: Remove unneeded comments and code in turtle.py.
: Fixed issue where pathlib.Path.glob() returned incomplete
results when it encountered a PermissionError. This method now
suppresses all  exceptions, except those raised from calling
 on the top-level path.
: Optimize asyncio.TaskGroup when using
asyncio.eager_task_factory(). Skip scheduling a done callback if a
TaskGroup task completes eagerly.
: Optimize asyncio.gather() when using
asyncio.eager_task_factory() to complete eagerly if all fututres
completed eagerly. Avoid scheduling done callbacks for futures that
complete eagerly.
: Fix issue where pathlib.Path.glob() returns paths using
the case of non-wildcard segments for corresponding path segments, rather
than the real filesystem case.
: Improve performance of pathlib.Path.glob() by using
re.IGNORECASE to implement case-insensitive matching.
: Improve performance of pathlib.Path.glob() when
evaluating patterns that contain  segments.
: Update the return type of  to the newly added Day
attribute
: Update the  of typing.Unpack according to
.
: Make  display the names of the args for
CALL_INTRINSIC_*.
: Do not ignore user-defined __getstate__ and
__setstate__ methods for slotted frozen dataclasses.
: In , fix several bugs that could lead to access to
memory-mapped files after they have been invalidated.
: Improve import time of  module.
: Added turtle.teleport() to the  module to
move a turtle to a new point without tracing a line, visible or invisible.
Patch by Liam Gersten.
: Use io.open_code() for files to be executed instead of
raw 
: Fixed garbled output of assertEqual()
when an input lacks final newline.
: Fix potential OverflowError in
sqlite3.Connection.blobopen() for 32-bit builds. Patch by Erlend E.
Aasland.
: Substitute CTRL-D with CTRL-Z in  CLI banner when
running on Windows.
: Module-level attributes  and  are
deprecated from .
: Isolate _multibytecodec and codecs extension modules.
Patches by Erlend E. Aasland.
: Add checks to ensure that  bracketed  hosts found by
urllib.parse.urlsplit() are of IPv6 or IPvFuture format.
: Update the bundled copy of pip to version 23.1.2.
: Make  display the value of oparg of
.
: The C.UTF-8 locale is no longer converted to en_US.UTF-8,
enabling the use of UTF-8 encoding on systems which have no locales
installed.
: Fix zipfile.Zipfile creating invalid zip files when
force_zip64 was used to add files to them. Patch by Carey Metcalfe.
: Deprecated datetime.datetime.utcnow() and
datetime.datetime.utcfromtimestamp(). (Patch by Paul Ganssle)
: Avoid compilation error due to tommath.h not being found when
building Tkinter against Tcl 8.7 built with bundled libtommath.
: contextlib.suppress now supports suppressing
exceptions raised as part of an ExceptionGroup. If other exceptions
exist on the group, they are re-raised in a group that does not contain
the suppressed exceptions.
: Use datetime.datetime.fromisocalendar() in the
implementation of datetime.datetime.strptime(), which should now
accept only valid ISO dates. (Patch by Paul Ganssle)
: Prepare tkinter.Menu.index() for Tk 8.7 so that it does
not raise       when it should return
.
: urllib.request.CacheFTPHandler no longer raises
 if a cached FTP instance is reused. ftplibâs endtransfer
method calls voidresp to drain the connection to handle FTP instance reuse
properly.
: Add __orig_bases__ to non-generic TypedDicts, call-based
TypedDicts, and call-based NamedTuples. Other TypedDicts and NamedTuples
already had the attribute.
: Add convenience variable feature to 
: Deprecate , , and  parameters of
argparse.BooleanOptionalAction.
: Add  constants for source-specific multicast. Patch
by Reese Hyde.
: socketserver gains ForkingUnixStreamServer and
ForkingUnixDatagramServer classes. Patch by Jay Berry.
: Added Enum for months and days in the calendar module.
: Create a new Lib/_pydatetime.py file that defines the Python
version of the  module, and make  import the
contents of the new library only if the C implementation is missing.
Currently, the full Python implementation is defined and then deleted if
the C implementation is not available, slowing down  
unnecessarily.
: Attributes/methods are no longer shadowed by same-named enum
members, although they may be shadowed by enum.propertyâs.
: Updated importlib.metadata with changes from
importlib_metadata 5.2 through 6.5.0, including: Support
installed-files.txt for Distribution.files when present.
PackageMetadata now stipulates an additional  method allowing
for easy querying of metadata keys that may not be present.
packages_distributions now honors packages and modules with Python
modules that not  sources (e.g. , ). Expand protocol
for PackageMetadata.get_all to match the upstream implementation of
email.message.Message.get_all in python/typeshed#9620. Deprecated use
of Distribution without defining abstract methods. Deprecated
expectation that PackageMetadata.__getitem__ will return  for
missing keys. In the future, it will raise a .
: Fixed a bug where  crashes when reading source file
with different encoding by replacing  with
io.open_code(). The new method would also call into the hook set by
PyFile_SetOpenCodeHook().
: Now creating inspect.Signature objects with
positional-only parameter with a default followed by a
positional-or-keyword parameter without one is impossible.
: Update the bundled copy of pip to version 23.1.1.
: Improve performance of pathlib.Path.absolute() and
 by joining paths only when necessary. Also
improve performance of pathlib.PurePath.is_absolute() on Posix by
skipping path parsing and normalization.
: Remove  module code guarded by definition of the
 macro which was only needed for Tk 8.4.7 or earlier and was
never actually defined by any build system or documented for manual use.
: Update  to use PEP 669 API
: Fix misleading exception message when mixed  and
 arguments are supplied to pathlib.PurePath and
.
: Add getconfig() and
setconfig() to Connection to
make configuration changes to a database connection. Patch by Erlend E.
Aasland.
: Set default Flag boundary to  and fix bitwise
operations.
: Avoid a potential ResourceWarning in
http.client.HTTPConnection by closing the proxy / tunnelâs
CONNECT response explicitly.
: Fixed an issue with using
writelines() in  to send very
large payloads that exceed the amount of data that can be written in one
call to socket.socket.send() or socket.socket.sendmsg(),
resulting in the remaining buffer being left unwritten.
: Fix a bug in doc string generation in
dataclasses.dataclass().
: Isolate _collections (apply ). Patch by
Erlend E. Aasland.
: Added support for logging.Formatter 
parameter to logging.config.dictConfig() and
logging.config.fileConfig(). Patch by Bar Harel.
: Adapt the  extension module to .
: The performance of isinstance() checks against
runtime-checkable  has been
considerably improved for protocols that only have a few members. To
achieve this improvement, several internal implementation details of the
 module have been refactored, including
typing._ProtocolMeta.__instancecheck__,
typing._is_callable_members_only, and typing._get_protocol_attrs.
Patches by Alex Waygood.
: The members of a runtime-checkable protocol are now considered
âfrozenâ at runtime as soon as the class has been created. See
âWhatâs new in Python 3.12â for more
details.
: Fixed a bug that caused  to raise an exception when
the requested hash algorithm was not available in OpenSSL despite being
available separately as part of  itself.  It now falls back
properly to the built-in. This could happen when, for example, your
OpenSSL does not include SHA3 support and you want to compute
hmac.digest(b'K',  'sha3_256').
: Support sys.last_exc in .
: Improve performance of ast.get_source_segment().
: Fix a bug in  when displaying line numbers of
module-level source code.
: Adapt the  extension module to .
: Adapt the  extension module to .
: Remove deprecation of enum member.member access.
: Fixes unittest.mock.patch() not enforcing function
signatures for methods decorated with @classmethod or
@staticmethod when patch is called with autospec=True.
: Isolate  (apply ). Patch by Erlend E.
Aasland.
: Add pathlib.PurePath.with_segments(), which creates a
path object from arguments. This method is called whenever a derivative
path is created, such as from pathlib.PurePath.parent. Subclasses
may override this method to share information between path objects.
: Fix issue where os.path.join() added a slash when joining
onto an incomplete UNC drive with a trailing slash on Windows.
: Fixes http.server accepting HTTP requests with HTTP
version numbers preceded by â+â, or â-â, or with digit-separating â_â
characters.  The length of the version numbers is also constrained.
: Fix various Windows-specific issues with shutil.which.
: Improve performance of inspect.getattr_static(). Patch by
Alex Waygood.
: sys._current_exceptions() now returns a mapping from
thread-id to an exception instance, rather than to a   
tuple.
: Polish the help messages and docstrings of .
: Add entrypoint keyword-only parameter to
sqlite3.Connection.load_extension(), for overriding the SQLite
extension entry point. Patch by Erlend E. Aasland.
: Improve performance of dataclasses.astuple() and
dataclasses.asdict() in cases where the contents are common Python
types.
: The extraction methods in , and
shutil.unpack_archive(), have a new a  argument that allows
limiting tar features than may be surprising or dangerous, such as
creating files outside the destination directory. See
Extraction filters for details.
: Implemented an eager task factory in asyncio. When used as a
task factory on an event loop, it performs eager execution of coroutines.
Coroutines that are able to complete synchronously (e.g. return or raise
without blocking) are returned immediately as a finished task, and the
task is never scheduled to the event loop. If the coroutine blocks, the
(pending) task is scheduled and returned.
: Add case_sensitive keyword-only argument to
pathlib.Path.glob() and .
: Isolate the  extension module by applying .
Patch by Kumar Aditya, Victor Stinner, and Erlend E. Aasland.
: Deprecate collections.abc.ByteString
: Speed up pathlib.Path construction by omitting the
path anchor from the internal list of path parts.
: Functions in the  module that accept a source code
string as argument now print a more concise traceback when the string
contains a syntax or indentation error.
: The  runner will now exit with status code 5 if
no tests were run. It is common for test runner misconfiguration to fail
to find any tests, this should be an error.
: Fix incorrect normalization of UNC device path roots, and
partial UNC share path roots, in pathlib.PurePath. Pathlib no
longer appends a trailing slash to such paths.
: Add tty.cfmakeraw() and tty.cfmakecbreak() to
 and modernize, the behavior of tty.setraw() and
tty.setcbreak() to use POSIX.1-2017 Chapter 11 âGeneral Terminal
Interfaceâ flag masks by default.
: Implement types.get_original_bases() to provide further
introspection for types.
: argparse.ArgumentParser now catches errors when
writing messages, such as when sys.stderr is . Patch by
Oleg Iarygin.
: Fix datetime.astimezone method return value when invoked on a
naive datetime instance that represents local time falling in a timezone
transition gap. PEP 495 requires that instances with fold=1 produce
earlier times than those with fold=0 in this case.
: Decrease execution time of some  file writes by 15%
by adding more appropriate buffering.
: Remove the bundled setuptools wheel from , and stop
installing setuptools in environments created by .
: Respect the http.client.HTTPConnection .debuglevel
flag in urllib.request.AbstractHTTPHandler when its constructor
parameter debuglevel is not set. And do the same for .
: Remove the long-deprecated  module.
: Deprecate pkgutil.find_loader() and
pkgutil.get_loader() in favor of importlib.util.find_spec().
: Flatten arguments in tkinter.Canvas.coords(). It now
accepts not only      and     ,
but also      and     .
: Remove more deprecated importlib APIs: find_loader(),
find_module(), importlib.abc.Finder, pkgutil.ImpImporter,
pkgutil.ImpLoader.
: Fix potential deadlock in pty.spawn()
: Support divert(4) added in FreeBSD 14.
: Fix potential file descriptor leaks in
subprocess.Popen.
: Support multiple steps in math.nextafter(). Patch by
Shantanu Jain and Matthias Gorgens.
: Make tempfile.mkdtemp() return absolute paths when its
 parameter is relative.
: Convert private _posixsubprocess.fork_exec() to use
Argument Clinic.
: When creating zip files using , , if
not , will always be treated as a path separator even when it is
not . Patch by Carey Metcalfe.
: Deprecation warnings are now emitted for ,
, , ast.NameConstant and
ast.Ellipsis. These have been documented as deprecated since
Python 3.8, and will be removed in Python 3.14.
: Enables webbrowser to detect and launch Microsoft Edge
browser.
: Fixed the bug in pathlib.Path.glob() â previously a
dangling symlink would not be found by this method when the pattern is an
exact match, but would be found when the pattern contains a wildcard or
the recursive wildcard (). With this change, a dangling symlink will
be found in both cases.
: Add QUOTE_STRINGS and QUOTE_NOTNULL
to the suite of  module quoting styles.
: Added
http.client.HTTPConnection.get_proxy_response_headers() that
provides access to the HTTP headers on a proxy server response to the
 request.
: multiprocessing now supports stronger HMAC algorithms
for inter-process connection authentication rather than only HMAC-MD5.
: Make asyncio.subprocess.Process.communicate() close the
subprocessâs stdin even when called with input=None.
: http.client CONNECT method tunnel improvements: Use HTTP 1.1
protocol; send a matching Host: header with CONNECT, if one is not
provided; convert IDN domain names to Punycode. Patch by Michael Handler.

================================================================================

# Changelog - Library (Part 2)

: functools.update_wrapper() now sets the
__type_params__ attribute (added by ).

: When an  pipe protocol loses its connection due to
an error, and the caller doesnât await wait_closed() on the
corresponding StreamWriter, donât log a warning about an exception
that was never retrieved. After all, according to the
StreamWriter.close() docs, the wait_closed() call is optional
(ânot mandatoryâ).

: Fix issue where an issubclass() check comparing a class
 against a runtime-checkable   with non-callable members would not
cause  to be raised if an isinstance() call had
previously been made comparing an instance of  to . This issue
was present in edge cases on Python 3.11, but became more prominent in
3.12 due to some unrelated changes that were made to runtime-checkable
protocols. Patch by Alex Waygood.

: Refactored the _posixsubprocess internals to avoid Python C
API usage between fork and exec when marking  file
descriptors inheritable.

: Added case_sensitive argument to
pathlib.PurePath.match()

: Fix data descriptor detection in
inspect.getattr_static().

================================================================================

# Changelog - Library (Part 3)

: Fix a race condition in the internal
multiprocessing.process cleanup logic that could manifest as an
unintended AttributeError when calling process.close().

: Update datetime deprecationsâ stracktrace to point to the
calling line

: Move the core functionality of the tracemalloc module in
the  folder, leaving just the module wrapper in .

: Remove undocumented and unused _paramspec_tvars attribute
from some classes in .

: Fix issue where pathlib.Path.glob() raised
RecursionError when walking deep directory trees.

: Improve performance of dataclasses.asdict() for the
common case where dict_factory is . Patch by David C Ellis.

: Allow leading whitespace in disambiguated statements in
.

: Teach urllib.parse.unsplit() to retain the  when
assembling itms-services://?action=generate-bugs style Apple Platform
Deployment
URLs.

: socket.getnameinfo() now releases the GIL while
contacting the DNS server

: Users may now use importlib.util.allowing_all_extensions()
(a context manager) to temporarily disable the strict compatibility checks
for importing extension modules in subinterpreters.

: Fix issue where pathlib.Path.glob() raised 
when it encountered a symlink to an overly long path.

================================================================================

# Changelog - Library (Part 4)

: Prevent possible crash by disallowing instantiation of the
_csv.Reader and _csv.Writer types. The regression was
introduced in 3.10.0a4 with PR 23224 (). Patch by Radislav
Chugunov.

: Improve performance of pathlib.Path.glob() when expanding
recursive wildcards (ââ) by merging adjacent wildcards and
de-duplicating results only when necessary.

: Remove unneeded comments and code in turtle.py.

: Fixed issue where pathlib.Path.glob() returned incomplete
results when it encountered a PermissionError. This method now
suppresses all  exceptions, except those raised from calling
 on the top-level path.

: Optimize asyncio.TaskGroup when using
asyncio.eager_task_factory(). Skip scheduling a done callback if a
TaskGroup task completes eagerly.

: Optimize asyncio.gather() when using
asyncio.eager_task_factory() to complete eagerly if all fututres
completed eagerly. Avoid scheduling done callbacks for futures that
complete eagerly.

: Fix issue where pathlib.Path.glob() returns paths using
the case of non-wildcard segments for corresponding path segments, rather
than the real filesystem case.

================================================================================

# Changelog - Library (Part 5)

: Improve performance of pathlib.Path.glob() by using
re.IGNORECASE to implement case-insensitive matching.

: Improve performance of pathlib.Path.glob() when
evaluating patterns that contain  segments.

: Update the return type of  to the newly added Day
attribute

: Update the  of typing.Unpack according to
.

: Make  display the names of the args for
CALL_INTRINSIC_*.

: Do not ignore user-defined __getstate__ and
__setstate__ methods for slotted frozen dataclasses.

: In , fix several bugs that could lead to access to
memory-mapped files after they have been invalidated.

: Improve import time of  module.

: Added turtle.teleport() to the  module to
move a turtle to a new point without tracing a line, visible or invisible.
Patch by Liam Gersten.

: Use io.open_code() for files to be executed instead of
raw

: Fixed garbled output of assertEqual()
when an input lacks final newline.

: Fix potential OverflowError in
sqlite3.Connection.blobopen() for 32-bit builds. Patch by Erlend E.
Aasland.

: Substitute CTRL-D with CTRL-Z in  CLI banner when
running on Windows.

: Module-level attributes  and  are
deprecated from .

: Isolate _multibytecodec and codecs extension modules.
Patches by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 6)

: Add checks to ensure that  bracketed  hosts found by
urllib.parse.urlsplit() are of IPv6 or IPvFuture format.

: Update the bundled copy of pip to version 23.1.2.

: Make  display the value of oparg of
.

: The C.UTF-8 locale is no longer converted to en_US.UTF-8,
enabling the use of UTF-8 encoding on systems which have no locales
installed.

: Fix zipfile.Zipfile creating invalid zip files when
force_zip64 was used to add files to them. Patch by Carey Metcalfe.

: Deprecated datetime.datetime.utcnow() and
datetime.datetime.utcfromtimestamp(). (Patch by Paul Ganssle)

: Avoid compilation error due to tommath.h not being found when
building Tkinter against Tcl 8.7 built with bundled libtommath.

: contextlib.suppress now supports suppressing
exceptions raised as part of an ExceptionGroup. If other exceptions
exist on the group, they are re-raised in a group that does not contain
the suppressed exceptions.

: Use datetime.datetime.fromisocalendar() in the
implementation of datetime.datetime.strptime(), which should now
accept only valid ISO dates. (Patch by Paul Ganssle)

: Prepare tkinter.Menu.index() for Tk 8.7 so that it does
not raise       when it should return
.

================================================================================

# Changelog - Library (Part 7)

: urllib.request.CacheFTPHandler no longer raises
 if a cached FTP instance is reused. ftplibâs endtransfer
method calls voidresp to drain the connection to handle FTP instance reuse
properly.

: Add __orig_bases__ to non-generic TypedDicts, call-based
TypedDicts, and call-based NamedTuples. Other TypedDicts and NamedTuples
already had the attribute.

: Add convenience variable feature to

: Deprecate , , and  parameters of
argparse.BooleanOptionalAction.

: Add  constants for source-specific multicast. Patch
by Reese Hyde.

: socketserver gains ForkingUnixStreamServer and
ForkingUnixDatagramServer classes. Patch by Jay Berry.

: Added Enum for months and days in the calendar module.

: Create a new Lib/_pydatetime.py file that defines the Python
version of the  module, and make  import the
contents of the new library only if the C implementation is missing.
Currently, the full Python implementation is defined and then deleted if
the C implementation is not available, slowing down  
unnecessarily.

: Attributes/methods are no longer shadowed by same-named enum
members, although they may be shadowed by enum.propertyâs.

================================================================================

# Changelog - Library (Part 8)

: Updated importlib.metadata with changes from
importlib_metadata 5.2 through 6.5.0, including: Support
installed-files.txt for Distribution.files when present.
PackageMetadata now stipulates an additional  method allowing
for easy querying of metadata keys that may not be present.
packages_distributions now honors packages and modules with Python
modules that not  sources (e.g. , ). Expand protocol
for PackageMetadata.get_all to match the upstream implementation of
email.message.Message.get_all in python/typeshed#9620. Deprecated use
of Distribution without defining abstract methods. Deprecated
expectation that PackageMetadata.__getitem__ will return  for
missing keys. In the future, it will raise a .

: Fixed a bug where  crashes when reading source file
with different encoding by replacing  with
io.open_code(). The new method would also call into the hook set by
PyFile_SetOpenCodeHook().

: Now creating inspect.Signature objects with
positional-only parameter with a default followed by a
positional-or-keyword parameter without one is impossible.

: Update the bundled copy of pip to version 23.1.1.

================================================================================

# Changelog - Library (Part 9)

: Improve performance of pathlib.Path.absolute() and
 by joining paths only when necessary. Also
improve performance of pathlib.PurePath.is_absolute() on Posix by
skipping path parsing and normalization.

: Remove  module code guarded by definition of the
 macro which was only needed for Tk 8.4.7 or earlier and was
never actually defined by any build system or documented for manual use.

: Update  to use PEP 669 API

: Fix misleading exception message when mixed  and
 arguments are supplied to pathlib.PurePath and
.

: Add getconfig() and
setconfig() to Connection to
make configuration changes to a database connection. Patch by Erlend E.
Aasland.

: Set default Flag boundary to  and fix bitwise
operations.

: Avoid a potential ResourceWarning in
http.client.HTTPConnection by closing the proxy / tunnelâs
CONNECT response explicitly.

: Fixed an issue with using
writelines() in  to send very
large payloads that exceed the amount of data that can be written in one
call to socket.socket.send() or socket.socket.sendmsg(),
resulting in the remaining buffer being left unwritten.

: Fix a bug in doc string generation in
dataclasses.dataclass().

: Isolate _collections (apply ). Patch by
Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 10)

: Added support for logging.Formatter 
parameter to logging.config.dictConfig() and
logging.config.fileConfig(). Patch by Bar Harel.

: Adapt the  extension module to .

: The performance of isinstance() checks against
runtime-checkable  has been
considerably improved for protocols that only have a few members. To
achieve this improvement, several internal implementation details of the
 module have been refactored, including
typing._ProtocolMeta.__instancecheck__,
typing._is_callable_members_only, and typing._get_protocol_attrs.
Patches by Alex Waygood.

: The members of a runtime-checkable protocol are now considered
âfrozenâ at runtime as soon as the class has been created. See
âWhatâs new in Python 3.12â for more
details.

: Fixed a bug that caused  to raise an exception when
the requested hash algorithm was not available in OpenSSL despite being
available separately as part of  itself.  It now falls back
properly to the built-in. This could happen when, for example, your
OpenSSL does not include SHA3 support and you want to compute
hmac.digest(b'K',  'sha3_256').

: Support sys.last_exc in .

: Improve performance of ast.get_source_segment().

================================================================================

# Changelog - Library (Part 11)

: Fix a bug in  when displaying line numbers of
module-level source code.

: Adapt the  extension module to .

: Adapt the  extension module to .

: Remove deprecation of enum member.member access.

: Fixes unittest.mock.patch() not enforcing function
signatures for methods decorated with @classmethod or
@staticmethod when patch is called with autospec=True.

: Isolate  (apply ). Patch by Erlend E.
Aasland.

: Add pathlib.PurePath.with_segments(), which creates a
path object from arguments. This method is called whenever a derivative
path is created, such as from pathlib.PurePath.parent. Subclasses
may override this method to share information between path objects.

: Fix issue where os.path.join() added a slash when joining
onto an incomplete UNC drive with a trailing slash on Windows.

: Fixes http.server accepting HTTP requests with HTTP
version numbers preceded by â+â, or â-â, or with digit-separating â_â
characters.  The length of the version numbers is also constrained.

: Fix various Windows-specific issues with shutil.which.

: Improve performance of inspect.getattr_static(). Patch by
Alex Waygood.

================================================================================

# Changelog - Library (Part 12)

: sys._current_exceptions() now returns a mapping from
thread-id to an exception instance, rather than to a   
tuple.

: Polish the help messages and docstrings of .

: Add entrypoint keyword-only parameter to
sqlite3.Connection.load_extension(), for overriding the SQLite
extension entry point. Patch by Erlend E. Aasland.

: Improve performance of dataclasses.astuple() and
dataclasses.asdict() in cases where the contents are common Python
types.

: The extraction methods in , and
shutil.unpack_archive(), have a new a  argument that allows
limiting tar features than may be surprising or dangerous, such as
creating files outside the destination directory. See
Extraction filters for details.

: Implemented an eager task factory in asyncio. When used as a
task factory on an event loop, it performs eager execution of coroutines.
Coroutines that are able to complete synchronously (e.g. return or raise
without blocking) are returned immediately as a finished task, and the
task is never scheduled to the event loop. If the coroutine blocks, the
(pending) task is scheduled and returned.

: Add case_sensitive keyword-only argument to
pathlib.Path.glob() and .

================================================================================

# Changelog - Library (Part 13)

: Isolate the  extension module by applying .
Patch by Kumar Aditya, Victor Stinner, and Erlend E. Aasland.

: Deprecate collections.abc.ByteString

: Speed up pathlib.Path construction by omitting the
path anchor from the internal list of path parts.

: Functions in the  module that accept a source code
string as argument now print a more concise traceback when the string
contains a syntax or indentation error.

: The  runner will now exit with status code 5 if
no tests were run. It is common for test runner misconfiguration to fail
to find any tests, this should be an error.

: Fix incorrect normalization of UNC device path roots, and
partial UNC share path roots, in pathlib.PurePath. Pathlib no
longer appends a trailing slash to such paths.

: Add tty.cfmakeraw() and tty.cfmakecbreak() to
 and modernize, the behavior of tty.setraw() and
tty.setcbreak() to use POSIX.1-2017 Chapter 11 âGeneral Terminal
Interfaceâ flag masks by default.

: Implement types.get_original_bases() to provide further
introspection for types.

: argparse.ArgumentParser now catches errors when
writing messages, such as when sys.stderr is . Patch by
Oleg Iarygin.

================================================================================

# Changelog - Library (Part 14)

: Fix datetime.astimezone method return value when invoked on a
naive datetime instance that represents local time falling in a timezone
transition gap. PEP 495 requires that instances with fold=1 produce
earlier times than those with fold=0 in this case.

: Decrease execution time of some  file writes by 15%
by adding more appropriate buffering.

: Remove the bundled setuptools wheel from , and stop
installing setuptools in environments created by .

: Respect the http.client.HTTPConnection .debuglevel
flag in urllib.request.AbstractHTTPHandler when its constructor
parameter debuglevel is not set. And do the same for .

: Remove the long-deprecated  module.

: Deprecate pkgutil.find_loader() and
pkgutil.get_loader() in favor of importlib.util.find_spec().

: Flatten arguments in tkinter.Canvas.coords(). It now
accepts not only      and     ,
but also      and     .

: Remove more deprecated importlib APIs: find_loader(),
find_module(), importlib.abc.Finder, pkgutil.ImpImporter,
pkgutil.ImpLoader.

: Fix potential deadlock in pty.spawn()

: Support divert(4) added in FreeBSD 14.

: Fix potential file descriptor leaks in
subprocess.Popen.

================================================================================

# Changelog - Library (Part 15)

: Support multiple steps in math.nextafter(). Patch by
Shantanu Jain and Matthias Gorgens.

: Make tempfile.mkdtemp() return absolute paths when its
 parameter is relative.

: Convert private _posixsubprocess.fork_exec() to use
Argument Clinic.

: When creating zip files using , , if
not , will always be treated as a path separator even when it is
not . Patch by Carey Metcalfe.

: Deprecation warnings are now emitted for ,
, , ast.NameConstant and
ast.Ellipsis. These have been documented as deprecated since
Python 3.8, and will be removed in Python 3.14.

: Enables webbrowser to detect and launch Microsoft Edge
browser.

: Fixed the bug in pathlib.Path.glob() â previously a
dangling symlink would not be found by this method when the pattern is an
exact match, but would be found when the pattern contains a wildcard or
the recursive wildcard (). With this change, a dangling symlink will
be found in both cases.

: Add QUOTE_STRINGS and QUOTE_NOTNULL
to the suite of  module quoting styles.

: Added
http.client.HTTPConnection.get_proxy_response_headers() that
provides access to the HTTP headers on a proxy server response to the
 request.

================================================================================

# Changelog - Library (Part 16)

: multiprocessing now supports stronger HMAC algorithms
for inter-process connection authentication rather than only HMAC-MD5.

: Make asyncio.subprocess.Process.communicate() close the
subprocessâs stdin even when called with input=None.

: http.client CONNECT method tunnel improvements: Use HTTP 1.1
protocol; send a matching Host: header with CONNECT, if one is not
provided; convert IDN domain names to Punycode. Patch by Michael Handler.

================================================================================

# Changelog - Documentation

List:
: Document that the effect of registering or unregistering an
 cleanup function from within a registered cleanup function
is undefined.
: Mention the new way of typing  with  and
 introduced in .
: Clarifying documentation about the url parameter to
urllib.request.urlopen and urllib.request.Request needing to be encoded
properly.
: Add support for Unicode Path Extra Field in ZipFile. Patch by
Yeojin Kim and Andrea Giudiceandrea
: Fix extension type from documentation for compiling in C++20
mode

: Document that the effect of registering or unregistering an
 cleanup function from within a registered cleanup function
is undefined.

: Mention the new way of typing  with  and
 introduced in .

: Clarifying documentation about the url parameter to
urllib.request.urlopen and urllib.request.Request needing to be encoded
properly.

: Add support for Unicode Path Extra Field in ZipFile. Patch by
Yeojin Kim and Andrea Giudiceandrea

: Fix extension type from documentation for compiling in C++20
mode

================================================================================

# Changelog - Tests (Part 1)

List:
: Update test_pack_configure_in and
test_place_configure_in for changes to error message formatting in Tk
8.7.
: Run test_configure_screen on X11 only, since the 
environment variable and  option for toplevels are not useful
on Tk for Win32 or Aqua.
: Added property-based tests to the  tests, along
with stubs for the hypothesis interface. (Patch by Paul Ganssle)
: Regression tests for the behaviour of
unittest.mock.PropertyMock were added.
: fix use of poll in test_epollâs test_control_and_wait
: Fix the  tests failing on Windows
when the working directory or interpreter path contains spaces.

: Update test_pack_configure_in and
test_place_configure_in for changes to error message formatting in Tk
8.7.

: Run test_configure_screen on X11 only, since the 
environment variable and  option for toplevels are not useful
on Tk for Win32 or Aqua.

: Added property-based tests to the  tests, along
with stubs for the hypothesis interface. (Patch by Paul Ganssle)

: Regression tests for the behaviour of
unittest.mock.PropertyMock were added.

: fix use of poll in test_epollâs test_control_and_wait

================================================================================

# Changelog - Tests (Part 2)

: Fix the  tests failing on Windows
when the working directory or interpreter path contains spaces.

================================================================================

# Changelog - Build (Part 1)

List:
: BOLT optimization is now applied to the libpython shared
library if building a shared library. BOLT instrumentation and application
settings can now be influenced via the BOLT_INSTRUMENT_FLAGS and
BOLT_APPLY_FLAGS configure variables.
: PYTHON_FOR_REGEN now require Python 3.10 or newer.
: Define  / virtual make targets consistently and
properly.
: Add gcc fallback of mkfifoat/mknodat for macOS. Patch by
Donghee Na.
: The TKINTER_PROTECT_LOADTK macro is no longer defined or
used in the  module.  It was previously only defined when
building against Tk 8.4.13 and older, but Tk older than 8.5.12 has been
unsupported since .
: Extended workaround defining static_assert when missing from
the libc headers to all clang and gcc builds. In particular, this fixes
building on macOS <= 10.10.
: Changed the default value of the  Makefile variable
from  to   to ensure that complex recipes
correctly fail after an error. Previously,   could fail to
install some files and yet return a successful result.
: Add platform triplets for 64-bit LoongArch:

loongarch64-linux-gnusf
loongarch64-linux-gnuf32
loongarch64-linux-gnu

Patch by Zhang Na.

================================================================================

# Changelog - Build (Part 2)

: BOLT optimization is now applied to the libpython shared
library if building a shared library. BOLT instrumentation and application
settings can now be influenced via the BOLT_INSTRUMENT_FLAGS and
BOLT_APPLY_FLAGS configure variables.

: PYTHON_FOR_REGEN now require Python 3.10 or newer.

: Define  / virtual make targets consistently and
properly.

: Add gcc fallback of mkfifoat/mknodat for macOS. Patch by
Donghee Na.

: The TKINTER_PROTECT_LOADTK macro is no longer defined or
used in the  module.  It was previously only defined when
building against Tk 8.4.13 and older, but Tk older than 8.5.12 has been
unsupported since .

: Extended workaround defining static_assert when missing from
the libc headers to all clang and gcc builds. In particular, this fixes
building on macOS <= 10.10.

: Changed the default value of the  Makefile variable
from  to   to ensure that complex recipes
correctly fail after an error. Previously,   could fail to
install some files and yet return a successful result.

: Add platform triplets for 64-bit LoongArch:

List:
loongarch64-linux-gnusf
loongarch64-linux-gnuf32
loongarch64-linux-gnu

loongarch64-linux-gnusf

loongarch64-linux-gnuf32

loongarch64-linux-gnu

================================================================================

# Changelog - Windows

List:
: Update Windows installer to use SQLite 3.42.0.
: Fix a potential   Permission  when using
shutil.copystat() within Windows Subsystem for Linux (WSL) on a
mounted filesystem by adding errno.EACCES to the list of ignored
errors within the internal implementation.
: Fix virtual environment  script having
incorrect line endings for Cygwin.
: Fixes venvs not working in bash on Windows across different
disks
: Update Windows installer to use SQLite 3.41.2.
: Fixed a bug where  was raised when calling
ntpath.realpath() with a bytes parameter in some cases.

: Update Windows installer to use SQLite 3.42.0.

: Fix a potential   Permission  when using
shutil.copystat() within Windows Subsystem for Linux (WSL) on a
mounted filesystem by adding errno.EACCES to the list of ignored
errors within the internal implementation.

: Fix virtual environment  script having
incorrect line endings for Cygwin.

: Fixes venvs not working in bash on Windows across different
disks

: Update Windows installer to use SQLite 3.41.2.

: Fixed a bug where  was raised when calling
ntpath.realpath() with a bytes parameter in some cases.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to Tcl/Tk 8.6.13.
: Update macOS installer to SQLite 3.42.0.
: Add os.PRIO_DARWIN_THREAD, os.PRIO_DARWIN_PROCESS,
os.PRIO_DARWIN_BG and os.PRIO_DARWIN_NONUI. These can be used with
os.setpriority to run the process at a lower priority and make use of
the efficiency cores on Apple Silicon systems.
: Support reading SOCKS proxy configuration from macOS System
Configuration. Patch by Sam Schott.
: update curses textbox to additionally handle backspace using the
curses.ascii.DEL key press.
: Update macOS installer to SQLite 3.41.2.

: Update macOS installer to Tcl/Tk 8.6.13.

: Update macOS installer to SQLite 3.42.0.

: Add os.PRIO_DARWIN_THREAD, os.PRIO_DARWIN_PROCESS,
os.PRIO_DARWIN_BG and os.PRIO_DARWIN_NONUI. These can be used with
os.setpriority to run the process at a lower priority and make use of
the efficiency cores on Apple Silicon systems.

: Support reading SOCKS proxy configuration from macOS System
Configuration. Patch by Sam Schott.

: update curses textbox to additionally handle backspace using the
curses.ascii.DEL key press.

: Update macOS installer to SQLite 3.41.2.

================================================================================

# Changelog - IDLE

List:
: Fix completions for Tk Aqua 8.7 (currently blank).
: About prints both tcl and tk versions if different (expected
someday).
: Fix IDLE test hang on macOS.

: Fix completions for Tk Aqua 8.7 (currently blank).

: About prints both tcl and tk versions if different (expected
someday).

: Fix IDLE test hang on macOS.

================================================================================

# Changelog - Tools/Demos

List:
: Argument Clinic C converters now accept the  keyword,
for wrapping a parameter with . Patch by Erlend E.
Aasland.

: Argument Clinic C converters now accept the  keyword,
for wrapping a parameter with . Patch by Erlend E.
Aasland.

================================================================================

# Changelog - C API (Part 1)

List:
: Added unstable C API for extracting the value of âcompactâ
integers: PyUnstable_Long_IsCompact() and
PyUnstable_Long_CompactValue().
: Weâve added Py_NewInterpreterFromConfig() and
PyInterpreterConfig to the public C-API (but not the stable ABI; not
yet at least).  The new function may be used to create a new interpreter
with various features configured.  The function was added to support PEP
684 (per-interpreter GIL).
: PyType_FromSpec() and its variants now allow creating
classes whose metaclass overrides . The
 is ignored. This behavior is deprecated and will be disallowed
in 3.14+. The new PyType_FromMetaclass() already disallows it.
: Add PyUnstable_Object_GC_NewWithExtraData() function
that can be used to allocate additional memory after an object for data
not managed by Python.
: Introduced PyUnstable_WritePerfMapEntry(),
PyUnstable_PerfMapState_Init() and
PyUnstable_PerfMapState_Fini(). These allow extension modules (JIT
compilers in particular) to write to perf-map files in a thread safe
manner. The Python support for the Linux perf profiler also uses these APIs to write
entries in the perf-map file.
: Added C API for extending types whose instance memory layout is
opaque: PyType_Spec.basicsize can now be zero or negative,
PyObject_GetTypeData() can be used to get subclass-specific data,
and Py_TPFLAGS_ITEMS_AT_END can be used to safely extend
variable-size objects. See  for details.
: Add a new C-API function to eagerly assign a version tag to a
PyTypeObject: PyUnstable_Type_AssignVersionTag().
: PyObject_GC_Resize should calculate preheader size
if needed. Patch by Donghee Na.
: Add support of more formatting options (left aligning, octals,
uppercase hexadecimals, , ,
 C strings, variable width and precision) in
PyUnicode_FromFormat() and PyUnicode_FromFormatV().
: Add unstable C-API functions to get the code object, lasti and
line number from the internal _PyInterpreterFrame in the limited API.
The functions are:

================================================================================

# Changelog - C API (Part 2)

PyCodeObject  PyUnstable_InterpreterFrame_GetCode(struct _PyInterpreterFrame 
 PyUnstable_InterpreterFrame_GetLasti(struct _PyInterpreterFrame 
 PyUnstable_InterpreterFrame_GetLine(struct _PyInterpreterFrame

: Added unstable C API for extracting the value of âcompactâ
integers: PyUnstable_Long_IsCompact() and
PyUnstable_Long_CompactValue().

: Weâve added Py_NewInterpreterFromConfig() and
PyInterpreterConfig to the public C-API (but not the stable ABI; not
yet at least).  The new function may be used to create a new interpreter
with various features configured.  The function was added to support PEP
684 (per-interpreter GIL).

: PyType_FromSpec() and its variants now allow creating
classes whose metaclass overrides . The
 is ignored. This behavior is deprecated and will be disallowed
in 3.14+. The new PyType_FromMetaclass() already disallows it.

: Add PyUnstable_Object_GC_NewWithExtraData() function
that can be used to allocate additional memory after an object for data
not managed by Python.

================================================================================

# Changelog - C API (Part 3)

: Introduced PyUnstable_WritePerfMapEntry(),
PyUnstable_PerfMapState_Init() and
PyUnstable_PerfMapState_Fini(). These allow extension modules (JIT
compilers in particular) to write to perf-map files in a thread safe
manner. The Python support for the Linux perf profiler also uses these APIs to write
entries in the perf-map file.

: Added C API for extending types whose instance memory layout is
opaque: PyType_Spec.basicsize can now be zero or negative,
PyObject_GetTypeData() can be used to get subclass-specific data,
and Py_TPFLAGS_ITEMS_AT_END can be used to safely extend
variable-size objects. See  for details.

: Add a new C-API function to eagerly assign a version tag to a
PyTypeObject: PyUnstable_Type_AssignVersionTag().

: PyObject_GC_Resize should calculate preheader size
if needed. Patch by Donghee Na.

: Add support of more formatting options (left aligning, octals,
uppercase hexadecimals, , ,
 C strings, variable width and precision) in
PyUnicode_FromFormat() and PyUnicode_FromFormatV().

: Add unstable C-API functions to get the code object, lasti and
line number from the internal _PyInterpreterFrame in the limited API.
The functions are:

================================================================================

# Changelog - C API (Part 4)

List:
PyCodeObject  PyUnstable_InterpreterFrame_GetCode(struct _PyInterpreterFrame 
 PyUnstable_InterpreterFrame_GetLasti(struct _PyInterpreterFrame 
 PyUnstable_InterpreterFrame_GetLine(struct _PyInterpreterFrame

PyCodeObject  PyUnstable_InterpreterFrame_GetCode(struct _PyInterpreterFrame

PyUnstable_InterpreterFrame_GetLasti(struct _PyInterpreterFrame

PyUnstable_InterpreterFrame_GetLine(struct _PyInterpreterFrame

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Deprecated _PyErr_ChainExceptions in favour of
_PyErr_ChainExceptions1.
: Reduce the number of inline  entries for
BINARY_SUBSCR.
: Removed JUMP_IF_FALSE_OR_POP and
JUMP_IF_TRUE_OR_POP instructions.
: Fixed  value on tracing entries to avoid corruption
on garbage collection.
: Add sys.last_exc and deprecate sys.last_type,
sys.last_value and sys.last_traceback, which hold the same
information in its legacy form.
: Replace all occurrences of COMPARE_AND_BRANCH with
COMPARE_OP.
: Fix overflow when creating very large dict.
: Add PyErr_DisplayException() which takes just an
exception instance, to replace the legacy PyErr_Display() which
takes the    triplet.
: Add note to exception raised in PyErr_SetObject when
normalization fails.
: Shrink the number of inline  entries used by
LOAD_GLOBAL.
: Improve import time of  by removing IronPython
version parsing. The IronPython version parsing was not functional (see
https://github.com/IronLanguages/ironpython3/issues/1667).
: Rearrage bits in first field (after header) of PyLongObject. *
Bits 0 and 1: 1 - sign. I.e. 0 for positive numbers, 1 for zero and 2 for
negative numbers. * Bit 2 reserved (probably for the immortal bit) * Bits
3+ the unsigned size.
This makes a few operations slightly more efficient, and will enable a
more compact and faster 2s-complement representation of most ints in
future.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix segfault from race condition in signal handling during
garbage collection. Patch by Kumar Aditya.
:  encoding/decoding errors now get the context
information (which operation and which codecs) attached as 
notes instead of through chaining a new instance of the exception.
: Fix potential nullptr dereference and use of uninitialized
memory in fileutils. Patch by Max Bachmann.
: Reuse operands with refcount of 1 in float specializations of
BINARY_OP.
: Fix performance loss when accessing an objectâs attributes with
__getattr__  defined.
: Improve build support for the Xbox. Patch by Max Bachmann.
: Fix SSE2 and SSE3 detection in  internal module.
Patch by Max Bachmann.
: Deprecate  in code objects, schedule it for
removal in Python 3.14
bpo-1635741: Adapt  to . Patch by Mohamed Koubaa
and Erlend Aasland.

: Deprecated _PyErr_ChainExceptions in favour of
_PyErr_ChainExceptions1.

: Reduce the number of inline  entries for
BINARY_SUBSCR.

: Removed JUMP_IF_FALSE_OR_POP and
JUMP_IF_TRUE_OR_POP instructions.

: Fixed  value on tracing entries to avoid corruption
on garbage collection.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Add sys.last_exc and deprecate sys.last_type,
sys.last_value and sys.last_traceback, which hold the same
information in its legacy form.

: Replace all occurrences of COMPARE_AND_BRANCH with
COMPARE_OP.

: Fix overflow when creating very large dict.

: Add PyErr_DisplayException() which takes just an
exception instance, to replace the legacy PyErr_Display() which
takes the    triplet.

: Add note to exception raised in PyErr_SetObject when
normalization fails.

: Shrink the number of inline  entries used by
LOAD_GLOBAL.

: Improve import time of  by removing IronPython
version parsing. The IronPython version parsing was not functional (see
https://github.com/IronLanguages/ironpython3/issues/1667).

: Rearrage bits in first field (after header) of PyLongObject. *
Bits 0 and 1: 1 - sign. I.e. 0 for positive numbers, 1 for zero and 2 for
negative numbers. * Bit 2 reserved (probably for the immortal bit) * Bits
3+ the unsigned size.

This makes a few operations slightly more efficient, and will enable a
more compact and faster 2s-complement representation of most ints in
future.

: Fix segfault from race condition in signal handling during
garbage collection. Patch by Kumar Aditya.

================================================================================

# Changelog - Core and Builtins (Part 4)

:  encoding/decoding errors now get the context
information (which operation and which codecs) attached as 
notes instead of through chaining a new instance of the exception.

: Fix potential nullptr dereference and use of uninitialized
memory in fileutils. Patch by Max Bachmann.

: Reuse operands with refcount of 1 in float specializations of
BINARY_OP.

: Fix performance loss when accessing an objectâs attributes with
__getattr__  defined.

: Improve build support for the Xbox. Patch by Max Bachmann.

: Fix SSE2 and SSE3 detection in  internal module.
Patch by Max Bachmann.

: Deprecate  in code objects, schedule it for
removal in Python 3.14

bpo-1635741: Adapt  to . Patch by Mohamed Koubaa
and Erlend Aasland.

================================================================================

# Changelog - Library (Part 1)

List:
: Pure python locale.getencoding() will not warn
deprecation.
: Itâs no longer possible to register conditional breakpoints in
 that raise SyntaxError. Patch by Tian Gao.
: Donât ignore exceptions in member type creation.
: Ensure final _generate_next_value_ is a staticmethod.
: Display current line label correctly in  when
show_caches is False and  points to a CACHE entry.
: isinstance() checks against runtime-checkable
 now use
inspect.getattr_static() rather than  to lookup
whether attributes exist. This means that descriptors and
__getattr__() methods are no longer unexpectedly evaluated
during isinstance() checks against runtime-checkable protocols.
However, it may also mean that some objects which used to be considered
instances of a runtime-checkable protocol may no longer be considered
instances of that protocol on Python 3.12+, and vice versa. Most users are
unlikely to be affected by this change. Patch by Alex Waygood.
: Itâs no longer possible to register expressions to display in
 that raise SyntaxError. Patch by Tian Gao.
: Improve traceback when dataclasses.fields() is called on
a non-dataclass. Patch by Alex Waygood
: The asyncio.Timeout context manager now works reliably
even when performing cleanup due to task cancellation.  Previously it
could raise a CancelledError instead of an
TimeoutError in such cases.
: Remove support for obsolete browsers from webbrowser.
Removed browsers include Grail, Mosaic, Netscape, Galeon, Skipstone,
Iceape, Firebird, and Firefox versions 35 and below.
: Improve performance of math.log() arguments handling by
removing the argument clinic.
: Add the  arg to shutil.rmtree(), which is like
 but expects an exception instance rather than an exc_info
tuple. Deprecate .
: typing: Fix a bug relating to substitution in custom classes
generic over a . Previously, if the
 was substituted with a parameters list that itself contained
a , the  in the parameters list could
not be subsequently substituted. This is now fixed.
Patch by Nikita Sobolev.

================================================================================

# Changelog - Library (Part 2)

: Fix issue where  and __init__() methods of
pathlib.PurePath and  subclasses were not
called in some circumstances.
: asyncio.wait() now accepts generators yielding tasks.
Patch by Kumar Aditya.
: asyncio.iscoroutine() now returns  for
generators as  does not support legacy generator-based
coroutines. Patch by Kumar Aditya.
: Optimized fmean(), correlation(), covariance(), and
linear_regression() using the new math.sumprod() function.
: Typing: Improve the  of generic aliases for classes
generic over a . (Use square brackets to
represent a parameter list.)
: asyncio.Task.get_coro() now always returns a coroutine
when wrapping an awaitable object. Patch by Kumar Aditya.
: Speed up setting or deleting mutable attributes on
non-dataclass subclasses of frozen dataclasses. Due to the implementation
of __setattr__ and __delattr__ for frozen dataclasses, this
previously had a time complexity of (). It now has a time
complexity of (1).
: Add os.listdrives(), os.listvolumes() and
os.listmounts() functions on Windows for enumerating drives, volumes
and mount points
: Attribute name of the extracted  file object now
holds filename of itself rather than of the archive it is contained in.
Patch by Oleg Iarygin.
: Private helper method
inspect._signature_strip_non_python_syntax will no longer strip 
from the input string.
: Add inspect.getasyncgenstate() and
inspect.getasyncgenlocals(). Patch by Thomas Krennwallner.
: Add  argument to dataclasses.make_dataclass()
and make classes produced by it pickleable.
: Fix __weakref__ descriptor generation for custom
dataclasses.
: Skip a  in  if we have already found a
pyvenv.cfg
: Fix issues when defining dataclasses that have fields with
specific underscore names that arenât clearly reserved by
dataclasses.
: Fix a  bug where  clears the changes to local
variables.
: Added -h and âhelp arguments to the webbrowser CLI
: ssl.SSLContext.load_verify_locations() no longer
incorrectly accepts some cases of trailing data when parsing DER.
: Fix pathlib.Path.walk RecursionError on deep directory trees by
rewriting it using iteration instead of recursion.
: Added an optional  keyword argument to
tempfile.TemporaryDirectory.
: Added --durations command line option, showing the N slowest
test cases. unittest.TextTestRunner and
unittest.TextTestResult constructors accept a new 
keyword argument. Subclasses should take this into account or accept
. Added unittest.TestResult.addDuration() method and
unittest.TestResult.collectedDurations attribute.
(Contributed by Giampaolo Rodola)

================================================================================

# Changelog - Library (Part 3)

: Fix dataclasses.astuple() crash when
collections.defaultdict is present in the attributes.
: Fix incorrect results from ssl.SSLSocket.shared_ciphers()
: When built against OpenSSL 3.0, the  module had a bug
where it reported unauthenticated EOFs (i.e. without close_notify) as a
clean TLS-level EOF. It now raises SSLEOFError, matching the
behavior in previous versions of OpenSSL. The
 attribute on SSLContext also
no longer includes OP_IGNORE_UNEXPECTED_EOF by default. This
option may be set to specify the previous OpenSSL 3.0 behavior.
: Now uuid.uuid3() and uuid.uuid5() functions support
 objects as their  argument.
: Fix a concurrent.futures.process bug where
ProcessPoolExecutor shutdown could hang after a future has been
quickly submitted and canceled.
: Added deprecation warning to  parameter of
email.utils.localtime().
: Fix handling of Windows filenames that resemble drives, such as
, in .

: Pure python locale.getencoding() will not warn
deprecation.

: Itâs no longer possible to register conditional breakpoints in
 that raise SyntaxError. Patch by Tian Gao.

: Donât ignore exceptions in member type creation.

: Ensure final _generate_next_value_ is a staticmethod.

================================================================================

# Changelog - Library (Part 4)

: Display current line label correctly in  when
show_caches is False and  points to a CACHE entry.

: isinstance() checks against runtime-checkable
 now use
inspect.getattr_static() rather than  to lookup
whether attributes exist. This means that descriptors and
__getattr__() methods are no longer unexpectedly evaluated
during isinstance() checks against runtime-checkable protocols.
However, it may also mean that some objects which used to be considered
instances of a runtime-checkable protocol may no longer be considered
instances of that protocol on Python 3.12+, and vice versa. Most users are
unlikely to be affected by this change. Patch by Alex Waygood.

: Itâs no longer possible to register expressions to display in
 that raise SyntaxError. Patch by Tian Gao.

: Improve traceback when dataclasses.fields() is called on
a non-dataclass. Patch by Alex Waygood

: The asyncio.Timeout context manager now works reliably
even when performing cleanup due to task cancellation.  Previously it
could raise a CancelledError instead of an
TimeoutError in such cases.

================================================================================

# Changelog - Library (Part 5)

: Remove support for obsolete browsers from webbrowser.
Removed browsers include Grail, Mosaic, Netscape, Galeon, Skipstone,
Iceape, Firebird, and Firefox versions 35 and below.

: Improve performance of math.log() arguments handling by
removing the argument clinic.

: Add the  arg to shutil.rmtree(), which is like
 but expects an exception instance rather than an exc_info
tuple. Deprecate .

: typing: Fix a bug relating to substitution in custom classes
generic over a . Previously, if the
 was substituted with a parameters list that itself contained
a , the  in the parameters list could
not be subsequently substituted. This is now fixed.

Patch by Nikita Sobolev.

: Fix issue where  and __init__() methods of
pathlib.PurePath and  subclasses were not
called in some circumstances.

: asyncio.wait() now accepts generators yielding tasks.
Patch by Kumar Aditya.

: asyncio.iscoroutine() now returns  for
generators as  does not support legacy generator-based
coroutines. Patch by Kumar Aditya.

: Optimized fmean(), correlation(), covariance(), and
linear_regression() using the new math.sumprod() function.

================================================================================

# Changelog - Library (Part 6)

: Typing: Improve the  of generic aliases for classes
generic over a . (Use square brackets to
represent a parameter list.)

: asyncio.Task.get_coro() now always returns a coroutine
when wrapping an awaitable object. Patch by Kumar Aditya.

: Speed up setting or deleting mutable attributes on
non-dataclass subclasses of frozen dataclasses. Due to the implementation
of __setattr__ and __delattr__ for frozen dataclasses, this
previously had a time complexity of (). It now has a time
complexity of (1).

: Add os.listdrives(), os.listvolumes() and
os.listmounts() functions on Windows for enumerating drives, volumes
and mount points

: Attribute name of the extracted  file object now
holds filename of itself rather than of the archive it is contained in.
Patch by Oleg Iarygin.

: Private helper method
inspect._signature_strip_non_python_syntax will no longer strip 
from the input string.

: Add inspect.getasyncgenstate() and
inspect.getasyncgenlocals(). Patch by Thomas Krennwallner.

: Add  argument to dataclasses.make_dataclass()
and make classes produced by it pickleable.

: Fix __weakref__ descriptor generation for custom
dataclasses.

: Skip a  in  if we have already found a
pyvenv.cfg

================================================================================

# Changelog - Library (Part 7)

: Fix issues when defining dataclasses that have fields with
specific underscore names that arenât clearly reserved by
dataclasses.

: Fix a  bug where  clears the changes to local
variables.

: Added -h and âhelp arguments to the webbrowser CLI

: ssl.SSLContext.load_verify_locations() no longer
incorrectly accepts some cases of trailing data when parsing DER.

: Fix pathlib.Path.walk RecursionError on deep directory trees by
rewriting it using iteration instead of recursion.

: Added an optional  keyword argument to
tempfile.TemporaryDirectory.

: Added --durations command line option, showing the N slowest
test cases. unittest.TextTestRunner and
unittest.TextTestResult constructors accept a new 
keyword argument. Subclasses should take this into account or accept
. Added unittest.TestResult.addDuration() method and
unittest.TestResult.collectedDurations attribute.

(Contributed by Giampaolo Rodola)

: Fix dataclasses.astuple() crash when
collections.defaultdict is present in the attributes.

: Fix incorrect results from ssl.SSLSocket.shared_ciphers()

================================================================================

# Changelog - Library (Part 8)

: When built against OpenSSL 3.0, the  module had a bug
where it reported unauthenticated EOFs (i.e. without close_notify) as a
clean TLS-level EOF. It now raises SSLEOFError, matching the
behavior in previous versions of OpenSSL. The
 attribute on SSLContext also
no longer includes OP_IGNORE_UNEXPECTED_EOF by default. This
option may be set to specify the previous OpenSSL 3.0 behavior.

: Now uuid.uuid3() and uuid.uuid5() functions support
 objects as their  argument.

: Fix a concurrent.futures.process bug where
ProcessPoolExecutor shutdown could hang after a future has been
quickly submitted and canceled.

: Added deprecation warning to  parameter of
email.utils.localtime().

: Fix handling of Windows filenames that resemble drives, such as
, in .

================================================================================

# Changelog - Documentation

List:
: Add docstring to http.client.HTTPResponse.read() to fix
 output.

: Add docstring to http.client.HTTPResponse.read() to fix
 output.

================================================================================

# Changelog - Tests

List:
: Improve test coverage on .
: Adjust the error handling strategy in
test_zoneinfo.TzPathTest.python_tzpath_context. Patch by Paul Ganssle.
: Improved test_locale_calendar_formatweekday of calendar.

: Improve test coverage on .

: Adjust the error handling strategy in
test_zoneinfo.TzPathTest.python_tzpath_context. Patch by Paul Ganssle.

: Improved test_locale_calendar_formatweekday of calendar.

================================================================================

# Changelog - Build

List:
: Add a dev container (along with accompanying Dockerfile) for
development purposes.
: Fix -Wstrict-prototypes compiler warnings.

: Add a dev container (along with accompanying Dockerfile) for
development purposes.

: Fix -Wstrict-prototypes compiler warnings.

================================================================================

# Changelog - Windows

List:
: Update webbrowser to fall back to Microsoft Edge instead
of Internet Explorer.
: Improves correctness of stat results for Windows, and uses
faster API when available

: Update webbrowser to fall back to Microsoft Edge instead
of Internet Explorer.

: Improves correctness of stat results for Windows, and uses
faster API when available

================================================================================

# Changelog - Tools/Demos

List:
: Misc/gdbinit was removed.

: Misc/gdbinit was removed.

================================================================================

# Changelog - C API

List:
: Add a new (unstable) C-API function for iterating over GCâable
objects using a callback: PyUnstable_VisitObjects.

: Add a new (unstable) C-API function for iterating over GCâable
objects using a callback: PyUnstable_VisitObjects.

================================================================================

# Changelog - Security (Part 1)

List:
: Replace builtin hashlib implementations of MD5 and SHA1 with
verified ones from the HACL* project.
: Updated the OpenSSL version used in Windows and macOS binary
release builds to 1.1.1t to address CVE 2023-0286, CVE 2022-4303,
and CVE 2022-4303 per the OpenSSL 2023-02-07 security advisory.
: Replace the builtin  implementations of SHA2-384
and SHA2-512 originally from LibTomCrypt with formally verified,
side-channel resistant code from the  project. The builtins remain a
fallback only used when OpenSSL does not provide them.
: subprocess.Popen now uses a safer approach to find
 when launching with shell=True. Patch by Eryk Sun, based
on a patch by Oleg Iarygin.

: Replace builtin hashlib implementations of MD5 and SHA1 with
verified ones from the HACL* project.

: Updated the OpenSSL version used in Windows and macOS binary
release builds to 1.1.1t to address CVE 2023-0286, CVE 2022-4303,
and CVE 2022-4303 per the OpenSSL 2023-02-07 security advisory.

================================================================================

# Changelog - Security (Part 2)

: Replace the builtin  implementations of SHA2-384
and SHA2-512 originally from LibTomCrypt with formally verified,
side-channel resistant code from the  project. The builtins remain a
fallback only used when OpenSSL does not provide them.

: subprocess.Popen now uses a safer approach to find
 when launching with shell=True. Patch by Eryk Sun, based
on a patch by Oleg Iarygin.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix regression in semantics of normalisation in
PyErr_SetObject.
: Do not memoize incorrectly automatically generated loop rules
in the parser. Patch by Pablo Galindo.
: Fix a bug that caused a crash when deallocating deeply nested
filter objects. Patch by Marta GÃ³mez MacÃ­as.
: Cleanup Windows 7 specific special handling. Patch by Max
Bachmann.
: Fixed a segfault occurring when the interpreter calls a
 method that raises.
: Fix deadlock at shutdown when clearing thread states if any
finalizer tries to acquire the runtime head lock. Patch by Kumar Aditya.
: Use GetCurrentProcessId on Windows when  is
unavailable. Patch by Max Bachmann.
: Fix error handling bugs in interpreterâs exception printing
code, which could cause a crash on infinite recursion.
: Restrict the scope of the FOR_ITER_RANGE instruction
to the scope of the original  instruction, to allow
instrumentation.
: Fix possible segfault in positional_only_passed_as_keyword
function, when new list created.
: Fix possible segfault in  opcode, when new set
created.
: socket.getaddrinfo no longer raises
OverflowError for   values outside of the C
long range. Out of range values are left up to the underlying string based
C library API to report. A socket.gaierror SAI_SERVICE may
occur instead, or no error at all as not all platform C libraries generate
an error.
: Add CALL_INTRINSIC_2 and use it instead of
PREP_RERAISE_STAR.
: Fix xattr support detection on Linux systems by widening the
check to linux, not just glibc. This fixes support for musl.
: Make the slice object hashable. Patch by Will Bradshaw and
Furkan Onder.
: Change the  instruction to leave the receiver on the
stack. This allows the specialized form of  to skip the chain of C
calls and jump directly to the  in the generator or coroutine.
: Fix SystemError / segmentation fault in iter __reduce__
when internal access of builtins.__dict__ keys mutates the iter
object.
: Update tracemalloc to handle presize of object properly.
Patch by Donghee Na.
: Invalidate type version tag in _PyStaticType_Dealloc for
static types, avoiding bug where a false cache hit could crash the
interpreter. Patch by Kumar Aditya.
: Adds a new RETURN_CONST instruction.
: Remove gi_code field from generator (and coroutine and async
generator) objects as it is redundant. The frame already includes a
reference to the code object.
: When an interpreter is configured to check (and only then),
importing an extension module will now fail when the extension does not
support multiple interpreters (i.e. doesnât implement PEP 489 multi-phase
init). This does not apply to the main interpreter, nor to subinterpreters
created with Py_NewInterpreter().

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix regression in semantics of normalisation in
PyErr_SetObject.

: Do not memoize incorrectly automatically generated loop rules
in the parser. Patch by Pablo Galindo.

: Fix a bug that caused a crash when deallocating deeply nested
filter objects. Patch by Marta GÃ³mez MacÃ­as.

: Cleanup Windows 7 specific special handling. Patch by Max
Bachmann.

: Fixed a segfault occurring when the interpreter calls a
 method that raises.

: Fix deadlock at shutdown when clearing thread states if any
finalizer tries to acquire the runtime head lock. Patch by Kumar Aditya.

: Use GetCurrentProcessId on Windows when  is
unavailable. Patch by Max Bachmann.

: Fix error handling bugs in interpreterâs exception printing
code, which could cause a crash on infinite recursion.

: Restrict the scope of the FOR_ITER_RANGE instruction
to the scope of the original  instruction, to allow
instrumentation.

: Fix possible segfault in positional_only_passed_as_keyword
function, when new list created.

: Fix possible segfault in  opcode, when new set
created.

================================================================================

# Changelog - Core and Builtins (Part 3)

: socket.getaddrinfo no longer raises
OverflowError for   values outside of the C
long range. Out of range values are left up to the underlying string based
C library API to report. A socket.gaierror SAI_SERVICE may
occur instead, or no error at all as not all platform C libraries generate
an error.

: Add CALL_INTRINSIC_2 and use it instead of
PREP_RERAISE_STAR.

: Fix xattr support detection on Linux systems by widening the
check to linux, not just glibc. This fixes support for musl.

: Make the slice object hashable. Patch by Will Bradshaw and
Furkan Onder.

: Change the  instruction to leave the receiver on the
stack. This allows the specialized form of  to skip the chain of C
calls and jump directly to the  in the generator or coroutine.

: Fix SystemError / segmentation fault in iter __reduce__
when internal access of builtins.__dict__ keys mutates the iter
object.

: Update tracemalloc to handle presize of object properly.
Patch by Donghee Na.

: Invalidate type version tag in _PyStaticType_Dealloc for
static types, avoiding bug where a false cache hit could crash the
interpreter. Patch by Kumar Aditya.

: Adds a new RETURN_CONST instruction.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Remove gi_code field from generator (and coroutine and async
generator) objects as it is redundant. The frame already includes a
reference to the code object.

: When an interpreter is configured to check (and only then),
importing an extension module will now fail when the extension does not
support multiple interpreters (i.e. doesnât implement PEP 489 multi-phase
init). This does not apply to the main interpreter, nor to subinterpreters
created with Py_NewInterpreter().

================================================================================

# Changelog - Library (Part 1)

List:
: Micro-optimise hashing of inspect.Parameter, reducing
the time it takes to hash an instance by around 40%.
: Fix a bug where parentheses in the  argument to
argparse.ArgumentParser.add_argument() were dropped. Patch by Yeojin
Kim.
: platform.platform() now has boolean default arguments.
: Add mmap.MAP_ALIGNED_SUPER FreeBSD and
mmap.MAP_CONCEAL OpenBSD constants to . Patch by
Yeojin Kim.
: Fix  error message for negative fds.
: For the binary mode, fileinput.hookcompressed() doesnât
set the  value even if the value is . Patch by Gihwan
Kim.
: The default value of  becomes io.BytesIO if
 is initialized without a designated 
parameter. Patch by Long Vo.
: In zipfile, sync Path with , including
fix for extractall on the underlying zipfile after being wrapped in
.
: Apply changes from importlib_resources 5.12,
including fix for MultiplexedPath to support directories in multiple
namespaces (python/importlib_resources#265).
: Upgrade pip wheel bundled with ensurepip (pip 23.0.1)
: The built-in extension modules for  SHA2
algorithms, used when OpenSSL does not provide them, now live in a single
internal  module instead of separate  and 
modules.
: Callable iterators no longer raise SystemError when
the callable object exhausts the iterator but forgets to either return a
sentinel value or raise StopIteration.
: Remove locking behavior from functools.cached_property().
: Fix potential undefined behaviour in corner cases of
floating-point-to-time conversions.
: Fixed bug where  looks up the source line with
 with a lineno=None, which causes it to fail with an
unhandled exception.
: Optimize fractions.Fraction for small components. The
private argument _normalize of the fractions.Fraction
constructor has been removed.
: In sqlite3.Cursor.execute(), DeprecationWarning is
now emitted when named placeholders are used
together with parameters supplied as a  instead of as a
. Starting from Python 3.14, using named placeholders with
parameters supplied as a sequence will raise a
ProgrammingError. Patch by Erlend E. Aasland.
: Change repr of collections.OrderedDict to use regular
dictionary formatting instead of pairs of keys and values.
: Speed up pathlib.PurePath construction by handling
arguments more uniformly. When a pathlib.Path argument is
supplied, we use its string representation rather than joining its parts
with os.path.join().
: Speed up pathlib.PurePath construction by calling
os.path.join() only when two or more arguments are given.
: Speed up pathlib.Path construction by running the path
flavour compatibility check only when pathlib is imported.
: Refactored the implementation of pty.fork() to use
os.login_tty().
A DeprecationWarning is now raised by pty.master_open() and
pty.slave_open(). They were undocumented and deprecated long long ago
in the docstring in favor of pty.openpty().

================================================================================

# Changelog - Library (Part 2)

: Add a new decorator typing.override(). See  for
details. Patch by Steven Troxler.
: Set exit code when  CLI exits on error.
: Fix anchor matching in pathlib.PureWindowsPath.match().
Path and pattern anchors are now matched with , just like
other path parts. This allows patterns such as "*:/Users/*" to be
matched.
: Remove global state from  module ().
Patches by Erlend E. Aasland.
: Fix handling of drive-relative paths (like âC:â and âC:fooâ) in
pathlib.Path.absolute(). This method now uses the OS API to retrieve
the correct current working directory for the drive.
: Apply  to . Patch by Erlend E. Aasland.
: asyncio.wait_for() now uses asyncio.timeout() as its
underlying implementation. Patch by Kumar Aditya.
: Correctly preserve âextraâ fields in  regardless of
their ordering relative to a zip64 âextra.â
: Fix segfaults when creating lzma.LZMADecompressor and
bz2.BZ2Decompressor objects without calling __init__(), and
fix leakage of locks and internal buffers when calling the __init__()
methods of lzma.LZMADecompressor, lzma.LZMACompressor,
bz2.BZ2Compressor, and bz2.BZ2Decompressor objects
multiple times.

================================================================================

# Changelog - Library (Part 3)

: Micro-optimise hashing of inspect.Parameter, reducing
the time it takes to hash an instance by around 40%.

: Fix a bug where parentheses in the  argument to
argparse.ArgumentParser.add_argument() were dropped. Patch by Yeojin
Kim.

: platform.platform() now has boolean default arguments.

: Add mmap.MAP_ALIGNED_SUPER FreeBSD and
mmap.MAP_CONCEAL OpenBSD constants to . Patch by
Yeojin Kim.

: Fix  error message for negative fds.

: For the binary mode, fileinput.hookcompressed() doesnât
set the  value even if the value is . Patch by Gihwan
Kim.

: The default value of  becomes io.BytesIO if
 is initialized without a designated 
parameter. Patch by Long Vo.

: In zipfile, sync Path with , including
fix for extractall on the underlying zipfile after being wrapped in
.

: Apply changes from importlib_resources 5.12,
including fix for MultiplexedPath to support directories in multiple
namespaces (python/importlib_resources#265).

: Upgrade pip wheel bundled with ensurepip (pip 23.0.1)

: The built-in extension modules for  SHA2
algorithms, used when OpenSSL does not provide them, now live in a single
internal  module instead of separate  and 
modules.

================================================================================

# Changelog - Library (Part 4)

: Callable iterators no longer raise SystemError when
the callable object exhausts the iterator but forgets to either return a
sentinel value or raise StopIteration.

: Remove locking behavior from functools.cached_property().

: Fix potential undefined behaviour in corner cases of
floating-point-to-time conversions.

: Fixed bug where  looks up the source line with
 with a lineno=None, which causes it to fail with an
unhandled exception.

: Optimize fractions.Fraction for small components. The
private argument _normalize of the fractions.Fraction
constructor has been removed.

: In sqlite3.Cursor.execute(), DeprecationWarning is
now emitted when named placeholders are used
together with parameters supplied as a  instead of as a
. Starting from Python 3.14, using named placeholders with
parameters supplied as a sequence will raise a
ProgrammingError. Patch by Erlend E. Aasland.

: Change repr of collections.OrderedDict to use regular
dictionary formatting instead of pairs of keys and values.

: Speed up pathlib.PurePath construction by handling
arguments more uniformly. When a pathlib.Path argument is
supplied, we use its string representation rather than joining its parts
with os.path.join().

================================================================================

# Changelog - Library (Part 5)

: Speed up pathlib.PurePath construction by calling
os.path.join() only when two or more arguments are given.

: Speed up pathlib.Path construction by running the path
flavour compatibility check only when pathlib is imported.

: Refactored the implementation of pty.fork() to use
os.login_tty().

A DeprecationWarning is now raised by pty.master_open() and
pty.slave_open(). They were undocumented and deprecated long long ago
in the docstring in favor of pty.openpty().

: Add a new decorator typing.override(). See  for
details. Patch by Steven Troxler.

: Set exit code when  CLI exits on error.

: Fix anchor matching in pathlib.PureWindowsPath.match().
Path and pattern anchors are now matched with , just like
other path parts. This allows patterns such as "*:/Users/*" to be
matched.

: Remove global state from  module ().
Patches by Erlend E. Aasland.

: Fix handling of drive-relative paths (like âC:â and âC:fooâ) in
pathlib.Path.absolute(). This method now uses the OS API to retrieve
the correct current working directory for the drive.

: Apply  to . Patch by Erlend E. Aasland.

: asyncio.wait_for() now uses asyncio.timeout() as its
underlying implementation. Patch by Kumar Aditya.

================================================================================

# Changelog - Library (Part 6)

: Correctly preserve âextraâ fields in  regardless of
their ordering relative to a zip64 âextra.â

: Fix segfaults when creating lzma.LZMADecompressor and
bz2.BZ2Decompressor objects without calling __init__(), and
fix leakage of locks and internal buffers when calling the __init__()
methods of lzma.LZMADecompressor, lzma.LZMACompressor,
bz2.BZ2Compressor, and bz2.BZ2Decompressor objects
multiple times.

================================================================================

# Changelog - Documentation

List:
: Update  documentation to clarify behaviour on branch
cuts.
: Fix asyncio.Task.print_stack() description for
. Patch by Oleg Iarygin.

: Update  documentation to clarify behaviour on branch
cuts.

: Fix asyncio.Task.print_stack() description for
. Patch by Oleg Iarygin.

================================================================================

# Changelog - Tests

List:
: Fix deadlock on shutdown if test_current_{exception,frames}
fails. Patch by Jacob Bower.
: Utilize new âwinsizeâ functions from termios in pty tests.
: test_tools now copies up to 10x less source data to a
temporary directory during the  test by ignoring git metadata
and other artifacts.  It also limits its python build parallelism based on
os.cpu_count instead of hard coding it as 8 cores.

: Fix deadlock on shutdown if test_current_{exception,frames}
fails. Patch by Jacob Bower.

: Utilize new âwinsizeâ functions from termios in pty tests.

: test_tools now copies up to 10x less source data to a
temporary directory during the  test by ignoring git metadata
and other artifacts.  It also limits its python build parallelism based on
os.cpu_count instead of hard coding it as 8 cores.

================================================================================

# Changelog - Build

List:
: On Android, in a static build, python-config in embed mode no
longer incorrectly reports a library to link to.
: On Android, python.pc now correctly reports the library to link
to, the same as python-config.sh.
: Fix creating install directories in  sharedinstall if
they exist outside  already.
: Explicitly mark C extension modules that need defined signed
integer overflow, and add a configure option
--with-strict-overflow. Patch by Matthias GÃ¶rgens and Shantanu
Jain.

: On Android, in a static build, python-config in embed mode no
longer incorrectly reports a library to link to.

: On Android, python.pc now correctly reports the library to link
to, the same as python-config.sh.

: Fix creating install directories in  sharedinstall if
they exist outside  already.

: Explicitly mark C extension modules that need defined signed
integer overflow, and add a configure option
--with-strict-overflow. Patch by Matthias GÃ¶rgens and Shantanu
Jain.

================================================================================

# Changelog - Windows (Part 1)

List:
: Implement winreg.QueryValue using QueryValueEx and
winreg.SetValue using SetValueEx. Patch by Max Bachmann.
: Handle read and write operations on non-blocking pipes properly
on Windows.
: Add support for the os.get_blocking() and os.set_blocking()
functions on Windows.
: Ensures installer will correctly upgrade existing 
launcher installs.
: Updates copy of libffi bundled with Windows installs to 3.4.4.
: Update Windows installer to SQLite 3.40.1.
: Correctly handle extensions built against debug binaries that
reference python3_d.dll.
: The functions os.path.isdir, os.path.isfile,
os.path.islink and os.path.exists are now 13% to 28% faster on
Windows, by making fewer Win32 API calls.

: Implement winreg.QueryValue using QueryValueEx and
winreg.SetValue using SetValueEx. Patch by Max Bachmann.

: Handle read and write operations on non-blocking pipes properly
on Windows.

: Add support for the os.get_blocking() and os.set_blocking()
functions on Windows.

: Ensures installer will correctly upgrade existing 
launcher installs.

: Updates copy of libffi bundled with Windows installs to 3.4.4.

: Update Windows installer to SQLite 3.40.1.

================================================================================

# Changelog - Windows (Part 2)

: Correctly handle extensions built against debug binaries that
reference python3_d.dll.

: The functions os.path.isdir, os.path.isfile,
os.path.islink and os.path.exists are now 13% to 28% faster on
Windows, by making fewer Win32 API calls.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to SQLite 3.40.1.

: Update macOS installer to SQLite 3.40.1.

================================================================================

# Changelog - C API (Part 1)

List:
: Removes use of non-standard C++ extension in public header
files.
: Document that the Py_TPFLAGS_VALID_VERSION_TAG is an internal
feature, should not be used, and will be removed.
: Add PyErr_GetRaisedException() and
PyErr_SetRaisedException() for saving and restoring the current
exception. These functions return and accept a single exception object,
rather than the triple arguments of the now-deprecated
PyErr_Fetch() and PyErr_Restore(). This is less error
prone and a bit more efficient.
Add PyException_GetArgs() and PyException_SetArgs() as
convenience functions for retrieving and modifying the
 passed to the exceptionâs constructor.

: Introduced the Unstable C API tier, marking APi that is
allowed to change in minor releases without a deprecation period. See
 for details.

: Removes use of non-standard C++ extension in public header
files.

: Document that the Py_TPFLAGS_VALID_VERSION_TAG is an internal
feature, should not be used, and will be removed.

================================================================================

# Changelog - C API (Part 2)

: Add PyErr_GetRaisedException() and
PyErr_SetRaisedException() for saving and restoring the current
exception. These functions return and accept a single exception object,
rather than the triple arguments of the now-deprecated
PyErr_Fetch() and PyErr_Restore(). This is less error
prone and a bit more efficient.

Add PyException_GetArgs() and PyException_SetArgs() as
convenience functions for retrieving and modifying the
 passed to the exceptionâs constructor.

: Introduced the Unstable C API tier, marking APi that is
allowed to change in minor releases without a deprecation period. See
 for details.

================================================================================

# Changelog - Security

List:
: Replace the builtin  implementations of SHA2-224
and SHA2-256 originally from LibTomCrypt with formally verified,
side-channel resistant code from the  project. The builtins remain a
fallback only used when OpenSSL does not provide them.

: Replace the builtin  implementations of SHA2-224
and SHA2-256 originally from LibTomCrypt with formally verified,
side-channel resistant code from the  project. The builtins remain a
fallback only used when OpenSSL does not provide them.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix the  and  arguments to
PyEval_EvalCodeEx() and a reference leak in that function.
: The GILState API is now partially compatible with
subinterpreters. Previously, PyThreadState_GET() and
PyGILState_GetThisThreadState() would get out of sync, causing
inconsistent behavior and crashes.
: Fix wrong lineno in exception message on  or
 which are not in a loop. Patch by Donghee Na.
: Fix is_normalized() to properly handle the
UCD 3.2.0 cases. Patch by Donghee Na.
: Fix sys.getsizeof() reporting for 
subclasses.
: Refactor the PyLongObject struct into a normal Python
object header and a PyLongValue struct.
: Fix a possible memory leak in the parser when raising
MemoryError. Patch by Pablo Galindo
: Fix potential memory underallocation issue for instances of
 subclasses with value zero.
: Record the (virtual) exception block depth in the oparg of
YIELD_VALUE. Use this to avoid the expensive  when
closing generators (and coroutines) that can be closed trivially.
: Adds a new COMPARE_AND_BRANCH instruction. This is a
bit more efficient when performing a comparison immediately followed by a
branch, and restores the design intent of PEP 659 that specializations are
local to a single instruction.
: Fixed segfault in property.getter/setter/deleter that occurred
when a property subclass overrode the  method to return a
non-property instance.
: Remove the  cache entry for the COMPARE_OP
instruction and embed the mask into the oparg.
: Fix race while iterating over thread states in clearing
threading.local. Patch by Kumar Aditya.
: Fix a case where re-entrant imports could corrupt the import
deadlock detection code and cause a  to be raised out of
importlib/_bootstrap.  In addition to the straightforward cases,
this could also happen when garbage collection leads to a warning being
emitted â as happens when it collects an open socket or file)
: Optimize construction of  object for medium size
integers.
: Added option to build cpython with specialization disabled, by
setting ENABLE_SPECIALIZATION=False in , followed by
 .
: Inter-field padding is now inserted into the PEP3118 format
strings obtained from ctypes.Structure objects, reflecting their
true representation in memory.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix the  and  arguments to
PyEval_EvalCodeEx() and a reference leak in that function.

: The GILState API is now partially compatible with
subinterpreters. Previously, PyThreadState_GET() and
PyGILState_GetThisThreadState() would get out of sync, causing
inconsistent behavior and crashes.

: Fix wrong lineno in exception message on  or
 which are not in a loop. Patch by Donghee Na.

: Fix is_normalized() to properly handle the
UCD 3.2.0 cases. Patch by Donghee Na.

: Fix sys.getsizeof() reporting for 
subclasses.

: Refactor the PyLongObject struct into a normal Python
object header and a PyLongValue struct.

: Fix a possible memory leak in the parser when raising
MemoryError. Patch by Pablo Galindo

: Fix potential memory underallocation issue for instances of
 subclasses with value zero.

: Record the (virtual) exception block depth in the oparg of
YIELD_VALUE. Use this to avoid the expensive  when
closing generators (and coroutines) that can be closed trivially.

: Adds a new COMPARE_AND_BRANCH instruction. This is a
bit more efficient when performing a comparison immediately followed by a
branch, and restores the design intent of PEP 659 that specializations are
local to a single instruction.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fixed segfault in property.getter/setter/deleter that occurred
when a property subclass overrode the  method to return a
non-property instance.

: Remove the  cache entry for the COMPARE_OP
instruction and embed the mask into the oparg.

: Fix race while iterating over thread states in clearing
threading.local. Patch by Kumar Aditya.

: Fix a case where re-entrant imports could corrupt the import
deadlock detection code and cause a  to be raised out of
importlib/_bootstrap.  In addition to the straightforward cases,
this could also happen when garbage collection leads to a warning being
emitted â as happens when it collects an open socket or file)

: Optimize construction of  object for medium size
integers.

: Added option to build cpython with specialization disabled, by
setting ENABLE_SPECIALIZATION=False in , followed by
 .

: Inter-field padding is now inserted into the PEP3118 format
strings obtained from ctypes.Structure objects, reflecting their
true representation in memory.

================================================================================

# Changelog - Library (Part 1)

List:
: [Enum] - fix psuedo-flag creation
: Upgrade pip wheel bundled with ensurepip (pip 23.0)
: Fix a bug where errors where not thrown by
zlib._ZlibDecompressor if encountered during decompressing.
: Add ssl_shutdown_timeout parameter for
asyncio.StreamWriter.start_tls().
: Fix regression when passing  as second or third
argument to FutureIter.throw.
: Adapt the _elementtree extension module to multi-phase init
(). Patches by Erlend E. Aasland.
: Avoid potential unexpected freeaddrinfo call (double free)
in  when when a libc getaddrinfo() implementation leaves
garbage in an output pointer when returning an error. Original patch by
Sergey G. Brester.
: Remove unused references to TimerHandle in
asyncio.base_events.BaseEventLoop._add_callback.
: Make zipfile.Path.open() and
zipfile.Path.read_text() also accept  as a positional
argument. This was the behavior in Python 3.9 and earlier.  3.10
introduced a regression where supplying it as a positional argument would
lead to a .
: Group-related variables of _posixsubprocess module are
renamed to stress that supplementary group affinity is added to a fork,
not replace the inherited ones. Patch by Oleg Iarygin.
: Fix typing.get_type_hints() on '*tuple[...]' and
*tuple[...]. It must not drop the  part.
: Add os.path.splitroot(), which splits a path into a
3-item tuple   . This new function is used by
 to improve the performance of path construction by up to a
third.
: Fix a Windows  bug with named pipes where a
client doing  on the pipe would cause an error in the server
that disabled serving future requests.
: warnings.warn() now has the ability to skip stack frames
based on code filename prefix rather than only a numeric stacklevel
via the new skip_file_prefixes keyword argument.
: pass encoding kwarg to subprocess in platform
: Emit a deprecation warning in
asyncio.DefaultEventLoopPolicy.get_event_loop() if there is no
current event loop set and it decides to create one.
: Fix handling of partial and invalid UNC drives in
ntpath.splitdrive(), and in ntpath.normpath() on non-Windows
systems. Paths such as â\serverâ and â\â are now considered by
splitdrive() to contain only a drive, and consequently are not
modified by normpath() on non-Windows systems. The behaviour of
normpath() on Windows systems is unaffected, as native OS APIs are
used. Patch by Eryk Sun, with contributions by Barney Gale.
: Fix a reference undercounting issue in ctypes.Structure
with from_param() results larger than a C pointer.
: Add float-style formatting support for
fractions.Fraction instances.
: Preserve more detailed error messages in .
: Ensure runtime-created collections have the correct module name
using the newly added (internal) sys._getframemodulename().
:  now has a command line interface. Try  
 .
: ctypes.wintypes.BYTE definition changed from
 to  to match Windows SDK.
Patch by Anatoly Techtonik and Oleg Iarygin.
: _posixsubprocess now initializes all UID and GID variables
using a reserved  value instead of a separate flag. Patch by Oleg
Iarygin.
: The xml.etree.ElementTree module now emits
DeprecationWarning when testing the truth value of an
xml.etree.ElementTree.Element. Before, the Python implementation
emitted FutureWarning, and the C implementation emitted nothing.
: Convert elementtree types to heap types. Patch by Erlend
E. Aasland.
: Fix a bug where pathlib.Path accepted and ignored
keyword arguments. Patch provided by Yurii Karabas.
: ctypes.CDLL, ctypes.OleDLL,
ctypes.WinDLL, and ctypes.PyDLL now accept
path-like objects as their  argument.
Patch by Robert Hoelzl.

================================================================================

# Changelog - Library (Part 2)

: [Enum] - fix psuedo-flag creation

: Upgrade pip wheel bundled with ensurepip (pip 23.0)

: Fix a bug where errors where not thrown by
zlib._ZlibDecompressor if encountered during decompressing.

: Add ssl_shutdown_timeout parameter for
asyncio.StreamWriter.start_tls().

: Fix regression when passing  as second or third
argument to FutureIter.throw.

: Adapt the _elementtree extension module to multi-phase init
(). Patches by Erlend E. Aasland.

: Avoid potential unexpected freeaddrinfo call (double free)
in  when when a libc getaddrinfo() implementation leaves
garbage in an output pointer when returning an error. Original patch by
Sergey G. Brester.

: Remove unused references to TimerHandle in
asyncio.base_events.BaseEventLoop._add_callback.

: Make zipfile.Path.open() and
zipfile.Path.read_text() also accept  as a positional
argument. This was the behavior in Python 3.9 and earlier.  3.10
introduced a regression where supplying it as a positional argument would
lead to a .

: Group-related variables of _posixsubprocess module are
renamed to stress that supplementary group affinity is added to a fork,
not replace the inherited ones. Patch by Oleg Iarygin.

================================================================================

# Changelog - Library (Part 3)

: Fix typing.get_type_hints() on '*tuple[...]' and
*tuple[...]. It must not drop the  part.

: Add os.path.splitroot(), which splits a path into a
3-item tuple   . This new function is used by
 to improve the performance of path construction by up to a
third.

: Fix a Windows  bug with named pipes where a
client doing  on the pipe would cause an error in the server
that disabled serving future requests.

: warnings.warn() now has the ability to skip stack frames
based on code filename prefix rather than only a numeric stacklevel
via the new skip_file_prefixes keyword argument.

: pass encoding kwarg to subprocess in platform

: Emit a deprecation warning in
asyncio.DefaultEventLoopPolicy.get_event_loop() if there is no
current event loop set and it decides to create one.

================================================================================

# Changelog - Library (Part 4)

: Fix handling of partial and invalid UNC drives in
ntpath.splitdrive(), and in ntpath.normpath() on non-Windows
systems. Paths such as â\serverâ and â\â are now considered by
splitdrive() to contain only a drive, and consequently are not
modified by normpath() on non-Windows systems. The behaviour of
normpath() on Windows systems is unaffected, as native OS APIs are
used. Patch by Eryk Sun, with contributions by Barney Gale.

: Fix a reference undercounting issue in ctypes.Structure
with from_param() results larger than a C pointer.

: Add float-style formatting support for
fractions.Fraction instances.

: Preserve more detailed error messages in .

: Ensure runtime-created collections have the correct module name
using the newly added (internal) sys._getframemodulename().

:  now has a command line interface. Try  
 .

: ctypes.wintypes.BYTE definition changed from
 to  to match Windows SDK.
Patch by Anatoly Techtonik and Oleg Iarygin.

: _posixsubprocess now initializes all UID and GID variables
using a reserved  value instead of a separate flag. Patch by Oleg
Iarygin.

================================================================================

# Changelog - Library (Part 5)

: The xml.etree.ElementTree module now emits
DeprecationWarning when testing the truth value of an
xml.etree.ElementTree.Element. Before, the Python implementation
emitted FutureWarning, and the C implementation emitted nothing.

: Convert elementtree types to heap types. Patch by Erlend
E. Aasland.

: Fix a bug where pathlib.Path accepted and ignored
keyword arguments. Patch provided by Yurii Karabas.

: ctypes.CDLL, ctypes.OleDLL,
ctypes.WinDLL, and ctypes.PyDLL now accept
path-like objects as their  argument.
Patch by Robert Hoelzl.

================================================================================

# Changelog - Documentation

List:
: Reword subprocess to emphasize default behavior of
, , and  arguments. Remove inaccurate statement
about child file handle inheritance.

: Reword subprocess to emphasize default behavior of
, , and  arguments. Remove inaccurate statement
about child file handle inheritance.

================================================================================

# Changelog - Tests

List:
: test_tarfile has been updated to pass when run as a high
UID.

: test_tarfile has been updated to pass when run as a high
UID.

================================================================================

# Changelog - Build (Part 1)

List:
: Update BOLT configuration not to use deprecated usage of
 . Patch by Donghee Na.
: Allow overriding Windows dependencies versions and paths using
MSBuild properties.
: Minor fixes to allow building with PlatformToolset=ClangCL
on Windows.
: In accordance with , the ma_version_tag field in
PyDictObject is deprecated for extension modules. Accessing this
field will generate a compiler warning at compile time. This field will be
removed in Python 3.14.
: Allows -Wno-int-conversion for wasm-sdk 17 and onwards, thus
enables building WASI builds once against the latest sdk.
: Conditionally add -fno-reorder-blocks-and-partition in
configure. Effectively fixes --enable-bolt when using Clang, as this
appears to be a GCC-only flag.
:  is defined in AIX system header files which breaks
the build in AIX, so undefine it.
: Fix a regression in detecting gdbm_compat library for the
 module build.
: _aix_support now uses a simple code to get platform details
rather than the now non-existent _bootsubprocess during bootstrap.

: Update BOLT configuration not to use deprecated usage of
 . Patch by Donghee Na.

: Allow overriding Windows dependencies versions and paths using
MSBuild properties.

================================================================================

# Changelog - Build (Part 2)

: Minor fixes to allow building with PlatformToolset=ClangCL
on Windows.

: In accordance with , the ma_version_tag field in
PyDictObject is deprecated for extension modules. Accessing this
field will generate a compiler warning at compile time. This field will be
removed in Python 3.14.

: Allows -Wno-int-conversion for wasm-sdk 17 and onwards, thus
enables building WASI builds once against the latest sdk.

: Conditionally add -fno-reorder-blocks-and-partition in
configure. Effectively fixes --enable-bolt when using Clang, as this
appears to be a GCC-only flag.

:  is defined in AIX system header files which breaks
the build in AIX, so undefine it.

: Fix a regression in detecting gdbm_compat library for the
 module build.

: _aix_support now uses a simple code to get platform details
rather than the now non-existent _bootsubprocess during bootstrap.

================================================================================

# Changelog - Windows (Part 1)

List:
: Ensure the install path in the registry is only used when the
standard library hasnât been located in any other way.
: The  launcher now correctly filters when only a
single runtime is installed. It also correctly handles prefix matches on
tags so that  does not match , but would still match
.
: Updates bundled copy of Tcl/Tk to 8.6.13.0
: Restore ability to launch older 32-bit versions from the
 launcher when both 32-bit and 64-bit installs of the same
version are available.
: Fixed an issue where writing more than 32K of Unicode output to
the console screen in one go can result in mojibake.
: Ensures the PythonPath registry key from an install is used
when launching from a different copy of Python that relies on an existing
install to provide a copy of its modules and standard library.
: Restores support for the  launcher finding
shebang commands in its configuration file using the full command name.

: Ensure the install path in the registry is only used when the
standard library hasnât been located in any other way.

================================================================================

# Changelog - Windows (Part 2)

: The  launcher now correctly filters when only a
single runtime is installed. It also correctly handles prefix matches on
tags so that  does not match , but would still match
.

: Updates bundled copy of Tcl/Tk to 8.6.13.0

: Restore ability to launch older 32-bit versions from the
 launcher when both 32-bit and 64-bit installs of the same
version are available.

: Fixed an issue where writing more than 32K of Unicode output to
the console screen in one go can result in mojibake.

: Ensures the PythonPath registry key from an install is used
when launching from a different copy of Python that relies on an existing
install to provide a copy of its modules and standard library.

: Restores support for the  launcher finding
shebang commands in its configuration file using the full command name.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix misleading default value in âs
__text_signature__.
: Remove UNARY_POSITIVE, ASYNC_GEN_WRAP and
LIST_TO_TUPLE, replacing them with intrinsics.
: Add new CALL_INTRINSIC_1 instruction. Remove
IMPORT_STAR, PRINT_EXPR and
STOPITERATION_ERROR, replacing them with the
CALL_INTRINSIC_1 instruction.
: Remove the LOAD_ATTR_METHOD_WITH_DICT specialized instruction.
Stats show it is not useful.
: Added _PyFrame_NumSlotsForCodeObject, which returns the
number of slots needed in a frame for a given code object.
: Removed the co_nplaincellvars field from the code object, as it
is redundant.
: Fix int.__sizeof__() calculation to include the 1-element
 array for  and .
: Update the native_thread_id field of PyThreadState after fork.
: Fix an issue where âincompleteâ frames could be briefly visible
to C code while other frames are being torn down, possibly resulting in
corruption or hard crashes of the interpreter while running finalizers.
: Fix SyntaxError on comprehension rebind checking with
names that are not actually redefined.
Now reassigning  in        some_iter] is
allowed. Reassigning  is still disallowed as per .

================================================================================

# Changelog - Core and Builtins (Part 2)

: Add int.is_integer() to improve duck type compatibility
between  and .
: Improve the accuracy of  with compensated summation.
: Fix incorrect result and delay in socket.getfqdn(). Patch
by Dominic Socular.
: Convert , , , , and 
to argument clinic.
: Improve the output of codeobject.co_lines() by emitting
only one entry for each line range.
: Handle NaNs when specializing COMPARE_OP for
 values.
: Redefine the _Py_CODEUNIT typedef as a union to describe
its layout to the C compiler, avoiding type punning and improving clarity.
: Internal compiler functions (in compile.c) now consistently
return -1 on error and 0 on success.
: The BINARY_SUBSCR_LIST_INT and BINARY_SUBSCR_TUPLE_INT
instructions are no longer used for negative integers because those
instructions always miss when encountering negative integers.
: Initialize frame->previous in frameobject.c to fix a
segmentation fault when accessing frames created by PyFrame_New().
: Improved the hashing algorithm for code objects, mitigating some
hash collisions.
:  now hashes to a constant value. This is not a
requirements change.
: When built with --enable-pystats, stats collection is now
off by default. To enable it early at startup, pass the 
flag.  Stats are now always dumped, even if switched off.
: Improve BUILD_LIST opcode so that it works similarly to the
BUILD_TUPLE opcode, by stealing references from the stack rather than
repeatedly using stack operations to set list elements.  Implementation
details are in a new private API _PyList_FromArraySteal().
: Specialize  for tuples.
: Honor existing errors obtained when searching for mismatching
parentheses in the tokenizer. Patch by Pablo Galindo
: Improve the performance of  for type objects with
a missing attribute.
: Freeze  module into _bootstrap_python.
: Pack debugging location tables more efficiently during bytecode
compilation.
: Add an internal version number to code objects, to give better
versioning of inner functions and comprehensions, and thus better
specialization of those functions. This change is invisible to both Python
and C extensions.
: Improve performance of  for small lists.
: Add ssl.OP_LEGACY_SERVER_CONNECT
:  arrays of length 0 now report a correct itemsize
when a memoryview is constructed from them, rather than always giving
a value of 0.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix misleading default value in âs
__text_signature__.

: Remove UNARY_POSITIVE, ASYNC_GEN_WRAP and
LIST_TO_TUPLE, replacing them with intrinsics.

: Add new CALL_INTRINSIC_1 instruction. Remove
IMPORT_STAR, PRINT_EXPR and
STOPITERATION_ERROR, replacing them with the
CALL_INTRINSIC_1 instruction.

: Remove the LOAD_ATTR_METHOD_WITH_DICT specialized instruction.
Stats show it is not useful.

: Added _PyFrame_NumSlotsForCodeObject, which returns the
number of slots needed in a frame for a given code object.

: Removed the co_nplaincellvars field from the code object, as it
is redundant.

: Fix int.__sizeof__() calculation to include the 1-element
 array for  and .

: Update the native_thread_id field of PyThreadState after fork.

: Fix an issue where âincompleteâ frames could be briefly visible
to C code while other frames are being torn down, possibly resulting in
corruption or hard crashes of the interpreter while running finalizers.

: Fix SyntaxError on comprehension rebind checking with
names that are not actually redefined.

Now reassigning  in        some_iter] is
allowed. Reassigning  is still disallowed as per .

: Add int.is_integer() to improve duck type compatibility
between  and .

================================================================================

# Changelog - Core and Builtins (Part 4)

: Improve the accuracy of  with compensated summation.

: Fix incorrect result and delay in socket.getfqdn(). Patch
by Dominic Socular.

: Convert , , , , and 
to argument clinic.

: Improve the output of codeobject.co_lines() by emitting
only one entry for each line range.

: Handle NaNs when specializing COMPARE_OP for
 values.

: Redefine the _Py_CODEUNIT typedef as a union to describe
its layout to the C compiler, avoiding type punning and improving clarity.

: Internal compiler functions (in compile.c) now consistently
return -1 on error and 0 on success.

: The BINARY_SUBSCR_LIST_INT and BINARY_SUBSCR_TUPLE_INT
instructions are no longer used for negative integers because those
instructions always miss when encountering negative integers.

: Initialize frame->previous in frameobject.c to fix a
segmentation fault when accessing frames created by PyFrame_New().

: Improved the hashing algorithm for code objects, mitigating some
hash collisions.

:  now hashes to a constant value. This is not a
requirements change.

: When built with --enable-pystats, stats collection is now
off by default. To enable it early at startup, pass the 
flag.  Stats are now always dumped, even if switched off.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Improve BUILD_LIST opcode so that it works similarly to the
BUILD_TUPLE opcode, by stealing references from the stack rather than
repeatedly using stack operations to set list elements.  Implementation
details are in a new private API _PyList_FromArraySteal().

: Specialize  for tuples.

: Honor existing errors obtained when searching for mismatching
parentheses in the tokenizer. Patch by Pablo Galindo

: Improve the performance of  for type objects with
a missing attribute.

: Freeze  module into _bootstrap_python.

: Pack debugging location tables more efficiently during bytecode
compilation.

: Add an internal version number to code objects, to give better
versioning of inner functions and comprehensions, and thus better
specialization of those functions. This change is invisible to both Python
and C extensions.

: Improve performance of  for small lists.

: Add ssl.OP_LEGACY_SERVER_CONNECT

:  arrays of length 0 now report a correct itemsize
when a memoryview is constructed from them, rather than always giving
a value of 0.

================================================================================

# Changelog - Library (Part 1)

List:
: Speed up math.fsum() by removing defensive 
qualifiers.
: Modify random.choice() implementation to once again work
with NumPy arrays.
: Add socket.IP_PKTINFO constant.
: Make email.message.Message.__contains__() twice as fast.
: Microoptimizations for fractions.Fraction.__round__(),
fractions.Fraction.__ceil__() and
fractions.Fraction.__floor__().
: Avoid RecursionError on  if a dataclass field definition
has a cyclic reference.
: Fix crash in  by statically allocating
PyExpat_CAPI capsule.
: Fix unittest.mock.Mock not respecting the spec for
attribute names prefixed with .
: Change SimpleHTTPRequestHandler to support subclassing to
provide a different set of index file names instead of using 
parameters.
:  objects which are not unsafe will now raise an
AttributeError when accessing an attribute that matches the name of an
assertion but without the prefix , e.g. accessing
called_once instead of assert_called_once. This is in addition to
this already happening for accessing attributes with prefixes ,
, , , and .
: Simplify and optimize  by using
isinstance() checks to check the top of the stack.
: Add math.sumprod() to compute the sum of products.
: Fix asyncio.open_connection() to skip binding to local
addresses of different family. Patch by Kumar Aditya.
: importlib.resources.files now accepts a module as an anchor
instead of only accepting packages. If a module is passed, resources are
resolved adjacent to that module (in the same package or at the package
root). The parameter was renamed from  to  with a
compatibility shim for those passing by keyword. Additionally, the new
 parameter is now optional and will default to the callerâs
module.
: Fixed a bug where importlib.resources.as_file was leaving file
pointers open
: Improve performance of pathlib.Path.absolute() by nearly
2x. This comes at the cost of a performance regression in
pathlib.Path.cwd(), which is generally used less frequently in user
code.
: Small simplification of http.cookiejar.eff_request_host()
that improves readability and better matches the RFC wording.
: Fix the interaction of unittest.mock.seal() with
unittest.mock.AsyncMock.
: Add Fraction.is_integer() to check whether a
fractions.Fraction is an integer. This improves duck type
compatibility with  and .
: http.server now checks that an index page is actually a
regular file before trying to serve it.  This avoids issues with
directories named index.html.
: Speed up asyncio.get_running_loop() by removing redundant
 checks. Patch by Kumar Aditya.
: Fix crash when creating an instance of _ctypes.CField.
: Fix ref cycle in asyncio._SelectorSocketTransport by
removing _read_ready_cb in .
: Provide C implementation for asyncio.current_task() for a
4x-6x speedup.
: Fix JSON serialization of OrderedDict.  It now preserves the
order of keys.
: Instantiation of  and AsyncMock() is now 3.8x
faster.
: Set a default value of 1.0 for the  parameter in
random.expovariate().
: A DeprecationWarning may be raised when 
or os.forkpty() is called from multi-threaded processes.  Forking
with threads is unsafe and can cause deadlocks, crashes and subtle
problems. Lack of a warning does not indicate that the fork call was
actually safe, as Python may not be aware of all threads.
: Improve signatures for enums and flags.
: Fix regression in  where a subprocess would
sometimes lose data received from pipe.
: Fixes inconsistent handling of case sensitivity of
extrasaction arg in csv.DictWriter.
: Fix  subclasses being cast to  when used as
enum values.
: Rename the  parameter of the pure-Python implementation of
datetime.time.strftime() to . Rename the  parameter of
datetime.datetime.fromtimestamp() to . These changes mean
the parameter names in the pure-Python implementation now match the
parameter names in the C implementation. Patch by Alex Waygood.
: Update  to be initialized
properly, even if the  is . Patch by Donghee Na.
: Unify error messages in JSON serialization between
json.dumps(float('nan'), allow_nan=False) and
json.dumps(float('nan'), allow_nan=False, indent=<SOMETHING>). Now
both include the representation of the value that could not be serialized.
: Fix issue with  where a RecursionError
would occur on deep directory structures by adjusting the implementation
of  to be iterative instead of recursive.
: Add Dataclass support to the 
__repr__(). When inheriting from a
, only show the field names in the value
section of the member , and not the dataclassâ class name.
: Fix inspect.getsource() handling of decorator calls with
nested parentheses.
: Fix  method for LWPCookieJar and
MozillaCookieJar: saved file was not truncated on repeated save.
: Add inspect.markcoroutinefunction() decorator which
manually marks a function as a coroutine for the benefit of
iscoroutinefunction().
: Add  support for
multiprocessing.queues.Queue.
: Remove  partial compatibility code from several stdlib
modules.
: Fix  failure on types.MethodWrapperType
in modules.
: Several improvements to inspect.signature()âs handling of
__text_signature. - Fixes a case where inspect.signature()
dropped parameters - Fixes a case where inspect.signature() raised
tokenize.TokenError - Allows inspect.signature() to
understand defaults involving binary operations of constants -
inspect.signature() is documented as only raising 
or ValueError, but sometimes raised RuntimeError. These
cases now raise ValueError - Removed a dead code path
:  is optimized to avoid excessive copying when
writing to socket and use  if the platform
supports it. Patch by Kumar Aditya.
: Add missing TCP socket options from Linux: TCP_MD5SIG,
TCP_THIN_LINEAR_TIMEOUTS, TCP_THIN_DUPACK, TCP_REPAIR,
TCP_REPAIR_QUEUE, TCP_QUEUE_SEQ, TCP_REPAIR_OPTIONS,
TCP_TIMESTAMP, TCP_CC_INFO, TCP_SAVE_SYN, TCP_SAVED_SYN,
TCP_REPAIR_WINDOW, TCP_FASTOPEN_CONNECT, ,
TCP_MD5SIG_EXT, TCP_FASTOPEN_KEY, TCP_FASTOPEN_NO_COOKIE,
TCP_ZEROCOPY_RECEIVE, , TCP_TX_DELAY.
: Reduced the memory usage of urllib.parse.unquote() and
urllib.parse.unquote_to_bytes() on large values.
: inspect.signature was raising  on call with
mock objects. Now it correctly returns   as inferred
signature.
: Fix a 3.11 regression in
asynccontextmanager(), which caused it to propagate
exceptions with incorrect tracebacks and fix a 3.11 regression in
contextmanager(), which caused it to propagate
exceptions with incorrect tracebacks for StopIteration.
: Deprecate passing more than one positional argument to
pathlib.PurePath.relative_to() and
is_relative_to().
: Fix reStructuredText syntax errors in docstrings in the
 module.
: Optimize the  arithmetics for small
components.
: Make pathlib.PurePath and 
subclassable (private to start). Previously, attempting to instantiate a
subclass resulted in an AttributeError being raised. Patch by
Barney Gale.
: Accept os.PathLike (such as pathlib.Path) in
the  arguments of compileall.compile_file() and
compileall.compile_dir().
: Fix a reference counting issue when a  callback
with return type  returns , which could
cause crashes.

================================================================================

# Changelog - Library (Part 2)

: Speed up math.fsum() by removing defensive 
qualifiers.

: Modify random.choice() implementation to once again work
with NumPy arrays.

: Add socket.IP_PKTINFO constant.

: Make email.message.Message.__contains__() twice as fast.

: Microoptimizations for fractions.Fraction.__round__(),
fractions.Fraction.__ceil__() and
fractions.Fraction.__floor__().

: Avoid RecursionError on  if a dataclass field definition
has a cyclic reference.

: Fix crash in  by statically allocating
PyExpat_CAPI capsule.

: Fix unittest.mock.Mock not respecting the spec for
attribute names prefixed with .

: Change SimpleHTTPRequestHandler to support subclassing to
provide a different set of index file names instead of using 
parameters.

:  objects which are not unsafe will now raise an
AttributeError when accessing an attribute that matches the name of an
assertion but without the prefix , e.g. accessing
called_once instead of assert_called_once. This is in addition to
this already happening for accessing attributes with prefixes ,
, , , and .

: Simplify and optimize  by using
isinstance() checks to check the top of the stack.

: Add math.sumprod() to compute the sum of products.

================================================================================

# Changelog - Library (Part 3)

: Fix asyncio.open_connection() to skip binding to local
addresses of different family. Patch by Kumar Aditya.

: importlib.resources.files now accepts a module as an anchor
instead of only accepting packages. If a module is passed, resources are
resolved adjacent to that module (in the same package or at the package
root). The parameter was renamed from  to  with a
compatibility shim for those passing by keyword. Additionally, the new
 parameter is now optional and will default to the callerâs
module.

: Fixed a bug where importlib.resources.as_file was leaving file
pointers open

: Improve performance of pathlib.Path.absolute() by nearly
2x. This comes at the cost of a performance regression in
pathlib.Path.cwd(), which is generally used less frequently in user
code.

: Small simplification of http.cookiejar.eff_request_host()
that improves readability and better matches the RFC wording.

: Fix the interaction of unittest.mock.seal() with
unittest.mock.AsyncMock.

: Add Fraction.is_integer() to check whether a
fractions.Fraction is an integer. This improves duck type
compatibility with  and .

================================================================================

# Changelog - Library (Part 4)

: http.server now checks that an index page is actually a
regular file before trying to serve it.  This avoids issues with
directories named index.html.

: Speed up asyncio.get_running_loop() by removing redundant
 checks. Patch by Kumar Aditya.

: Fix crash when creating an instance of _ctypes.CField.

: Fix ref cycle in asyncio._SelectorSocketTransport by
removing _read_ready_cb in .

: Provide C implementation for asyncio.current_task() for a
4x-6x speedup.

: Fix JSON serialization of OrderedDict.  It now preserves the
order of keys.

: Instantiation of  and AsyncMock() is now 3.8x
faster.

: Set a default value of 1.0 for the  parameter in
random.expovariate().

: A DeprecationWarning may be raised when 
or os.forkpty() is called from multi-threaded processes.  Forking
with threads is unsafe and can cause deadlocks, crashes and subtle
problems. Lack of a warning does not indicate that the fork call was
actually safe, as Python may not be aware of all threads.

: Improve signatures for enums and flags.

: Fix regression in  where a subprocess would
sometimes lose data received from pipe.

: Fixes inconsistent handling of case sensitivity of
extrasaction arg in csv.DictWriter.

================================================================================

# Changelog - Library (Part 5)

: Fix  subclasses being cast to  when used as
enum values.

: Rename the  parameter of the pure-Python implementation of
datetime.time.strftime() to . Rename the  parameter of
datetime.datetime.fromtimestamp() to . These changes mean
the parameter names in the pure-Python implementation now match the
parameter names in the C implementation. Patch by Alex Waygood.

: Update  to be initialized
properly, even if the  is . Patch by Donghee Na.

: Unify error messages in JSON serialization between
json.dumps(float('nan'), allow_nan=False) and
json.dumps(float('nan'), allow_nan=False, indent=<SOMETHING>). Now
both include the representation of the value that could not be serialized.

: Fix issue with  where a RecursionError
would occur on deep directory structures by adjusting the implementation
of  to be iterative instead of recursive.

: Add Dataclass support to the 
__repr__(). When inheriting from a
, only show the field names in the value
section of the member , and not the dataclassâ class name.

: Fix inspect.getsource() handling of decorator calls with
nested parentheses.

: Fix  method for LWPCookieJar and
MozillaCookieJar: saved file was not truncated on repeated save.

================================================================================

# Changelog - Library (Part 6)

: Add inspect.markcoroutinefunction() decorator which
manually marks a function as a coroutine for the benefit of
iscoroutinefunction().

: Add  support for
multiprocessing.queues.Queue.

: Remove  partial compatibility code from several stdlib
modules.

: Fix  failure on types.MethodWrapperType
in modules.

: Several improvements to inspect.signature()âs handling of
__text_signature. - Fixes a case where inspect.signature()
dropped parameters - Fixes a case where inspect.signature() raised
tokenize.TokenError - Allows inspect.signature() to
understand defaults involving binary operations of constants -
inspect.signature() is documented as only raising 
or ValueError, but sometimes raised RuntimeError. These
cases now raise ValueError - Removed a dead code path

:  is optimized to avoid excessive copying when
writing to socket and use  if the platform
supports it. Patch by Kumar Aditya.

================================================================================

# Changelog - Library (Part 7)

: Add missing TCP socket options from Linux: TCP_MD5SIG,
TCP_THIN_LINEAR_TIMEOUTS, TCP_THIN_DUPACK, TCP_REPAIR,
TCP_REPAIR_QUEUE, TCP_QUEUE_SEQ, TCP_REPAIR_OPTIONS,
TCP_TIMESTAMP, TCP_CC_INFO, TCP_SAVE_SYN, TCP_SAVED_SYN,
TCP_REPAIR_WINDOW, TCP_FASTOPEN_CONNECT, ,
TCP_MD5SIG_EXT, TCP_FASTOPEN_KEY, TCP_FASTOPEN_NO_COOKIE,
TCP_ZEROCOPY_RECEIVE, , TCP_TX_DELAY.

: Reduced the memory usage of urllib.parse.unquote() and
urllib.parse.unquote_to_bytes() on large values.

: inspect.signature was raising  on call with
mock objects. Now it correctly returns   as inferred
signature.

: Fix a 3.11 regression in
asynccontextmanager(), which caused it to propagate
exceptions with incorrect tracebacks and fix a 3.11 regression in
contextmanager(), which caused it to propagate
exceptions with incorrect tracebacks for StopIteration.

: Deprecate passing more than one positional argument to
pathlib.PurePath.relative_to() and
is_relative_to().

: Fix reStructuredText syntax errors in docstrings in the
 module.

: Optimize the  arithmetics for small
components.

================================================================================

# Changelog - Library (Part 8)

: Make pathlib.PurePath and 
subclassable (private to start). Previously, attempting to instantiate a
subclass resulted in an AttributeError being raised. Patch by
Barney Gale.

: Accept os.PathLike (such as pathlib.Path) in
the  arguments of compileall.compile_file() and
compileall.compile_dir().

: Fix a reference counting issue when a  callback
with return type  returns , which could
cause crashes.

================================================================================

# Changelog - Documentation

List:
: Document existing  parameter to
curses.window.vline() function in .
: Remove claim in documentation that the ,
prependdir and limit_sl_dest parameters of
compileall.compile_dir() and compileall.compile_file() could
be .
: Clarify use of octal format of mode argument in help(os.chmod)
as well as help(os.fchmod)

: Document existing  parameter to
curses.window.vline() function in .

: Remove claim in documentation that the ,
prependdir and limit_sl_dest parameters of
compileall.compile_dir() and compileall.compile_file() could
be .

: Clarify use of octal format of mode argument in help(os.chmod)
as well as help(os.fchmod)

================================================================================

# Changelog - Tests

List:
: Start running SSL tests with OpenSSL 3.1.0-beta1.
: The Python test runner (libregrtest) now logs Python build
information like âdebugâ vs âreleaseâ build, or LTO and PGO optimizations.
Patch by Victor Stinner.
: Make two tests forgiving towards host system libexpat with
backported security fixes applied.

: Start running SSL tests with OpenSSL 3.1.0-beta1.

: The Python test runner (libregrtest) now logs Python build
information like âdebugâ vs âreleaseâ build, or LTO and PGO optimizations.
Patch by Victor Stinner.

: Make two tests forgiving towards host system libexpat with
backported security fixes applied.

================================================================================

# Changelog - Build (Part 1)

List:
: Removed the --with-system-ffi  option;
 must now always be supplied by the system on all non-Windows
platforms.  The option has had no effect on non-Darwin platforms for
several releases, and in 3.11 only had the non-obvious effect of invoking
pkg-config to find  and never setting
-DUSING_APPLE_OS_LIBFFI.  Now on Darwin platforms  will
first check for the OS  and then fall back to the same
processing as other platforms if it is not found.
: Avoid exporting Python symbols in linked Windows applications
when the core is built as static.
: Allow override of ac_cv_cxx_thread so that cross compiled
python can set -pthread for CXX.

: Removed the --with-system-ffi  option;
 must now always be supplied by the system on all non-Windows
platforms.  The option has had no effect on non-Darwin platforms for
several releases, and in 3.11 only had the non-obvious effect of invoking
pkg-config to find  and never setting
-DUSING_APPLE_OS_LIBFFI.  Now on Darwin platforms  will
first check for the OS  and then fall back to the same
processing as other platforms if it is not found.

: Avoid exporting Python symbols in linked Windows applications
when the core is built as static.

================================================================================

# Changelog - Build (Part 2)

: Allow override of ac_cv_cxx_thread so that cross compiled
python can set -pthread for CXX.

================================================================================

# Changelog - Windows

List:
: Update Windows installer to OpenSSL 1.1.1s
: Use _MSVC_LANG   instead of less-precise 
 to more accurately test for C++20 support in
PC/_wmimodule.cpp.
: Define  for Mingw-w64 64bit, fix cython compilation
failure.
: Ensure that asyncio.Protocol.data_received() receives an
immutable  object (as documented), instead of
.
: winreg.SetValueEx() now leaves the target value untouched
in the case of conversion errors. Previously,  would be written in
case of such errors.
: hasattr(ctypes.windll, 'nonexistant') now returns 
instead of raising .

: Update Windows installer to OpenSSL 1.1.1s

: Use _MSVC_LANG   instead of less-precise 
 to more accurately test for C++20 support in
PC/_wmimodule.cpp.

: Define  for Mingw-w64 64bit, fix cython compilation
failure.

: Ensure that asyncio.Protocol.data_received() receives an
immutable  object (as documented), instead of
.

: winreg.SetValueEx() now leaves the target value untouched
in the case of conversion errors. Previously,  would be written in
case of such errors.

: hasattr(ctypes.windll, 'nonexistant') now returns 
instead of raising .

================================================================================

# Changelog - macOS

List:
: Update macOS installer to OpenSSL 1.1.1s
: Removed obsolete  shim from the 
extension module, which has not been necessary since Mac OS X 10.2.

: Update macOS installer to OpenSSL 1.1.1s

: Removed obsolete  shim from the 
extension module, which has not been necessary since Mac OS X 10.2.

================================================================================

# Changelog - Tools/Demos

List:
: Fix a bug that caused an AttributeError to be raised in
python-gdb.py when  is used without a frame.
: Add missing  check for possible allocation failure in
 parsing in Argument Clinic.

: Fix a bug that caused an AttributeError to be raised in
python-gdb.py when  is used without a frame.

: Add missing  check for possible allocation failure in
 parsing in Argument Clinic.

================================================================================

# Changelog - C API

List:
: Raising SystemError on import will now have its cause be set to
the original unexpected exception.
: In argument parsing, after deallocating newly allocated memory,
reset its pointer to NULL.
: The ,  and
Py_XSETREF macros now only evaluate their arguments once. If an
argument has side effects, these side effects are no longer duplicated.
Patch by Victor Stinner.

: Raising SystemError on import will now have its cause be set to
the original unexpected exception.

: In argument parsing, after deallocating newly allocated memory,
reset its pointer to NULL.

: The ,  and
Py_XSETREF macros now only evaluate their arguments once. If an
argument has side effects, these side effects are no longer duplicated.
Patch by Victor Stinner.

================================================================================

# Changelog - Security

List:
:   http.server no longer allows terminal control
characters sent within a garbage request to be printed to the stderr
server log.
This is done by changing the http.server
BaseHTTPRequestHandler .log_message method to replace control
characters with a  hex escape before printing.

: Avoid publishing list of active per-interpreter audit hooks via
the  module

:   http.server no longer allows terminal control
characters sent within a garbage request to be printed to the stderr
server log.

This is done by changing the http.server
BaseHTTPRequestHandler .log_message method to replace control
characters with a  hex escape before printing.

: Avoid publishing list of active per-interpreter audit hooks via
the  module

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix a bug in the tokenizer that could cause infinite recursion
when showing syntax warnings that happen in the first line of the source.
Patch by Pablo Galindo
: Add PyCode_AddWatcher() and
PyCode_ClearWatcher() APIs to register callbacks to receive
notification on creation and destruction of code objects.
: Fix an issue that could cause frames to be visible to Python
code as they are being torn down, possibly leading to memory corruption or
hard crashes of the interpreter.
: Fix bug where compiler crashes on an if expression with an empty
body block.
: Fix a reference bug in _imp.create_builtin() after the
creation of the first sub-interpreter for modules  and
. Patch by Victor Stinner.
: Fixed a bug that was causing a buffer overflow if the tokenizer
copies a line missing the newline character from a file that is as long as
the available tokenizer buffer. Patch by Pablo galindo
: Fix bug where an ExceptionGroup subclass can wrap a
BaseException.
: Add a function to os.path to check if a path is a junction:
isjunction. Add similar functionality to pathlib.Path as is_junction.
: Fix zip path for venv created from a non-installed python on
POSIX platforms.
: Add audit events for thread creation and clear operations.
: Remove the BINARY_OP_GENERIC and COMPARE_OP_GENERIC
âspecializationsâ.
: Remove the remaining error paths for attribute specializations,
and refuse to specialize attribute accesses on types that havenât had
PyType_Ready() called on them yet.
: Allow some features of  to the main interpreter
only. Patch by Donghee Na.
: Optimizing interpreters and JIT compilers may need to invalidate
internal metadata when functions are modified. This change adds the
ability to provide a callback that will be invoked each time a function is
created, modified, or destroyed.
: Improve error messages when thereâs a syntax error with call
arguments. The following three cases are covered: - No value is assigned
to a named argument, eg . - A value is assigned to a star
argument, eg foo(*args=[0]). - A value is assigned to a double-star
keyword argument, eg foo(**kwarg={'a': .
: Optimize the  object iterator. It is now smaller,
faster iteration of ranges containing large numbers. Smaller pickles,
faster unpickling.
: Raise ValueError instead of SystemError when
methods of uninitialized io.IncrementalNewlineDecoder objects are
called. Patch by Oren Milman.
: Fix a possible assertion failure in  when the
opener returns an invalid file descriptor.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix a bug in the tokenizer that could cause infinite recursion
when showing syntax warnings that happen in the first line of the source.
Patch by Pablo Galindo

: Add PyCode_AddWatcher() and
PyCode_ClearWatcher() APIs to register callbacks to receive
notification on creation and destruction of code objects.

: Fix an issue that could cause frames to be visible to Python
code as they are being torn down, possibly leading to memory corruption or
hard crashes of the interpreter.

: Fix bug where compiler crashes on an if expression with an empty
body block.

: Fix a reference bug in _imp.create_builtin() after the
creation of the first sub-interpreter for modules  and
. Patch by Victor Stinner.

: Fixed a bug that was causing a buffer overflow if the tokenizer
copies a line missing the newline character from a file that is as long as
the available tokenizer buffer. Patch by Pablo galindo

: Fix bug where an ExceptionGroup subclass can wrap a
BaseException.

: Add a function to os.path to check if a path is a junction:
isjunction. Add similar functionality to pathlib.Path as is_junction.

: Fix zip path for venv created from a non-installed python on
POSIX platforms.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Add audit events for thread creation and clear operations.

: Remove the BINARY_OP_GENERIC and COMPARE_OP_GENERIC
âspecializationsâ.

: Remove the remaining error paths for attribute specializations,
and refuse to specialize attribute accesses on types that havenât had
PyType_Ready() called on them yet.

: Allow some features of  to the main interpreter
only. Patch by Donghee Na.

: Optimizing interpreters and JIT compilers may need to invalidate
internal metadata when functions are modified. This change adds the
ability to provide a callback that will be invoked each time a function is
created, modified, or destroyed.

: Improve error messages when thereâs a syntax error with call
arguments. The following three cases are covered: - No value is assigned
to a named argument, eg . - A value is assigned to a star
argument, eg foo(*args=[0]). - A value is assigned to a double-star
keyword argument, eg foo(**kwarg={'a': .

: Optimize the  object iterator. It is now smaller,
faster iteration of ranges containing large numbers. Smaller pickles,
faster unpickling.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Raise ValueError instead of SystemError when
methods of uninitialized io.IncrementalNewlineDecoder objects are
called. Patch by Oren Milman.

: Fix a possible assertion failure in  when the
opener returns an invalid file descriptor.

================================================================================

# Changelog - Library (Part 1)

List:
: Also escape s in the http.server
BaseHTTPRequestHandler.log_message so that it is technically possible to
parse the line and reconstruct what the original data was.  Without this a
xHH is ambiguous as to if it is a hex replacement we put in or the
characters râxâ came through in the original request line.
: Add frozen_default parameter to
typing.dataclass_transform().
: Fix asyncio.Server.wait_closed() to actually do what the
docs promise â wait for all existing connections to complete, after
closing the server.
: Fix bug when calling trace.CoverageResults with valid infile.
: Fix a bug in handling class cleanups in
unittest.TestCase.  Now addClassCleanup() uses separate lists
for different  subclasses, and doClassCleanups() only
cleans up the particular class.
: Fix  in Lib/importlib/_bootstrap_external.py
while calling _imp.source_hash().
: Fix  to not share event loop and signal wakeupfd
in forked processes. Patch by Kumar Aditya.
: Release the GIL when calling termios APIs to avoid blocking
threads.
: Use final status of an enum to determine lookup or creation
branch of functional API.
: Add loop_factory parameter to asyncio.run() to allow
specifying a custom event loop factory. Patch by Kumar Aditya.
: Fix ast.increment_lineno() to also cover
ast.TypeIgnore when changing line numbers.
: Check the number of arguments in substitution in user generics
containing a TypeVarTuple and one or more
.
: Fix substitution of  followed by
TypeVarTuple in generic aliases.
: Fix substitution of TypeVarTuple and
 together in user generics.
: Remove _use_broken_old_ctypes_structure_semantics_ old
untested and undocumented hack from .
: Fix IndexError when initializing the config variables on
Windows if HAVE_DYNAMIC_LOADING is not set.
: Fix double-free bug in Argument Clinic str_converter by
extracting memory clean up to a new post_parsing section.
: Fix refcount error when arguments are packed to tuple in
Argument Clinic.
: pathlib.PurePath.relative_to() now treats naked Windows
drive paths as relative. This brings its behaviour in line with other
parts of pathlib.
: The implementation of the typing module is now more resilient to
reference leaks in binary extension modules.
Previously, a reference leak in a typed C API-based extension module could
leak internals of the typing module, which could in turn introduce leaks
in essentially any other package with typed function signatures. Although
the typing package is not the original source of the problem, such
non-local dependences exacerbate debugging of large-scale projects, and
the implementation was therefore changed to reduce harm by providing
better isolation.

================================================================================

# Changelog - Library (Part 2)

: Fix infinite loop in unittest when a self-referencing chained
exception is raised
: asyncio.get_event_loop() and many other 
functions like asyncio.ensure_future(), asyncio.shield() or
asyncio.gather(), and also the
get_event_loop() method of
asyncio.BaseDefaultEventLoopPolicy now raise a
RuntimeError if called when there is no running event loop and the
current event loop was not set. Previously they implicitly created and set
a new current event loop. DeprecationWarning is no longer emitted
if there is no running event loop but the current event loop was set.
: On uname_result, restored expectation that  and
 would include all six properties including .
: Provide informative error messages in struct.pack() when
its integral arguments are not in range.
: zipfile.Path is now pickleable if its initialization
parameters were pickleable (e.g. for file system paths).
: Created packages from zipfile and test_zipfile modules,
separating zipfile.Path functionality.
: Fix is_private properties in the
 module. Previously non-private networks (0.0.0.0/0) would
return  from this method; now they correctly return .
: Add an OP_ENABLE_KTLS option for enabling the use
of the kernel TLS (kTLS). Patch by Illia Volochii.
: To avoid apparent memory leaks when
asyncio.open_connection() raises, break reference cycles generated
by local exception and future instances (which has exception instance as
its member var). Patch by Dong Uk, Kang.
: TarFile.next() now returns  when called on an
empty tarfile.
: Document the optional  parameter of
WeakMethod. Patch by GÃ©ry Ogam.
: Ignore WinError 53 (ERROR_BAD_NETPATH), 65
(ERROR_NETWORK_ACCESS_DENIED) and 161 (ERROR_BAD_PATHNAME) when using
ntpath.realpath().
: Rename the  parameter of the pure Python implementation of
datetime.date.strftime() to .
: All built-in functions now accept arguments of any type instead
of just  and  for boolean parameters.

================================================================================

# Changelog - Library (Part 3)

: Also escape s in the http.server
BaseHTTPRequestHandler.log_message so that it is technically possible to
parse the line and reconstruct what the original data was.  Without this a
xHH is ambiguous as to if it is a hex replacement we put in or the
characters râxâ came through in the original request line.

: Add frozen_default parameter to
typing.dataclass_transform().

: Fix asyncio.Server.wait_closed() to actually do what the
docs promise â wait for all existing connections to complete, after
closing the server.

: Fix bug when calling trace.CoverageResults with valid infile.

: Fix a bug in handling class cleanups in
unittest.TestCase.  Now addClassCleanup() uses separate lists
for different  subclasses, and doClassCleanups() only
cleans up the particular class.

: Fix  in Lib/importlib/_bootstrap_external.py
while calling _imp.source_hash().

: Fix  to not share event loop and signal wakeupfd
in forked processes. Patch by Kumar Aditya.

: Release the GIL when calling termios APIs to avoid blocking
threads.

: Use final status of an enum to determine lookup or creation
branch of functional API.

================================================================================

# Changelog - Library (Part 4)

: Add loop_factory parameter to asyncio.run() to allow
specifying a custom event loop factory. Patch by Kumar Aditya.

: Fix ast.increment_lineno() to also cover
ast.TypeIgnore when changing line numbers.

: Check the number of arguments in substitution in user generics
containing a TypeVarTuple and one or more
.

: Fix substitution of  followed by
TypeVarTuple in generic aliases.

: Fix substitution of TypeVarTuple and
 together in user generics.

: Remove _use_broken_old_ctypes_structure_semantics_ old
untested and undocumented hack from .

: Fix IndexError when initializing the config variables on
Windows if HAVE_DYNAMIC_LOADING is not set.

: Fix double-free bug in Argument Clinic str_converter by
extracting memory clean up to a new post_parsing section.

: Fix refcount error when arguments are packed to tuple in
Argument Clinic.

: pathlib.PurePath.relative_to() now treats naked Windows
drive paths as relative. This brings its behaviour in line with other
parts of pathlib.

: The implementation of the typing module is now more resilient to
reference leaks in binary extension modules.

================================================================================

# Changelog - Library (Part 5)

Previously, a reference leak in a typed C API-based extension module could
leak internals of the typing module, which could in turn introduce leaks
in essentially any other package with typed function signatures. Although
the typing package is not the original source of the problem, such
non-local dependences exacerbate debugging of large-scale projects, and
the implementation was therefore changed to reduce harm by providing
better isolation.

: Fix infinite loop in unittest when a self-referencing chained
exception is raised

: asyncio.get_event_loop() and many other 
functions like asyncio.ensure_future(), asyncio.shield() or
asyncio.gather(), and also the
get_event_loop() method of
asyncio.BaseDefaultEventLoopPolicy now raise a
RuntimeError if called when there is no running event loop and the
current event loop was not set. Previously they implicitly created and set
a new current event loop. DeprecationWarning is no longer emitted
if there is no running event loop but the current event loop was set.

: On uname_result, restored expectation that  and
 would include all six properties including .

================================================================================

# Changelog - Library (Part 6)

: Provide informative error messages in struct.pack() when
its integral arguments are not in range.

: zipfile.Path is now pickleable if its initialization
parameters were pickleable (e.g. for file system paths).

: Created packages from zipfile and test_zipfile modules,
separating zipfile.Path functionality.

: Fix is_private properties in the
 module. Previously non-private networks (0.0.0.0/0) would
return  from this method; now they correctly return .

: Add an OP_ENABLE_KTLS option for enabling the use
of the kernel TLS (kTLS). Patch by Illia Volochii.

: To avoid apparent memory leaks when
asyncio.open_connection() raises, break reference cycles generated
by local exception and future instances (which has exception instance as
its member var). Patch by Dong Uk, Kang.

: TarFile.next() now returns  when called on an
empty tarfile.

: Document the optional  parameter of
WeakMethod. Patch by GÃ©ry Ogam.

: Ignore WinError 53 (ERROR_BAD_NETPATH), 65
(ERROR_NETWORK_ACCESS_DENIED) and 161 (ERROR_BAD_PATHNAME) when using
ntpath.realpath().

: Rename the  parameter of the pure Python implementation of
datetime.date.strftime() to .

================================================================================

# Changelog - Library (Part 7)

: All built-in functions now accept arguments of any type instead
of just  and  for boolean parameters.

================================================================================

# Changelog - Documentation

List:
: Use sphinxext-opengraph to generate OpenGraph
metadata.
: Reworded docstring of the default __contains__ to clarify
that it returns a .
: Improved the description of what a resource is in
importlib.resources docs.
: Document that calling variadic functions with ctypes requires
special care on macOS/arm64 (and possibly other platforms).
: Restructured the documentation for the  family of functions, and improved the docs for
os.waitid() with more explanation of the possible argument
constants.

: Use sphinxext-opengraph to generate OpenGraph
metadata.

: Reworded docstring of the default __contains__ to clarify
that it returns a .

: Improved the description of what a resource is in
importlib.resources docs.

: Document that calling variadic functions with ctypes requires
special care on macOS/arm64 (and possibly other platforms).

: Restructured the documentation for the  family of functions, and improved the docs for
os.waitid() with more explanation of the possible argument
constants.

================================================================================

# Changelog - Tests

List:
: Skip test_normalization() of test_unicodedata if it fails to
download NormalizationTest.txt file from pythontest.net. Patch by Victor
Stinner.
: Correct test_marsh on (32 bit) x86: test_deterministic sets was
failing.
: Weâve implemented multi-phase init (PEP 489/630/687) for the
internal (for testing) _xxsubinterpreters module.
: Optional big memory tests in test_sqlite3 now catch the
correct sqlite.DataError exception type in case of too large
strings and/or blobs passed.
: Cover the Unicode C API with tests.
: Add functional test for Argument Clinic.

: Skip test_normalization() of test_unicodedata if it fails to
download NormalizationTest.txt file from pythontest.net. Patch by Victor
Stinner.

: Correct test_marsh on (32 bit) x86: test_deterministic sets was
failing.

: Weâve implemented multi-phase init (PEP 489/630/687) for the
internal (for testing) _xxsubinterpreters module.

: Optional big memory tests in test_sqlite3 now catch the
correct sqlite.DataError exception type in case of too large
strings and/or blobs passed.

: Cover the Unicode C API with tests.

: Add functional test for Argument Clinic.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix -Wimplicit-int, -Wstrict-prototypes, and
-Wimplicit-function-declaration compiler warnings in
 checks.
: Fix a compilation issue with GCC 12 on macOS.
: Add a COMPILEALL_OPTS variable in Makefile to override
compileall options (default: ) in  . Also
merged the compileall commands into a single command building .pyc
files for the all optimization levels (0, 1, 2) at once. Patch by Victor
Stinner.
: Fix a possible fd leak in Programs/_freeze_module.c
introduced in Python 3.11.
: Always define  labels in Python/ceval.c, even if
USE_COMPUTED_GOTOS is disabled.  This allows breakpoints to be set at
those labels in (for instance) .

: Fix -Wimplicit-int, -Wstrict-prototypes, and
-Wimplicit-function-declaration compiler warnings in
 checks.

: Fix a compilation issue with GCC 12 on macOS.

: Add a COMPILEALL_OPTS variable in Makefile to override
compileall options (default: ) in  . Also
merged the compileall commands into a single command building .pyc
files for the all optimization levels (0, 1, 2) at once. Patch by Victor
Stinner.

: Fix a possible fd leak in Programs/_freeze_module.c
introduced in Python 3.11.

================================================================================

# Changelog - Build (Part 2)

: Always define  labels in Python/ceval.c, even if
USE_COMPUTED_GOTOS is disabled.  This allows breakpoints to be set at
those labels in (for instance) .

================================================================================

# Changelog - Windows

List:
: Use faster initialization functions to detect install location
for Windows Store package
: Fix initialization of sys.version and  on
Windows
: Fix handling in Python Launcher for Windows when  does not
include a file extension.
: Fix a memory leak in
multiprocessing.shared_memory.SharedMemory on Windows.

: Use faster initialization functions to detect install location
for Windows Store package

: Fix initialization of sys.version and  on
Windows

: Fix handling in Python Launcher for Windows when  does not
include a file extension.

: Fix a memory leak in
multiprocessing.shared_memory.SharedMemory on Windows.

================================================================================

# Changelog - macOS

List:
: On macOS   9</path/to/script.py failed for
any script longer than a couple of bytes.
: Fix Mac/Extras.install.py file filter bug.

: On macOS   9</path/to/script.py failed for
any script longer than a couple of bytes.

: Fix Mac/Extras.install.py file filter bug.

================================================================================

# Changelog - Tools/Demos

List:
: Argument Clinic varargs bugfixes

Fix out-of-bounds error in _PyArg_UnpackKeywordsWithVararg().
Fix incorrect check which allowed more than one varargs in clinic.py.
Fix miscalculation of  in generated code.
Do not generate  when there is a vararg argument and no optional argument.

: Argument Clinic varargs bugfixes

List:
Fix out-of-bounds error in _PyArg_UnpackKeywordsWithVararg().
Fix incorrect check which allowed more than one varargs in clinic.py.
Fix miscalculation of  in generated code.
Do not generate  when there is a vararg argument and no optional argument.

Fix out-of-bounds error in _PyArg_UnpackKeywordsWithVararg().

Fix incorrect check which allowed more than one varargs in clinic.py.

Fix miscalculation of  in generated code.

Do not generate  when there is a vararg argument and no optional argument.

================================================================================

# Changelog - C API

List:
:  constants were marked as part of Limited API of
Python 3.11+. These were available in 3.11.0 with
Py_LIMITED_API defined for 3.11, and are necessary to use the
buffer API.
: Fix PyUnicode_DecodeUTF8Stateful() for ASCII-only data:
 was not set.
: The structmember.h header is deprecated. Its non-deprecated
contents are now available just by including , with a 
prefix added if it was missing. (Deprecated contents are
, , and no-op flags.) Patch by Petr
Viktorin, based on earlier work by Alexander Belopolsky and Matthias
Braun.

:  constants were marked as part of Limited API of
Python 3.11+. These were available in 3.11.0 with
Py_LIMITED_API defined for 3.11, and are necessary to use the
buffer API.

: Fix PyUnicode_DecodeUTF8Stateful() for ASCII-only data:
 was not set.

: The structmember.h header is deprecated. Its non-deprecated
contents are now available just by including , with a 
prefix added if it was missing. (Deprecated contents are
, , and no-op flags.) Patch by Petr
Viktorin, based on earlier work by Alexander Belopolsky and Matthias
Braun.

================================================================================

# Changelog - Security (Part 1)

List:
: The IDNA codec decoder used on DNS hostnames by  or
 related name resolution functions no longer involves a
quadratic algorithm. This prevents a potential CPU denial of service if an
out-of-spec excessive length hostname involving bidirectional characters
were decoded. Some protocols such as  http 
redirects potentially allow for an attacker to supply such a name.
Individual labels within an IDNA encoded DNS name will now raise an error
early during IDNA decoding if they are longer than 1024 unicode characters
given that each decoded DNS label must be 63 or fewer characters and the
entire decoded DNS name is limited to 255. Only an application presenting
a hostname or label consisting primarily of  section 3.1
âNothingâ characters to be removed would run into of this new limit. See
also  section 6 and .

: Update bundled libexpat to 2.5.0

================================================================================

# Changelog - Security (Part 2)

: The IDNA codec decoder used on DNS hostnames by  or
 related name resolution functions no longer involves a
quadratic algorithm. This prevents a potential CPU denial of service if an
out-of-spec excessive length hostname involving bidirectional characters
were decoded. Some protocols such as  http 
redirects potentially allow for an attacker to supply such a name.

Individual labels within an IDNA encoded DNS name will now raise an error
early during IDNA decoding if they are longer than 1024 unicode characters
given that each decoded DNS label must be 63 or fewer characters and the
entire decoded DNS name is limited to 255. Only an application presenting
a hostname or label consisting primarily of  section 3.1
âNothingâ characters to be removed would run into of this new limit. See
also  section 6 and .

: Update bundled libexpat to 2.5.0

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: The docs clearly say that PyImport_Inittab,
PyImport_AppendInittab(), and PyImport_ExtendInittab()
should not be used after Py_Initialize() has been called. We now
enforce this for the two functions.  Additionally, the runtime now uses an
internal copy of PyImport_Inittab, to guard against modification.
: Fix an issue that could potentially cause incorrect error
handling for some bytecode instructions.
: The compiler now removes all unused constants from code objects
(except the first one, which may be a docstring).
: Fix an issue that prevented PyThreadState and
PyInterpreterState memory from being freed properly.
: The 18 global C variables holding the state of the allocators
have been moved to _PyRuntimeState.  This is a strictly internal
change with no change in behavior.
: Fix failure in  with unhashable
exceptions.
: Fix calculation of sys._base_executable when inside a
POSIX virtual environment using copies of the python binary when the base
installation does not provide the executable name used by the venv.
Calculation will fall back to alternative names (âpython<MAJOR>â,
âpython<MAJOR>.<MINOR>â).
: Update faulthandler to emit an error message with the
proper unexpected signal number. Patch by Donghee Na.
: Fix location of SyntaxError for a  block
with both  and .
: Merge the adaptive opcode logic into each instructionâs
unquickened variant, and merge the logic in EXTENDED_ARG_QUICK into
EXTENDED_ARG. With these changes, the quickening that happens at
code object creation is now only responsible for initializing warmup
counters and inserting superinstructions.
: Fix the error reporting positions of specialized traceback
anchors when the source line contains Unicode characters.
: Improve the error suggestion for  exceptions for
instances. Now if a  is raised in a method and the
instance has an attribute thatâs exactly equal to the name in the
exception, the suggestion will include self.<NAME> instead of the
closest match in the method scope. Patch by Pablo Galindo
: Octal escapes with value larger than  (ex: ),
deprecated in Python 3.11, now produce a SyntaxWarning, instead of
DeprecationWarning. In a future Python version they will be
eventually a SyntaxError. Patch by Victor Stinner.
: A backslash-character pair that is not a valid escape sequence
now generates a SyntaxWarning, instead of
DeprecationWarning.  For example, re.compile("\d+\.\d+") now
emits a SyntaxWarning ( is an invalid escape sequence), use
raw strings for regular expression: re.compile(r"\d+\.\d+"). In a
future Python version, SyntaxError will eventually be raised,
instead of SyntaxWarning. Patch by Victor Stinner.
: Handle StopIteration and StopAsyncIteration raised in generator
or coroutines in the bytecode, rather than in wrapping C code.
: Improve the SyntaxError error message when the user types
    instead of    . Patch by Pablo Galindo
: Fix subscription of type aliases containing bare generic types
or types like : for example  
and tuple[TypeVar, , where  is a generic type, and 
is a type variable.
: Lower the recursion depth for marshal on WASI to support
(in-development) wasmtime 2.0.
: Fix multiple crashes in debug mode when  subclasses are
used instead of  itself.
: Use complete source locations to simplify detection of
__future__ imports which are not at the beginning of the file. Also
corrects the offset in the exception raised in one case, which was off by
one and impeded highlighting.
: Add specialization of  for generators. Saves
multiple layers of dispatch and checking to get from the
 instruction in the caller to the  in
the generator.
: Fix source locations of  sub-patterns.
: Added the methods PyObject_Vectorcall() and
PyObject_VectorcallMethod() to the Limited API
along with the auxiliary macro constant
PY_VECTORCALL_ARGUMENTS_OFFSET.
The availability of these functions enables more efficient 
vector calls from binary extension modules that avoid argument
boxing/unboxing overheads.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix an issue where member descriptors (such as those for
) could behave incorrectly or crash instead of
raising a  when accessed via an instance of an invalid
type.
: Rather than changing , the
interpreter will now display a RuntimeWarning and assign
 to any fast locals that are left unbound after jumps or
 statements executed while tracing.
: When calling into Python code from C code, through
PyEval_EvalFrameEx() or a related C-API function, a shim frame in
inserted into the call stack. This occurs in the
_PyEval_EvalFrameDefault() function. The extra frame should be
invisible to all Python and most C extensions, but out-of-process
profilers and debuggers need to be aware of it. These shim frames can be
detected by checking frame->owner  FRAME_OWNED_BY_CSTACK.
Extensions implementing their own interpreters using PEP 523 need to be
aware of this shim frame and the changes to the semantics of
RETURN_VALUE, YIELD_VALUE, and
RETURN_GENERATOR, which now clear the frame.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix detection of MAC addresses for  on certain OSs.
Patch by Chaim Sanders
: Quicken all code objects, and specialize adaptive bytecode
instructions more aggressively.
: Print exception class name instead of its string representation
when raising errors from  calls.
: ImportError raised from failed   
 now include suggestions for the value of  based on the
available names in . Patch by Pablo Galindo
: The  now leaves the iterator on the stack on
termination of the loop. This is to assist specialization of loops for
generators.
: Add _pylong.py module.  It includes asymptotically faster
algorithms that can be used for operations on integers with many digits.
It is used by longobject.c to speed up some operations.
: Expose  and some of the
ETHERTYPE_* constants in .
Patch by Noam Cohen.
: Allow  to locate source for frozen modules in the
standard library.

: The docs clearly say that PyImport_Inittab,
PyImport_AppendInittab(), and PyImport_ExtendInittab()
should not be used after Py_Initialize() has been called. We now
enforce this for the two functions.  Additionally, the runtime now uses an
internal copy of PyImport_Inittab, to guard against modification.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix an issue that could potentially cause incorrect error
handling for some bytecode instructions.

: The compiler now removes all unused constants from code objects
(except the first one, which may be a docstring).

: Fix an issue that prevented PyThreadState and
PyInterpreterState memory from being freed properly.

: The 18 global C variables holding the state of the allocators
have been moved to _PyRuntimeState.  This is a strictly internal
change with no change in behavior.

: Fix failure in  with unhashable
exceptions.

: Fix calculation of sys._base_executable when inside a
POSIX virtual environment using copies of the python binary when the base
installation does not provide the executable name used by the venv.
Calculation will fall back to alternative names (âpython<MAJOR>â,
âpython<MAJOR>.<MINOR>â).

: Update faulthandler to emit an error message with the
proper unexpected signal number. Patch by Donghee Na.

: Fix location of SyntaxError for a  block
with both  and .

================================================================================

# Changelog - Core and Builtins (Part 5)

: Merge the adaptive opcode logic into each instructionâs
unquickened variant, and merge the logic in EXTENDED_ARG_QUICK into
EXTENDED_ARG. With these changes, the quickening that happens at
code object creation is now only responsible for initializing warmup
counters and inserting superinstructions.

: Fix the error reporting positions of specialized traceback
anchors when the source line contains Unicode characters.

: Improve the error suggestion for  exceptions for
instances. Now if a  is raised in a method and the
instance has an attribute thatâs exactly equal to the name in the
exception, the suggestion will include self.<NAME> instead of the
closest match in the method scope. Patch by Pablo Galindo

: Octal escapes with value larger than  (ex: ),
deprecated in Python 3.11, now produce a SyntaxWarning, instead of
DeprecationWarning. In a future Python version they will be
eventually a SyntaxError. Patch by Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 6)

: A backslash-character pair that is not a valid escape sequence
now generates a SyntaxWarning, instead of
DeprecationWarning.  For example, re.compile("\d+\.\d+") now
emits a SyntaxWarning ( is an invalid escape sequence), use
raw strings for regular expression: re.compile(r"\d+\.\d+"). In a
future Python version, SyntaxError will eventually be raised,
instead of SyntaxWarning. Patch by Victor Stinner.

: Handle StopIteration and StopAsyncIteration raised in generator
or coroutines in the bytecode, rather than in wrapping C code.

: Improve the SyntaxError error message when the user types
    instead of    . Patch by Pablo Galindo

: Fix subscription of type aliases containing bare generic types
or types like : for example  
and tuple[TypeVar, , where  is a generic type, and 
is a type variable.

: Lower the recursion depth for marshal on WASI to support
(in-development) wasmtime 2.0.

: Fix multiple crashes in debug mode when  subclasses are
used instead of  itself.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Use complete source locations to simplify detection of
__future__ imports which are not at the beginning of the file. Also
corrects the offset in the exception raised in one case, which was off by
one and impeded highlighting.

: Add specialization of  for generators. Saves
multiple layers of dispatch and checking to get from the
 instruction in the caller to the  in
the generator.

: Fix source locations of  sub-patterns.

: Added the methods PyObject_Vectorcall() and
PyObject_VectorcallMethod() to the Limited API
along with the auxiliary macro constant
PY_VECTORCALL_ARGUMENTS_OFFSET.

The availability of these functions enables more efficient 
vector calls from binary extension modules that avoid argument
boxing/unboxing overheads.

: Fix an issue where member descriptors (such as those for
) could behave incorrectly or crash instead of
raising a  when accessed via an instance of an invalid
type.

: Rather than changing , the
interpreter will now display a RuntimeWarning and assign
 to any fast locals that are left unbound after jumps or
 statements executed while tracing.

================================================================================

# Changelog - Core and Builtins (Part 8)

: When calling into Python code from C code, through
PyEval_EvalFrameEx() or a related C-API function, a shim frame in
inserted into the call stack. This occurs in the
_PyEval_EvalFrameDefault() function. The extra frame should be
invisible to all Python and most C extensions, but out-of-process
profilers and debuggers need to be aware of it. These shim frames can be
detected by checking frame->owner  FRAME_OWNED_BY_CSTACK.

Extensions implementing their own interpreters using PEP 523 need to be
aware of this shim frame and the changes to the semantics of
RETURN_VALUE, YIELD_VALUE, and
RETURN_GENERATOR, which now clear the frame.

: Fix detection of MAC addresses for  on certain OSs.
Patch by Chaim Sanders

: Quicken all code objects, and specialize adaptive bytecode
instructions more aggressively.

: Print exception class name instead of its string representation
when raising errors from  calls.

: ImportError raised from failed   
 now include suggestions for the value of  based on the
available names in . Patch by Pablo Galindo

: The  now leaves the iterator on the stack on
termination of the loop. This is to assist specialization of loops for
generators.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Add _pylong.py module.  It includes asymptotically faster
algorithms that can be used for operations on integers with many digits.
It is used by longobject.c to speed up some operations.

: Expose  and some of the
ETHERTYPE_* constants in .
Patch by Noam Cohen.

: Allow  to locate source for frozen modules in the
standard library.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix bug in urllib.parse.urlparse() that causes URL schemes
that begin with a digit, a plus sign, or a minus sign to be parsed
incorrectly.
: Deprecate asyncio.AbstractChildWatcher to be removed in
Python 3.14. Patch by Kumar Aditya.
: Improve performance of secrets.token_hex().
: Fixed bug where inspect.signature() reported incorrect
arguments for decorated methods.
: Fix SystemError in  when exception was not set
during __initsubclass__.
: Remove older version of
_SSLProtocolTransport.get_write_buffer_limits in
asyncio.sslproto
: fix negative numbers failing in verify()
: Fix statistics.NormalDist pickle with  and 
protocols.
: enum.auto() is now correctly activated when combined with
other assignment values.  E.g.      will now
evaluate as   .
: Update the bundled copy of pip to version 22.3.1.
: Remove the  package. It was deprecated in Python
3.10 by  âDeprecate distutils moduleâ. For projects still using
 and cannot be updated to something else, the setuptools
project can be installed: it still provides . Patch by Victor
Stinner.
: Now  is consistent with  in raising
ValueError when executing methods over closed buffers.
: Clean up refleak on failed module initialisation in

================================================================================

# Changelog - Library (Part 2)

: Clean up refleaks on failed module initialisation in

================================================================================

# Changelog - Library (Part 3)

: Clean up refleak on failed module initialisation in .
: Fix memory leak in math.dist() when both points donât have
the same dimension. Patch by Kumar Aditya.
: Use the frame bound builtins when offering a name suggestion in
 to prevent crashing when __builtins__ is not a dict.
: In importlib._bootstrap, enhance namespace package repr
to   (namespace)  .
: Fix _SelectorDatagramTransport to inherit from
DatagramTransport in . Patch by Kumar
Aditya.
: Fix argument typechecks in _overlapped.WSAConnect() and
_overlapped.Overlapped.WSASendTo() functions.
: Prevent crashing in  when retrieving the
byte-offset for some source files that contain certain unicode characters.
: Fix internal error in the  module which in very rare
circumstances prevented compilation of a regular expression containing a
conditional expression without the
âelseâ branch.
: Fix asyncio.StreamWriter.drain() to call
protocol.connection_lost callback only once on Windows.
: Add a mutex to unittest.mock.NonCallableMock to protect
concurrent access to mock attributes.
: The array.array class now supports subscripting, making
it a generic type.
: Improved  message for undefined abstract
methods of a  instance. The names of the missing methods
are surrounded by single-quotes to highlight them.
: Allow  to be a valid field name for frozen
dataclasses.
: Make sure patch.dict() can be applied on async functions.
: Remove modules  and , which were
deprecated by .
: Fix handling of  path-like objects in os.ismount().
: : Remove the FTP_TLS.ssl_version class
attribute: use the  parameter instead. Patch by Victor Stinner
: Remove the  and  parameters from the
, ,  and  modules,
and the ,  and check_hostname parameters from the
http.client module, all deprecated since Python 3.6. Use the
 parameter (ssl_context in ) instead. Patch by
Victor Stinner.
: Add the autocommit attribute to
sqlite3.Connection and the autocommit parameter to
sqlite3.connect() to control -compliant transaction
handling. Patch by Erlend E.
Aasland.
: Fixed a race condition that could cause
sysconfig.get_config_var() to incorrectly return  in
multi-threaded programs.
: Fix an error when using a method of objects mocked with
unittest.mock.create_autospec() after it was sealed with
unittest.mock.seal() function.
: shutil.copytree() now applies the
ignore_dangling_symlinks argument recursively.
: Add walk_up argument in pathlib.PurePath.relative_to().
: Fix IndexError in argparse.ArgumentParser when a
store_true action is given an explicit argument.

================================================================================

# Changelog - Library (Part 4)

: Fix bug in urllib.parse.urlparse() that causes URL schemes
that begin with a digit, a plus sign, or a minus sign to be parsed
incorrectly.

: Deprecate asyncio.AbstractChildWatcher to be removed in
Python 3.14. Patch by Kumar Aditya.

: Improve performance of secrets.token_hex().

: Fixed bug where inspect.signature() reported incorrect
arguments for decorated methods.

: Fix SystemError in  when exception was not set
during __initsubclass__.

: Remove older version of
_SSLProtocolTransport.get_write_buffer_limits in
asyncio.sslproto

: fix negative numbers failing in verify()

: Fix statistics.NormalDist pickle with  and 
protocols.

: enum.auto() is now correctly activated when combined with
other assignment values.  E.g.      will now
evaluate as   .

: Update the bundled copy of pip to version 22.3.1.

: Remove the  package. It was deprecated in Python
3.10 by  âDeprecate distutils moduleâ. For projects still using
 and cannot be updated to something else, the setuptools
project can be installed: it still provides . Patch by Victor
Stinner.

: Now  is consistent with  in raising
ValueError when executing methods over closed buffers.

: Clean up refleak on failed module initialisation in

================================================================================

# Changelog - Library (Part 5)

: Clean up refleaks on failed module initialisation in

: Clean up refleak on failed module initialisation in .

: Fix memory leak in math.dist() when both points donât have
the same dimension. Patch by Kumar Aditya.

: Use the frame bound builtins when offering a name suggestion in
 to prevent crashing when __builtins__ is not a dict.

: In importlib._bootstrap, enhance namespace package repr
to   (namespace)  .

: Fix _SelectorDatagramTransport to inherit from
DatagramTransport in . Patch by Kumar
Aditya.

: Fix argument typechecks in _overlapped.WSAConnect() and
_overlapped.Overlapped.WSASendTo() functions.

: Prevent crashing in  when retrieving the
byte-offset for some source files that contain certain unicode characters.

: Fix internal error in the  module which in very rare
circumstances prevented compilation of a regular expression containing a
conditional expression without the
âelseâ branch.

: Fix asyncio.StreamWriter.drain() to call
protocol.connection_lost callback only once on Windows.

: Add a mutex to unittest.mock.NonCallableMock to protect
concurrent access to mock attributes.

: The array.array class now supports subscripting, making
it a generic type.

================================================================================

# Changelog - Library (Part 6)

: Improved  message for undefined abstract
methods of a  instance. The names of the missing methods
are surrounded by single-quotes to highlight them.

: Allow  to be a valid field name for frozen
dataclasses.

: Make sure patch.dict() can be applied on async functions.

: Remove modules  and , which were
deprecated by .

: Fix handling of  path-like objects in os.ismount().

: : Remove the FTP_TLS.ssl_version class
attribute: use the  parameter instead. Patch by Victor Stinner

: Remove the  and  parameters from the
, ,  and  modules,
and the ,  and check_hostname parameters from the
http.client module, all deprecated since Python 3.6. Use the
 parameter (ssl_context in ) instead. Patch by
Victor Stinner.

: Add the autocommit attribute to
sqlite3.Connection and the autocommit parameter to
sqlite3.connect() to control -compliant transaction
handling. Patch by Erlend E.
Aasland.

: Fixed a race condition that could cause
sysconfig.get_config_var() to incorrectly return  in
multi-threaded programs.

: Fix an error when using a method of objects mocked with
unittest.mock.create_autospec() after it was sealed with
unittest.mock.seal() function.

================================================================================

# Changelog - Library (Part 7)

: shutil.copytree() now applies the
ignore_dangling_symlinks argument recursively.

: Add walk_up argument in pathlib.PurePath.relative_to().

: Fix IndexError in argparse.ArgumentParser when a
store_true action is given an explicit argument.

================================================================================

# Changelog - Documentation

List:
: Changes wording of docstring for pathlib.Path.iterdir().
: Update uname docs to clarify the special nature of the platform
attribute and to indicate when it became late-bound.

: Changes wording of docstring for pathlib.Path.iterdir().

: Update uname docs to clarify the special nature of the platform
attribute and to indicate when it became late-bound.

================================================================================

# Changelog - Tests (Part 1)

List:
: The Python test suite now fails with exit code 4 if no tests
ran. It should help detecting typos in test names and test methods.
: Fix a bug in the  tests where a test relying on
CPython-specific implementation details was not decorated with
@cpython_only and was not skipped on other implementations.
: Add tests for star-unpacking with PEP 646, and some other
miscellaneous PEP 646 tests.
: Added explicit coverage of Py_Initialize (and hence
Py_InitializeEx) back to the embedding tests (all other embedding
tests migrated to Py_InitializeFromConfig in Python 3.11)
: Some C API tests were moved into the new Lib/test/test_capi/
directory.

: The Python test suite now fails with exit code 4 if no tests
ran. It should help detecting typos in test names and test methods.

: Fix a bug in the  tests where a test relying on
CPython-specific implementation details was not decorated with
@cpython_only and was not skipped on other implementations.

: Add tests for star-unpacking with PEP 646, and some other
miscellaneous PEP 646 tests.

================================================================================

# Changelog - Tests (Part 2)

: Added explicit coverage of Py_Initialize (and hence
Py_InitializeEx) back to the embedding tests (all other embedding
tests migrated to Py_InitializeFromConfig in Python 3.11)

: Some C API tests were moved into the new Lib/test/test_capi/
directory.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix -Wimplicit-int compiler warning in 
check for PTHREAD_SCOPE_SYSTEM.
: Fix build with PYTHON_FOR_REGEN=python3.8.
: Specify the full path to the source location for 
 (needed for cross-builds).
: Drop unused build dependency on .
: Use python3.11, if available, for regeneration and freezing.
: Add new tooling, in Tools/cases_generator, to generate the
interpreter switch statement from a list of opcode definitions. This only
affects adding, modifying or removing instruction definitions. The
instruction definitions now live in Python/bytecodes.c, in the form of
a custom DSL (under development).
The tooling reads this file and writes Python/generated_cases.c.h,
which is then included by Python/ceval.c to provide most of the cases
of the main interpreter switch.
: Remove PCbuild/lib.pyproj: itâs not used for anything, is only a
minor convenience for Visual Studio users (who probably mostly donât even
know about it), and it takes a lot of maintenance effort to keep updated.
: Fix  regen-test-levenshtein for out-of-tree builds.
: Donât use vendored  headers if
--with-system-libmpdec is passed to . Donât
use vendored  headers if --with-system-expat is
passed to .

================================================================================

# Changelog - Build (Part 2)

: Fix -Wimplicit-int compiler warning in 
check for PTHREAD_SCOPE_SYSTEM.

: Fix build with PYTHON_FOR_REGEN=python3.8.

: Specify the full path to the source location for 
 (needed for cross-builds).

: Drop unused build dependency on .

: Use python3.11, if available, for regeneration and freezing.

: Add new tooling, in Tools/cases_generator, to generate the
interpreter switch statement from a list of opcode definitions. This only
affects adding, modifying or removing instruction definitions. The
instruction definitions now live in Python/bytecodes.c, in the form of
a custom DSL (under development).
The tooling reads this file and writes Python/generated_cases.c.h,
which is then included by Python/ceval.c to provide most of the cases
of the main interpreter switch.

: Remove PCbuild/lib.pyproj: itâs not used for anything, is only a
minor convenience for Visual Studio users (who probably mostly donât even
know about it), and it takes a lot of maintenance effort to keep updated.

: Fix  regen-test-levenshtein for out-of-tree builds.

: Donât use vendored  headers if
--with-system-libmpdec is passed to . Donât
use vendored  headers if --with-system-expat is
passed to .

================================================================================

# Changelog - Windows

List:
: Update Windows builds to zlib v1.2.13.  v1.2.12 has
CVE 2022-37434, but the vulnerable inflateGetHeader API is not used
by Python.
: Assumes that a missing  directory means that standard
extension modules are in the executableâs directory.
: Update  launcher to install 3.11 by default and
3.12 on request.
: Fix the Python Launcher for Windows ignoring unrecognized shebang lines
instead of treating them as local paths
: Update Windows installer to use SQLite 3.39.4.

: Update Windows builds to zlib v1.2.13.  v1.2.12 has
CVE 2022-37434, but the vulnerable inflateGetHeader API is not used
by Python.

: Assumes that a missing  directory means that standard
extension modules are in the executableâs directory.

: Update  launcher to install 3.11 by default and
3.12 on request.

: Fix the Python Launcher for Windows ignoring unrecognized shebang lines
instead of treating them as local paths

: Update Windows installer to use SQLite 3.39.4.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to SQLite 3.39.4.

: Update macOS installer to SQLite 3.39.4.

================================================================================

# Changelog - C API (Part 1)

List:
: The ,  and
Py_XSETREF macros now only evaluate their argument once. If the
argument has side effects, these side effects are no longer duplicated.
Patch by Victor Stinner.
: Fix use-after-free in Py_SetPythonHome(NULL),
Py_SetProgramName(NULL) and _Py_SetProgramFullPath(NULL) function
calls. Issue reported by Benedikt Reinartz. Patch by Victor Stinner.
: Add getbufferproc and releasebufferproc to the stable
API.
: Some configurable capabilities of sub-interpreters have changed.
They always allow subprocesses (subprocess) now, whereas before
subprocesses could be optionally disallowed for a sub-interpreter. Instead
 can now be disallowed. Disallowing daemon threads is now
supported.  Disallowing all threads is still allowed, but is never done by
default. Note that the optional restrictions are only available through
_Py_NewInterpreterFromConfig(), which isnât a public API. They do not
affect the main interpreter, nor Py_NewInterpreter().
: A _PyInterpreterConfig has been added and
_Py_NewInterpreter() has been renamed to
_Py_NewInterpreterFromConfig().  The âisolated_subinterpretersâ
argument is now a granular config that captures the previous behavior.
Note that this is all âprivateâ API.
: Py_InitializeEx now correctly calls PyConfig_Clear after
initializing the interpreter (the omission didnât cause a memory leak only
because none of the dynamically allocated config fields are populated by
the wrapper function)
: Add PyFrame_GetVar() and PyFrame_GetVarString()
functions to get a frame variable by its name. Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 2)

: The ,  and
Py_XSETREF macros now only evaluate their argument once. If the
argument has side effects, these side effects are no longer duplicated.
Patch by Victor Stinner.

: Fix use-after-free in Py_SetPythonHome(NULL),
Py_SetProgramName(NULL) and _Py_SetProgramFullPath(NULL) function
calls. Issue reported by Benedikt Reinartz. Patch by Victor Stinner.

: Add getbufferproc and releasebufferproc to the stable
API.

: Some configurable capabilities of sub-interpreters have changed.
They always allow subprocesses (subprocess) now, whereas before
subprocesses could be optionally disallowed for a sub-interpreter. Instead
 can now be disallowed. Disallowing daemon threads is now
supported.  Disallowing all threads is still allowed, but is never done by
default. Note that the optional restrictions are only available through
_Py_NewInterpreterFromConfig(), which isnât a public API. They do not
affect the main interpreter, nor Py_NewInterpreter().

================================================================================

# Changelog - C API (Part 3)

: A _PyInterpreterConfig has been added and
_Py_NewInterpreter() has been renamed to
_Py_NewInterpreterFromConfig().  The âisolated_subinterpretersâ
argument is now a granular config that captures the previous behavior.
Note that this is all âprivateâ API.

: Py_InitializeEx now correctly calls PyConfig_Clear after
initializing the interpreter (the omission didnât cause a memory leak only
because none of the dynamically allocated config fields are populated by
the wrapper function)

: Add PyFrame_GetVar() and PyFrame_GetVarString()
functions to get a frame variable by its name. Patch by Victor Stinner.

================================================================================

# Changelog - Security (Part 1)

List:
: Fix multiplying a list by an integer (  ): detect
the integer overflow when the new allocated length is close to the maximum
size. Issue reported by Jordan Limor.  Patch by Victor Stinner.
: On Linux the multiprocessing module returns to using
filesystem backed unix domain sockets for communication with the
forkserver process instead of the Linux abstract socket namespace.  Only
code that chooses to use the âforkserverâ start method is affected.
Abstract sockets have no permissions and could allow any user on the
system in the same network namespace (often
the whole system) to inject code into the multiprocessing forkserver
process. This was a potential privilege escalation. Filesystem based
socket permissions restrict this to the forkserver process user as was
the default in Python 3.8 and earlier.
This prevents Linux CVE 2022-42919.

================================================================================

# Changelog - Security (Part 2)

: http.server: Fix an open redirection vulnerability in the
HTTP server when an URI path starts with .  Vulnerability
discovered, and initial fix proposed, by Hamza Avvan.
: LWPCookieJar and MozillaCookieJar create files with file mode
600 instead of 644 (Microsoft Windows is not affected)
: Fix memoryview use after free when accessing the backing
buffer in certain cases.
: The deprecated mailcap module now refuses to inject unsafe text
(filenames, MIME types, parameters) into shell commands. Instead of using
such text, it will warn and act as if a match was not found (or for test
commands, as if the test failed).

: Fix multiplying a list by an integer (  ): detect
the integer overflow when the new allocated length is close to the maximum
size. Issue reported by Jordan Limor.  Patch by Victor Stinner.

: On Linux the multiprocessing module returns to using
filesystem backed unix domain sockets for communication with the
forkserver process instead of the Linux abstract socket namespace.  Only
code that chooses to use the âforkserverâ start method is affected.

================================================================================

# Changelog - Security (Part 3)

Abstract sockets have no permissions and could allow any user on the
system in the same network namespace (often
the whole system) to inject code into the multiprocessing forkserver
process. This was a potential privilege escalation. Filesystem based
socket permissions restrict this to the forkserver process user as was
the default in Python 3.8 and earlier.

This prevents Linux CVE 2022-42919.

: http.server: Fix an open redirection vulnerability in the
HTTP server when an URI path starts with .  Vulnerability
discovered, and initial fix proposed, by Hamza Avvan.

: LWPCookieJar and MozillaCookieJar create files with file mode
600 instead of 644 (Microsoft Windows is not affected)

: Fix memoryview use after free when accessing the backing
buffer in certain cases.

: The deprecated mailcap module now refuses to inject unsafe text
(filenames, MIME types, parameters) into shell commands. Instead of using
such text, it will warn and act as if a match was not found (or for test
commands, as if the test failed).

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Suppress ImportError for invalid query for help() command. Patch
by Donghee Na.
: Fix source location in bytecode for list, set and dict
comprehensions as well as generator expressions.
: Added unicode check for  attribute of  argument
passed in _imp.create_builtin() function.
: Fix source location of âassertâ bytecodes.
: Fix location of sub-expressions of boolean expressions, by
reducing their scope to that of the sub-expression.
: Modules from the standard library are now potentially suggested
as part of the error messages displayed by the interpreter when an
 is raised to the top level. Patch by Pablo Galindo
: Add running column offset to the tokenizer state to avoid
calculating AST column information with pointer arithmetic.
: Modify the tokenizer to return all necessary information the
parser needs to set location information in the AST nodes, so that the
parser does not have to calculate those doing pointer arithmetic.
: os.sched_yield() now release the GIL while calling
sched_yield(2). Patch by Donghee Na.
: Migrate  to Argument Clinic.
: The compiler now avoids quadratic behavior when finding which
instructions should use the LOAD_FAST_CHECK opcode.
: Fix an issue where several frame objects could be backed by the
same interpreter frame, possibly leading to corrupted memory and hard
crashes of the interpreter.
: Bugfix: PyFunction_GetAnnotations() should return a
borrowed reference. It was returning a new reference.
: The Garbage Collector now runs only on the eval breaker
mechanism of the Python bytecode evaluation loop instead on object
allocations. The GC can also run when PyErr_CheckSignals() is
called so C extensions that need to run for a long time without executing
any Python code also have a chance to execute the GC periodically.
: When __package__ is different than __spec__.parent,
raise a DeprecationWarning instead of ImportWarning.
Also remove importlib.util.set_package() which was scheduled for
removal.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Long deprecated, module_repr() should now be completely
eradicated.
: In cases where warnings.warn_explicit() consults the
moduleâs loader, an DeprecationWarning is issued when m.__loader__
differs from m.__spec__.loader.
: Ensure that all Python frame objects are backed by âcompleteâ
frames.
: Add API for subscribing to modification events on selected
dictionaries.
: Fix possible data corruption or crashes when accessing the
 member of newly-created generator or coroutine frames.
: Fixed a missing incref/decref pair in
Exception.__setstate__(). Patch by Ofey Chan.
: Remove the sys.getdxp() function and the
Tools/scripts/analyze_dxp.py script. DXP stands for âdynamic execution
pairsâ. They were related to DYNAMIC_EXECUTION_PROFILE and 
macros which have been removed in Python 3.11. Python can now be built
with ./configure --enable-pystats to gather
statistics on Python opcodes.  Patch by Victor Stinner.
: Fix the Python path configuration used to initialized
 at Python startup. Paths are no longer encoded to
UTF-8/strict to avoid encoding errors if it contains surrogate characters
(bytes paths are decoded with the surrogateescape error handler). Patch by
Victor Stinner.
: The parser now raises SyntaxError when parsing source
code containing null bytes. Patch by Pablo Galindo
: Fix a crash occurring when PyEval_GetFrame() is called
while the topmost Python frame is in a partially-initialized state.
: Fix command line parsing: reject  int_max_str_digits option with no value (invalid) when the
PYTHONINTMAXSTRDIGITS environment variable is set to a valid
limit. Patch by Victor Stinner.
: Fix overly-broad source position information for chained
comparisons used as branching conditions.
: Fix undefined behaviour in .
: Fix undefined behaviour in _testcapimodule.c.
: When ValueError is raised if an integer is larger than
the limit, mention the sys.set_int_max_str_digits() function in the
error message. Patch by Victor Stinner.
: At Python exit, sometimes a thread holding the GIL can wait
forever for a thread (usually a daemon thread) which requested to drop the
GIL, whereas the thread already exited. To fix the race condition, the
thread which requested the GIL drop now resets its request before exiting.
Issue discovered and analyzed by Mingliang ZHAO. Patch by Victor Stinner.
: Fix a possible assertion failure, fatal error, or
SystemError if a line tracing event raises an exception while
opcode tracing is enabled.
: The PyLong_FromString function was refactored to make it
more maintainable and extensible.
: Fix undefined behaviour in C code of null pointer arithmetic.
: Make sure that all frame objects created are created from valid
interpreter frames. Prevents the possibility of invalid frames in
backtraces and signal handlers.
: Improve the performance of reading and writing inline bytecode
caches on some platforms.
: Remove dead code from CALL_FUNCTION_EX opcode.
: memoryview now supports half-floats. Patch by Donghee
Na and Antoine Pitrou.
: Fix case of undefined behavior in ceval.c
: Convert _functools to argument clinic.
: Do not expose KeyWrapper in _functools.
: Ensure that tracing, sys.setrace(), is turned on
immediately. In pre-release versions of 3.11, some tracing events might
have been lost when turning on tracing in a  method or
interrupt.
: Fix use after free in trace refs build mode. Patch by Kumar
Aditya.
: When loading a file with invalid UTF-8 inside a multi-line
string, a correct SyntaxError is emitted.
: Make sure that incomplete frames do not show up in tracemalloc
traces.
: Fix compiler warnings and test failures when building with
--enable-pystats.
: Correctly raise SyntaxError on exception groups ()
on python versions prior to 3.11
: Remove two cases of undefined behavior, by adding NULL checks.
: Fix possible  pointer dereference in
_PyThread_CurrentFrames. Patch by Kumar Aditya.
: Separate Python recursion checking from C recursion checking
which reduces the chance of C stack overflow and allows the recursion
limit to be increased safely.
: Fix an issue that could prevent  from
specializing properly when accessing properties.
: Emit a DeprecationWarning when ,
 or  are called with more than
one argument.
: Disable incorrect pickling of the C implemented classmethod
descriptors.
: Fix text signatures of list.__getitem__ and
dict.__getitem__.
: Fix AttributeError missing  and 
attributes in object.__getattribute__(). Patch by Philip Georgi.
: Change the jump opcodes so that all conditional jumps are
forward jumps. Backward jumps are converted by the assembler into a
conditional forward jump whose target is the fallthrough block (and with a
reversed condition), followed by an unconditional backward jump. For
example:
POP_JUMP_IF_TRUE BACKWARD_TARGET becomes POP_JUMP_IF_FALSE
NEXT_BLOCK;  BACKWARD_TARGET.
All the directed conditional jump opcodes were removed:
POP_JUMP_FORWARD_IF_TRUE, POP_JUMP_BACKWARD_IF_TRUE,
POP_JUMP_FORWARD_IF_FALSE, POP_JUMP_BACKWARD_IF_FALSE,
POP_JUMP_FORWARD_IF_NONE, POP_JUMP_BACKWARD_IF_NONE,
POP_JUMP_FORWARD_IF_NOT_NONE, POP_JUMP_BACKWARD_IF_NOT_NONE.
The corresponding opcodes without direction are no longer
pseudo-instructions, and they implement the forward conditional jumps.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Loading a file with invalid UTF-8 will now report the broken
character at the correct location.
: The internal field _PyInterpreterFrame.f_func is renamed to
_PyInterpreterFrame.f_funcobj and may be any object. The 
and  fields may hold junk values.
It is safest to treat the _PyInterpreterFrame struct as opaque.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fixed a bug that caused _PyCode_GetExtra to return garbage
for negative indexes. Patch by Pablo Galindo
: Add a new   Python command line option as well as
sys.activate_stack_trampoline() and
sys.deactivate_stack_trampoline() function in the  module
that allows to set/unset the interpreter in a way that the Linux 
profiler can detect Python calls. The new
sys.is_stack_trampoline_active() function allows to query the state
of the perf trampoline. Design by Pablo Galindo. Patch by Pablo Galindo
and Christian Heimes with contributions from Gregory P. Smith [Google] and
Mark Shannon.
: Fix a deadlock in PyGILState_Ensure() when allocating
new thread state. Patch by Kumar Aditya.
: PyType_Ready() now initializes ht_cached_keys and
performs additional checks to ensure that type objects are properly
configured. This avoids crashes in 3rd party packages that donât use
regular API to create new types.
: On WASI ENOTCAPABLE is now mapped to
PermissionError. The  modules exposes the new error
number. getpath.py now ignores PermissionError when it cannot
open landmark files pybuilddir.txt and .
: Added test a harness for direct unit tests of the compilerâs
optimization stage. The _testinternalcapi.optimize_cfg() function runs
the optimiser on a sequence of instructions. The
CfgOptimizationTestCase class in test.support has utilities for
invoking the optimizer and checking the output.
: Reduces the size of a âsimpleâ Python object from 8 to 6 words
by moving the weakreflist pointer into the pre-header directly before the
objectâs dict/values pointer.
: Compile virtual / blocks to
handle exceptions raised during  or
 calls through a suspended frame.
: Optimized calling  with vectorcall. Patch
by Kumar Aditya.
: Improve error message when a parameter without a default value
follows one with a default value, and show the same message, even when the
non-default/default sequence is preceded by positional-only parameters.
: Fixed bug where the compilerâs eliminate_empty_basic_blocks
function ignores the last block of the code unit.
: Skip over incomplete frames in PyThreadState_GetFrame().
: Fix format string in _PyPegen_raise_error_known_location
that can lead to memory corruption on some 64bit systems. The function was
building a tuple with  (int) instead of  (Py_ssize_t) for
Py_ssize_t arguments.
: Fix misleading contents of error message when converting an
all-whitespace string to .
: Update code object hashing and equality to consider all
debugging and exception handling tables. This fixes an issue where certain
non-identical code objects could be âdeduplicatedâ during compilation.
: Reduce allocation size of  from str.split()
and str.rsplit(). Patch by Donghee Na and Inada Naoki.
: Create a âjump target labelâ abstraction in the compiler so that
the compilerâs codegen stage does not work directly with basic blocks.
This prepares the code for changes to the underlying CFG generation
mechanism.
: _PyPegen_Parser_New now properly detects token memory
allocation errors. Patch by Honglin Zhu.
: Run Python code in tracer/profiler function at full speed. Fixes
slowdown in earlier versions of 3.11.
: Emit a warning in debug mode if an object does not call
PyObject_GC_UnTrack() before deallocation. Patch by Pablo Galindo.
: Merge managed dict and values pointer into a single tagged
pointer to save one word in the pre-header.
: Add cfg_builder struct and refactor the relevant code so that a
cfg can be constructed without an instance of the compiler struct.
: Prevented crashes in the AST constructor when compiling some
absurdly long expressions like "+0"*1000000. RecursionError is
now raised instead. Patch by Pablo Galindo
:  node positions are now validated when provided
to  and other related functions. If invalid positions are
detected, a ValueError will be raised.
: Fix an issue that caused extended opcode arguments and some
conditional pops to be ignored when calculating valid jump targets for
assignments to the  attribute of frame objects. In some cases,
this could cause inconsistent internal state, resulting in a hard crash of
the interpreter.
: Undocumented PyCode_Addr2Location function now properly
returns when  argument is less than zero.
: Replace all EXTENDED_ARG_QUICK instructions with basic
EXTENDED_ARG instructions in unquickened code. Consumers of
non-adaptive bytecode should be able to handle extended arguments the same
way they were handled in CPython 3.10 and older.
: Fix incorrect source location info caused by certain
optimizations in the bytecode compiler.
: Implement os.setns() and  os.unshare() for Linux.
Patch by Noam Cohen.
: Fix incorrect source location info for some multi-line attribute
accesses and method calls.
: Fix error detection in some builtin functions when keyword
argument name is an instance of a str subclass with overloaded 
and . Previously it could cause SystemError or other undesired
behavior.
: ast.parse() will no longer parse function definitions with
positional-only params when passed feature_version less than 
. Patch by Shantanu Jain.
: Allow jumping within, out of, and across exception handlers in
the debugger.
: ast.parse() will no longer parse parenthesized context
managers when passed feature_version less than  . Patch by
Shantanu Jain.
: ast.parse() will no longer parse assignment expressions
when passed feature_version less than  . Patch by Shantanu
Jain.
: Ensures the program name is known for help text during
interpreter startup.
: Fix the column offsets for some expressions in multi-line
f-strings  nodes. Patch by Pablo Galindo.
: Fix an issue where frame object manipulations could corrupt
inline bytecode caches.
: Fix an issue where lookups of metaclass descriptors may be
ignored when an identically-named attribute also exists on the class
itself.
: Fix an issue where a  item assignment could
crash if itâs resized by the new valueâs __index__() method.
: Fix reference counting bug in bool.__repr__(). Patch by
Kumar Aditya.
: Fix an issue that could cause code with multi-line method
lookups to have misleading or incorrect column offset information. In some
cases (when compiling a hand-built AST) this could have resulted in a hard
crash of the interpreter.
: Fix an issue that caused internal frames to outlive failed
Python function calls, possibly resulting in memory leaks or hard
interpreter crashes.
: Fix an issue where exceptions raised by line-tracing events
would cause frames to be left in an invalid state, possibly resulting in a
hard crash of the interpreter.
: Disable the compilerâs inline-small-exit-blocks optimization for
exit blocks that are associated with source code lines. This fixes a bug
where the debugger cannot tell where an exception handler ends and the
following code block begins.
: Line number of a moduleâs  instruction is set to 0 as
specified in .
: Account for instructions that can push NULL to the stack when
setting line number in a frame. Prevents some (unlikely) crashes.
: Reload  when raising    in the
interpreter main loop, for C compilers to generate dispatching code
independently.
: Compile and run code with unpacking of extremely large sequences
(1000s of elements). Such code failed to compile. It now compiles and runs
correctly.
: Fixed a tokenizer crash when reading encoded files with syntax
errors from  with non utf-8 encoded text. Patch by Pablo Galindo
: Fix an issue when reading line numbers from code objects if the
encoded line numbers are close to . Patch by Pablo Galindo
: Donât create frame objects for incomplete frames. Prevents the
creation of generators and closures from being observable to Python and C
extensions, restoring the behavior of 3.10 and earlier.
: Fix error for dictionary literals with invalid expression as
value.
: types.MappingProxyType instances are now hashable if
the underlying mapping is hashable.
: Revise the display strategy of traceback enhanced error
locations.  The indicators are only shown when the location doesnât span
the whole line.
: Add BINARY_SLICE and STORE_SLICE
instructions for more efficient handling and better specialization of
slicing operations, where the slice is explicit in the source code.
: Fix unreachable code warning in Python/specialize.c.
: Specialize  for objects with custom
__getattribute__.
: Improve performance of attribute lookups on objects with custom
__getattribute__ and __getattr__. Patch by Ken Jin.
: Specialize  for property() attributes.
: Refactor compiler optimisation code so that it no longer needs
the   and   passed around. Instead,
each function takes the CFG and other data that it actually needs. This
will make it possible to test this code directly.
: When built with -enable-pystats, sys._stats_on(),
sys._stats_off(), sys._stats_clear() and sys._stats_dump()
functions have been added to enable gathering stats for parts of programs.
: Store offset of first traceable instruction in code object to
avoid having to recompute it for each instruction when tracing.
: Lazily create a table mapping bytecode offsets to line numbers
to speed up calculation of line numbers when tracing.
: types.GenericAlias no longer relays the 
attribute. For example, isinstance(list[int],  no longer returns
.
: Refactor the compiler to reduce boilerplate and repetition.
: Fix some exponential backtrace case happening with deeply nested
sequence patterns in match statements. Patch by Pablo Galindo
: Make sure that the end column offsets are correct in multi-line
method calls. Previously, the end column could precede the column offset.
: importlib.invalidate_caches() now drops entries from
sys.path_importer_cache with a relative path as name. This solves
a caching issue when a process changes its current working directory.
FileFinder no longer inserts a dot in the path, e.g. /egg/./spam
is now .

================================================================================

# Changelog - Core and Builtins (Part 5)

: Change order of bytecode instructions emitted for
 and   to reduce the number of entries
in the exception table.
: Reduce the size of the inline cache for LOAD_METHOD by 2
bytes.
: Removed redundant fields from the compilerâs basicblock struct:
b_nofallthrough, , . They can be easily
calculated from the opcode of the last instruction of the block.
: LOAD_METHOD instruction has been removed. It was merged back
into .
: Fixed an assert where an f-string has an equal sign â=â
following an expression, but thereâs no trailing brace. For example,
fâ{i=â.
: Cache the result of PyCode_GetCode() function to restore
the (1) lookup of the  attribute.
: Ensure that custom  nodes without explicit end
positions can be compiled. Patch by Pablo Galindo.
: Code for exception handlers is emitted at the end of the code
unitâs bytecode. This avoids one jump when no exception is raised.
: Use exponential backoff for specialization counters in the
interpreter. Can reduce the number of failed specializations significantly
and avoid slowdown for those parts of a program that are not suitable for
specialization.
: Improve error message for invalid syntax of conversion character
in f-string expressions.
: Fix a crash in substitution of a  in nested generic
alias after TypeVarTuple.
: When a bytecode instruction jumps to an unconditional jump
instruction, the first instruction can often be optimized to target the
unconditional jumpâs target directly. For tracing reasons, this would
previously only occur if both instructions have the same line number. This
also now occurs if the unconditional jump is artificial, i.e., if it has
no associated line number.
: The --experimental-isolated-subinterpreters configure option
and EXPERIMENTAL_ISOLATED_SUBINTERPRETERS macro have been removed.
: Fix __lltrace__ debug feature if the stdout encoding is not
UTF-8. Patch by Victor Stinner.
: Wraps unused parameters in Objects/obmalloc.c with
.
: Avoid  checks for uninitialized local variables by
determining at compile time which variables must be initialized.
: Backward jumps after   loops are no longer given
dubious line numbers.
: Fix contextvars HAMT implementation to handle iteration over
deep trees.
The bug was discovered and fixed by Eli Libman. See
MagicStack/immutables#84 for more details.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Added the new function PyType_FromMetaclass(), which
generalizes the existing PyType_FromModuleAndSpec() using an
additional metaclass argument. This is useful for language binding tools,
where it can be used to intercept type-related operations like subclassing
or static attribute access by specifying a metaclass with custom slots.
Importantly, PyType_FromMetaclass() is available in the Limited
API, which provides a path towards migrating more binding tools onto the
Stable ABI.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Fix the __text_signature__ for  methods
implemented in C. Patch by Jelle Zijlstra.
: The operand of the YIELD_VALUE instruction is set to the
stack depth. This is done to help frame handling on  and may
assist debuggers.
: Fix memory leak in code objectâs lines and positions iterators
as they were not finalized at exit. Patch by Kumar Aditya.
: Fixed a crash in  from mutating collections during
__reduce__ or persistent_id.
: The PRECALL instruction has been removed. It offered only a
small advantage for specialization and is not needed in the vast majority
of cases.
: Always round the allocated size for lists up to the nearest even
number.
: Improve error message for some suites with syntax error before
â:â
: Decrease default recursion limit on WASI to address limited call
stack size.
: Fix memory leak in memoryview iterator as it was not
finalized at exit. Patch by Kumar Aditya.
: Specialize LOAD_METHOD for objects with lazy dictionaries.
Patch by Ken Jin.
: Add support for connecting and binding to Hyper-V sockets on
Windows Hyper-V hosts and guests.
: Remove spurious âLINEâ event when starting a generator or
coroutine, visible tracing functions implemented in C.
: _warnings.warn_explicit() is ported to Argument Clinic.
: Make the compiler duplicate an exit block only if none of its
instructions have a lineno (previously only the first instruction in the
block was checked, leading to unnecessarily duplicated blocks).
: The deprecated debug build only PYTHONTHREADDEBUG
environment variable no longer does anything.
: Fix hang when trying to iterate over a typing.Union.
: Specialized the  opcode using the PEP 659
machinery
: Removed duplicate â{0, 0, 0, 0, 0, 0}â entry in
âObjects/unicodetype_db.hâ.
: Updates the error message for abstract class.
: Improve performance of repetition of  and
 by using  to copy data and performing the
reference increments in one step.
: Make  output shorter by moving some info to the new
--help-env and --help-xoptions command-line options. Also add
--help-all option to print complete usage.
: Document some places where an assignment expression needs
parentheses.

================================================================================

# Changelog - Core and Builtins (Part 8)

: Suppress ImportError for invalid query for help() command. Patch
by Donghee Na.

: Fix source location in bytecode for list, set and dict
comprehensions as well as generator expressions.

: Added unicode check for  attribute of  argument
passed in _imp.create_builtin() function.

: Fix source location of âassertâ bytecodes.

: Fix location of sub-expressions of boolean expressions, by
reducing their scope to that of the sub-expression.

: Modules from the standard library are now potentially suggested
as part of the error messages displayed by the interpreter when an
 is raised to the top level. Patch by Pablo Galindo

: Add running column offset to the tokenizer state to avoid
calculating AST column information with pointer arithmetic.

: Modify the tokenizer to return all necessary information the
parser needs to set location information in the AST nodes, so that the
parser does not have to calculate those doing pointer arithmetic.

: os.sched_yield() now release the GIL while calling
sched_yield(2). Patch by Donghee Na.

: Migrate  to Argument Clinic.

: The compiler now avoids quadratic behavior when finding which
instructions should use the LOAD_FAST_CHECK opcode.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Fix an issue where several frame objects could be backed by the
same interpreter frame, possibly leading to corrupted memory and hard
crashes of the interpreter.

: Bugfix: PyFunction_GetAnnotations() should return a
borrowed reference. It was returning a new reference.

: The Garbage Collector now runs only on the eval breaker
mechanism of the Python bytecode evaluation loop instead on object
allocations. The GC can also run when PyErr_CheckSignals() is
called so C extensions that need to run for a long time without executing
any Python code also have a chance to execute the GC periodically.

: When __package__ is different than __spec__.parent,
raise a DeprecationWarning instead of ImportWarning.

Also remove importlib.util.set_package() which was scheduled for
removal.

: Long deprecated, module_repr() should now be completely
eradicated.

: In cases where warnings.warn_explicit() consults the
moduleâs loader, an DeprecationWarning is issued when m.__loader__
differs from m.__spec__.loader.

: Ensure that all Python frame objects are backed by âcompleteâ
frames.

: Add API for subscribing to modification events on selected
dictionaries.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Fix possible data corruption or crashes when accessing the
 member of newly-created generator or coroutine frames.

: Fixed a missing incref/decref pair in
Exception.__setstate__(). Patch by Ofey Chan.

: Remove the sys.getdxp() function and the
Tools/scripts/analyze_dxp.py script. DXP stands for âdynamic execution
pairsâ. They were related to DYNAMIC_EXECUTION_PROFILE and 
macros which have been removed in Python 3.11. Python can now be built
with ./configure --enable-pystats to gather
statistics on Python opcodes.  Patch by Victor Stinner.

: Fix the Python path configuration used to initialized
 at Python startup. Paths are no longer encoded to
UTF-8/strict to avoid encoding errors if it contains surrogate characters
(bytes paths are decoded with the surrogateescape error handler). Patch by
Victor Stinner.

: The parser now raises SyntaxError when parsing source
code containing null bytes. Patch by Pablo Galindo

: Fix a crash occurring when PyEval_GetFrame() is called
while the topmost Python frame is in a partially-initialized state.

================================================================================

# Changelog - Core and Builtins (Part 11)

: Fix command line parsing: reject  int_max_str_digits option with no value (invalid) when the
PYTHONINTMAXSTRDIGITS environment variable is set to a valid
limit. Patch by Victor Stinner.

: Fix overly-broad source position information for chained
comparisons used as branching conditions.

: Fix undefined behaviour in .

: Fix undefined behaviour in _testcapimodule.c.

: When ValueError is raised if an integer is larger than
the limit, mention the sys.set_int_max_str_digits() function in the
error message. Patch by Victor Stinner.

: At Python exit, sometimes a thread holding the GIL can wait
forever for a thread (usually a daemon thread) which requested to drop the
GIL, whereas the thread already exited. To fix the race condition, the
thread which requested the GIL drop now resets its request before exiting.
Issue discovered and analyzed by Mingliang ZHAO. Patch by Victor Stinner.

: Fix a possible assertion failure, fatal error, or
SystemError if a line tracing event raises an exception while
opcode tracing is enabled.

: The PyLong_FromString function was refactored to make it
more maintainable and extensible.

: Fix undefined behaviour in C code of null pointer arithmetic.

================================================================================

# Changelog - Core and Builtins (Part 12)

: Make sure that all frame objects created are created from valid
interpreter frames. Prevents the possibility of invalid frames in
backtraces and signal handlers.

: Improve the performance of reading and writing inline bytecode
caches on some platforms.

: Remove dead code from CALL_FUNCTION_EX opcode.

: memoryview now supports half-floats. Patch by Donghee
Na and Antoine Pitrou.

: Fix case of undefined behavior in ceval.c

: Convert _functools to argument clinic.

: Do not expose KeyWrapper in _functools.

: Ensure that tracing, sys.setrace(), is turned on
immediately. In pre-release versions of 3.11, some tracing events might
have been lost when turning on tracing in a  method or
interrupt.

: Fix use after free in trace refs build mode. Patch by Kumar
Aditya.

: When loading a file with invalid UTF-8 inside a multi-line
string, a correct SyntaxError is emitted.

: Make sure that incomplete frames do not show up in tracemalloc
traces.

: Fix compiler warnings and test failures when building with
--enable-pystats.

: Correctly raise SyntaxError on exception groups ()
on python versions prior to 3.11

: Remove two cases of undefined behavior, by adding NULL checks.

================================================================================

# Changelog - Core and Builtins (Part 13)

: Fix possible  pointer dereference in
_PyThread_CurrentFrames. Patch by Kumar Aditya.

: Separate Python recursion checking from C recursion checking
which reduces the chance of C stack overflow and allows the recursion
limit to be increased safely.

: Fix an issue that could prevent  from
specializing properly when accessing properties.

: Emit a DeprecationWarning when ,
 or  are called with more than
one argument.

: Disable incorrect pickling of the C implemented classmethod
descriptors.

: Fix text signatures of list.__getitem__ and
dict.__getitem__.

: Fix AttributeError missing  and 
attributes in object.__getattribute__(). Patch by Philip Georgi.

: Change the jump opcodes so that all conditional jumps are
forward jumps. Backward jumps are converted by the assembler into a
conditional forward jump whose target is the fallthrough block (and with a
reversed condition), followed by an unconditional backward jump. For
example:

POP_JUMP_IF_TRUE BACKWARD_TARGET becomes POP_JUMP_IF_FALSE
NEXT_BLOCK;  BACKWARD_TARGET.

================================================================================

# Changelog - Core and Builtins (Part 14)

All the directed conditional jump opcodes were removed:
POP_JUMP_FORWARD_IF_TRUE, POP_JUMP_BACKWARD_IF_TRUE,
POP_JUMP_FORWARD_IF_FALSE, POP_JUMP_BACKWARD_IF_FALSE,
POP_JUMP_FORWARD_IF_NONE, POP_JUMP_BACKWARD_IF_NONE,
POP_JUMP_FORWARD_IF_NOT_NONE, POP_JUMP_BACKWARD_IF_NOT_NONE.

The corresponding opcodes without direction are no longer
pseudo-instructions, and they implement the forward conditional jumps.

: Loading a file with invalid UTF-8 will now report the broken
character at the correct location.

: The internal field _PyInterpreterFrame.f_func is renamed to
_PyInterpreterFrame.f_funcobj and may be any object. The 
and  fields may hold junk values.

It is safest to treat the _PyInterpreterFrame struct as opaque.

: Fixed a bug that caused _PyCode_GetExtra to return garbage
for negative indexes. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 15)

: Add a new   Python command line option as well as
sys.activate_stack_trampoline() and
sys.deactivate_stack_trampoline() function in the  module
that allows to set/unset the interpreter in a way that the Linux 
profiler can detect Python calls. The new
sys.is_stack_trampoline_active() function allows to query the state
of the perf trampoline. Design by Pablo Galindo. Patch by Pablo Galindo
and Christian Heimes with contributions from Gregory P. Smith [Google] and
Mark Shannon.

: Fix a deadlock in PyGILState_Ensure() when allocating
new thread state. Patch by Kumar Aditya.

: PyType_Ready() now initializes ht_cached_keys and
performs additional checks to ensure that type objects are properly
configured. This avoids crashes in 3rd party packages that donât use
regular API to create new types.

: On WASI ENOTCAPABLE is now mapped to
PermissionError. The  modules exposes the new error
number. getpath.py now ignores PermissionError when it cannot
open landmark files pybuilddir.txt and .

================================================================================

# Changelog - Core and Builtins (Part 16)

: Added test a harness for direct unit tests of the compilerâs
optimization stage. The _testinternalcapi.optimize_cfg() function runs
the optimiser on a sequence of instructions. The
CfgOptimizationTestCase class in test.support has utilities for
invoking the optimizer and checking the output.

: Reduces the size of a âsimpleâ Python object from 8 to 6 words
by moving the weakreflist pointer into the pre-header directly before the
objectâs dict/values pointer.

: Compile virtual / blocks to
handle exceptions raised during  or
 calls through a suspended frame.

: Optimized calling  with vectorcall. Patch
by Kumar Aditya.

: Improve error message when a parameter without a default value
follows one with a default value, and show the same message, even when the
non-default/default sequence is preceded by positional-only parameters.

: Fixed bug where the compilerâs eliminate_empty_basic_blocks
function ignores the last block of the code unit.

: Skip over incomplete frames in PyThreadState_GetFrame().

================================================================================

# Changelog - Core and Builtins (Part 17)

: Fix format string in _PyPegen_raise_error_known_location
that can lead to memory corruption on some 64bit systems. The function was
building a tuple with  (int) instead of  (Py_ssize_t) for
Py_ssize_t arguments.

: Fix misleading contents of error message when converting an
all-whitespace string to .

: Update code object hashing and equality to consider all
debugging and exception handling tables. This fixes an issue where certain
non-identical code objects could be âdeduplicatedâ during compilation.

: Reduce allocation size of  from str.split()
and str.rsplit(). Patch by Donghee Na and Inada Naoki.

: Create a âjump target labelâ abstraction in the compiler so that
the compilerâs codegen stage does not work directly with basic blocks.
This prepares the code for changes to the underlying CFG generation
mechanism.

: _PyPegen_Parser_New now properly detects token memory
allocation errors. Patch by Honglin Zhu.

: Run Python code in tracer/profiler function at full speed. Fixes
slowdown in earlier versions of 3.11.

: Emit a warning in debug mode if an object does not call
PyObject_GC_UnTrack() before deallocation. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 18)

: Merge managed dict and values pointer into a single tagged
pointer to save one word in the pre-header.

: Add cfg_builder struct and refactor the relevant code so that a
cfg can be constructed without an instance of the compiler struct.

: Prevented crashes in the AST constructor when compiling some
absurdly long expressions like "+0"*1000000. RecursionError is
now raised instead. Patch by Pablo Galindo

:  node positions are now validated when provided
to  and other related functions. If invalid positions are
detected, a ValueError will be raised.

: Fix an issue that caused extended opcode arguments and some
conditional pops to be ignored when calculating valid jump targets for
assignments to the  attribute of frame objects. In some cases,
this could cause inconsistent internal state, resulting in a hard crash of
the interpreter.

: Undocumented PyCode_Addr2Location function now properly
returns when  argument is less than zero.

: Replace all EXTENDED_ARG_QUICK instructions with basic
EXTENDED_ARG instructions in unquickened code. Consumers of
non-adaptive bytecode should be able to handle extended arguments the same
way they were handled in CPython 3.10 and older.

================================================================================

# Changelog - Core and Builtins (Part 19)

: Fix incorrect source location info caused by certain
optimizations in the bytecode compiler.

: Implement os.setns() and  os.unshare() for Linux.
Patch by Noam Cohen.

: Fix incorrect source location info for some multi-line attribute
accesses and method calls.

: Fix error detection in some builtin functions when keyword
argument name is an instance of a str subclass with overloaded 
and . Previously it could cause SystemError or other undesired
behavior.

: ast.parse() will no longer parse function definitions with
positional-only params when passed feature_version less than 
. Patch by Shantanu Jain.

: Allow jumping within, out of, and across exception handlers in
the debugger.

: ast.parse() will no longer parse parenthesized context
managers when passed feature_version less than  . Patch by
Shantanu Jain.

: ast.parse() will no longer parse assignment expressions
when passed feature_version less than  . Patch by Shantanu
Jain.

: Ensures the program name is known for help text during
interpreter startup.

: Fix the column offsets for some expressions in multi-line
f-strings  nodes. Patch by Pablo Galindo.

: Fix an issue where frame object manipulations could corrupt
inline bytecode caches.

================================================================================

# Changelog - Core and Builtins (Part 20)

: Fix an issue where lookups of metaclass descriptors may be
ignored when an identically-named attribute also exists on the class
itself.

: Fix an issue where a  item assignment could
crash if itâs resized by the new valueâs __index__() method.

: Fix reference counting bug in bool.__repr__(). Patch by
Kumar Aditya.

: Fix an issue that could cause code with multi-line method
lookups to have misleading or incorrect column offset information. In some
cases (when compiling a hand-built AST) this could have resulted in a hard
crash of the interpreter.

: Fix an issue that caused internal frames to outlive failed
Python function calls, possibly resulting in memory leaks or hard
interpreter crashes.

: Fix an issue where exceptions raised by line-tracing events
would cause frames to be left in an invalid state, possibly resulting in a
hard crash of the interpreter.

: Disable the compilerâs inline-small-exit-blocks optimization for
exit blocks that are associated with source code lines. This fixes a bug
where the debugger cannot tell where an exception handler ends and the
following code block begins.

: Line number of a moduleâs  instruction is set to 0 as
specified in .

================================================================================

# Changelog - Core and Builtins (Part 21)

: Account for instructions that can push NULL to the stack when
setting line number in a frame. Prevents some (unlikely) crashes.

: Reload  when raising    in the
interpreter main loop, for C compilers to generate dispatching code
independently.

: Compile and run code with unpacking of extremely large sequences
(1000s of elements). Such code failed to compile. It now compiles and runs
correctly.

: Fixed a tokenizer crash when reading encoded files with syntax
errors from  with non utf-8 encoded text. Patch by Pablo Galindo

: Fix an issue when reading line numbers from code objects if the
encoded line numbers are close to . Patch by Pablo Galindo

: Donât create frame objects for incomplete frames. Prevents the
creation of generators and closures from being observable to Python and C
extensions, restoring the behavior of 3.10 and earlier.

: Fix error for dictionary literals with invalid expression as
value.

: types.MappingProxyType instances are now hashable if
the underlying mapping is hashable.

: Revise the display strategy of traceback enhanced error
locations.  The indicators are only shown when the location doesnât span
the whole line.

================================================================================

# Changelog - Core and Builtins (Part 22)

: Add BINARY_SLICE and STORE_SLICE
instructions for more efficient handling and better specialization of
slicing operations, where the slice is explicit in the source code.

: Fix unreachable code warning in Python/specialize.c.

: Specialize  for objects with custom
__getattribute__.

: Improve performance of attribute lookups on objects with custom
__getattribute__ and __getattr__. Patch by Ken Jin.

: Specialize  for property() attributes.

: Refactor compiler optimisation code so that it no longer needs
the   and   passed around. Instead,
each function takes the CFG and other data that it actually needs. This
will make it possible to test this code directly.

: When built with -enable-pystats, sys._stats_on(),
sys._stats_off(), sys._stats_clear() and sys._stats_dump()
functions have been added to enable gathering stats for parts of programs.

: Store offset of first traceable instruction in code object to
avoid having to recompute it for each instruction when tracing.

: Lazily create a table mapping bytecode offsets to line numbers
to speed up calculation of line numbers when tracing.

: types.GenericAlias no longer relays the 
attribute. For example, isinstance(list[int],  no longer returns
.

================================================================================

# Changelog - Core and Builtins (Part 23)

: Refactor the compiler to reduce boilerplate and repetition.

: Fix some exponential backtrace case happening with deeply nested
sequence patterns in match statements. Patch by Pablo Galindo

: Make sure that the end column offsets are correct in multi-line
method calls. Previously, the end column could precede the column offset.

: importlib.invalidate_caches() now drops entries from
sys.path_importer_cache with a relative path as name. This solves
a caching issue when a process changes its current working directory.

FileFinder no longer inserts a dot in the path, e.g. /egg/./spam
is now .

: Change order of bytecode instructions emitted for
 and   to reduce the number of entries
in the exception table.

: Reduce the size of the inline cache for LOAD_METHOD by 2
bytes.

: Removed redundant fields from the compilerâs basicblock struct:
b_nofallthrough, , . They can be easily
calculated from the opcode of the last instruction of the block.

: LOAD_METHOD instruction has been removed. It was merged back
into .

: Fixed an assert where an f-string has an equal sign â=â
following an expression, but thereâs no trailing brace. For example,
fâ{i=â.

================================================================================

# Changelog - Core and Builtins (Part 24)

: Cache the result of PyCode_GetCode() function to restore
the (1) lookup of the  attribute.

: Ensure that custom  nodes without explicit end
positions can be compiled. Patch by Pablo Galindo.

: Code for exception handlers is emitted at the end of the code
unitâs bytecode. This avoids one jump when no exception is raised.

: Use exponential backoff for specialization counters in the
interpreter. Can reduce the number of failed specializations significantly
and avoid slowdown for those parts of a program that are not suitable for
specialization.

: Improve error message for invalid syntax of conversion character
in f-string expressions.

: Fix a crash in substitution of a  in nested generic
alias after TypeVarTuple.

: When a bytecode instruction jumps to an unconditional jump
instruction, the first instruction can often be optimized to target the
unconditional jumpâs target directly. For tracing reasons, this would
previously only occur if both instructions have the same line number. This
also now occurs if the unconditional jump is artificial, i.e., if it has
no associated line number.

================================================================================

# Changelog - Core and Builtins (Part 25)

: The --experimental-isolated-subinterpreters configure option
and EXPERIMENTAL_ISOLATED_SUBINTERPRETERS macro have been removed.

: Fix __lltrace__ debug feature if the stdout encoding is not
UTF-8. Patch by Victor Stinner.

: Wraps unused parameters in Objects/obmalloc.c with
.

: Avoid  checks for uninitialized local variables by
determining at compile time which variables must be initialized.

: Backward jumps after   loops are no longer given
dubious line numbers.

: Fix contextvars HAMT implementation to handle iteration over
deep trees.

The bug was discovered and fixed by Eli Libman. See
MagicStack/immutables#84 for more details.

: Added the new function PyType_FromMetaclass(), which
generalizes the existing PyType_FromModuleAndSpec() using an
additional metaclass argument. This is useful for language binding tools,
where it can be used to intercept type-related operations like subclassing
or static attribute access by specifying a metaclass with custom slots.

Importantly, PyType_FromMetaclass() is available in the Limited
API, which provides a path towards migrating more binding tools onto the
Stable ABI.

================================================================================

# Changelog - Core and Builtins (Part 26)

: Fix the __text_signature__ for  methods
implemented in C. Patch by Jelle Zijlstra.

: The operand of the YIELD_VALUE instruction is set to the
stack depth. This is done to help frame handling on  and may
assist debuggers.

: Fix memory leak in code objectâs lines and positions iterators
as they were not finalized at exit. Patch by Kumar Aditya.

: Fixed a crash in  from mutating collections during
__reduce__ or persistent_id.

: The PRECALL instruction has been removed. It offered only a
small advantage for specialization and is not needed in the vast majority
of cases.

: Always round the allocated size for lists up to the nearest even
number.

: Improve error message for some suites with syntax error before
â:â

: Decrease default recursion limit on WASI to address limited call
stack size.

: Fix memory leak in memoryview iterator as it was not
finalized at exit. Patch by Kumar Aditya.

: Specialize LOAD_METHOD for objects with lazy dictionaries.
Patch by Ken Jin.

: Add support for connecting and binding to Hyper-V sockets on
Windows Hyper-V hosts and guests.

: Remove spurious âLINEâ event when starting a generator or
coroutine, visible tracing functions implemented in C.

================================================================================

# Changelog - Core and Builtins (Part 27)

: _warnings.warn_explicit() is ported to Argument Clinic.

: Make the compiler duplicate an exit block only if none of its
instructions have a lineno (previously only the first instruction in the
block was checked, leading to unnecessarily duplicated blocks).

: The deprecated debug build only PYTHONTHREADDEBUG
environment variable no longer does anything.

: Fix hang when trying to iterate over a typing.Union.

: Specialized the  opcode using the PEP 659
machinery

: Removed duplicate â{0, 0, 0, 0, 0, 0}â entry in
âObjects/unicodetype_db.hâ.

: Updates the error message for abstract class.

: Improve performance of repetition of  and
 by using  to copy data and performing the
reference increments in one step.

: Make  output shorter by moving some info to the new
--help-env and --help-xoptions command-line options. Also add
--help-all option to print complete usage.

: Document some places where an assignment expression needs
parentheses.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix hang on Windows in subprocess.wait_closed() in
 with ProactorEventLoop. Patch by Kumar
Aditya.
: tkinter.Text.count() raises now an exception for options
starting with â-â instead of silently ignoring them.
: The  module no longer accepts bytes-like paths, like
 and memoryview types: only the exact
 type is accepted for bytes strings. Patch by Victor
Stinner.
: Added itertools.batched() to batch data into lists of a given
length with the last list possibly being shorter than the others.
: Update the bundled copies of pip and setuptools to versions 22.3
and 65.5.0 respectively.
: A createSocket() method
was added to SysLogHandler.
: Fix bug in urllib.parse.urlparse() that causes certain
port numbers containing whitespace, underscores, plus and minus signs, or
non-ASCII digits to be incorrectly accepted.
: Make sys.setprofile() and sys.settrace() functions
reentrant. They can no long fail with: RuntimeError("Cannot  
        installed"). Patch
by Victor Stinner.
: Allow  to pass along  variables to
 and  when they do not impact path resolution
: Deprecated
asyncio.AbstractEventLoopPolicy.get_child_watcher() and
asyncio.AbstractEventLoopPolicy.set_child_watcher() methods to be
removed in Python 3.14. Patch by Kumar Aditya.
: On macOS, fix a crash in syslog.syslog() in multi-threaded
applications. On macOS, the libc  function is not thread-safe,
so syslog.syslog() no longer releases the GIL to call it. Patch by
Victor Stinner.
: Release the GIL when creating  objects on
Unix.
: Wrap network errors consistently in urllib FTP support, so the
test suite doesnât fail when a network is available but the public
internet is not reachable.
: The child watcher classes
MultiLoopChildWatcher,
FastChildWatcher and SafeChildWatcher
are deprecated and will be removed in Python 3.14. Patch by Kumar Aditya.
: Change default child watcher to
PidfdChildWatcher on Linux systems which supports it.
Patch by Kumar Aditya.
: Earlier in 3.11 we deprecated
asyncio.Task.cancel("message"). We realized we were too harsh, and
have undeprecated it.
: Do not rely solely on __cached__ on modules; code will also
support __spec__.cached.
: Replace deprecated application/javascript with
text/javascript in . See . Patch by Noam
Cohen.
: Apply changes from importlib_resources 5.8 and 5.9:
Traversable.joinpath provides a concrete implementation. 
now supports directories of resources.
: Remove deprecated importlib.util.set_loader() and
importlib.util.module_for_loader() from importlib.util.
: Change deprecate warning message in  from
  deprecated    value!=None

================================================================================

# Changelog - Library (Part 2)

  deprecated            

================================================================================

# Changelog - Library (Part 3)

: Fixes AttributeError when subprocess.check_output()
is used with argument input=None and either of the arguments
 or  are used.
:  and AttributeError spelling suggestions
provided since  are now also emitted by the pure Python
 module. Tests for those suggestions now exercise both
implementations to ensure they are equivalent. Patch by Carl Friedrich
Bolz-Tereick and Åukasz Langa.
:  now uses inspect.get_annotations() to
examine the annotations on class objects.
: Removed deprecated interfaces in importlib.metadata (entry
points accessed as dictionary, implicit dictionary construction of
sequence of EntryPoint objects, mutablility of EntryPoints result,
access of entry point by index). entry_points now has a simpler, more
straightforward API (returning EntryPoints).
: Avoid spurious tracebacks from  when default
executor cleanup is delayed until after the event loop is closed (e.g. as
the result of a keyboard interrupt).
: gzip.GzipFile.read() reads 10% faster.
: Avoid a crash in the C version of
asyncio.Future.remove_done_callback() when an evil argument is
passed.
: Remove tokenize.NL check from .
: Make Semaphore run faster.
: Fix generation of the default name of
tkinter.Checkbutton. Previously, checkbuttons in different parent
widgets could have the same short name and share the same state if
arguments ânameâ and âvariableâ are not specified. Now they are globally
unique.
: fix Flag to use boundary CONFORM
This restores previous Flag behavior of allowing flags with non-sequential
values to be combined; e.g.
class Skip(Flag):         TWO = 2         EIGHT = 8
Skip.TWO | Skip.EIGHT -> <Skip.TWO|EIGHT: 10>

================================================================================

# Changelog - Library (Part 4)

: Update bundled libexpat to 2.4.9
: Fix race condition in  where
process_exited() called before the
pipe_data_received() leading to
inconsistent output. Patch by Kumar Aditya.
: Pass the correct contextvars.Context when a 
exception handler is called on behalf of a task or callback handle. This
adds a new  method, get_context, and also a new 
method with the same name. If this method is not found on a task object
(perhaps because it is a third-party library that does not yet provide
this method), the context prevailing at the time the exception handler is
called is used.
: Fixed check in multiprocessing.resource_tracker that
guarantees that the length of a write to a pipe is not greater than
.
: Reduce urllib.parse.quote_from_bytes() memory use on large
values.
Contributed by Dennis Sweeney.

================================================================================

# Changelog - Library (Part 5)

: Corrected type annotation for dataclass attribute
pstats.FunctionProfile.ncalls to be .
: Update unicodedata database to Unicode 15.0.0.
: Fix undefined behaviour in struct.unpack().
: Improve performance of  for large ndb/gdb databases.
Previously this would call  which would iterate over all keys
â the answer (empty or not) is known after the first key.
: Fix the faulthandler implementation of
faulthandler.register(signal, chain=True) if the sigaction()
function is not available: donât call the previous signal handler if itâs
NULL. Patch by Victor Stinner.
: Correct conversion of numbers.Rationalâs to
.
: Speed up bisect.bisect() functions by taking advantage of
type-stability.
: Fraction hashes are now cached.
: In , fix missing field  and incorrect
__module__ in _AnnotatedAlias.
: Remove types._cell_factory from module namespace.
: Fix  of  subclasses.
: Work around missing socket functions in
âs .
: Fix TypeVarTuple.__typing_prepare_subst__.  was
not raised when using more than one TypeVarTuple, like   in
type alias substitutions.
: Add match_args, , , and weakref_slot
to _DataclassParams.
: In , fix overeager replacement of ââ in
formatting annotations.
: Added a getChildren() method to
logging.Logger, to get the immediate child loggers of a logger.
: Use double caching for compiled RE patterns.
: Fixed a minor performance regression in
threading.Event.__init__()
: Fix asyncio.streams.StreamReaderProtocol to keep a
strong reference to the created task, so that itâs not garbage collected
: Fix a bug in unicodedata: east_asian_width used to
return the wrong value for unassigned characters; and for yet unassigned,
but reserved characters.
: Fix a performance regression in logging
TimedRotatingFileHandler. Only check for special files when the rollover
time has passed.
: Fix unused  parameter in the  class in
xml.dom.minidom.
: Add AttrDict to JSON module for use with object_hook.
: Fix handling compiler warnings (SyntaxWarning and
DeprecationWarning) in codeop.compile_command() when checking for
incomplete input. Previously it emitted warnings and raised a SyntaxError.
Now it always returns  for incomplete input without emitting any
warnings.
: Fix incorrect condition that causes sys.thread_info.name to
be wrong on pthread platforms.
: Fix a bug in the makeunicodedata.py script leading to about
13 KiB of space saving in the unicodedata module, specifically the
character decomposition data.
: Remove an incompatible change from  that caused a
regression that ignored the utf8 in ZipInfo.flag_bits. Patch by Pablo
Galindo.
: Add  strftime format code (generates tzoffset with colons
as separator), see strftime() and strptime() Behavior.
: Fix asyncio.Runner to call
asyncio.set_event_loop() only once to avoid calling
attach_loop() multiple times on child
watchers. Patch by Kumar Aditya.
: Fix unittest.IsolatedAsyncioTestCase to set event loop
before calling setup functions. Patch by Kumar Aditya.
: Speed up urllib.parse.quote_from_bytes() by replacing a
list comprehension with .
: Add support for computing Spearmanâs correlation coefficient to
the existing statistics.correlation() function.
: Fix  shutdown handler so it respects
MemoryHandler.flushOnClose.
: When a task catches asyncio.CancelledError and raises
some other error, the other error should generally not silently be
suppressed.
: The HTTPStatus enum offers a couple
of properties to indicate the HTTP status category e.g.
HTTPStatus.OK.is_success.
: Update bundled pip to 22.2.2.
: Fix asyncio.TaskGroup to propagate exception when
asyncio.CancelledError was replaced with another exception by a
context manager. Patch by Kumar Aditya and Guido van Rossum.
: Fix incorrect joining of relative Windows paths with drives in
pathlib.PurePath initializer.
: Faster json.dumps() when sorting of keys is not requested
(default).
: Improve Signature.bind error
message for missing keyword-only arguments.
: Update bundled pip to 22.2.1.
: Fix GC crash when deallocating _lsprof.Profiler by
untracking it before calling any callbacks. Patch by Kumar Aditya.
: Fail gracefully if  or
 is raised when loading  methods. This
may happen when trying to load  on a Linux kernel with  enabled.
: Fix asyncio.run() for asyncio.Task
implementations without uncancel() method. Patch by
Kumar Aditya.
: Fix IndexError in parsing invalid date in the 
module.
: Upgrade bundled setuptools to 63.2.0.
: Upgrade bundled pip to 22.2.
: Fix check for existence of os.EFD_CLOEXEC,
os.EFD_NONBLOCK and os.EFD_SEMAPHORE flags on older
kernel versions where these flags are not present. Patch by Kumar Aditya.
: Fix concurrent.futures.Executor.map() to cancel the
currently waiting on future on an error - e.g. TimeoutError or
KeyboardInterrupt.
: Fix a  regression where  and 
were incorrectly relayed from  to the
Connection factory. The regression was introduced in
3.11a1 with PR 24421 (). Patch by Erlend E. Aasland.
: Fix  module didnât support  option
when  is true.
: Fixed flickering of the turtle window when the tracer is turned
off. Patch by Shin-myoung-serp.
: Add deprecation warning for enum member.member access (e.g.
Color.RED.BLUE). Remove EnumMeta.__getattr__.
: Ensure that timeouts scheduled with asyncio.Timeout
that have already expired are delivered promptly.
: wsgiref.types.InputStream.__iter__() should return
Iterator[bytes], not Iterable[bytes]. Patch by Shantanu Jain.
: Replaced assert with exception in ast.parse(), when
feature_version has an invalid major version. Patch by Shantanu Jain.
: Add  command-line interface.
Patch by Erlend Aasland.
: Replace  with _PyUnicodeWriter in
JSON encoder and StringIO and remove the  implementation.
: Remove -c/--clock and  CLI options of
. The options had been deprecated since Python 3.3 and the
functionality was removed in Python 3.7. Patch by Shantanu Jain.
: Fix refleak in _io.TextIOWrapper.reconfigure. Patch by Kumar
Aditya.
: Fix binding of unix socket to empty address on Linux to use an
available address from the abstract namespace, instead of â0â.
: Fix crash when deallocating an instance of a subclass of
_multiprocessing.SemLock. Patch by Kumar Aditya.
: Add random.binomialvariate().
: Allow asyncio.StreamWriter.drain() to be awaited
concurrently by multiple tasks. Patch by Kumar Aditya.
: When called with capture_locals=True, the 
module functions swallow exceptions raised from calls to  on
local variables of frames. This is in order to prioritize the original
exception over rendering errors.  An indication of the failure is printed
in place of the missing value.  (Patch by Simon-Martin Schroeder).
: Fix  subprocess transport to kill process cleanly
when process is blocked and avoid RuntimeError when loop is closed.
Patch by Kumar Aditya.
: SSLContext.set_default_verify_paths() now releases the GIL
around SSL_CTX_set_default_verify_paths call. The function call
performs I/O and CPU intensive work.
: Deprecate aliases typing.Hashable and
typing.Sized
: An undocumented    benchmark is moved into
 suite of pyperformance. Patch by Oleg Iarygin.
: Fix subclassing complex generics with type variables in
. Previously an error message saying   
     Generic[...] was shown.  no longer
populates __parameters__ with the __parameters__ of a Python
class.
: Remove the long-deprecated module_repr() from
.
: The ability to access the other values of an enum on an enum
(e.g. Color.RED.BLUE) has been restored in order to fix a performance
regression.
: Fix asyncio.run() and
unittest.IsolatedAsyncioTestCase to always the set event loop as
it was done in Python 3.10 and earlier. Patch by Kumar Aditya.
: Allow setting the attributes of reprlib.Repr during object
initialization
: Port static types of _multiprocessing module to heap types.
Patch by Kumar Aditya.
: Fix crash in struct.Struct when it was not completely
initialized by initializing it in .  Patch by Kumar
Aditya.
: Re-entrant calls to sys.setprofile() and
sys.settrace() now raise RuntimeError. Patch by Pablo
Galindo.
: Fix bug where linecache.getline() fails on bad files with
UnicodeDecodeError or SyntaxError. It now returns an empty
string as per the documentation.
: Once a asyncio.TaskGroup has started shutting down
(i.e., at least one task has failed and the task group has started
cancelling the remaining tasks), it should not be possible to add new
tasks to the task group.
: : Remove the ElementTree.Element.copy()
method of the pure Python implementation, deprecated in Python 3.10, use
the copy.copy() function instead. The C implementation of
 has no  method, only a __copy__() method.
Patch by Victor Stinner.
: : Remove find_loader() and find_module()
methods, deprecated in Python 3.10: use the find_spec() method
instead. See  for the rationale. Patch by Victor Stinner.
: shlex.split(): Passing  for  argument now
raises an exception, rather than reading . The feature
was deprecated in Python 3.9. Patch by Victor Stinner.
: Strip trailing spaces in  text output.
: Fix memory leak in pickle.Pickler when looking up
dispatch_table. Patch by Kumar Aditya.
: Deprecate  default adapters and converters. Patch by Erlend E. Aasland.
: Fixed types of  module to be immutable. Patch by
Kumar Aditya.
: Now raise ValueError when  or an empty string are
passed to Distribution.from_name (and other callers).
: shutil.make_archive() now passes the  argument
to custom archivers which support it.
: The  module now has the opcodes for pseudo
instructions (those which are used by the compiler during code generation
but then removed or replaced by real opcodes before the final bytecode is
emitted).
: Removed undocumented   . Use  
 test.test_codecs.EncodedFileTest instead.
: Made _struct.Struct GC-tracked in order to fix a
reference leak in the  module.
: Removed undocumented  argument of   .
Use   
test.test_base64.LegacyBase64TestCase.test_encodebytes instead.
: Remove the locale.format() function, deprecated in Python
3.7: use locale.format_string() instead. Patch by Victor Stinner.
: Remove the ssl.match_hostname() function. The
ssl.match_hostname() was deprecated in Python 3.7. OpenSSL performs
hostname matching since Python 3.7, Python no longer uses the
ssl.match_hostname() function. Patch by Victor Stinner.
: Document the  object used in the venv.EnvBuilder
class, and add the new environmentâs library path to it.
: Remove the ssl.wrap_socket() function, deprecated in
Python 3.7: instead, create a ssl.SSLContext object and call its
ssl.SSLContext.wrap_socket method. Any package that still uses
ssl.wrap_socket() is broken and insecure. The function neither sends
a SNI TLS extension nor validates server hostname. Code is subject to
 Improper Certificate Validation. Patch by Victor Stinner.
: Remove the ssl.RAND_pseudo_bytes() function, deprecated in
Python 3.6: use os.urandom() or ssl.RAND_bytes() instead.
Patch by Victor Stinner.
: : Remove the pure Python implementation of
hashlib.pbkdf2_hmac(), deprecated in Python 3.10. Python 3.10 and
newer requires OpenSSL 1.1.1 (): this OpenSSL version provides a
C implementation of pbkdf2_hmac() which is faster. Patch by
Victor Stinner.
: : Remove the  attribute of
gzip.GzipFile, deprecated since Python 2.6, use the
 attribute instead. In write mode, the
 attribute added  file extension if it was not
present. Patch by Victor Stinner.
: run the asyncio.PidfdChildWatcher on the running loop,
this allows event loops to run subprocesses when there is no default event
loop running on the main thread
: Remove io.OpenWrapper and _pyio.OpenWrapper, deprecated
in Python 3.10: just use  instead. The 
() function is a built-in function. Since Python 3.10,
_pyio.open() is also a static method. Patch by Victor Stinner.
: Fix  crash after jump caused by a null pointer
dereference. Patch by Kumar Aditya.
: Manual instantiation of ssl.SSLSession objects is no
longer allowed as it lead to misconfigured instances that crashed the
interpreter when attributes where accessed on them.
: inspect.iscoroutinefunction(),
inspect.isgeneratorfunction(), and
inspect.isasyncgenfunction() now properly return  for
duck-typed function-like objects like instances of
unittest.mock.AsyncMock.
This makes inspect.iscoroutinefunction() consistent with the
behavior of asyncio.iscoroutinefunction().  Patch by Mehdi ABAAKOUK.

================================================================================

# Changelog - Library (Part 6)

: Fix a regression in the  where statement objects
were not properly cleared and reset after use in cursor iters. The
regression was introduced by PR 27884 in Python 3.11a1. Patch by Erlend E.
Aasland.
: Add keyword argument all_errors to
asyncio.create_connection so that multiple connection errors can be
raised as an ExceptionGroup.
: Officially deprecate from importlib.abc classes moved to
importlib.resources.abc.
: Prevent error when activating venv in nested fish instances.
: Pickle  by name.
: Fix repr of enum of generic aliases.
: Revert the  memory leak when a match is terminated by a
signal or memory allocation failure as the implemented fix caused a major
performance regression.
: Fix double closing of file description in .
: Fixed a regression when copy.copy()-ing 
with multiple flag members.
: Fixed names and __module__ value of  classes
ReferenceType, ,
CallableProxyType. It makes them pickleable.
: Fix an issue where  utilities could report missing or
incorrect position information in the presence of  entries.
: Set __future__.annotations to have a 
mandatoryRelease to indicate that it is currently âTBDâ.
: Emscripten and WASI have no home directory and cannot provide
 user site directory.
: copy.copy() and copy.deepcopy() now always raise a
TypeError if __reduce__() returns a tuple with length 6 instead of
silently ignore the 6th item or produce incorrect result.
: Fix a multiprocessing bug where a global named resource (such as
a semaphore) could leak when a child process is spawned (as opposed to
forked).
: Fixed a case where dataclasses would try to add __weakref__
into the  for a dataclass that specified
weakref_slot=True when it was already defined in one of its bases.
This resulted in a  upon the new class being created.
:  now correctly detects DML queries with leading
comments. Patch by Erlend E. Aasland.
: Update sqlite3.Cursor.rowcount when a DML statement has
run to completion. This fixes the row count for SQL queries like 
 . Patch by Erlend E. Aasland.
: Expose  and FICLONERANGE constants in
. Patch by Illia Volochii.
: Deprecate sqlite3.version and
sqlite3.version_info.
: Suppress writing an XML declaration in open files in
ElementTree.write() with encoding='unicode' and
xml_declaration=None.
: Support splitting of unpacked arbitrary-length tuple over
 and TypeVarTuple parameters. For example:

================================================================================

# Changelog - Library (Part 7)

 *Ts][*tuple[int,  ->  *tuple[int, 
 T][*tuple[int,  -> A[*tuple[int,  

================================================================================

# Changelog - Library (Part 8)


: Fix the importlib.resources.as_file() context manager to
remove the temporary file if destroyed late during Python finalization:
keep a local reference to the os.remove() function. Patch by Victor
Stinner.
: Make multiprocessing.Pool raise an exception if
maxtasksperchild is not  or a positive int.
: Add os.PIDFD_NONBLOCK flag to open a file descriptor
for a process with os.pidfd_open() in non-blocking mode. Patch by
Kumar Aditya.
: Implement Enum.__contains__ that returns  or
 to replace the deprecated behaviour that would sometimes raise a
.
: Make asyncio task groups prevent child tasks from being GCed
: Changed argparse.ArgumentParser to use
filesystem encoding and error handler instead of default text
encoding to read arguments from file (e.g. fromfile_prefix_chars
option). This change affects Windows; argument file should be encoded with
UTF-8 instead of ANSI Codepage.
: Accessing the pathlib.PurePath.parents sequence of an
absolute path using negative index values produced incorrect results.
: Add the ability for logging.config.dictConfig() to
usefully configure QueueHandler and
QueueListener as a pair, and add
logging.getHandlerByName() and logging.getHandlerNames() APIs
to allow access to handlers by name.
: The  module was removed per the schedule in
.
: Replace  statements with  AssertionError() in
BaseHandler so that the tested behaviour is maintained
running with optimizations .
: Fix broken asyncio.Semaphore when acquire is cancelled.
: The locale.resetlocale() function is deprecated and will
be removed in Python 3.13. Use locale.setlocale(locale.LC_ALL, 
instead. Patch by Victor Stinner.
: Added  attribute to  module for use
with  tasks.
: shutil.make_archive() no longer temporarily changes the
current working directory during creation of standard  or tar
archives.
: The re.template() function and the corresponding
re.TEMPLATE and  flags are restored after they were
removed in 3.11.0b1, but they are now deprecated, so they might be removed
from Python 3.13.
: Search in some strings (platform dependent i.e [U+0xFFFF,
U+0x0100] on Windows or [U+0xFFFFFFFF, U+0x00010000] on Linux 64-bit) are
now up to 10 times faster.
: Fix  raised in  if the pattern
contains a character range with upper bound lower than lower bound (e.g.
). Now such ranges are interpreted as empty ranges.
: No longer convert the database argument of
sqlite3.connect() to bytes before passing it to the factory.
: In a very special case, the email package tried to append the
nonexistent InvalidHeaderError to the defect list. It should have been
InvalidHeaderDefect.
: Fix ast.unparse() when ImportFrom.level is 
: Now  and get_instructions() handle
operand values for instructions prefixed by EXTENDED_ARG_QUICK. Patch
by Sam Gross and Donghee Na.
: Fix venv.ensure_directories() to accept
pathlib.Path arguments in addition to  paths. Patch
by David Foster.
: Removed the  argument from os.popen() that was
added in 3.11b1.
: Fix function sqlite.connect() and the
sqlite.Connection constructor on non-UTF-8 locales. Also, they
now support bytes paths non-decodable with the current FS encoding.
: Added  to , which has the
same size as the  type in C.
: Fixed crash resulting from calling bisect.insort() or
bisect.insort_left() with the key argument not equal to .
: subprocess now fails early on Emscripten and WASI
platforms to work around missing  on WASI.
: Removed many old deprecated  features:
 method aliases, undocumented and broken
 method assertDictContainsSubset,
undocumented TestLoader.loadTestsFromModule parameter use_load_tests, and
an underscored alias of the TextTestResult class.
: Allow multi-element reprs emitted by  to be
pretty-printed using configurable indentation.
: Fixed ast.unparse() for empty tuples in the assignment
target context.
: utcfromtimestamp() no longer attempts
to resolve  in the pure Python implementation, since the fold is
never 1 in UTC. In addition to being slightly faster in the common case,
this also prevents some errors when the timestamp is close to
datetime.min.  Patch by Paul Ganssle.
: Removed randrange() functionality deprecated since Python 3.10.
Formerly, randrange(10.0) losslessly converted to randrange(10). Now, it
raises a TypeError. Also, the exception raised for non-integral values
such as randrange(10.5) or randrange(â10â) has been changed from
ValueError to TypeError.
: Add pathlib.Path.walk() as an alternative to
.
: Fix pathlib.Path.rglob() for empty pattern.
: Allow  filters to return a
logging.LogRecord instance so that filters attached to
logging.Handlers can enrich records without side effects on
other handlers.
: Fix a bug in  where  would raise an
error instead of returning an empty list when 0 arguments were supplied if
choice was also defined in parser.add_argument.
: Remove undocumented  features deprecated in Python
3.10:

================================================================================

# Changelog - Library (Part 9)

sqlite3.enable_shared_cache()
sqlite3.OptimizedUnicode

Patch by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 10)

: Fix an issue that occurred after interrupting
threading.Condition.notify().
: The statistics.median_grouped() function now always return a
float. Formerly, it did not convert the input type when for sequences of
length one.
: The pathlib.Path deprecated method  has been
removed. Use 3.10âs hardlink_to() method instead as
its semantics are consistent with that of
symlink_to().
: Removed configparser module APIs: the
SafeConfigParser class alias, the ParsingError.filename property
and parameter, and the ConfigParser.readfp method, all of which were
deprecated since Python 3.2.
: Add __class_getitem__() to
csv.DictReader and csv.DictWriter, allowing them to be
parameterized at runtime. Patch by Marc Mueller.
: Add  and SO_USER_COOKIE constants to
.
: ElementTree method
 and function
tostring() now use the text fileâs encoding
(âUTF-8â if not available) instead of locale encoding in XML declaration
when encoding="unicode" is specified.
: os.path.splitdrive() now understands DOS device paths with
UNC links (beginning ). Contributed by Barney Gale.
: Apply more strict rules for numerical group references and group
names in regular expressions. Only sequence of ASCII digits is now
accepted as a numerical reference. The group name in bytes patterns and
replacement strings can now only contain ASCII letters and digits and
underscore.
: Worker processes for
concurrent.futures.ProcessPoolExecutor are no longer spawned on
demand (a feature added in 3.9) when the multiprocessing context start
method is  as that can lead to deadlocks in the child processes
due to a fork happening while threads are running.
: Move imports in SharedMemory methods
to module level so that they can be executed late in python finalization.
: Remove an unhandled error case in the C implementation of calls
to datetime.fromtimestamp with
no time zone (i.e. getting a local time from an epoch timestamp). This
should have no user-facing effect other than giving a possibly more
accurate error message when called with timestamps that fall on
10000-01-01 in the local time. Patch by Paul Ganssle.
: Improve performance of urllib.request.getproxies_environment
when there are many environment variables
: Speed up the regular expression substitution (functions
 and  and corresponding re.Pattern
methods) for replacement strings containing group references by 2â3
times.
: Fix findtext in the xml module to only give an empty string when
the text attribute is set to .
: Deprecate current default auto() behavior:  In 3.13 the default
will be for for auto() to always return the largest member value
incremented by 1, and to raise if incompatible value types are used.
: Fixed an issue with inconsistent trailing slashes in tarfile
longname directories.
: zipfile.ZipFile now raises zipfile.BadZipFile
instead of ValueError when reading a corrupt zip file in which the
central directory offset is negative.
: Fix handling of the  argument in subclasses of
property().
:  dependency  is now detected with
pkg-config.
: The constructors for DictWriter and
DictReader now coerce the fieldnames argument to a
 if it is an iterator.
: Fix dataclasses.asdict() crash when
collections.defaultdict is present in the attributes.
: Add an index_pages parameter to support using non-default index
page names.
: Drop support for  on .
: Order the contents of zipapp archives, to make builds more
reproducible.
: Implement pathlib.Path.is_mount() for Windows paths.
: In QueueHandler, clear stack_info from
 to prevent stack trace from being written twice.
: Fix the formatting for   and   in the
operator precedence table when using the  system.
: Improve error message when trying to subclass an instance of
typing.TypeVar, typing.ParamSpec,
typing.TypeVarTuple, etc. Based on patch by Gregory Beauregard.
: Restrict use of sockets instead of pipes for stdin of
subprocesses created by  to AIX platform only.
: Set doctest.DocTest.lineno to  when an object
does not have .
: Fix  environment isolation for subprocess
running .
: Fix  incorrect traceback when futureâs exception
is raised multiple times. Patch by Kumar Aditya.
: Add support of context managers in : methods
enterContext() and
enterClassContext() of class
, method
enterAsyncContext() of class
IsolatedAsyncioTestCase and function
unittest.enterModuleContext().
: Enable fast seeking of uncompressed unencrypted
zipfile.ZipExtFile
: Fix incorrect parsing of Windows registry proxy settings
: Add threading.get_native_id() support for DragonFly BSD.
Patch by David Carlier.
: The tempfile.NamedTemporaryFile function has a new
optional parameter delete_on_close
: Give the same callback function for when the overlapped
operation is done to the functions , , ,
,  and  inside IocpProactor.
: Fixed collections.UserDict.get() to not call
__missing__() when a value is not found. This matches the behavior
of . Patch by Bar Harel.
:  now uses f-strings internally instead of
str.format.
: Add  parameter to
asyncio.loop.shutdown_default_executor(). The default value is
, which means the executor will be given an unlimited amount of
time. When called from asyncio.Runner or asyncio.run(), the
default timeout is 5 minutes.
: sqlite3.Connection.iterdump() now handles databases that
use AUTOINCREMENT in one or more tables.
: Support reading wave files with the WAVE_FORMAT_EXTENSIBLE
format in the  module.
: Allow adjustable compression level for tarfile streams in
tarfile.open().

================================================================================

# Changelog - Library (Part 11)

: Fix hang on Windows in subprocess.wait_closed() in
 with ProactorEventLoop. Patch by Kumar
Aditya.

: tkinter.Text.count() raises now an exception for options
starting with â-â instead of silently ignoring them.

: The  module no longer accepts bytes-like paths, like
 and memoryview types: only the exact
 type is accepted for bytes strings. Patch by Victor
Stinner.

: Added itertools.batched() to batch data into lists of a given
length with the last list possibly being shorter than the others.

: Update the bundled copies of pip and setuptools to versions 22.3
and 65.5.0 respectively.

: A createSocket() method
was added to SysLogHandler.

: Fix bug in urllib.parse.urlparse() that causes certain
port numbers containing whitespace, underscores, plus and minus signs, or
non-ASCII digits to be incorrectly accepted.

: Make sys.setprofile() and sys.settrace() functions
reentrant. They can no long fail with: RuntimeError("Cannot  
        installed"). Patch
by Victor Stinner.

: Allow  to pass along  variables to
 and  when they do not impact path resolution

================================================================================

# Changelog - Library (Part 12)

: Deprecated
asyncio.AbstractEventLoopPolicy.get_child_watcher() and
asyncio.AbstractEventLoopPolicy.set_child_watcher() methods to be
removed in Python 3.14. Patch by Kumar Aditya.

: On macOS, fix a crash in syslog.syslog() in multi-threaded
applications. On macOS, the libc  function is not thread-safe,
so syslog.syslog() no longer releases the GIL to call it. Patch by
Victor Stinner.

: Release the GIL when creating  objects on
Unix.

: Wrap network errors consistently in urllib FTP support, so the
test suite doesnât fail when a network is available but the public
internet is not reachable.

: The child watcher classes
MultiLoopChildWatcher,
FastChildWatcher and SafeChildWatcher
are deprecated and will be removed in Python 3.14. Patch by Kumar Aditya.

: Change default child watcher to
PidfdChildWatcher on Linux systems which supports it.
Patch by Kumar Aditya.

: Earlier in 3.11 we deprecated
asyncio.Task.cancel("message"). We realized we were too harsh, and
have undeprecated it.

: Do not rely solely on __cached__ on modules; code will also
support __spec__.cached.

: Replace deprecated application/javascript with
text/javascript in . See . Patch by Noam
Cohen.

================================================================================

# Changelog - Library (Part 13)

: Apply changes from importlib_resources 5.8 and 5.9:
Traversable.joinpath provides a concrete implementation. 
now supports directories of resources.

: Remove deprecated importlib.util.set_loader() and
importlib.util.module_for_loader() from importlib.util.

: Change deprecate warning message in  from

deprecated    value!=None

: Fixes AttributeError when subprocess.check_output()
is used with argument input=None and either of the arguments
 or  are used.

:  and AttributeError spelling suggestions
provided since  are now also emitted by the pure Python
 module. Tests for those suggestions now exercise both
implementations to ensure they are equivalent. Patch by Carl Friedrich
Bolz-Tereick and Åukasz Langa.

:  now uses inspect.get_annotations() to
examine the annotations on class objects.

: Removed deprecated interfaces in importlib.metadata (entry
points accessed as dictionary, implicit dictionary construction of
sequence of EntryPoint objects, mutablility of EntryPoints result,
access of entry point by index). entry_points now has a simpler, more
straightforward API (returning EntryPoints).

================================================================================

# Changelog - Library (Part 14)

: Avoid spurious tracebacks from  when default
executor cleanup is delayed until after the event loop is closed (e.g. as
the result of a keyboard interrupt).

: gzip.GzipFile.read() reads 10% faster.

: Avoid a crash in the C version of
asyncio.Future.remove_done_callback() when an evil argument is
passed.

: Remove tokenize.NL check from .

: Make Semaphore run faster.

: Fix generation of the default name of
tkinter.Checkbutton. Previously, checkbuttons in different parent
widgets could have the same short name and share the same state if
arguments ânameâ and âvariableâ are not specified. Now they are globally
unique.

: fix Flag to use boundary CONFORM

This restores previous Flag behavior of allowing flags with non-sequential
values to be combined; e.g.

class Skip(Flag):         TWO = 2         EIGHT = 8

Skip.TWO | Skip.EIGHT -> <Skip.TWO|EIGHT: 10>

: Update bundled libexpat to 2.4.9

: Fix race condition in  where
process_exited() called before the
pipe_data_received() leading to
inconsistent output. Patch by Kumar Aditya.

================================================================================

# Changelog - Library (Part 15)

: Pass the correct contextvars.Context when a 
exception handler is called on behalf of a task or callback handle. This
adds a new  method, get_context, and also a new 
method with the same name. If this method is not found on a task object
(perhaps because it is a third-party library that does not yet provide
this method), the context prevailing at the time the exception handler is
called is used.

: Fixed check in multiprocessing.resource_tracker that
guarantees that the length of a write to a pipe is not greater than
.

: Reduce urllib.parse.quote_from_bytes() memory use on large
values.

Contributed by Dennis Sweeney.

: Corrected type annotation for dataclass attribute
pstats.FunctionProfile.ncalls to be .

: Update unicodedata database to Unicode 15.0.0.

: Fix undefined behaviour in struct.unpack().

: Improve performance of  for large ndb/gdb databases.
Previously this would call  which would iterate over all keys
â the answer (empty or not) is known after the first key.

: Fix the faulthandler implementation of
faulthandler.register(signal, chain=True) if the sigaction()
function is not available: donât call the previous signal handler if itâs
NULL. Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 16)

: Correct conversion of numbers.Rationalâs to
.

: Speed up bisect.bisect() functions by taking advantage of
type-stability.

: Fraction hashes are now cached.

: In , fix missing field  and incorrect
__module__ in _AnnotatedAlias.

: Remove types._cell_factory from module namespace.

: Fix  of  subclasses.

: Work around missing socket functions in
âs .

: Fix TypeVarTuple.__typing_prepare_subst__.  was
not raised when using more than one TypeVarTuple, like   in
type alias substitutions.

: Add match_args, , , and weakref_slot
to _DataclassParams.

: In , fix overeager replacement of ââ in
formatting annotations.

: Added a getChildren() method to
logging.Logger, to get the immediate child loggers of a logger.

: Use double caching for compiled RE patterns.

: Fixed a minor performance regression in
threading.Event.__init__()

: Fix asyncio.streams.StreamReaderProtocol to keep a
strong reference to the created task, so that itâs not garbage collected

: Fix a bug in unicodedata: east_asian_width used to
return the wrong value for unassigned characters; and for yet unassigned,
but reserved characters.

================================================================================

# Changelog - Library (Part 17)

: Fix a performance regression in logging
TimedRotatingFileHandler. Only check for special files when the rollover
time has passed.

: Fix unused  parameter in the  class in
xml.dom.minidom.

: Add AttrDict to JSON module for use with object_hook.

: Fix handling compiler warnings (SyntaxWarning and
DeprecationWarning) in codeop.compile_command() when checking for
incomplete input. Previously it emitted warnings and raised a SyntaxError.
Now it always returns  for incomplete input without emitting any
warnings.

: Fix incorrect condition that causes sys.thread_info.name to
be wrong on pthread platforms.

: Fix a bug in the makeunicodedata.py script leading to about
13 KiB of space saving in the unicodedata module, specifically the
character decomposition data.

: Remove an incompatible change from  that caused a
regression that ignored the utf8 in ZipInfo.flag_bits. Patch by Pablo
Galindo.

: Add  strftime format code (generates tzoffset with colons
as separator), see strftime() and strptime() Behavior.

: Fix asyncio.Runner to call
asyncio.set_event_loop() only once to avoid calling
attach_loop() multiple times on child
watchers. Patch by Kumar Aditya.

================================================================================

# Changelog - Library (Part 18)

: Fix unittest.IsolatedAsyncioTestCase to set event loop
before calling setup functions. Patch by Kumar Aditya.

: Speed up urllib.parse.quote_from_bytes() by replacing a
list comprehension with .

: Add support for computing Spearmanâs correlation coefficient to
the existing statistics.correlation() function.

: Fix  shutdown handler so it respects
MemoryHandler.flushOnClose.

: When a task catches asyncio.CancelledError and raises
some other error, the other error should generally not silently be
suppressed.

: The HTTPStatus enum offers a couple
of properties to indicate the HTTP status category e.g.
HTTPStatus.OK.is_success.

: Update bundled pip to 22.2.2.

: Fix asyncio.TaskGroup to propagate exception when
asyncio.CancelledError was replaced with another exception by a
context manager. Patch by Kumar Aditya and Guido van Rossum.

: Fix incorrect joining of relative Windows paths with drives in
pathlib.PurePath initializer.

: Faster json.dumps() when sorting of keys is not requested
(default).

: Improve Signature.bind error
message for missing keyword-only arguments.

: Update bundled pip to 22.2.1.

================================================================================

# Changelog - Library (Part 19)

: Fix GC crash when deallocating _lsprof.Profiler by
untracking it before calling any callbacks. Patch by Kumar Aditya.

: Fail gracefully if  or
 is raised when loading  methods. This
may happen when trying to load  on a Linux kernel with  enabled.

: Fix asyncio.run() for asyncio.Task
implementations without uncancel() method. Patch by
Kumar Aditya.

: Fix IndexError in parsing invalid date in the 
module.

: Upgrade bundled setuptools to 63.2.0.

: Upgrade bundled pip to 22.2.

: Fix check for existence of os.EFD_CLOEXEC,
os.EFD_NONBLOCK and os.EFD_SEMAPHORE flags on older
kernel versions where these flags are not present. Patch by Kumar Aditya.

: Fix concurrent.futures.Executor.map() to cancel the
currently waiting on future on an error - e.g. TimeoutError or
KeyboardInterrupt.

: Fix a  regression where  and 
were incorrectly relayed from  to the
Connection factory. The regression was introduced in
3.11a1 with PR 24421 (). Patch by Erlend E. Aasland.

: Fix  module didnât support  option
when  is true.

: Fixed flickering of the turtle window when the tracer is turned
off. Patch by Shin-myoung-serp.

================================================================================

# Changelog - Library (Part 20)

: Add deprecation warning for enum member.member access (e.g.
Color.RED.BLUE). Remove EnumMeta.__getattr__.

: Ensure that timeouts scheduled with asyncio.Timeout
that have already expired are delivered promptly.

: wsgiref.types.InputStream.__iter__() should return
Iterator[bytes], not Iterable[bytes]. Patch by Shantanu Jain.

: Replaced assert with exception in ast.parse(), when
feature_version has an invalid major version. Patch by Shantanu Jain.

: Add  command-line interface.
Patch by Erlend Aasland.

: Replace  with _PyUnicodeWriter in
JSON encoder and StringIO and remove the  implementation.

: Remove -c/--clock and  CLI options of
. The options had been deprecated since Python 3.3 and the
functionality was removed in Python 3.7. Patch by Shantanu Jain.

: Fix refleak in _io.TextIOWrapper.reconfigure. Patch by Kumar
Aditya.

: Fix binding of unix socket to empty address on Linux to use an
available address from the abstract namespace, instead of â0â.

: Fix crash when deallocating an instance of a subclass of
_multiprocessing.SemLock. Patch by Kumar Aditya.

: Add random.binomialvariate().

================================================================================

# Changelog - Library (Part 21)

: Allow asyncio.StreamWriter.drain() to be awaited
concurrently by multiple tasks. Patch by Kumar Aditya.

: When called with capture_locals=True, the 
module functions swallow exceptions raised from calls to  on
local variables of frames. This is in order to prioritize the original
exception over rendering errors.  An indication of the failure is printed
in place of the missing value.  (Patch by Simon-Martin Schroeder).

: Fix  subprocess transport to kill process cleanly
when process is blocked and avoid RuntimeError when loop is closed.
Patch by Kumar Aditya.

: SSLContext.set_default_verify_paths() now releases the GIL
around SSL_CTX_set_default_verify_paths call. The function call
performs I/O and CPU intensive work.

: Deprecate aliases typing.Hashable and
typing.Sized

: An undocumented    benchmark is moved into
 suite of pyperformance. Patch by Oleg Iarygin.

: Fix subclassing complex generics with type variables in
. Previously an error message saying   
     Generic[...] was shown.  no longer
populates __parameters__ with the __parameters__ of a Python
class.

: Remove the long-deprecated module_repr() from
.

================================================================================

# Changelog - Library (Part 22)

: The ability to access the other values of an enum on an enum
(e.g. Color.RED.BLUE) has been restored in order to fix a performance
regression.

: Fix asyncio.run() and
unittest.IsolatedAsyncioTestCase to always the set event loop as
it was done in Python 3.10 and earlier. Patch by Kumar Aditya.

: Allow setting the attributes of reprlib.Repr during object
initialization

: Port static types of _multiprocessing module to heap types.
Patch by Kumar Aditya.

: Fix crash in struct.Struct when it was not completely
initialized by initializing it in .  Patch by Kumar
Aditya.

: Re-entrant calls to sys.setprofile() and
sys.settrace() now raise RuntimeError. Patch by Pablo
Galindo.

: Fix bug where linecache.getline() fails on bad files with
UnicodeDecodeError or SyntaxError. It now returns an empty
string as per the documentation.

: Once a asyncio.TaskGroup has started shutting down
(i.e., at least one task has failed and the task group has started
cancelling the remaining tasks), it should not be possible to add new
tasks to the task group.

================================================================================

# Changelog - Library (Part 23)

: : Remove the ElementTree.Element.copy()
method of the pure Python implementation, deprecated in Python 3.10, use
the copy.copy() function instead. The C implementation of
 has no  method, only a __copy__() method.
Patch by Victor Stinner.

: : Remove find_loader() and find_module()
methods, deprecated in Python 3.10: use the find_spec() method
instead. See  for the rationale. Patch by Victor Stinner.

: shlex.split(): Passing  for  argument now
raises an exception, rather than reading . The feature
was deprecated in Python 3.9. Patch by Victor Stinner.

: Strip trailing spaces in  text output.

: Fix memory leak in pickle.Pickler when looking up
dispatch_table. Patch by Kumar Aditya.

: Deprecate  default adapters and converters. Patch by Erlend E. Aasland.

: Fixed types of  module to be immutable. Patch by
Kumar Aditya.

: Now raise ValueError when  or an empty string are
passed to Distribution.from_name (and other callers).

: shutil.make_archive() now passes the  argument
to custom archivers which support it.

================================================================================

# Changelog - Library (Part 24)

: The  module now has the opcodes for pseudo
instructions (those which are used by the compiler during code generation
but then removed or replaced by real opcodes before the final bytecode is
emitted).

: Removed undocumented   . Use  
 test.test_codecs.EncodedFileTest instead.

: Made _struct.Struct GC-tracked in order to fix a
reference leak in the  module.

: Removed undocumented  argument of   .
Use   
test.test_base64.LegacyBase64TestCase.test_encodebytes instead.

: Remove the locale.format() function, deprecated in Python
3.7: use locale.format_string() instead. Patch by Victor Stinner.

: Remove the ssl.match_hostname() function. The
ssl.match_hostname() was deprecated in Python 3.7. OpenSSL performs
hostname matching since Python 3.7, Python no longer uses the
ssl.match_hostname() function. Patch by Victor Stinner.

: Document the  object used in the venv.EnvBuilder
class, and add the new environmentâs library path to it.

================================================================================

# Changelog - Library (Part 25)

: Remove the ssl.wrap_socket() function, deprecated in
Python 3.7: instead, create a ssl.SSLContext object and call its
ssl.SSLContext.wrap_socket method. Any package that still uses
ssl.wrap_socket() is broken and insecure. The function neither sends
a SNI TLS extension nor validates server hostname. Code is subject to
 Improper Certificate Validation. Patch by Victor Stinner.

: Remove the ssl.RAND_pseudo_bytes() function, deprecated in
Python 3.6: use os.urandom() or ssl.RAND_bytes() instead.
Patch by Victor Stinner.

: : Remove the pure Python implementation of
hashlib.pbkdf2_hmac(), deprecated in Python 3.10. Python 3.10 and
newer requires OpenSSL 1.1.1 (): this OpenSSL version provides a
C implementation of pbkdf2_hmac() which is faster. Patch by
Victor Stinner.

: : Remove the  attribute of
gzip.GzipFile, deprecated since Python 2.6, use the
 attribute instead. In write mode, the
 attribute added  file extension if it was not
present. Patch by Victor Stinner.

: run the asyncio.PidfdChildWatcher on the running loop,
this allows event loops to run subprocesses when there is no default event
loop running on the main thread

================================================================================

# Changelog - Library (Part 26)

: Remove io.OpenWrapper and _pyio.OpenWrapper, deprecated
in Python 3.10: just use  instead. The 
() function is a built-in function. Since Python 3.10,
_pyio.open() is also a static method. Patch by Victor Stinner.

: Fix  crash after jump caused by a null pointer
dereference. Patch by Kumar Aditya.

: Manual instantiation of ssl.SSLSession objects is no
longer allowed as it lead to misconfigured instances that crashed the
interpreter when attributes where accessed on them.

: inspect.iscoroutinefunction(),
inspect.isgeneratorfunction(), and
inspect.isasyncgenfunction() now properly return  for
duck-typed function-like objects like instances of
unittest.mock.AsyncMock.

This makes inspect.iscoroutinefunction() consistent with the
behavior of asyncio.iscoroutinefunction().  Patch by Mehdi ABAAKOUK.

: Fix a regression in the  where statement objects
were not properly cleared and reset after use in cursor iters. The
regression was introduced by PR 27884 in Python 3.11a1. Patch by Erlend E.
Aasland.

: Add keyword argument all_errors to
asyncio.create_connection so that multiple connection errors can be
raised as an ExceptionGroup.

================================================================================

# Changelog - Library (Part 27)

: Officially deprecate from importlib.abc classes moved to
importlib.resources.abc.

: Prevent error when activating venv in nested fish instances.

: Fix repr of enum of generic aliases.

: Revert the  memory leak when a match is terminated by a
signal or memory allocation failure as the implemented fix caused a major
performance regression.

: Fix double closing of file description in .

: Fixed a regression when copy.copy()-ing 
with multiple flag members.

: Fixed names and __module__ value of  classes
ReferenceType, ,
CallableProxyType. It makes them pickleable.

: Fix an issue where  utilities could report missing or
incorrect position information in the presence of  entries.

: Set __future__.annotations to have a 
mandatoryRelease to indicate that it is currently âTBDâ.

: Emscripten and WASI have no home directory and cannot provide
 user site directory.

: copy.copy() and copy.deepcopy() now always raise a
TypeError if __reduce__() returns a tuple with length 6 instead of
silently ignore the 6th item or produce incorrect result.

: Fix a multiprocessing bug where a global named resource (such as
a semaphore) could leak when a child process is spawned (as opposed to
forked).

================================================================================

# Changelog - Library (Part 28)

: Fixed a case where dataclasses would try to add __weakref__
into the  for a dataclass that specified
weakref_slot=True when it was already defined in one of its bases.
This resulted in a  upon the new class being created.

:  now correctly detects DML queries with leading
comments. Patch by Erlend E. Aasland.

: Update sqlite3.Cursor.rowcount when a DML statement has
run to completion. This fixes the row count for SQL queries like 
 . Patch by Erlend E. Aasland.

: Expose  and FICLONERANGE constants in
. Patch by Illia Volochii.

: Deprecate sqlite3.version and
sqlite3.version_info.

: Suppress writing an XML declaration in open files in
ElementTree.write() with encoding='unicode' and
xml_declaration=None.

: Support splitting of unpacked arbitrary-length tuple over
 and TypeVarTuple parameters. For example:

List:
*Ts][*tuple[int,  ->  *tuple[int, 
 T][*tuple[int,  -> A[*tuple[int,

*Ts][*tuple[int,  ->  *tuple[int,

T][*tuple[int,  -> A[*tuple[int,

: Fix the importlib.resources.as_file() context manager to
remove the temporary file if destroyed late during Python finalization:
keep a local reference to the os.remove() function. Patch by Victor
Stinner.

================================================================================

# Changelog - Library (Part 29)

: Make multiprocessing.Pool raise an exception if
maxtasksperchild is not  or a positive int.

: Add os.PIDFD_NONBLOCK flag to open a file descriptor
for a process with os.pidfd_open() in non-blocking mode. Patch by
Kumar Aditya.

: Implement Enum.__contains__ that returns  or
 to replace the deprecated behaviour that would sometimes raise a
.

: Make asyncio task groups prevent child tasks from being GCed

: Changed argparse.ArgumentParser to use
filesystem encoding and error handler instead of default text
encoding to read arguments from file (e.g. fromfile_prefix_chars
option). This change affects Windows; argument file should be encoded with
UTF-8 instead of ANSI Codepage.

: Accessing the pathlib.PurePath.parents sequence of an
absolute path using negative index values produced incorrect results.

: Add the ability for logging.config.dictConfig() to
usefully configure QueueHandler and
QueueListener as a pair, and add
logging.getHandlerByName() and logging.getHandlerNames() APIs
to allow access to handlers by name.

: The  module was removed per the schedule in
.

: Replace  statements with  AssertionError() in
BaseHandler so that the tested behaviour is maintained
running with optimizations .

================================================================================

# Changelog - Library (Part 30)

: Fix broken asyncio.Semaphore when acquire is cancelled.

: The locale.resetlocale() function is deprecated and will
be removed in Python 3.13. Use locale.setlocale(locale.LC_ALL, 
instead. Patch by Victor Stinner.

: Added  attribute to  module for use
with  tasks.

: shutil.make_archive() no longer temporarily changes the
current working directory during creation of standard  or tar
archives.

: The re.template() function and the corresponding
re.TEMPLATE and  flags are restored after they were
removed in 3.11.0b1, but they are now deprecated, so they might be removed
from Python 3.13.

: Search in some strings (platform dependent i.e [U+0xFFFF,
U+0x0100] on Windows or [U+0xFFFFFFFF, U+0x00010000] on Linux 64-bit) are
now up to 10 times faster.

: Fix  raised in  if the pattern
contains a character range with upper bound lower than lower bound (e.g.
). Now such ranges are interpreted as empty ranges.

: No longer convert the database argument of
sqlite3.connect() to bytes before passing it to the factory.

: In a very special case, the email package tried to append the
nonexistent InvalidHeaderError to the defect list. It should have been
InvalidHeaderDefect.

================================================================================

# Changelog - Library (Part 31)

: Fix ast.unparse() when ImportFrom.level is

: Now  and get_instructions() handle
operand values for instructions prefixed by EXTENDED_ARG_QUICK. Patch
by Sam Gross and Donghee Na.

: Fix venv.ensure_directories() to accept
pathlib.Path arguments in addition to  paths. Patch
by David Foster.

: Removed the  argument from os.popen() that was
added in 3.11b1.

: Fix function sqlite.connect() and the
sqlite.Connection constructor on non-UTF-8 locales. Also, they
now support bytes paths non-decodable with the current FS encoding.

: Added  to , which has the
same size as the  type in C.

: Fixed crash resulting from calling bisect.insort() or
bisect.insort_left() with the key argument not equal to .

: subprocess now fails early on Emscripten and WASI
platforms to work around missing  on WASI.

: Removed many old deprecated  features:
 method aliases, undocumented and broken
 method assertDictContainsSubset,
undocumented TestLoader.loadTestsFromModule parameter use_load_tests, and
an underscored alias of the TextTestResult class.

: Allow multi-element reprs emitted by  to be
pretty-printed using configurable indentation.

: Fixed ast.unparse() for empty tuples in the assignment
target context.

================================================================================

# Changelog - Library (Part 32)

: utcfromtimestamp() no longer attempts
to resolve  in the pure Python implementation, since the fold is
never 1 in UTC. In addition to being slightly faster in the common case,
this also prevents some errors when the timestamp is close to
datetime.min.  Patch by Paul Ganssle.

: Removed randrange() functionality deprecated since Python 3.10.
Formerly, randrange(10.0) losslessly converted to randrange(10). Now, it
raises a TypeError. Also, the exception raised for non-integral values
such as randrange(10.5) or randrange(â10â) has been changed from
ValueError to TypeError.

: Add pathlib.Path.walk() as an alternative to
.

: Fix pathlib.Path.rglob() for empty pattern.

: Allow  filters to return a
logging.LogRecord instance so that filters attached to
logging.Handlers can enrich records without side effects on
other handlers.

: Fix a bug in  where  would raise an
error instead of returning an empty list when 0 arguments were supplied if
choice was also defined in parser.add_argument.

: Remove undocumented  features deprecated in Python
3.10:

List:
sqlite3.enable_shared_cache()
sqlite3.OptimizedUnicode

sqlite3.enable_shared_cache()

sqlite3.OptimizedUnicode

Patch by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 33)

: Fix an issue that occurred after interrupting
threading.Condition.notify().

: The statistics.median_grouped() function now always return a
float. Formerly, it did not convert the input type when for sequences of
length one.

: The pathlib.Path deprecated method  has been
removed. Use 3.10âs hardlink_to() method instead as
its semantics are consistent with that of
symlink_to().

: Removed configparser module APIs: the
SafeConfigParser class alias, the ParsingError.filename property
and parameter, and the ConfigParser.readfp method, all of which were
deprecated since Python 3.2.

: Add __class_getitem__() to
csv.DictReader and csv.DictWriter, allowing them to be
parameterized at runtime. Patch by Marc Mueller.

: Add  and SO_USER_COOKIE constants to
.

: ElementTree method
 and function
tostring() now use the text fileâs encoding
(âUTF-8â if not available) instead of locale encoding in XML declaration
when encoding="unicode" is specified.

: os.path.splitdrive() now understands DOS device paths with
UNC links (beginning ). Contributed by Barney Gale.

================================================================================

# Changelog - Library (Part 34)

: Apply more strict rules for numerical group references and group
names in regular expressions. Only sequence of ASCII digits is now
accepted as a numerical reference. The group name in bytes patterns and
replacement strings can now only contain ASCII letters and digits and
underscore.

: Worker processes for
concurrent.futures.ProcessPoolExecutor are no longer spawned on
demand (a feature added in 3.9) when the multiprocessing context start
method is  as that can lead to deadlocks in the child processes
due to a fork happening while threads are running.

: Move imports in SharedMemory methods
to module level so that they can be executed late in python finalization.

: Remove an unhandled error case in the C implementation of calls
to datetime.fromtimestamp with
no time zone (i.e. getting a local time from an epoch timestamp). This
should have no user-facing effect other than giving a possibly more
accurate error message when called with timestamps that fall on
10000-01-01 in the local time. Patch by Paul Ganssle.

: Improve performance of urllib.request.getproxies_environment
when there are many environment variables

================================================================================

# Changelog - Library (Part 35)

: Speed up the regular expression substitution (functions
 and  and corresponding re.Pattern
methods) for replacement strings containing group references by 2â3
times.

: Fix findtext in the xml module to only give an empty string when
the text attribute is set to .

: Deprecate current default auto() behavior:  In 3.13 the default
will be for for auto() to always return the largest member value
incremented by 1, and to raise if incompatible value types are used.

: Fixed an issue with inconsistent trailing slashes in tarfile
longname directories.

: zipfile.ZipFile now raises zipfile.BadZipFile
instead of ValueError when reading a corrupt zip file in which the
central directory offset is negative.

: Fix handling of the  argument in subclasses of
property().

:  dependency  is now detected with
pkg-config.

: The constructors for DictWriter and
DictReader now coerce the fieldnames argument to a
 if it is an iterator.

: Fix dataclasses.asdict() crash when
collections.defaultdict is present in the attributes.

: Add an index_pages parameter to support using non-default index
page names.

: Drop support for  on .

: Order the contents of zipapp archives, to make builds more
reproducible.

================================================================================

# Changelog - Library (Part 36)

: Implement pathlib.Path.is_mount() for Windows paths.

: In QueueHandler, clear stack_info from
 to prevent stack trace from being written twice.

: Fix the formatting for   and   in the
operator precedence table when using the  system.

: Improve error message when trying to subclass an instance of
typing.TypeVar, typing.ParamSpec,
typing.TypeVarTuple, etc. Based on patch by Gregory Beauregard.

: Restrict use of sockets instead of pipes for stdin of
subprocesses created by  to AIX platform only.

: Set doctest.DocTest.lineno to  when an object
does not have .

: Fix  environment isolation for subprocess
running .

: Fix  incorrect traceback when futureâs exception
is raised multiple times. Patch by Kumar Aditya.

: Add support of context managers in : methods
enterContext() and
enterClassContext() of class
, method
enterAsyncContext() of class
IsolatedAsyncioTestCase and function
unittest.enterModuleContext().

: Enable fast seeking of uncompressed unencrypted
zipfile.ZipExtFile

: Fix incorrect parsing of Windows registry proxy settings

: Add threading.get_native_id() support for DragonFly BSD.
Patch by David Carlier.

================================================================================

# Changelog - Library (Part 37)

: The tempfile.NamedTemporaryFile function has a new
optional parameter delete_on_close

: Give the same callback function for when the overlapped
operation is done to the functions , , ,
,  and  inside IocpProactor.

: Fixed collections.UserDict.get() to not call
__missing__() when a value is not found. This matches the behavior
of . Patch by Bar Harel.

:  now uses f-strings internally instead of
str.format.

: Add  parameter to
asyncio.loop.shutdown_default_executor(). The default value is
, which means the executor will be given an unlimited amount of
time. When called from asyncio.Runner or asyncio.run(), the
default timeout is 5 minutes.

: sqlite3.Connection.iterdump() now handles databases that
use AUTOINCREMENT in one or more tables.

: Support reading wave files with the WAVE_FORMAT_EXTENSIBLE
format in the  module.

: Allow adjustable compression level for tarfile streams in
tarfile.open().

================================================================================

# Changelog - Documentation (Part 1)

List:
: Remove extra row
: Deprecated tools  suspicious and rstlint.py are now
removed. They have been replaced by sphinx-lint.
: Fix  in c domain ref target syntax via a  patch,
so it works as intended to disable ref target resolution.
: Fraction literals now support whitespace around the forward
slash, Fraction('2  .
: Improve discoverability of the higher level concurrent.futures
module by providing clearer links from the lower level threading and
multiprocessing modules.
: Whatâs New 3.11 now has instructions for how to provide compiler
and linker flags for Tcl/Tk and OpenSSL on RHEL 7 and CentOS 7.
: Clarified the conflicting advice given in the 
documentation about ast.literal_eval() being âsafeâ for use on
untrusted input while at the same time warning that it can crash the
process. The latter statement is true and is deemed unfixable without a
large amount of work unsuitable for a bugfix. So we keep the warning and
no longer claim that literal_eval is safe.
: Fix stylesheet not working in Windows CHM htmlhelp docs and add
warning that they are deprecated. Contributed by C.A.M. Gerlach.
: Replaced incorrectly written true/false values in documentation.
Patch by Robert OâShea
: Update library documentation with availability information on WebAssembly platforms wasm32-emscripten and
wasm32-wasi.
: Use consistent syntax for platform availability. The directive
now supports a content body and emits a warning when it encounters an
unknown platform.
: Document the  style protocol type
sqlite3.PrepareProtocol.
: Document a limitation in ThreadPoolExecutor where its exit
handler is executed before any handlers in atexit.
: Clarify  behavior when
How to use the connection context manager.
: Align  argument specs with the actual
implementation.
: The minimum Sphinx version required to build the documentation
is now 3.2.
: Augmented documentation of asyncio.create_task(). Clarified the
need to keep strong references to tasks and added a code snippet detailing
how to do this.
: Clarify that  and PYTHONWARNINGS are
matched literally and case-insensitively, rather than as regular
expressions, in .
: Update tutorial introduction output to use 3.10+ SyntaxError
invalid range.
: Added release dates for âWhatâs New in Python 3.Xâ for 3.0, 3.1,
3.2, 3.8 and 3.10
: Document that pathlib.PurePath does not collapse
initial double slashes because they denote UNC paths.
: Document that inspect.getdoc(),
inspect.getmodule(), and inspect.getsourcefile() might return
.
: The  documentation now also mentions other whitespace
characters, which make it harder to understand the diff output.
: Overhaul the Error Handlers documentation in
.
: Document tkinter.Tk args.

================================================================================

# Changelog - Documentation (Part 2)

: Deprecated tools  suspicious and rstlint.py are now
removed. They have been replaced by sphinx-lint.

: Fix  in c domain ref target syntax via a  patch,
so it works as intended to disable ref target resolution.

: Fraction literals now support whitespace around the forward
slash, Fraction('2  .

: Improve discoverability of the higher level concurrent.futures
module by providing clearer links from the lower level threading and
multiprocessing modules.

: Whatâs New 3.11 now has instructions for how to provide compiler
and linker flags for Tcl/Tk and OpenSSL on RHEL 7 and CentOS 7.

: Clarified the conflicting advice given in the 
documentation about ast.literal_eval() being âsafeâ for use on
untrusted input while at the same time warning that it can crash the
process. The latter statement is true and is deemed unfixable without a
large amount of work unsuitable for a bugfix. So we keep the warning and
no longer claim that literal_eval is safe.

: Fix stylesheet not working in Windows CHM htmlhelp docs and add
warning that they are deprecated. Contributed by C.A.M. Gerlach.

: Replaced incorrectly written true/false values in documentation.
Patch by Robert OâShea

================================================================================

# Changelog - Documentation (Part 3)

: Update library documentation with availability information on WebAssembly platforms wasm32-emscripten and
wasm32-wasi.

: Use consistent syntax for platform availability. The directive
now supports a content body and emits a warning when it encounters an
unknown platform.

: Document the  style protocol type
sqlite3.PrepareProtocol.

: Document a limitation in ThreadPoolExecutor where its exit
handler is executed before any handlers in atexit.

: Clarify  behavior when
How to use the connection context manager.

: Align  argument specs with the actual
implementation.

: The minimum Sphinx version required to build the documentation
is now 3.2.

: Augmented documentation of asyncio.create_task(). Clarified the
need to keep strong references to tasks and added a code snippet detailing
how to do this.

: Clarify that  and PYTHONWARNINGS are
matched literally and case-insensitively, rather than as regular
expressions, in .

: Update tutorial introduction output to use 3.10+ SyntaxError
invalid range.

: Added release dates for âWhatâs New in Python 3.Xâ for 3.0, 3.1,
3.2, 3.8 and 3.10

: Document that pathlib.PurePath does not collapse
initial double slashes because they denote UNC paths.

================================================================================

# Changelog - Documentation (Part 4)

: Document that inspect.getdoc(),
inspect.getmodule(), and inspect.getsourcefile() might return
.

: The  documentation now also mentions other whitespace
characters, which make it harder to understand the diff output.

: Overhaul the Error Handlers documentation in
.

: Document tkinter.Tk args.

================================================================================

# Changelog - Tests (Part 1)

List:
: On Windows, when the Python test suite is run with the 
option, the ANSI code page is now used as the encoding for the stdout
temporary file, rather than using UTF-8 which can lead to decoding errors.
Patch by Victor Stinner.
: Fixed the failure of repeated runs of test.test_unittest
caused by side effects in test_dotted_but_module_not_loaded.
: Mitigate the inherent race condition from using
find_unused_port() in testSockName() by trying to find an unused port a
few times before failing. Patch by Ross Burton.
: Lib/test/test_asyncio/test_ssl.py exposed a bug in the
macOS kernel where intense concurrent load on non-blocking sockets
occasionally causes errno.ENOBUFS (âNo buffer space availableâ)
to be emitted. FB11063974 filed with Apple, in the mean time as a
workaround buffer size used in tests on macOS is decreased to avoid
intermittent failures.  Patch by Fantix King.
: Fix problem with  test_get_ciphers on systems
that require perfect forward secrecy (PFS) ciphers.
: Make multiprocessing test case test_shared_memory_recreate
parallel-safe.
: Move tests for importlib.resources into
test_importlib.resources.
: Updated tests to use preferred location for
importlib.resources ABCs.
: Add a regression test for  exponentional slowdown when
using rjsmin.
: Added more tests for dataclasses to cover behavior with
data descriptor-based fields.
:  is now checking for supported TLS version and
protocols in more tests.
: Tests now check for DAC override capability instead of relying
on os.geteuid().
: Rename test_tk to test_tkinter, and rename test_ttk_guionly to
test_ttk. Patch by Victor Stinner.
: Move Lib/ctypes/test/ to Lib/test/test_ctypes/. Patch by
Victor Stinner.
: In test_bdb.StateTestCase.test_skip, avoid including auxiliary
importers.
: Provide nicer error reporting from subprocesses in
test_venv.EnsurePipTest.test_with_pip.
: Add test cases for PyNumber_ToBase() that take a large
number or a non-int object as parameter.
: test_asyncio, test_logging, test_socket and test_socketserver
now create AF_UNIX domains in the current directory to no longer fail with
OSError("AF_UNIX    if the temporary directory (the
 environment variable) is too long. Patch by Victor
Stinner.
: regrtest now checks if a test leaks temporary files or
directories if run with -jN option. Patch by Victor Stinner.
: run_tests.py now handles cross compiling env vars correctly
and pass HOSTRUNNER to regression tests.
: test_modulefinder now creates a temporary directory in
ModuleFinderTest.setUp() instead of module scope.
: Fix issue with test_unicode test_raiseMemError. The test case
now use test.support.calcobjsize to calculate size of PyUnicode
structs. sys.getsizeof() may return different size when string has
UTF-8 memory.
: WASI does not have a  syscall. os.chmod() is
now a dummy function on WASI. Skip all tests that depend on working
os.chmod().
: Skip tests on WASI that require symlinks with absolute paths.
: Increase calendar test coverage for
calendar.LocaleTextCalendar.formatweekday().
: Skip symlink tests on WASI. wasmtime uses openat2(2) with
RESOLVE_BENEATH flag, which prevents symlinks with absolute paths.
: Fix test_embed for out-of-tree builds. Patch by Kumar
Aditya.
: Fixing tests that fail when running with optimizations ()
in test_imaplib.py.
: Fixing tests that fail when running with optimizations ()
in test_zipimport.py
: Fixing tests that fail when running with optimizations ()
in test_py_compile.py
: Fixing tests that fail when running with optimizations ()
in test_sys_settrace.py.
: Fixing tests that fail when running with optimizations ()
in _test_multiprocessing.py
: Skip test_shutil.TestCopy.test_copyfile_nonexistent_dir test
on AIX as the test uses a trailing slash to force the OS consider the path
as a directory, but on AIX the trailing slash has no effect and is
considered as a file.
: Remove unused test.support.BasicTestRunner. Patch by Jelle
Zijlstra.
: Create a GitHub Actions workflow for verifying bundled pip and
setuptools. Patch by Illia Volochii and Adam Turner.

================================================================================

# Changelog - Tests (Part 2)

: On Windows, when the Python test suite is run with the 
option, the ANSI code page is now used as the encoding for the stdout
temporary file, rather than using UTF-8 which can lead to decoding errors.
Patch by Victor Stinner.

: Fixed the failure of repeated runs of test.test_unittest
caused by side effects in test_dotted_but_module_not_loaded.

: Mitigate the inherent race condition from using
find_unused_port() in testSockName() by trying to find an unused port a
few times before failing. Patch by Ross Burton.

: Lib/test/test_asyncio/test_ssl.py exposed a bug in the
macOS kernel where intense concurrent load on non-blocking sockets
occasionally causes errno.ENOBUFS (âNo buffer space availableâ)
to be emitted. FB11063974 filed with Apple, in the mean time as a
workaround buffer size used in tests on macOS is decreased to avoid
intermittent failures.  Patch by Fantix King.

: Fix problem with  test_get_ciphers on systems
that require perfect forward secrecy (PFS) ciphers.

: Make multiprocessing test case test_shared_memory_recreate
parallel-safe.

: Move tests for importlib.resources into
test_importlib.resources.

: Updated tests to use preferred location for
importlib.resources ABCs.

================================================================================

# Changelog - Tests (Part 3)

: Add a regression test for  exponentional slowdown when
using rjsmin.

: Added more tests for dataclasses to cover behavior with
data descriptor-based fields.

:  is now checking for supported TLS version and
protocols in more tests.

: Tests now check for DAC override capability instead of relying
on os.geteuid().

: Rename test_tk to test_tkinter, and rename test_ttk_guionly to
test_ttk. Patch by Victor Stinner.

: Move Lib/ctypes/test/ to Lib/test/test_ctypes/. Patch by
Victor Stinner.

: In test_bdb.StateTestCase.test_skip, avoid including auxiliary
importers.

: Provide nicer error reporting from subprocesses in
test_venv.EnsurePipTest.test_with_pip.

: Add test cases for PyNumber_ToBase() that take a large
number or a non-int object as parameter.

: test_asyncio, test_logging, test_socket and test_socketserver
now create AF_UNIX domains in the current directory to no longer fail with
OSError("AF_UNIX    if the temporary directory (the
 environment variable) is too long. Patch by Victor
Stinner.

: regrtest now checks if a test leaks temporary files or
directories if run with -jN option. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 4)

: run_tests.py now handles cross compiling env vars correctly
and pass HOSTRUNNER to regression tests.

: test_modulefinder now creates a temporary directory in
ModuleFinderTest.setUp() instead of module scope.

: Fix issue with test_unicode test_raiseMemError. The test case
now use test.support.calcobjsize to calculate size of PyUnicode
structs. sys.getsizeof() may return different size when string has
UTF-8 memory.

: WASI does not have a  syscall. os.chmod() is
now a dummy function on WASI. Skip all tests that depend on working
os.chmod().

: Skip tests on WASI that require symlinks with absolute paths.

: Increase calendar test coverage for
calendar.LocaleTextCalendar.formatweekday().

: Skip symlink tests on WASI. wasmtime uses openat2(2) with
RESOLVE_BENEATH flag, which prevents symlinks with absolute paths.

: Fix test_embed for out-of-tree builds. Patch by Kumar
Aditya.

: Fixing tests that fail when running with optimizations ()
in test_imaplib.py.

: Fixing tests that fail when running with optimizations ()
in test_zipimport.py

: Fixing tests that fail when running with optimizations ()
in test_py_compile.py

: Fixing tests that fail when running with optimizations ()
in test_sys_settrace.py.

================================================================================

# Changelog - Tests (Part 5)

: Fixing tests that fail when running with optimizations ()
in _test_multiprocessing.py

: Skip test_shutil.TestCopy.test_copyfile_nonexistent_dir test
on AIX as the test uses a trailing slash to force the OS consider the path
as a directory, but on AIX the trailing slash has no effect and is
considered as a file.

: Remove unused test.support.BasicTestRunner. Patch by Jelle
Zijlstra.

: Create a GitHub Actions workflow for verifying bundled pip and
setuptools. Patch by Illia Volochii and Adam Turner.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix the build process of clang compiler for
_bootstrap_python if LTO optimization is applied. Patch by
Matthias GÃ¶rgens and Donghee Na.
: wasm32-emscripten builds for browsers now include
concurrent.futures for  and unittest.mock.
: CPython now uses the ThinLTO option as the default policy if the
Clang compiler accepts the flag. Patch by Donghee Na.
: Ensure that Windows releases built with
Tools\msi\buildrelease.bat are upgradable to and from official Python
releases.
: Shared module targets now depend on new MODULE_DEPS
variable, which includes EXPORTSYMS. This fixes a build order issue on
unsupported AIX platform.
: wasm32-emscripten platform no longer builds 
module, getresuid(), getresgid(), and their setters.
The APIs are stubs and not functional.
: Add a new --with-dsymutil configure option to link debug
information in macOS. Patch by Pablo Galindo.
: Use the BOLT post-link optimizer to improve performance,
particularly on medium-to-large applications.
: Remove the  --with-cxx-main build option: it didnât
work for many years. Remove the  variable from  and
. Patch by Victor Stinner.
: Fix a regression in  script that caused some header
checks to ignore custom . The regression was introduced in
.
: wasm32-wasi builds no longer depend on WASIXâs pthread stubs.
Python now has its own stubbed pthread API.
: Python now detects missing  function in WASI and works
around some missing , , and 
constants.
: Python now skips missing  functions and methods on
WASI. WASI can only create sockets from existing fd / accept and has no
netdb.
: Platforms wasm32-unknown-emscripten and
wasm32-unknown-wasi have been promoted to  tier 3 platform
support.
: Fixed  module build issue on GCC when compiling with
LTO and pydebug. Debug builds no longer force inlining of functions.
: Fix the possible performance regression of
PyObject_Free() compiled with MSVC version 1932.
:  now uses custom flags like ZLIB_CFLAGS and
 when searching for headers and libraries.
: deepfreeze.py now supports code object with frozensets that
contain incompatible, unsortable types.
: Build and test with OpenSSL 1.1.1q
: Dependencies of  and  module are now
detected in  script with pkg-config. Only  /
 are detected automatically. The old  library is not
configured automatically. Workaround for missing  or 
library has been removed.
: Fix building  extension without pkg-config.
:  module dependencies are now detected by configure.
:  now works around an issue with sed on macOS and
uses correct CFLAGS for object files that end up in a shared extension.
Module CFLAGS are used before PY_STDMODULE_CFLAGS to avoid clashes with
system headers.
: C extension modules are now built by  and 
instead of  and .
: The , , and  scripts are now generated
and installed by  instead of .
: Updated pegen regeneration script on Windows to find and use
Python 3.9 or higher.  Prior to this, pegen regeneration already required
3.9 or higher, but the script may have used lower versions of Python.
: Address race condition in  when installing a PGO
build. All  and  targets now depend on  target.
:  now detects and reports  support tiers.
: Fix Modules/Setup.stdlib.in rule for  extension.
: va_start() with two parameters, like va_start(args,
 is now required to build Python. va_start() is no longer
called with a single parameter. Patch by Kumar Aditya.
: Python now always use the  and  printf formats to
format a  or Py_ssize_t number. Building Python 3.12
requires a C11 compiler, so these printf formats are now always supported.
Patch by Victor Stinner.
: Disable pymalloc and increase stack size on wasm32-wasi.
: Drop invalid compiler switch  for HP aCC on HP-UX.
Patch by Michael Osipov.

================================================================================

# Changelog - Build (Part 2)

: Fix the build process of clang compiler for
_bootstrap_python if LTO optimization is applied. Patch by
Matthias GÃ¶rgens and Donghee Na.

: wasm32-emscripten builds for browsers now include
concurrent.futures for  and unittest.mock.

: CPython now uses the ThinLTO option as the default policy if the
Clang compiler accepts the flag. Patch by Donghee Na.

: Ensure that Windows releases built with
Tools\msi\buildrelease.bat are upgradable to and from official Python
releases.

: Shared module targets now depend on new MODULE_DEPS
variable, which includes EXPORTSYMS. This fixes a build order issue on
unsupported AIX platform.

: wasm32-emscripten platform no longer builds 
module, getresuid(), getresgid(), and their setters.
The APIs are stubs and not functional.

: Add a new --with-dsymutil configure option to link debug
information in macOS. Patch by Pablo Galindo.

: Use the BOLT post-link optimizer to improve performance,
particularly on medium-to-large applications.

: Remove the  --with-cxx-main build option: it didnât
work for many years. Remove the  variable from  and
. Patch by Victor Stinner.

================================================================================

# Changelog - Build (Part 3)

: Fix a regression in  script that caused some header
checks to ignore custom . The regression was introduced in
.

: wasm32-wasi builds no longer depend on WASIXâs pthread stubs.
Python now has its own stubbed pthread API.

: Python now detects missing  function in WASI and works
around some missing , , and 
constants.

: Python now skips missing  functions and methods on
WASI. WASI can only create sockets from existing fd / accept and has no
netdb.

: Platforms wasm32-unknown-emscripten and
wasm32-unknown-wasi have been promoted to  tier 3 platform
support.

: Fixed  module build issue on GCC when compiling with
LTO and pydebug. Debug builds no longer force inlining of functions.

: Fix the possible performance regression of
PyObject_Free() compiled with MSVC version 1932.

:  now uses custom flags like ZLIB_CFLAGS and
 when searching for headers and libraries.

: deepfreeze.py now supports code object with frozensets that
contain incompatible, unsortable types.

: Build and test with OpenSSL 1.1.1q

================================================================================

# Changelog - Build (Part 4)

: Dependencies of  and  module are now
detected in  script with pkg-config. Only  /
 are detected automatically. The old  library is not
configured automatically. Workaround for missing  or 
library has been removed.

: Fix building  extension without pkg-config.

:  module dependencies are now detected by configure.

:  now works around an issue with sed on macOS and
uses correct CFLAGS for object files that end up in a shared extension.
Module CFLAGS are used before PY_STDMODULE_CFLAGS to avoid clashes with
system headers.

: C extension modules are now built by  and 
instead of  and .

: The , , and  scripts are now generated
and installed by  instead of .

: Updated pegen regeneration script on Windows to find and use
Python 3.9 or higher.  Prior to this, pegen regeneration already required
3.9 or higher, but the script may have used lower versions of Python.

: Address race condition in  when installing a PGO
build. All  and  targets now depend on  target.

:  now detects and reports  support tiers.

: Fix Modules/Setup.stdlib.in rule for  extension.

================================================================================

# Changelog - Build (Part 5)

: va_start() with two parameters, like va_start(args,
 is now required to build Python. va_start() is no longer
called with a single parameter. Patch by Kumar Aditya.

: Python now always use the  and  printf formats to
format a  or Py_ssize_t number. Building Python 3.12
requires a C11 compiler, so these printf formats are now always supported.
Patch by Victor Stinner.

: Disable pymalloc and increase stack size on wasm32-wasi.

: Drop invalid compiler switch  for HP aCC on HP-UX.
Patch by Michael Osipov.

================================================================================

# Changelog - Windows (Part 1)

List:
: Fixes multiprocessing spawning child processes on Windows
from a virtual environment to ensure that child processes that also use
multiprocessing to spawn more children will recognize that they are
in a virtual environment.
: Fix  launcher handling of 
option when default preferences have been set in environment variables or
configuration files.
: Fix possible crashes caused by the use of uninitialized
variables when pass invalid arguments in os.system() on Windows and
in Windows-specific modules (like ).
: Made Python Launcher for Windows install per-user by default (unless an all
users install already exists), and clarify some text in the installer.
: The  directory is no longer installed on Windows
: Update libffi to 3.4.3
: Fixes a potential buffer overrun in .
: Fixes the Windows launcher not using the compatible
interpretation of default tags found in configuration files when no tag
was passed to the command.
: Fix pcbuild.proj to clean previous instances of output
files in Python\deepfreeze and Python\frozen_modules directories
on Windows. Patch by Charlie Zhao.
: Updates  code getting the Windows version to use
native Windows Management Instrumentation (WMI) queries to determine OS
version, type, and architecture.
: Make certain requirements of the Windows Store package optional
to allow installing on earlier updates of Windows.
: Enable the enable_load_extension()
 API.
: Fixes some issues where the Windows installer would incorrectly
detect certain features of an existing install when upgrading.
: Restores the behaviour of Python Launcher for Windows for /usr/bin/env
shebang lines, which will now search  for an executable
matching the given command. If none is found, the usual search process is
used.
: Fixes the unsuccessful removal of the HTML document directory
when uninstalling with Windows msi.
: Fix Python Launcher for Windows handling of  commands (it was
incorrectly expecting a  prefix on keys) and crashes when reading
per-user configuration file.
: Fix Python Launcher for Windows handling of command lines where it is only
passed a short executable name.
: Allow virtual environments to correctly launch when they have
spaces in the path.
: Fix incorrect handling of shebang lines in py.exe launcher
:  will now remove trailing spaces from path
components when extracting files on Windows.
: Drag and drop of files onto Python files in Windows Explorer has
been enabled for Windows ARM64.
: os.get_terminal_size() now attempts to read the size from
any provided handle, rather than only supporting file descriptors 0, 1 and
2.
: Ensures that  will prefer an active virtual
environment over default tags specified with environment variables or
through a  file.
: Explicitly disable incremental linking for non-Debug builds
:  no longer throws RuntimeError:   
 on interpreter exit after asynchronous socket activity. Patch by
Oleg Iarygin.
: Update Windows installer to use SQLite 3.38.4.
: Accept os.PathLike for the argument to winsound.PlaySound
: Support native Windows case-insensitive path comparisons by
using LCMapStringEx instead of str.lower() in
ntpath.normcase(). Add LCMapStringEx to the 
module.
: Prevent installation on unsupported Windows versions.

================================================================================

# Changelog - Windows (Part 2)

: Fixes multiprocessing spawning child processes on Windows
from a virtual environment to ensure that child processes that also use
multiprocessing to spawn more children will recognize that they are
in a virtual environment.

: Fix  launcher handling of 
option when default preferences have been set in environment variables or
configuration files.

: Fix possible crashes caused by the use of uninitialized
variables when pass invalid arguments in os.system() on Windows and
in Windows-specific modules (like ).

: Made Python Launcher for Windows install per-user by default (unless an all
users install already exists), and clarify some text in the installer.

: The  directory is no longer installed on Windows

: Update libffi to 3.4.3

: Fixes a potential buffer overrun in .

: Fixes the Windows launcher not using the compatible
interpretation of default tags found in configuration files when no tag
was passed to the command.

: Fix pcbuild.proj to clean previous instances of output
files in Python\deepfreeze and Python\frozen_modules directories
on Windows. Patch by Charlie Zhao.

================================================================================

# Changelog - Windows (Part 3)

: Updates  code getting the Windows version to use
native Windows Management Instrumentation (WMI) queries to determine OS
version, type, and architecture.

: Make certain requirements of the Windows Store package optional
to allow installing on earlier updates of Windows.

: Enable the enable_load_extension()
 API.

: Fixes some issues where the Windows installer would incorrectly
detect certain features of an existing install when upgrading.

: Restores the behaviour of Python Launcher for Windows for /usr/bin/env
shebang lines, which will now search  for an executable
matching the given command. If none is found, the usual search process is
used.

: Fixes the unsuccessful removal of the HTML document directory
when uninstalling with Windows msi.

: Fix Python Launcher for Windows handling of  commands (it was
incorrectly expecting a  prefix on keys) and crashes when reading
per-user configuration file.

: Fix Python Launcher for Windows handling of command lines where it is only
passed a short executable name.

: Allow virtual environments to correctly launch when they have
spaces in the path.

: Fix incorrect handling of shebang lines in py.exe launcher

================================================================================

# Changelog - Windows (Part 4)

:  will now remove trailing spaces from path
components when extracting files on Windows.

: Drag and drop of files onto Python files in Windows Explorer has
been enabled for Windows ARM64.

: os.get_terminal_size() now attempts to read the size from
any provided handle, rather than only supporting file descriptors 0, 1 and
2.

: Ensures that  will prefer an active virtual
environment over default tags specified with environment variables or
through a  file.

: Explicitly disable incremental linking for non-Debug builds

:  no longer throws RuntimeError:   
 on interpreter exit after asynchronous socket activity. Patch by
Oleg Iarygin.

: Update Windows installer to use SQLite 3.38.4.

: Accept os.PathLike for the argument to winsound.PlaySound

: Support native Windows case-insensitive path comparisons by
using LCMapStringEx instead of str.lower() in
ntpath.normcase(). Add LCMapStringEx to the 
module.

: Prevent installation on unsupported Windows versions.

================================================================================

# Changelog - macOS

List:
: The macOS 13 SDK includes support for the  and
 system calls. Using the  option with either
os.mkfifo() or os.mknod() could result in a segfault if
cpython is built with the macOS 13 SDK but run on an earlier version of
macOS. Prevent this by adding runtime support for detection of these
system calls (âweaklinkingâ) as is done for other newer syscalls on macOS.

: The macOS 13 SDK includes support for the  and
 system calls. Using the  option with either
os.mkfifo() or os.mknod() could result in a segfault if
cpython is built with the macOS 13 SDK but run on an earlier version of
macOS. Prevent this by adding runtime support for detection of these
system calls (âweaklinkingâ) as is done for other newer syscalls on macOS.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Fix a bug in the previous bugfix that caused IDLE to not start
when run with 3.10.8, 3.12.0a1, and at least Microsoft Python 3.10.2288.0
installed without the Lib/test package.  3.11.0 was never affected.
: Document handling of extensions in Save As dialogs.
: Include prompts when saving Shell (interactive input and
output).
: Fix the Shell context menu copy-with-prompts bug of copying an
extra line when one selects whole lines.
: In the Edit menu, move   and add a new separator.
: Enable using IDLEâs module browser with .pyw files.
: Add .pyi as a recognized extension for IDLE on macOS.    This
allows opening stub files by double clicking on them in the Finder.

: Fix a bug in the previous bugfix that caused IDLE to not start
when run with 3.10.8, 3.12.0a1, and at least Microsoft Python 3.10.2288.0
installed without the Lib/test package.  3.11.0 was never affected.

: Document handling of extensions in Save As dialogs.

: Include prompts when saving Shell (interactive input and
output).

: Fix the Shell context menu copy-with-prompts bug of copying an
extra line when one selects whole lines.

: In the Edit menu, move   and add a new separator.

================================================================================

# Changelog - IDLE (Part 2)

: Enable using IDLEâs module browser with .pyw files.

: Add .pyi as a recognized extension for IDLE on macOS.    This
allows opening stub files by double clicking on them in the Finder.

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: Remove ptags and eptags scripts.
: Remove the Tools/demo/ directory which contained old demo
scripts. A copy can be found in the old-demos project.  Patch by Victor Stinner.
: Remove outdated example scripts of the Tools/scripts/
directory. A copy can be found in the old-demos project. Patch by Victor Stinner.
: The wasm_build.py script now pre-builds Emscripten ports,
checks for broken EMSDK versions, and warns about pkg-config env vars.
: The new tool Tools/wasm/wasm_builder.py automates configure,
compile, and test steps for building CPython on WebAssembly platforms.
: Fix handling of module docstrings in
Tools/i18n/pygettext.py.
: Add script Tools/scripts/check_modules.py to check and
validate builtin and shared extension modules. The script also handles
Modules/Setup and will eventually replace .
: Fix Argument Clinic output to custom file destinations. Patch by
Erlend E. Aasland.
: Allow parameters named  and  with custom C
names in Argument Clinic. Patch by Erlend E. Aasland
: The Tools/scripts/parseentities.py script used to parse
HTML4 entities has been removed.

: Remove ptags and eptags scripts.

================================================================================

# Changelog - Tools/Demos (Part 2)

: Remove the Tools/demo/ directory which contained old demo
scripts. A copy can be found in the old-demos project.  Patch by Victor Stinner.

: Remove outdated example scripts of the Tools/scripts/
directory. A copy can be found in the old-demos project. Patch by Victor Stinner.

: The wasm_build.py script now pre-builds Emscripten ports,
checks for broken EMSDK versions, and warns about pkg-config env vars.

: The new tool Tools/wasm/wasm_builder.py automates configure,
compile, and test steps for building CPython on WebAssembly platforms.

: Fix handling of module docstrings in
Tools/i18n/pygettext.py.

: Add script Tools/scripts/check_modules.py to check and
validate builtin and shared extension modules. The script also handles
Modules/Setup and will eventually replace .

: Fix Argument Clinic output to custom file destinations. Patch by
Erlend E. Aasland.

: Allow parameters named  and  with custom C
names in Argument Clinic. Patch by Erlend E. Aasland

: The Tools/scripts/parseentities.py script used to parse
HTML4 entities has been removed.

================================================================================

# Changelog - C API (Part 1)

List:
: The PyUnicode_FSDecoder() function no longer accepts
bytes-like paths, like  and memoryview types:
only the exact  type is accepted for bytes strings. Patch by
Victor Stinner.
: Add PyType_Watch() and related APIs to allow callbacks
on PyType_Modified().
: Lazily create and cache  attributes for better
performance for code getters.
: Configuration for the integer string conversion length
limitation now lives in the PyConfig C API struct.
: Extensions classes that set tp_dictoffset and
tp_weaklistoffset lose the support for multiple inheritance, but are
now safe. Extension classes should use Py_TPFLAGS_MANAGED_DICT
and Py_TPFLAGS_MANAGED_WEAKREF instead.
: An unrecognized format character in
PyUnicode_FromFormat() and PyUnicode_FromFormatV() now
sets a SystemError. In previous versions it caused all the rest of
the format string to be copied as-is to the result string, and any extra
arguments discarded.
: Restore the 3.10 behavior for multiple inheritance of C
extension classes that store their dictionary at the end of the struct.
: Support C extensions using managed dictionaries by setting the
Py_TPFLAGS_MANAGED_DICT flag.
: API for implementing vectorcall
(Py_TPFLAGS_HAVE_VECTORCALL, PyVectorcall_NARGS() and
PyVectorcall_Call()) was added to the limited API and stable ABI.
: Fix sign placement when specifying width or precision in
PyUnicode_FromFormat() and PyUnicode_FromFormatV(). Patch
by Philip Georgi.
: The Py_TPFLAGS_HAVE_VECTORCALL flag is now removed
from a class when the classâs __call__() method is
reassigned. This makes vectorcall safe to use with mutable types (i.e.
heap types without the 
flag). Mutable types that do not override
 now inherit the
Py_TPFLAGS_HAVE_VECTORCALL flag.
: Creating  
with mutable bases is deprecated and is planned to be disabled in Python
3.14.
: Adds unstable C-API functions _PyObject_VisitManagedDict and
_PyObject_ClearManagedDict to allow C extensions to allow the VM to
manage their objectâs dictionaries.
: Added PyCode_GetVarnames(), PyCode_GetCellvars()
and PyCode_GetFreevars() for accessing co_varnames,
co_cellvars and co_freevars respectively via the C API.
: Fix SystemError raised when
PyArg_ParseTupleAndKeywords() is used with  in  but
without PY_SSIZE_T_CLEAN defined.
: Python again uses C-style casts for most casting operations when
compiled with C++. This may trigger compiler warnings, if they are enabled
with e.g. -Wold-style-cast or -Wzero-as-null-pointer-constant
options for .
: The following frame functions and type are now directly
available with  <Python.h>, itâs no longer needed to add
 <frameobject.h>:

================================================================================

# Changelog - C API (Part 2)

PyFrame_Check()
PyFrame_GetBack()
PyFrame_GetBuiltins()
PyFrame_GetGenerator()
PyFrame_GetGlobals()
PyFrame_GetLasti()
PyFrame_GetLocals()
PyFrame_Type

Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 3)

: Fix the compatibility of the Python C API with C++ older than
C++11. Patch by Victor Stinner.
: Avoid defining the static_assert when compiling with C++ 11,
where this is a keyword and redefining it can lead to undefined behavior.
Patch by Pablo Galindo
: PyType_FromMetaclass() (and other PyType_From*
functions) now check that offsets and the base classâs
tp_basicsize fit in the new classâs
tp_basicsize.
: Add two new public functions to the public C-API,
PyEval_SetProfileAllThreads() and
PyEval_SetTraceAllThreads(), that allow to set tracing and
profiling functions in all running threads in addition to the calling one.
Also, two analogous functions to the  module
(threading.setprofile_all_threads() and
threading.settrace_all_threads()) that allow to do the same from
Python. Patch by Pablo Galindo
: Add C++ overloads for _Py_CAST_impl() to handle 0/NULL.  This
will allow C++ extensions that pass 0 or NULL to macros using _Py_CAST()
to continue to compile.
: Slot IDs in PyType_Spec may not be repeated. The documentation
was updated to mention this. For some cases of repeated slots,
PyType_FromSpec and related functions will now raise an exception.
: Fix C++ compiler warnings when casting function arguments to
. Patch by Serge Guelton.
: Deprecate global configuration variables, like
Py_IgnoreEnvironmentFlag, in the documentation: the
Py_InitializeFromConfig() API should be instead. Patch by Victor
Stinner.
: Deprecate global configuration variable like
Py_IgnoreEnvironmentFlag: the Py_InitializeFromConfig()
API should be instead. Patch by Victor Stinner.
: Ensures changes to PyConfig.module_search_paths are
ignored unless PyConfig.module_search_paths_set is set
: Avoid mixing declarations and code in the C API to fix the
compiler warning: âISO C90 forbids mixed declarations and codeâ
[-Werror=declaration-after-statement]. Patch by Victor Stinner.
: Remove the  header file. There was never any public
tokenizer C API. The  header file was only designed to be used
by Python internals. Patch by Victor Stinner.
: Remove legacy Unicode APIs based on Py_UNICODE*.
: Remove the PyUnicode_InternImmortal() function and the
SSTATE_INTERNED_IMMORTAL macro. Patch by Victor Stinner.
: Add new function PyFunction_SetVectorcall() to the C API
which sets the vectorcall field of a given PyFunctionObject.
Warning: extensions using this API must preserve the behavior of the
unaltered function!

================================================================================

# Changelog - C API (Part 4)

: Fixed an assert that prevented PyRun_InteractiveOne from
providing tracebacks when parsing from the provided FD.
: The PyType_FromSpec() API will now find and use a
metaclass based on the provided bases. An error will be raised if there is
a metaclass conflict.

: The PyUnicode_FSDecoder() function no longer accepts
bytes-like paths, like  and memoryview types:
only the exact  type is accepted for bytes strings. Patch by
Victor Stinner.

: Add PyType_Watch() and related APIs to allow callbacks
on PyType_Modified().

: Lazily create and cache  attributes for better
performance for code getters.

: Configuration for the integer string conversion length
limitation now lives in the PyConfig C API struct.

: Extensions classes that set tp_dictoffset and
tp_weaklistoffset lose the support for multiple inheritance, but are
now safe. Extension classes should use Py_TPFLAGS_MANAGED_DICT
and Py_TPFLAGS_MANAGED_WEAKREF instead.

: An unrecognized format character in
PyUnicode_FromFormat() and PyUnicode_FromFormatV() now
sets a SystemError. In previous versions it caused all the rest of
the format string to be copied as-is to the result string, and any extra
arguments discarded.

================================================================================

# Changelog - C API (Part 5)

: Restore the 3.10 behavior for multiple inheritance of C
extension classes that store their dictionary at the end of the struct.

: Support C extensions using managed dictionaries by setting the
Py_TPFLAGS_MANAGED_DICT flag.

: API for implementing vectorcall
(Py_TPFLAGS_HAVE_VECTORCALL, PyVectorcall_NARGS() and
PyVectorcall_Call()) was added to the limited API and stable ABI.

: Fix sign placement when specifying width or precision in
PyUnicode_FromFormat() and PyUnicode_FromFormatV(). Patch
by Philip Georgi.

: The Py_TPFLAGS_HAVE_VECTORCALL flag is now removed
from a class when the classâs __call__() method is
reassigned. This makes vectorcall safe to use with mutable types (i.e.
heap types without the 
flag). Mutable types that do not override
 now inherit the
Py_TPFLAGS_HAVE_VECTORCALL flag.

: Creating  
with mutable bases is deprecated and is planned to be disabled in Python
3.14.

: Adds unstable C-API functions _PyObject_VisitManagedDict and
_PyObject_ClearManagedDict to allow C extensions to allow the VM to
manage their objectâs dictionaries.

================================================================================

# Changelog - C API (Part 6)

: Added PyCode_GetVarnames(), PyCode_GetCellvars()
and PyCode_GetFreevars() for accessing co_varnames,
co_cellvars and co_freevars respectively via the C API.

: Fix SystemError raised when
PyArg_ParseTupleAndKeywords() is used with  in  but
without PY_SSIZE_T_CLEAN defined.

: Python again uses C-style casts for most casting operations when
compiled with C++. This may trigger compiler warnings, if they are enabled
with e.g. -Wold-style-cast or -Wzero-as-null-pointer-constant
options for .

: The following frame functions and type are now directly
available with  <Python.h>, itâs no longer needed to add
 <frameobject.h>:

List:
PyFrame_Check()
PyFrame_GetBack()
PyFrame_GetBuiltins()
PyFrame_GetGenerator()
PyFrame_GetGlobals()
PyFrame_GetLasti()
PyFrame_GetLocals()
PyFrame_Type

PyFrame_GetBuiltins()

PyFrame_GetGenerator()

Patch by Victor Stinner.

: Fix the compatibility of the Python C API with C++ older than
C++11. Patch by Victor Stinner.

: Avoid defining the static_assert when compiling with C++ 11,
where this is a keyword and redefining it can lead to undefined behavior.
Patch by Pablo Galindo

================================================================================

# Changelog - C API (Part 7)

: PyType_FromMetaclass() (and other PyType_From*
functions) now check that offsets and the base classâs
tp_basicsize fit in the new classâs
tp_basicsize.

: Add two new public functions to the public C-API,
PyEval_SetProfileAllThreads() and
PyEval_SetTraceAllThreads(), that allow to set tracing and
profiling functions in all running threads in addition to the calling one.
Also, two analogous functions to the  module
(threading.setprofile_all_threads() and
threading.settrace_all_threads()) that allow to do the same from
Python. Patch by Pablo Galindo

: Add C++ overloads for _Py_CAST_impl() to handle 0/NULL.  This
will allow C++ extensions that pass 0 or NULL to macros using _Py_CAST()
to continue to compile.

: Slot IDs in PyType_Spec may not be repeated. The documentation
was updated to mention this. For some cases of repeated slots,
PyType_FromSpec and related functions will now raise an exception.

: Fix C++ compiler warnings when casting function arguments to
. Patch by Serge Guelton.

: Deprecate global configuration variables, like
Py_IgnoreEnvironmentFlag, in the documentation: the
Py_InitializeFromConfig() API should be instead. Patch by Victor
Stinner.

================================================================================

# Changelog - C API (Part 8)

: Deprecate global configuration variable like
Py_IgnoreEnvironmentFlag: the Py_InitializeFromConfig()
API should be instead. Patch by Victor Stinner.

: Ensures changes to PyConfig.module_search_paths are
ignored unless PyConfig.module_search_paths_set is set

: Avoid mixing declarations and code in the C API to fix the
compiler warning: âISO C90 forbids mixed declarations and codeâ
[-Werror=declaration-after-statement]. Patch by Victor Stinner.

: Remove the  header file. There was never any public
tokenizer C API. The  header file was only designed to be used
by Python internals. Patch by Victor Stinner.

: Remove legacy Unicode APIs based on Py_UNICODE*.

: Remove the PyUnicode_InternImmortal() function and the
SSTATE_INTERNED_IMMORTAL macro. Patch by Victor Stinner.

: Add new function PyFunction_SetVectorcall() to the C API
which sets the vectorcall field of a given PyFunctionObject.

Warning: extensions using this API must preserve the behavior of the
unaltered function!

: Fixed an assert that prevented PyRun_InteractiveOne from
providing tracebacks when parsing from the provided FD.

================================================================================

# Changelog - C API (Part 9)

: The PyType_FromSpec() API will now find and use a
metaclass based on the provided bases. An error will be raised if there is
a metaclass conflict.

================================================================================

# Changelog - Security

List:
: Add the  command line option and the
PYTHONSAFEPATH environment variable to not prepend a potentially
unsafe path to . Patch by Victor Stinner.

: Add the  command line option and the
PYTHONSAFEPATH environment variable to not prepend a potentially
unsafe path to . Patch by Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Chaining classmethod descriptors (introduced in ) is
deprecated. It can no longer be used to wrap other descriptors such as
property().  The core design of this feature was flawed, and it caused a
number of downstream problems.
: pymain_run_python() now imports  and
rlcompleter before sys.path is extended to include the current working
directory of an interactive interpreter. Non-interactive interpreters are
not affected.
: Improve the AttributeError message when deleting a
missing attribute. Patch by GÃ©ry Ogam.
: Make sure that PEP 523 is respected in all cases. In 3.11a7,
specialization may have prevented Python-to-Python calls respecting PEP
523.
: Add a closure keyword-only parameter to . It can
only be specified when exec-ing a code object that uses free variables.
When specified, it must be a tuple, with exactly the number of cell
variables referenced by the code object. closure has a default value of
, and it must be  if the code object doesnât refer to any
free variables.
: Disable frozen modules in debug builds. Patch by Kumar Aditya.
: Improve error message when subscript a type with
__class_getitem__ set to .
: Fix crash triggered by an evil custom  on a metaclass.
: The PRECALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS instruction
now ensures methods are called only on objects of the correct type.
: Deoptimize statically allocated code objects during
Py_FINALIZE() so that future _PyCode_Quicken calls always start
with unquickened code.
: Fix a crash in subinterpreters related to the garbage collector.
When a subinterpreter is deleted, untrack all objects tracked by its GC.
To prevent a crash in deallocator functions expecting objects to be
tracked by the GC, leak a strong reference to these objects on purpose, so
they are never deleted and their deallocator functions are not called.
Patch by Victor Stinner.
: The interpreter can now autocomplete soft keywords, as of now
, , and  (wildcard pattern) from .
: The warning emitted by the Python parser for a numeric literal
immediately followed by keyword has been changed from deprecation warning
to syntax warning.
: Fix an issue where specialized opcodes with extended arguments
could produce incorrect tracing output or lead to assertion failures.
: Speed up types.UnionType instantiation. Based on patch
provided by Yurii Karabas.
: If Python is built in debug mode, Python now ensures that
deallocator functions leave the current exception unchanged. Patch by
Victor Stinner.
: Fix a minor memory leak at exit: release the memory of the
generic_alias_iterator type. Patch by Donghee Na.
: Octal escapes with value larger than  now produce a
DeprecationWarning. In a future Python version they will be a
SyntaxWarning and eventually a SyntaxError.
: Use a single compact table for line starts, ends and column
offsets. Reduces memory consumption for location info by half
: Use Argument Clinic for EncodingMap.  Patch by Oleg
Iarygin.
: Fixed a crash in a garbage-collection edge-case, in which a
PyFunction_Type.tp_clear function could leave a python function object
in an inconsistent state.
: Speed up isinstance() and issubclass() checks for
types.UnionType. Patch by Yurii Karabas.
: Fixed a bug in which adaptive opcodes ignored any preceding
EXTENDED_ARGs on specialization failure.
: The LLTRACE special build now looks for the name __lltrace__
defined in module globals, rather than the name __ltrace__, which had
been introduced as a typo.
: Speed up iteration of ascii strings by 50%. Patch by Kumar
Aditya.
: Improve interpreter performance on Windows by inlining a few
specific macros.
: Add a new _PyFrame_IsEntryFrame() API function, to
check if a PyFrameObject is an entry frame. Patch by Pablo
Galindo.
: Refactor the  strip methods , 
and  to use a common implementation.
: Replaced the  field of BaseException (added
in an earlier version of 3.11) with the final design of .
Namely, BaseException gets an add_note() method, and its
 field is created when necessary.
: Speed up right shift of negative integers, by removing
unnecessary creation of temporaries. Original patch by Xinhang Xu,
reworked by Mark Dickinson.
: Make the interpreterâs low-level tracing (lltrace) feature
output more readable by displaying opcode names (rather than just
numbers), and by displaying stack contents before each opcode.
: Fixed an uninitialized bool value in the traceback printing code
path that was introduced by the initial  exception groups work.
: Fix a potential integer overflow in _Py_DecodeUTF8Ex.
: Add     _PyOpcode_OpName[256]  
to  for debug builds to assist in debugging the Python
interpreter. It is now more convenient to make various forms of debugging
output more human-readable by including opcode names rather than just the
corresponding decimal digits.
: Make POP_JUMP_IF_TRUE, POP_JUMP_IF_FALSE,
POP_JUMP_IF_NONE and POP_JUMP_IF_NOT_NONE virtual,
mapping to new relative jump opcodes.
: Add internal documentation explaining design of new (for 3.11)
frame stack.
: ctypes used to mishandle  return types, so that for
instance a function declared like ctypes.CFUNCTYPE(None, ctypes.c_int)
would be called with signature   instead of  .
Wasm targets require function pointers to be called with the correct
signatures so this led to crashes. The problem is now fixed.
: Make opcodes JUMP_IF_TRUE_OR_POP and
JUMP_IF_FALSE_OR_POP relative rather than absolute.
: Replace the  member of the internal
_PyInterpreterFrame structure with a prev_instr pointer, which
reduces overhead in the main interpreter loop. TheÂ  attribute
of Python-layer frame objects is preserved for backward-compatibility.
: Integer mod/remainder operations, including the three-argument
form of , now consistently return ints from the global small
integer cache when applicable.
: Classes and functions that unconditionally declared their
docstrings ignoring the --without-doc-strings compilation flag no
longer do so.
The classes affected are ctypes.UnionType,
pickle.PickleBuffer, testcapi.RecursingInfinitelyError,
and types.GenericAlias.
The functions affected are 24 methods in .
Patch by Oleg Iarygin.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Use Argument Clinic for the types.MethodType
constructor.  Patch by Oleg Iarygin.
: Fix wrapping bound methods with @classmethod
: Optimize set.intersection() for non-set arguments.
: Optimize set.issuperset() for non-set argument.
: Add type-specialized versions of the Py_DECREF(), and use
them for , , , , and  to avoid
pointer-chasing at runtime where types are known at C compile time.
: Do not use POSIX semaphores on NetBSD
: Fix crashes in built-in encoders with error handlers that
return position less or equal than the starting position of non-encodable
characters.
: marshal.dumps() uses  for all interned strings.
This makes output more deterministic and helps reproducible build.
: Added object.__getstate__ which provides the default
implementation of the __getstate__() method.
Copying and pickling instances of subclasses of builtin types bytearray,
set, frozenset, collections.OrderedDict, collections.deque,
weakref.WeakSet, and datetime.tzinfo now copies and pickles instance
attributes implemented as slots.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Chaining classmethod descriptors (introduced in ) is
deprecated. It can no longer be used to wrap other descriptors such as
property().  The core design of this feature was flawed, and it caused a
number of downstream problems.

: pymain_run_python() now imports  and
rlcompleter before sys.path is extended to include the current working
directory of an interactive interpreter. Non-interactive interpreters are
not affected.

: Improve the AttributeError message when deleting a
missing attribute. Patch by GÃ©ry Ogam.

: Make sure that PEP 523 is respected in all cases. In 3.11a7,
specialization may have prevented Python-to-Python calls respecting PEP
523.

: Add a closure keyword-only parameter to . It can
only be specified when exec-ing a code object that uses free variables.
When specified, it must be a tuple, with exactly the number of cell
variables referenced by the code object. closure has a default value of
, and it must be  if the code object doesnât refer to any
free variables.

: Disable frozen modules in debug builds. Patch by Kumar Aditya.

: Improve error message when subscript a type with
__class_getitem__ set to .

: Fix crash triggered by an evil custom  on a metaclass.

================================================================================

# Changelog - Core and Builtins (Part 4)

: The PRECALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS instruction
now ensures methods are called only on objects of the correct type.

: Deoptimize statically allocated code objects during
Py_FINALIZE() so that future _PyCode_Quicken calls always start
with unquickened code.

: Fix a crash in subinterpreters related to the garbage collector.
When a subinterpreter is deleted, untrack all objects tracked by its GC.
To prevent a crash in deallocator functions expecting objects to be
tracked by the GC, leak a strong reference to these objects on purpose, so
they are never deleted and their deallocator functions are not called.
Patch by Victor Stinner.

: The interpreter can now autocomplete soft keywords, as of now
, , and  (wildcard pattern) from .

: The warning emitted by the Python parser for a numeric literal
immediately followed by keyword has been changed from deprecation warning
to syntax warning.

: Fix an issue where specialized opcodes with extended arguments
could produce incorrect tracing output or lead to assertion failures.

: Speed up types.UnionType instantiation. Based on patch
provided by Yurii Karabas.

================================================================================

# Changelog - Core and Builtins (Part 5)

: If Python is built in debug mode, Python now ensures that
deallocator functions leave the current exception unchanged. Patch by
Victor Stinner.

: Fix a minor memory leak at exit: release the memory of the
generic_alias_iterator type. Patch by Donghee Na.

: Octal escapes with value larger than  now produce a
DeprecationWarning. In a future Python version they will be a
SyntaxWarning and eventually a SyntaxError.

: Use a single compact table for line starts, ends and column
offsets. Reduces memory consumption for location info by half

: Use Argument Clinic for EncodingMap.  Patch by Oleg
Iarygin.

: Fixed a crash in a garbage-collection edge-case, in which a
PyFunction_Type.tp_clear function could leave a python function object
in an inconsistent state.

: Speed up isinstance() and issubclass() checks for
types.UnionType. Patch by Yurii Karabas.

: Fixed a bug in which adaptive opcodes ignored any preceding
EXTENDED_ARGs on specialization failure.

: The LLTRACE special build now looks for the name __lltrace__
defined in module globals, rather than the name __ltrace__, which had
been introduced as a typo.

: Speed up iteration of ascii strings by 50%. Patch by Kumar
Aditya.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Improve interpreter performance on Windows by inlining a few
specific macros.

: Add a new _PyFrame_IsEntryFrame() API function, to
check if a PyFrameObject is an entry frame. Patch by Pablo
Galindo.

: Refactor the  strip methods , 
and  to use a common implementation.

: Replaced the  field of BaseException (added
in an earlier version of 3.11) with the final design of .
Namely, BaseException gets an add_note() method, and its
 field is created when necessary.

: Speed up right shift of negative integers, by removing
unnecessary creation of temporaries. Original patch by Xinhang Xu,
reworked by Mark Dickinson.

: Make the interpreterâs low-level tracing (lltrace) feature
output more readable by displaying opcode names (rather than just
numbers), and by displaying stack contents before each opcode.

: Fixed an uninitialized bool value in the traceback printing code
path that was introduced by the initial  exception groups work.

: Fix a potential integer overflow in _Py_DecodeUTF8Ex.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Add     _PyOpcode_OpName[256]  
to  for debug builds to assist in debugging the Python
interpreter. It is now more convenient to make various forms of debugging
output more human-readable by including opcode names rather than just the
corresponding decimal digits.

: Make POP_JUMP_IF_TRUE, POP_JUMP_IF_FALSE,
POP_JUMP_IF_NONE and POP_JUMP_IF_NOT_NONE virtual,
mapping to new relative jump opcodes.

: Add internal documentation explaining design of new (for 3.11)
frame stack.

: ctypes used to mishandle  return types, so that for
instance a function declared like ctypes.CFUNCTYPE(None, ctypes.c_int)
would be called with signature   instead of  .
Wasm targets require function pointers to be called with the correct
signatures so this led to crashes. The problem is now fixed.

: Make opcodes JUMP_IF_TRUE_OR_POP and
JUMP_IF_FALSE_OR_POP relative rather than absolute.

: Replace the  member of the internal
_PyInterpreterFrame structure with a prev_instr pointer, which
reduces overhead in the main interpreter loop. TheÂ  attribute
of Python-layer frame objects is preserved for backward-compatibility.

================================================================================

# Changelog - Core and Builtins (Part 8)

: Integer mod/remainder operations, including the three-argument
form of , now consistently return ints from the global small
integer cache when applicable.

: Classes and functions that unconditionally declared their
docstrings ignoring the --without-doc-strings compilation flag no
longer do so.

The classes affected are ctypes.UnionType,
pickle.PickleBuffer, testcapi.RecursingInfinitelyError,
and types.GenericAlias.

The functions affected are 24 methods in .

Patch by Oleg Iarygin.

: Use Argument Clinic for the types.MethodType
constructor.  Patch by Oleg Iarygin.

: Fix wrapping bound methods with @classmethod

: Optimize set.intersection() for non-set arguments.

: Optimize set.issuperset() for non-set argument.

: Add type-specialized versions of the Py_DECREF(), and use
them for , , , , and  to avoid
pointer-chasing at runtime where types are known at C compile time.

: Do not use POSIX semaphores on NetBSD

: Fix crashes in built-in encoders with error handlers that
return position less or equal than the starting position of non-encodable
characters.

: marshal.dumps() uses  for all interned strings.
This makes output more deterministic and helps reproducible build.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Added object.__getstate__ which provides the default
implementation of the __getstate__() method.

Copying and pickling instances of subclasses of builtin types bytearray,
set, frozenset, collections.OrderedDict, collections.deque,
weakref.WeakSet, and datetime.tzinfo now copies and pickles instance
attributes implemented as slots.

================================================================================

# Changelog - Library (Part 1)

List:
: Add the  parameter to os.popen().
: Fix an issue where  utilities may interpret populated
inline cache entries as valid instructions.
: Deprecate typing.Text (removal of the class is
currently not planned). Patch by Alex Waygood.
: Deprecate nested classes in enum definitions becoming members â
in 3.13 they will be normal classes; add  and 
functions to allow control over results now.
: Fixed a performance regression in ctypes function calls.
: Show the actual named values stored in inline caches when
show_caches=True is passed to  utilities.
: Prefer close_range() to iterating over procfs for file
descriptor closing in subprocess for better performance.
: Sort the miscellaneous topics in Cmd.do_help()
: Port socket.__init__ to Argument Clinic. Patch by Cinder.
: Add support for generalized ISO 8601 parsing to
datetime.datetime.fromisoformat(),
datetime.date.fromisoformat() and
datetime.time.fromisoformat(). Patch by Paul Ganssle.
: Fix a 3.11 regression in contextmanager(),
which caused it to propagate exceptions with incorrect tracebacks.
: Adding COPYFILE_STAT, COPYFILE_ACL and
COPYFILE_XATTR constants for os.fcopyfile() available in macOs.
: For @dataclass, add
weakref_slot. The new parameter defaults to . If true, and if
slots=True, add a slot named "__weakref__", which will allow
instances to be weakrefâd. Contributed by Eric V. Smith
: New function os.login_tty() for Unix.
: Add __class_getitem__() to
logging.LoggerAdapter and logging.StreamHandler,
allowing them to be parameterized at runtime. Patch by Alex Waygood.
: Forbid pickling constants re._constants.SUCCESS etc.
Previously, pickling did not fail, but the result could not be unpickled.
: inspect.Parameter now raises ValueError if
 is a keyword, in addition to the existing check that it is an
identifier.
: Add an __unpacked__ attribute to
types.GenericAlias. Patch by Jelle Zijlstra.
: Add support for generic typing.NamedTuple.
: New http.HTTPMethod enum to represent all the available HTTP
request methods in a convenient way
: Modified test strings in test_argparse.py to not contain
trailing spaces before end of line.
: Add encoding="locale" support to
TextIOWrapper.reconfigure().
: Add  and  arguments to
subprocess.getoutput() and subprocess.getstatusoutput().
: Always close the read end of the pipe used by
multiprocessing.Queue  the last write of buffered data to
the write end of the pipe to avoid BrokenPipeError at garbage
collection and at multiprocessing.Queue.close() calls. Patch by GÃ©ry
Ogam.
: Add datetime.UTC alias for datetime.timezone.utc.
Patch by Kabir Kwatra.

================================================================================

# Changelog - Library (Part 2)

: The  module is now deprecated and will be removed
in Python 3.13. See  for the rationale and the 
module for an alternative. Patch by Victor Stinner.
: Provide a way to disable subprocess use of 
just in case it is ever needed and document the existing mechanism for
posix_spawn().
: Fix signal.NSIG value on FreeBSD to accept signal
numbers greater than 32, like signal.SIGRTMIN and
signal.SIGRTMAX. Patch by Victor Stinner.
: Add missing f prefix to f-strings in error messages from the
multiprocessing and  modules.
: Add typing.dataclass_transform(), implementing .
Patch by Jelle Zijlstra.
: Add  attribute to argparse.Action repr
output.
: In the  module add method info_patchlevel()
which returns the exact version of the Tcl library as a named tuple
similar to sys.version_info.
: Add --enable-wasm-pthreads to enable pthreads support
for WASM builds. Emscripten/node no longer has threading enabled by
default. Include additional file systems.
: Fix unstable test_from_tuple test in test_decimal.py.
: Deprecate the xdrlib module.
: Deprecate the uu module.
: More strict rules will be applied for numerical group references
and group names in regular expressions. For now, a deprecation warning is
emitted for group references and group names which will be errors in
future Python versions.
: Add provisional sys._emscripten_info named tuple with
build-time and run-time information about Emscripten platform.
: signal.raise_signal() and  now check
immediately for pending signals. Patch by Victor Stinner.
: Fix OSS audio support on Solaris.
: Include the passed value in the exception thrown by
typing.assert_never(). Patch by Jelle Zijlstra.
: Compilation of regular expression containing a conditional
expression (?(group)...) now raises an appropriate  if
the group number refers to not defined group. Previously an internal
RuntimeError was raised.
: Add an optional keyword shutdown_timeout parameter to the
multiprocessing.BaseManager constructor. Kill the process if
terminate() takes longer than the timeout. Patch by Victor Stinner.
: Fix typing.get_type_hints() for
collections.abc.Callable. Patch by Shantanu Jain.
: Parsing  escapes of Unicode Named Character Sequences in a
 expression raises now  instead of
.
: Remove deprecated  config variable in .
: Deprecate the telnetlib module.
: Deprecate the sunau module.
: Deprecate the spwd module.
: Deprecate the sndhdr module, as well as inline needed
functionality for email.mime.MIMEAudio.
:  module, fix fullmatch() mismatch
when using Atomic Grouping or Possessive Quantifiers.
: Deprecate the âpipesâ module.
: Deprecate the ossaudiodev module.
:  module, limit the maximum capturing group to
1,073,741,823 in 64-bit build, this increases the depth of backtracking.
: Deprecate the nis module.
: Fix the comparison of character and integer inside
Tools.gdb.libpython.write_repr(). Patch by Yu Liu.
: Add option to raise all errors from
create_connection() in an ExceptionGroup when it
fails to create a connection. The default remains to raise only the last
error that had occurred when multiple addresses were tried.
: Optimize asyncio UDP speed, over 100 times faster when
transferring a large file.
: Update case-insensitive matching in the  module to the
latest Unicode version.
: In concurrent.futures.process.ProcessPoolExecutor disallow
the âforkâ multiprocessing start method when the new
max_tasks_per_child feature is used as the mix of threads+fork can
hang the child processes. Default to using the safe âspawnâ start method
in that circumstance if no mp_context was supplied.
: In , SQLITE_MISUSE result codes are now mapped
to InterfaceError instead of
ProgrammingError. Also, more accurate exceptions are
raised when binding parameters fail. Patch by Erlend E. Aasland.
: Stop calling os.device_encoding(file.fileno()) in
TextIOWrapper. It was complex, never documented, and didnât work
for most cases. (Patch by Inada Naoki.)
: Change the frame-related functions in the  module
to return a regular object (that is backwards compatible with the old
tuple-like interface) that include the extended  position
information (end line number, column and end column). The affected
functions are: inspect.getframeinfo(),
inspect.getouterframes(), inspect.getinnerframes(),
inspect.stack() and inspect.trace(). Patch by Pablo Galindo.
: Add indexing and slicing support to sqlite3.Blob. Patch
by Aviv Palivoda and Erlend E. Aasland.
: Add context manager support to sqlite3.Blob.
Patch by Aviv Palivoda and Erlend E. Aasland.
: Deprecate nntplib.
: Deprecate msilib.
: Improve the performance of  matching by using computed
gotos (or âthreaded codeâ) on supported platforms and removing expensive
pointer indirections.
: Deprecate the imghdr module.
: Deprecate the crypt module.
: Make space for longer opcodes in  output.
: Make TextIOWrapper uses locale encoding when
encoding="locale" is specified even in UTF-8 mode.
: warnings.catch_warnings() now accepts arguments for
warnings.simplefilter(), providing a more concise way to locally
ignore warnings or convert them to errors.
: Deprecate the chunk module.
: Add the TCP_CONNECTION_INFO option (available on macOS) to
.
: Fix os.closerange() potentially being a no-op in a Linux
seccomp sandbox.
: Implement typing.Required and typing.NotRequired
(). Patch by David Foster and Jelle Zijlstra.
: Deprecate cgi and cgitb.
: Deprecate audioop.
: Add locale.getencoding() to get the current locale
encoding. It is similar to locale.getpreferredencoding(False) but
ignores the Python UTF-8 Mode.
: Add wsgiref.types, containing WSGI-specific types for
static type checking.
: Suppress expression chaining for more  parsing errors.
: Remove undocumented and never working function
re.template() and flag re.TEMPLATE. This was later reverted in
3.11.0b2 and deprecated instead.
: decimal.localcontext() now accepts context attributes via
keyword arguments
: Fix errors in the  module if the charset itself
contains undecodable/unencodable characters.
: Disassembly of quickened code.
: Forward gzip.compress() compresslevel to zlib.
: Add typing.get_overloads() and
typing.clear_overloads(). Patch by Jelle Zijlstra.
: typing.Protocol no longer silently replaces
__init__() methods defined on subclasses. Patch by Adrian Garcia
Badaracco.
: Fix concurrent.futures.ProcessPoolExecutor exception
memory leak
: Add support for path-like objects to
multiprocessing.set_executable() for Windows to be on a par with
Unix-like systems. Patch by GÃ©ry Ogam.
: Add SO_INCOMING_CPU constant to .
: Fix OSS audio support on NetBSD.
: image/avif and image/webp were added to
.
: Add command-line option /--protocol to module
http.server which specifies the HTTP version to which the server is
conformant (HTTP/1.1 conformant servers can now be run from the
command-line interface of module http.server). Patch by GÃ©ry Ogam.
: Accept ellipsis as the last argument of
typing.Concatenate.
: Remove variables leaking into pydoc.Helper class namespace.
: Fix ipaddress.ip_{address,interface,network} raising TypeError
instead of ValueError if given invalid tuple as address parameter.
:  with DefaultCookiePolicy now can process
cookies from localhost with domain=localhost explicitly specified in
Set-Cookie header.
: Add a âzâ option to the string formatting specification that
coerces negative zero floating-point values to positive zero after
rounding to the format precision.  Contributed by John Belmonte.
: Fully implement the io.BufferedIOBase or
io.TextIOBase interface for
tempfile.SpooledTemporaryFile objects. This lets them work
correctly with higher-level layers (like compression modules). Patch by
Carey Metcalfe.
: Fix a regression in the  trace callback where
bound parameters were not expanded in the passed statement string. The
regression was introduced in Python 3.10 by . Patch by
Erlend E. Aasland.
: Allow  subclasses to also include
 as a base class in class based syntax. Thereby
allowing the user to define a generic , just like a
user-defined generic but with  semantics.
: Fix BooleanOptionalAction to not automatically add a default
string.  If a default string is desired, use a formatter to add it.
: All positional-or-keyword parameters to ABCMeta.__new__ are
now positional-only to avoid conflicts with keyword arguments to be passed
to __init_subclass__().
: Prevent creation of a venv whose path contains the PATH
separator. This could affect the usage of the activate script. Patch by
Dustin Rodrigues.
: Add a process_group parameter to subprocess.Popen
to help move more things off of the unsafe preexec_fn parameter.
: Fix cookies getting sorted in CookieJar.__iter__() which
is an extra behavior and not mentioned in RFC 2965 or Netscape cookie
protocol. Now the cookies in  follows the order of the
Set-Cookie header. Patch by Iman Kermani.
: Add create_window_function() to
sqlite3.Connection for creating aggregate window functions. Patch
by Erlend E. Aasland.
: Convert  to use Argument Clinic for
csv.field_size_limit(), csv.get_dialect(),
csv.unregister_dialect() and csv.list_dialects().
: Raise an ArgumentError when the same subparser name is
added twice to an argparse.ArgumentParser.  This is consistent with
the (default) behavior when the same option string is added twice to an
ArgumentParser.
: Raise ProgrammingError instead of segfaulting
on recursive usage of cursors in  converters. Patch by
Sergey Fedoseev.
: Adds a start_tls() method to
StreamWriter, which upgrades the connection with
TLS using the given SSLContext.
:  methods  and
 return only directories if  ends with
a pathname components separator ( or ). Patch by
Eisuke Kawashima.
: Add blobopen() to
sqlite3.Connection. sqlite3.Blob allows incremental I/O
operations on blobs. Patch by Aviv Palivoda and Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 3)

: Add the  parameter to os.popen().

: Fix an issue where  utilities may interpret populated
inline cache entries as valid instructions.

: Deprecate typing.Text (removal of the class is
currently not planned). Patch by Alex Waygood.

: Deprecate nested classes in enum definitions becoming members â
in 3.13 they will be normal classes; add  and 
functions to allow control over results now.

: Fixed a performance regression in ctypes function calls.

: Show the actual named values stored in inline caches when
show_caches=True is passed to  utilities.

: Prefer close_range() to iterating over procfs for file
descriptor closing in subprocess for better performance.

: Sort the miscellaneous topics in Cmd.do_help()

: Port socket.__init__ to Argument Clinic. Patch by Cinder.

: Add support for generalized ISO 8601 parsing to
datetime.datetime.fromisoformat(),
datetime.date.fromisoformat() and
datetime.time.fromisoformat(). Patch by Paul Ganssle.

: Fix a 3.11 regression in contextmanager(),
which caused it to propagate exceptions with incorrect tracebacks.

: Adding COPYFILE_STAT, COPYFILE_ACL and
COPYFILE_XATTR constants for os.fcopyfile() available in macOs.

================================================================================

# Changelog - Library (Part 4)

: For @dataclass, add
weakref_slot. The new parameter defaults to . If true, and if
slots=True, add a slot named "__weakref__", which will allow
instances to be weakrefâd. Contributed by Eric V. Smith

: New function os.login_tty() for Unix.

: Add __class_getitem__() to
logging.LoggerAdapter and logging.StreamHandler,
allowing them to be parameterized at runtime. Patch by Alex Waygood.

: Forbid pickling constants re._constants.SUCCESS etc.
Previously, pickling did not fail, but the result could not be unpickled.

: inspect.Parameter now raises ValueError if
 is a keyword, in addition to the existing check that it is an
identifier.

: Add an __unpacked__ attribute to
types.GenericAlias. Patch by Jelle Zijlstra.

: Add support for generic typing.NamedTuple.

: New http.HTTPMethod enum to represent all the available HTTP
request methods in a convenient way

: Modified test strings in test_argparse.py to not contain
trailing spaces before end of line.

: Add encoding="locale" support to
TextIOWrapper.reconfigure().

: Add  and  arguments to
subprocess.getoutput() and subprocess.getstatusoutput().

================================================================================

# Changelog - Library (Part 5)

: Always close the read end of the pipe used by
multiprocessing.Queue  the last write of buffered data to
the write end of the pipe to avoid BrokenPipeError at garbage
collection and at multiprocessing.Queue.close() calls. Patch by GÃ©ry
Ogam.

: Add datetime.UTC alias for datetime.timezone.utc.

Patch by Kabir Kwatra.

: The  module is now deprecated and will be removed
in Python 3.13. See  for the rationale and the 
module for an alternative. Patch by Victor Stinner.

: Provide a way to disable subprocess use of 
just in case it is ever needed and document the existing mechanism for
posix_spawn().

: Fix signal.NSIG value on FreeBSD to accept signal
numbers greater than 32, like signal.SIGRTMIN and
signal.SIGRTMAX. Patch by Victor Stinner.

: Add missing f prefix to f-strings in error messages from the
multiprocessing and  modules.

: Add typing.dataclass_transform(), implementing .
Patch by Jelle Zijlstra.

: Add  attribute to argparse.Action repr
output.

: In the  module add method info_patchlevel()
which returns the exact version of the Tcl library as a named tuple
similar to sys.version_info.

================================================================================

# Changelog - Library (Part 6)

: Add --enable-wasm-pthreads to enable pthreads support
for WASM builds. Emscripten/node no longer has threading enabled by
default. Include additional file systems.

: Fix unstable test_from_tuple test in test_decimal.py.

: Deprecate the xdrlib module.

: Deprecate the uu module.

: More strict rules will be applied for numerical group references
and group names in regular expressions. For now, a deprecation warning is
emitted for group references and group names which will be errors in
future Python versions.

: Add provisional sys._emscripten_info named tuple with
build-time and run-time information about Emscripten platform.

: signal.raise_signal() and  now check
immediately for pending signals. Patch by Victor Stinner.

: Fix OSS audio support on Solaris.

: Include the passed value in the exception thrown by
typing.assert_never(). Patch by Jelle Zijlstra.

: Compilation of regular expression containing a conditional
expression (?(group)...) now raises an appropriate  if
the group number refers to not defined group. Previously an internal
RuntimeError was raised.

================================================================================

# Changelog - Library (Part 7)

: Add an optional keyword shutdown_timeout parameter to the
multiprocessing.BaseManager constructor. Kill the process if
terminate() takes longer than the timeout. Patch by Victor Stinner.

: Fix typing.get_type_hints() for
collections.abc.Callable. Patch by Shantanu Jain.

: Parsing  escapes of Unicode Named Character Sequences in a
 expression raises now  instead of
.

: Remove deprecated  config variable in .

: Deprecate the telnetlib module.

: Deprecate the sunau module.

: Deprecate the spwd module.

: Deprecate the sndhdr module, as well as inline needed
functionality for email.mime.MIMEAudio.

:  module, fix fullmatch() mismatch
when using Atomic Grouping or Possessive Quantifiers.

: Deprecate the âpipesâ module.

: Deprecate the ossaudiodev module.

:  module, limit the maximum capturing group to
1,073,741,823 in 64-bit build, this increases the depth of backtracking.

: Deprecate the nis module.

: Fix the comparison of character and integer inside
Tools.gdb.libpython.write_repr(). Patch by Yu Liu.

================================================================================

# Changelog - Library (Part 8)

: Add option to raise all errors from
create_connection() in an ExceptionGroup when it
fails to create a connection. The default remains to raise only the last
error that had occurred when multiple addresses were tried.

: Optimize asyncio UDP speed, over 100 times faster when
transferring a large file.

: Update case-insensitive matching in the  module to the
latest Unicode version.

: In concurrent.futures.process.ProcessPoolExecutor disallow
the âforkâ multiprocessing start method when the new
max_tasks_per_child feature is used as the mix of threads+fork can
hang the child processes. Default to using the safe âspawnâ start method
in that circumstance if no mp_context was supplied.

: In , SQLITE_MISUSE result codes are now mapped
to InterfaceError instead of
ProgrammingError. Also, more accurate exceptions are
raised when binding parameters fail. Patch by Erlend E. Aasland.

: Stop calling os.device_encoding(file.fileno()) in
TextIOWrapper. It was complex, never documented, and didnât work
for most cases. (Patch by Inada Naoki.)

================================================================================

# Changelog - Library (Part 9)

: Change the frame-related functions in the  module
to return a regular object (that is backwards compatible with the old
tuple-like interface) that include the extended  position
information (end line number, column and end column). The affected
functions are: inspect.getframeinfo(),
inspect.getouterframes(), inspect.getinnerframes(),
inspect.stack() and inspect.trace(). Patch by Pablo Galindo.

: Add indexing and slicing support to sqlite3.Blob. Patch
by Aviv Palivoda and Erlend E. Aasland.

: Add context manager support to sqlite3.Blob.
Patch by Aviv Palivoda and Erlend E. Aasland.

: Improve the performance of  matching by using computed
gotos (or âthreaded codeâ) on supported platforms and removing expensive
pointer indirections.

: Deprecate the imghdr module.

: Deprecate the crypt module.

: Make space for longer opcodes in  output.

: Make TextIOWrapper uses locale encoding when
encoding="locale" is specified even in UTF-8 mode.

: warnings.catch_warnings() now accepts arguments for
warnings.simplefilter(), providing a more concise way to locally
ignore warnings or convert them to errors.

: Deprecate the chunk module.

: Add the TCP_CONNECTION_INFO option (available on macOS) to
.

================================================================================

# Changelog - Library (Part 10)

: Fix os.closerange() potentially being a no-op in a Linux
seccomp sandbox.

: Implement typing.Required and typing.NotRequired
(). Patch by David Foster and Jelle Zijlstra.

: Deprecate cgi and cgitb.

: Add locale.getencoding() to get the current locale
encoding. It is similar to locale.getpreferredencoding(False) but
ignores the Python UTF-8 Mode.

: Add wsgiref.types, containing WSGI-specific types for
static type checking.

: Suppress expression chaining for more  parsing errors.

: Remove undocumented and never working function
re.template() and flag re.TEMPLATE. This was later reverted in
3.11.0b2 and deprecated instead.

: decimal.localcontext() now accepts context attributes via
keyword arguments

: Fix errors in the  module if the charset itself
contains undecodable/unencodable characters.

: Disassembly of quickened code.

: Forward gzip.compress() compresslevel to zlib.

: Add typing.get_overloads() and
typing.clear_overloads(). Patch by Jelle Zijlstra.

: typing.Protocol no longer silently replaces
__init__() methods defined on subclasses. Patch by Adrian Garcia
Badaracco.

: Fix concurrent.futures.ProcessPoolExecutor exception
memory leak

================================================================================

# Changelog - Library (Part 11)

: Add support for path-like objects to
multiprocessing.set_executable() for Windows to be on a par with
Unix-like systems. Patch by GÃ©ry Ogam.

: Add SO_INCOMING_CPU constant to .

: Fix OSS audio support on NetBSD.

: image/avif and image/webp were added to
.

: Add command-line option /--protocol to module
http.server which specifies the HTTP version to which the server is
conformant (HTTP/1.1 conformant servers can now be run from the
command-line interface of module http.server). Patch by GÃ©ry Ogam.

: Accept ellipsis as the last argument of
typing.Concatenate.

: Remove variables leaking into pydoc.Helper class namespace.

: Fix ipaddress.ip_{address,interface,network} raising TypeError
instead of ValueError if given invalid tuple as address parameter.

:  with DefaultCookiePolicy now can process
cookies from localhost with domain=localhost explicitly specified in
Set-Cookie header.

: Add a âzâ option to the string formatting specification that
coerces negative zero floating-point values to positive zero after
rounding to the format precision.  Contributed by John Belmonte.

================================================================================

# Changelog - Library (Part 12)

: Fully implement the io.BufferedIOBase or
io.TextIOBase interface for
tempfile.SpooledTemporaryFile objects. This lets them work
correctly with higher-level layers (like compression modules). Patch by
Carey Metcalfe.

: Fix a regression in the  trace callback where
bound parameters were not expanded in the passed statement string. The
regression was introduced in Python 3.10 by . Patch by
Erlend E. Aasland.

: Allow  subclasses to also include
 as a base class in class based syntax. Thereby
allowing the user to define a generic , just like a
user-defined generic but with  semantics.

: Fix BooleanOptionalAction to not automatically add a default
string.  If a default string is desired, use a formatter to add it.

: All positional-or-keyword parameters to ABCMeta.__new__ are
now positional-only to avoid conflicts with keyword arguments to be passed
to __init_subclass__().

: Prevent creation of a venv whose path contains the PATH
separator. This could affect the usage of the activate script. Patch by
Dustin Rodrigues.

: Add a process_group parameter to subprocess.Popen
to help move more things off of the unsafe preexec_fn parameter.

================================================================================

# Changelog - Library (Part 13)

: Fix cookies getting sorted in CookieJar.__iter__() which
is an extra behavior and not mentioned in RFC 2965 or Netscape cookie
protocol. Now the cookies in  follows the order of the
Set-Cookie header. Patch by Iman Kermani.

: Add create_window_function() to
sqlite3.Connection for creating aggregate window functions. Patch
by Erlend E. Aasland.

: Convert  to use Argument Clinic for
csv.field_size_limit(), csv.get_dialect(),
csv.unregister_dialect() and csv.list_dialects().

: Raise an ArgumentError when the same subparser name is
added twice to an argparse.ArgumentParser.  This is consistent with
the (default) behavior when the same option string is added twice to an
ArgumentParser.

: Raise ProgrammingError instead of segfaulting
on recursive usage of cursors in  converters. Patch by
Sergey Fedoseev.

: Adds a start_tls() method to
StreamWriter, which upgrades the connection with
TLS using the given SSLContext.

:  methods  and
 return only directories if  ends with
a pathname components separator ( or ). Patch by
Eisuke Kawashima.

: Add blobopen() to
sqlite3.Connection. sqlite3.Blob allows incremental I/O
operations on blobs. Patch by Aviv Palivoda and Erlend E. Aasland.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Add a new  role to the documentation to link to GitHub
issues.
: Document security issues concerning the use of the function
shutil.unpack_archive()
: Remove âUndocumented modulesâ page.
: In importlib.resources.abc, refined the documentation of the
Traversable Protocol, applying changes from importlib_resources 5.7.1.
: Clarify the meaning of dirs_exist_ok, a kwarg of
shutil.copytree().
: Remove âmake -C Doc serveâ in favour of âmake -C Doc htmlviewâ
: Add a Whatâs New in Python 3.11 entry for the Faster CPython
project. Documentation by Ken Jin and Kumar Aditya.
: Update the introduction to documentation for  to
remove warnings that became irrelevant after the implementations of
 and .
: The documentation now lists which members of C structs are part
of the Limited API/Stable ABI.
: All docstrings in code snippets are now wrapped into
 to follow the guideline of PEP 7âs
Documentation Strings paragraph. Patch by
Oleg Iarygin.
: Improve the docstrings of runpy.run_module() and
runpy.run_path(). Original patch by Andrew Brezovsky.

: Add a new  role to the documentation to link to GitHub
issues.

================================================================================

# Changelog - Documentation (Part 2)

: Document security issues concerning the use of the function
shutil.unpack_archive()

: Remove âUndocumented modulesâ page.

: In importlib.resources.abc, refined the documentation of the
Traversable Protocol, applying changes from importlib_resources 5.7.1.

: Clarify the meaning of dirs_exist_ok, a kwarg of
shutil.copytree().

: Remove âmake -C Doc serveâ in favour of âmake -C Doc htmlviewâ

: Add a Whatâs New in Python 3.11 entry for the Faster CPython
project. Documentation by Ken Jin and Kumar Aditya.

: Update the introduction to documentation for  to
remove warnings that became irrelevant after the implementations of
 and .

: The documentation now lists which members of C structs are part
of the Limited API/Stable ABI.

: All docstrings in code snippets are now wrapped into
 to follow the guideline of PEP 7âs
Documentation Strings paragraph. Patch by
Oleg Iarygin.

: Improve the docstrings of runpy.run_module() and
runpy.run_path(). Original patch by Andrew Brezovsky.

================================================================================

# Changelog - Tests (Part 1)

List:
: Use warnings_helper.import_deprecated() to import deprecated
modules uniformly in tests. Patch by Hugo van Kemenade.
: When multiprocessing is enabled, libregrtest can now use a
Python executable other than sys.executable via the 
flag.
: Fix initialization of PYTHONREGRTEST_UNICODE_GUARD
which prevented running regression tests on non-UTF-8 locale.
: Added @requires_zlib to test.test_tools.test_freeze.TestFreeze.
: Fix test_concurrent_futures to test the correct
multiprocessing start method context in several cases where the test logic
mixed this up.
: Threading tests are now skipped on WASM targets without pthread
support.
: Test for ctypes.macholib.dyld,
ctypes.macholib.dylib, and ctypes.macholib.framework are
brought from manual pre- times to ctypes.test
location and structure. Patch by Oleg Iarygin.
: Add tests for ipaddress.IPv4Interface and
ipaddress.IPv6Interface construction with tuple arguments.
Original patch and tests by louisom.

: Use warnings_helper.import_deprecated() to import deprecated
modules uniformly in tests. Patch by Hugo van Kemenade.

: When multiprocessing is enabled, libregrtest can now use a
Python executable other than sys.executable via the 
flag.

================================================================================

# Changelog - Tests (Part 2)

: Fix initialization of PYTHONREGRTEST_UNICODE_GUARD
which prevented running regression tests on non-UTF-8 locale.

: Added @requires_zlib to test.test_tools.test_freeze.TestFreeze.

: Fix test_concurrent_futures to test the correct
multiprocessing start method context in several cases where the test logic
mixed this up.

: Threading tests are now skipped on WASM targets without pthread
support.

: Test for ctypes.macholib.dyld,
ctypes.macholib.dylib, and ctypes.macholib.framework are
brought from manual pre- times to ctypes.test
location and structure. Patch by Oleg Iarygin.

: Add tests for ipaddress.IPv4Interface and
ipaddress.IPv6Interface construction with tuple arguments.
Original patch and tests by louisom.

================================================================================

# Changelog - Build

List:
: gdbm-compat is now preferred over ndbm if both are available on
the system. This allows avoiding the problematic ndbm.h on macOS.
: Python is now built with  compiler option, rather
than . Patch by Victor Stinner.
: Add script and make target for generating sre_constants.h.
: Windows PGInstrument builds now copy a required DLL into
the output directory, making it easier to run the profile stage of a PGO
build.

: gdbm-compat is now preferred over ndbm if both are available on
the system. This allows avoiding the problematic ndbm.h on macOS.

: Python is now built with  compiler option, rather
than . Patch by Victor Stinner.

: Add script and make target for generating sre_constants.h.

: Windows PGInstrument builds now copy a required DLL into
the output directory, making it easier to run the profile stage of a PGO
build.

================================================================================

# Changelog - Windows

List:
: Update Windows installer to use SQLite 3.38.3.
: Fixed âlist and âlist-paths output for Python Launcher for Windows when
used in an active virtual environment.
: Update Windows installer to use SQLite 3.38.2.
: Fix race condition between  and unlinking a file
on Windows, by using errors codes returned by FindFirstFileW() when
appropriate in win32_xstat_impl.
: Update Windows build to use xz-5.2.5

: Update Windows installer to use SQLite 3.38.3.

: Fixed âlist and âlist-paths output for Python Launcher for Windows when
used in an active virtual environment.

: Update Windows installer to use SQLite 3.38.2.

: Fix race condition between  and unlinking a file
on Windows, by using errors codes returned by FindFirstFileW() when
appropriate in win32_xstat_impl.

: Update Windows build to use xz-5.2.5

================================================================================

# Changelog - macOS

List:
: Update macOS installer to SQLite 3.38.4.

: Update macOS installer to SQLite 3.38.4.

================================================================================

# Changelog - Tools/Demos

List:
: Fix regression in the code generated by Argument Clinic for
functions with the defining_class parameter.
: Add script Tools/scripts/generate_re_casefix.py and the make
target  for generating additional data for case-insensitive
matching according to the current Unicode version.
: Remove the ancient Pynche color editor.  It has moved to
https://gitlab.com/warsaw/pynche

: Fix regression in the code generated by Argument Clinic for
functions with the defining_class parameter.

: Add script Tools/scripts/generate_re_casefix.py and the make
target  for generating additional data for case-insensitive
matching according to the current Unicode version.

: Remove the ancient Pynche color editor.  It has moved to
https://gitlab.com/warsaw/pynche

================================================================================

# Changelog - C API (Part 1)

List:
: Deprecate the C functions: PySys_SetArgv(),
PySys_SetArgvEx(), PySys_SetPath(). Patch by Victor
Stinner.
: Added the PyCode_GetCode() function. This function does
the equivalent of the Python code getattr(code_object, 'co_code').
: Fix the  argument to PyEval_EvalCodeEx().
: Fix C++ compiler warnings about âold-style castâ (
-Wold-style-cast) in the Python C API. Use C++ reinterpret_cast<>
and static_cast<> casts when the Python C API is used in C++. Patch by
Victor Stinner.
: Mark functions as deprecated by :
PyUnicode_AS_DATA(), PyUnicode_AS_UNICODE(),
PyUnicode_GET_DATA_SIZE(), PyUnicode_GET_SIZE(). Patch
by Victor Stinner.
: Py_REFCNT(), ,  and
Py_IS_TYPE() functions argument type is now , rather
than  . Patch by Victor Stinner.
: Add PyBytes_Type.tp_alloc to initialize
PyBytesObject.ob_shash for bytes subclasses.
: Add PyFrame_GetLasti C-API function to access frame
objectâs  attribute safely from C code.
: Remove the Include/code.h header file. C extensions should
only include the main <Python.h> header file. Patch by Victor Stinner.
: PyOS_CheckStack() is now exported in the Stable ABI on
Windows.
: PyThread_get_thread_native_id() is excluded from the
stable ABI on platforms where it doesnât exist (like Solaris).
: Added PyErr_GetHandledException() and
PyErr_SetHandledException() as simpler alternatives to
PyErr_GetExcInfo() and PyErr_SetExcInfo().
They are included in the stable ABI.

================================================================================

# Changelog - C API (Part 2)

: Deprecate the C functions: PySys_SetArgv(),
PySys_SetArgvEx(), PySys_SetPath(). Patch by Victor
Stinner.

: Added the PyCode_GetCode() function. This function does
the equivalent of the Python code getattr(code_object, 'co_code').

: Fix the  argument to PyEval_EvalCodeEx().

: Fix C++ compiler warnings about âold-style castâ (
-Wold-style-cast) in the Python C API. Use C++ reinterpret_cast<>
and static_cast<> casts when the Python C API is used in C++. Patch by
Victor Stinner.

: Mark functions as deprecated by :
PyUnicode_AS_DATA(), PyUnicode_AS_UNICODE(),
PyUnicode_GET_DATA_SIZE(), PyUnicode_GET_SIZE(). Patch
by Victor Stinner.

: Py_REFCNT(), ,  and
Py_IS_TYPE() functions argument type is now , rather
than  . Patch by Victor Stinner.

: Add PyBytes_Type.tp_alloc to initialize
PyBytesObject.ob_shash for bytes subclasses.

: Add PyFrame_GetLasti C-API function to access frame
objectâs  attribute safely from C code.

: Remove the Include/code.h header file. C extensions should
only include the main <Python.h> header file. Patch by Victor Stinner.

: PyOS_CheckStack() is now exported in the Stable ABI on
Windows.

================================================================================

# Changelog - C API (Part 3)

: PyThread_get_thread_native_id() is excluded from the
stable ABI on platforms where it doesnât exist (like Solaris).

: Added PyErr_GetHandledException() and
PyErr_SetHandledException() as simpler alternatives to
PyErr_GetExcInfo() and PyErr_SetExcInfo().

They are included in the stable ABI.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Raise IndentationError instead of SyntaxError for
a bare  with no following indent. Improve SyntaxError
locations for an un-parenthesized generator used as arguments. Patch by
Matthieu Dartiailh.
: Replace JUMP_IF_NOT_EG_MATCH by
CHECK_EG_MATCH + jump.
: Emscripten builds cannot handle signals in the usual way due to
platform limitations. Python can now handle signals. To use, set
Module.Py_EmscriptenSignalBuffer to be a single byte SharedArrayBuffer and
set Py_EMSCRIPTEN_SIGNAL_HANDLING to 1. Writing a number into the
SharedArrayBuffer will cause the corresponding signal to be raised into
the Python thread.
: Replace JUMP_IF_NOT_EXC_MATCH by
CHECK_EXC_MATCH + jump.
: Replace the absolute jump opcode JUMP_NO_INTERRUPT by
the relative JUMP_BACKWARD_NO_INTERRUPT.
: Avoid unnecessary allocations when comparing code objects.
: Fix a crash when using a named unicode character like
  after the main interpreter has been initialized a
second time.
: WebAssembly cannot deal with bad function pointer casts
(different count or types of arguments). Python can now use call
trampolines to mitigate the problem. Define PY_CALL_TRAMPOLINE
to enable call trampolines.
: Some Windows system error codes(>= 10000) are now mapped into
the correct errno and may now raise a subclass of . Patch by
Donghee Na.
: Improve error messages in f-string syntax errors concerning
empty expressions.
: Fix a crash if we fail to decode characters in interactive mode
if the tokenizer buffers are uninitialized. Patch by Pablo Galindo.
: Speed up calls to c functions with keyword arguments by 25%
with specialization. Patch by Kumar Aditya.
: Replaced JUMP_ABSOLUTE by the relative jump
JUMP_BACKWARD.
: PyFrame_FastToLocalsWithError() and
PyFrame_LocalsToFast() are no longer called during profiling nor
tracing. C code can access the  attribute of
PyFrameObject by calling PyFrame_GetLocals().
: Improve performance of array_inplace_repeat by reducing the
number of invocations of . Refactor the  and inplace
 methods of , ,  and
unicodeobject to use the common _PyBytes_Repeat.
: Reduce de-optimization in the specialized
BINARY_OP_INPLACE_ADD_UNICODE opcode.
: Remove the  field from the _PyInterpreterFrame
struct. Add the  field to the _PyInterpreterFrame struct to make
ownership explicit to simplify clearing and deallocing frames and
generators.
: Check for the existence of the âsys/auxv.hâ header in
faulthandler to avoid compilation problems in systems where this
header doesnât exist. Patch by Pablo Galindo
: Use low bit of LOAD_GLOBAL to indicate whether to push a
 before the global. Helps streamline the call sequence a bit.
: Quicken bytecode in-place by storing it as part of the
corresponding PyCodeObject.
: Speed up iteration of  and  by
30%. Patch by Kumar Aditya.
: Improved the performance of list.append() and list
comprehensions by optimizing for the common case, where no resize is
needed. Patch by Dennis Sweeney.
: Improve performance of bytearray_repeat and
bytearray_irepeat by reducing the number of invocations of .
: Deprecate passing a message into asyncio.Future.cancel()
and asyncio.Task.cancel()
: Speed up  creation from  and
 by 40%. Patch by Kumar Aditya.
: Removed the  call when initializing a list and
moved initializing to list_extend. Patch by Jeremiah Pascual.
: Speed up throwing exception in generator with
METH_FASTCALL calling convention. Patch by Kumar Aditya.
: Modify STORE_SUBSCR to use an inline cache entry
(rather than its oparg) as an adaptive counter.
: Use inline caching for  and ,
and remove the internal machinery for managing the (now unused) non-inline
caches.
: Statically allocate and initialize the latin1 characters.
: Improve syntax errors for incorrect function definitions. Patch
by Pablo Galindo
: Fix docstrings of ,
, and  to clarify that
they create a new copy of the property.
: Make grammar changes required for PEP 646.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Raise IndentationError instead of SyntaxError for
a bare  with no following indent. Improve SyntaxError
locations for an un-parenthesized generator used as arguments. Patch by
Matthieu Dartiailh.

: Replace JUMP_IF_NOT_EG_MATCH by
CHECK_EG_MATCH + jump.

: Emscripten builds cannot handle signals in the usual way due to
platform limitations. Python can now handle signals. To use, set
Module.Py_EmscriptenSignalBuffer to be a single byte SharedArrayBuffer and
set Py_EMSCRIPTEN_SIGNAL_HANDLING to 1. Writing a number into the
SharedArrayBuffer will cause the corresponding signal to be raised into
the Python thread.

: Replace JUMP_IF_NOT_EXC_MATCH by
CHECK_EXC_MATCH + jump.

: Replace the absolute jump opcode JUMP_NO_INTERRUPT by
the relative JUMP_BACKWARD_NO_INTERRUPT.

: Avoid unnecessary allocations when comparing code objects.

: Fix a crash when using a named unicode character like
  after the main interpreter has been initialized a
second time.

: WebAssembly cannot deal with bad function pointer casts
(different count or types of arguments). Python can now use call
trampolines to mitigate the problem. Define PY_CALL_TRAMPOLINE
to enable call trampolines.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Some Windows system error codes(>= 10000) are now mapped into
the correct errno and may now raise a subclass of . Patch by
Donghee Na.

: Improve error messages in f-string syntax errors concerning
empty expressions.

: Fix a crash if we fail to decode characters in interactive mode
if the tokenizer buffers are uninitialized. Patch by Pablo Galindo.

: Speed up calls to c functions with keyword arguments by 25%
with specialization. Patch by Kumar Aditya.

: Replaced JUMP_ABSOLUTE by the relative jump
JUMP_BACKWARD.

: PyFrame_FastToLocalsWithError() and
PyFrame_LocalsToFast() are no longer called during profiling nor
tracing. C code can access the  attribute of
PyFrameObject by calling PyFrame_GetLocals().

: Improve performance of array_inplace_repeat by reducing the
number of invocations of . Refactor the  and inplace
 methods of , ,  and
unicodeobject to use the common _PyBytes_Repeat.

: Reduce de-optimization in the specialized
BINARY_OP_INPLACE_ADD_UNICODE opcode.

: Remove the  field from the _PyInterpreterFrame
struct. Add the  field to the _PyInterpreterFrame struct to make
ownership explicit to simplify clearing and deallocing frames and
generators.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Check for the existence of the âsys/auxv.hâ header in
faulthandler to avoid compilation problems in systems where this
header doesnât exist. Patch by Pablo Galindo

: Use low bit of LOAD_GLOBAL to indicate whether to push a
 before the global. Helps streamline the call sequence a bit.

: Quicken bytecode in-place by storing it as part of the
corresponding PyCodeObject.

: Speed up iteration of  and  by
30%. Patch by Kumar Aditya.

: Improved the performance of list.append() and list
comprehensions by optimizing for the common case, where no resize is
needed. Patch by Dennis Sweeney.

: Improve performance of bytearray_repeat and
bytearray_irepeat by reducing the number of invocations of .

: Deprecate passing a message into asyncio.Future.cancel()
and asyncio.Task.cancel()

: Speed up  creation from  and
 by 40%. Patch by Kumar Aditya.

: Removed the  call when initializing a list and
moved initializing to list_extend. Patch by Jeremiah Pascual.

: Speed up throwing exception in generator with
METH_FASTCALL calling convention. Patch by Kumar Aditya.

: Modify STORE_SUBSCR to use an inline cache entry
(rather than its oparg) as an adaptive counter.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Use inline caching for  and ,
and remove the internal machinery for managing the (now unused) non-inline
caches.

: Statically allocate and initialize the latin1 characters.

: Improve syntax errors for incorrect function definitions. Patch
by Pablo Galindo

: Fix docstrings of ,
, and  to clarify that
they create a new copy of the property.

: Make grammar changes required for PEP 646.

================================================================================

# Changelog - Library (Part 1)

List:
: Allow vendors to override CTYPES_MAX_ARGCOUNT.
:  module: fix memory leak when a match is terminated by
a signal or memory allocation failure. Patch by Ma Lin.
: Allow overriding a future compliance check in
asyncio.Task.
: When subprocess tries to use vfork, it now falls back to fork
if vfork returns an error. This allows use in situations where vfork isnât
allowed by the OS kernel.
: Convert the  module into a package. Deprecate modules
sre_compile, sre_constants and .
: Add ZipFile.mkdir()
: Fix asyncio.loop.sock_connect() to only resolve names for
socket.AF_INET or socket.AF_INET6 families. Resolution
may not make sense for other families, like socket.AF_BLUETOOTH
and socket.AF_UNIX.
: Adds the fully qualified test name to unittest output
: Deprecate the aifc module.
: Handle Ctrl+C in asyncio programs to interrupt the main task.
: hashlib.algorithms_available now lists only algorithms
that are provided by activated crypto providers on OpenSSL 3.0. Legacy
algorithms are not listed unless the legacy provider has been loaded into
the default OSSL context.
: All  exception messages raised in
urllib.request.URLopener now contain a colon between 
 and the rest of the message. Previously,
open_ftp() missed the colon. Patch by Oleg
Iarygin.
: Exception chaining is changed from
Exception.with_traceback()/sys.exc_info() to .
Patch by Oleg Iarygin.
: âs internal  module now prefers
 from https://www.blake2.net/ over Pythonâs vendored copy of
blake2.
: The Keccak Code Package for âs internal 
module has been replaced with tiny_sha3. The module is used as fallback
when Python is built without OpenSSL.
: Implement typing.LiteralString, part of .
Patch by Jelle Zijlstra.
: Optimize re.search(), re.split(),
re.findall(), re.finditer() and  for regular
expressions starting with  or .
: Protect the re.finditer() iterator from re-entering.
: Optimize calling GenericAlias objects by using 
vectorcall and by replacing PyObject_SetAttrString with
PyObject_SetAttr.
: Add the metadata_encoding parameter in the
zipfile.ZipFile constructor and the --metadata-encoding
option in the  CLI to allow reading zipfiles using
non-standard codecs to encode the filenames within the archive.
: Make io.text_encoding() returns âutf-8â when UTF-8 mode
is enabled.
: Fix thread safety of zipfile._SharedFile.tell() to avoid
a âzipfile.BadZipFile: Bad CRC-32 for fileâ exception when reading a
 from multiple threads.
: Fix binascii.crc32() when it is compiled to use zlibâc
crc32 to work properly on inputs 4+GiB in length instead of returning the
wrong result. The workaround prior to this was to always feed the function
data in increments smaller than 4GiB or to just call the zlib module
function.
We also have binascii.crc32() release the GIL when computing on
larger inputs as zlib.crc32() and  do.
This also boosts performance on Windows as it now uses the zlib crc32
implementation for binascii.crc32() for a 2-3x speedup.
That the stdlib has a crc32 API in two modules is a known historical
oddity. This moves us closer to a single implementation behind them.

================================================================================

# Changelog - Library (Part 2)

: Global inline flags (e.g. ) can now only be used at the
start of the regular expressions.  Using them not at the start of
expression was deprecated since Python 3.6.
: A warning about inline flags not at the start of the regular
expression now contains the position of the flag.
bpo-433030: Add support of atomic grouping () and possessive
quantifiers (, , , ) in 
expressions.
: Implement asyncio.Runner context manager.
: dataclass() slots=True now correctly
omits slots already defined in base classes. Patch by Arie Bovenberg.
: Use FASTCALL convention for FutureIter.throw()
: Deprecate the various modules listed by :
aifc, asynchat, asyncore, audioop, cgi, cgitb, chunk, crypt, imghdr,
msilib, nntplib, nis, ossaudiodev, pipes, smtpd, sndhdr, spwd, sunau,
telnetlib, uu, xdrlib

================================================================================

# Changelog - Library (Part 3)

: Remove passing coroutine objects to asyncio.wait().
: Normalize  of asyncio future and task objects.
: Fix bug where doctests using globals would fail when run
multiple times.
: Add hashlib.file_digest() helper for efficient hashing of
file object.
: Made cumtime the default sorting key for cProfile
: Fix asyncio.Semaphore re-aquiring FIFO order.
: The ,  and  
modules have been deprecated since at least Python 3.6. Their
documentation and deprecation warnings and have now been updated to note
they will removed in Python 3.12 ().
: Fix a crash when closing transports where the underlying socket
handle is already invalid on the Proactor event loop.
: select.select() now passes  to  for
each empty fdset.
: Apply bugfixes from importlib_metadata 4.11.3, including bugfix
for EntryPoint.extras, which was returning match objects and not the
extras strings.
: Allow subclassing of typing.Any. Patch by Shantanu
Jain.
: Deprecate missing asyncio.Task.set_name() for third-party
task implementations, schedule making it mandatory in Python 3.13.
: Accept explicit contextvars.Context in
asyncio.create_task() and asyncio.loop.create_task().
: typing.get_args(typing.Tuple[()]) now returns 
instead of .
: Add os.sysconf_names['SC_MINSIGSTKSZ'].
: Upgrade pip wheel bundled with ensurepip (pip 22.0.4)
: faulthandler: On Linux 5.14 and newer, dynamically
determine size of signal handler stack size CPython allocates using
getauxval(AT_MINSIGSTKSZ). This changes allows for Python extensionâs
request to Linux kernel to use AMX_TILE instruction set on Sapphire Rapids
Xeon processor to succeed, unblocking use of the ISA in frameworks.
: The  value is now always available. Patch by
Victor Stinner.
: Expose asyncio.base_events.Server as
asyncio.Server. Patch by Stefan Zabka.
: The  module no longer assumes that
 and  are small int
singletons.
: Update bundled libexpat to 2.4.7
: The  module is now optional.
os.path.expanduser() returns the path when the  module is
not available.
: , the  module. Adds support for parsing
TOML.
bpo-464471: asyncio.timeout() and asyncio.timeout_at() context
managers added. Patch by Tin TvrtkoviÄ and Andrew Svetlov.
: Added raw datagram socket functions for asyncio:
sock_sendto(),
sock_recvfrom() and
sock_recvfrom_into().
: No longer require valid typeforms to be callable. This allows
typing.Annotated to wrap typing.ParamSpecArgs and
dataclasses.InitVar. Patch by Gregory Beauregard.
: Brings  propagation for GenericAlias
in line with Concatenate (and others).
: Define posix_venv and  sysconfig installation
schemes to be used for bootstrapping new virtual
environments. Add  sysconfig installation scheme to get the
appropriate one of the above. The schemes are identical to the
pre-existing posix_prefix and  install schemes. The 
module now uses the  scheme to create new virtual environments
instead of hardcoding the paths depending only on the platform. Downstream
Python distributors customizing the posix_prefix or  install scheme
in a way that is not compatible with the install scheme used in virtual
environments are encouraged not to customize the  schemes. When
Python itself runs in a virtual environment,
sysconfig.get_default_scheme() and
sysconfig.get_preferred_scheme() with key="prefix" returns
.
: Implement support for PEP 646 in typing.py.
: Allow unpacking types.GenericAlias objects, e.g. *tuple[int,
.
: Warnings captured by the logging module are now logged without
a format string to prevent systems that group logs by the msg argument
from grouping captured warnings together.
: typing.get_type_hints() now supports evaluating strings
as forward references in PEP 585 generic aliases.
: Add DeprecationWarning to LegacyInterpolation,
deprecated in the docstring since Python 3.2. Will be removed in Python
3.13. Use BasicInterpolation or ExtendedInterpolation
instead.
:  now excludes __future__ imports from the moduleâs
data items.
: Add typing.assert_type(). Patch by Jelle Zijlstra.
: Fix a unittest issue where if the command was invoked as
   and the filename(s) began with a dot (.), a
ValueError is returned.
: Add optional parameter  in shutil.rmtree().
: unittest.TestProgram.usageExit() is marked as
deprecated, to be removed in Python 3.13.
: Improve the error message when you try to subclass an instance
of typing.NewType.
: Fix supporting generic aliases in .
: Fix inconsistency with uppercase file extensions in
MimeTypes.guess_type(). Patch by Kumar Aditya.
: Add LOCAL_CREDS, LOCAL_CREDS_PERSISTENT and
SCM_CREDS2 FreeBSD constants to the socket module.
: Fix  method of a member file in , when
the input data is an object that supports the buffer protocol, the file
length may be wrong.
: Fix handling of the stacklevel argument to logging
functions in the  module so that it is consistent across all
logging functions and, as advertised, similar to the stacklevel
argument used in .
: Fix bug where  sometimes drops frames from
tracebacks of exceptions raised in tests.
: Raise more accurate and  compatible exceptions in
.

================================================================================

# Changelog - Library (Part 4)

Raise InterfaceError instead of
ProgrammingError for SQLITE_MISUSE errors.
Donât overwrite BufferError with ValueError when conversion to
BLOB fails.
Raise ProgrammingError instead of  if
user tries to  more than one SQL statement.
Raise ProgrammingError instead of ValueError if an SQL
query contains null characters.


: Add missing terminated NUL in sockaddr_unâs length
This was potentially observable when using non-abstract AF_UNIX datagram
sockets to processes written in another programming language.

: Add serialize() and
deserialize() support to . Patch
by Erlend E. Aasland.
: Added ctypes.BigEndianUnion and
ctypes.LittleEndianUnion classes, as originally documented in the
library docs but not yet implemented.
: Add an Barrier object in synchronization primitives of
 Lib in order to be consistent with Barrier from  and
multiprocessing libs*
:  module, fix a few bugs about capturing group. In rare
cases, capturing group gets an incorrect string. Patch by Ma Lin.

: Allow vendors to override CTYPES_MAX_ARGCOUNT.

:  module: fix memory leak when a match is terminated by
a signal or memory allocation failure. Patch by Ma Lin.

================================================================================

# Changelog - Library (Part 5)

: Allow overriding a future compliance check in
asyncio.Task.

: When subprocess tries to use vfork, it now falls back to fork
if vfork returns an error. This allows use in situations where vfork isnât
allowed by the OS kernel.

: Convert the  module into a package. Deprecate modules
sre_compile, sre_constants and .

: Add ZipFile.mkdir()

: Fix asyncio.loop.sock_connect() to only resolve names for
socket.AF_INET or socket.AF_INET6 families. Resolution
may not make sense for other families, like socket.AF_BLUETOOTH
and socket.AF_UNIX.

: Adds the fully qualified test name to unittest output

: Deprecate the aifc module.

: Handle Ctrl+C in asyncio programs to interrupt the main task.

: hashlib.algorithms_available now lists only algorithms
that are provided by activated crypto providers on OpenSSL 3.0. Legacy
algorithms are not listed unless the legacy provider has been loaded into
the default OSSL context.

: All  exception messages raised in
urllib.request.URLopener now contain a colon between 
 and the rest of the message. Previously,
open_ftp() missed the colon. Patch by Oleg
Iarygin.

: Exception chaining is changed from
Exception.with_traceback()/sys.exc_info() to .
Patch by Oleg Iarygin.

================================================================================

# Changelog - Library (Part 6)

: âs internal  module now prefers
 from https://www.blake2.net/ over Pythonâs vendored copy of
blake2.

: The Keccak Code Package for âs internal 
module has been replaced with tiny_sha3. The module is used as fallback
when Python is built without OpenSSL.

: Implement typing.LiteralString, part of .
Patch by Jelle Zijlstra.

: Optimize re.search(), re.split(),
re.findall(), re.finditer() and  for regular
expressions starting with  or .

: Protect the re.finditer() iterator from re-entering.

: Optimize calling GenericAlias objects by using 
vectorcall and by replacing PyObject_SetAttrString with
PyObject_SetAttr.

: Add the metadata_encoding parameter in the
zipfile.ZipFile constructor and the --metadata-encoding
option in the  CLI to allow reading zipfiles using
non-standard codecs to encode the filenames within the archive.

: Make io.text_encoding() returns âutf-8â when UTF-8 mode
is enabled.

: Fix thread safety of zipfile._SharedFile.tell() to avoid
a âzipfile.BadZipFile: Bad CRC-32 for fileâ exception when reading a
 from multiple threads.

================================================================================

# Changelog - Library (Part 7)

: Fix binascii.crc32() when it is compiled to use zlibâc
crc32 to work properly on inputs 4+GiB in length instead of returning the
wrong result. The workaround prior to this was to always feed the function
data in increments smaller than 4GiB or to just call the zlib module
function.

We also have binascii.crc32() release the GIL when computing on
larger inputs as zlib.crc32() and  do.

This also boosts performance on Windows as it now uses the zlib crc32
implementation for binascii.crc32() for a 2-3x speedup.

That the stdlib has a crc32 API in two modules is a known historical
oddity. This moves us closer to a single implementation behind them.

: Global inline flags (e.g. ) can now only be used at the
start of the regular expressions.  Using them not at the start of
expression was deprecated since Python 3.6.

: A warning about inline flags not at the start of the regular
expression now contains the position of the flag.

bpo-433030: Add support of atomic grouping () and possessive
quantifiers (, , , ) in 
expressions.

: Implement asyncio.Runner context manager.

: dataclass() slots=True now correctly
omits slots already defined in base classes. Patch by Arie Bovenberg.

================================================================================

# Changelog - Library (Part 8)

: Use FASTCALL convention for FutureIter.throw()

: Deprecate the various modules listed by :

aifc, asynchat, asyncore, audioop, cgi, cgitb, chunk, crypt, imghdr,
msilib, nntplib, nis, ossaudiodev, pipes, smtpd, sndhdr, spwd, sunau,
telnetlib, uu, xdrlib

: Remove passing coroutine objects to asyncio.wait().

: Normalize  of asyncio future and task objects.

: Fix bug where doctests using globals would fail when run
multiple times.

: Add hashlib.file_digest() helper for efficient hashing of
file object.

: Made cumtime the default sorting key for cProfile

: Fix asyncio.Semaphore re-aquiring FIFO order.

: The ,  and  
modules have been deprecated since at least Python 3.6. Their
documentation and deprecation warnings and have now been updated to note
they will removed in Python 3.12 ().

: Fix a crash when closing transports where the underlying socket
handle is already invalid on the Proactor event loop.

: select.select() now passes  to  for
each empty fdset.

: Apply bugfixes from importlib_metadata 4.11.3, including bugfix
for EntryPoint.extras, which was returning match objects and not the
extras strings.

: Allow subclassing of typing.Any. Patch by Shantanu
Jain.

================================================================================

# Changelog - Library (Part 9)

: Deprecate missing asyncio.Task.set_name() for third-party
task implementations, schedule making it mandatory in Python 3.13.

: Accept explicit contextvars.Context in
asyncio.create_task() and asyncio.loop.create_task().

: typing.get_args(typing.Tuple[()]) now returns 
instead of .

: Add os.sysconf_names['SC_MINSIGSTKSZ'].

: Upgrade pip wheel bundled with ensurepip (pip 22.0.4)

: faulthandler: On Linux 5.14 and newer, dynamically
determine size of signal handler stack size CPython allocates using
getauxval(AT_MINSIGSTKSZ). This changes allows for Python extensionâs
request to Linux kernel to use AMX_TILE instruction set on Sapphire Rapids
Xeon processor to succeed, unblocking use of the ISA in frameworks.

: The  value is now always available. Patch by
Victor Stinner.

: Expose asyncio.base_events.Server as
asyncio.Server. Patch by Stefan Zabka.

: The  module no longer assumes that
 and  are small int
singletons.

: Update bundled libexpat to 2.4.7

: The  module is now optional.
os.path.expanduser() returns the path when the  module is
not available.

: , the  module. Adds support for parsing
TOML.

================================================================================

# Changelog - Library (Part 10)

bpo-464471: asyncio.timeout() and asyncio.timeout_at() context
managers added. Patch by Tin TvrtkoviÄ and Andrew Svetlov.

: Added raw datagram socket functions for asyncio:
sock_sendto(),
sock_recvfrom() and
sock_recvfrom_into().

: No longer require valid typeforms to be callable. This allows
typing.Annotated to wrap typing.ParamSpecArgs and
dataclasses.InitVar. Patch by Gregory Beauregard.

: Brings  propagation for GenericAlias
in line with Concatenate (and others).

================================================================================

# Changelog - Library (Part 11)

: Define posix_venv and  sysconfig installation
schemes to be used for bootstrapping new virtual
environments. Add  sysconfig installation scheme to get the
appropriate one of the above. The schemes are identical to the
pre-existing posix_prefix and  install schemes. The 
module now uses the  scheme to create new virtual environments
instead of hardcoding the paths depending only on the platform. Downstream
Python distributors customizing the posix_prefix or  install scheme
in a way that is not compatible with the install scheme used in virtual
environments are encouraged not to customize the  schemes. When
Python itself runs in a virtual environment,
sysconfig.get_default_scheme() and
sysconfig.get_preferred_scheme() with key="prefix" returns
.

: Implement support for PEP 646 in typing.py.

: Allow unpacking types.GenericAlias objects, e.g. *tuple[int,
.

: Warnings captured by the logging module are now logged without
a format string to prevent systems that group logs by the msg argument
from grouping captured warnings together.

: typing.get_type_hints() now supports evaluating strings
as forward references in PEP 585 generic aliases.

================================================================================

# Changelog - Library (Part 12)

: Add DeprecationWarning to LegacyInterpolation,
deprecated in the docstring since Python 3.2. Will be removed in Python
3.13. Use BasicInterpolation or ExtendedInterpolation
instead.

:  now excludes __future__ imports from the moduleâs
data items.

: Add typing.assert_type(). Patch by Jelle Zijlstra.

: Fix a unittest issue where if the command was invoked as
   and the filename(s) began with a dot (.), a
ValueError is returned.

: Add optional parameter  in shutil.rmtree().

: unittest.TestProgram.usageExit() is marked as
deprecated, to be removed in Python 3.13.

: Improve the error message when you try to subclass an instance
of typing.NewType.

: Fix supporting generic aliases in .

: Fix inconsistency with uppercase file extensions in
MimeTypes.guess_type(). Patch by Kumar Aditya.

: Add LOCAL_CREDS, LOCAL_CREDS_PERSISTENT and
SCM_CREDS2 FreeBSD constants to the socket module.

: Fix  method of a member file in , when
the input data is an object that supports the buffer protocol, the file
length may be wrong.

================================================================================

# Changelog - Library (Part 13)

: Fix handling of the stacklevel argument to logging
functions in the  module so that it is consistent across all
logging functions and, as advertised, similar to the stacklevel
argument used in .

: Fix bug where  sometimes drops frames from
tracebacks of exceptions raised in tests.

: Raise more accurate and  compatible exceptions in
.

List:
Raise InterfaceError instead of
ProgrammingError for SQLITE_MISUSE errors.
Donât overwrite BufferError with ValueError when conversion to
BLOB fails.
Raise ProgrammingError instead of  if
user tries to  more than one SQL statement.
Raise ProgrammingError instead of ValueError if an SQL
query contains null characters.

Raise InterfaceError instead of
ProgrammingError for SQLITE_MISUSE errors.

Donât overwrite BufferError with ValueError when conversion to
BLOB fails.

Raise ProgrammingError instead of  if
user tries to  more than one SQL statement.

Raise ProgrammingError instead of ValueError if an SQL
query contains null characters.

: Add missing terminated NUL in sockaddr_unâs length

This was potentially observable when using non-abstract AF_UNIX datagram
sockets to processes written in another programming language.

================================================================================

# Changelog - Library (Part 14)

: Add serialize() and
deserialize() support to . Patch
by Erlend E. Aasland.

: Added ctypes.BigEndianUnion and
ctypes.LittleEndianUnion classes, as originally documented in the
library docs but not yet implemented.

: Add an Barrier object in synchronization primitives of
 Lib in order to be consistent with Barrier from  and
multiprocessing libs*

:  module, fix a few bugs about capturing group. In rare
cases, capturing group gets an incorrect string. Patch by Ma Lin.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Document internal  API.
: Update PEP URLs to âs new canonical form.
: Clarified the old Python versions compatibility note of
binascii.crc32() / zlib.adler32() / zlib.crc32()
functions.
: Clarify  statement execution in its doc.
: Adjust inaccurate phrasing in
Defining Extension Types: Tutorial about the  field and the
macros used to access its contents.
: Document that in some circumstances KeyboardInterrupt
may cause the code to enter an inconsistent state. Provided a sample
workaround to avoid it if needed.
: Link the errnos referenced in Doc/library/exceptions.rst to
their respective section in Doc/library/errno.rst, and vice versa.
Previously this was only done for EINTR and InterruptedError. Patch by Yan
âyyyyyyyanâ Orestes.

: Document internal  API.

: Update PEP URLs to âs new canonical form.

: Clarified the old Python versions compatibility note of
binascii.crc32() / zlib.adler32() / zlib.crc32()
functions.

: Clarify  statement execution in its doc.

: Adjust inaccurate phrasing in
Defining Extension Types: Tutorial about the  field and the
macros used to access its contents.

================================================================================

# Changelog - Documentation (Part 2)

: Document that in some circumstances KeyboardInterrupt
may cause the code to enter an inconsistent state. Provided a sample
workaround to avoid it if needed.

: Link the errnos referenced in Doc/library/exceptions.rst to
their respective section in Doc/library/errno.rst, and vice versa.
Previously this was only done for EINTR and InterruptedError. Patch by Yan
âyyyyyyyanâ Orestes.

================================================================================

# Changelog - Tests (Part 1)

List:
: Skip test for sched_getaffinity() and
sched_setaffinity() error case on FreeBSD.
: Restore âdescriptionsâ when running tests internally.
: Rewrite asyncio.to_thread() tests to use
unittest.IsolatedAsyncioTestCase.
: The test suite is now passing on the Emscripten platform. All
fork, socket, and subprocess-based tests are skipped.
: Skip strftime("%4Y") feature test on Windows. It can cause
an assertion error in debug builds.
: Skip tests if platformâs  does not support
non-portable glibc extensions.
: A test case for os.sendfile() is converted from
deprecated  (see ) to . Patch by
Oleg Iarygin.

: Skip test for sched_getaffinity() and
sched_setaffinity() error case on FreeBSD.

: Restore âdescriptionsâ when running tests internally.

: Rewrite asyncio.to_thread() tests to use
unittest.IsolatedAsyncioTestCase.

: The test suite is now passing on the Emscripten platform. All
fork, socket, and subprocess-based tests are skipped.

: Skip strftime("%4Y") feature test on Windows. It can cause
an assertion error in debug builds.

: Skip tests if platformâs  does not support
non-portable glibc extensions.

================================================================================

# Changelog - Tests (Part 2)

: A test case for os.sendfile() is converted from
deprecated  (see ) to . Patch by
Oleg Iarygin.

================================================================================

# Changelog - Build (Part 1)

List:
: Add configure option --enable-wasm-dynamic-linking to
enable  and MAIN_MODULE / SIDE_MODULE on wasm32-emscripten.
:  now detects and skips all duplicated module
definitions. The first entry wins.
: Add SOABI wasm32-emscripten for Emscripten and
wasm32-wasi for WASI on 32bit WASM as well as  counter
parts.
: Ensure Windows install builds fail correctly with a non-zero
exit code when part of the build fails.
: Update OpenSSL to 1.1.1n for macOS installers and all Windows
builds.
: The  package now requires Tcl/Tk version 8.5.12
or newer.
: Add regen-configure make target to regenerate configure
script with Christianâs container image
quay.io/tiran/cpython_autoconf:269.
: Building Python now requires support of IEEE 754 floating-point
numbers. Patch by Victor Stinner.
:  now verifies that all SQLite C APIs needed for
the  extension module are found.

: Add configure option --enable-wasm-dynamic-linking to
enable  and MAIN_MODULE / SIDE_MODULE on wasm32-emscripten.

:  now detects and skips all duplicated module
definitions. The first entry wins.

: Add SOABI wasm32-emscripten for Emscripten and
wasm32-wasi for WASI on 32bit WASM as well as  counter
parts.

================================================================================

# Changelog - Build (Part 2)

: Ensure Windows install builds fail correctly with a non-zero
exit code when part of the build fails.

: Update OpenSSL to 1.1.1n for macOS installers and all Windows
builds.

: The  package now requires Tcl/Tk version 8.5.12
or newer.

: Add regen-configure make target to regenerate configure
script with Christianâs container image
quay.io/tiran/cpython_autoconf:269.

: Building Python now requires support of IEEE 754 floating-point
numbers. Patch by Victor Stinner.

:  now verifies that all SQLite C APIs needed for
the  extension module are found.

================================================================================

# Changelog - Windows (Part 1)

List:
: Update  to v1.2.12 to resolve CVE 2018-25032.
: Enables installing the  launcher on Windows
ARM64.
: Upgraded Python Launcher for Windows to support a new -V:company/tag
argument for full  support and to detect ARM64 installs. The
 suffix on arguments is deprecated, but still selects any
non-32-bit install. Setting PYLAUNCHER_ALLOW_INSTALL and
specifying a version that is not installed will attempt to install the
requested version from the Microsoft Store.
: The installer for Windows now includes documentation as loose
HTML files rather than a single compiled  file.
: Update Windows installer to use SQLite 3.38.1.
: Update bzip2 to 1.0.8 in Windows builds to mitigate
CVE 2016-3189 and CVE 2019-12900.
: Prevent CVE 2022-26488 by ensuring the Add to PATH option in
the Windows installer uses the correct path when being repaired.

: Update  to v1.2.12 to resolve CVE 2018-25032.

: Enables installing the  launcher on Windows
ARM64.

================================================================================

# Changelog - Windows (Part 2)

: Upgraded Python Launcher for Windows to support a new -V:company/tag
argument for full  support and to detect ARM64 installs. The
 suffix on arguments is deprecated, but still selects any
non-32-bit install. Setting PYLAUNCHER_ALLOW_INSTALL and
specifying a version that is not installed will attempt to install the
requested version from the Microsoft Store.

: The installer for Windows now includes documentation as loose
HTML files rather than a single compiled  file.

: Update Windows installer to use SQLite 3.38.1.

: Update bzip2 to 1.0.8 in Windows builds to mitigate
CVE 2016-3189 and CVE 2019-12900.

: Prevent CVE 2022-26488 by ensuring the Add to PATH option in
the Windows installer uses the correct path when being repaired.

================================================================================

# Changelog - macOS

List:
: Fix a regression in the setting of sys._base_executable in
framework builds, and thereby fix a regression in  virtual
environments with such builds.
: Update macOS installer to SQLite 3.38.1.

: Fix a regression in the setting of sys._base_executable in
framework builds, and thereby fix a regression in  virtual
environments with such builds.

: Update macOS installer to SQLite 3.38.1.

================================================================================

# Changelog - Tools/Demos

List:
: Replace Emscriptenâs limited shell with Katie Bellâs browser-ui
REPL from python-wasm project.

: Replace Emscriptenâs limited shell with Katie Bellâs browser-ui
REPL from python-wasm project.

================================================================================

# Changelog - C API (Part 1)

List:
: Add PyFrame_GetBuiltins, PyFrame_GetGenerator and
PyFrame_GetGlobals C-API functions to access frame object attributes
safely from C code.
: Move the private _PyFrameEvalFunction type, and private
_PyInterpreterState_GetEvalFrameFunc() and
_PyInterpreterState_SetEvalFrameFunc() functions to the internal C
API. The _PyFrameEvalFunction callback function type now uses the
_PyInterpreterFrame type which is part of the internal C API. Patch by
Victor Stinner.
: Move the private undocumented _PyEval_EvalFrameDefault()
function to the internal C API. The function now uses the
_PyInterpreterFrame type which is part of the internal C API. Patch by
Victor Stinner.
: Remove the private undocumented function
_PyEval_CallTracing() from the C API. Call the public
sys.call_tracing() function instead. Patch by Victor Stinner.
: Remove the private undocumented function
_PyEval_GetCoroutineOriginTrackingDepth() from the C API. Call the
public sys.get_coroutine_origin_tracking_depth() function instead.
Patch by Victor Stinner.
: Remove the following private undocumented functions from the C
API:

================================================================================

# Changelog - C API (Part 2)

_PyEval_GetAsyncGenFirstiter()
_PyEval_GetAsyncGenFinalizer()
_PyEval_SetAsyncGenFirstiter()
_PyEval_SetAsyncGenFinalizer()

Call the public sys.get_asyncgen_hooks() and
sys.set_asyncgen_hooks() functions instead. Patch by Victor Stinner.

: Remove private functions _PySys_GetObjectId() and
_PySys_SetObjectId(). Patch by Donghee Na.
: Add new functions to pack and unpack C double (serialize and
deserialize): PyFloat_Pack2(), PyFloat_Pack4(),
PyFloat_Pack8(), PyFloat_Unpack2(),
PyFloat_Unpack4() and PyFloat_Unpack8(). Patch by Victor
Stinner.

: Add PyFrame_GetBuiltins, PyFrame_GetGenerator and
PyFrame_GetGlobals C-API functions to access frame object attributes
safely from C code.

: Move the private _PyFrameEvalFunction type, and private
_PyInterpreterState_GetEvalFrameFunc() and
_PyInterpreterState_SetEvalFrameFunc() functions to the internal C
API. The _PyFrameEvalFunction callback function type now uses the
_PyInterpreterFrame type which is part of the internal C API. Patch by
Victor Stinner.

================================================================================

# Changelog - C API (Part 3)

: Move the private undocumented _PyEval_EvalFrameDefault()
function to the internal C API. The function now uses the
_PyInterpreterFrame type which is part of the internal C API. Patch by
Victor Stinner.

: Remove the private undocumented function
_PyEval_CallTracing() from the C API. Call the public
sys.call_tracing() function instead. Patch by Victor Stinner.

: Remove the private undocumented function
_PyEval_GetCoroutineOriginTrackingDepth() from the C API. Call the
public sys.get_coroutine_origin_tracking_depth() function instead.
Patch by Victor Stinner.

: Remove the following private undocumented functions from the C
API:

List:
_PyEval_GetAsyncGenFirstiter()
_PyEval_GetAsyncGenFinalizer()
_PyEval_SetAsyncGenFirstiter()
_PyEval_SetAsyncGenFinalizer()

_PyEval_GetAsyncGenFirstiter()

_PyEval_GetAsyncGenFinalizer()

_PyEval_SetAsyncGenFirstiter()

_PyEval_SetAsyncGenFinalizer()

Call the public sys.get_asyncgen_hooks() and
sys.set_asyncgen_hooks() functions instead. Patch by Victor Stinner.

: Remove private functions _PySys_GetObjectId() and
_PySys_SetObjectId(). Patch by Donghee Na.

================================================================================

# Changelog - C API (Part 4)

: Add new functions to pack and unpack C double (serialize and
deserialize): PyFloat_Pack2(), PyFloat_Pack4(),
PyFloat_Pack8(), PyFloat_Unpack2(),
PyFloat_Unpack4() and PyFloat_Unpack8(). Patch by Victor
Stinner.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Avoid overriding AttributeError metadata information for
nested attribute access calls. Patch by Pablo Galindo.
: Include the typeâs name in the error message for subscripting
non-generic types.
: Support vectorcall for . Patch by Ken Jin.
: Fix incorrect handling of inline cache entries when
specializing .
: Use an oparg to simplify the construction of helpful error
messages in GET_AWAITABLE.
: Make sure that str subclasses can be used as attribute names
for instances with virtual dictionaries. Fixes regression in 3.11alpha
: Add more detailed specialization failure stats for
COMPARE_OP followed by EXTENDED_ARG.
: Fix bug introduced during 3.11alpha where subclasses of
types.ModuleType with  were not initialized correctly,
resulting in an interpreter crash.
: Use inline caching for ,
LOAD_METHOD, and STORE_ATTR.
: Use inline cache for BINARY_SUBSCR.
: Use inline caching for COMPARE_OP.
: Deprecate PyBytesObject.ob_shash. It will be removed in
Python 3.13.
: Use inline caching for UNPACK_SEQUENCE.
: Reduces dict size by removing hash value from hash table when
all inserted keys are Unicode. For example,
sys.getsizeof(dict.fromkeys("abcdefg")) becomes 272 bytes from 352
bytes on 64bit platform.
: Use inline cache for LOAD_GLOBAL.
: Rename the private undocumented float.__set_format__()
method to float.__setformat__() to fix a typo introduced in Python
3.7. The method is only used by test_float. Patch by Victor Stinner.
: Remove the undocumented private float.__set_format__()
method, previously known as float.__setformat__() in Python 3.7. Its
docstring said: âYou probably donât want to use this function. It exists
mainly to be used in Pythonâs test suite.â Patch by Victor Stinner.
: Fix regression that dict.update(other) may donât respect
iterate order of other when other is key sharing dict.
: Share global string identifiers in deep-frozen modules.
: Fix memory leak in interned strings of deep-frozen modules.
: Store  caches inline using a new
 instruction.
: Specialize LOAD_METHOD for instances with a dict.
: Reduce the memory usage of specialized  and
STORE_ATTR instructions.
: Add number of sub-exceptions to BaseException.__str__().
: Donât un-adapt COMPARE_OP when collecting
specialization stats.
: Fix specialization stats gathering for 
instructions.
: Bump up the libexpat version into 2.4.6
: Implement a specialized combined opcode
LOAD_FAST__LOAD_ATTR_INSTANCE_VALUE.  Patch by Dennis Sweeney.
: Fix parsing a numeric literal immediately (without spaces)
followed by ânot inâ keywords, like in   . Now the parser only
emits a warning, not a syntax error.
: Move  before  instruction in call
sequence. Change  of  to match  for easier
specialization.
: Remove the NEXT_BLOCK macro from compile.c, and make the
compiler automatically generate implicit blocks when they are needed.
: Add  instruction. This is used as a prefix when
evaluating a callable, so that the stack has the same shape for methods
and other calls. PRECALL_FUNCTION and PRECALL_METHOD are merged
into a single  instruction.
There is no change in semantics.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix an assert failure in debug builds when a â<â, â>â, or â=â
is the last character in an f-string thatâs missing a closing right brace.
: Message of AttributeError caused by getting, setting or
deleting a property without the corresponding function now mentions that
the attribute is in fact a property and also specifies type of the class
that it belongs to.
: Make sure that all backwards jumps use the JUMP_ABSOLUTE
instruction, rather than JUMP_FORWARD with an argument of
(2**32)+offset.
: Correct the docstring for the __bool__() method.
Patch by Jelle Zijlstra.
: Add more detailed specialization failure statistics for
.
: Avoid potential exponential backtracking when producing some
syntax errors involving lots of brackets. Patch by Pablo Galindo.
:  now allocates memory on the stack instead of on
the heap to pass arguments while calling a Python callback function. Patch
by Donghee Na.
: Add a quickened form of  that skips quickening
checks.
: Specialize UNPACK_SEQUENCE for  and
 unpackings.
: Opcode pair stats are now gathered with --enable-pystats.
Defining DYNAMIC_EXECUTION_PROFILE or   no longer has any
effect.
: Allow more than 16 items in a split dict before it is combined.
The limit is now 254.
: Add a missing call to  in
Modules/_hashopenssl.c.
: Use PyObject_Vectorcall() while calling ctypes callback
function. Patch by Donghee Na.
: When iterating over sets internally in setobject.c, acquire
strong references to the resulting items from the set.  This prevents
crashes in corner-cases of various set operations where the set gets
mutated.
: The bytecode compiler now attempts to apply runtime stack
manipulations at compile-time (whenever it is feasible to do so).
: Fixed a minor portability issue in the implementation of
PyLong_FromLong(), and added a fast path for single-digit integers
to PyLong_FromLongLong().

================================================================================

# Changelog - Core and Builtins (Part 3)

: Avoid overriding AttributeError metadata information for
nested attribute access calls. Patch by Pablo Galindo.

: Include the typeâs name in the error message for subscripting
non-generic types.

: Support vectorcall for . Patch by Ken Jin.

: Fix incorrect handling of inline cache entries when
specializing .

: Use an oparg to simplify the construction of helpful error
messages in GET_AWAITABLE.

: Make sure that str subclasses can be used as attribute names
for instances with virtual dictionaries. Fixes regression in 3.11alpha

: Add more detailed specialization failure stats for
COMPARE_OP followed by EXTENDED_ARG.

: Fix bug introduced during 3.11alpha where subclasses of
types.ModuleType with  were not initialized correctly,
resulting in an interpreter crash.

: Use inline caching for ,
LOAD_METHOD, and STORE_ATTR.

: Use inline cache for BINARY_SUBSCR.

: Use inline caching for COMPARE_OP.

: Deprecate PyBytesObject.ob_shash. It will be removed in
Python 3.13.

: Use inline caching for UNPACK_SEQUENCE.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Reduces dict size by removing hash value from hash table when
all inserted keys are Unicode. For example,
sys.getsizeof(dict.fromkeys("abcdefg")) becomes 272 bytes from 352
bytes on 64bit platform.

: Use inline cache for LOAD_GLOBAL.

: Rename the private undocumented float.__set_format__()
method to float.__setformat__() to fix a typo introduced in Python
3.7. The method is only used by test_float. Patch by Victor Stinner.

: Remove the undocumented private float.__set_format__()
method, previously known as float.__setformat__() in Python 3.7. Its
docstring said: âYou probably donât want to use this function. It exists
mainly to be used in Pythonâs test suite.â Patch by Victor Stinner.

: Fix regression that dict.update(other) may donât respect
iterate order of other when other is key sharing dict.

: Share global string identifiers in deep-frozen modules.

: Fix memory leak in interned strings of deep-frozen modules.

: Store  caches inline using a new
 instruction.

: Specialize LOAD_METHOD for instances with a dict.

: Reduce the memory usage of specialized  and
STORE_ATTR instructions.

: Add number of sub-exceptions to BaseException.__str__().

================================================================================

# Changelog - Core and Builtins (Part 5)

: Donât un-adapt COMPARE_OP when collecting
specialization stats.

: Fix specialization stats gathering for 
instructions.

: Bump up the libexpat version into 2.4.6

: Implement a specialized combined opcode
LOAD_FAST__LOAD_ATTR_INSTANCE_VALUE.  Patch by Dennis Sweeney.

: Fix parsing a numeric literal immediately (without spaces)
followed by ânot inâ keywords, like in   . Now the parser only
emits a warning, not a syntax error.

: Move  before  instruction in call
sequence. Change  of  to match  for easier
specialization.

: Remove the NEXT_BLOCK macro from compile.c, and make the
compiler automatically generate implicit blocks when they are needed.

: Add  instruction. This is used as a prefix when
evaluating a callable, so that the stack has the same shape for methods
and other calls. PRECALL_FUNCTION and PRECALL_METHOD are merged
into a single  instruction.

There is no change in semantics.

: Fix an assert failure in debug builds when a â<â, â>â, or â=â
is the last character in an f-string thatâs missing a closing right brace.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Message of AttributeError caused by getting, setting or
deleting a property without the corresponding function now mentions that
the attribute is in fact a property and also specifies type of the class
that it belongs to.

: Make sure that all backwards jumps use the JUMP_ABSOLUTE
instruction, rather than JUMP_FORWARD with an argument of
(2**32)+offset.

: Correct the docstring for the __bool__() method.
Patch by Jelle Zijlstra.

: Add more detailed specialization failure statistics for
.

: Avoid potential exponential backtracking when producing some
syntax errors involving lots of brackets. Patch by Pablo Galindo.

:  now allocates memory on the stack instead of on
the heap to pass arguments while calling a Python callback function. Patch
by Donghee Na.

: Add a quickened form of  that skips quickening
checks.

: Specialize UNPACK_SEQUENCE for  and
 unpackings.

: Opcode pair stats are now gathered with --enable-pystats.
Defining DYNAMIC_EXECUTION_PROFILE or   no longer has any
effect.

: Allow more than 16 items in a split dict before it is combined.
The limit is now 254.

: Add a missing call to  in
Modules/_hashopenssl.c.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Use PyObject_Vectorcall() while calling ctypes callback
function. Patch by Donghee Na.

: When iterating over sets internally in setobject.c, acquire
strong references to the resulting items from the set.  This prevents
crashes in corner-cases of various set operations where the set gets
mutated.

: The bytecode compiler now attempts to apply runtime stack
manipulations at compile-time (whenever it is feasible to do so).

: Fixed a minor portability issue in the implementation of
PyLong_FromLong(), and added a fast path for single-digit integers
to PyLong_FromLongLong().

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed a file leak in xml.etree.ElementTree.iterparse()
when the iterator is not exhausted. Patch by Jacob Walls.
: Export unittest.doModuleCleanups() in .
Patch by Kumar Aditya.
: For performance, use the optimized string-searching
implementations from  and  for
 and .
: SimpleHTTPRequestHandler now uses HTML5
grammar. Patch by Donghee Na.
: Inherit asyncio proactor datagram transport from
asyncio.DatagramTransport.
: Support UDP sockets in  asyncio.loop.sock_connect() for
selector-based event loops.  Patch by Thomas Grainger.
: Make test suite support Expat >=2.4.5
: Raise  if ssl.SSLSocket is passed to
transport-based APIs.
: Fix libexpat symbols collisions with user dynamically loaded or
statically linked libexpat in embedded Python.
: The HTML serialisation in xml.etree.ElementTree now writes
, ,  and  as empty tags, as defined in
HTML 5.
: shutil.rmtree() can now work with VirtualBox shared
folders when running from the guest operating-system.
: Propagate asyncio.CancelledError message from inner task
to outer awaiter.
: Fix a bug in
urllib.request.HTTPPasswordMgr.find_user_password() and
urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated() which
allowed to bypass authorization. For example, access to URI
example.org/foobar was allowed if the user was authorized for URI
example.org/foo.
: random.gauss() and random.normalvariate() now have
default arguments.
: Add task groups to asyncio (structured concurrency, inspired by
Trioâs nurseries). This also introduces a change to task cancellation,
where a cancelled task canât be cancelled again until it calls
.uncancel().
: Fix  behavior on negative jump offsets.
: The __repr__() method of typing.ForwardRef now
includes the  parameter of typing.ForwardRef when it is
set.
: In typing.get_type_hints(), support evaluating
stringified ParamSpecArgs and ParamSpecKwargs annotations. Patch
by Gregory Beauregard.
: When the  module creates a pax format archive, it
will put an integer representation of timestamps in the ustar header (if
possible) for the benefit of older unarchivers, in addition to the
existing full-precision timestamps in the pax extended header.
: Deprecate kwargs-based syntax for typing.TypedDict
definitions. It had confusing semantics when specifying totality, and was
largely unused. Patch by Jingchen Ye.
: Make typing.ParamSpec args and kwargs equal to
themselves. Patch by Gregory Beauregard.
: ctypes.CFUNCTYPE() and ctypes.WINFUNCTYPE() now fail to
create the type if its _argtypes_ member contains too many arguments.
Previously, the error was only raised when calling a function. Patch by
Victor Stinner.
: Fix  in asyncio.gather() when initial type
check fails.
: The calendar.LocaleTextCalendar and
calendar.LocaleHTMLCalendar classes now use
locale.getlocale(), instead of using
locale.getdefaultlocale(), if no locale is specified. Patch by
Victor Stinner.
: The locale.getdefaultlocale() function is deprecated and
will be removed in Python 3.13. Use locale.setlocale(),
locale.getpreferredencoding(False)
and locale.getlocale() functions instead.  Patch by Victor Stinner.
: In typing.get_type_hints(), support evaluating bare
stringified  annotations. Patch by Gregory Beauregard.
: Fixed a discrepancy in the C implementation of the
xml.etree.ElementTree module. Now, instantiating an
xml.etree.ElementTree.XMLParser with a target=None keyword
provides a default xml.etree.ElementTree.TreeBuilder target as
the Python implementation does.
: Expose Linuxâs IP_BIND_ADDRESS_NO_PORT option in
.
: Fix a bug in the  module that was incorrectly
identifying invalid code involving string quotes as valid code.
: Improve typing.no_type_check().
Now it does not modify external classes and functions. We also now
correctly mark classmethods as not to be type checked.

================================================================================

# Changelog - Library (Part 2)

: expat: Update libexpat from 2.4.1 to 2.4.4
: Deprecate undocumented support for using a
pathlib.Path object as a context manager.
: Implement  typing.Self. Patch by James
Hilton-Balfe.
: Make various module __getattr__ AttributeErrors more
closely match a typical AttributeError
: Add typing.Never and typing.assert_never(). Patch
by Jelle Zijlstra.
: The  and __hash__() methods of
typing.ForwardRef now honor the  parameter of
typing.ForwardRef. Forward references from different modules are
now differentiated.
: Add missing  to
importlib.metadata.DeprecatedList. Patch by Arie Bovenberg.
: The  module now handles certificates with bit strings
in DN correctly.
: typing.get_type_hints() no longer adds  to
parameters with  as a default. This aligns to changes to PEP 484
in https://github.com/python/peps/pull/689
: Add  to re.__all__ and documented it.
Add  to indicate no flags being set.
:  no longer defines ffi_type_* symbols in
. The symbols have been provided by libffi for over a decade.
: Calling operator.itemgetter objects and
operator.attrgetter objects is now faster due to use of the vectorcall
calling convention.
: Fix an issue with is_tarfile() method when using
 argument: position in the  was advanced forward which
made it unreadable with tarfile.TarFile.open().
: Reimplement SSL/TLS support in asyncio, borrow the
implementation from uvloop library.
: Make the configparser.ConfigParser constructor raise
 if the interpolation parameter is not of type
configparser.Interpolation
: Implement inspect.ismethodwrapper() and fix
inspect.isroutine() for cases where methodwrapper is given. Patch by
Hakan Ãelik.
: argparse.FileType now supports an argument of â-â in binary
mode, returning the .buffer attribute of sys.stdin/sys.stdout as
appropriate. Modes including âxâ and âaâ are treated equivalently to âwâ
when argument is â-â. Patch contributed by Josh Rosenberg

================================================================================

# Changelog - Library (Part 3)

: Fixed a file leak in xml.etree.ElementTree.iterparse()
when the iterator is not exhausted. Patch by Jacob Walls.

: Export unittest.doModuleCleanups() in .
Patch by Kumar Aditya.

: For performance, use the optimized string-searching
implementations from  and  for
 and .

: SimpleHTTPRequestHandler now uses HTML5
grammar. Patch by Donghee Na.

: Inherit asyncio proactor datagram transport from
asyncio.DatagramTransport.

: Support UDP sockets in  asyncio.loop.sock_connect() for
selector-based event loops.  Patch by Thomas Grainger.

: Make test suite support Expat >=2.4.5

: Raise  if ssl.SSLSocket is passed to
transport-based APIs.

: Fix libexpat symbols collisions with user dynamically loaded or
statically linked libexpat in embedded Python.

: The HTML serialisation in xml.etree.ElementTree now writes
, ,  and  as empty tags, as defined in
HTML 5.

: shutil.rmtree() can now work with VirtualBox shared
folders when running from the guest operating-system.

: Propagate asyncio.CancelledError message from inner task
to outer awaiter.

================================================================================

# Changelog - Library (Part 4)

: Fix a bug in
urllib.request.HTTPPasswordMgr.find_user_password() and
urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated() which
allowed to bypass authorization. For example, access to URI
example.org/foobar was allowed if the user was authorized for URI
example.org/foo.

: random.gauss() and random.normalvariate() now have
default arguments.

: Add task groups to asyncio (structured concurrency, inspired by
Trioâs nurseries). This also introduces a change to task cancellation,
where a cancelled task canât be cancelled again until it calls
.uncancel().

: Fix  behavior on negative jump offsets.

: The __repr__() method of typing.ForwardRef now
includes the  parameter of typing.ForwardRef when it is
set.

: In typing.get_type_hints(), support evaluating
stringified ParamSpecArgs and ParamSpecKwargs annotations. Patch
by Gregory Beauregard.

: When the  module creates a pax format archive, it
will put an integer representation of timestamps in the ustar header (if
possible) for the benefit of older unarchivers, in addition to the
existing full-precision timestamps in the pax extended header.

================================================================================

# Changelog - Library (Part 5)

: Deprecate kwargs-based syntax for typing.TypedDict
definitions. It had confusing semantics when specifying totality, and was
largely unused. Patch by Jingchen Ye.

: Make typing.ParamSpec args and kwargs equal to
themselves. Patch by Gregory Beauregard.

: ctypes.CFUNCTYPE() and ctypes.WINFUNCTYPE() now fail to
create the type if its _argtypes_ member contains too many arguments.
Previously, the error was only raised when calling a function. Patch by
Victor Stinner.

: Fix  in asyncio.gather() when initial type
check fails.

: The calendar.LocaleTextCalendar and
calendar.LocaleHTMLCalendar classes now use
locale.getlocale(), instead of using
locale.getdefaultlocale(), if no locale is specified. Patch by
Victor Stinner.

: The locale.getdefaultlocale() function is deprecated and
will be removed in Python 3.13. Use locale.setlocale(),
locale.getpreferredencoding(False)
and locale.getlocale() functions instead.  Patch by Victor Stinner.

: In typing.get_type_hints(), support evaluating bare
stringified  annotations. Patch by Gregory Beauregard.

================================================================================

# Changelog - Library (Part 6)

: Fixed a discrepancy in the C implementation of the
xml.etree.ElementTree module. Now, instantiating an
xml.etree.ElementTree.XMLParser with a target=None keyword
provides a default xml.etree.ElementTree.TreeBuilder target as
the Python implementation does.

: Expose Linuxâs IP_BIND_ADDRESS_NO_PORT option in
.

: Fix a bug in the  module that was incorrectly
identifying invalid code involving string quotes as valid code.

: Improve typing.no_type_check().

Now it does not modify external classes and functions. We also now
correctly mark classmethods as not to be type checked.

: expat: Update libexpat from 2.4.1 to 2.4.4

: Deprecate undocumented support for using a
pathlib.Path object as a context manager.

: Implement  typing.Self. Patch by James
Hilton-Balfe.

: Make various module __getattr__ AttributeErrors more
closely match a typical AttributeError

: Add typing.Never and typing.assert_never(). Patch
by Jelle Zijlstra.

: The  and __hash__() methods of
typing.ForwardRef now honor the  parameter of
typing.ForwardRef. Forward references from different modules are
now differentiated.

: Add missing  to
importlib.metadata.DeprecatedList. Patch by Arie Bovenberg.

================================================================================

# Changelog - Library (Part 7)

: The  module now handles certificates with bit strings
in DN correctly.

: typing.get_type_hints() no longer adds  to
parameters with  as a default. This aligns to changes to PEP 484
in https://github.com/python/peps/pull/689

: Add  to re.__all__ and documented it.
Add  to indicate no flags being set.

:  no longer defines ffi_type_* symbols in
. The symbols have been provided by libffi for over a decade.

: Calling operator.itemgetter objects and
operator.attrgetter objects is now faster due to use of the vectorcall
calling convention.

: Fix an issue with is_tarfile() method when using
 argument: position in the  was advanced forward which
made it unreadable with tarfile.TarFile.open().

: Reimplement SSL/TLS support in asyncio, borrow the
implementation from uvloop library.

: Make the configparser.ConfigParser constructor raise
 if the interpolation parameter is not of type
configparser.Interpolation

: Implement inspect.ismethodwrapper() and fix
inspect.isroutine() for cases where methodwrapper is given. Patch by
Hakan Ãelik.

================================================================================

# Changelog - Library (Part 8)

: argparse.FileType now supports an argument of â-â in binary
mode, returning the .buffer attribute of sys.stdin/sys.stdout as
appropriate. Modes including âxâ and âaâ are treated equivalently to âwâ
when argument is â-â. Patch contributed by Josh Rosenberg

================================================================================

# Changelog - Documentation

List:
: Doc/tools/rstlint.py has moved to its own repository and is
now packaged on PyPI as sphinx-lint.

: Doc/tools/rstlint.py has moved to its own repository and is
now packaged on PyPI as sphinx-lint.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_faulthandler.test_sigfpe() if Python is built with
undefined behavior sanitizer (UBSAN): disable UBSAN on the
faulthandler_sigfpe() function. Patch by Victor Stinner.
: Remove bytecode offsets from expected values in test.test_dis
module. Reduces the obstacles to modifying the VM or compiler.
: Prevent default asyncio event loop policy modification warning
after test_asyncio execution.
: The function make_legacy_pyc in
Lib/test/support/import_helper.py no longer fails when
PYTHONPYCACHEPREFIX is set to a directory on a different device from
where tempfiles are stored.
: Skip test_pair() and test_speech128() of test_zlib on s390x
since they fail if zlib uses the s390x hardware accelerator. Patch by
Victor Stinner.

: Fix test_faulthandler.test_sigfpe() if Python is built with
undefined behavior sanitizer (UBSAN): disable UBSAN on the
faulthandler_sigfpe() function. Patch by Victor Stinner.

: Remove bytecode offsets from expected values in test.test_dis
module. Reduces the obstacles to modifying the VM or compiler.

: Prevent default asyncio event loop policy modification warning
after test_asyncio execution.

================================================================================

# Changelog - Tests (Part 2)

: The function make_legacy_pyc in
Lib/test/support/import_helper.py no longer fails when
PYTHONPYCACHEPREFIX is set to a directory on a different device from
where tempfiles are stored.

: Skip test_pair() and test_speech128() of test_zlib on s390x
since they fail if zlib uses the s390x hardware accelerator. Patch by
Victor Stinner.

================================================================================

# Changelog - Build (Part 1)

List:
: Respect --with-suffix when building on case-insensitive
file systems.
: Building Python now requires a C11 compiler. Optional C11
features are not required. Patch by Victor Stinner.
: Building Python now requires support for floating-point
Not-a-Number (NaN): remove the  macro. Patch by Victor
Stinner.
: Building Python now requires a C99  header file
providing a  constant, or the __builtin_nan() built-in
function. Patch by Victor Stinner.
: Exclude marshalled-frozen data if deep-freezing to save 300 KB
disk space. This includes adding a new is_package field to
. Patch by Kumar Aditya.
: Fix wasm32-emscripten test failures and platform issues. -
Disable syscalls that are not supported or donât work, e.g.   wait,
getrusage, prlimit, mkfifo, mknod, setres[gu]id, setgroups. - Use fd_count
to count open fds. - Add more checks for subprocess and fork. - Add
workarounds for missing _multiprocessing and failing socket.accept(). -
Enable bzip2. - Disable large file support. - Disable signal.alarm.
: Intern strings in deep-frozen modules. Patch by Kumar Aditya.

: Respect --with-suffix when building on case-insensitive
file systems.

================================================================================

# Changelog - Build (Part 2)

: Building Python now requires a C11 compiler. Optional C11
features are not required. Patch by Victor Stinner.

: Building Python now requires support for floating-point
Not-a-Number (NaN): remove the  macro. Patch by Victor
Stinner.

: Building Python now requires a C99  header file
providing a  constant, or the __builtin_nan() built-in
function. Patch by Victor Stinner.

: Exclude marshalled-frozen data if deep-freezing to save 300 KB
disk space. This includes adding a new is_package field to
. Patch by Kumar Aditya.

: Fix wasm32-emscripten test failures and platform issues. -
Disable syscalls that are not supported or donât work, e.g.   wait,
getrusage, prlimit, mkfifo, mknod, setres[gu]id, setgroups. - Use fd_count
to count open fds. - Add more checks for subprocess and fork. - Add
workarounds for missing _multiprocessing and failing socket.accept(). -
Enable bzip2. - Disable large file support. - Disable signal.alarm.

: Intern strings in deep-frozen modules. Patch by Kumar Aditya.

================================================================================

# Changelog - Windows

List:
: The default all users install directory for ARM64 is now under
the native   folder, rather than   
which is intended for ARM (32-bit) files.
: Adds Tcl and Tk support for Windows ARM64. This also adds IDLE
to the installation.
: Ensures registry virtualization is consistently disabled. For
3.10 and earlier, it remains enabled (some registry writes are protected),
while for 3.11 and later it is disabled (registry modifications affect all
applications).

: The default all users install directory for ARM64 is now under
the native   folder, rather than   
which is intended for ARM (32-bit) files.

: Adds Tcl and Tk support for Windows ARM64. This also adds IDLE
to the installation.

: Ensures registry virtualization is consistently disabled. For
3.10 and earlier, it remains enabled (some registry writes are protected),
while for 3.11 and later it is disabled (registry modifications affect all
applications).

================================================================================

# Changelog - IDLE

List:
: Make query dialogs on Windows start with a cursor in the entry
box.
: Apply IDLE syntax highlighting to  files. Patch by Alex
Waygood and Terry Jan Reedy.

: Make query dialogs on Windows start with a cursor in the entry
box.

: Apply IDLE syntax highlighting to  files. Patch by Alex
Waygood and Terry Jan Reedy.

================================================================================

# Changelog - C API (Part 1)

List:
: Pythonâs public headers no longer import <stdbool.h>,
leaving code that embeds/extends Python free to define , 
and .
: Move the PyFrameObject type definition (
) to the internal C API pycore_frame.h header file. Patch by
Victor Stinner.
: Rename Include/buffer.h header file to
Include/pybuffer.h to avoid conflicts with projects having an existing
 header file. Patch by Victor Stinner.
: Remove the HAVE_PY_SET_53BIT_PRECISION macro (moved to the
internal C API). Patch by Victor Stinner.
: Added function PyType_GetModuleByDef(), which allows
access to module state when a methodâs defining class is not available.

: Pythonâs public headers no longer import <stdbool.h>,
leaving code that embeds/extends Python free to define , 
and .

: Move the PyFrameObject type definition (
) to the internal C API pycore_frame.h header file. Patch by
Victor Stinner.

: Rename Include/buffer.h header file to
Include/pybuffer.h to avoid conflicts with projects having an existing
 header file. Patch by Victor Stinner.

: Remove the HAVE_PY_SET_53BIT_PRECISION macro (moved to the
internal C API). Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 2)

: Added function PyType_GetModuleByDef(), which allows
access to module state when a methodâs defining class is not available.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Remove two invalid âpeepholeâ optimizations from the bytecode
compiler.
: Do not create frame objects when creating 
object. Patch by Kumar Aditya.
: Added more fined-grained specialization failure stats regarding
the COMPARE_OP bytecode.
: The delegation of  to __trunc__() is now
deprecated. Calling  when  implements
__trunc__() but not  or __index__() now raises
a DeprecationWarning.
: Reorder code emitted by the compiler for a
- block so that the  blockâs
code immediately follows the  body (without a jump). This is
more optimal for the happy path.
: Allow passing  as a keyword argument to
enumerate() again. Patch by Jelle Zijlstra.
: Replace several stack manipulation instructions (,
DUP_TOP_TWO, , , , and )
with new  and  instructions.
: Use two or three bytecodes to implement most calls.
Calls without named arguments are implemented as a sequence of two
instructions:  . Calls with named arguments are
implemented as a sequence of three instructions:  
. There are two different  instructions:
PRECALL_FUNTION and PRECALL_METHOD. The latter pairs with
LOAD_METHOD.
This partition into pre-call and call allows better specialization, and
thus better performance ultimately.
There is no change in semantics.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix an assert when parsing some invalid N escape sequences in
f-strings.
: Improve error message on invalid calls to
BaseExceptionGroup.__new__().
: Fix memory leak in code objects generated by deepfreeze. Patch
by Kumar Aditya.
: Speed up calls to weakref.ref.__call__() by using the
 vectorcall calling convention. Patch by Donghee Na.
: Fix a race condition on setting a type  attribute:
the internal function add_subclass() now gets the
PyTypeObject.tp_subclasses member after calling
PyWeakref_NewRef() which can trigger a garbage collection which
can indirectly modify PyTypeObject.tp_subclasses. Patch by Victor
Stinner.
:   showrefcount now shows the total reference count
after clearing and destroyed the main Python interpreter. Previously, it
was shown before. Patch by Victor Stinner.
: Add ASYNC_GEN_WRAP opcode to wrap the value to be yielded in
async generators. Removes the need to special case async generators in the
YIELD_VALUE instruction.
: Optimize some modulo operations in Objects/longobject.c.
Patch by Jeremiah Vivian.
: Add new RETURN_GENERATOR bytecode to make generators.
Simplifies calling Python functions in the VM, as they no longer any need
to special case generator functions.
Also add JUMP_NO_INTERRUPT bytecode that acts like JUMP_ABSOLUTE,
but does not check for interrupts.

================================================================================

# Changelog - Core and Builtins (Part 3)

: The integer division  implementation has been optimized
to better let the compiler understand its constraints. It can be 20%
faster on the amd64 platform when dividing an int by a value smaller than
.
: Fix invalid signature of âs module_free
function to resolve a crash on wasm32-emscripten platform.
: Ensure that âsmallâ integers created by int.from_bytes()
and decimal.Decimal are properly cached.
: Fix the class building error when the arguments are constants
and CALL_FUNCTION_EX is used.
: Fixes calculation of sys._base_executable when inside a
virtual environment that uses symlinks with different binary names than
the base environment provides.
: Correctly calculate indentation levels for lines with
whitespace character that are ended by line continuation characters. Patch
by Pablo Galindo
: Add CAN Socket support for NetBSD.
: Do not use POSIX semaphores on NetBSD
: Improve the  message for non-string second
arguments passed to the built-in functions  and
. Patch by GÃ©ry Ogam.

: Remove two invalid âpeepholeâ optimizations from the bytecode
compiler.

: Do not create frame objects when creating 
object. Patch by Kumar Aditya.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Added more fined-grained specialization failure stats regarding
the COMPARE_OP bytecode.

: The delegation of  to __trunc__() is now
deprecated. Calling  when  implements
__trunc__() but not  or __index__() now raises
a DeprecationWarning.

: Reorder code emitted by the compiler for a
- block so that the  blockâs
code immediately follows the  body (without a jump). This is
more optimal for the happy path.

: Allow passing  as a keyword argument to
enumerate() again. Patch by Jelle Zijlstra.

: Replace several stack manipulation instructions (,
DUP_TOP_TWO, , , , and )
with new  and  instructions.

: Use two or three bytecodes to implement most calls.

Calls without named arguments are implemented as a sequence of two
instructions:  . Calls with named arguments are
implemented as a sequence of three instructions:  
. There are two different  instructions:
PRECALL_FUNTION and PRECALL_METHOD. The latter pairs with
LOAD_METHOD.

This partition into pre-call and call allows better specialization, and
thus better performance ultimately.

There is no change in semantics.

: Fix an assert when parsing some invalid N escape sequences in
f-strings.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Improve error message on invalid calls to
BaseExceptionGroup.__new__().

: Fix memory leak in code objects generated by deepfreeze. Patch
by Kumar Aditya.

: Speed up calls to weakref.ref.__call__() by using the
 vectorcall calling convention. Patch by Donghee Na.

: Fix a race condition on setting a type  attribute:
the internal function add_subclass() now gets the
PyTypeObject.tp_subclasses member after calling
PyWeakref_NewRef() which can trigger a garbage collection which
can indirectly modify PyTypeObject.tp_subclasses. Patch by Victor
Stinner.

:   showrefcount now shows the total reference count
after clearing and destroyed the main Python interpreter. Previously, it
was shown before. Patch by Victor Stinner.

: Add ASYNC_GEN_WRAP opcode to wrap the value to be yielded in
async generators. Removes the need to special case async generators in the
YIELD_VALUE instruction.

: Optimize some modulo operations in Objects/longobject.c.
Patch by Jeremiah Vivian.

: Add new RETURN_GENERATOR bytecode to make generators.
Simplifies calling Python functions in the VM, as they no longer any need
to special case generator functions.

================================================================================

# Changelog - Core and Builtins (Part 6)

Also add JUMP_NO_INTERRUPT bytecode that acts like JUMP_ABSOLUTE,
but does not check for interrupts.

: The integer division  implementation has been optimized
to better let the compiler understand its constraints. It can be 20%
faster on the amd64 platform when dividing an int by a value smaller than
.

: Fix invalid signature of âs module_free
function to resolve a crash on wasm32-emscripten platform.

: Ensure that âsmallâ integers created by int.from_bytes()
and decimal.Decimal are properly cached.

: Fix the class building error when the arguments are constants
and CALL_FUNCTION_EX is used.

: Fixes calculation of sys._base_executable when inside a
virtual environment that uses symlinks with different binary names than
the base environment provides.

: Correctly calculate indentation levels for lines with
whitespace character that are ended by line continuation characters. Patch
by Pablo Galindo

: Add CAN Socket support for NetBSD.

: Do not use POSIX semaphores on NetBSD

: Improve the  message for non-string second
arguments passed to the built-in functions  and
. Patch by GÃ©ry Ogam.

================================================================================

# Changelog - Library (Part 1)

List:
: Restore support for non-integer arguments of
random.randrange() and random.randint().
: Make the IDLE doc URL on the About IDLE dialog clickable.
: Remove loop variables that are leaking into modulesâ
namespaces.
: In typing.get_type_hints(), support evaluating bare
stringified  annotations. Patch by Gregory Beauregard.
: Donât leak  &  intermediate vars in
textwrap.TextWrapper.
: Add the get_write_buffer_limits method to
asyncio.transports.WriteTransport and to the SSL transport.
: Note the configparser deprecations will be removed in Python
3.12.
: The deprecated  APIs removed in 3.11a1 have been
temporarily restored to be removed in 3.12 while cleanups in external
projects go in.
: In typing.get_type_hints(), support evaluating
stringified  and  annotations inside .
Patch by Gregory Beauregard.
: Add missing test for types.TracebackType and
types.FrameType. Calculate them directly from the caught
exception without calling sys.exc_info().
: Allow typing.Annotated to wrap typing.Final and
typing.ClassVar. Patch by Gregory Beauregard.
: Remove __class_getitem__() from
pathlib.PurePath as this class was not supposed to be generic.
: Fix command-line option /--directory in module
http.server which is ignored when combined with command-line option
. Patch by GÃ©ry Ogam.
: Make mock.patch() raise a  with a
relevant error message on invalid arg. Previously it allowed a cryptic
AttributeError to escape.
: In importlib.metadata.EntryPoint.pattern, avoid potential
REDoS by limiting ambiguity in consecutive whitespace.
: Removed private method from importlib.metadata.Path. Sync
with importlib_metadata 4.10.0.
: Remove unused branch from typing._remove_dups_flatten
:  generic classes now return
types.GenericAlias in __class_getitem__ instead of the same
class.
: Support passing filter instances in the  values of
 and  in the dictionary passed to
logging.config.dictConfig().
: Use dis.Positions in dis.Instruction instead of a
regular .
:  now gracefully handles  when
 is missing, for example when run with pregenerated
optimized  files.
: Python uses the same time Epoch on all platforms. Add an
explicit unit test to ensure that itâs the case. Patch by Victor Stinner.
: Add typing.reveal_type(). Patch by Jelle Zijlstra.
: subprocess now imports Windows-specific imports when
 module is available, and POSIX-specific imports on all other
platforms. This gives a clean exception when _posixsubprocess is not
available (e.g. Emscripten browser target).
: , , and  use the mixed-in type
for their  and  output.
: Optimize pathlib.Path.iterdir() by removing an
unnecessary check for special entries.
: Document pathlib.Path.absolute() (which has always
existed).
: The pathlib moduleâs obsolete and internal  class
has been removed to prepare the terrain for upcoming enhancements to the
module.
: Speed up math.isqrt() for small positive integers by
replacing two division steps with a lookup table.
: Improve error message when creating a new 
type subclassing an existing  with _member_names_ using
enum.Enum.__call__().
: Fix a bug in inspect.signature() that was causing it to
fail on some subclasses of classes with a __text_signature__
referencing module globals. Patch by Weipeng Hong.
: Fixed case where failing asyncio.ensure_future() did not
close the coroutine. Patch by Kumar Aditya.
: Fix an issue with tarfile.TarFile.getmember() getting a
directory name with a trailing slash.
: Update  to rely on importlib.resources
traversable API.
: Now inspect.getmembers() only gets 
attribute from class type. Patch by Weipeng Hong.
: Fix exception in argparse help text generation if a
argparse.BooleanOptionalAction argumentâs default is
argparse.SUPPRESS and it has  specified.  Patch by Felix
Fontein.
: Fix substitution of  in
Concatenate with different parameter expressions.
Substitution with a list of types returns now a tuple of types.
Substitution with Concatenate returns now a Concatenate with
concatenated lists of arguments.

================================================================================

# Changelog - Library (Part 2)

: Restore support for non-integer arguments of
random.randrange() and random.randint().

: Make the IDLE doc URL on the About IDLE dialog clickable.

: Remove loop variables that are leaking into modulesâ
namespaces.

: In typing.get_type_hints(), support evaluating bare
stringified  annotations. Patch by Gregory Beauregard.

: Donât leak  &  intermediate vars in
textwrap.TextWrapper.

: Add the get_write_buffer_limits method to
asyncio.transports.WriteTransport and to the SSL transport.

: Note the configparser deprecations will be removed in Python
3.12.

: The deprecated  APIs removed in 3.11a1 have been
temporarily restored to be removed in 3.12 while cleanups in external
projects go in.

: In typing.get_type_hints(), support evaluating
stringified  and  annotations inside .
Patch by Gregory Beauregard.

: Add missing test for types.TracebackType and
types.FrameType. Calculate them directly from the caught
exception without calling sys.exc_info().

: Allow typing.Annotated to wrap typing.Final and
typing.ClassVar. Patch by Gregory Beauregard.

: Remove __class_getitem__() from
pathlib.PurePath as this class was not supposed to be generic.

================================================================================

# Changelog - Library (Part 3)

: Fix command-line option /--directory in module
http.server which is ignored when combined with command-line option
. Patch by GÃ©ry Ogam.

: Make mock.patch() raise a  with a
relevant error message on invalid arg. Previously it allowed a cryptic
AttributeError to escape.

: In importlib.metadata.EntryPoint.pattern, avoid potential
REDoS by limiting ambiguity in consecutive whitespace.

: Removed private method from importlib.metadata.Path. Sync
with importlib_metadata 4.10.0.

: Remove unused branch from typing._remove_dups_flatten

:  generic classes now return
types.GenericAlias in __class_getitem__ instead of the same
class.

: Support passing filter instances in the  values of
 and  in the dictionary passed to
logging.config.dictConfig().

: Use dis.Positions in dis.Instruction instead of a
regular .

:  now gracefully handles  when
 is missing, for example when run with pregenerated
optimized  files.

: Python uses the same time Epoch on all platforms. Add an
explicit unit test to ensure that itâs the case. Patch by Victor Stinner.

: Add typing.reveal_type(). Patch by Jelle Zijlstra.

================================================================================

# Changelog - Library (Part 4)

: subprocess now imports Windows-specific imports when
 module is available, and POSIX-specific imports on all other
platforms. This gives a clean exception when _posixsubprocess is not
available (e.g. Emscripten browser target).

: , , and  use the mixed-in type
for their  and  output.

: Optimize pathlib.Path.iterdir() by removing an
unnecessary check for special entries.

: Document pathlib.Path.absolute() (which has always
existed).

: The pathlib moduleâs obsolete and internal  class
has been removed to prepare the terrain for upcoming enhancements to the
module.

: Speed up math.isqrt() for small positive integers by
replacing two division steps with a lookup table.

: Improve error message when creating a new 
type subclassing an existing  with _member_names_ using
enum.Enum.__call__().

: Fix a bug in inspect.signature() that was causing it to
fail on some subclasses of classes with a __text_signature__
referencing module globals. Patch by Weipeng Hong.

: Fixed case where failing asyncio.ensure_future() did not
close the coroutine. Patch by Kumar Aditya.

: Fix an issue with tarfile.TarFile.getmember() getting a
directory name with a trailing slash.

================================================================================

# Changelog - Library (Part 5)

: Update  to rely on importlib.resources
traversable API.

: Now inspect.getmembers() only gets 
attribute from class type. Patch by Weipeng Hong.

: Fix exception in argparse help text generation if a
argparse.BooleanOptionalAction argumentâs default is
argparse.SUPPRESS and it has  specified.  Patch by Felix
Fontein.

: Fix substitution of  in
Concatenate with different parameter expressions.
Substitution with a list of types returns now a tuple of types.
Substitution with Concatenate returns now a Concatenate with
concatenated lists of arguments.

================================================================================

# Changelog - Documentation

List:
: Fixes escape4chm.py script used when building the CHM
documentation file

: Fixes escape4chm.py script used when building the CHM
documentation file

================================================================================

# Changelog - Tests (Part 1)

List:
: Mocks can no longer be provided as the specs for other Mocks.
As a result, an already-mocked object cannot be passed to mock.Mock().
This can uncover bugs in tests since these Mock-derived Mocks will always
pass certain tests (e.g. isinstance) and builtin assert functions (e.g.
assert_called_once_with) will unconditionally pass.
: Ensures test_importlib.test_windows cleans up registry keys
after completion.
: test_ftplib now silently ignores socket errors to prevent
logging unhandled threading exceptions. Patch by Victor Stinner.
: Fix test_gdb.test_pycfunction() for Python built with 
. Tolerate inlined functions in the gdb traceback. Patch by Victor
Stinner.
: Fix a Python crash in test_lib2to3 when using Python built in
debug mode: limit the recursion limit. Patch by Victor Stinner.
: test_peg_generator now disables compiler optimization when
testing compilation of its own C extensions to significantly speed up the
testing on non-debug builds of CPython.
: Fix  tests checking for RecursionError:
modify these tests to use support.infinite_recursion(). Patch by
Victor Stinner.
: Skip test_builtin PTY tests on non-ASCII characters if the
readline module is loaded. The readline module changes input() behavior,
but test_builtin is not intended to test the readline module. Patch by
Victor Stinner.
: Add test.support.requires_fork() decorators to mark tests
that require a working .
: Add test.support.requires_subprocess() decorator to mark
tests which require working subprocess module or . The
wasm32-emscripten platform has no support for processes.
: Disable âdescriptionsâ when running tests internally.

================================================================================

# Changelog - Tests (Part 2)

: Mocks can no longer be provided as the specs for other Mocks.
As a result, an already-mocked object cannot be passed to mock.Mock().
This can uncover bugs in tests since these Mock-derived Mocks will always
pass certain tests (e.g. isinstance) and builtin assert functions (e.g.
assert_called_once_with) will unconditionally pass.

: Ensures test_importlib.test_windows cleans up registry keys
after completion.

: test_ftplib now silently ignores socket errors to prevent
logging unhandled threading exceptions. Patch by Victor Stinner.

: Fix test_gdb.test_pycfunction() for Python built with 
. Tolerate inlined functions in the gdb traceback. Patch by Victor
Stinner.

: Fix a Python crash in test_lib2to3 when using Python built in
debug mode: limit the recursion limit. Patch by Victor Stinner.

: test_peg_generator now disables compiler optimization when
testing compilation of its own C extensions to significantly speed up the
testing on non-debug builds of CPython.

: Fix  tests checking for RecursionError:
modify these tests to use support.infinite_recursion(). Patch by
Victor Stinner.

================================================================================

# Changelog - Tests (Part 3)

: Skip test_builtin PTY tests on non-ASCII characters if the
readline module is loaded. The readline module changes input() behavior,
but test_builtin is not intended to test the readline module. Patch by
Victor Stinner.

: Add test.support.requires_fork() decorators to mark tests
that require a working .

: Add test.support.requires_subprocess() decorator to mark
tests which require working subprocess module or . The
wasm32-emscripten platform has no support for processes.

: Disable âdescriptionsâ when running tests internally.

================================================================================

# Changelog - Build (Part 1)

List:
: Tidied up configure.ac so that conftest.c is truncated rather
than appended. This assists in the case where the ârmâ of conftest.c fails
to happen between tests.  Downstream issues such as a clobbered SOABI can
result.
: Fix the test checking if the C compiler supports  option
in the ./configure script to also use  on clang which supports
it. Patch by Victor Stinner.
: Fix GCC detection in setup.py when cross-compiling. The C
compiler is now run with LC_ALL=C. Previously, the detection failed with a
German locale.
:  no longer uses AC_C_CHAR_UNSIGNED
macro and pyconfig.h no longer defines reserved symbol
__CHAR_UNSIGNED__.
: Use global singletons for single byte bytes objects in
deepfreeze.
: Deepfreeze now uses cached small integers as it saves some
space for common small integers.
: Merge all deep-frozen files into one for space savings. Patch
by Kumar Aditya.
: The build now defaults to using 30-bit digits for Python
integers. Previously either 15-bit or 30-bit digits would be selected,
depending on the platform. 15-bit digits may still be selected using the
--enable-big-digits=15 option to the  script, or by
defining PYLONG_BITS_IN_DIGIT in pyconfig.h.
: Update Windows installer to use SQLite 3.37.2.
: Detect musl libc as a separate SOABI (tagged as
linux-musl).

================================================================================

# Changelog - Build (Part 2)

: Tidied up configure.ac so that conftest.c is truncated rather
than appended. This assists in the case where the ârmâ of conftest.c fails
to happen between tests.  Downstream issues such as a clobbered SOABI can
result.

: Fix the test checking if the C compiler supports  option
in the ./configure script to also use  on clang which supports
it. Patch by Victor Stinner.

: Fix GCC detection in setup.py when cross-compiling. The C
compiler is now run with LC_ALL=C. Previously, the detection failed with a
German locale.

:  no longer uses AC_C_CHAR_UNSIGNED
macro and pyconfig.h no longer defines reserved symbol
__CHAR_UNSIGNED__.

: Use global singletons for single byte bytes objects in
deepfreeze.

: Deepfreeze now uses cached small integers as it saves some
space for common small integers.

: Merge all deep-frozen files into one for space savings. Patch
by Kumar Aditya.

: The build now defaults to using 30-bit digits for Python
integers. Previously either 15-bit or 30-bit digits would be selected,
depending on the platform. 15-bit digits may still be selected using the
--enable-big-digits=15 option to the  script, or by
defining PYLONG_BITS_IN_DIGIT in pyconfig.h.

================================================================================

# Changelog - Build (Part 3)

: Update Windows installer to use SQLite 3.37.2.

: Detect musl libc as a separate SOABI (tagged as
linux-musl).

================================================================================

# Changelog - Windows

List:
: The traditional EXE/MSI based installer for Windows is now
available for ARM64
: os.path.abspath(âC:CONâ) is now fixed to return â\.CONâ, not
the same path. The regression was true of all legacy DOS devices such as
COM1, LPT1, or NUL.
: The installer now offers a command-line only option to add the
installation directory to the end of  instead of at the
start.

: The traditional EXE/MSI based installer for Windows is now
available for ARM64

: os.path.abspath(âC:CONâ) is now fixed to return â\.CONâ, not
the same path. The regression was true of all legacy DOS devices such as
COM1, LPT1, or NUL.

: The installer now offers a command-line only option to add the
installation directory to the end of  instead of at the
start.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to SQLite 3.37.2.

: Update macOS installer to SQLite 3.37.2.

================================================================================

# Changelog - IDLE

List:
: Clarify close, quit, and exit in IDLE.  In the File menu,
âCloseâ and âExitâ are now âClose Windowâ (the current one) and âExitâ is
now âExit IDLEâ (by closing all windows).  In Shell, âquit()â and âexit()â
mean âclose Shellâ. If there are no other windows, this also exits IDLE.

: Clarify close, quit, and exit in IDLE.  In the File menu,
âCloseâ and âExitâ are now âClose Windowâ (the current one) and âExitâ is
now âExit IDLEâ (by closing all windows).  In Shell, âquit()â and âexit()â
mean âclose Shellâ. If there are no other windows, this also exits IDLE.

================================================================================

# Changelog - C API (Part 1)

List:
: Remove the PyHeapType_GET_MEMBERS() macro. It was exposed
in the public C API by mistake, it must only be used by Python internally.
Use the PyTypeObject.tp_members member instead. Patch by Victor
Stinner.
: Move _Py_GetAllocatedBlocks() and _PyObject_DebugMallocStats()
private functions to the internal C API. Patch by Victor Stinner.
: The internal function _PyType_GetModuleByDef now correctly
handles inheritance patterns involving static types.
:  and various  related functions
are now part of the limited API and stable ABI.
: Fixed bug in the tokenizer that prevented
PyRun_InteractiveOne from parsing from the provided FD.

: Remove the PyHeapType_GET_MEMBERS() macro. It was exposed
in the public C API by mistake, it must only be used by Python internally.
Use the PyTypeObject.tp_members member instead. Patch by Victor
Stinner.

: Move _Py_GetAllocatedBlocks() and _PyObject_DebugMallocStats()
private functions to the internal C API. Patch by Victor Stinner.

: The internal function _PyType_GetModuleByDef now correctly
handles inheritance patterns involving static types.

:  and various  related functions
are now part of the limited API and stable ABI.

================================================================================

# Changelog - C API (Part 2)

: Fixed bug in the tokenizer that prevented
PyRun_InteractiveOne from parsing from the provided FD.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Py_EndInterpreter() now explicitly untracks all objects
currently tracked by the GC. Previously, if an object was used later by
another interpreter, calling PyObject_GC_UnTrack() on the object
crashed if the previous or the next object of the 
structure became a dangling pointer. Patch by Victor Stinner.
: Fix memory leak in PyEval_EvalCodeEx.
: Fix a crash in the parser when retrieving the error text for
multi-line f-strings expressions that do not start in the first line of
the string. Patch by Pablo Galindo
: Do not set line number of instruction storing doc-string. Fixes
regression introduced in 3.11 alpha.
: Remove spurious âcallâ event when creating a lambda function
that was accidentally introduced in 3.11a4.
: ASDL declaration of FormattedValue has changed to reflect
conversion field is not optional.
: Fixed an interpreter crash on bootup with multiple PythonPaths
set in the Windows registry. Patch by Derzsi DÃ¡niel.
: Fix the line number of tokenizer errors inside f-strings. Patch
by Pablo Galindo.
: We always expect the âuse_frozen_modulesâ config to be set, now
that getpath.c was rewritten in pure Python and the logic improved.
: Fix a regression when a type method like __init__() is
modified in a subinterpreter. Fix a regression in
_PyUnicode_EqualToASCIIId() and type update_slot(). Revert the
change which made the Unicode dictionary of interned strings compatible
with subinterpreters: the internal interned dictionary is shared again by
all interpreters. Patch by Victor Stinner.
: Add RESUME opcode. This is a logical no-op. It is emitted by
the compiler anywhere a Python function can be entered. It is used by the
interpreter to perform tracing and optimizer checks.
: Fix the regression of os.path.normpath(âA/../../Bâ) not
returning expected â../Bâ but âBâ.
: Correct the error message for unclosed parentheses when the
tokenizer doesnât reach the end of the source when the error is reported.
Patch by Pablo Galindo
: Remove the  opcode.
: Certain sequence multiplication operations like   
are now faster due to reference-counting optimizations. Patch by Dennis
Sweeney.
: PREP_RERAISE_STAR no longer pushes  to the
stack.
: Remove POP_EXCEPT_AND_RERAISE and replace it by an
equivalent sequence of other opcodes.
: Fix iterator cache mechanism of OrderedDict.
: Speed up shifting operation involving integers less than
PyLong_BASE. Patch by Xinhang Xu.
: Add a maximum recursion check to the PEG parser to avoid stack
overflow. Patch by Pablo Galindo
: Fix bug where ExceptionGroup.split() and
ExceptionGroup.subgroup() did not copy the exception groupâs
 field to the parts.
: The interpreter stateâs representation of handled exceptions
(a.k.a exc_info, or _PyErr_StackItem) now has only the 
field,  and exc_traceback have been removed as their
values can be derived from .
: Replace the four call bytecode instructions which one pre-call
instruction and two call instructions.
Removes CALL_FUNCTION, CALL_FUNCTION_KW, CALL_METHOD and
CALL_METHOD_KW.
Adds CALL_NO_KW and  call instructions, and
PRECALL_METHOD prefix for pairing with LOAD_METHOD.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Remove the YIELD_FROM instruction and replace it with the
 instruction which performs the same operation, but without the
loop.
: The code called from _PyErr_Display() was refactored
to improve error handling. It now exits immediately upon an unrecoverable
error.
: Fix parser error when parsing non-utf8 characters in source
files. Patch by Pablo Galindo.
: Improve the location of the caret in SyntaxError
exceptions emitted by the symbol table. Patch by Pablo Galindo.
: Ensure  files work as intended on platforms other
than Windows.
: Fixes parsing of  files on startup so that
single-character paths are correctly read.
: Fix a bug where the line numbers given in a traceback when a
decorator application raised an exception were wrong.
: Add POP_JUMP_IF_NOT_NONE and
POP_JUMP_IF_NONE opcodes to speed up conditional jumps.
: Deepfreeze , patch by Kumar Aditya.
: Fix a crash in the  module involving functions
that unregister themselves before raising exceptions. Patch by Pablo
Galindo.
: Improve compatibility of the  module with NetBSD
curses.
: Specialize the CALL_FUNCTION instruction for calls to builtin
types with a single argument. Speeds up , , and
specifically .
: Fix bug where the built-in  function did not
always raise a SyntaxError when passed multiple statements in
âsingleâ mode. Patch by Weipeng Hong.
: The main interpreter in _PyRuntimeState.interpreters is now
statically allocated (as part of _PyRuntime).  Likewise for the initial
thread state of each interpreter.  This means less allocation during
runtime init, as well as better memory locality for these key state
objects.
: Complete the  implementation: add .
: Revert changes in set.__init__. Subclass of 
needs to define a __init__() method if it defines a 
method with additional keyword parameters.
: Added the Py_Version constant which bears the same
value as PY_VERSION_HEX. Patch by Gabriele N. Tornetta.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Py_EndInterpreter() now explicitly untracks all objects
currently tracked by the GC. Previously, if an object was used later by
another interpreter, calling PyObject_GC_UnTrack() on the object
crashed if the previous or the next object of the 
structure became a dangling pointer. Patch by Victor Stinner.

: Fix memory leak in PyEval_EvalCodeEx.

: Fix a crash in the parser when retrieving the error text for
multi-line f-strings expressions that do not start in the first line of
the string. Patch by Pablo Galindo

: Do not set line number of instruction storing doc-string. Fixes
regression introduced in 3.11 alpha.

: Remove spurious âcallâ event when creating a lambda function
that was accidentally introduced in 3.11a4.

: ASDL declaration of FormattedValue has changed to reflect
conversion field is not optional.

: Fixed an interpreter crash on bootup with multiple PythonPaths
set in the Windows registry. Patch by Derzsi DÃ¡niel.

: Fix the line number of tokenizer errors inside f-strings. Patch
by Pablo Galindo.

: We always expect the âuse_frozen_modulesâ config to be set, now
that getpath.c was rewritten in pure Python and the logic improved.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix a regression when a type method like __init__() is
modified in a subinterpreter. Fix a regression in
_PyUnicode_EqualToASCIIId() and type update_slot(). Revert the
change which made the Unicode dictionary of interned strings compatible
with subinterpreters: the internal interned dictionary is shared again by
all interpreters. Patch by Victor Stinner.

: Add RESUME opcode. This is a logical no-op. It is emitted by
the compiler anywhere a Python function can be entered. It is used by the
interpreter to perform tracing and optimizer checks.

: Fix the regression of os.path.normpath(âA/../../Bâ) not
returning expected â../Bâ but âBâ.

: Correct the error message for unclosed parentheses when the
tokenizer doesnât reach the end of the source when the error is reported.
Patch by Pablo Galindo

: Remove the  opcode.

: Certain sequence multiplication operations like   
are now faster due to reference-counting optimizations. Patch by Dennis
Sweeney.

: PREP_RERAISE_STAR no longer pushes  to the
stack.

: Remove POP_EXCEPT_AND_RERAISE and replace it by an
equivalent sequence of other opcodes.

: Fix iterator cache mechanism of OrderedDict.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Speed up shifting operation involving integers less than
PyLong_BASE. Patch by Xinhang Xu.

: Add a maximum recursion check to the PEG parser to avoid stack
overflow. Patch by Pablo Galindo

: Fix bug where ExceptionGroup.split() and
ExceptionGroup.subgroup() did not copy the exception groupâs
 field to the parts.

: The interpreter stateâs representation of handled exceptions
(a.k.a exc_info, or _PyErr_StackItem) now has only the 
field,  and exc_traceback have been removed as their
values can be derived from .

: Replace the four call bytecode instructions which one pre-call
instruction and two call instructions.

Removes CALL_FUNCTION, CALL_FUNCTION_KW, CALL_METHOD and
CALL_METHOD_KW.

Adds CALL_NO_KW and  call instructions, and
PRECALL_METHOD prefix for pairing with LOAD_METHOD.

: Remove the YIELD_FROM instruction and replace it with the
 instruction which performs the same operation, but without the
loop.

: The code called from _PyErr_Display() was refactored
to improve error handling. It now exits immediately upon an unrecoverable
error.

: Fix parser error when parsing non-utf8 characters in source
files. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Improve the location of the caret in SyntaxError
exceptions emitted by the symbol table. Patch by Pablo Galindo.

: Ensure  files work as intended on platforms other
than Windows.

: Fixes parsing of  files on startup so that
single-character paths are correctly read.

: Fix a bug where the line numbers given in a traceback when a
decorator application raised an exception were wrong.

: Add POP_JUMP_IF_NOT_NONE and
POP_JUMP_IF_NONE opcodes to speed up conditional jumps.

: Deepfreeze , patch by Kumar Aditya.

: Fix a crash in the  module involving functions
that unregister themselves before raising exceptions. Patch by Pablo
Galindo.

: Improve compatibility of the  module with NetBSD
curses.

: Specialize the CALL_FUNCTION instruction for calls to builtin
types with a single argument. Speeds up , , and
specifically .

: Fix bug where the built-in  function did not
always raise a SyntaxError when passed multiple statements in
âsingleâ mode. Patch by Weipeng Hong.

================================================================================

# Changelog - Core and Builtins (Part 7)

: The main interpreter in _PyRuntimeState.interpreters is now
statically allocated (as part of _PyRuntime).  Likewise for the initial
thread state of each interpreter.  This means less allocation during
runtime init, as well as better memory locality for these key state
objects.

: Complete the  implementation: add .

: Revert changes in set.__init__. Subclass of 
needs to define a __init__() method if it defines a 
method with additional keyword parameters.

: Added the Py_Version constant which bears the same
value as PY_VERSION_HEX. Patch by Gabriele N. Tornetta.

================================================================================

# Changelog - Library (Part 1)

List:
: The @typing.final decorator now sets the 
attribute on the decorated object to allow runtime introspection. Patch by
Jelle Zijlstra.
: Added the sys.exception() method which returns the active
exception instance.
: Add string.Template.is_valid() and
string.Template.get_identifiers() methods.
: Assume that types.CodeType always has
types.CodeType.co_firstlineno in .
: Fix  usedforsecurity option to work correctly
with OpenSSL 3.0.0 in FIPS mode.
: Fix possible segfault when importing the  module
from different sub-interpreters in parallel. Patch by Erlend E. Aasland.
: Removed  from typing.ParamSpec and
typing.TypeVar. They served no purpose. Patch by Arie Bovenberg.
: Reflect  argument in AbstractEventLoop.call_*()
methods. Loop implementations already support it.
: Remove special-casing of  in
enum.Enum.__dir__().
: Improve day constants in .
Now all constants ( â¦ ) are documented, tested, and
added to .

================================================================================

# Changelog - Library (Part 2)

: Optimized the mean, variance, and stdev functions in the
statistics module. If the input is an iterator, it is consumed in a single
pass rather than eating memory by conversion to a list.  The single pass
algorithm is about twice as fast as the previous two pass code.
: Added two new variables to pyvenv.cfg which is generated by
 module: executable for the executable and  for the
command line used to create the environment.
: Improve error message when importing
asyncio.windows_events on non-Windows.
: Reuse  constants in asyncio.windows_events.
: Adding SF_NOCACHE sendfile constant for FreeBSD for the
posixmodule.
: Add fast path for        for math.comb().
: Adding the  constant for the mmap module.
: Deprecate webbrowser.MacOSXOSAScript._name and use
 instead.
: Added missing error codes to module
xml.parsers.expat.errors.
: Refactor tests to test traversable API directly. Includes
changes from importlib 5.4.0.
: Moved importlib.resources and its related functionality to a
package.
: Add include_hidden parameter to  and
 to match hidden files and directories when using
special characters like , ,  and .
: concurrent.futures.wait() no longer blocks forever when
given duplicate Futures. Patch by Kumar Aditya.
: Honor spec when generating requirement specs with urls and
extras (importlib_metadata 4.8.3).
: EntryPoint objects are no longer tuples. Recommended means to
access is by attribute (â.nameâ, â.groupâ) or accessor (â.load()â). Access
by index is deprecated and will raise deprecation warning.
: Print unexpected successes together with failures and errors in
summary in unittest.TextTestResult.
: Calling add_argument_group() on an argument group is
deprecated. Calling add_argument_group() or
add_mutually_exclusive_group() on a mutually exclusive group is
deprecated.
These features were never supported and do not always work correctly. The
functions exist on the API by accident through inheritance and will be
removed in the future.

================================================================================

# Changelog - Library (Part 3)

:  raises ValueError with clear message
when trying to render usage for an empty mutually exclusive group.
Previously it raised a cryptic IndexError.
: Functions in the  module raise 
rather than AttributeError when an exception argument is not of
type BaseException.
: Add allow allow_reuse_port flag in socketserver.
: Fix help for the  module. Some functions (e.g.
 and getsignal()) were omitted.
: The registry() method of functools.singledispatch()
functions checks now the first argument or the first parameter annotation
and raises a TypeError if it is not supported. Previously unsupported
âtypesâ were ignored (e.g. typing.List[int]) or caused an error at
calling time (e.g. ).
: Add ability to use typing.Union and types.UnionType as
dispatch argument to functools.singledispatch. Patch provided by Yurii
Karabas.
: Add  to , patch by Kumar Aditya.
: Ensure that math.expm1() does not raise on underflow.
: Adding  and F_DUP2FD_CLOEXEC
constants from FreeBSD into the  module.
:  generic aliases now reveal the class attributes
of the original generic class when passed to . This was the
behavior up to Python 3.6, but was changed in 3.7-3.9.
: The empty query string, consisting of no query arguments, is
now handled correctly in urllib.parse.parse_qsl. This caused problems
before when strict parsing was enabled.
: Change how dataclasses disallows mutable default values.  It
used to use a list of known types (list, dict, set).  Now it disallows
unhashable objects to be defaults.  Itâs using unhashability as a proxy
for mutability.  Patch by Eric V. Smith, idea by Raymond Hettinger.
: Remove namespace package (PEP 420) support from unittest
discovery. It was introduced in Python 3.4 but has been broken since
Python 3.7.
: Added a __repr__() method to
multiprocessing.Event objects, patch by Kumar Aditya.
: Added signal.SIGSTKFLT on platforms where this signal
is defined.
: Fetch across rollback no longer raises
InterfaceError. Instead we leave it to the SQLite library
to handle these cases. Patch by Erlend E. Aasland.
: Replace concurrent.futures.TimeoutError and
asyncio.TimeoutError with builtin TimeoutError, keep these
names as deprecated aliases.

================================================================================

# Changelog - Library (Part 4)

: The @typing.final decorator now sets the 
attribute on the decorated object to allow runtime introspection. Patch by
Jelle Zijlstra.

: Added the sys.exception() method which returns the active
exception instance.

: Add string.Template.is_valid() and
string.Template.get_identifiers() methods.

: Assume that types.CodeType always has
types.CodeType.co_firstlineno in .

: Fix  usedforsecurity option to work correctly
with OpenSSL 3.0.0 in FIPS mode.

: Fix possible segfault when importing the  module
from different sub-interpreters in parallel. Patch by Erlend E. Aasland.

: Removed  from typing.ParamSpec and
typing.TypeVar. They served no purpose. Patch by Arie Bovenberg.

: Reflect  argument in AbstractEventLoop.call_*()
methods. Loop implementations already support it.

: Remove special-casing of  in
enum.Enum.__dir__().

: Improve day constants in .

Now all constants ( â¦ ) are documented, tested, and
added to .

: Optimized the mean, variance, and stdev functions in the
statistics module. If the input is an iterator, it is consumed in a single
pass rather than eating memory by conversion to a list.  The single pass
algorithm is about twice as fast as the previous two pass code.

================================================================================

# Changelog - Library (Part 5)

: Added two new variables to pyvenv.cfg which is generated by
 module: executable for the executable and  for the
command line used to create the environment.

: Improve error message when importing
asyncio.windows_events on non-Windows.

: Reuse  constants in asyncio.windows_events.

: Adding SF_NOCACHE sendfile constant for FreeBSD for the
posixmodule.

: Add fast path for        for math.comb().

: Adding the  constant for the mmap module.

: Deprecate webbrowser.MacOSXOSAScript._name and use
 instead.

: Added missing error codes to module
xml.parsers.expat.errors.

: Refactor tests to test traversable API directly. Includes
changes from importlib 5.4.0.

: Moved importlib.resources and its related functionality to a
package.

: Add include_hidden parameter to  and
 to match hidden files and directories when using
special characters like , ,  and .

: concurrent.futures.wait() no longer blocks forever when
given duplicate Futures. Patch by Kumar Aditya.

: Honor spec when generating requirement specs with urls and
extras (importlib_metadata 4.8.3).

================================================================================

# Changelog - Library (Part 6)

: EntryPoint objects are no longer tuples. Recommended means to
access is by attribute (â.nameâ, â.groupâ) or accessor (â.load()â). Access
by index is deprecated and will raise deprecation warning.

: Print unexpected successes together with failures and errors in
summary in unittest.TextTestResult.

: Calling add_argument_group() on an argument group is
deprecated. Calling add_argument_group() or
add_mutually_exclusive_group() on a mutually exclusive group is
deprecated.

These features were never supported and do not always work correctly. The
functions exist on the API by accident through inheritance and will be
removed in the future.

:  raises ValueError with clear message
when trying to render usage for an empty mutually exclusive group.
Previously it raised a cryptic IndexError.

: Functions in the  module raise 
rather than AttributeError when an exception argument is not of
type BaseException.

: Add allow allow_reuse_port flag in socketserver.

: Fix help for the  module. Some functions (e.g.
 and getsignal()) were omitted.

================================================================================

# Changelog - Library (Part 7)

: The registry() method of functools.singledispatch()
functions checks now the first argument or the first parameter annotation
and raises a TypeError if it is not supported. Previously unsupported
âtypesâ were ignored (e.g. typing.List[int]) or caused an error at
calling time (e.g. ).

: Add ability to use typing.Union and types.UnionType as
dispatch argument to functools.singledispatch. Patch provided by Yurii
Karabas.

: Add  to , patch by Kumar Aditya.

: Ensure that math.expm1() does not raise on underflow.

: Adding  and F_DUP2FD_CLOEXEC
constants from FreeBSD into the  module.

:  generic aliases now reveal the class attributes
of the original generic class when passed to . This was the
behavior up to Python 3.6, but was changed in 3.7-3.9.

: The empty query string, consisting of no query arguments, is
now handled correctly in urllib.parse.parse_qsl. This caused problems
before when strict parsing was enabled.

: Change how dataclasses disallows mutable default values.  It
used to use a list of known types (list, dict, set).  Now it disallows
unhashable objects to be defaults.  Itâs using unhashability as a proxy
for mutability.  Patch by Eric V. Smith, idea by Raymond Hettinger.

================================================================================

# Changelog - Library (Part 8)

: Remove namespace package (PEP 420) support from unittest
discovery. It was introduced in Python 3.4 but has been broken since
Python 3.7.

: Added a __repr__() method to
multiprocessing.Event objects, patch by Kumar Aditya.

: Added signal.SIGSTKFLT on platforms where this signal
is defined.

: Fetch across rollback no longer raises
InterfaceError. Instead we leave it to the SQLite library
to handle these cases. Patch by Erlend E. Aasland.

: Replace concurrent.futures.TimeoutError and
asyncio.TimeoutError with builtin TimeoutError, keep these
names as deprecated aliases.

================================================================================

# Changelog - Documentation

List:
: Document method cmd.Cmd.columnize().
: State that  is preferred for readability over  in
the  docs.
: Extracted importlib.resources and
importlib.resources.abc documentation into separate files.
: Update the documentation for the  function.

: Document method cmd.Cmd.columnize().

: State that  is preferred for readability over  in
the  docs.

: Extracted importlib.resources and
importlib.resources.abc documentation into separate files.

: Update the documentation for the  function.

================================================================================

# Changelog - Tests

List:
: Add a test case for  with _use_args_   and
_member_type_  .
: Fix hang in runtest_mp due to race condition
: Fix test_capi on FreeBSD 14-dev: instruct jemalloc to not fill
freed memory with junk byte.
: Cover ValueError path in tests for
enum.Flag._missing_().
: Now  in
test_pathlib.PosixPathTest.test_expanduser is checked to be
non-existent.
: Rewrite asyncio.locks tests with
unittest.IsolatedAsyncioTestCase usage.
: Fixed  tests in python optimized mode. Patch by
Kumar Aditya.
: Fix test case for OpenSSL 3.0.1 version. OpenSSL 3.0 uses
0xMNN00PP0L.

: Add a test case for  with _use_args_   and
_member_type_  .

: Fix hang in runtest_mp due to race condition

: Fix test_capi on FreeBSD 14-dev: instruct jemalloc to not fill
freed memory with junk byte.

: Cover ValueError path in tests for
enum.Flag._missing_().

: Now  in
test_pathlib.PosixPathTest.test_expanduser is checked to be
non-existent.

: Rewrite asyncio.locks tests with
unittest.IsolatedAsyncioTestCase usage.

: Fixed  tests in python optimized mode. Patch by
Kumar Aditya.

: Fix test case for OpenSSL 3.0.1 version. OpenSSL 3.0 uses
0xMNN00PP0L.

================================================================================

# Changelog - Build (Part 1)

List:
: When Python is configured with
--without-static-libpython, the Python static library
(libpython.a) is no longer built. Patch by Victor Stinner.
: When Python is built without --enable-shared, the
 program is now linked to object files, rather than being linked
to the Python static library (libpython.a), to make sure that all symbols
are exported. Previously, the linker omitted some symbols like the
Py_FrozenMain() function. Patch by Victor Stinner.
: The  script has a new option
--with-emscripten-target to select browser or node as Emscripten build
target.
: Added and fixed  HAVE_FEATURE checks for
functionality that is not available on WASI platform.
: Fixed a regression in  check for
select.epoll().
:  no longer sets  on FreeBSD
platforms.
: Updated OpenSSL to 1.1.1m in Windows builds, macOS installer
builds, and CI. Patch by Kumar Aditya.
: Automatically detect or install bootstrap Python runtime when
building from Visual Studio.
: Add a âwith-pystats configure option to turn on internal
statistics gathering.
: A new directory Tools/wasm contains WebAssembly-related
helpers like config.site override for wasm32-emscripten, wasm assets
generator to bundle the stdlib, and a README.
:  no longer builds extensions that have been
marked as . This allows users to disable modules in
Modules/Setup.local.
: Use pure Python freeze_module for all but importlib
bootstrap files. --with-freeze-module  option is
no longer needed for cross builds.

================================================================================

# Changelog - Build (Part 2)

: When Python is configured with
--without-static-libpython, the Python static library
(libpython.a) is no longer built. Patch by Victor Stinner.

: When Python is built without --enable-shared, the
 program is now linked to object files, rather than being linked
to the Python static library (libpython.a), to make sure that all symbols
are exported. Previously, the linker omitted some symbols like the
Py_FrozenMain() function. Patch by Victor Stinner.

: The  script has a new option
--with-emscripten-target to select browser or node as Emscripten build
target.

: Added and fixed  HAVE_FEATURE checks for
functionality that is not available on WASI platform.

: Fixed a regression in  check for
select.epoll().

:  no longer sets  on FreeBSD
platforms.

: Updated OpenSSL to 1.1.1m in Windows builds, macOS installer
builds, and CI. Patch by Kumar Aditya.

: Automatically detect or install bootstrap Python runtime when
building from Visual Studio.

: Add a âwith-pystats configure option to turn on internal
statistics gathering.

: A new directory Tools/wasm contains WebAssembly-related
helpers like config.site override for wasm32-emscripten, wasm assets
generator to bundle the stdlib, and a README.

================================================================================

# Changelog - Build (Part 3)

:  no longer builds extensions that have been
marked as . This allows users to disable modules in
Modules/Setup.local.

: Use pure Python freeze_module for all but importlib
bootstrap files. --with-freeze-module  option is
no longer needed for cross builds.

================================================================================

# Changelog - Windows

List:
: Removed parameter that is unsupported on Windows 8.1 and early
Windows 10 and may have caused build or runtime failures.

: Removed parameter that is unsupported on Windows 8.1 and early
Windows 10 and may have caused build or runtime failures.

================================================================================

# Changelog - macOS

List:
: The Python Launcher app for macOS now properly launches scripts
and, if necessary, the Terminal app when running on recent macOS releases.

: The Python Launcher app for macOS now properly launches scripts
and, if necessary, the Terminal app when running on recent macOS releases.

================================================================================

# Changelog - C API (Part 1)

List:
: Fix a bug in PyFunction_GetAnnotations() that caused it
to return a  instead of a .
: PyBuffer_GetPointer(),
PyBuffer_FromContiguous(), PyBuffer_ToContiguous() and
PyMemoryView_FromBuffer() now take buffer info by 
  instead of  , as they do not need mutability.
PyBuffer_FromContiguous() also now takes the source buffer as
  , and similarly PyBuffer_GetPointer() takes the
strides as  Py_ssize_t .
: Document that the  argument to
PyCapsule_Import() is a no-op now.
: Replaced deprecated usage of
PyImport_ImportModuleNoBlock() with
PyImport_ImportModule() in stdlib modules. Patch by Kumar Aditya.
: The PyUnicode_CHECK_INTERNED() macro has been excluded
from the limited C API. It was never usable there, because it used
internal structures which are not available in the limited C API. Patch by
Victor Stinner.

: Fix a bug in PyFunction_GetAnnotations() that caused it
to return a  instead of a .

================================================================================

# Changelog - C API (Part 2)

: PyBuffer_GetPointer(),
PyBuffer_FromContiguous(), PyBuffer_ToContiguous() and
PyMemoryView_FromBuffer() now take buffer info by 
  instead of  , as they do not need mutability.
PyBuffer_FromContiguous() also now takes the source buffer as
  , and similarly PyBuffer_GetPointer() takes the
strides as  Py_ssize_t .

: Document that the  argument to
PyCapsule_Import() is a no-op now.

: Replaced deprecated usage of
PyImport_ImportModuleNoBlock() with
PyImport_ImportModule() in stdlib modules. Patch by Kumar Aditya.

: The PyUnicode_CHECK_INTERNED() macro has been excluded
from the limited C API. It was never usable there, because it used
internal structures which are not available in the limited C API. Patch by
Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Restore behavior from 3.9 and earlier when sending non-None to
newly started generator. In 3.9 this did not affect the state of the
generator. In 3.10.0 and 3.10.1 gen_func().send(0) is equivalent to
gen_func().throw(TypeError(...) which exhausts the generator. In
3.10.2 onward, the behavior has been reverted to that of 3.9.
: Fix the SyntaxError location for errors involving for
loops with invalid targets. Patch by Pablo Galindo
: _PyErr_ChainStackItem() no longer normalizes
 (including setting the traceback on the exception instance)
because  is always normalized.
: The  field was added to BaseException. It is
 by default but can be set to a string which is added to the
exceptionâs traceback.
: Place pointers to dict and values immediately before GC header.
This reduces number of dependent memory loads to access either dict or
values from 3 to 1.
: is_valid_fd now uses faster   on
Linux, macOS, and Windows.
: Reverts a change to the code.__new__ audit event from an earlier prerelease.
: Fail the configure step if the selected compiler doesnât
support memory sanitizer. Patch by Pablo Galindo
: The three values of  are now always consistent with
each other. In particular, the  and  fields are now
derived from the exception instance. This impacts the return values of
sys.exc_info() and PyErr_GetExcInfo() if the exception
instance is modified while the exception is handled, as well as
PyErr_SetExcInfo(), which now ignores the  and
 arguments provided to it.
: Refine the custom syntax error that suggests that a comma may
be missing to trigger only when the expressions are detected between
parentheses or brackets. Patch by Pablo Galindo
: Specialized the COMPARE_OP opcode using the PEP 659
machinery.
: Allocate space for the interpreter frame in the frame object,
to avoid an additional allocation when the frame object outlives the frame
activation.
: Fix  display for exceptions with invalid module
name.
: Fix crash when calling coro.cr_frame.clear() after coroutine
has been freed.
: Improve the tokenizer errors when encountering invisible
control characters in the parser. Patch by Pablo Galindo
: Allow the parser to obtain error lines directly from encoded
files. Patch by Pablo Galindo
: Restore behavior from 3.10 when tracing an exception raised
within a with statement.
: Adds new COPY_FREE_VARS opcode, to make copying of
free variables from function to frame explicit. Helps optimization of
calls to Python function.
: Specialize BINARY_SUBSCR for classes with a
__getitem__ method implemented in Python
: Fixed a crash when calling .with_traceback(None) on
. This occurs internally in
unittest.TestCase.assertRaises().
: Fixed a bug in the parser that was causing it to not respect
 coding cookies when no flags are provided. Patch by Pablo
Galindo
: Fix a segfault when the parser fails without reading any input.
Patch by Pablo Galindo
: Simplify the implementation of  by indexing
into an array of function pointers (rather than switching on the oparg).
: Fix crash when  is called with an active
non-default memory allocator.
: Fix computation of error location for invalid continuation
characters in the parser. Patch by Pablo Galindo.
: Remove an existing âfast pathâ for old-style string formatting,
since it no longer appears to have any measurable impact.
: Make recursion checks a bit more efficient by tracking amount
of calls left before overflow.
: Fix a compiler hang when attempting to optimize certain jump
patterns.
: The parser now gives a better error message when leaving out
the opening parenthesis  after a -statement:

================================================================================

# Changelog - Core and Builtins (Part 2)

  File , line 


SyntaxError: expected '('



: Specialized the STORE_SUBSCR opcode using the PEP 659
machinery.
: Replace all numeric  and  instructions
with a single  implementation.
: Path calculation (known as ) has been reimplemented
as a frozen Python module. This should have no visible impact, but may
affect calculation of all paths referenced in  and
.
: Improve the syntax error message for parenthesized arguments.
Patch by Pablo Galindo.

: Restore behavior from 3.9 and earlier when sending non-None to
newly started generator. In 3.9 this did not affect the state of the
generator. In 3.10.0 and 3.10.1 gen_func().send(0) is equivalent to
gen_func().throw(TypeError(...) which exhausts the generator. In
3.10.2 onward, the behavior has been reverted to that of 3.9.

: Fix the SyntaxError location for errors involving for
loops with invalid targets. Patch by Pablo Galindo

: _PyErr_ChainStackItem() no longer normalizes
 (including setting the traceback on the exception instance)
because  is always normalized.

: The  field was added to BaseException. It is
 by default but can be set to a string which is added to the
exceptionâs traceback.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Place pointers to dict and values immediately before GC header.
This reduces number of dependent memory loads to access either dict or
values from 3 to 1.

: is_valid_fd now uses faster   on
Linux, macOS, and Windows.

: Reverts a change to the code.__new__ audit event from an earlier prerelease.

: Fail the configure step if the selected compiler doesnât
support memory sanitizer. Patch by Pablo Galindo

: The three values of  are now always consistent with
each other. In particular, the  and  fields are now
derived from the exception instance. This impacts the return values of
sys.exc_info() and PyErr_GetExcInfo() if the exception
instance is modified while the exception is handled, as well as
PyErr_SetExcInfo(), which now ignores the  and
 arguments provided to it.

: Refine the custom syntax error that suggests that a comma may
be missing to trigger only when the expressions are detected between
parentheses or brackets. Patch by Pablo Galindo

: Specialized the COMPARE_OP opcode using the PEP 659
machinery.

: Allocate space for the interpreter frame in the frame object,
to avoid an additional allocation when the frame object outlives the frame
activation.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix  display for exceptions with invalid module
name.

: Fix crash when calling coro.cr_frame.clear() after coroutine
has been freed.

: Improve the tokenizer errors when encountering invisible
control characters in the parser. Patch by Pablo Galindo

: Allow the parser to obtain error lines directly from encoded
files. Patch by Pablo Galindo

: Restore behavior from 3.10 when tracing an exception raised
within a with statement.

: Adds new COPY_FREE_VARS opcode, to make copying of
free variables from function to frame explicit. Helps optimization of
calls to Python function.

: Specialize BINARY_SUBSCR for classes with a
__getitem__ method implemented in Python

: Fixed a crash when calling .with_traceback(None) on
. This occurs internally in
unittest.TestCase.assertRaises().

: Fixed a bug in the parser that was causing it to not respect
 coding cookies when no flags are provided. Patch by Pablo
Galindo

: Fix a segfault when the parser fails without reading any input.
Patch by Pablo Galindo

: Simplify the implementation of  by indexing
into an array of function pointers (rather than switching on the oparg).

: Fix crash when  is called with an active
non-default memory allocator.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Fix computation of error location for invalid continuation
characters in the parser. Patch by Pablo Galindo.

: Remove an existing âfast pathâ for old-style string formatting,
since it no longer appears to have any measurable impact.

: Make recursion checks a bit more efficient by tracking amount
of calls left before overflow.

: Fix a compiler hang when attempting to optimize certain jump
patterns.

: The parser now gives a better error message when leaving out
the opening parenthesis  after a -statement:

Code example:
File , line 


SyntaxError: expected '('

: Specialized the STORE_SUBSCR opcode using the PEP 659
machinery.

: Replace all numeric  and  instructions
with a single  implementation.

: Path calculation (known as ) has been reimplemented
as a frozen Python module. This should have no visible impact, but may
affect calculation of all paths referenced in  and
.

: Improve the syntax error message for parenthesized arguments.
Patch by Pablo Galindo.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix possible crash when getting an attribute of
xml.etree.ElementTree.Element simultaneously with replacing the
 dict.
: Make  normalize exceptions as soon as they are
captured with PyErr_Fetch(), and before they are stored as an
exc_info triplet. This brings  in line with the rest of the
codebase, where an exc_info triplet is always normalized.
: Replaced asserts with exceptions in asyncio, patch by Kumar
Aditya.
: unittest.TextTestResult and
unittest.TextTestRunner flush now the output stream more often.
: Added math.exp2():, which returns 2 raised to the power
of x.
: Fix issue when on certain conditions asyncio.wait_for() may
allow a coroutine to complete successfully, but fail to return the result,
potentially causing memory leaks or other issues.
: Improve the accuracy of stdev() and pstdev() in the statistics
module.  When the inputs are floats or fractions, the output is a
correctly rounded float
: Handle dataclass(slots=True) with a field that has default a
default value, but for which init=False.
: Added missing kw_only parameter to
dataclasses.make_dataclass().
: The turtle.RawTurtle.settiltangle() is deprecated since
Python 3.1, it now emits a deprecation warning and will be removed in
Python 3.13.
Use turtle.RawTurtle.tiltangle() instead.
turtle.RawTurtle.tiltangle() was earlier incorrectly marked as
deprecated, its docstring has been corrected.
Patch by Hugo van Kemenade.

================================================================================

# Changelog - Library (Part 2)

: faulthandler can now write ASCII-only strings (like
filenames and function names) with a single write() syscall when dumping a
traceback. It reduces the risk of getting an unreadable dump when two
threads or two processes dump a traceback to the same file (like stderr)
at the same time. Patch by Victor Stinner.
:  C callbacks now use unraisable exceptions if
callback tracebacks are enabled. Patch by Erlend E. Aasland.
: Fix thread lock in zlib.Decompress.flush() method before
PyObject_GetBuffer.
: Reverted an argparse bugfix that caused regression in the
handling of default arguments for subparsers.  This prevented leaf level
arguments from taking precedence over root level arguments.
: Fix a regression in Python 3.11a1 and 3.11a2 where
 incorrectly would use SQLITE_LIMIT_LENGTH when checking
SQL statement lengths. Now, SQLITE_LIMIT_SQL_LENGTH is used. Patch by
Erlend E. Aasland.
: Added proportional option to
statistics.linear_regression().
: In importlib.metadata, fix distribution discovery for an empty
path.
: Fix bug where  produced an incorrect oparg when
EXTENDED_ARG is followed by an opcode that does not use its
argument.
: In-place JSON file formatting using   
  now works correctly, previously it left the file empty.
Patch by Chris Wesseling.
: When a namespace package is imported before another module from
the same namespace is created/installed in a different 
location while the program is running, calling the
importlib.invalidate_caches() function will now also guarantee the
new module is noticed.
: Improve output of  with Enums.
: Fix types.resolve_bases() and types.new_class() for
types.GenericAlias instance as a base.
: Fix dataclasses.is_dataclass() for dataclasses which are
subclasses of types.GenericAlias.
: Fix the repr of dataclasses.InitVar with a type alias
to the built-in class, e.g. InitVar[list[int]].
: Launch GNOME web browsers via gio tool instead of obsolete
gvfs-open
: On Windows, time.sleep() now uses a waitable timer which
supports high-resolution timers. Patch by Donghee Na and Eryk Sun.
: Optimize math.comb() and math.perm().
: Deprecated legacy functions in importlib.resources.
: Add tests for truncated/missing trailers in gzip.decompress
implementation.
: Implement  for graphlib.TopologicalSorter.
: Add max_tasks_per_child to
concurrent.futures.ProcessPoolExecutor. This allows users to
specify the maximum number of tasks a single process should execute before
the process needs to be restarted.
: Improve netrc library. netrc file no longer needs to contain
all tokens. And if the login name is anonymous, security check is no
longer need.
: Avoid a possible âRuntimeError: dictionary changed size during
iterationâ when adjusting the process count of
ProcessPoolExecutor.
: Add MIME types for N-quads, N-triples, Notation3 and TriG to
.
: Add inspect.getmembers_static() , it return all members
without triggering dynamic lookup via the descriptor protocol. Patch by
Weipeng Hong.

================================================================================

# Changelog - Library (Part 3)

: Fix possible crash when getting an attribute of
xml.etree.ElementTree.Element simultaneously with replacing the
 dict.

: Make  normalize exceptions as soon as they are
captured with PyErr_Fetch(), and before they are stored as an
exc_info triplet. This brings  in line with the rest of the
codebase, where an exc_info triplet is always normalized.

: Replaced asserts with exceptions in asyncio, patch by Kumar
Aditya.

: unittest.TextTestResult and
unittest.TextTestRunner flush now the output stream more often.

: Added math.exp2():, which returns 2 raised to the power
of x.

: Fix issue when on certain conditions asyncio.wait_for() may
allow a coroutine to complete successfully, but fail to return the result,
potentially causing memory leaks or other issues.

: Improve the accuracy of stdev() and pstdev() in the statistics
module.  When the inputs are floats or fractions, the output is a
correctly rounded float

: Handle dataclass(slots=True) with a field that has default a
default value, but for which init=False.

: Added missing kw_only parameter to
dataclasses.make_dataclass().

================================================================================

# Changelog - Library (Part 4)

: The turtle.RawTurtle.settiltangle() is deprecated since
Python 3.1, it now emits a deprecation warning and will be removed in
Python 3.13.

Use turtle.RawTurtle.tiltangle() instead.

turtle.RawTurtle.tiltangle() was earlier incorrectly marked as
deprecated, its docstring has been corrected.

Patch by Hugo van Kemenade.

: faulthandler can now write ASCII-only strings (like
filenames and function names) with a single write() syscall when dumping a
traceback. It reduces the risk of getting an unreadable dump when two
threads or two processes dump a traceback to the same file (like stderr)
at the same time. Patch by Victor Stinner.

:  C callbacks now use unraisable exceptions if
callback tracebacks are enabled. Patch by Erlend E. Aasland.

: Fix thread lock in zlib.Decompress.flush() method before
PyObject_GetBuffer.

: Reverted an argparse bugfix that caused regression in the
handling of default arguments for subparsers.  This prevented leaf level
arguments from taking precedence over root level arguments.

================================================================================

# Changelog - Library (Part 5)

: Fix a regression in Python 3.11a1 and 3.11a2 where
 incorrectly would use SQLITE_LIMIT_LENGTH when checking
SQL statement lengths. Now, SQLITE_LIMIT_SQL_LENGTH is used. Patch by
Erlend E. Aasland.

: Added proportional option to
statistics.linear_regression().

: In importlib.metadata, fix distribution discovery for an empty
path.

: Fix bug where  produced an incorrect oparg when
EXTENDED_ARG is followed by an opcode that does not use its
argument.

: In-place JSON file formatting using   
  now works correctly, previously it left the file empty.
Patch by Chris Wesseling.

: When a namespace package is imported before another module from
the same namespace is created/installed in a different 
location while the program is running, calling the
importlib.invalidate_caches() function will now also guarantee the
new module is noticed.

: Improve output of  with Enums.

: Fix types.resolve_bases() and types.new_class() for
types.GenericAlias instance as a base.

: Fix dataclasses.is_dataclass() for dataclasses which are
subclasses of types.GenericAlias.

: Fix the repr of dataclasses.InitVar with a type alias
to the built-in class, e.g. InitVar[list[int]].

================================================================================

# Changelog - Library (Part 6)

: Launch GNOME web browsers via gio tool instead of obsolete
gvfs-open

: On Windows, time.sleep() now uses a waitable timer which
supports high-resolution timers. Patch by Donghee Na and Eryk Sun.

: Optimize math.comb() and math.perm().

: Deprecated legacy functions in importlib.resources.

: Add tests for truncated/missing trailers in gzip.decompress
implementation.

: Implement  for graphlib.TopologicalSorter.

: Add max_tasks_per_child to
concurrent.futures.ProcessPoolExecutor. This allows users to
specify the maximum number of tasks a single process should execute before
the process needs to be restarted.

: Improve netrc library. netrc file no longer needs to contain
all tokens. And if the login name is anonymous, security check is no
longer need.

: Avoid a possible âRuntimeError: dictionary changed size during
iterationâ when adjusting the process count of
ProcessPoolExecutor.

: Add MIME types for N-quads, N-triples, Notation3 and TriG to
.

: Add inspect.getmembers_static() , it return all members
without triggering dynamic lookup via the descriptor protocol. Patch by
Weipeng Hong.

================================================================================

# Changelog - Documentation (Part 1)

List:
:    suspicious will be removed soon in favor of
   , mark it as deprecated.
: Improve cross-references in the documentation for the data
model.
: Properly marked-up grammar tokens in the documentation are now
clickable and take you to the definition of a given piece of grammar.
Patch by Arthur Milchior.
: Link doc for sys.prefix to sysconfig doc on installation paths.
: socket.socket documentation is corrected to a class from a
function.
: Update the docstring of the  built-in to remove a
redundant line and to mention keyword arguments for the constructor.
: Update the documentation to note that CPython does not
consistently require iterators to define .
: In the extending chapter of the extending doc, update a
paragraph about the global variables containing exception information.
: Expanded  and
 docs, warning about deepcopy being applied and
providing a workaround.

:    suspicious will be removed soon in favor of
   , mark it as deprecated.

: Improve cross-references in the documentation for the data
model.

: Properly marked-up grammar tokens in the documentation are now
clickable and take you to the definition of a given piece of grammar.
Patch by Arthur Milchior.

================================================================================

# Changelog - Documentation (Part 2)

: Link doc for sys.prefix to sysconfig doc on installation paths.

: socket.socket documentation is corrected to a class from a
function.

: Update the docstring of the  built-in to remove a
redundant line and to mention keyword arguments for the constructor.

: Update the documentation to note that CPython does not
consistently require iterators to define .

: In the extending chapter of the extending doc, update a
paragraph about the global variables containing exception information.

: Expanded  and
 docs, warning about deepcopy being applied and
providing a workaround.

================================================================================

# Changelog - Tests

List:
: Out-of-tree builds with a read-only source directory are now
tested by CI.
: Add new Test for
Lib/email/mime/nonmultipart.py::MIMENonMultipart.
: Fix race condition in test_queue tests with multiple âfeederâ
threads.
: The test for the freeze tool now handles file moves and
deletions.
: Remove the --findleaks command line option of regrtest: use
the --fail-env-changed option instead. Since Python 3.7, it was a
deprecated alias to the --fail-env-changed option.
: Add tests with  type with functools.lru_cache()
to test_functools.

: Out-of-tree builds with a read-only source directory are now
tested by CI.

: Add new Test for
Lib/email/mime/nonmultipart.py::MIMENonMultipart.

: Fix race condition in test_queue tests with multiple âfeederâ
threads.

: The test for the freeze tool now handles file moves and
deletions.

: Remove the --findleaks command line option of regrtest: use
the --fail-env-changed option instead. Since Python 3.7, it was a
deprecated alias to the --fail-env-changed option.

: Add tests with  type with functools.lru_cache()
to test_functools.

================================================================================

# Changelog - Build (Part 1)

List:
: CI now verifies that autoconf files have been regenerated with
a current and unpatched autoconf package.
: The build system now uses a _bootstrap_python
interpreter for freezing and deepfreezing again. To speed up build process
the build tools _bootstrap_python and _freeze_module
are no longer build with LTO.
: The  script now accepts
--with-build-python and --with-freeze-module options to make cross
compiling easier.
: Emscripten platform now uses  suffix by default.
: Disable unusable core extension modules on WASM/Emscripten
targets.
:  now checks for socket  function. The
check makes it possible to disable SYS_shutdown with
ac_cv_func_shutdown=no in CONFIG_SITE.
:  now checks for functions  
        .
: Update config.guess to 2021-06-03 and config.sub to
2021-08-14.  now has an update-config target to make
updating more convenient.
:   now produces the same output when run from a
directory other than the source tree: when building Python out of the
source tree. pegen now strips directory of the âgenerated by pygen from
<FILENAME>â header Patch by Victor Stinner.
:  now accepts machine  or  and
OS  or emscripten for cross building, e.g.
wasm32-unknown-emscripten, wasm32-wasi, or
wasm32-unknown-wasi.
: Python now compiles on platforms without . Several
functions in  are not available when  is missing.
Based on patch by Roman Yurchak for pyodide.

================================================================================

# Changelog - Build (Part 2)

:  now uses  from environment first to discover
multiarch and cross compile paths.
: The _freeze_module program path can now be overridden on
the command line, e.g. 
FREEZE_MODULE=../x86_64/Program/_freeze_module.
: Get rid of the _bootstrap_python build step. The
deepfreeze.py script is now run using $(PYTHON_FOR_REGEN) which can be
Python 3.7 or newer (on Windows, 3.8 or newer).
: Port builtin hashlib extensions to PY_STDLIB_MOD macro and
.
: Add  helpers for saving and restoring environment
variables:

: Save , , , and
.
RESTORE_ENV: Restore , , , and
.
WITH_SAVE_ENV([SCRIPT]): Run  wrapped with  and
RESTORE_ENV.

Patch by Erlend E. Aasland.

================================================================================

# Changelog - Build (Part 3)

: Mandatory core modules, that are required to bootstrap Python,
are now in Modules/Setup.bootstrap.
:  now creates Modules/Setup.stdlib with
conditionally enabled/disabled extension module lines. The file is not
used, yet.
:  now uses a unified format to set state, compiler
flags, and linker flags in Makefile. The new macro PY_STDLIB_MOD sets
three variables that are consumed by Modules/Setup and .
: Python now supports building with Visual Studio 2022 (MSVC
v143, VS Version 17.0). Patch by Jeremiah Vivian.
: Settings for  C extension are now detected by
. The bundled  library is built in .
: Settings for  internal C extension are now
detected by . The bundled  library is built in
.
:  has a new option --with-pkg-config to
disable or require pkg-config.
: The build dependencies for  are now detected by
 and pkg-config. Patch by Erlend E. Aasland.
: The build dependencies for , , and
 are now detected by .
: gdbm and dbm build dependencies are now detected by
.
: On macOS, the build system no longer passes
search_paths_first to the linker. The flag has been the default since
Xcode 4 / macOS 10.6.
: configure.ac is now compatible with autoconf 2.71.
Deprecated checks STDC_HEADERS and AC_HEADER_TIME have been
removed.
:  now prints a warning when pkg-config is missing.
:  --enable-loadable-sqlite-extensions is now
handled by new PY_SQLITE_ENABLE_LOAD_EXTENSION macro instead of logic
in setup.py.
: configure.ac now uses custom helper macros and
AC_CACHE_CHECK to simplify and speed up configure runs.
: Skip the marshal step for frozen modules by generating C code
that produces a set of ready-to-use code objects. This speeds up startup
time by another 10% or more.
: Run smelly.py tool from $(srcdir).

================================================================================

# Changelog - Build (Part 4)

: CI now verifies that autoconf files have been regenerated with
a current and unpatched autoconf package.

: The build system now uses a _bootstrap_python
interpreter for freezing and deepfreezing again. To speed up build process
the build tools _bootstrap_python and _freeze_module
are no longer build with LTO.

: The  script now accepts
--with-build-python and --with-freeze-module options to make cross
compiling easier.

: Emscripten platform now uses  suffix by default.

: Disable unusable core extension modules on WASM/Emscripten
targets.

:  now checks for socket  function. The
check makes it possible to disable SYS_shutdown with
ac_cv_func_shutdown=no in CONFIG_SITE.

:  now checks for functions  
        .

: Update config.guess to 2021-06-03 and config.sub to
2021-08-14.  now has an update-config target to make
updating more convenient.

:   now produces the same output when run from a
directory other than the source tree: when building Python out of the
source tree. pegen now strips directory of the âgenerated by pygen from
<FILENAME>â header Patch by Victor Stinner.

================================================================================

# Changelog - Build (Part 5)

:  now accepts machine  or  and
OS  or emscripten for cross building, e.g.
wasm32-unknown-emscripten, wasm32-wasi, or
wasm32-unknown-wasi.

: Python now compiles on platforms without . Several
functions in  are not available when  is missing.

Based on patch by Roman Yurchak for pyodide.

:  now uses  from environment first to discover
multiarch and cross compile paths.

: The _freeze_module program path can now be overridden on
the command line, e.g. 
FREEZE_MODULE=../x86_64/Program/_freeze_module.

: Get rid of the _bootstrap_python build step. The
deepfreeze.py script is now run using $(PYTHON_FOR_REGEN) which can be
Python 3.7 or newer (on Windows, 3.8 or newer).

: Port builtin hashlib extensions to PY_STDLIB_MOD macro and
.

: Add  helpers for saving and restoring environment
variables:

List:
: Save , , , and
.
RESTORE_ENV: Restore , , , and
.
WITH_SAVE_ENV([SCRIPT]): Run  wrapped with  and
RESTORE_ENV.

RESTORE_ENV: Restore , , , and
.

WITH_SAVE_ENV([SCRIPT]): Run  wrapped with  and
RESTORE_ENV.

Patch by Erlend E. Aasland.

: Mandatory core modules, that are required to bootstrap Python,
are now in Modules/Setup.bootstrap.

================================================================================

# Changelog - Build (Part 6)

:  now creates Modules/Setup.stdlib with
conditionally enabled/disabled extension module lines. The file is not
used, yet.

:  now uses a unified format to set state, compiler
flags, and linker flags in Makefile. The new macro PY_STDLIB_MOD sets
three variables that are consumed by Modules/Setup and .

: Python now supports building with Visual Studio 2022 (MSVC
v143, VS Version 17.0). Patch by Jeremiah Vivian.

: Settings for  C extension are now detected by
. The bundled  library is built in .

: Settings for  internal C extension are now
detected by . The bundled  library is built in
.

:  has a new option --with-pkg-config to
disable or require pkg-config.

: The build dependencies for  are now detected by
 and pkg-config. Patch by Erlend E. Aasland.

: The build dependencies for , , and
 are now detected by .

: gdbm and dbm build dependencies are now detected by
.

: On macOS, the build system no longer passes
search_paths_first to the linker. The flag has been the default since
Xcode 4 / macOS 10.6.

: configure.ac is now compatible with autoconf 2.71.
Deprecated checks STDC_HEADERS and AC_HEADER_TIME have been
removed.

:  now prints a warning when pkg-config is missing.

================================================================================

# Changelog - Build (Part 7)

:  --enable-loadable-sqlite-extensions is now
handled by new PY_SQLITE_ENABLE_LOAD_EXTENSION macro instead of logic
in setup.py.

: configure.ac now uses custom helper macros and
AC_CACHE_CHECK to simplify and speed up configure runs.

: Skip the marshal step for frozen modules by generating C code
that produces a set of ready-to-use code objects. This speeds up startup
time by another 10% or more.

: Run smelly.py tool from $(srcdir).

================================================================================

# Changelog - Windows (Part 1)

List:
: Fixed calculation of  in a venv on Windows.
: When installed through the Microsoft Store and set as the
default app for  files, command line arguments will now be
passed to Python when invoking a script without explicitly launching
Python (that is,   rather than  
).
: Fix Python Launcherâs ability to distinguish between versions
3.1 and 3.10 when either one is explicitly requested.  Previously, 3.1
would be used if 3.10 was requested but not installed, and 3.10 would be
used if 3.1 was requested but 3.10 was installed.
: Implement changes to build with deep-frozen modules on Windows.
Note that we now require Python 3.10 as the âbootstrapâ or âhostâ Python.
: Updates bundled Tcl/Tk to 8.6.12.
: Internal reference to shlwapi.dll was dropped to help
improve startup time. This DLL will no longer be loaded at the start of
every Python process.

: Fixed calculation of  in a venv on Windows.

: When installed through the Microsoft Store and set as the
default app for  files, command line arguments will now be
passed to Python when invoking a script without explicitly launching
Python (that is,   rather than  
).

================================================================================

# Changelog - Windows (Part 2)

: Fix Python Launcherâs ability to distinguish between versions
3.1 and 3.10 when either one is explicitly requested.  Previously, 3.1
would be used if 3.10 was requested but not installed, and 3.10 would be
used if 3.1 was requested but 3.10 was installed.

: Implement changes to build with deep-frozen modules on Windows.
Note that we now require Python 3.10 as the âbootstrapâ or âhostâ Python.

: Updates bundled Tcl/Tk to 8.6.12.

: Internal reference to shlwapi.dll was dropped to help
improve startup time. This DLL will no longer be loaded at the start of
every Python process.

================================================================================

# Changelog - macOS

List:
: Update python.org macOS installer to use Tcl/Tk 8.6.12.

: Update python.org macOS installer to use Tcl/Tk 8.6.12.

================================================================================

# Changelog - C API

List:
: Fix Python.h to build C extensions with Xcode: remove a
relative include from Include/cpython/pystate.h.

: Fix Python.h to build C extensions with Xcode: remove a
relative include from Include/cpython/pystate.h.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Improve the SyntaxError message when using ,
 or  as keywords in a function call. Patch by Pablo
Galindo.
: sys.stdlib_module_names now contains the macOS-specific
module .
: Clarify ImportError message when we try to explicitly
import a frozen module but frozen modules are disabled.
: Specialize simple calls to Python functions (no starargs,
keyword dict, or closure)
: Cases of sorting using tuples as keys may now be significantly
faster in some cases. Patch by Tim Peters.
The order of the result may differ from earlier releases if the tuple
elements donât define a total ordering (see
Value comparisons for information on total ordering).
Itâs generally true that the result of sorting simply isnât well-defined
in the absence of a total ordering on list elements.

================================================================================

# Changelog - Core and Builtins (Part 2)

: In obmalloc, set ADDRESS_BITS to not ignore any bits (ignored
16 before). That is safer in the case that the kernel gives user-space
virtual addresses that span a range greater than 48 bits.
: Fixed a crash in issubclass() from infinite recursion when
searching pathological  tuples.
: Fix a bug in the obmalloc radix tree code.  On 64-bit machines,
the bug causes the tree to hold 46-bits of virtual addresses, rather than
the intended 48-bits.
: Fix parser crash when reporting errors involving invalid
continuation characters. Patch by Pablo Galindo.
: Python now fails to initialize if it finds an invalid
 option in the command line. Patch by Pablo Galindo.
: Object attributes are held in an array instead of a dictionary.
An objectâs dictionary are created lazily, only when needed. Reduces the
memory consumption of a typical Python object by about 30%. Patch by Mark
Shannon.
: Fix a crash in the parser when reporting tokenizer errors that
occur at the same time unclosed parentheses are detected. Patch by Pablo
Galindo.
: Add SipHash13 for string hash algorithm and use it by default.
: Fix reference leak from descr_check. Patch by Donghee Na.
: Specialized the BINARY_MULTIPLY opcode to
BINARY_MULTIPLY_INT and BINARY_MULTIPLY_FLOAT using the PEP 659
machinery.
: Frozen stdlib modules now have  to the .py file
they would otherwise be loaded from, if possible.  For packages,
 now has the correct entry instead of being an empty list,
which allows unfrozen submodules to be imported.  These are set only if
the stdlib directory is known when the runtime is initialized.  Note that
the file at  is not guaranteed to exist.  None of this affects
non-stdlib frozen modules nor, for now, frozen modules imported using
PyImport_ImportFrozenModule().  Also, at the moment co_filename is
not updated for the module.
: For frozen stdlib modules, record the original module name as
module.__spec__.loader_state.origname.  If the value is different than
module.__spec__.name then the module was defined as an alias in
Tools/scripts/freeze_modules.py.  If it is  then the module comes
from a source file outside the stdlib.
: In FrozenImporter.find_spec(), we now preserve the information
needed in exec_module() to load the module.  This change mostly impacts
internal details, rather than changing the importerâs behavior.
: Implement . Add ExceptionGroup and
BaseExceptionGroup. Update traceback display code.
: Change to the implementation of split dictionaries. Classes
where the instances differ either in the exact set of attributes, or in
the order in which those attributes are set, can still share keys. This
should have no observable effect on users of Python or the C-API. Patch by
Mark Shannon.
: Extensions that indicate they use global state (by setting
 to -1) can again be used in multiple interpreters. This reverts
to behavior of Python 3.8.
: Setup initial specialization infrastructure for the
CALL_FUNCTION opcode. Implemented initial specializations for C
function calls:

================================================================================

# Changelog - Core and Builtins (Part 3)

CALL_FUNCTION_BUILTIN_O for  flag.
CALL_FUNCTION_BUILTIN_FAST for METH_FASTCALL flag without keywords.
CALL_FUNCTION_LEN for .
CALL_FUNCTION_ISINSTANCE for isinstance(o, .


: Improve the generated bytecode for class and mapping patterns.
: Speed up calls to enumerate() by using the 
vectorcall calling convention. Patch by Donghee Na.

: Improve the SyntaxError message when using ,
 or  as keywords in a function call. Patch by Pablo
Galindo.

: sys.stdlib_module_names now contains the macOS-specific
module .

: Clarify ImportError message when we try to explicitly
import a frozen module but frozen modules are disabled.

: Specialize simple calls to Python functions (no starargs,
keyword dict, or closure)

: Cases of sorting using tuples as keys may now be significantly
faster in some cases. Patch by Tim Peters.

The order of the result may differ from earlier releases if the tuple
elements donât define a total ordering (see
Value comparisons for information on total ordering).
Itâs generally true that the result of sorting simply isnât well-defined
in the absence of a total ordering on list elements.

================================================================================

# Changelog - Core and Builtins (Part 4)

: In obmalloc, set ADDRESS_BITS to not ignore any bits (ignored
16 before). That is safer in the case that the kernel gives user-space
virtual addresses that span a range greater than 48 bits.

: Fixed a crash in issubclass() from infinite recursion when
searching pathological  tuples.

: Fix a bug in the obmalloc radix tree code.  On 64-bit machines,
the bug causes the tree to hold 46-bits of virtual addresses, rather than
the intended 48-bits.

: Fix parser crash when reporting errors involving invalid
continuation characters. Patch by Pablo Galindo.

: Python now fails to initialize if it finds an invalid
 option in the command line. Patch by Pablo Galindo.

: Object attributes are held in an array instead of a dictionary.
An objectâs dictionary are created lazily, only when needed. Reduces the
memory consumption of a typical Python object by about 30%. Patch by Mark
Shannon.

: Fix a crash in the parser when reporting tokenizer errors that
occur at the same time unclosed parentheses are detected. Patch by Pablo
Galindo.

: Add SipHash13 for string hash algorithm and use it by default.

: Fix reference leak from descr_check. Patch by Donghee Na.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Specialized the BINARY_MULTIPLY opcode to
BINARY_MULTIPLY_INT and BINARY_MULTIPLY_FLOAT using the PEP 659
machinery.

: Frozen stdlib modules now have  to the .py file
they would otherwise be loaded from, if possible.  For packages,
 now has the correct entry instead of being an empty list,
which allows unfrozen submodules to be imported.  These are set only if
the stdlib directory is known when the runtime is initialized.  Note that
the file at  is not guaranteed to exist.  None of this affects
non-stdlib frozen modules nor, for now, frozen modules imported using
PyImport_ImportFrozenModule().  Also, at the moment co_filename is
not updated for the module.

: For frozen stdlib modules, record the original module name as
module.__spec__.loader_state.origname.  If the value is different than
module.__spec__.name then the module was defined as an alias in
Tools/scripts/freeze_modules.py.  If it is  then the module comes
from a source file outside the stdlib.

: In FrozenImporter.find_spec(), we now preserve the information
needed in exec_module() to load the module.  This change mostly impacts
internal details, rather than changing the importerâs behavior.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Implement . Add ExceptionGroup and
BaseExceptionGroup. Update traceback display code.

: Change to the implementation of split dictionaries. Classes
where the instances differ either in the exact set of attributes, or in
the order in which those attributes are set, can still share keys. This
should have no observable effect on users of Python or the C-API. Patch by
Mark Shannon.

: Extensions that indicate they use global state (by setting
 to -1) can again be used in multiple interpreters. This reverts
to behavior of Python 3.8.

: Setup initial specialization infrastructure for the
CALL_FUNCTION opcode. Implemented initial specializations for C
function calls:

List:
CALL_FUNCTION_BUILTIN_O for  flag.
CALL_FUNCTION_BUILTIN_FAST for METH_FASTCALL flag without keywords.
CALL_FUNCTION_LEN for .
CALL_FUNCTION_ISINSTANCE for isinstance(o, .

CALL_FUNCTION_BUILTIN_O for  flag.

CALL_FUNCTION_BUILTIN_FAST for METH_FASTCALL flag without keywords.

CALL_FUNCTION_LEN for .

CALL_FUNCTION_ISINSTANCE for isinstance(o, .

: Improve the generated bytecode for class and mapping patterns.

: Speed up calls to enumerate() by using the 
vectorcall calling convention. Patch by Donghee Na.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix caching of multi-value typing.Literal.
Literal[True,  is no longer equal to Literal[1, .
: Convert  to multi-phase initialisation (PEP 489).
Patches by Erlend E. Aasland.
: Fix typing.Signature string representation for generic builtin
types.
:  now sets sqlite3.threadsafety based on
the default threading mode the underlying SQLite library has been compiled
with. Patch by Erlend E. Aasland.
: Fix warning about print_escape being unused.
: sqlite3.connect() now correctly raises MemoryError
if the underlying SQLite API signals memory error. Patch by Erlend E.
Aasland.
: pprint.pprint() now handles underscore_numbers
correctly. Previously it was always setting it to .
: Add operator.call() to operator.__all__. Patch by
Kreusada.
: shutil.get_terminal_size() now falls back to sane values
if the column or line count are 0.
: Improve the introspectability of the __loader__ attribute
for namespace packages.  importlib.machinery.NamespaceLoader is
now public, and implements the importlib.abc.InspectLoader
interface. _NamespaceLoader is kept for backward compatibility.
: Add references to  in the 
documentation, mostly replacing outdated references to dateutil.tz.
Change by Paul Ganssle.
: Reverted optimization of iterating gzip.GzipFile,
bz2.BZ2File, and lzma.LZMAFile (see ) because
it caused regression when user iterate them without having reference of
them. Patch by Inada Naoki.
: Update ForwardRef to support  operator.
Patch by Donghee Na.
: Removed deprecated support for float arguments in
randrange().
: Fix a regression in py_compile when reading filenames from
standard input.
: Fix incremental decoder and stream reader in the
âraw-unicode-escapeâ codec. Previously they failed if the escape sequence
was split.
: Fix incremental decoder and stream reader in the
âunicode-escapeâ codec. Previously they failed if the escape sequence was
split.
: Fixed email.utils.parsedate_tz() crashing with
UnboundLocalError on certain invalid input instead of returning
. Patch by Ben Hoyt.
: Fix quadratic behaviour in the enum module: Creation of enum
classes with a lot of entries was quadratic.
: Fix the behaviour of traceback.print_exc() when
displaying the caret when the end_offset in the exception is set to 0.
Patch by Pablo Galindo
: Fix use of asyncio.Condition with explicit
asyncio.Lock objects, which was a regression due to removal of
explicit loop arguments. Patch by Joongi Kim.
: Empty escapechar/quotechar is not allowed when initializing
csv.Dialect. Patch by Vajrasky Kok and Donghee Na.
: Fix bug in the  module that caused it to fail if
a docstring included an example with a classmethod . Patch
by Alex Waygood.
: Make inspect.getmodule() catch FileNotFoundError
raised by inspect.getabsfile(), and return  to indicate that
the module could not be determined.
: Add extensions for files containing subtitles - .srt & .vtt -
to the mimetypes.py module.
: Migrated pydoc to HTML5 (without changing the look of it). Side
effect is to update xmlrpcâs ServerHTMLDoc which now uses the CSS too.
cgitb now relies less on pydoc (as it canât use the CSS file).
: Add support of null characters in .
: Prevent use-after-free in asyncio. Make sure the cached running
loop holder gets cleared on dealloc to prevent use-after-free in
get_running_loop
: Make xmlrpc.client more robust to C runtimes where the
underlying C  function results in a ValueError when
testing for year formatting options.
: Improve error message of csv.Dialect when
initializing. Patch by Vajrasky Kok and Donghee Na.
: Update bundled pip to 21.2.4 and setuptools to 58.1.0
: Fixed http.client.HTTPConnection to work properly in
OSs that donât support the TCP_NODELAY socket option.
: Add setlimit() and
getlimit() to sqlite3.Connection for
setting and getting SQLite limits by connection basis. Patch by Erlend E.
Aasland.
: Removed from the  module:

================================================================================

# Changelog - Library (Part 2)


the getargspec function, deprecated since Python 3.0;use inspect.signature() or inspect.getfullargspec() instead.



the formatargspec function, deprecated since Python 3.5;
use the inspect.signature() function and  object
directly.
the undocumented Signature.from_builtin and Signature.from_function
functions, deprecated since Python 3.5; use the
Signature.from_callable() method
instead.

Patch by Hugo van Kemenade.

: Fix the tempfile._infer_return_type function so that the
 argument of the  functions accepts an object
implementing the os.PathLike protocol.
Patch by Kyungmin Lee.

================================================================================

# Changelog - Library (Part 3)

: When tracing a tkinter variable used by a ttk OptionMenu,
callbacks are no longer made twice.
: Added non parallel-safe  context
manager to change the current working directory and then restore it on
exit. Simple wrapper around .
: Add support for SQLite extended result codes in
sqlite3.Error. Patch by Erlend E. Aasland.
: Fixed an error raised in  help display when help
for an option is set to 1+ blank spaces or when  arg is an empty
container.
: Implement Fraction.__int__, so that a
fractions.Fraction instance  passes an isinstance(f,
typing.SupportsInt) check.
: Adds support for HTTP 308 redirects to . See
 for details. Patch by Jochem Schulenklopper.
: Ensure that socket.TCP_* constants are exposed on Cygwin
3.1.6 and greater.
: Add help flag to the base64 moduleâs command line interface.
Patch contributed by Robert Kuska.

: Fix caching of multi-value typing.Literal.
Literal[True,  is no longer equal to Literal[1, .

: Convert  to multi-phase initialisation (PEP 489).
Patches by Erlend E. Aasland.

: Fix typing.Signature string representation for generic builtin
types.

================================================================================

# Changelog - Library (Part 4)

:  now sets sqlite3.threadsafety based on
the default threading mode the underlying SQLite library has been compiled
with. Patch by Erlend E. Aasland.

: Fix warning about print_escape being unused.

: sqlite3.connect() now correctly raises MemoryError
if the underlying SQLite API signals memory error. Patch by Erlend E.
Aasland.

: pprint.pprint() now handles underscore_numbers
correctly. Previously it was always setting it to .

: Add operator.call() to operator.__all__. Patch by
Kreusada.

: shutil.get_terminal_size() now falls back to sane values
if the column or line count are 0.

: Improve the introspectability of the __loader__ attribute
for namespace packages.  importlib.machinery.NamespaceLoader is
now public, and implements the importlib.abc.InspectLoader
interface. _NamespaceLoader is kept for backward compatibility.

: Add references to  in the 
documentation, mostly replacing outdated references to dateutil.tz.
Change by Paul Ganssle.

: Reverted optimization of iterating gzip.GzipFile,
bz2.BZ2File, and lzma.LZMAFile (see ) because
it caused regression when user iterate them without having reference of
them. Patch by Inada Naoki.

================================================================================

# Changelog - Library (Part 5)

: Update ForwardRef to support  operator.
Patch by Donghee Na.

: Removed deprecated support for float arguments in
randrange().

: Fix a regression in py_compile when reading filenames from
standard input.

: Fix incremental decoder and stream reader in the
âraw-unicode-escapeâ codec. Previously they failed if the escape sequence
was split.

: Fix incremental decoder and stream reader in the
âunicode-escapeâ codec. Previously they failed if the escape sequence was
split.

: Fixed email.utils.parsedate_tz() crashing with
UnboundLocalError on certain invalid input instead of returning
. Patch by Ben Hoyt.

: Fix quadratic behaviour in the enum module: Creation of enum
classes with a lot of entries was quadratic.

: Fix the behaviour of traceback.print_exc() when
displaying the caret when the end_offset in the exception is set to 0.
Patch by Pablo Galindo

: Fix use of asyncio.Condition with explicit
asyncio.Lock objects, which was a regression due to removal of
explicit loop arguments. Patch by Joongi Kim.

: Empty escapechar/quotechar is not allowed when initializing
csv.Dialect. Patch by Vajrasky Kok and Donghee Na.

================================================================================

# Changelog - Library (Part 6)

: Fix bug in the  module that caused it to fail if
a docstring included an example with a classmethod . Patch
by Alex Waygood.

: Make inspect.getmodule() catch FileNotFoundError
raised by inspect.getabsfile(), and return  to indicate that
the module could not be determined.

: Add extensions for files containing subtitles - .srt & .vtt -
to the mimetypes.py module.

: Migrated pydoc to HTML5 (without changing the look of it). Side
effect is to update xmlrpcâs ServerHTMLDoc which now uses the CSS too.
cgitb now relies less on pydoc (as it canât use the CSS file).

: Add support of null characters in .

: Prevent use-after-free in asyncio. Make sure the cached running
loop holder gets cleared on dealloc to prevent use-after-free in
get_running_loop

: Make xmlrpc.client more robust to C runtimes where the
underlying C  function results in a ValueError when
testing for year formatting options.

: Improve error message of csv.Dialect when
initializing. Patch by Vajrasky Kok and Donghee Na.

: Update bundled pip to 21.2.4 and setuptools to 58.1.0

: Fixed http.client.HTTPConnection to work properly in
OSs that donât support the TCP_NODELAY socket option.

================================================================================

# Changelog - Library (Part 7)

: Add setlimit() and
getlimit() to sqlite3.Connection for
setting and getting SQLite limits by connection basis. Patch by Erlend E.
Aasland.

: Removed from the  module:

List:
the getargspec function, deprecated since Python 3.0;use inspect.signature() or inspect.getfullargspec() instead.



the formatargspec function, deprecated since Python 3.5;
use the inspect.signature() function and  object
directly.
the undocumented Signature.from_builtin and Signature.from_function
functions, deprecated since Python 3.5; use the
Signature.from_callable() method
instead.

the getargspec function, deprecated since Python 3.0;use inspect.signature() or inspect.getfullargspec() instead.

use inspect.signature() or inspect.getfullargspec() instead.

the formatargspec function, deprecated since Python 3.5;
use the inspect.signature() function and  object
directly.

the undocumented Signature.from_builtin and Signature.from_function
functions, deprecated since Python 3.5; use the
Signature.from_callable() method
instead.

Patch by Hugo van Kemenade.

: Fix the tempfile._infer_return_type function so that the
 argument of the  functions accepts an object
implementing the os.PathLike protocol.

Patch by Kyungmin Lee.

================================================================================

# Changelog - Library (Part 8)

: When tracing a tkinter variable used by a ttk OptionMenu,
callbacks are no longer made twice.

: Added non parallel-safe  context
manager to change the current working directory and then restore it on
exit. Simple wrapper around .

: Add support for SQLite extended result codes in
sqlite3.Error. Patch by Erlend E. Aasland.

: Fixed an error raised in  help display when help
for an option is set to 1+ blank spaces or when  arg is an empty
container.

: Implement Fraction.__int__, so that a
fractions.Fraction instance  passes an isinstance(f,
typing.SupportsInt) check.

: Adds support for HTTP 308 redirects to . See
 for details. Patch by Jochem Schulenklopper.

: Ensure that socket.TCP_* constants are exposed on Cygwin
3.1.6 and greater.

: Add help flag to the base64 moduleâs command line interface.
Patch contributed by Robert Kuska.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Improve documentation for functools.singledispatch() and
functools.singledispatchmethod.
: Amend the docs on GenericAlias objects to clarify that
non-container classes can also implement __class_getitem__. Patch
contributed by Alex Waygood.
: Update Sphinx version used to build the documentation to 4.2.0.
Patch by Maciej Olko.
: Add a new ârelevant PEPsâ section to the top of the
documentation for the  module. Patch by Alex Waygood.
: Add  argument to multiprocessing.log_to_stderr
function docs.
: Add protocol description to the
importlib.abc.TraversableResources documentation.
: Mention in the documentation of Built-in Exceptions that inheriting from multiple exception types in a
single subclass is not recommended due to possible memory layout
incompatibility.
: Add note about  in collections.abc.
: Add protocol description to the
importlib.abc.Traversable documentation.
: Add Programming FAQ entry explaining that int literal attribute
access requires either a space after or parentheses around the literal.

: Improve documentation for functools.singledispatch() and
functools.singledispatchmethod.

================================================================================

# Changelog - Documentation (Part 2)

: Amend the docs on GenericAlias objects to clarify that
non-container classes can also implement __class_getitem__. Patch
contributed by Alex Waygood.

: Update Sphinx version used to build the documentation to 4.2.0.
Patch by Maciej Olko.

: Add a new ârelevant PEPsâ section to the top of the
documentation for the  module. Patch by Alex Waygood.

: Add  argument to multiprocessing.log_to_stderr
function docs.

: Add protocol description to the
importlib.abc.TraversableResources documentation.

: Mention in the documentation of Built-in Exceptions that inheriting from multiple exception types in a
single subclass is not recommended due to possible memory layout
incompatibility.

: Add note about  in collections.abc.

: Add protocol description to the
importlib.abc.Traversable documentation.

: Add Programming FAQ entry explaining that int literal attribute
access requires either a space after or parentheses around the literal.

================================================================================

# Changelog - Tests (Part 1)

List:
: Add tests for scenarios in which
functools.singledispatchmethod is stacked on top of a method that
has already been wrapped by two other decorators. Patch by Alex Waygood.
: Add tests for dis.distb()
: Add tests to ensure that functools.singledispatchmethod
correctly wraps the attributes of the target function.
: PGO tests now pass when Python is built without test extension
modules.
: Add subtests for all  protocols in test_zoneinfo.
: Fix test_frozen_pickle in test_dataclasses to check all
 versions.
: test.libregrtest now raises the soft resource limit for
the maximum number of file descriptors when the default is too low for our
test suite as was often the case on macOS.
: Add more test cases for @functools.singledispatchmethod
when combined with @classmethod or @staticmethod.
: When libregrtest spawns a worker process, stderr is now written
into stdout to keep messages order. Use a single pipe for stdout and
stderr, rather than two pipes. Previously, messages were out of order
which made analysis of buildbot logs harder Patch by Victor Stinner.
: Fix test_tools.test_sundry() when Python is built out of tree:
fix how the freeze_modules.py tool locates the _freeze_module program.
Patch by Victor Stinner.
: Fix test_sys.test_stdlib_dir() when Python is built outside the
source tree: compare normalized paths. Patch by Victor Stinner.
: Fix
test_name_error_suggestions_do_not_trigger_for_too_many_locals() of
test_exceptions if a directory name contains âa1â (like
âPython-3.11.0a1â): use a stricter regular expression. Patch by Victor
Stinner.
: Rename  tests from test_sqlite to
test_sqlite3, and relocate them to Lib/test/test_sqlite3. Patch by
Erlend E. Aasland.

================================================================================

# Changelog - Tests (Part 2)

: Add tests for scenarios in which
functools.singledispatchmethod is stacked on top of a method that
has already been wrapped by two other decorators. Patch by Alex Waygood.

: Add tests for dis.distb()

: Add tests to ensure that functools.singledispatchmethod
correctly wraps the attributes of the target function.

: PGO tests now pass when Python is built without test extension
modules.

: Add subtests for all  protocols in test_zoneinfo.

: Fix test_frozen_pickle in test_dataclasses to check all
 versions.

: test.libregrtest now raises the soft resource limit for
the maximum number of file descriptors when the default is too low for our
test suite as was often the case on macOS.

: Add more test cases for @functools.singledispatchmethod
when combined with @classmethod or @staticmethod.

: When libregrtest spawns a worker process, stderr is now written
into stdout to keep messages order. Use a single pipe for stdout and
stderr, rather than two pipes. Previously, messages were out of order
which made analysis of buildbot logs harder Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 3)

: Fix test_tools.test_sundry() when Python is built out of tree:
fix how the freeze_modules.py tool locates the _freeze_module program.
Patch by Victor Stinner.

: Fix test_sys.test_stdlib_dir() when Python is built outside the
source tree: compare normalized paths. Patch by Victor Stinner.

: Fix
test_name_error_suggestions_do_not_trigger_for_too_many_locals() of
test_exceptions if a directory name contains âa1â (like
âPython-3.11.0a1â): use a stricter regular expression. Patch by Victor
Stinner.

: Rename  tests from test_sqlite to
test_sqlite3, and relocate them to Lib/test/test_sqlite3. Patch by
Erlend E. Aasland.

================================================================================

# Changelog - Build (Part 1)

List:
:  now uses values from configure script to build the
 extension module. Configure now detects util-linuxâs
, too.
: Fix warning of  and  usage in
_testembed.c
: Modules/Setup and Modules/makesetup have been improved.
The  file now contains working rules for all extensions. Outdated
comments have been removed. Rules defined by  track
dependencies correctly.
: The  and  implementation now require a
C99 compatible  and no longer ship with workarounds for missing
acosh, asinh, atanh, expm1, and log1p functions.
:  and  now track build dependencies on
all Python header files and module specific header files.
: Modules/Setup now use PY_CFLAGS_NODIST instead of
 to compile shared modules.
:  and _elementtree no longer define
obsolete macros HAVE_EXPAT_CONFIG_H and USE_PYEXPAT_CAPI.
XML_POOR_ENTROPY is now defined in expat_config.h.
:  no longer defines Py_BUILD_CORE_MODULE.
Instead every module, that uses the internal API, defines the macro.
: Fill in missing entries in Modules/Setup.
: Update sys.version to use  as fallback
information. Patch by Jeong YunWon.
: The  script now checks whether OpenSSL headers and
libraries provide required APIs. Most common APIs are verified. The check
detects outdated or missing OpenSSL. Failures do not stop configure.
: Fixed regression in handling of  and 
options where argparse.parse_known_args() could interpret an option
as one of the built-in command line argument, for example  for help.
: Building Python now requires a C99  header file
providing the following functions: copysign(), ,
isfinite(), , , . Patch by Victor
Stinner.
: Prevent    when running 
with recent versions of non-Apple clang.  Patch by David Bohman.
: Avoid linking libpython with libcrypt.

================================================================================

# Changelog - Build (Part 2)

:  now uses values from configure script to build the
 extension module. Configure now detects util-linuxâs
, too.

: Fix warning of  and  usage in
_testembed.c

: Modules/Setup and Modules/makesetup have been improved.
The  file now contains working rules for all extensions. Outdated
comments have been removed. Rules defined by  track
dependencies correctly.

: The  and  implementation now require a
C99 compatible  and no longer ship with workarounds for missing
acosh, asinh, atanh, expm1, and log1p functions.

:  and  now track build dependencies on
all Python header files and module specific header files.

: Modules/Setup now use PY_CFLAGS_NODIST instead of
 to compile shared modules.

:  and _elementtree no longer define
obsolete macros HAVE_EXPAT_CONFIG_H and USE_PYEXPAT_CAPI.
XML_POOR_ENTROPY is now defined in expat_config.h.

:  no longer defines Py_BUILD_CORE_MODULE.
Instead every module, that uses the internal API, defines the macro.

: Fill in missing entries in Modules/Setup.

: Update sys.version to use  as fallback
information. Patch by Jeong YunWon.

================================================================================

# Changelog - Build (Part 3)

: The  script now checks whether OpenSSL headers and
libraries provide required APIs. Most common APIs are verified. The check
detects outdated or missing OpenSSL. Failures do not stop configure.

: Fixed regression in handling of  and 
options where argparse.parse_known_args() could interpret an option
as one of the built-in command line argument, for example  for help.

: Building Python now requires a C99  header file
providing the following functions: copysign(), ,
isfinite(), , , . Patch by Victor
Stinner.

: Prevent    when running 
with recent versions of non-Apple clang.  Patch by David Bohman.

: Avoid linking libpython with libcrypt.

================================================================================

# Changelog - Windows

List:
: Update Tcl/Tk to 8.6.11, actually this time. The previous
update incorrectly included 8.6.10.
: venv now warns when the created environment may need to be
accessed at a different path, due to redirections, links or junctions. It
also now correctly installs or upgrades components when the alternate path
is required.
: Build SQLite SQLITE_OMIT_AUTOINIT on Windows. Patch by
Erlend E. Aasland.

: Update Tcl/Tk to 8.6.11, actually this time. The previous
update incorrectly included 8.6.10.

: venv now warns when the created environment may need to be
accessed at a different path, due to redirections, links or junctions. It
also now correctly installs or upgrades components when the alternate path
is required.

: Build SQLite SQLITE_OMIT_AUTOINIT on Windows. Patch by
Erlend E. Aasland.

================================================================================

# Changelog - macOS

List:
: Avoid tkinter file dialog failure on macOS 12 Monterey when
using the Tk 8.6.11 provided by python.org macOS installers. Patch by Marc
Culler of the Tk project.

: Avoid tkinter file dialog failure on macOS 12 Monterey when
using the Tk 8.6.11 provided by python.org macOS installers. Patch by Marc
Culler of the Tk project.

================================================================================

# Changelog - IDLE

List:
: Add context keywords âcaseâ and âmatchâ to completions list.

: Add context keywords âcaseâ and âmatchâ to completions list.

================================================================================

# Changelog - C API (Part 1)

List:
: PyType_FromSpec* now
copies the class name from the spec to a buffer owned by the class, so the
original can be safely deallocated. Patch by Petr Viktorin.
: The internal freelists for frame, float, list, dict, async
generators, and context objects can now be disabled.
: Exclude PyWeakref_GET_OBJECT() from the limited C API.
It never worked since the PyWeakReference structure is opaque
in the limited C API.
: Move the interpreteridobject.h header file from
 to Include/internal/. It only provides private functions.
Patch by Victor Stinner.
: The non-limited API files cellobject.h, classobject.h,
, funcobject.h, genobject.h and longintrepr.h
have been moved to the Include/cpython directory. Moreover, the
 header file was removed. These files must not be included
directly, as they are already included in : Include
Files. If they have been included directly, consider
including  instead. Patch by Victor Stinner.
: The following items are no longer available when
Py_LIMITED_API is defined:

PyMarshal_WriteLongToFile()
PyMarshal_WriteObjectToFile()
PyMarshal_ReadObjectFromString()
PyMarshal_WriteObjectToString()
the Py_MARSHAL_VERSION macro

================================================================================

# Changelog - C API (Part 2)

These are not part of the limited API.
Patch by Victor Stinner.

: Remove the pystrhex.h header file. It only contains private
functions. C extensions should only include the main <Python.h> header
file. Patch by Victor Stinner.
: Remove the Py_FORCE_DOUBLE() macro. It was used by the
Py_IS_INFINITY() macro. Patch by Victor Stinner.
: <Python.h> no longer includes the header files
<stdlib.h>, ,  and <string.h> when the
Py_LIMITED_API macro is set to 0x030b0000 (Python 3.11) or higher.
C extensions should explicitly include the header files after 
<Python.h>. Patch by Victor Stinner.
: Remove Py_UNICODE_COPY() and Py_UNICODE_FILL() macros,
deprecated since Python 3.3. Use PyUnicode_CopyCharacters() or
 ( string), and PyUnicode_Fill() functions
instead. Patch by Victor Stinner.
: Remove the following math macros using the  variable:

Py_ADJUST_ERANGE1()
Py_ADJUST_ERANGE2()
Py_OVERFLOWED()
Py_SET_ERANGE_IF_OVERFLOW()
Py_SET_ERRNO_ON_MATH_ERROR()

Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 3)

: Custom frozen modules (the array set to
PyImport_FrozenModules) are now treated as additions, rather than
replacing all the default frozen modules. Frozen stdlib modules can still
be disabled by setting the âcodeâ field of the custom array entry to NULL.
: Add new PyThreadState_EnterTracing(), and
PyThreadState_LeaveTracing() functions to the limited C API to
suspend and resume tracing and profiling. Patch by Victor Stinner.
: PyStructSequence_UnnamedField is added to the Stable
ABI.

: PyType_FromSpec* now
copies the class name from the spec to a buffer owned by the class, so the
original can be safely deallocated. Patch by Petr Viktorin.

: The internal freelists for frame, float, list, dict, async
generators, and context objects can now be disabled.

: Exclude PyWeakref_GET_OBJECT() from the limited C API.
It never worked since the PyWeakReference structure is opaque
in the limited C API.

: Move the interpreteridobject.h header file from
 to Include/internal/. It only provides private functions.
Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 4)

: The non-limited API files cellobject.h, classobject.h,
, funcobject.h, genobject.h and longintrepr.h
have been moved to the Include/cpython directory. Moreover, the
 header file was removed. These files must not be included
directly, as they are already included in : Include
Files. If they have been included directly, consider
including  instead. Patch by Victor Stinner.

: The following items are no longer available when
Py_LIMITED_API is defined:

List:
PyMarshal_WriteLongToFile()
PyMarshal_WriteObjectToFile()
PyMarshal_ReadObjectFromString()
PyMarshal_WriteObjectToString()
the Py_MARSHAL_VERSION macro

PyMarshal_WriteLongToFile()

PyMarshal_WriteObjectToFile()

PyMarshal_ReadObjectFromString()

PyMarshal_WriteObjectToString()

the Py_MARSHAL_VERSION macro

These are not part of the limited API.

Patch by Victor Stinner.

: Remove the pystrhex.h header file. It only contains private
functions. C extensions should only include the main <Python.h> header
file. Patch by Victor Stinner.

: Remove the Py_FORCE_DOUBLE() macro. It was used by the
Py_IS_INFINITY() macro. Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 5)

: <Python.h> no longer includes the header files
<stdlib.h>, ,  and <string.h> when the
Py_LIMITED_API macro is set to 0x030b0000 (Python 3.11) or higher.
C extensions should explicitly include the header files after 
<Python.h>. Patch by Victor Stinner.

: Remove Py_UNICODE_COPY() and Py_UNICODE_FILL() macros,
deprecated since Python 3.3. Use PyUnicode_CopyCharacters() or
 ( string), and PyUnicode_Fill() functions
instead. Patch by Victor Stinner.

: Remove the following math macros using the  variable:

List:
Py_ADJUST_ERANGE1()
Py_ADJUST_ERANGE2()
Py_OVERFLOWED()
Py_SET_ERANGE_IF_OVERFLOW()
Py_SET_ERRNO_ON_MATH_ERROR()

Py_SET_ERANGE_IF_OVERFLOW()

Py_SET_ERRNO_ON_MATH_ERROR()

Patch by Victor Stinner.

: Custom frozen modules (the array set to
PyImport_FrozenModules) are now treated as additions, rather than
replacing all the default frozen modules. Frozen stdlib modules can still
be disabled by setting the âcodeâ field of the custom array entry to NULL.

: Add new PyThreadState_EnterTracing(), and
PyThreadState_LeaveTracing() functions to the limited C API to
suspend and resume tracing and profiling. Patch by Victor Stinner.

: PyStructSequence_UnnamedField is added to the Stable
ABI.

================================================================================

# Changelog - Security (Part 1)

List:
: Replaced usage of tempfile.mktemp() with
TemporaryDirectory to avoid a potential race condition.
: Fix incorrect line numbers while tracing some failed patterns
in  statements. Patch by Charles Burkland.
: Add auditing events to the  module, and stop
raising code.__init__ events for every unmarshalled code object.
Directly instantiated code objects will continue to raise an event, and
audit event handlers should inspect or collect the raw marshal data. This
reduces a significant performance overhead when loading from 
files.
: Update the vendored copy of libexpat to 2.4.1 (from 2.2.8) to
get the fix for the CVE 2013-0340 âBillion Laughsâ vulnerability. This
copy is most used on Windows and macOS.
: Made the internal  function in 
sanitize input for presence of  and  characters to avoid
(unlikely) command injection.
: http.client now avoids infinitely reading potential HTTP
headers after a   status response from the server.

: Replaced usage of tempfile.mktemp() with
TemporaryDirectory to avoid a potential race condition.

: Fix incorrect line numbers while tracing some failed patterns
in  statements. Patch by Charles Burkland.

================================================================================

# Changelog - Security (Part 2)

: Add auditing events to the  module, and stop
raising code.__init__ events for every unmarshalled code object.
Directly instantiated code objects will continue to raise an event, and
audit event handlers should inspect or collect the raw marshal data. This
reduces a significant performance overhead when loading from 
files.

: Update the vendored copy of libexpat to 2.4.1 (from 2.2.8) to
get the fix for the CVE 2013-0340 âBillion Laughsâ vulnerability. This
copy is most used on Windows and macOS.

: Made the internal  function in 
sanitize input for presence of  and  characters to avoid
(unlikely) command injection.

: http.client now avoids infinitely reading potential HTTP
headers after a   status response from the server.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: The number of hardware branches per instruction dispatch is
reduced from two to one by adding a special instruction for tracing. Patch
by Mark Shannon.
: Add a deallocator to the bool type to detect refcount bugs in C
extensions which call Py_DECREF(Py_True) or Py_DECREF(Py_False) by
mistake. Detect also refcount bugs when the empty tuple singleton or the
Unicode empty string singleton is destroyed by mistake. Patch by Victor
Stinner.
: sum() was further optimised for summing up single digit
integers.
: Update Unicode databases to Unicode 14.0.0.
: Fix deepcopying of types.GenericAlias objects.
: int.to_bytes() and int.from_bytes() now take a
default value of  for the  argument.
int.to_bytes() also takes a default value of  for the
 argument.
: Release the GIL while performing  system calls on
arbitrary file descriptors. In particular, this affects os.isatty(),
os.device_encoding() and io.TextIOWrapper. By extension,
 in text mode is also affected. This change solves a
deadlock in os.isatty(). Patch by Vincent Michel in .
: Added fallback to extension modules with â.slâ suffix on HP-UX
: Fix issue where Protocol.__init__ raises RecursionError
when itâs called directly or via . Patch provided by Yurii
Karabas.
: The deallocator function of the BaseException type now
uses the trashcan mechanism to prevent stack overflow. For example, when a
RecursionError instance is raised, it can be linked to another
RecursionError through the __context__ attribute or the
__traceback__ attribute, and then a chain of exceptions is created.
When the chain is destroyed, nested deallocator function calls can crash
with a stack overflow if the chain is too long compared to the available
stack memory. Patch by Victor Stinner.
: Fix PyAiter_Check to only check for the __anext__ presence (not
for __aiter__). Rename PyAiter_Check to PyAIter_Check, PyObject_GetAiter
-> PyObject_GetAIter.
bpo-1514420: Interpreter no longer attempts to open files with names in
angle brackets (like â<string>â or â<stdin>â) when formatting an
exception.
: Match C and Python code formatting of unprintable exceptions
and exceptions in the  module.
: , , codecs.open() and
fileinput.FileInput no longer accept  (âuniversal
newlineâ) in the file mode. This flag was deprecated since Python 3.3.
Patch by Victor Stinner.
: When the interpreter renders an exception, its name now has a
complete qualname. Previously only the class name was concatenated to the
module name, which sometimes resulted in an incorrect full name being
displayed.
(This issue impacted only the C code exception rendering, the
 module was using qualname already).

================================================================================

# Changelog - Core and Builtins (Part 2)

: List sorting now uses the merge-ordering strategy from Munro
and Wildâs powersort(). Unlike the former strategy, this is provably
near-optimal in the entropy of the distribution of run lengths. Most uses
of list.sort() probably wonât see a significant time difference, but
may see significant improvements in cases where the former strategy was
exceptionally poor. However, as these are all fast linear-time
approximations to a problem thatâs inherently at best quadratic-time to
solve truly optimally, itâs also possible to contrive cases where the
former strategy did better.
: Compiler now removes trailing unused constants from co_consts.
: Add a new command line option, â-X frozen_modules=[on|off]â to
opt out of (or into) using optional frozen modules.  This defaults to âonâ
(or âoffâ if itâs running out of the source tree).
: In , release GIL during , ,
and  syscalls made by os.DirEntry.stat(). Patch by
StanisÅaw Skonieczny.
: Fixed pickling of range iterators that iterated for over
 times.
: A SyntaxError is now raised when trying to delete
. Patch by Donghee Na.
: Implement  and  methods for
anext_awaitable objects. Patch by Pablo Galindo.
: Fix a race in WeakKeyDictionary, WeakValueDictionary and
WeakSet when two threads attempt to commit the last pending removal. This
fixes asyncio.create_task and fixes a data loss in asyncio.run where
shutdown_asyncgens is not run
: Implement the __bytes__() special method on the
 type, so a bytes object   passes an isinstance(b,
typing.SupportsBytes) check.
: Implement the __complex__() special method on the
 type, so a complex number  passes an isinstance(z,
typing.SupportsComplex) check.
: Fixed a corner case bug where the result of
float.fromhex('0x.8p-1074') was rounded the wrong way.
: Refine the syntax error for trailing commas in import
statements. Patch by Pablo Galindo.
: Specialize the BINARY_ADD instruction using the PEP 659
machinery. Adds five new instructions:

================================================================================

# Changelog - Core and Builtins (Part 3)

BINARY_ADD_ADAPTIVE
BINARY_ADD_FLOAT
BINARY_ADD_INT
BINARY_ADD_UNICODE
BINARY_ADD_UNICODE_INPLACE_FAST


: Fix some edge cases of  string representation in
the REPL. Patch by Pablo Galindo.
: Class version tags are no longer recycled.
This means that a version tag serves as a unique identifier for the state
of a class. We rely on this for effective specialization of the LOAD_ATTR
and other instructions.

: Restore behaviour of complex exponentiation with integer-valued
exponent of type  or .
: A debug variable PYTHONDUMPREFSFILE is added for
creating a dump file which is generated by --with-trace-refs.
Patch by Donghee Na.
: Add five superinstructions for PEP 659 quickening:

LOAD_FAST LOAD_FAST
STORE_FAST LOAD_FAST
LOAD_FAST LOAD_CONST
LOAD_CONST LOAD_FAST
STORE_FAST STORE_FAST


: Initial implementation of adaptive specialization of
LOAD_METHOD. The following specialized forms were added:

LOAD_METHOD_CACHED
LOAD_METHOD_MODULE
LOAD_METHOD_CLASS

================================================================================

# Changelog - Core and Builtins (Part 4)


: Specialization stats are always collected in debug builds.
: Correct the ast locations of f-strings with format specs and
repeated expressions. Patch by Pablo Galindo
: Remove the loop from the bytecode interpreter. All instructions
end with a DISPATCH macro, so the loop is now redundant.
: Remove switch statement for interpreter loop when using
computed gotos. This makes sure that we only have one dispatch table in
the interpreter.
: Deprecate the old trashcan macros
(Py_TRASHCAN_SAFE_BEGIN/Py_TRASHCAN_SAFE_END). They should be
replaced by the new macros Py_TRASHCAN_BEGIN and Py_TRASHCAN_END.
: Use new trashcan macros (Py_TRASHCAN_BEGIN/END) in
frameobject.c instead of the old ones (Py_TRASHCAN_SAFE_BEGIN/END).
: Fix segmentation fault with deep recursion when cleaning method
objects. Patch by Augusto Goulart and Pablo Galindo.
: Fix bug where PyErr_SetObject hangs when the current
exception has a cycle in its context chain.
: Fix reference leaks in the error paths of update_bases()
and __build_class__. Patch by Pablo Galindo.
: Initial implementation of adaptive specialization of STORE_ATTR
Three specialized forms of STORE_ATTR are added:

================================================================================

# Changelog - Core and Builtins (Part 5)

STORE_ATTR_SLOT
STORE_ATTR_SPLIT_KEYS
STORE_ATTR_WITH_HINT

================================================================================

# Changelog - Core and Builtins (Part 6)


: Fixed a bug that was causing the parser to raise an incorrect
custom SyntaxError for invalid âifâ expressions. Patch by Pablo
Galindo.
: Create instance dictionaries (__dict__) eagerly, to improve
regularity of object layout and assist specialization.
: Improve syntax errors for if expressions. Patch by Miguel Brito
: Generalize the invalid legacy statement custom error message
(like the one generated when âprintâ is called without parentheses) to
include more generic expressions. Patch by Pablo Galindo
: Rename types.Union to types.UnionType.
: Expose specialization stats in python via
_opcode.get_specialization_stats().
: Improve AttributeError on circular imports of submodules.
: Fix undefined behaviour in complex object exponentiation.
: Support  types in parameter substitution in the
union type.
: Add ability to serialise types.Union objects. Patch
provided by Yurii Karabas.
: Parameter substitution of the union type with wrong types now
raises  instead of returning NotImplemented.
: Update property_descr_set to use vectorcall if possible.
Patch by Donghee Na.
: Add __module__ to types.Union. This also fixes
types.Union issues with typing.Annotated. Patch provided by Yurii
Karabas.
: Include the name of the type in unset __slots__ attribute
errors. Patch by Pablo Galindo
: Donât include a missing attribute with the same name as the
failing one when offering suggestions for missing attributes. Patch by
Pablo Galindo
: Fix the hash of the union type: it no longer depends on the
order of arguments.
: Collapse union of equal types. E.g. the result of   
is now . Fix comparison of the union type with non-hashable
objects. E.g.      no longer raises a TypeError.
: On Windows, os.urandom(): uses BCryptGenRandom API
instead of CryptGenRandom API which is deprecated from Microsoft Windows
API. Patch by Donghee Na.
: Convert  to type(None) in the union type
constructor.
: Implement adaptive specialization for BINARY_SUBSCR
Three specialized forms of BINARY_SUBSCR are added:

================================================================================

# Changelog - Core and Builtins (Part 7)

BINARY_SUBSCR_LIST_INT
BINARY_SUBSCR_TUPLE_INT
BINARY_SUBSCR_DICT

================================================================================

# Changelog - Core and Builtins (Part 8)


: Mapping patterns in  statements with two or more equal
literal keys will now raise a SyntaxError at compile-time.
: Fix __instancecheck__ and __subclasscheck__ for the
union type.
: The @classmethod decorator can now wrap other
classmethod-like descriptors.
: Tuned the string-searching algorithm of fastsearch.h to have a
shorter inner loop for most cases.
: All necessary data for executing a Python function (local
variables, stack, etc) is now kept in a per-thread stack. Frame objects
are lazily allocated on demand. This increases performance by about 7% on
the standard benchmark suite. Introspection and debugging are unaffected
as frame objects are always available when needed. Patch by Mark Shannon.
: The threading debug (PYTHONTHREADDEBUG environment
variable) is deprecated in Python 3.10 and will be removed in Python 3.12.
This feature requires a debug build of Python. Patch by Victor Stinner.
: An obsolete internal cache of shared object file handles added
in 1995 that attempted, but did not guarantee, that a .so would not be
dlopenâed twice to work around flaws in mid-1990s posix-ish operating
systems has been removed from dynload_shlib.c.
:  now searches for type parameters in
types.Union objects. get_type_hints will also properly resolve
annotations with nested types.Union objects. Patch provided by Yurii
Karabas.
: Code objects can now provide the column information for
instructions when available. This is levaraged during traceback printing
to show the expressions responsible for errors.
Contributed by Pablo Galindo, Batuhan Taskaya and Ammar Askar as part of
.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Remove uses of PyObject_GC_Del() in error path when
initializing types.GenericAlias.
: Fix a memory consumption and copying performance regression in
earlier 3.10 beta releases if someone used an output buffer larger than
4GiB with zlib.decompress on input data that expands that large.
: Heap types with the Py_TPFLAGS_IMMUTABLETYPE flag
can now inherit the  vectorcall protocol.  Previously, this was
only possible for static types.  Patch by Erlend E.
Aasland.
: Implement GC methods for types.Union to break reference
cycles and prevent memory leaks.
: Add __parameters__ attribute and __getitem__ operator
to types.Union. Patch provided by Yurii Karabas.
: Remove the pass-through for  of
weakref.proxy objects to prevent unintended consequences when the
original referred object dies while the proxy is part of a hashable
object. Patch by Pablo Galindo.
: Fix a crash in types.Union objects when creating a union of
an object with bad __module__ field.
: Modules will always have a dictionary, even when created by
types.ModuleType.__new__()
: Fix ltrace functionality when exceptions are raised. Patch by
Pablo Galindo
: A  is now raised instead of an
AttributeError in  and  
statements for objects which do not support the context manager or
asynchronous context manager protocols correspondingly.
: Make sure that the line number is set when entering a
comprehension scope. This ensures that backtraces including generator
expressions show the correct line number.
: Improve the syntax error when mixing positional and keyword
patterns. Patch by Pablo Galindo.
: Fix error location information for tokenizer errors raised on
initialization of the tokenizer. Patch by Pablo Galindo.
: Fix a possible crash in the tokenizer when raising syntax
errors for unclosed strings. Patch by Pablo Galindo.
: Exact integer exponentiation (like  or  )
with a small exponent is much faster, due to reducing overhead in such
cases.
: Directly imported objects and modules (through import and from
import statements) donât generate LOAD_METHOD/CALL_METHOD for
directly accessed objects on their namespace. They now use the regular
/CALL_FUNCTION.
: Implement adaptive specialization for LOAD_GLOBAL
Two specialized forms of LOAD_GLOBAL are added:

================================================================================

# Changelog - Core and Builtins (Part 10)

LOAD_GLOBAL_MODULE
LOAD_GLOBAL_BUILTIN


: Improve syntax errors for invalid âasâ targets. Patch by Pablo
Galindo
: Fix an edge case when displaying text from files with encoding
in syntax errors. Patch by Pablo Galindo.
: Initial implementation of adaptive specialization of LOAD_ATTR
Four specialized forms of LOAD_ATTR are added:

LOAD_ATTR_SLOT
LOAD_ATTR_SPLIT_KEYS
LOAD_ATTR_WITH_HINT
LOAD_ATTR_MODULE

================================================================================

# Changelog - Core and Builtins (Part 11)


: Fix a regression when identifying incorrect characters in
syntax errors. Patch by Pablo Galindo
: Computation of the offsets of cell variables is done in the
compiler instead of at runtime. This reduces the overhead of handling cell
and free variables, especially in the case where a variable is both an
argument and cell variable.
: Improve tokenizer error with improved locations. Patch by Pablo
Galindo.
: Fix a crash in the  module that happened when the
garbage collector clears sqlite.Statement objects. Patch by Pablo
Galindo
: Improve error message for  blocks without  or
 blocks. Patch by Pablo Galindo.
: Constructors of subclasses of some builtin classes (e.g.
, , ) no longer accept
arbitrary keyword arguments. [reverted in 3.11a4] Subclass of 
can now define a  method with additional keyword parameters
without overriding also __init__().
: Improve Unicode support in non-UTF locales on Oracle Solaris.
This issue does not affect other Solaris systems.
: A new opcode MAKE_CELL has been added that effectively moves
some of the work done on function entry into the compiler and into the
eval loop.  In addition to creating the required cell objects, the new
opcode converts relevant arguments (and other locals) to cell variables on
function entry.
: Fix a regression in  when a metaclass raises an
exception. The C function type_new() must properly report the
exception when a metaclass constructor raises an exception and the winner
class is not the metaclass. Patch by Victor Stinner.
: Avoid side effects of checking for specialized syntax errors in
the REPL that was causing it to ask for extra tokens after a syntax error
had been detected. Patch by Pablo Galindo
: PyCodeObject gained co_fastlocalnames and
co_fastlocalkinds as the authoritative source of fast locals info.
Marshaled code objects have changed accordingly.
: Fix a crash at Python exit when a deallocator function removes
the last strong reference to a heap type. Patch by Victor Stinner.
: Implement quickening in the interpreter. This offers no
advantages as yet, but is an enabler of future optimizations. See PEP 659
for full explanation.
: The parser doesnât report generic syntax errors that happen in
a position further away that the one it reached in the first pass. Patch
by Pablo Galindo
: Fix error message in the parser involving keyword arguments
with invalid expressions. Patch by Pablo Galindo
: String caches in  are now subinterpreter
compatible.
: Fixed a crash in the parser that manifest when raising
tokenizer errors when an existing exception was present. Patch by Pablo
Galindo.
: Move âfastâ locals and other variables from the frame object to
a per-thread datastack.
: Fix incorrect dictkeys_reversed and dictitems_reversed function
signatures in C code, which broke webassembly builds.
: Improve str.__getitem__() error message
: Add CALL_METHOD_KW opcode to speed up method calls with
keyword arguments.  Idea originated from PyPy.  A side effect is executing
CALL_METHOD is now branchless in the evaluation loop.
: Compiler now optimizes simple C-style formatting with literal
format containing only format codes %s, %r and %a by converting them to
f-string expressions.
: Correct the syntax error message regarding multiple exception
types to not refer to âexception groupsâ. Patch by Pablo Galindo
: The parser will prioritize tokenizer errors over custom syntax
errors when raising exceptions. Patch by Pablo Galindo.
: âZero costâ exception handling.

================================================================================

# Changelog - Core and Builtins (Part 12)

Uses a lookup table to determine how to handle exceptions.
Removes SETUP_FINALLY and POP_TOP block instructions, eliminating the runtime overhead of try statements.
Reduces the size of the frame object by about 60%.

Patch by Mark Shannon

================================================================================

# Changelog - Core and Builtins (Part 13)

: Document the signature and  argument in the
docstring of the new  builtin.
: Emit a deprecation warning if the numeric literal is
immediately followed by one of keywords: and, else, for, if, in, is, or.
Raise a syntax error with more informative message if it is immediately
followed by other keyword or identifier.
: Add native_thread_id to PyThreadState. Patch by Gabriele N.
Tornetta.
: Compute cell offsets relative to locals in compiler. Allows the
interpreter to treats locals and cells a single array, which is slightly
more efficient. Also make the LOAD_CLOSURE opcode an alias for LOAD_FAST.
Preserving LOAD_CLOSURE helps keep bytecode a bit more readable.
: More accurate error messages for access of unbound locals or
free vars.
: Fix a confusing error message in str.format().
: When compiling  objects with recursive
references through , the interpreter doesnât crash anymore
instead it raises a RecursionError.
: Fix crash when using passing a non-exception to a generatorâs
 method. Patch by Noah Oxer
: Asynchronous comprehensions are now allowed inside
comprehensions in asynchronous functions.  Outer comprehensions implicitly
become asynchronous.

================================================================================

# Changelog - Core and Builtins (Part 14)

: The number of hardware branches per instruction dispatch is
reduced from two to one by adding a special instruction for tracing. Patch
by Mark Shannon.

: Add a deallocator to the bool type to detect refcount bugs in C
extensions which call Py_DECREF(Py_True) or Py_DECREF(Py_False) by
mistake. Detect also refcount bugs when the empty tuple singleton or the
Unicode empty string singleton is destroyed by mistake. Patch by Victor
Stinner.

: sum() was further optimised for summing up single digit
integers.

: Update Unicode databases to Unicode 14.0.0.

: Fix deepcopying of types.GenericAlias objects.

: int.to_bytes() and int.from_bytes() now take a
default value of  for the  argument.
int.to_bytes() also takes a default value of  for the
 argument.

: Release the GIL while performing  system calls on
arbitrary file descriptors. In particular, this affects os.isatty(),
os.device_encoding() and io.TextIOWrapper. By extension,
 in text mode is also affected. This change solves a
deadlock in os.isatty(). Patch by Vincent Michel in .

: Added fallback to extension modules with â.slâ suffix on HP-UX

================================================================================

# Changelog - Core and Builtins (Part 15)

: Fix issue where Protocol.__init__ raises RecursionError
when itâs called directly or via . Patch provided by Yurii
Karabas.

: The deallocator function of the BaseException type now
uses the trashcan mechanism to prevent stack overflow. For example, when a
RecursionError instance is raised, it can be linked to another
RecursionError through the __context__ attribute or the
__traceback__ attribute, and then a chain of exceptions is created.
When the chain is destroyed, nested deallocator function calls can crash
with a stack overflow if the chain is too long compared to the available
stack memory. Patch by Victor Stinner.

: Fix PyAiter_Check to only check for the __anext__ presence (not
for __aiter__). Rename PyAiter_Check to PyAIter_Check, PyObject_GetAiter
-> PyObject_GetAIter.

bpo-1514420: Interpreter no longer attempts to open files with names in
angle brackets (like â<string>â or â<stdin>â) when formatting an
exception.

: Match C and Python code formatting of unprintable exceptions
and exceptions in the  module.

================================================================================

# Changelog - Core and Builtins (Part 16)

: , , codecs.open() and
fileinput.FileInput no longer accept  (âuniversal
newlineâ) in the file mode. This flag was deprecated since Python 3.3.
Patch by Victor Stinner.

: When the interpreter renders an exception, its name now has a
complete qualname. Previously only the class name was concatenated to the
module name, which sometimes resulted in an incorrect full name being
displayed.

(This issue impacted only the C code exception rendering, the
 module was using qualname already).

: List sorting now uses the merge-ordering strategy from Munro
and Wildâs powersort(). Unlike the former strategy, this is provably
near-optimal in the entropy of the distribution of run lengths. Most uses
of list.sort() probably wonât see a significant time difference, but
may see significant improvements in cases where the former strategy was
exceptionally poor. However, as these are all fast linear-time
approximations to a problem thatâs inherently at best quadratic-time to
solve truly optimally, itâs also possible to contrive cases where the
former strategy did better.

: Compiler now removes trailing unused constants from co_consts.

================================================================================

# Changelog - Core and Builtins (Part 17)

: Add a new command line option, â-X frozen_modules=[on|off]â to
opt out of (or into) using optional frozen modules.  This defaults to âonâ
(or âoffâ if itâs running out of the source tree).

: In , release GIL during , ,
and  syscalls made by os.DirEntry.stat(). Patch by
StanisÅaw Skonieczny.

: Fixed pickling of range iterators that iterated for over
 times.

: A SyntaxError is now raised when trying to delete
. Patch by Donghee Na.

: Implement  and  methods for
anext_awaitable objects. Patch by Pablo Galindo.

: Fix a race in WeakKeyDictionary, WeakValueDictionary and
WeakSet when two threads attempt to commit the last pending removal. This
fixes asyncio.create_task and fixes a data loss in asyncio.run where
shutdown_asyncgens is not run

: Implement the __bytes__() special method on the
 type, so a bytes object   passes an isinstance(b,
typing.SupportsBytes) check.

: Implement the __complex__() special method on the
 type, so a complex number  passes an isinstance(z,
typing.SupportsComplex) check.

: Fixed a corner case bug where the result of
float.fromhex('0x.8p-1074') was rounded the wrong way.

================================================================================

# Changelog - Core and Builtins (Part 18)

: Refine the syntax error for trailing commas in import
statements. Patch by Pablo Galindo.

: Specialize the BINARY_ADD instruction using the PEP 659
machinery. Adds five new instructions:

List:
BINARY_ADD_ADAPTIVE
BINARY_ADD_FLOAT
BINARY_ADD_INT
BINARY_ADD_UNICODE
BINARY_ADD_UNICODE_INPLACE_FAST

BINARY_ADD_UNICODE_INPLACE_FAST

: Fix some edge cases of  string representation in
the REPL. Patch by Pablo Galindo.

: Class version tags are no longer recycled.

This means that a version tag serves as a unique identifier for the state
of a class. We rely on this for effective specialization of the LOAD_ATTR
and other instructions.

: Restore behaviour of complex exponentiation with integer-valued
exponent of type  or .

: A debug variable PYTHONDUMPREFSFILE is added for
creating a dump file which is generated by --with-trace-refs.
Patch by Donghee Na.

: Add five superinstructions for PEP 659 quickening:

List:
LOAD_FAST LOAD_FAST
STORE_FAST LOAD_FAST
LOAD_FAST LOAD_CONST
LOAD_CONST LOAD_FAST
STORE_FAST STORE_FAST

STORE_FAST STORE_FAST

: Initial implementation of adaptive specialization of
LOAD_METHOD. The following specialized forms were added:

================================================================================

# Changelog - Core and Builtins (Part 19)

List:
LOAD_METHOD_CACHED
LOAD_METHOD_MODULE
LOAD_METHOD_CLASS

: Specialization stats are always collected in debug builds.

: Correct the ast locations of f-strings with format specs and
repeated expressions. Patch by Pablo Galindo

: Remove the loop from the bytecode interpreter. All instructions
end with a DISPATCH macro, so the loop is now redundant.

: Remove switch statement for interpreter loop when using
computed gotos. This makes sure that we only have one dispatch table in
the interpreter.

: Deprecate the old trashcan macros
(Py_TRASHCAN_SAFE_BEGIN/Py_TRASHCAN_SAFE_END). They should be
replaced by the new macros Py_TRASHCAN_BEGIN and Py_TRASHCAN_END.

: Use new trashcan macros (Py_TRASHCAN_BEGIN/END) in
frameobject.c instead of the old ones (Py_TRASHCAN_SAFE_BEGIN/END).

: Fix segmentation fault with deep recursion when cleaning method
objects. Patch by Augusto Goulart and Pablo Galindo.

: Fix bug where PyErr_SetObject hangs when the current
exception has a cycle in its context chain.

: Fix reference leaks in the error paths of update_bases()
and __build_class__. Patch by Pablo Galindo.

: Initial implementation of adaptive specialization of STORE_ATTR

================================================================================

# Changelog - Core and Builtins (Part 20)

Three specialized forms of STORE_ATTR are added:

List:
STORE_ATTR_SLOT
STORE_ATTR_SPLIT_KEYS
STORE_ATTR_WITH_HINT

STORE_ATTR_SPLIT_KEYS

: Fixed a bug that was causing the parser to raise an incorrect
custom SyntaxError for invalid âifâ expressions. Patch by Pablo
Galindo.

: Create instance dictionaries (__dict__) eagerly, to improve
regularity of object layout and assist specialization.

: Improve syntax errors for if expressions. Patch by Miguel Brito

: Generalize the invalid legacy statement custom error message
(like the one generated when âprintâ is called without parentheses) to
include more generic expressions. Patch by Pablo Galindo

: Rename types.Union to types.UnionType.

: Expose specialization stats in python via
_opcode.get_specialization_stats().

: Improve AttributeError on circular imports of submodules.

: Fix undefined behaviour in complex object exponentiation.

: Support  types in parameter substitution in the
union type.

: Add ability to serialise types.Union objects. Patch
provided by Yurii Karabas.

: Parameter substitution of the union type with wrong types now
raises  instead of returning NotImplemented.

================================================================================

# Changelog - Core and Builtins (Part 21)

: Update property_descr_set to use vectorcall if possible.
Patch by Donghee Na.

: Add __module__ to types.Union. This also fixes
types.Union issues with typing.Annotated. Patch provided by Yurii
Karabas.

: Include the name of the type in unset __slots__ attribute
errors. Patch by Pablo Galindo

: Donât include a missing attribute with the same name as the
failing one when offering suggestions for missing attributes. Patch by
Pablo Galindo

: Fix the hash of the union type: it no longer depends on the
order of arguments.

: Collapse union of equal types. E.g. the result of   
is now . Fix comparison of the union type with non-hashable
objects. E.g.      no longer raises a TypeError.

: On Windows, os.urandom(): uses BCryptGenRandom API
instead of CryptGenRandom API which is deprecated from Microsoft Windows
API. Patch by Donghee Na.

: Convert  to type(None) in the union type
constructor.

: Implement adaptive specialization for BINARY_SUBSCR

Three specialized forms of BINARY_SUBSCR are added:

List:
BINARY_SUBSCR_LIST_INT
BINARY_SUBSCR_TUPLE_INT
BINARY_SUBSCR_DICT

BINARY_SUBSCR_LIST_INT

BINARY_SUBSCR_TUPLE_INT

================================================================================

# Changelog - Core and Builtins (Part 22)

: Mapping patterns in  statements with two or more equal
literal keys will now raise a SyntaxError at compile-time.

: Fix __instancecheck__ and __subclasscheck__ for the
union type.

: The @classmethod decorator can now wrap other
classmethod-like descriptors.

: Tuned the string-searching algorithm of fastsearch.h to have a
shorter inner loop for most cases.

: All necessary data for executing a Python function (local
variables, stack, etc) is now kept in a per-thread stack. Frame objects
are lazily allocated on demand. This increases performance by about 7% on
the standard benchmark suite. Introspection and debugging are unaffected
as frame objects are always available when needed. Patch by Mark Shannon.

: The threading debug (PYTHONTHREADDEBUG environment
variable) is deprecated in Python 3.10 and will be removed in Python 3.12.
This feature requires a debug build of Python. Patch by Victor Stinner.

: An obsolete internal cache of shared object file handles added
in 1995 that attempted, but did not guarantee, that a .so would not be
dlopenâed twice to work around flaws in mid-1990s posix-ish operating
systems has been removed from dynload_shlib.c.

================================================================================

# Changelog - Core and Builtins (Part 23)

:  now searches for type parameters in
types.Union objects. get_type_hints will also properly resolve
annotations with nested types.Union objects. Patch provided by Yurii
Karabas.

: Code objects can now provide the column information for
instructions when available. This is levaraged during traceback printing
to show the expressions responsible for errors.

Contributed by Pablo Galindo, Batuhan Taskaya and Ammar Askar as part of
.

: Remove uses of PyObject_GC_Del() in error path when
initializing types.GenericAlias.

: Fix a memory consumption and copying performance regression in
earlier 3.10 beta releases if someone used an output buffer larger than
4GiB with zlib.decompress on input data that expands that large.

: Heap types with the Py_TPFLAGS_IMMUTABLETYPE flag
can now inherit the  vectorcall protocol.  Previously, this was
only possible for static types.  Patch by Erlend E.
Aasland.

: Implement GC methods for types.Union to break reference
cycles and prevent memory leaks.

: Add __parameters__ attribute and __getitem__ operator
to types.Union. Patch provided by Yurii Karabas.

================================================================================

# Changelog - Core and Builtins (Part 24)

: Remove the pass-through for  of
weakref.proxy objects to prevent unintended consequences when the
original referred object dies while the proxy is part of a hashable
object. Patch by Pablo Galindo.

: Fix a crash in types.Union objects when creating a union of
an object with bad __module__ field.

: Modules will always have a dictionary, even when created by
types.ModuleType.__new__()

: Fix ltrace functionality when exceptions are raised. Patch by
Pablo Galindo

: A  is now raised instead of an
AttributeError in  and  
statements for objects which do not support the context manager or
asynchronous context manager protocols correspondingly.

: Make sure that the line number is set when entering a
comprehension scope. This ensures that backtraces including generator
expressions show the correct line number.

: Improve the syntax error when mixing positional and keyword
patterns. Patch by Pablo Galindo.

: Fix error location information for tokenizer errors raised on
initialization of the tokenizer. Patch by Pablo Galindo.

: Fix a possible crash in the tokenizer when raising syntax
errors for unclosed strings. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 25)

: Exact integer exponentiation (like  or  )
with a small exponent is much faster, due to reducing overhead in such
cases.

: Directly imported objects and modules (through import and from
import statements) donât generate LOAD_METHOD/CALL_METHOD for
directly accessed objects on their namespace. They now use the regular
/CALL_FUNCTION.

: Implement adaptive specialization for LOAD_GLOBAL

Two specialized forms of LOAD_GLOBAL are added:

List:
LOAD_GLOBAL_MODULE
LOAD_GLOBAL_BUILTIN

: Improve syntax errors for invalid âasâ targets. Patch by Pablo
Galindo

: Fix an edge case when displaying text from files with encoding
in syntax errors. Patch by Pablo Galindo.

: Initial implementation of adaptive specialization of LOAD_ATTR

Four specialized forms of LOAD_ATTR are added:

List:
LOAD_ATTR_SLOT
LOAD_ATTR_SPLIT_KEYS
LOAD_ATTR_WITH_HINT
LOAD_ATTR_MODULE

: Fix a regression when identifying incorrect characters in
syntax errors. Patch by Pablo Galindo

: Computation of the offsets of cell variables is done in the
compiler instead of at runtime. This reduces the overhead of handling cell
and free variables, especially in the case where a variable is both an
argument and cell variable.

================================================================================

# Changelog - Core and Builtins (Part 26)

: Improve tokenizer error with improved locations. Patch by Pablo
Galindo.

: Fix a crash in the  module that happened when the
garbage collector clears sqlite.Statement objects. Patch by Pablo
Galindo

: Improve error message for  blocks without  or
 blocks. Patch by Pablo Galindo.

: Constructors of subclasses of some builtin classes (e.g.
, , ) no longer accept
arbitrary keyword arguments. [reverted in 3.11a4] Subclass of 
can now define a  method with additional keyword parameters
without overriding also __init__().

: Improve Unicode support in non-UTF locales on Oracle Solaris.
This issue does not affect other Solaris systems.

: A new opcode MAKE_CELL has been added that effectively moves
some of the work done on function entry into the compiler and into the
eval loop.  In addition to creating the required cell objects, the new
opcode converts relevant arguments (and other locals) to cell variables on
function entry.

: Fix a regression in  when a metaclass raises an
exception. The C function type_new() must properly report the
exception when a metaclass constructor raises an exception and the winner
class is not the metaclass. Patch by Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 27)

: Avoid side effects of checking for specialized syntax errors in
the REPL that was causing it to ask for extra tokens after a syntax error
had been detected. Patch by Pablo Galindo

: PyCodeObject gained co_fastlocalnames and
co_fastlocalkinds as the authoritative source of fast locals info.
Marshaled code objects have changed accordingly.

: Fix a crash at Python exit when a deallocator function removes
the last strong reference to a heap type. Patch by Victor Stinner.

: Implement quickening in the interpreter. This offers no
advantages as yet, but is an enabler of future optimizations. See PEP 659
for full explanation.

: The parser doesnât report generic syntax errors that happen in
a position further away that the one it reached in the first pass. Patch
by Pablo Galindo

: Fix error message in the parser involving keyword arguments
with invalid expressions. Patch by Pablo Galindo

: String caches in  are now subinterpreter
compatible.

: Fixed a crash in the parser that manifest when raising
tokenizer errors when an existing exception was present. Patch by Pablo
Galindo.

: Move âfastâ locals and other variables from the frame object to
a per-thread datastack.

================================================================================

# Changelog - Core and Builtins (Part 28)

: Fix incorrect dictkeys_reversed and dictitems_reversed function
signatures in C code, which broke webassembly builds.

: Improve str.__getitem__() error message

: Add CALL_METHOD_KW opcode to speed up method calls with
keyword arguments.  Idea originated from PyPy.  A side effect is executing
CALL_METHOD is now branchless in the evaluation loop.

: Compiler now optimizes simple C-style formatting with literal
format containing only format codes %s, %r and %a by converting them to
f-string expressions.

: Correct the syntax error message regarding multiple exception
types to not refer to âexception groupsâ. Patch by Pablo Galindo

: The parser will prioritize tokenizer errors over custom syntax
errors when raising exceptions. Patch by Pablo Galindo.

: âZero costâ exception handling.

List:
Uses a lookup table to determine how to handle exceptions.
Removes SETUP_FINALLY and POP_TOP block instructions, eliminating the runtime overhead of try statements.
Reduces the size of the frame object by about 60%.

Uses a lookup table to determine how to handle exceptions.

Removes SETUP_FINALLY and POP_TOP block instructions, eliminating the runtime overhead of try statements.

================================================================================

# Changelog - Core and Builtins (Part 29)

Reduces the size of the frame object by about 60%.

Patch by Mark Shannon

: Document the signature and  argument in the
docstring of the new  builtin.

: Emit a deprecation warning if the numeric literal is
immediately followed by one of keywords: and, else, for, if, in, is, or.
Raise a syntax error with more informative message if it is immediately
followed by other keyword or identifier.

: Add native_thread_id to PyThreadState. Patch by Gabriele N.
Tornetta.

: Compute cell offsets relative to locals in compiler. Allows the
interpreter to treats locals and cells a single array, which is slightly
more efficient. Also make the LOAD_CLOSURE opcode an alias for LOAD_FAST.
Preserving LOAD_CLOSURE helps keep bytecode a bit more readable.

: More accurate error messages for access of unbound locals or
free vars.

: Fix a confusing error message in str.format().

: When compiling  objects with recursive
references through , the interpreter doesnât crash anymore
instead it raises a RecursionError.

: Fix crash when using passing a non-exception to a generatorâs
 method. Patch by Noah Oxer

================================================================================

# Changelog - Core and Builtins (Part 30)

: Asynchronous comprehensions are now allowed inside
comprehensions in asynchronous functions.  Outer comprehensions implicitly
become asynchronous.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix clang rpath issue in . The UnixCCompiler now
uses correct clang option to add a runtime library directory (rpath) to a
shared library.
: Fix freed memory access in pyexpat.xmlparser when
building it with an installed expat library <= 2.2.0.
: On Unix, if the sem_clockwait() function is available in
the C library (glibc 2.30 and newer), the threading.Lock.acquire()
method now uses the monotonic clock (time.CLOCK_MONOTONIC) for
the timeout, rather than using the system clock
(time.CLOCK_REALTIME), to not be affected by system clock
changes. Patch by Victor Stinner.
bpo-1596321: Fix the threading._shutdown() function when the
 module was imported first from a thread different than
the main thread: no longer log an error at Python exit.
: Fix a race condition in the Thread.join() method of the  module. If the
function is interrupted by a signal and the signal handler raises an
exception, make sure that the thread remains in a consistent state to
prevent a deadlock. Patch by Victor Stinner.
: In Unix operating systems, time.sleep() now uses the
nanosleep() function, if clock_nanosleep() is not available but
nanosleep() is available. nanosleep() allows to sleep with
nanosecond precision.
: On Windows, time.sleep() now uses a waitable timer which
has a resolution of 100 nanoseconds (10 seconds). Previously,
it had a resolution of 1 millisecond (10 seconds). Patch by
Benjamin SzÅke and Victor Stinner.
: Fix unittest.IsolatedAsyncioTestCase.debug(): it runs now
asynchronous methods and callbacks.
: unittest.TestCase.debug() raises now a
unittest.SkipTest if the class or the test method are decorated
with the skipping decorator.
: Fix an issue where argparse would not preserve values in a
provided namespace when using a subparser with defaults.
: Have zipimport.zipimporter.find_spec() not raise an exception
when the underlying zip file has been deleted and the internal cache has
been reset via invalidate_cache().
: Fixed a regression in copyfile(),
,  raising
FileNotFoundError when source is a directory, which should raise
IsADirectoryError
: Fix stack buffer overflow in parsing J1939 network address.
: use map function instead of genexpr in capwords.
: Fix typo: importlib.find_loader is really slated for
removal in Python 3.12 not 3.10, like the others in PR 25169.
Patch by Hugo van Kemenade.

================================================================================

# Changelog - Library (Part 2)

: Improves error messages on  operation for ,
, , and . New format now shows the problematic
pattern and the object type.
: Change  output to omit op arg values that cannot
be resolved due to ,  etc not being provided.
Previously the oparg itself was repeated in the value field, which is not
useful and can be confusing.
: In Unix operating systems, time.sleep() now uses the
clock_nanosleep() function, if available, which allows to sleep for an
interval specified with nanosecond precision.
: Remove from the configparser module: the
SafeConfigParser class, the  property of the
ParsingError class, the  method of
the ConfigParser class, deprecated since Python
3.2.
Patch by Hugo van Kemenade.

: Pure ASCII strings are now normalized in constant time by
unicodedata.normalize(). Patch by Donghee Na.
: Calling mimetypes.guess_all_extensions() with
strict=False no longer affects the result of the following call with
strict=True. Also, mutating the returned list no longer affects the
global state.
: typing.get_type_hints() now works with
 wrapped in ForwardRef.
: Remove many old deprecated  features:

================================================================================

# Changelog - Library (Part 3)

ââ and ââ aliases of  methods.
Broken from start  method assertDictContainsSubset().
Ignored <unittest.TestLoader.loadTestsFromModule> TestLoader.loadTestsFromModule() parameter use_load_tests.
Old alias _TextTestResult of TextTestResult.


: Remove the deprecated  method of
_tkinter.TkappType. Patch by Erlend E. Aasland.
: Improve the speed and accuracy of statistics.pvariance().
: Remove __getitem__() methods of
xml.dom.pulldom.DOMEventStream, wsgiref.util.FileWrapper
and fileinput.FileInput, deprecated since Python 3.9.
Patch by Hugo van Kemenade.

: Due to significant security concerns, the reuse_address
parameter of asyncio.loop.create_datagram_endpoint(), disabled in
Python 3.9, is now entirely removed. This is because of the behavior of
the socket option SO_REUSEADDR in UDP.
Patch by Hugo van Kemenade.

: The  command, deprecated in Python 3.9, is now
removed.
Use bdist_wheel (wheel packages) instead.
Patch by Hugo van Kemenade.

================================================================================

# Changelog - Library (Part 4)

: unittest.TestResult methods
addFailure(),
addError(),
 and
addSubTest() are now called immediately after
raising an exception in test or finishing a subtest. Previously they were
called only after finishing the test clean up.
: Changes how error is formatted for struct.pack with 
and  modes and too large / small numbers. Now it shows the actual
numeric limits, while previously it was showing arithmetic expressions.
:  now always reports skipped and failed subtests
separately: separate characters in default mode and separate lines in
verbose mode. Also the test description is now output for errors in test
method, class and module cleanups.
: Fix issue when dataclasses that inherit from
typing.Protocol subclasses have wrong . Patch provided by
Yurii Karabas.
: The  module, deprecated in Python 3.9, is now
removed. The following  functions, deprecated in Python
3.9, are now also removed:

, ;
rlecode_hqx(), rledecode_hqx().

The binascii.crc_hqx() function remains available.
Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 5)

: The  package is now deprecated and may not be
able to parse Python 3.10 or newer. See the  (New PEG parser for
CPython). Patch by Victor Stinner.
: Rename traceback.StackSummary.format_frame() to
traceback.StackSummary.format_frame_summary(). This method was added
for 3.11 so it was not released yet.
Updated code and docs to better distinguish frame and FrameSummary.

: Add option to completely drop frames from a traceback by
returning  from a format_frame()
override.
:  now always return a
TestResult instance. Previously it returned  if
the test class or method was decorated with a skipping decorator.
: Fix a potential deadlock at shutdown of forked children when
using concurrent.futures module
: Fix bugs in cleaning up classes and modules in :

================================================================================

# Changelog - Library (Part 6)

Functions registered with addModuleCleanup() were not called unless the user defines tearDownModule() in their test module.
Functions registered with addClassCleanup() were not called if tearDownClass is set to .
Buffering in TestResult did not work with functions registered with addClassCleanup() and addModuleCleanup().
Errors in functions registered with addClassCleanup() and addModuleCleanup() were not handled correctly in buffered and debug modes.
Errors in setUpModule() and functions registered with addModuleCleanup() were reported in wrong order.
And several lesser bugs.

================================================================================

# Changelog - Library (Part 7)


: Fix integer overflow in pickling and copying the range
iterator.
: Made email date parsing more robust against malformed input,
namely a whitespace-only  header. Patch by Wouter Bolsterlee.
: Remove support of special method  in
unittest.mock. It is not used in Python 3.
: Improve accuracy of variance calculations by using 
instead of .
: Improve the speed of gzip.compress() and
gzip.decompress() by compressing and decompressing at once in memory
instead of in a streamed fashion.
: Ensure that  and  objects are
always marshalled reproducibly.
: A new function operator.call has been added, such that
operator.call(obj,    obj(*args, .
: webbrowser.MacOSX is deprecated and will be removed
in Python 3.13. It is untested and undocumented and also not used by
webbrowser itself. Patch by Donghee Na.
: Method stopTestRun() is now always
called in pair with method startTestRun() for
TestResult objects implicitly created in
. Previously it was not called for test
methods and classes decorated with a skipping decorator.
: tarfile.open raises  when a zlib error
occurs during file extraction.
: subprocess on Solaris now also uses
os.posix_spawn() for better performance.
: IsolatedAsyncioTestCase will no longer throw
an exception while cancelling leaked tasks. Patch by Bar Harel.
: Added DeprecationWarning for tests and async tests that
return a value!=None (as this may indicate an improperly written test, for
example a test written as a generator function).
: Make exception message more useful when subclass from typing
special form alias. Patch provided by Yurii Karabas.
: argparse.BooleanOptionalActionâs default value is no
longer printed twice when used with
argparse.ArgumentDefaultsHelpFormatter.
: Fix the posix_user scheme in  to not depend
on sys.platlibdir.
: Improve error handling in  and raise more
accurate exceptions.

================================================================================

# Changelog - Library (Part 8)

MemoryError is now raised instead of sqlite3.Warning when memory is not enough for encoding a statement to UTF-8 in Connection.__call__() and Cursor.execute().
UnicodEncodeError is now raised instead of sqlite3.Warning when the statement contains surrogate characters in Connection.__call__() and Cursor.execute().
 is now raised instead of ValueError for non-string script argument in Cursor.executescript().
ValueError is now raised for script containing the null character instead of truncating it in Cursor.executescript().
Correctly handle exceptions raised when getting boolean value of the result of the progress handler.
Add many tests covering different corner cases.

================================================================================

# Changelog - Library (Part 9)


: Upgrade bundled pip to 21.2.3 and setuptools to 57.4.0
: Fix the os.set_inheritable() function on FreeBSD 14 for
file descriptor opened with the  flag: ignore the
 error on , fallback on the 
implementation. Patch by Victor Stinner.
: The @functools.total_ordering() decorator now works with
metaclasses.
: Fixed an issue wherein the  and __qualname__
attributes of subscribed specialforms could be .
: MemoryError raised in user-defined functions will now
produce a MemoryError in . OverflowError will
now be converted to . Previously
OperationalError was produced in these cases.
:  user-defined functions and aggregators returning
 with embedded NUL characters are no longer
truncated. Patch by Erlend E. Aasland.
: Ensure that the  variable in Callable
can only be substituted with a parameters expression (a list of types, an
ellipsis, ParamSpec or Concatenate).
: Non-protocol subclasses of typing.Protocol ignore now
the  method inherited from protocol base classes.
: collections.OrderedDict.popitem() and
collections.OrderedDict.pop() no longer call __getitem__ and
__delitem__ methods of the OrderedDict subclasses.
: Fix checking the number of arguments when subscribe a generic
type with  parameter.
: In importlib.metadata tests, override warnings behavior under
expected DeprecationWarnings (importlib_metadata 4.6.3).
: The tokenize.tokenize() doesnât incorrectly generate a
 token if the source doesnât end with a new line character but
the last line is a comment, as the function is already generating a 
token. Patch by Pablo Galindo
: Added importlib.simple module implementing adapters from a
low-level resources reader interface to a TraversableResources
interface. Legacy API (, , â¦) is now supported
entirely by the  API with a compatibility shim supplied for
resource loaders without that functionality. Feature parity with
importlib_resources 5.2.
: rcompleter does not call  on
 objects to avoid the side-effect of  evaluating the
corresponding method.
: Refactor usage of sys._getframe in  module. Patch
provided by Yurii Karabas.
: Fixes the issue with log file being overwritten when
logging.FileHandler is used in  with  set
to . Note this will cause the message in  not being logged
if the log stream is already closed due to shutdown of logging.
: weakref.proxy objects referencing non-iterators now raise
 rather than dereferencing the null tp_iternext slot and
crashing.
: The implementation of collections.abc.Set._hash() now
matches that of frozenset.__hash__().
: Fixed issue in compileall.compile_file() when
sys.stdout is redirected. Patch by Stefan HÃ¶lzl.
: sqlite3.Connection.create_collation() now accepts
non-ASCII collation names. Patch by Erlend E. Aasland.
: Adopt binacii.a2b_base64âs strict mode in base64.b64decode.
: Fixed a bug in the  module that was throwing
OverflowError when using _ssl._SSLSocket.write() and
_ssl._SSLSocket.read() for a big value of the  parameter.
Patch by Pablo Galindo.
: Replace unittest.mock._importer with
pkgutil.resolve_name.
: Make NewType.__call__ faster by implementing it in C. Patch
provided by Yurii Karabas.
: Change the   directive to disallow setting
commands for an invalid breakpoint and to display an appropriate error.
: Refactor typing.NewType from function into callable class.
Patch provided by Yurii Karabas.
: Added a separate error message for discontinuous padding in
binascii.a2b_base64 strict mode.
: Add missing  and __qualname__ attributes to
 module classes. Patch provided by Yurii Karabas.
: Give priority to using the current class constructor in
inspect.signature(). Patch by Weipeng Hong.
: Add a reference to the zipp project and hint as to how to use
it.
: Fixed wrong error being thrown by inspect.getsource()
when examining a class in the interactive session. Instead of
, it should be  with appropriate error
message.
: Fix memory leak in _tkinter._flatten() if it is called
with a sequence or set, but not list or tuple.
: Fix an edge case of  and
AsyncExitStack exception chaining.  They will now match 
block behavior when __context__ is explicitly set to  when the
exception is in flight.
: In , the cache size for compiled regex patterns
(functools.lru_cache()) was bumped up from 256 to 32768, affecting
functions: fnmatch.fnmatch(), fnmatch.fnmatchcase(),
fnmatch.filter().
: Update shutil.copyfile() to raise
FileNotFoundError instead of confusing IsADirectoryError
when a path ending with a os.path.sep does not exist;
shutil.copy() and shutil.copy2() are also affected.
: Added the StackSummary.format_frame() function in
. This allows users to customize the way individual lines
are formatted in tracebacks without re-implementing logic to handle
recursive tracebacks.
: handle StopIteration subclass raised from
@contextlib.contextmanager generator
: Make the implementation consistency of
 between C and Python versions. Patch by Donghee
Na.
: Fixes  to work with typing.get_type_hints()
and postponed evaluation of annotations across modules.
: Refactor argument processing in pdb.main() to simplify
detection of errors in input loading and clarify behavior around module or
script invocation.
: Break up paragraph about pprint.PrettyPrinter
construction parameters to make it easier to read.
: Added support for recognizing JPEG files without JFIF or Exif
markers.
: Fix bug with âs handling of import error due to a
package which does not have a  module
: Fix a bug in the detection of CSV file headers by
csv.Sniffer.has_header() and improve documentation of same.
: Update vendored pip to 21.1.3
: Fixed an exception thrown while parsing a malformed multipart
email by email.message.EmailMessage.
: typing.get_type_hints() now finds annotations in classes
and base classes with unexpected __module__. Previously, it skipped
those MRO elements.
: Allow clearing the  authorizer callback by
passing  to set_authorizer(). Patch
by Erlend E. Aasland.
: Set the proper Py_TPFLAGS_MAPPING and
Py_TPFLAGS_SEQUENCE flags for subclasses created before a
parent has been registered as a collections.abc.Mapping or
collections.abc.Sequence.
: Fix very unlikely resource leak in  in alternate
Python implementations.
: The faulthandler module now detects if a fatal error
occurs during a garbage collector collection. Patch by Victor Stinner.
: A  is now raised instead of an
AttributeError in contextlib.ExitStack.enter_context() and
contextlib.AsyncExitStack.enter_async_context() for objects which do
not support the context manager or asynchronous context
manager protocols correspondingly.
: âs  method now supports callables
without the  attribute.
: Make  (like the builtin ) not attempt to
write to  when it is .
: BUFFER_BLOCK_SIZE is now declared static, to avoid linking
collisions when bz2, lmza or zlib are statically linked.
: Remove exception for flake8 in deprecated importlib.metadata
interfaces. Sync with importlib_metadata 4.6.
: Take into account that  might be  in
traceback.FrameSummary.
: Fix in bz2.BZ2File.write() / lzma.LZMAFile.write()
methods, when the input data is an object that supports the buffer
protocol, the file length may be wrong.
: _thread.start_new_thread() no longer calls
PyThread_exit_thread() explicitly at the thread exit, the call was
redundant. On Linux with the glibc, pthread_exit() aborts the whole
process if dlopen() fails to open libgcc_s.so file (ex: EMFILE error).
Patch by Victor Stinner.
: The _thread.RLock type now fully implement the GC protocol: add
a traverse function and the Py_TPFLAGS_HAVE_GC flag. Patch by
Victor Stinner.
: The threading.enumerate() function now uses a reentrant
lock to prevent a hang on reentrant call. Patch by Victor Stinner.
: Importing typing.io or typing.re now prints a
DeprecationWarning.
: argparse actions store_const and append_const each receive a
default value of  when the  kwarg is not provided.
Previously, this raised a .
: Fix deprecation of ssl.OP_NO_TLSv1_3
: pathlib.PureWindowsPath.is_reserved() now identifies a
greater range of reserved filenames, including those with trailing spaces
or colons.
: Fix as_string() to pass unixfrom
properly. Patch by Donghee Na.
: Handle exceptions from parsing the arg of âs
run/restart command.
: Improve  moduleâs deprecation messages, error
reporting, and documentation for deprecations.
: [Enum] Change pickling from by-value to by-name.
: [Enum] Allow multiple data-type mixins if they are all the
same.
: Restore back parse_makefile() in distutils.sysconfig
because it behaves differently than the similar implementation in
.
: smtpd.MailmanProxy is now removed as it is unusable
without an external module, . Patch by Donghee Na.
: Added a function that returns cube root of the given number
math.cbrt()
: Change math.pow(Â±0.0, -math.inf) to return  instead
of raising ValueError. This brings the special-case handling of
 into compliance with the IEEE 754 standard.
: Remove missing flag check from Enum creation and move into a
 decorator.
: In importlib.metadata, restore compatibility in the result
from Distribution.entry_points (EntryPoints) to honor expectations
in older implementations and issuing deprecation warnings for these cases:
A. EntryPoints objects are once again mutable, allowing   for
 and other list-based mutation operations.   Avoid deprecation
warnings by casting to a   mutable sequence (e.g.
list(dist.entry_points).sort()). B. EntryPoints results once again
allow   for access by index. To avoid deprecation warnings,   cast the
result to a Sequence first   (e.g. tuple(dist.entry_points)[0]).
: In importlib.metadata.entry_points, de-duplication of
distributions no longer requires loading the full metadata for
PathDistribution objects, improving entry point loading performance by
~10x.
: Added a function that returns a copy of a dict of logging
levels: logging.getLevelNamesMapping()
: The random.Random constructor no longer reads system
entropy without need.
: On Mac, give turtledemo button text a color that works on both
light or dark background.  Programmers cannot control the latter.
: Support PEP 515 for Fractionâs initialization from string.
: Remove deprecated functions in the . Patch by
Donghee Na.
: Prefer f-strings to  in importlib.resources.
: Importlib.metadata now prefers f-strings to .format.
: Incorporate minor tweaks from importlib_metadata 4.1:
SimplePath protocol, support for Metadata 2.2.
: Remove the @asyncio.coroutine
 enabling legacy generator-based coroutines to be
compatible with async/await code; remove
asyncio.coroutines.CoroWrapper used for wrapping legacy coroutine
objects in the debug mode. The decorator has been deprecated since Python
3.8 and the removal was initially scheduled for Python 3.10. Patch by
Illia Volochii.
: Make importlib.metadata._meta.PackageMetadata public.
: Declare readers.MultiplexedPath.name as a property per the
spec.
: The  context manager now performs a rollback
(thus releasing the database lock) if commit failed.  Patch by Luca Citi
and Erlend E. Aasland.
: Documented existing behavior on POSIX: NamedTemporaryFiles are
not deleted when creating process is killed with SIGKILL
: Optimize fractions.Fraction pickling for large
components.
: For IPv4 mapped IPv6 addresses ( Section 2.5.5.2),
the ipaddress.IPv6Address.is_private check is deferred to the
mapped IPv4 address. This solves a bug where public mapped IPv4 addresses
were considered private by the IPv6 check.
: Add optional  argument to statistics.fmean().
: ast.unparse() will now drop the redundant parentheses
when tuples used as assignment targets (e.g in for loops).
:  computations were not releasing the GIL while
calling the OpenSSL HMAC_Update C API (a new feature in 3.9).  This
unintentionally prevented parallel computation as other 
algorithms support.
: zipfile.Path now supports zipfile.Path.stem,
zipfile.Path.suffixes, and zipfile.Path.suffix attributes.
: Itâs now possible to receive the type of service (ToS), a.k.a.
differentiated services (DS), a.k.a. differentiated services code point
(DSCP) and explicit congestion notification (ECN) IP header fields with
socket.IP_RECVTOS.
: Fix a reference leak when a Thread object is never joined.
: Subclasses of typing.Protocol which only have data
variables declared will now raise a  when checked with
isinstance unless they are decorated with runtime_checkable().
Previously, these checks passed silently. Patch provided by Yurii Karabas.
: typing.ParamSpec will no longer be found in the
__parameters__ of most  generics except in valid use
locations specified by . This prevents incorrect usage like
typing.List[P][int]. This change means incorrect usage which may have
passed silently in 3.10 beta 1 and earlier will now error.
: Allow subclassing  in 3.10 (it was allowed in 3.9
and earlier but was disallowed in early versions of 3.10).
: ast.unparse() now doesnât use redundant spaces to
separate  and the  if there are no parameters.
: Fix regression in previous release when calling
pkgutil.iter_modules() with a list of pathlib.Path objects
: Register the SerenityOS Browser in the webbrowser
module.
: The  module no longer does unaligned memory
accesses when compiled for ARM platforms.
: Remove random module features deprecated in Python 3.9.
: random.seed() no longer mutates bytearray inputs.
: Add , , , , and
 to typing.__all__. Patch by Jelle Zijlstra.
: urllib.parse now uses functool.lru_cache() for its
internal URL splitting and quoting caches instead of rolling its own like
its the â90s.
The undocumented internal urllib.parse  class API is now
deprecated, for removal in 3.14.

================================================================================

# Changelog - Library (Part 10)

: When http.server.SimpleHTTPRequestHandler sends a
  Permanently) for a directory path not ending with ,
add a Content-Length:  header. This improves the behavior for certain
clients.
: Fix a bug in  where checkline() raises
AttributeError if it is called after .
: Improved string handling for  user-defined
functions and aggregates:

It is now possible to pass strings with embedded null characters to UDFs
Conversion failures now correctly raise MemoryError

Patch by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 11)

: AIX: Lib/_aix_support.get_platform() may fail in an AIX
WPAR. The fileset bos.rte appears to have a builddate in both LPAR and
WPAR so this fileset is queried rather than bos.mp64. To prevent a similar
situation (no builddate in ODM) a value (9988) sufficient for completing a
build is provided. Patch by M Felt.
: Fix MemoryError in shutil.unpack_archive() which
fails inside shutil._unpack_zipfile() on large files. Patch by Igor
Bolshakov.
: zlib.compress() now accepts a wbits parameter which
allows users to compress data as a raw deflate block without zlib headers
and trailers in one go. Previously this required instantiating a
zlib.compressobj. It also provides a faster alternative to
gzip.compress when wbits=31 is used.
: importlib._bootstrap._find_and_load() now implements a
two-step check to avoid locking when modules have been already imported
and are ready. This improves performance of repeated calls to
importlib.import_module() and importlib.__import__().
: Fix a bug where  does not always echo cleared
breakpoints.
: Prohibit passing
non-concurrent.futures.ThreadPoolExecutor executors to
loop.set_default_executor() following a deprecation in Python 3.8.
Patch by Illia Volochii.
: Prohibit previously deprecated potentially disruptive
operations on asyncio.trsock.TransportSocket. Patch by Illia
Volochii.
: Added support for Appleâs aifc/sowt pseudo-compression
: Add definition of errno.EQFULL for platforms that define
this constant (such as macOS).
: Added a new optional strict_mode parameter to
binascii.a2b_base64. When scrict_mode is set to ,
the a2b_base64 function will accept only valid base64 content. More
details about what âvalid base64 contentâ is, can be found in the
functionâs documentation.
: Improve the help signature of
traceback.print_exception(), traceback.format_exception() and
traceback.format_exception_only().
: Add the traceback.TracebackException.print() method which
prints the formatted exception information.
:  now utilizes functools.lru_cache() to
implement the connection statement cache. As a small optimisation, the
default statement cache size has been increased from 100 to 128. Patch by
Erlend E. Aasland.
: Soumendra Ganguly: add termios.tcgetwinsize(),
termios.tcsetwinsize().
: subprocess.check_output() now raises ValueError
when the invalid keyword argument  is passed by user code.
Previously such use would fail later with a . Patch by
RÃ©mi Lapeyre.
:  now uses importlib.resources.files()
traversable APIs
: Use Argument Clinic in .  Patches by Erlend E.
Aasland.
: DeprecationWarning is now raised when importing
tkinter.tix, which has been deprecated in documentation since
Python 3.6.
: Remove unused _signature_get_bound_param function from
 - by Anthony Sottile.
: Fix email.message.EmailMessage.set_content() when called
with binary data and  content transfer encoding.
: The compresslevel and  keyword arguments of
tarfile.open() are now both documented and tested.
: Use utf-8 encoding while reading .pdbrc files. Patch by
Srinivas Reddy Thatiparthy
: Improved reprs of  synchronization objects:
, BoundedSemaphore,
 and .
: Deprecated the following  functions, scheduled
for removal in Python 3.13:

================================================================================

# Changelog - Library (Part 12)

findTestCases()
makeSuite()
getTestCaseNames()

Use TestLoader methods instead:

unittest.TestLoader.loadTestsFromModule()
unittest.TestLoader.loadTestsFromTestCase()
unittest.TestLoader.getTestCaseNames()

Patch by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 13)

: Support pathlike objects on dbm/shelve. Patch by Hakan Ãelik
and Henry-Joseph AudÃ©oud.
: Fixed a Y2k38 bug in the compileall module where it would fail
to compile files with a modification time after the year 2038.
: Whereas the code for reprlib.Repr had previously used a
hardcoded string value of ââ¦â, this PR updates it to use of a
âfillvalueâ attribute, whose value defaults to ââ¦â and can be reset in
either individual reprlib.Repr instances or in subclasses thereof.
:  now displays exceptions from  with its
 and  commands.
: Fix test___all__ on platforms lacking a shared memory
implementation.
: Add one missing check that the password is a bytes object for
an encrypted zipfile.
: configparser: using â]â inside a section header will no
longer cut the section name short at the â]â
: Added missing behavior to
contextlib.asynccontextmanager() to match
contextlib.contextmanager() so decorated functions can themselves be
decorators.
: Pass multiprocessing BaseProxy argument manager_owned
through AutoProxy.
: email.utils.getaddresses() now accepts
email.header.Header objects along with string values. Patch by
Zackery Spytz.
: Add SQLite error code and name to  exceptions.
Patch by Aviv Palivoda, Daniel Shahaf, and Erlend E. Aasland.
: pty.spawn no longer hangs on FreeBSD, macOS, and Solaris.
: lib2to3 now recognizes async generators everywhere.
: Fix  when required subparsers without  do
not receive arguments. Patch by Anthony Sottile.

================================================================================

# Changelog - Library (Part 14)

: Fix clang rpath issue in . The UnixCCompiler now
uses correct clang option to add a runtime library directory (rpath) to a
shared library.

: Fix freed memory access in pyexpat.xmlparser when
building it with an installed expat library <= 2.2.0.

: On Unix, if the sem_clockwait() function is available in
the C library (glibc 2.30 and newer), the threading.Lock.acquire()
method now uses the monotonic clock (time.CLOCK_MONOTONIC) for
the timeout, rather than using the system clock
(time.CLOCK_REALTIME), to not be affected by system clock
changes. Patch by Victor Stinner.

bpo-1596321: Fix the threading._shutdown() function when the
 module was imported first from a thread different than
the main thread: no longer log an error at Python exit.

: Fix a race condition in the Thread.join() method of the  module. If the
function is interrupted by a signal and the signal handler raises an
exception, make sure that the thread remains in a consistent state to
prevent a deadlock. Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 15)

: In Unix operating systems, time.sleep() now uses the
nanosleep() function, if clock_nanosleep() is not available but
nanosleep() is available. nanosleep() allows to sleep with
nanosecond precision.

: On Windows, time.sleep() now uses a waitable timer which
has a resolution of 100 nanoseconds (10 seconds). Previously,
it had a resolution of 1 millisecond (10 seconds). Patch by
Benjamin SzÅke and Victor Stinner.

: Fix unittest.IsolatedAsyncioTestCase.debug(): it runs now
asynchronous methods and callbacks.

: unittest.TestCase.debug() raises now a
unittest.SkipTest if the class or the test method are decorated
with the skipping decorator.

: Fix an issue where argparse would not preserve values in a
provided namespace when using a subparser with defaults.

: Have zipimport.zipimporter.find_spec() not raise an exception
when the underlying zip file has been deleted and the internal cache has
been reset via invalidate_cache().

: Fixed a regression in copyfile(),
,  raising
FileNotFoundError when source is a directory, which should raise
IsADirectoryError

: Fix stack buffer overflow in parsing J1939 network address.

: use map function instead of genexpr in capwords.

================================================================================

# Changelog - Library (Part 16)

: Fix typo: importlib.find_loader is really slated for
removal in Python 3.12 not 3.10, like the others in PR 25169.

Patch by Hugo van Kemenade.

: Improves error messages on  operation for ,
, , and . New format now shows the problematic
pattern and the object type.

: Change  output to omit op arg values that cannot
be resolved due to ,  etc not being provided.
Previously the oparg itself was repeated in the value field, which is not
useful and can be confusing.

: In Unix operating systems, time.sleep() now uses the
clock_nanosleep() function, if available, which allows to sleep for an
interval specified with nanosecond precision.

: Remove from the configparser module: the
SafeConfigParser class, the  property of the
ParsingError class, the  method of
the ConfigParser class, deprecated since Python
3.2.

Patch by Hugo van Kemenade.

: Pure ASCII strings are now normalized in constant time by
unicodedata.normalize(). Patch by Donghee Na.

: Calling mimetypes.guess_all_extensions() with
strict=False no longer affects the result of the following call with
strict=True. Also, mutating the returned list no longer affects the
global state.

================================================================================

# Changelog - Library (Part 17)

: typing.get_type_hints() now works with
 wrapped in ForwardRef.

: Remove many old deprecated  features:

List:
ââ and ââ aliases of  methods.
Broken from start  method assertDictContainsSubset().
Ignored <unittest.TestLoader.loadTestsFromModule> TestLoader.loadTestsFromModule() parameter use_load_tests.
Old alias _TextTestResult of TextTestResult.

ââ and ââ aliases of  methods.

Broken from start  method assertDictContainsSubset().

Ignored <unittest.TestLoader.loadTestsFromModule> TestLoader.loadTestsFromModule() parameter use_load_tests.

Old alias _TextTestResult of TextTestResult.

: Remove the deprecated  method of
_tkinter.TkappType. Patch by Erlend E. Aasland.

: Improve the speed and accuracy of statistics.pvariance().

: Remove __getitem__() methods of
xml.dom.pulldom.DOMEventStream, wsgiref.util.FileWrapper
and fileinput.FileInput, deprecated since Python 3.9.

Patch by Hugo van Kemenade.

: Due to significant security concerns, the reuse_address
parameter of asyncio.loop.create_datagram_endpoint(), disabled in
Python 3.9, is now entirely removed. This is because of the behavior of
the socket option SO_REUSEADDR in UDP.

Patch by Hugo van Kemenade.

================================================================================

# Changelog - Library (Part 18)

: The  command, deprecated in Python 3.9, is now
removed.

Use bdist_wheel (wheel packages) instead.

Patch by Hugo van Kemenade.

: unittest.TestResult methods
addFailure(),
addError(),
 and
addSubTest() are now called immediately after
raising an exception in test or finishing a subtest. Previously they were
called only after finishing the test clean up.

: Changes how error is formatted for struct.pack with 
and  modes and too large / small numbers. Now it shows the actual
numeric limits, while previously it was showing arithmetic expressions.

:  now always reports skipped and failed subtests
separately: separate characters in default mode and separate lines in
verbose mode. Also the test description is now output for errors in test
method, class and module cleanups.

: Fix issue when dataclasses that inherit from
typing.Protocol subclasses have wrong . Patch provided by
Yurii Karabas.

: The  module, deprecated in Python 3.9, is now
removed. The following  functions, deprecated in Python
3.9, are now also removed:

List:
, ;
rlecode_hqx(), rledecode_hqx().

rlecode_hqx(), rledecode_hqx().

The binascii.crc_hqx() function remains available.

Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 19)

: The  package is now deprecated and may not be
able to parse Python 3.10 or newer. See the  (New PEG parser for
CPython). Patch by Victor Stinner.

: Rename traceback.StackSummary.format_frame() to
traceback.StackSummary.format_frame_summary(). This method was added
for 3.11 so it was not released yet.

Updated code and docs to better distinguish frame and FrameSummary.

: Add option to completely drop frames from a traceback by
returning  from a format_frame()
override.

:  now always return a
TestResult instance. Previously it returned  if
the test class or method was decorated with a skipping decorator.

: Fix a potential deadlock at shutdown of forked children when
using concurrent.futures module

: Fix bugs in cleaning up classes and modules in :

================================================================================

# Changelog - Library (Part 20)

List:
Functions registered with addModuleCleanup() were not called unless the user defines tearDownModule() in their test module.
Functions registered with addClassCleanup() were not called if tearDownClass is set to .
Buffering in TestResult did not work with functions registered with addClassCleanup() and addModuleCleanup().
Errors in functions registered with addClassCleanup() and addModuleCleanup() were not handled correctly in buffered and debug modes.
Errors in setUpModule() and functions registered with addModuleCleanup() were reported in wrong order.
And several lesser bugs.

Functions registered with addModuleCleanup() were not called unless the user defines tearDownModule() in their test module.

Functions registered with addClassCleanup() were not called if tearDownClass is set to .

Buffering in TestResult did not work with functions registered with addClassCleanup() and addModuleCleanup().

Errors in functions registered with addClassCleanup() and addModuleCleanup() were not handled correctly in buffered and debug modes.

Errors in setUpModule() and functions registered with addModuleCleanup() were reported in wrong order.

And several lesser bugs.

================================================================================

# Changelog - Library (Part 21)

: Fix integer overflow in pickling and copying the range
iterator.

: Made email date parsing more robust against malformed input,
namely a whitespace-only  header. Patch by Wouter Bolsterlee.

: Remove support of special method  in
unittest.mock. It is not used in Python 3.

: Improve accuracy of variance calculations by using 
instead of .

: Improve the speed of gzip.compress() and
gzip.decompress() by compressing and decompressing at once in memory
instead of in a streamed fashion.

: Ensure that  and  objects are
always marshalled reproducibly.

: A new function operator.call has been added, such that
operator.call(obj,    obj(*args, .

: webbrowser.MacOSX is deprecated and will be removed
in Python 3.13. It is untested and undocumented and also not used by
webbrowser itself. Patch by Donghee Na.

: Method stopTestRun() is now always
called in pair with method startTestRun() for
TestResult objects implicitly created in
. Previously it was not called for test
methods and classes decorated with a skipping decorator.

: tarfile.open raises  when a zlib error
occurs during file extraction.

: subprocess on Solaris now also uses
os.posix_spawn() for better performance.

================================================================================

# Changelog - Library (Part 22)

: IsolatedAsyncioTestCase will no longer throw
an exception while cancelling leaked tasks. Patch by Bar Harel.

: Added DeprecationWarning for tests and async tests that
return a value!=None (as this may indicate an improperly written test, for
example a test written as a generator function).

: Make exception message more useful when subclass from typing
special form alias. Patch provided by Yurii Karabas.

: argparse.BooleanOptionalActionâs default value is no
longer printed twice when used with
argparse.ArgumentDefaultsHelpFormatter.

: Fix the posix_user scheme in  to not depend
on sys.platlibdir.

: Improve error handling in  and raise more
accurate exceptions.

================================================================================

# Changelog - Library (Part 23)

List:
MemoryError is now raised instead of sqlite3.Warning when memory is not enough for encoding a statement to UTF-8 in Connection.__call__() and Cursor.execute().
UnicodEncodeError is now raised instead of sqlite3.Warning when the statement contains surrogate characters in Connection.__call__() and Cursor.execute().
 is now raised instead of ValueError for non-string script argument in Cursor.executescript().
ValueError is now raised for script containing the null character instead of truncating it in Cursor.executescript().
Correctly handle exceptions raised when getting boolean value of the result of the progress handler.
Add many tests covering different corner cases.

MemoryError is now raised instead of sqlite3.Warning when memory is not enough for encoding a statement to UTF-8 in Connection.__call__() and Cursor.execute().

UnicodEncodeError is now raised instead of sqlite3.Warning when the statement contains surrogate characters in Connection.__call__() and Cursor.execute().

is now raised instead of ValueError for non-string script argument in Cursor.executescript().

================================================================================

# Changelog - Library (Part 24)

ValueError is now raised for script containing the null character instead of truncating it in Cursor.executescript().

Correctly handle exceptions raised when getting boolean value of the result of the progress handler.

Add many tests covering different corner cases.

: Upgrade bundled pip to 21.2.3 and setuptools to 57.4.0

: Fix the os.set_inheritable() function on FreeBSD 14 for
file descriptor opened with the  flag: ignore the
 error on , fallback on the 
implementation. Patch by Victor Stinner.

: The @functools.total_ordering() decorator now works with
metaclasses.

: Fixed an issue wherein the  and __qualname__
attributes of subscribed specialforms could be .

: MemoryError raised in user-defined functions will now
produce a MemoryError in . OverflowError will
now be converted to . Previously
OperationalError was produced in these cases.

:  user-defined functions and aggregators returning
 with embedded NUL characters are no longer
truncated. Patch by Erlend E. Aasland.

: Ensure that the  variable in Callable
can only be substituted with a parameters expression (a list of types, an
ellipsis, ParamSpec or Concatenate).

================================================================================

# Changelog - Library (Part 25)

: Non-protocol subclasses of typing.Protocol ignore now
the  method inherited from protocol base classes.

: collections.OrderedDict.popitem() and
collections.OrderedDict.pop() no longer call __getitem__ and
__delitem__ methods of the OrderedDict subclasses.

: Fix checking the number of arguments when subscribe a generic
type with  parameter.

: In importlib.metadata tests, override warnings behavior under
expected DeprecationWarnings (importlib_metadata 4.6.3).

: The tokenize.tokenize() doesnât incorrectly generate a
 token if the source doesnât end with a new line character but
the last line is a comment, as the function is already generating a 
token. Patch by Pablo Galindo

: Added importlib.simple module implementing adapters from a
low-level resources reader interface to a TraversableResources
interface. Legacy API (, , â¦) is now supported
entirely by the  API with a compatibility shim supplied for
resource loaders without that functionality. Feature parity with
importlib_resources 5.2.

: rcompleter does not call  on
 objects to avoid the side-effect of  evaluating the
corresponding method.

: Refactor usage of sys._getframe in  module. Patch
provided by Yurii Karabas.

================================================================================

# Changelog - Library (Part 26)

: Fixes the issue with log file being overwritten when
logging.FileHandler is used in  with  set
to . Note this will cause the message in  not being logged
if the log stream is already closed due to shutdown of logging.

: weakref.proxy objects referencing non-iterators now raise
 rather than dereferencing the null tp_iternext slot and
crashing.

: The implementation of collections.abc.Set._hash() now
matches that of frozenset.__hash__().

: Fixed issue in compileall.compile_file() when
sys.stdout is redirected. Patch by Stefan HÃ¶lzl.

: sqlite3.Connection.create_collation() now accepts
non-ASCII collation names. Patch by Erlend E. Aasland.

: Adopt binacii.a2b_base64âs strict mode in base64.b64decode.

: Fixed a bug in the  module that was throwing
OverflowError when using _ssl._SSLSocket.write() and
_ssl._SSLSocket.read() for a big value of the  parameter.
Patch by Pablo Galindo.

: Replace unittest.mock._importer with
pkgutil.resolve_name.

: Make NewType.__call__ faster by implementing it in C. Patch
provided by Yurii Karabas.

: Change the   directive to disallow setting
commands for an invalid breakpoint and to display an appropriate error.

================================================================================

# Changelog - Library (Part 27)

: Refactor typing.NewType from function into callable class.
Patch provided by Yurii Karabas.

: Added a separate error message for discontinuous padding in
binascii.a2b_base64 strict mode.

: Add missing  and __qualname__ attributes to
 module classes. Patch provided by Yurii Karabas.

: Give priority to using the current class constructor in
inspect.signature(). Patch by Weipeng Hong.

: Add a reference to the zipp project and hint as to how to use
it.

: Fixed wrong error being thrown by inspect.getsource()
when examining a class in the interactive session. Instead of
, it should be  with appropriate error
message.

: Fix memory leak in _tkinter._flatten() if it is called
with a sequence or set, but not list or tuple.

: Fix an edge case of  and
AsyncExitStack exception chaining.  They will now match 
block behavior when __context__ is explicitly set to  when the
exception is in flight.

: In , the cache size for compiled regex patterns
(functools.lru_cache()) was bumped up from 256 to 32768, affecting
functions: fnmatch.fnmatch(), fnmatch.fnmatchcase(),
fnmatch.filter().

================================================================================

# Changelog - Library (Part 28)

: Update shutil.copyfile() to raise
FileNotFoundError instead of confusing IsADirectoryError
when a path ending with a os.path.sep does not exist;
shutil.copy() and shutil.copy2() are also affected.

: Added the StackSummary.format_frame() function in
. This allows users to customize the way individual lines
are formatted in tracebacks without re-implementing logic to handle
recursive tracebacks.

: handle StopIteration subclass raised from
@contextlib.contextmanager generator

: Make the implementation consistency of
 between C and Python versions. Patch by Donghee
Na.

: Fixes  to work with typing.get_type_hints()
and postponed evaluation of annotations across modules.

: Refactor argument processing in pdb.main() to simplify
detection of errors in input loading and clarify behavior around module or
script invocation.

: Break up paragraph about pprint.PrettyPrinter
construction parameters to make it easier to read.

: Added support for recognizing JPEG files without JFIF or Exif
markers.

: Fix bug with âs handling of import error due to a
package which does not have a  module

: Fix a bug in the detection of CSV file headers by
csv.Sniffer.has_header() and improve documentation of same.

================================================================================

# Changelog - Library (Part 29)

: Update vendored pip to 21.1.3

: Fixed an exception thrown while parsing a malformed multipart
email by email.message.EmailMessage.

: typing.get_type_hints() now finds annotations in classes
and base classes with unexpected __module__. Previously, it skipped
those MRO elements.

: Allow clearing the  authorizer callback by
passing  to set_authorizer(). Patch
by Erlend E. Aasland.

: Set the proper Py_TPFLAGS_MAPPING and
Py_TPFLAGS_SEQUENCE flags for subclasses created before a
parent has been registered as a collections.abc.Mapping or
collections.abc.Sequence.

: Fix very unlikely resource leak in  in alternate
Python implementations.

: The faulthandler module now detects if a fatal error
occurs during a garbage collector collection. Patch by Victor Stinner.

: A  is now raised instead of an
AttributeError in contextlib.ExitStack.enter_context() and
contextlib.AsyncExitStack.enter_async_context() for objects which do
not support the context manager or asynchronous context
manager protocols correspondingly.

: âs  method now supports callables
without the  attribute.

: Make  (like the builtin ) not attempt to
write to  when it is .

================================================================================

# Changelog - Library (Part 30)

: BUFFER_BLOCK_SIZE is now declared static, to avoid linking
collisions when bz2, lmza or zlib are statically linked.

: Remove exception for flake8 in deprecated importlib.metadata
interfaces. Sync with importlib_metadata 4.6.

: Take into account that  might be  in
traceback.FrameSummary.

: Fix in bz2.BZ2File.write() / lzma.LZMAFile.write()
methods, when the input data is an object that supports the buffer
protocol, the file length may be wrong.

: _thread.start_new_thread() no longer calls
PyThread_exit_thread() explicitly at the thread exit, the call was
redundant. On Linux with the glibc, pthread_exit() aborts the whole
process if dlopen() fails to open libgcc_s.so file (ex: EMFILE error).
Patch by Victor Stinner.

: The _thread.RLock type now fully implement the GC protocol: add
a traverse function and the Py_TPFLAGS_HAVE_GC flag. Patch by
Victor Stinner.

: The threading.enumerate() function now uses a reentrant
lock to prevent a hang on reentrant call. Patch by Victor Stinner.

: Importing typing.io or typing.re now prints a
DeprecationWarning.

: argparse actions store_const and append_const each receive a
default value of  when the  kwarg is not provided.
Previously, this raised a .

================================================================================

# Changelog - Library (Part 31)

: Fix deprecation of ssl.OP_NO_TLSv1_3

: pathlib.PureWindowsPath.is_reserved() now identifies a
greater range of reserved filenames, including those with trailing spaces
or colons.

: Fix as_string() to pass unixfrom
properly. Patch by Donghee Na.

: Handle exceptions from parsing the arg of âs
run/restart command.

: Improve  moduleâs deprecation messages, error
reporting, and documentation for deprecations.

: [Enum] Change pickling from by-value to by-name.

: [Enum] Allow multiple data-type mixins if they are all the
same.

: Restore back parse_makefile() in distutils.sysconfig
because it behaves differently than the similar implementation in
.

: smtpd.MailmanProxy is now removed as it is unusable
without an external module, . Patch by Donghee Na.

: Added a function that returns cube root of the given number
math.cbrt()

: Change math.pow(Â±0.0, -math.inf) to return  instead
of raising ValueError. This brings the special-case handling of
 into compliance with the IEEE 754 standard.

: Remove missing flag check from Enum creation and move into a
 decorator.

================================================================================

# Changelog - Library (Part 32)

: In importlib.metadata, restore compatibility in the result
from Distribution.entry_points (EntryPoints) to honor expectations
in older implementations and issuing deprecation warnings for these cases:
A. EntryPoints objects are once again mutable, allowing   for
 and other list-based mutation operations.   Avoid deprecation
warnings by casting to a   mutable sequence (e.g.
list(dist.entry_points).sort()). B. EntryPoints results once again
allow   for access by index. To avoid deprecation warnings,   cast the
result to a Sequence first   (e.g. tuple(dist.entry_points)[0]).

: In importlib.metadata.entry_points, de-duplication of
distributions no longer requires loading the full metadata for
PathDistribution objects, improving entry point loading performance by
~10x.

: Added a function that returns a copy of a dict of logging
levels: logging.getLevelNamesMapping()

: The random.Random constructor no longer reads system
entropy without need.

: On Mac, give turtledemo button text a color that works on both
light or dark background.  Programmers cannot control the latter.

: Support PEP 515 for Fractionâs initialization from string.

: Remove deprecated functions in the . Patch by
Donghee Na.

================================================================================

# Changelog - Library (Part 33)

: Prefer f-strings to  in importlib.resources.

: Importlib.metadata now prefers f-strings to .format.

: Incorporate minor tweaks from importlib_metadata 4.1:
SimplePath protocol, support for Metadata 2.2.

: Remove the @asyncio.coroutine
 enabling legacy generator-based coroutines to be
compatible with async/await code; remove
asyncio.coroutines.CoroWrapper used for wrapping legacy coroutine
objects in the debug mode. The decorator has been deprecated since Python
3.8 and the removal was initially scheduled for Python 3.10. Patch by
Illia Volochii.

: Make importlib.metadata._meta.PackageMetadata public.

: Declare readers.MultiplexedPath.name as a property per the
spec.

: The  context manager now performs a rollback
(thus releasing the database lock) if commit failed.  Patch by Luca Citi
and Erlend E. Aasland.

: Documented existing behavior on POSIX: NamedTemporaryFiles are
not deleted when creating process is killed with SIGKILL

: Optimize fractions.Fraction pickling for large
components.

================================================================================

# Changelog - Library (Part 34)

: For IPv4 mapped IPv6 addresses ( Section 2.5.5.2),
the ipaddress.IPv6Address.is_private check is deferred to the
mapped IPv4 address. This solves a bug where public mapped IPv4 addresses
were considered private by the IPv6 check.

: Add optional  argument to statistics.fmean().

: ast.unparse() will now drop the redundant parentheses
when tuples used as assignment targets (e.g in for loops).

:  computations were not releasing the GIL while
calling the OpenSSL HMAC_Update C API (a new feature in 3.9).  This
unintentionally prevented parallel computation as other 
algorithms support.

: zipfile.Path now supports zipfile.Path.stem,
zipfile.Path.suffixes, and zipfile.Path.suffix attributes.

: Itâs now possible to receive the type of service (ToS), a.k.a.
differentiated services (DS), a.k.a. differentiated services code point
(DSCP) and explicit congestion notification (ECN) IP header fields with
socket.IP_RECVTOS.

: Fix a reference leak when a Thread object is never joined.

================================================================================

# Changelog - Library (Part 35)

: Subclasses of typing.Protocol which only have data
variables declared will now raise a  when checked with
isinstance unless they are decorated with runtime_checkable().
Previously, these checks passed silently. Patch provided by Yurii Karabas.

: typing.ParamSpec will no longer be found in the
__parameters__ of most  generics except in valid use
locations specified by . This prevents incorrect usage like
typing.List[P][int]. This change means incorrect usage which may have
passed silently in 3.10 beta 1 and earlier will now error.

: Allow subclassing  in 3.10 (it was allowed in 3.9
and earlier but was disallowed in early versions of 3.10).

: ast.unparse() now doesnât use redundant spaces to
separate  and the  if there are no parameters.

: Fix regression in previous release when calling
pkgutil.iter_modules() with a list of pathlib.Path objects

: Register the SerenityOS Browser in the webbrowser
module.

: The  module no longer does unaligned memory
accesses when compiled for ARM platforms.

: Remove random module features deprecated in Python 3.9.

: random.seed() no longer mutates bytearray inputs.

: Add , , , , and
 to typing.__all__. Patch by Jelle Zijlstra.

================================================================================

# Changelog - Library (Part 36)

: urllib.parse now uses functool.lru_cache() for its
internal URL splitting and quoting caches instead of rolling its own like
its the â90s.

The undocumented internal urllib.parse  class API is now
deprecated, for removal in 3.14.

: When http.server.SimpleHTTPRequestHandler sends a
  Permanently) for a directory path not ending with ,
add a Content-Length:  header. This improves the behavior for certain
clients.

: Fix a bug in  where checkline() raises
AttributeError if it is called after .

: Improved string handling for  user-defined
functions and aggregates:

List:
It is now possible to pass strings with embedded null characters to UDFs
Conversion failures now correctly raise MemoryError

It is now possible to pass strings with embedded null characters to UDFs

Conversion failures now correctly raise MemoryError

Patch by Erlend E. Aasland.

: AIX: Lib/_aix_support.get_platform() may fail in an AIX
WPAR. The fileset bos.rte appears to have a builddate in both LPAR and
WPAR so this fileset is queried rather than bos.mp64. To prevent a similar
situation (no builddate in ODM) a value (9988) sufficient for completing a
build is provided. Patch by M Felt.

================================================================================

# Changelog - Library (Part 37)

: Fix MemoryError in shutil.unpack_archive() which
fails inside shutil._unpack_zipfile() on large files. Patch by Igor
Bolshakov.

: zlib.compress() now accepts a wbits parameter which
allows users to compress data as a raw deflate block without zlib headers
and trailers in one go. Previously this required instantiating a
zlib.compressobj. It also provides a faster alternative to
gzip.compress when wbits=31 is used.

: importlib._bootstrap._find_and_load() now implements a
two-step check to avoid locking when modules have been already imported
and are ready. This improves performance of repeated calls to
importlib.import_module() and importlib.__import__().

: Fix a bug where  does not always echo cleared
breakpoints.

: Prohibit passing
non-concurrent.futures.ThreadPoolExecutor executors to
loop.set_default_executor() following a deprecation in Python 3.8.
Patch by Illia Volochii.

: Prohibit previously deprecated potentially disruptive
operations on asyncio.trsock.TransportSocket. Patch by Illia
Volochii.

: Added support for Appleâs aifc/sowt pseudo-compression

: Add definition of errno.EQFULL for platforms that define
this constant (such as macOS).

================================================================================

# Changelog - Library (Part 38)

: Added a new optional strict_mode parameter to
binascii.a2b_base64. When scrict_mode is set to ,
the a2b_base64 function will accept only valid base64 content. More
details about what âvalid base64 contentâ is, can be found in the
functionâs documentation.

: Improve the help signature of
traceback.print_exception(), traceback.format_exception() and
traceback.format_exception_only().

: Add the traceback.TracebackException.print() method which
prints the formatted exception information.

:  now utilizes functools.lru_cache() to
implement the connection statement cache. As a small optimisation, the
default statement cache size has been increased from 100 to 128. Patch by
Erlend E. Aasland.

: Soumendra Ganguly: add termios.tcgetwinsize(),
termios.tcsetwinsize().

: subprocess.check_output() now raises ValueError
when the invalid keyword argument  is passed by user code.
Previously such use would fail later with a . Patch by
RÃ©mi Lapeyre.

:  now uses importlib.resources.files()
traversable APIs

: Use Argument Clinic in .  Patches by Erlend E.
Aasland.

: DeprecationWarning is now raised when importing
tkinter.tix, which has been deprecated in documentation since
Python 3.6.

================================================================================

# Changelog - Library (Part 39)

: Remove unused _signature_get_bound_param function from
 - by Anthony Sottile.

: Fix email.message.EmailMessage.set_content() when called
with binary data and  content transfer encoding.

: The compresslevel and  keyword arguments of
tarfile.open() are now both documented and tested.

: Use utf-8 encoding while reading .pdbrc files. Patch by
Srinivas Reddy Thatiparthy

: Improved reprs of  synchronization objects:
, BoundedSemaphore,
 and .

: Deprecated the following  functions, scheduled
for removal in Python 3.13:

List:
findTestCases()
makeSuite()
getTestCaseNames()

Use TestLoader methods instead:

List:
unittest.TestLoader.loadTestsFromModule()
unittest.TestLoader.loadTestsFromTestCase()
unittest.TestLoader.getTestCaseNames()

unittest.TestLoader.loadTestsFromModule()

unittest.TestLoader.loadTestsFromTestCase()

unittest.TestLoader.getTestCaseNames()

Patch by Erlend E. Aasland.

: Support pathlike objects on dbm/shelve. Patch by Hakan Ãelik
and Henry-Joseph AudÃ©oud.

: Fixed a Y2k38 bug in the compileall module where it would fail
to compile files with a modification time after the year 2038.

================================================================================

# Changelog - Library (Part 40)

: Whereas the code for reprlib.Repr had previously used a
hardcoded string value of ââ¦â, this PR updates it to use of a
âfillvalueâ attribute, whose value defaults to ââ¦â and can be reset in
either individual reprlib.Repr instances or in subclasses thereof.

:  now displays exceptions from  with its
 and  commands.

: Fix test___all__ on platforms lacking a shared memory
implementation.

: Add one missing check that the password is a bytes object for
an encrypted zipfile.

: configparser: using â]â inside a section header will no
longer cut the section name short at the â]â

: Added missing behavior to
contextlib.asynccontextmanager() to match
contextlib.contextmanager() so decorated functions can themselves be
decorators.

: Pass multiprocessing BaseProxy argument manager_owned
through AutoProxy.

: email.utils.getaddresses() now accepts
email.header.Header objects along with string values. Patch by
Zackery Spytz.

: Add SQLite error code and name to  exceptions.
Patch by Aviv Palivoda, Daniel Shahaf, and Erlend E. Aasland.

: pty.spawn no longer hangs on FreeBSD, macOS, and Solaris.

: lib2to3 now recognizes async generators everywhere.

================================================================================

# Changelog - Library (Part 41)

: Fix  when required subparsers without  do
not receive arguments. Patch by Anthony Sottile.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Remove extra documentation listing methods in . It
was rendering twice in pydoc and was outdated in some places.
: collections.abc documentation has been expanded to
explicitly cover how instance and subclass checks work, with additional
doctest examples and an exhaustive list of ABCs which test membership
purely by presence of the right special methods. Patch by Raymond
Hettinger.
: Promote PEP 604 union syntax by using it where possible. Also,
mention    more prominently in section about  and mention
   at all in section about .
: Added code equivalents for the int.to_bytes() and
int.from_bytes() methods, as well as tests ensuring that these code
equivalents are valid.
: Removed the othergui.rst file, any references to it, and
the list of GUI frameworks in the FAQ. In their place Iâve added links to
the Python Wiki page on GUI frameworks.
: Tkinter documentation has been greatly expanded with new
âArchitectureâ and âThreading modelâ sections.
:  RFC references were updated to point to
; a section was added to point users to the new âsecurity
considerationsâ section of the RFC.
: Replaced occurrences of uppercase âWebâ and âInternetâ with
lowercase versions per the 2016 revised Associated Press Style Book.
: Update the definition of __future__ in the glossary by
replacing the confusing word âpseudo-moduleâ with a more accurate
description.
: Add typical examples to os.path.splitext docs
: Clarify that shutil.make_archive() is not thread-safe due
to reliance on changing the current working directory.
: Update of three expired hyperlinks in
Doc/distributing/index.rst: âProject structureâ, âBuilding and packaging
the projectâ, and âUploading the project to the Python Packaging Indexâ.
: Delete entry âcoercionâ in Doc/glossary.rst for its outdated
definition.
: Updated the docstring and docs of filecmp.cmp() to be
more accurate and less confusing especially in respect to  arg.
: Refactored the  code of the  (os module).
: importlib.metadata is no longer provisional.
: Match the docstring and python implementation of
 to the behavior of its c implementation.
: List all kwargs for textwrap.wrap(),
textwrap.fill(), and textwrap.shorten(). Now, there are nav
links to attributes of , which makes navigation much
easier while minimizing duplication in the documentation.
: Clarify that atexit uses equality comparisons internally.
: Convert examples in tutorial controlflow.rst section 4.3 to be
interpreter-demo style.
: Added a warning to  docs: filename arg with a
leading slash may cause archive to be un-openable on Windows systems.
: Rewrote Doc/library/__main__.rst. Broadened scope of the
document to explicitly discuss and differentiate between __main__.py
in packages versus the   '__main__' expression (and the
idioms that surround it).
: In the Design FAQ, answer âWhy donât generators support the
with statement?â
: Documentation of csv.Dialect is more descriptive.
: Fix documentation for the return type of
sysconfig.get_path().
: Added a new section in the C API documentation for types used
in type hinting.  Documented Py_GenericAlias and
Py_GenericAliasType.
: Mark  and  as deprecated since Python
3.8 in the documentation. They were never properly supported by type
checkers.
: Document that SyntaxError args have a details tuple and that
details are adjusted for errors in f-string field replacement expressions.
: Document the deprecation and removal of the  parameter
for many functions and classes in .
: Corrected references to TraversableResources in docs. There
is no TraversableReader.
: Document that ConfigParser strips off comments when reading
configuration files.
: Correct where in the numeric ABC hierarchy  support is
added, i.e., in numbers.Complex, not numbers.Integral.
: Add the remark to dataclasses documentation that the
__init__() of any base class has to be called in
__post_init__(), along with a code example.
: Clarify when â_â in match statements is a keyword, and when
not.
: Fix docs about how methods like  are invoked when
evaluating operator expressions.
: Document that collections.defaultdict parameter
default_factory defaults to  and is positional-only.
: document BaseException in favor of bare except
: The description for __file__ fixed. Patch by Furkan Onder
: Add a âSecurity Considerationsâ index which links to standard
library modules that have explicitly documented security considerations.
: Remove the unqualified claim that tkinter is threadsafe. It has
not been true for several years and likely never was. An explanation of
what is true may be added later, after more discussion, and possibly after
patching _tkinter.c,

================================================================================

# Changelog - Documentation (Part 2)

: Remove extra documentation listing methods in . It
was rendering twice in pydoc and was outdated in some places.

: collections.abc documentation has been expanded to
explicitly cover how instance and subclass checks work, with additional
doctest examples and an exhaustive list of ABCs which test membership
purely by presence of the right special methods. Patch by Raymond
Hettinger.

: Promote PEP 604 union syntax by using it where possible. Also,
mention    more prominently in section about  and mention
   at all in section about .

: Added code equivalents for the int.to_bytes() and
int.from_bytes() methods, as well as tests ensuring that these code
equivalents are valid.

: Removed the othergui.rst file, any references to it, and
the list of GUI frameworks in the FAQ. In their place Iâve added links to
the Python Wiki page on GUI frameworks.

: Tkinter documentation has been greatly expanded with new
âArchitectureâ and âThreading modelâ sections.

:  RFC references were updated to point to
; a section was added to point users to the new âsecurity
considerationsâ section of the RFC.

================================================================================

# Changelog - Documentation (Part 3)

: Replaced occurrences of uppercase âWebâ and âInternetâ with
lowercase versions per the 2016 revised Associated Press Style Book.

: Update the definition of __future__ in the glossary by
replacing the confusing word âpseudo-moduleâ with a more accurate
description.

: Add typical examples to os.path.splitext docs

: Clarify that shutil.make_archive() is not thread-safe due
to reliance on changing the current working directory.

: Update of three expired hyperlinks in
Doc/distributing/index.rst: âProject structureâ, âBuilding and packaging
the projectâ, and âUploading the project to the Python Packaging Indexâ.

: Delete entry âcoercionâ in Doc/glossary.rst for its outdated
definition.

: Updated the docstring and docs of filecmp.cmp() to be
more accurate and less confusing especially in respect to  arg.

: Refactored the  code of the  (os module).

: importlib.metadata is no longer provisional.

: Match the docstring and python implementation of
 to the behavior of its c implementation.

================================================================================

# Changelog - Documentation (Part 4)

: List all kwargs for textwrap.wrap(),
textwrap.fill(), and textwrap.shorten(). Now, there are nav
links to attributes of , which makes navigation much
easier while minimizing duplication in the documentation.

: Clarify that atexit uses equality comparisons internally.

: Convert examples in tutorial controlflow.rst section 4.3 to be
interpreter-demo style.

: Added a warning to  docs: filename arg with a
leading slash may cause archive to be un-openable on Windows systems.

: Rewrote Doc/library/__main__.rst. Broadened scope of the
document to explicitly discuss and differentiate between __main__.py
in packages versus the   '__main__' expression (and the
idioms that surround it).

: In the Design FAQ, answer âWhy donât generators support the
with statement?â

: Documentation of csv.Dialect is more descriptive.

: Fix documentation for the return type of
sysconfig.get_path().

: Added a new section in the C API documentation for types used
in type hinting.  Documented Py_GenericAlias and
Py_GenericAliasType.

: Mark  and  as deprecated since Python
3.8 in the documentation. They were never properly supported by type
checkers.

================================================================================

# Changelog - Documentation (Part 5)

: Document that SyntaxError args have a details tuple and that
details are adjusted for errors in f-string field replacement expressions.

: Document the deprecation and removal of the  parameter
for many functions and classes in .

: Corrected references to TraversableResources in docs. There
is no TraversableReader.

: Document that ConfigParser strips off comments when reading
configuration files.

: Correct where in the numeric ABC hierarchy  support is
added, i.e., in numbers.Complex, not numbers.Integral.

: Add the remark to dataclasses documentation that the
__init__() of any base class has to be called in
__post_init__(), along with a code example.

: Clarify when â_â in match statements is a keyword, and when
not.

: Fix docs about how methods like  are invoked when
evaluating operator expressions.

: Document that collections.defaultdict parameter
default_factory defaults to  and is positional-only.

: document BaseException in favor of bare except

: The description for __file__ fixed. Patch by Furkan Onder

: Add a âSecurity Considerationsâ index which links to standard
library modules that have explicitly documented security considerations.

================================================================================

# Changelog - Documentation (Part 6)

: Remove the unqualified claim that tkinter is threadsafe. It has
not been true for several years and likely never was. An explanation of
what is true may be added later, after more discussion, and possibly after
patching _tkinter.c,

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test.support.import_helper.import_fresh_module().
: Add a test case for empty typing.NamedTuple.
: Cover case when invalid  type is supplied to
c_make_encoder.
: Fix test_multiprocessing_fork failure due to
test_logging and sys.modules manipulation.
: Fix UserWarning: resource_tracker warning in
_test_multiprocessing._TestSharedMemory.test_shared_memory_cleaned_after_process_termination
: Enables TestEnumerations test cases in  suite.
: Fix test_readline.test_nonascii(): sometimes, the newline
character is not written at the end, so donât expect it in the output.
Patch by Victor Stinner.
: Fixes infinite loop on unittest.mock.seal() of mocks
created by create_autospec().
: Improves pickling tests and docs of SharedMemory and
SharableList objects.
: Update test_sysconfig.test_user_similar() for the
posix_user scheme:  doesnât use sys.platlibdir. Patch
by Victor Stinner.
: WithProcessesTestSharedMemory.test_shared_memory_basics
test was ignored, because self.assertEqual(sms.size, sms2.size) line
was failing. It is now removed and test is unskipped.
The main motivation for this line to be removed from the test is that the
 of SharedMemory is not ever guaranteed to be the same. It is
decided by the platform.

================================================================================

# Changelog - Tests (Part 2)

: libregrtest now clears the type cache later to reduce the risk
of false alarm when checking for reference leaks. Previously, the type
cache was cleared too early and libregrtest raised a false alarm about
reference leaks under very specific conditions. Patch by Irit Katriel and
Victor Stinner.
: Fixes that test classes decorated with
@hashlib_helper.requires_hashdigest were skipped all the time.
: Add calls of gc.collect() in tests to support PyPy.
: Made tests relying on the  C extension module
optional to allow running on alternative Python implementations. Patch by
Serhiy Storchaka.
: Fix auto history tests of test_readline: sometimes, the newline
character is not written at the end, so donât expect it in the output.
: Tests were added to clarify  is preserved when 
  is used on  and  objects. Patch by Nikita
Sobolev.
: Add ability to wholesale silence DeprecationWarnings while
running the regression test suite.
: Notify users running test_decimal regression tests on macOS of
potential harmless âmalloc canât allocate regionâ messages spewed by
test_decimal.
: Fixed floating-point precision issue in turtle tests.
: Regression tests, when run with -w, are now re-running only the
affected test methods instead of re-running the entire test file.
: Added interop tests for Apple plists: generate plist files with
Python plistlib and parse with Apple plutil; and the other way round.
: Added a permanent Unicode-valued environment variable to
regression tests to ensure they handle this use case in the future. If
your test environment breaks because of that, report a bug to us, and
temporarily set PYTHONREGRTEST_UNICODE_GUARD=0 in your test environment.
: Adjust recently added contextlib tests to avoid assuming the
use of a refcounted GC
: Fix asyncio test_popen() of test_windows_utils by using a
longer timeout. Use military grade battle-tested
test.support.SHORT_TIMEOUT timeout rather than a hardcoded timeout
of 10 seconds: itâs 30 seconds by default, but it is made longer on slow
buildbots. Patch by Victor Stinner.
: Reset DeprecationWarning filters in
test.test_importlib.test_metadata_api.APITests.test_entry_points_by_index
to avoid StopIteration error if DeprecationWarnings are ignored.
: Account for address sanitizer in test_capi. test_capi now
passes when run GCC address sanitizer.
: Add non integral tests for math.sqrt() function.
: Fix test_ssl.test_wrong_cert_tls13(): use
suppress_ragged_eofs=False, since  can raise
ssl.SSLEOFError on Windows. Patch by Victor Stinner.
: Fix test_pha_required_nocert() of test_ssl: catch two more EOF
cases (when the  method returns an empty string). Patch by
Victor Stinner.
: Add test_frozenmain to test_embed to test the
Py_FrozenMain() C function. Patch by Victor Stinner.
: Ignore error string case in test_file_not_exists().
: Add test to check that PyStructSequence_NewType accepts a
PyStructSequence_Desc with  field set to .
: Fix crash in doctest when doctest parses modules that include
unwrappable functions by skipping those functions.
: Add test for nested queues when using multiprocessing
shared objects AutoProxy[Queue] inside  and

================================================================================

# Changelog - Tests (Part 3)

: Fix test.support.import_helper.import_fresh_module().

: Add a test case for empty typing.NamedTuple.

: Cover case when invalid  type is supplied to
c_make_encoder.

: Fix test_multiprocessing_fork failure due to
test_logging and sys.modules manipulation.

: Fix UserWarning: resource_tracker warning in
_test_multiprocessing._TestSharedMemory.test_shared_memory_cleaned_after_process_termination

: Enables TestEnumerations test cases in  suite.

: Fix test_readline.test_nonascii(): sometimes, the newline
character is not written at the end, so donât expect it in the output.
Patch by Victor Stinner.

: Fixes infinite loop on unittest.mock.seal() of mocks
created by create_autospec().

: Improves pickling tests and docs of SharedMemory and
SharableList objects.

: Update test_sysconfig.test_user_similar() for the
posix_user scheme:  doesnât use sys.platlibdir. Patch
by Victor Stinner.

: WithProcessesTestSharedMemory.test_shared_memory_basics
test was ignored, because self.assertEqual(sms.size, sms2.size) line
was failing. It is now removed and test is unskipped.

================================================================================

# Changelog - Tests (Part 4)

The main motivation for this line to be removed from the test is that the
 of SharedMemory is not ever guaranteed to be the same. It is
decided by the platform.

: libregrtest now clears the type cache later to reduce the risk
of false alarm when checking for reference leaks. Previously, the type
cache was cleared too early and libregrtest raised a false alarm about
reference leaks under very specific conditions. Patch by Irit Katriel and
Victor Stinner.

: Fixes that test classes decorated with
@hashlib_helper.requires_hashdigest were skipped all the time.

: Add calls of gc.collect() in tests to support PyPy.

: Made tests relying on the  C extension module
optional to allow running on alternative Python implementations. Patch by
Serhiy Storchaka.

: Fix auto history tests of test_readline: sometimes, the newline
character is not written at the end, so donât expect it in the output.

: Tests were added to clarify  is preserved when 
  is used on  and  objects. Patch by Nikita
Sobolev.

: Add ability to wholesale silence DeprecationWarnings while
running the regression test suite.

================================================================================

# Changelog - Tests (Part 5)

: Notify users running test_decimal regression tests on macOS of
potential harmless âmalloc canât allocate regionâ messages spewed by
test_decimal.

: Fixed floating-point precision issue in turtle tests.

: Regression tests, when run with -w, are now re-running only the
affected test methods instead of re-running the entire test file.

: Added interop tests for Apple plists: generate plist files with
Python plistlib and parse with Apple plutil; and the other way round.

: Added a permanent Unicode-valued environment variable to
regression tests to ensure they handle this use case in the future. If
your test environment breaks because of that, report a bug to us, and
temporarily set PYTHONREGRTEST_UNICODE_GUARD=0 in your test environment.

: Adjust recently added contextlib tests to avoid assuming the
use of a refcounted GC

: Fix asyncio test_popen() of test_windows_utils by using a
longer timeout. Use military grade battle-tested
test.support.SHORT_TIMEOUT timeout rather than a hardcoded timeout
of 10 seconds: itâs 30 seconds by default, but it is made longer on slow
buildbots. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 6)

: Reset DeprecationWarning filters in
test.test_importlib.test_metadata_api.APITests.test_entry_points_by_index
to avoid StopIteration error if DeprecationWarnings are ignored.

: Account for address sanitizer in test_capi. test_capi now
passes when run GCC address sanitizer.

: Add non integral tests for math.sqrt() function.

: Fix test_ssl.test_wrong_cert_tls13(): use
suppress_ragged_eofs=False, since  can raise
ssl.SSLEOFError on Windows. Patch by Victor Stinner.

: Fix test_pha_required_nocert() of test_ssl: catch two more EOF
cases (when the  method returns an empty string). Patch by
Victor Stinner.

: Add test_frozenmain to test_embed to test the
Py_FrozenMain() C function. Patch by Victor Stinner.

: Ignore error string case in test_file_not_exists().

: Add test to check that PyStructSequence_NewType accepts a
PyStructSequence_Desc with  field set to .

: Fix crash in doctest when doctest parses modules that include
unwrappable functions by skipping those functions.

: Add test for nested queues when using multiprocessing
shared objects AutoProxy[Queue] inside  and

================================================================================

# Changelog - Build (Part 1)

List:
: Avoid building with the Windows 11 SDK previews automatically.
This may be overridden by setting the DefaultWindowsSDKVersion
environment variable before building.
: Freeze stdlib modules that are imported during startup.  This
provides significant performance improvements to startup.  If necessary,
use the previously added â-X frozen_modules=offâ commandline option to
force importing the source modules.
: Windows builds now regenerate frozen modules as the first part
of the build. Previously the regeneration was later in the build, which
would require it to be restarted if any modules had changed.
: Fixes Haiku platform build.
: The ncurses function extended_color_content was introduced in
2017
(https://invisible-island.net/ncurses/NEWS.html#index-t20170401).  The
ncurses-devel package in CentOS 7 had a older version ncurses resulted in
compilation error.  For compiling ncurses with extended color support, we
verify the version of the ncurses library >= 20170401.

================================================================================

# Changelog - Build (Part 2)

: Generate lines in relevant files for frozen modules.  Up until
now each of the files had to be edited manually.  This change makes it
easier to add to and modify the frozen modules.
: Add support for building with clang thin lto via
âwith-lto=thin/full. Patch by Donghee Na and Brett Holman.
: Enable building using a Visual Studio 2022 install on Windows.
: Improved error message when building without a Windows SDK
installed.
: The Windows build now accepts EnableControlFlowGuard
set to  to enable CFG.
: Fix broken   that caused standard library
extension modules to be unnecessarily and incorrectly rebuilt during the
install phase of cpython.

: Avoid building with the Windows 11 SDK previews automatically.
This may be overridden by setting the DefaultWindowsSDKVersion
environment variable before building.

: Freeze stdlib modules that are imported during startup.  This
provides significant performance improvements to startup.  If necessary,
use the previously added â-X frozen_modules=offâ commandline option to
force importing the source modules.

================================================================================

# Changelog - Build (Part 3)

: Windows builds now regenerate frozen modules as the first part
of the build. Previously the regeneration was later in the build, which
would require it to be restarted if any modules had changed.

: Fixes Haiku platform build.

: The ncurses function extended_color_content was introduced in
2017

(https://invisible-island.net/ncurses/NEWS.html#index-t20170401).  The

ncurses-devel package in CentOS 7 had a older version ncurses resulted in
compilation error.  For compiling ncurses with extended color support, we
verify the version of the ncurses library >= 20170401.

: Generate lines in relevant files for frozen modules.  Up until
now each of the files had to be edited manually.  This change makes it
easier to add to and modify the frozen modules.

: Add support for building with clang thin lto via
âwith-lto=thin/full. Patch by Donghee Na and Brett Holman.

: Enable building using a Visual Studio 2022 install on Windows.

: Improved error message when building without a Windows SDK
installed.

: The Windows build now accepts EnableControlFlowGuard
set to  to enable CFG.

================================================================================

# Changelog - Build (Part 4)

: Fix broken   that caused standard library
extension modules to be unnecessarily and incorrectly rebuilt during the
install phase of cpython.

================================================================================

# Changelog - Windows (Part 1)

List:
: Fixes an assertion failure due to searching for the standard
library in unnormalised paths.
: Update Windows release to include libffi 3.4.2
: Update to OpenSSL 1.1.1l in Windows build
: Upgrade Windows installer to use SQLite 3.36.0.
: Avoid consuming standard input in the  module
: Accelerate speed of  initialization using a
native implementation of the registry scan.
: Fix 16 milliseconds jitter when using timeouts in
, such as with threading.Lock.acquire() or
threading.Condition.wait().
: Build  with math functions enabled. Patch by
Erlend E. Aasland.
: This is a follow-on bug from
https://bugs.python.org/issue26903. Once that is applied we run into an
off-by-one assertion problem. The assert was not correct.

: Fixes an assertion failure due to searching for the standard
library in unnormalised paths.

: Update Windows release to include libffi 3.4.2

: Update to OpenSSL 1.1.1l in Windows build

: Upgrade Windows installer to use SQLite 3.36.0.

: Avoid consuming standard input in the  module

: Accelerate speed of  initialization using a
native implementation of the registry scan.

================================================================================

# Changelog - Windows (Part 2)

: Fix 16 milliseconds jitter when using timeouts in
, such as with threading.Lock.acquire() or
threading.Condition.wait().

: Build  with math functions enabled. Patch by
Erlend E. Aasland.

: This is a follow-on bug from
https://bugs.python.org/issue26903. Once that is applied we run into an
off-by-one assertion problem. The assert was not correct.

================================================================================

# Changelog - macOS (Part 1)

List:
: Update macOS installer builds to use OpenSSL 1.1.1l.
: When building CPython on macOS with ./configure
--with-undefined-behavior-sanitizer --with-pydebug, the stack size is
now quadrupled to allow for the entire test suite to pass.
: Update macOS installer to use SQLite 3.36.0.
: ctypes.util.find_library() now works correctly on macOS
11 Big Sur even if Python is built on an older version of macOS.
Previously, when built on older macOS systems, find_library was not
able to find  macOS system libraries when running on Big Sur due to
changes in  how system libraries are stored.
: The framework buildâs user header path in sysconfig is changed
to add a âpythonX.Yâ component to match distutilsâs behavior.
: Allow âwith-lto configure option to work with Apple-supplied
Xcode or Command Line Tools.
: Add socket.TCP_KEEPALIVE support for macOS. Patch by Shane
Harvey.

: Update macOS installer builds to use OpenSSL 1.1.1l.

: When building CPython on macOS with ./configure
--with-undefined-behavior-sanitizer --with-pydebug, the stack size is
now quadrupled to allow for the entire test suite to pass.

: Update macOS installer to use SQLite 3.36.0.

================================================================================

# Changelog - macOS (Part 2)

: ctypes.util.find_library() now works correctly on macOS
11 Big Sur even if Python is built on an older version of macOS.
Previously, when built on older macOS systems, find_library was not
able to find  macOS system libraries when running on Big Sur due to
changes in  how system libraries are stored.

: The framework buildâs user header path in sysconfig is changed
to add a âpythonX.Yâ component to match distutilsâs behavior.

: Allow âwith-lto configure option to work with Apple-supplied
Xcode or Command Line Tools.

: Add socket.TCP_KEEPALIVE support for macOS. Patch by Shane
Harvey.

================================================================================

# Changelog - IDLE (Part 1)

List:
: On Windows, change exit/quit message to suggest Ctrl-D, which
works, instead of <Ctrl-Z Return>, which does not work in IDLE.
: Make completion boxes appear on Ubuntu again.
: Mostly fix completions on macOS when not using tcl/tk 8.6.11
(as with 3.9). The added update_idletask call should be harmless and
possibly helpful otherwise.
: Move the indent space setting from the Font tab to the new
Windows tab. Patch by Mark Roseman and Terry Jan Reedy.
: Split the settings dialog General tab into Windows and Shell/ED
tabs. Move help sources, which extend the Help menu, to the Extensions
tab. Make space for new options and shorten the dialog. The latter makes
the dialog better fit small screens.
: Avoid uncaught exceptions in
AutoCompleteWindow.winconfig_event().
: Fix IDLE sometimes freezing upon tab-completion on macOS.
: Highlight the new  statementâs soft
keywords: , , and
. However, this highlighting is not
perfect and will be incorrect in some rare cases, including some -s
in  patterns.
: Include interpreterâs typo fix suggestions in message line for
NameErrors and AttributeErrors.  Patch by E. Paine.

================================================================================

# Changelog - IDLE (Part 2)

: On Windows, change exit/quit message to suggest Ctrl-D, which
works, instead of <Ctrl-Z Return>, which does not work in IDLE.

: Make completion boxes appear on Ubuntu again.

: Mostly fix completions on macOS when not using tcl/tk 8.6.11
(as with 3.9). The added update_idletask call should be harmless and
possibly helpful otherwise.

: Move the indent space setting from the Font tab to the new
Windows tab. Patch by Mark Roseman and Terry Jan Reedy.

: Split the settings dialog General tab into Windows and Shell/ED
tabs. Move help sources, which extend the Help menu, to the Extensions
tab. Make space for new options and shorten the dialog. The latter makes
the dialog better fit small screens.

: Avoid uncaught exceptions in
AutoCompleteWindow.winconfig_event().

: Fix IDLE sometimes freezing upon tab-completion on macOS.

: Highlight the new  statementâs soft
keywords: , , and
. However, this highlighting is not
perfect and will be incorrect in some rare cases, including some -s
in  patterns.

: Include interpreterâs typo fix suggestions in message line for
NameErrors and AttributeErrors.  Patch by E. Paine.

================================================================================

# Changelog - Tools/Demos

List:
: Fix a warning in regular expression in the c-analyzer script.
: pydoc now returns a non-zero status code when a module cannot
be found.
: Allow the Argument Clinic tool to handle __complex__
special methods.
: Removed the âtest2to3â demo project that demonstrated using
lib2to3 to support Python 2.x and Python 3.x from a single source in a
distutils package. Patch by Donghee Na
: Make patchcheck automatically detect the correct base branch
name (previously it was hardcoded to âmasterâ)
: Added support for variadic positional parameters in Argument
Clinic.

: Fix a warning in regular expression in the c-analyzer script.

: pydoc now returns a non-zero status code when a module cannot
be found.

: Allow the Argument Clinic tool to handle __complex__
special methods.

: Removed the âtest2to3â demo project that demonstrated using
lib2to3 to support Python 2.x and Python 3.x from a single source in a
distutils package. Patch by Donghee Na

: Make patchcheck automatically detect the correct base branch
name (previously it was hardcoded to âmasterâ)

: Added support for variadic positional parameters in Argument
Clinic.

================================================================================

# Changelog - C API (Part 1)

List:
: The PyThread_acquire_lock_timed() function now clamps the
timeout if it is too large, rather than aborting the process. Patch by
Victor Stinner.
: BufferedReader.peek() no longer raises ValueError
when the entire file has already been buffered.
: Add the Py_ALWAYS_INLINE macro to ask the compiler
to always inline a static inline function. The compiler can ignore it and
decides to not inline the function. Patch by Victor Stinner.
: Add the Py_NO_INLINE macro to disable inlining on a
function. Patch by Victor Stinner.
: Add a deallocator to the  type to detect refcount
bugs in C extensions which call Py_DECREF(Py_True); or
Py_DECREF(Py_False); by mistake. Patch by Victor Stinner.
: Add a new PyType_GetQualName() function to get typeâs
qualified name.
: Reverts removal of the old buffer protocol because they are
part of stable ABI.
: Remove  include from the public  header.
: The Py_TPFLAGS_HAVE_VERSION_TAG type flag now does nothing.
The Py_TPFLAGS_HAVE_AM_SEND flag (which was added in 3.10) is removed.
Both were unnecessary because it is not possible to have type objects with
the relevant fields missing.
: Added the co_qualname to the PyCodeObject structure to
propagate the qualified name from the compiler to code objects.
Patch by Gabriele N. Tornetta

================================================================================

# Changelog - C API (Part 2)

: Py_RunMain() now resets PyImport_Inittab to
its initial value at exit. It must be possible to call
PyImport_AppendInittab() or PyImport_ExtendInittab() at
each Python initialization. Patch by Victor Stinner.
: Remove 4 private trashcan C API functions which were only kept
for the backward compatibility of the stable ABI with Python 3.8 and
older, since the trashcan API was not usable with the limited C API on
Python 3.8 and older. The trashcan API was excluded from the limited C API
in Python 3.9.
Removed functions:

_PyTrash_deposit_object()
_PyTrash_destroy_chain()
_PyTrash_thread_deposit_object()
_PyTrash_thread_destroy_chain()

The trashcan C API was never usable with the limited C API, since old
trashcan macros accessed directly PyThreadState members like
_tstate->trash_delete_nesting, whereas the PyThreadState
structure is opaque in the limited C API.
Exclude also the PyTrash_UNWIND_LEVEL constant from the C API.
Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 3)

: Removed documentation for the removed PyParser_* C API.
: The list in Contents of Limited API now shows the public name
PyFrameObject rather than . The non-existing entry
 no longer appears in the list.
: Py_IS_TYPE() no longer uses  to avoid
a compiler warning: no longer cast   to .
Patch by Victor Stinner.
: Convert the  and  macros to
static inline functions. The Py_SET_TYPE() and
Py_SET_SIZE() functions must now be used to set an object type and
size. Patch by Victor Stinner.
: The PyType_Ready() function now raises an error if a
type is defined with the Py_TPFLAGS_HAVE_GC flag set but has no
traverse function (PyTypeObject.tp_traverse). Patch by Victor
Stinner.
: The undocumented function Py_FrozenMain() is removed
from the Limited API.
: Deprecate the following functions to configure the Python
initialization:

PySys_AddWarnOptionUnicode()
PySys_AddWarnOption()
PySys_AddXOption()
PySys_HasWarnOptions()
Py_SetPath()
Py_SetProgramName()
Py_SetPythonHome()
Py_SetStandardStreamEncoding()
_Py_SetProgramFullPath()

Use the new  API of the Python Initialization
Configuration instead ().

================================================================================

# Changelog - C API (Part 4)

: Remove PyErr_SetFromErrnoWithUnicodeFilename(),
PyErr_SetFromWindowsErrWithUnicodeFilename(), and
PyErr_SetExcFromWindowsErrWithUnicodeFilename(). They are not
documented and have been deprecated since Python 3.3.
: PyCodec_Unregister() is now properly exported as a
function in the Windows Stable ABI DLL.
: Remove deprecated Py_UNICODE APIs: PyUnicode_Encode,
PyUnicode_EncodeUTF7, PyUnicode_EncodeUTF8,
PyUnicode_EncodeUTF16, PyUnicode_EncodeUTF32,
PyUnicode_EncodeLatin1, PyUnicode_EncodeMBCS,
PyUnicode_EncodeDecimal, PyUnicode_EncodeRawUnicodeEscape,
PyUnicode_EncodeCharmap, PyUnicode_EncodeUnicodeEscape,
PyUnicode_TransformDecimalToASCII, PyUnicode_TranslateCharmap,
PyUnicodeEncodeError_Create, PyUnicodeTranslateError_Create. See
 and  for reference.
: Add a new PyType_GetName() function to get typeâs short
name.

: The PyThread_acquire_lock_timed() function now clamps the
timeout if it is too large, rather than aborting the process. Patch by
Victor Stinner.

: BufferedReader.peek() no longer raises ValueError
when the entire file has already been buffered.

================================================================================

# Changelog - C API (Part 5)

: Add the Py_ALWAYS_INLINE macro to ask the compiler
to always inline a static inline function. The compiler can ignore it and
decides to not inline the function. Patch by Victor Stinner.

: Add the Py_NO_INLINE macro to disable inlining on a
function. Patch by Victor Stinner.

: Add a deallocator to the  type to detect refcount
bugs in C extensions which call Py_DECREF(Py_True); or
Py_DECREF(Py_False); by mistake. Patch by Victor Stinner.

: Add a new PyType_GetQualName() function to get typeâs
qualified name.

: Reverts removal of the old buffer protocol because they are
part of stable ABI.

: Remove  include from the public  header.

: The Py_TPFLAGS_HAVE_VERSION_TAG type flag now does nothing.
The Py_TPFLAGS_HAVE_AM_SEND flag (which was added in 3.10) is removed.
Both were unnecessary because it is not possible to have type objects with
the relevant fields missing.

: Added the co_qualname to the PyCodeObject structure to
propagate the qualified name from the compiler to code objects.

Patch by Gabriele N. Tornetta

================================================================================

# Changelog - C API (Part 6)

: Py_RunMain() now resets PyImport_Inittab to
its initial value at exit. It must be possible to call
PyImport_AppendInittab() or PyImport_ExtendInittab() at
each Python initialization. Patch by Victor Stinner.

: Remove 4 private trashcan C API functions which were only kept
for the backward compatibility of the stable ABI with Python 3.8 and
older, since the trashcan API was not usable with the limited C API on
Python 3.8 and older. The trashcan API was excluded from the limited C API
in Python 3.9.

List:
_PyTrash_deposit_object()
_PyTrash_destroy_chain()
_PyTrash_thread_deposit_object()
_PyTrash_thread_destroy_chain()

_PyTrash_deposit_object()

_PyTrash_destroy_chain()

_PyTrash_thread_deposit_object()

_PyTrash_thread_destroy_chain()

The trashcan C API was never usable with the limited C API, since old
trashcan macros accessed directly PyThreadState members like
_tstate->trash_delete_nesting, whereas the PyThreadState
structure is opaque in the limited C API.

Exclude also the PyTrash_UNWIND_LEVEL constant from the C API.

Patch by Victor Stinner.

: Removed documentation for the removed PyParser_* C API.

================================================================================

# Changelog - C API (Part 7)

: The list in Contents of Limited API now shows the public name
PyFrameObject rather than . The non-existing entry
 no longer appears in the list.

: Py_IS_TYPE() no longer uses  to avoid
a compiler warning: no longer cast   to .
Patch by Victor Stinner.

: Convert the  and  macros to
static inline functions. The Py_SET_TYPE() and
Py_SET_SIZE() functions must now be used to set an object type and
size. Patch by Victor Stinner.

: The PyType_Ready() function now raises an error if a
type is defined with the Py_TPFLAGS_HAVE_GC flag set but has no
traverse function (PyTypeObject.tp_traverse). Patch by Victor
Stinner.

: The undocumented function Py_FrozenMain() is removed
from the Limited API.

: Deprecate the following functions to configure the Python
initialization:

List:
PySys_AddWarnOptionUnicode()
PySys_AddWarnOption()
PySys_AddXOption()
PySys_HasWarnOptions()
Py_SetPath()
Py_SetProgramName()
Py_SetPythonHome()
Py_SetStandardStreamEncoding()
_Py_SetProgramFullPath()

PySys_AddWarnOptionUnicode()

PySys_AddWarnOption()

PySys_HasWarnOptions()

Py_SetStandardStreamEncoding()

_Py_SetProgramFullPath()

Use the new  API of the Python Initialization
Configuration instead ().

================================================================================

# Changelog - C API (Part 8)

: Remove PyErr_SetFromErrnoWithUnicodeFilename(),
PyErr_SetFromWindowsErrWithUnicodeFilename(), and
PyErr_SetExcFromWindowsErrWithUnicodeFilename(). They are not
documented and have been deprecated since Python 3.3.

: PyCodec_Unregister() is now properly exported as a
function in the Windows Stable ABI DLL.

: Remove deprecated Py_UNICODE APIs: PyUnicode_Encode,
PyUnicode_EncodeUTF7, PyUnicode_EncodeUTF8,
PyUnicode_EncodeUTF16, PyUnicode_EncodeUTF32,
PyUnicode_EncodeLatin1, PyUnicode_EncodeMBCS,
PyUnicode_EncodeDecimal, PyUnicode_EncodeRawUnicodeEscape,
PyUnicode_EncodeCharmap, PyUnicode_EncodeUnicodeEscape,
PyUnicode_TransformDecimalToASCII, PyUnicode_TranslateCharmap,
PyUnicodeEncodeError_Create, PyUnicodeTranslateError_Create. See
 and  for reference.

: Add a new PyType_GetName() function to get typeâs short
name.

================================================================================

# Changelog - Security (Part 1)

List:
: Creating sqlite3.Connection objects now also produces
sqlite3.connect and sqlite3.connect/handle auditing events. Previously these events were only produced by
sqlite3.connect() calls. Patch by Erlend E. Aasland.
: The  module sets more secure cipher suites defaults.
Ciphers without forward secrecy and with SHA-1 MAC are disabled by
default. Security level 2 prohibits weak RSA, DH, and ECC keys with less
than 112 bits of security. SSLContext defaults to minimum
protocol version TLS 1.2. Settings are based on Hynek Schlawackâs
research.
: The presence of newline or tab characters in parts of a URL
could allow some forms of attacks.
Following the controlling specification for URLs defined by WHATWG
urllib.parse() now removes ASCII newlines and tabs from URLs,
preventing such attacks.

================================================================================

# Changelog - Security (Part 2)

: Ensures interpreter-level audit hooks receive the
cpython.PyInterpreterState_New event when called through the
_xxsubinterpreters module.
: Fix invalid free in _sha3 module. The issue was introduced in
3.10.0a1. Python 3.9 and earlier are not affected.
: Add audit events for sqlite3.connect/handle(),
sqlite3.Connection.enable_load_extension(), and
sqlite3.Connection.load_extension(). Patch by Erlend E. Aasland.
: Add new audit event glob.glob/2 to incorporate the new
 and  arguments added to glob.glob() and
glob.iglob().
:  module no longer accepts any leading zeros in
IPv4 address strings. Leading zeros are ambiguous and interpreted as octal
notation by some libraries. For example the legacy function
socket.inet_aton() treats leading zeros as octal notation. glibc
implementation of modern inet_pton() does not accept any
leading zeros. For a while the  module used to accept
ambiguous leading zeros.
: Fix Regular Expression Denial of Service (ReDoS) vulnerability
in urllib.request.AbstractBasicAuthHandler.  The ReDoS-vulnerable
regex has quadratic worst-case complexity and it allows cause a denial of
service when identifying crafted invalid RFCs. This ReDoS issue is on the
client side and needs remote attackers to control the HTTP server.
: Audit hooks are now fired for frame.f_code, traceback.tb_frame,
and generator code/frame attribute access.
: Add audit events to the http.client module.

================================================================================

# Changelog - Security (Part 3)

: Creating sqlite3.Connection objects now also produces
sqlite3.connect and sqlite3.connect/handle auditing events. Previously these events were only produced by
sqlite3.connect() calls. Patch by Erlend E. Aasland.

: The  module sets more secure cipher suites defaults.
Ciphers without forward secrecy and with SHA-1 MAC are disabled by
default. Security level 2 prohibits weak RSA, DH, and ECC keys with less
than 112 bits of security. SSLContext defaults to minimum
protocol version TLS 1.2. Settings are based on Hynek Schlawackâs
research.

: The presence of newline or tab characters in parts of a URL
could allow some forms of attacks.

Following the controlling specification for URLs defined by WHATWG
urllib.parse() now removes ASCII newlines and tabs from URLs,
preventing such attacks.

: Ensures interpreter-level audit hooks receive the
cpython.PyInterpreterState_New event when called through the
_xxsubinterpreters module.

: Fix invalid free in _sha3 module. The issue was introduced in
3.10.0a1. Python 3.9 and earlier are not affected.

================================================================================

# Changelog - Security (Part 4)

: Add audit events for sqlite3.connect/handle(),
sqlite3.Connection.enable_load_extension(), and
sqlite3.Connection.load_extension(). Patch by Erlend E. Aasland.

: Add new audit event glob.glob/2 to incorporate the new
 and  arguments added to glob.glob() and
glob.iglob().

:  module no longer accepts any leading zeros in
IPv4 address strings. Leading zeros are ambiguous and interpreted as octal
notation by some libraries. For example the legacy function
socket.inet_aton() treats leading zeros as octal notation. glibc
implementation of modern inet_pton() does not accept any
leading zeros. For a while the  module used to accept
ambiguous leading zeros.

: Fix Regular Expression Denial of Service (ReDoS) vulnerability
in urllib.request.AbstractBasicAuthHandler.  The ReDoS-vulnerable
regex has quadratic worst-case complexity and it allows cause a denial of
service when identifying crafted invalid RFCs. This ReDoS issue is on the
client side and needs remote attackers to control the HTTP server.

: Audit hooks are now fired for frame.f_code, traceback.tb_frame,
and generator code/frame attribute access.

: Add audit events to the http.client module.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Prevent classes being both a sequence and a mapping when
pattern matching.
: Use  on the class object to
determine if the subject is a sequence or mapping when pattern matching.
Avoids the need to import collections.abc when pattern matching.
: Restore proper validation of complex literal value patterns
when parsing  blocks.
: Set frame.f_lineno to the line number of the âwithâ kweyword
when executing the call to .
: If the current position in a frame has no line number then set
the f_lineno attribute to None, instead of -1, to conform to PEP 626. This
should not normally be possible, but might occur in some unusual
circumstances.
: Importing the  module in a subinterpreter has no
longer side effects.
: The internal representation of line number tables is changed to
not use sentinels, and an explicit length parameter is added to the out of
process API function PyLineTable_InitAddressRange. This makes the
handling of line number tables more robust in some circumstances.
: Make  types immutable. Patch by Erlend E. Aasland.
: Make the array.array type immutable. Patch by Erlend
E. Aasland.
: Change class and module objects to lazy-create empty
annotations dicts on demand.  The annotations dicts are stored in the
objectâs __dict__ for backwards compatibility.
: Match patterns now use new dedicated AST nodes (MatchValue,
MatchSingleton, MatchSequence, , MatchMapping,
MatchClass) rather than reusing expression AST nodes.  and
 are now defined as pattern nodes rather than as expression
nodes. Patch by Nick Coghlan.
: Usage of //  and named
expressions within an annotation is now forbidden when PEP 563 is
activated.
: When performing structural pattern matching (),
captured names are now left unbound until the  pattern has matched
successfully.
: Annotations for complex targets (everything beside simple
names) no longer cause any runtime effects with  __future__ 
annotations.
: SyntaxError exceptions raised by the interpreter will
highlight the full error range of the expression that constitutes the
syntax error itself, instead of just where the problem is detected. Patch
by Pablo Galindo.
: Revert making  __future__  annotations the
default. This follows the Steering Council decision to postpone PEP 563
changes to at least Python 3.11. See the original email for more
information regarding the decision:
https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/.
Patch by Pablo Galindo.
: Hashes of NaN values now depend on object identity.  Formerly,
they always hashed to 0 even though NaN values are not equal to one
another.  Having the same hash for unequal values caused pile-ups in hash
tables.
: Improve the error message for IndentationError
exceptions. Patch by Pablo Galindo
: Constant tuple folding in bytecode optimizer now reuses tuple
in constant table.
: Data stack usage is much reduced for large literal and call
expressions.
: When printing  raised by the interpreter,
PyErr_Display() will offer suggestions of similar variable names
in the function that the exception was raised from. Patch by Pablo Galindo
: Improve syntax errors for invalid dictionary literals. Patch by
Pablo Galindo.
: Improve syntax errors in the parser for missing commas between
expressions. Patch by Pablo Galindo.
:  nodes now include source location metadata
attributes e.g. lineno, col_offset.
: Improve SyntaxError error messages for invalid comparisons.
Patch by Pablo Galindo.
: Move the flag for checking whether tracing is enabled to the C
stack, from the heap. Should speed up dispatch in the interpreter.
: Static methods (@staticmethod) and class
methods (@classmethod) now inherit the method
attributes (__module__, , __qualname__, ,
__annotations__) and have a new __wrapped__ attribute. Patch by
Victor Stinner.
: Fixed a bug where anext(ait,  would erroneously
return None.
: __match_args__ is no longer allowed to be a
list.
: Add GEN_START opcode. Marks start of generator, including
async, or coroutine and handles sending values to a newly created
generator or coroutine.
: Importlib now resolves relative paths when creating module spec
objects from file locations.
: Static methods (@staticmethod) are now
callable as regular functions. Patch by Victor Stinner.
: Prevented crashes in the AST validator and optimizer when
compiling some absurdly long expressions like "+0"*1000000.
RecursionError is now raised instead.
: When printing AttributeError, PyErr_Display()
will offer suggestions of similar attribute names in the object that the
exception was raised from. Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 2)

: Prevent classes being both a sequence and a mapping when
pattern matching.

: Use  on the class object to
determine if the subject is a sequence or mapping when pattern matching.
Avoids the need to import collections.abc when pattern matching.

: Restore proper validation of complex literal value patterns
when parsing  blocks.

: Set frame.f_lineno to the line number of the âwithâ kweyword
when executing the call to .

: If the current position in a frame has no line number then set
the f_lineno attribute to None, instead of -1, to conform to PEP 626. This
should not normally be possible, but might occur in some unusual
circumstances.

: Importing the  module in a subinterpreter has no
longer side effects.

: The internal representation of line number tables is changed to
not use sentinels, and an explicit length parameter is added to the out of
process API function PyLineTable_InitAddressRange. This makes the
handling of line number tables more robust in some circumstances.

: Make  types immutable. Patch by Erlend E. Aasland.

: Make the array.array type immutable. Patch by Erlend
E. Aasland.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Change class and module objects to lazy-create empty
annotations dicts on demand.  The annotations dicts are stored in the
objectâs __dict__ for backwards compatibility.

: Match patterns now use new dedicated AST nodes (MatchValue,
MatchSingleton, MatchSequence, , MatchMapping,
MatchClass) rather than reusing expression AST nodes.  and
 are now defined as pattern nodes rather than as expression
nodes. Patch by Nick Coghlan.

: Usage of //  and named
expressions within an annotation is now forbidden when PEP 563 is
activated.

: When performing structural pattern matching (),
captured names are now left unbound until the  pattern has matched
successfully.

: Annotations for complex targets (everything beside simple
names) no longer cause any runtime effects with  __future__ 
annotations.

: SyntaxError exceptions raised by the interpreter will
highlight the full error range of the expression that constitutes the
syntax error itself, instead of just where the problem is detected. Patch
by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Revert making  __future__  annotations the
default. This follows the Steering Council decision to postpone PEP 563
changes to at least Python 3.11. See the original email for more
information regarding the decision:
https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/.
Patch by Pablo Galindo.

: Hashes of NaN values now depend on object identity.  Formerly,
they always hashed to 0 even though NaN values are not equal to one
another.  Having the same hash for unequal values caused pile-ups in hash
tables.

: Improve the error message for IndentationError
exceptions. Patch by Pablo Galindo

: Constant tuple folding in bytecode optimizer now reuses tuple
in constant table.

: Data stack usage is much reduced for large literal and call
expressions.

: When printing  raised by the interpreter,
PyErr_Display() will offer suggestions of similar variable names
in the function that the exception was raised from. Patch by Pablo Galindo

: Improve syntax errors for invalid dictionary literals. Patch by
Pablo Galindo.

: Improve syntax errors in the parser for missing commas between
expressions. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 5)

:  nodes now include source location metadata
attributes e.g. lineno, col_offset.

: Improve SyntaxError error messages for invalid comparisons.
Patch by Pablo Galindo.

: Move the flag for checking whether tracing is enabled to the C
stack, from the heap. Should speed up dispatch in the interpreter.

: Static methods (@staticmethod) and class
methods (@classmethod) now inherit the method
attributes (__module__, , __qualname__, ,
__annotations__) and have a new __wrapped__ attribute. Patch by
Victor Stinner.

: Fixed a bug where anext(ait,  would erroneously
return None.

: __match_args__ is no longer allowed to be a
list.

: Add GEN_START opcode. Marks start of generator, including
async, or coroutine and handles sending values to a newly created
generator or coroutine.

: Importlib now resolves relative paths when creating module spec
objects from file locations.

: Static methods (@staticmethod) are now
callable as regular functions. Patch by Victor Stinner.

: Prevented crashes in the AST validator and optimizer when
compiling some absurdly long expressions like "+0"*1000000.
RecursionError is now raised instead.

================================================================================

# Changelog - Core and Builtins (Part 6)

: When printing AttributeError, PyErr_Display()
will offer suggestions of similar attribute names in the object that the
exception was raised from. Patch by Pablo Galindo

================================================================================

# Changelog - Library (Part 1)

List:
: In @dataclass(), raise a TypeError if KW_ONLY is specified more
than once.
: Added a  method to collections.Counter() to compute
the sum of the counts.
: Change netrc.netrc to use UTF-8 encoding before using
locale encoding.
: Removed an unnecessary list comprehension before looping from
urllib.parse.parse_qsl().  Patch by Christoph Zwerschke and Donghee
Na.
: Update bundled pip to 21.1.1.
: [Enum] Deprecate  when non-member is used in a
containment check; In 3.12  or  will be returned instead,
and containment will return  if the value is either a member of
that enum or one of its membersâ value.
: For backwards compatibility with previous minor versions of
Python, if typing.get_type_hints() receives no namespace dictionary
arguments, typing.get_type_hints() will search through the global
then local namespaces during evaluation of stringized type annotations
(string forward references) inside a class.
: [Enum] Deprecate non-standard mixin format() behavior: in 3.12
the enum member, not the memberâs value, will be used for format() calls.
: Deprecate undocumented  API.
: Fixed the  module working with non-default root
window.
: Update bundled pip to 21.1 and setuptools to 56.0.0
: Fix a bug in the pure-Python pickle implementation when using
protocol 5, where bytearray instances that occur several time in the
pickled object graph would incorrectly unpickle into repeated copies of
the bytearray object.
: In importlib.metadata, provide a uniform interface to
Description, allow for any field to be encoded with multiline values,
remove continuation lines from multiline values, and add a 
property for easy access to the PEP 566 JSON-compatible form. Sync with
importlib_metadata .
: OpenSSL 3.0.0: load_verify_locations()
now returns a consistent error message when cadata contains no valid
certificate.
:  can now convert Windows paths with 
prefixes into URL paths.
: Add inspect.get_annotations(), which safely computes the
annotations defined on an object.  It works around the quirks of accessing
the annotations from various types of objects, and makes very few
assumptions about the object passed in. inspect.get_annotations()
can also correctly un-stringize stringized annotations.
inspect.signature(), inspect.from_callable(), and
inspect.from_function() now call inspect.get_annotations() to
retrieve annotations.  This means inspect.signature() and
inspect.from_callable() can now un-stringize stringized annotations,
too.

================================================================================

# Changelog - Library (Part 2)

: platform.win32_ver derives the windows version from
sys.getwindowsversion().platform_version which in turn derives the version
from kernel32.dll (which can be of a different version than Windows
itself). Therefore change the platform.win32_ver to determine the version
using the platform moduleâs _syscmd_ver private function to return an
accurate version.
: The  module now uses SSL_read_ex and
SSL_write_ex internally. The functions support reading and writing of
data larger than 2 GB. Writing zero-length data no longer fails with a
protocol violation error.
: Port  extension module to multiphase initialization.
:  now raises DeprecationWarning for OP_NO_SSL/TLS*
options, old TLS versions, old protocols, and other features that have
been deprecated since Python 3.6, 3.7, or OpenSSL 1.1.0.
:  is now implemented purely in Python; builtin
types.GenericAlias objects no longer include typing.ParamSpec in
__parameters__ (with the exception of collections.abc.Callableâs
GenericAlias). This means previously invalid uses of 
(such as ) which worked in earlier versions of Python 3.10
alpha, will now raise  during substitution.
: The multiprocessing  class now explicitly
catches SystemExit and closes the client connection in this case.
It happens when the Server.serve_client() method reaches the end of
file (EOF).
: Remove unused imports: pyclbr no longer uses copy, and typing
no longer uses ast. Patch by Victor Stinner.
: Remove an unneeded copy of the namespace passed to
dataclasses.make_dataclass().
: Add __iter__() method to bz2.BZ2File,
gzip.GzipFile, and lzma.LZMAFile. It makes iterating
them about 2x faster. Patch by Inada Naoki.
: Deprecate io.OpenWrapper and _pyio.OpenWrapper: use io.open and
_pyio.open instead. Until Python 3.9, _pyio.open was not a static method
and builtins.open was set to OpenWrapper to not become a bound method when
set to a class variable. _io.open is a built-in function whereas
_pyio.open is a Python function. In Python 3.10, _pyio.open() is now a
static method, and builtins.open() is now io.open().
: The Python _pyio.open() function becomes a static method
to behave as  built-in function: donât become a bound
method when stored as a class variable. It becomes possible since static
methods are now callable in Python 3.10. Moreover,
_pyio.OpenWrapper() becomes a simple alias to _pyio.open().
Patch by Victor Stinner.
: Fix  raised in typing.get_type_hints() due
to synthetic modules that donât appear in sys.modules.
: When subprocess.Popen args are provided as a string or
as pathlib.Path, the Popen instance repr now shows the right
thing.
: [Enum] ensure exceptions raised in _missing__ are released
: fix issue with enum member name matching the start of a private
variable name
: Fixed the return value of TypeVar.__ror__. Patch by Jelle
Zijlstra.
: Add match_args parameter to @dataclass decorator to allow
suppression of __match_args__ generation.
: OpenSSL 3.0.0: define OPENSSL_API_COMPAT 1.1.1 to suppress
deprecation warnings. Python requires OpenSSL 1.1.1 APIs.
: Mocks can no longer be used as the specs for other Mocks. As a
result, an already-mocked object cannot have an attribute mocked using
autospec=True or be the subject of a create_autospec(...) call.
This can uncover bugs in tests since these Mock-derived Mocks will always
pass certain tests (e.g. isinstance()) and builtin assert functions
(e.g. assert_called_once_with) will unconditionally pass.
: Add ssl.OP_IGNORE_UNEXPECTED_EOF constants (OpenSSL
3.0.0)
: Improve bz2.BZ2File performance by removing the RLock from
BZ2File. This makes BZ2File thread unsafe in the face of multiple
simultaneous readers or writers, just like its equivalent classes in
 and  have always been.  Patch by Inada Naoki.
: OpenSSL 3.0.0: Donât call the password callback function a
second time when first call has signaled an error condition.
: The header files for  error codes are now OpenSSL
version-specific. Exceptions will now show correct reason and library
codes. The make_ssl_data.py script has been rewritten to use OpenSSLâs
text file with error codes.
: Implement  in the  module by adding
.
: os.path.realpath() now accepts a  keyword-only
argument. When set to ,  is raised if a path doesnât
exist or a symlink loop is encountered.
: In importlib.metadata, incorporate changes from
importlib_metadata 3.10: Add mtime-based caching during distribution
discovery. Flagged use of dict result from entry_points() as
deprecated.
: The  and  attributes of
typing.ParamSpec are now instances of the new classes
typing.ParamSpecArgs and typing.ParamSpecKwargs, which
enables a more useful . Patch by Jelle Zijlstra.
: Add an  parameter logging.fileConfig().
: Add  and  parameters to
fileinput.input() and fileinput.FileInput.
: A simple_enum decorator is added to the  module to
convert a normal class into an Enum. test_simple_enum added to test
simple enums against a corresponding normal Enum.  Standard library
modules updated to use simple_enum.
: Fix an issue where __match_args__ generation
could fail for some dataclasses.
: Fix  regression for zero-sized blobs with
converters, where  was returned instead of . The regression
was introduced by PR 24723. Patch by Erlend E. Aasland.
:  dialog windows are now recognized as dialogs by
window managers on macOS and X Window.
: The following  methods are now deprecated and
should be replaced:

================================================================================

# Changelog - Library (Part 3)

currentThread => threading.current_thread()
activeCount => threading.active_count()
Condition.notifyAll => threading.Condition.notify_all()
Event.isSet => threading.Event.is_set()
Thread.setName => threading.Thread.name
thread.getName => threading.Thread.name
Thread.isDaemon => threading.Thread.daemon
Thread.setDaemon => threading.Thread.daemon

Patch by Jelle Zijlstra.

================================================================================

# Changelog - Library (Part 4)

: Deprecate find_module() and find_loader() implementations in
importlib and zipimport.
: turtle.textinput() and turtle.numinput() create now
a transient window working on behalf of the canvas window.
: Add the ability to specify keyword-only fields to dataclasses.
These fields will become keyword-only arguments to the generated __init__.
: Fix problem with
hostname_checks_common_name. OpenSSL does not copy
hostflags from struct SSL_CTX to struct SSL.
: Improve error message for tarfile.open() when 
/  are unavailable.  Patch by Anthony Sottile.
: Allow   argument in
urllib.parse.parse_qs and urllib.parse.parse_qsl when parsing
 query strings. Previously, this raised a .
: Improve  error handling: sqlite3_value_blob()
errors that set SQLITE_NOMEM now raise MemoryError. Patch by
Erlend E. Aasland.
: New functions sysconfig.get_preferred_scheme() and
sysconfig.get_default_scheme() are added to query a platform for its
preferred âuserâ, âhomeâ, and âprefixâ (default) scheme names.
: Improve sqlite3.Connection.backup() error handling. The
error message for non-existent target database names is now 
   instead of   . Patch by Erlend
E. Aasland.
: Install schemes in distutils.command.install are now loaded
from .
: distutils.sysconfig has been merged to .
: Fixed processing of a dataclass that inherits from a frozen
dataclass with no fields.  It is now correctly detected as an error.
:  now has support for
dataclasses.dataclass. Patch by Lewis Gaul.
: Add pathlib.Path.hardlink_to() method that supersedes
. The new method has the same argument order as
symlink_to().
: typing.get_type_hints() now checks the local namespace of
a class when evaluating  annotations inside said class.
: Add  parameter to dataclasses.dataclass decorator
to automatically generate  for class. Patch provided by Yurii
Karabas.
: Deprecated use of asyncio.get_event_loop() without
running event loop. Emit deprecation warning for  functions
which implicitly create a  or
 objects if there is no running event loop and no
explicit  argument is passed: ensure_future(),
wrap_future(), ,
, as_completed() and constructors of
, ,
StreamReader, StreamReaderProtocol.
: Certificate and PrivateKey classes were added to the ssl
module. Certificates and keys can now be loaded from memory buffer, too.
: Use a new output buffer management code for  /
 /  modules, and add .readall() function to
_compression.DecompressReader class. These bring some performance
improvements. Patch by Ma Lin.
: The ssl.get_server_certificate() function now has a
 parameter.
: Fix thread locks in zlib module may go wrong in rare case.
Patch by Ma Lin.
: Fix dataclasses with s and
. Patch by Claudiu Popa.
: Expose X509_V_FLAG_PARTIAL_CHAIN ssl flag
: ssl.RAND_status() now returns a boolean value (as
documented) instead of  or .
: pathlib.Path.stat() and  now
accept a follow_symlinks keyword-only argument for consistency with
corresponding functions in the  module.
: os.path.expanduser() now refuses to guess Windows home
directories if the basename of current userâs home directory does not
match their username.
pathlib.Path.expanduser() and  now
consistently raise RuntimeError exception when a home directory
cannot be resolved. Previously a  exception could be raised
on Windows when the "USERNAME"  environment variable was unset.

================================================================================

# Changelog - Library (Part 5)

: Added SNI support to ssl.get_server_certificate().
: Covariance, Pearsonâs correlation, and simple linear regression
functionality was added to statistics module. Patch by Tymoteusz WoÅodÅºko.
: Provide a locale.localize() function, which converts a
normalized number string into a locale format.
: Fix a regression in the handling of ctypesâ
ctypes.c_wchar_p type: embedded null characters would cause a
ValueError to be raised. Patch by Zackery Spytz.

: In @dataclass(), raise a TypeError if KW_ONLY is specified more
than once.

: Added a  method to collections.Counter() to compute
the sum of the counts.

: Change netrc.netrc to use UTF-8 encoding before using
locale encoding.

: Removed an unnecessary list comprehension before looping from
urllib.parse.parse_qsl().  Patch by Christoph Zwerschke and Donghee
Na.

: Update bundled pip to 21.1.1.

: [Enum] Deprecate  when non-member is used in a
containment check; In 3.12  or  will be returned instead,
and containment will return  if the value is either a member of
that enum or one of its membersâ value.

================================================================================

# Changelog - Library (Part 6)

: For backwards compatibility with previous minor versions of
Python, if typing.get_type_hints() receives no namespace dictionary
arguments, typing.get_type_hints() will search through the global
then local namespaces during evaluation of stringized type annotations
(string forward references) inside a class.

: [Enum] Deprecate non-standard mixin format() behavior: in 3.12
the enum member, not the memberâs value, will be used for format() calls.

: Deprecate undocumented  API.

: Fixed the  module working with non-default root
window.

: Update bundled pip to 21.1 and setuptools to 56.0.0

: Fix a bug in the pure-Python pickle implementation when using
protocol 5, where bytearray instances that occur several time in the
pickled object graph would incorrectly unpickle into repeated copies of
the bytearray object.

: In importlib.metadata, provide a uniform interface to
Description, allow for any field to be encoded with multiline values,
remove continuation lines from multiline values, and add a 
property for easy access to the PEP 566 JSON-compatible form. Sync with
importlib_metadata .

================================================================================

# Changelog - Library (Part 7)

: OpenSSL 3.0.0: load_verify_locations()
now returns a consistent error message when cadata contains no valid
certificate.

:  can now convert Windows paths with 
prefixes into URL paths.

: Add inspect.get_annotations(), which safely computes the
annotations defined on an object.  It works around the quirks of accessing
the annotations from various types of objects, and makes very few
assumptions about the object passed in. inspect.get_annotations()
can also correctly un-stringize stringized annotations.

inspect.signature(), inspect.from_callable(), and
inspect.from_function() now call inspect.get_annotations() to
retrieve annotations.  This means inspect.signature() and
inspect.from_callable() can now un-stringize stringized annotations,
too.

: platform.win32_ver derives the windows version from
sys.getwindowsversion().platform_version which in turn derives the version
from kernel32.dll (which can be of a different version than Windows
itself). Therefore change the platform.win32_ver to determine the version
using the platform moduleâs _syscmd_ver private function to return an
accurate version.

================================================================================

# Changelog - Library (Part 8)

: The  module now uses SSL_read_ex and
SSL_write_ex internally. The functions support reading and writing of
data larger than 2 GB. Writing zero-length data no longer fails with a
protocol violation error.

: Port  extension module to multiphase initialization.

:  now raises DeprecationWarning for OP_NO_SSL/TLS*
options, old TLS versions, old protocols, and other features that have
been deprecated since Python 3.6, 3.7, or OpenSSL 1.1.0.

:  is now implemented purely in Python; builtin
types.GenericAlias objects no longer include typing.ParamSpec in
__parameters__ (with the exception of collections.abc.Callableâs
GenericAlias). This means previously invalid uses of 
(such as ) which worked in earlier versions of Python 3.10
alpha, will now raise  during substitution.

: The multiprocessing  class now explicitly
catches SystemExit and closes the client connection in this case.
It happens when the Server.serve_client() method reaches the end of
file (EOF).

: Remove unused imports: pyclbr no longer uses copy, and typing
no longer uses ast. Patch by Victor Stinner.

: Remove an unneeded copy of the namespace passed to
dataclasses.make_dataclass().

================================================================================

# Changelog - Library (Part 9)

: Add __iter__() method to bz2.BZ2File,
gzip.GzipFile, and lzma.LZMAFile. It makes iterating
them about 2x faster. Patch by Inada Naoki.

: Deprecate io.OpenWrapper and _pyio.OpenWrapper: use io.open and
_pyio.open instead. Until Python 3.9, _pyio.open was not a static method
and builtins.open was set to OpenWrapper to not become a bound method when
set to a class variable. _io.open is a built-in function whereas
_pyio.open is a Python function. In Python 3.10, _pyio.open() is now a
static method, and builtins.open() is now io.open().

: The Python _pyio.open() function becomes a static method
to behave as  built-in function: donât become a bound
method when stored as a class variable. It becomes possible since static
methods are now callable in Python 3.10. Moreover,
_pyio.OpenWrapper() becomes a simple alias to _pyio.open().
Patch by Victor Stinner.

: Fix  raised in typing.get_type_hints() due
to synthetic modules that donât appear in sys.modules.

: When subprocess.Popen args are provided as a string or
as pathlib.Path, the Popen instance repr now shows the right
thing.

: [Enum] ensure exceptions raised in _missing__ are released

================================================================================

# Changelog - Library (Part 10)

: fix issue with enum member name matching the start of a private
variable name

: Fixed the return value of TypeVar.__ror__. Patch by Jelle
Zijlstra.

: Add match_args parameter to @dataclass decorator to allow
suppression of __match_args__ generation.

: OpenSSL 3.0.0: define OPENSSL_API_COMPAT 1.1.1 to suppress
deprecation warnings. Python requires OpenSSL 1.1.1 APIs.

: Mocks can no longer be used as the specs for other Mocks. As a
result, an already-mocked object cannot have an attribute mocked using
autospec=True or be the subject of a create_autospec(...) call.
This can uncover bugs in tests since these Mock-derived Mocks will always
pass certain tests (e.g. isinstance()) and builtin assert functions
(e.g. assert_called_once_with) will unconditionally pass.

: Add ssl.OP_IGNORE_UNEXPECTED_EOF constants (OpenSSL
3.0.0)

: Improve bz2.BZ2File performance by removing the RLock from
BZ2File. This makes BZ2File thread unsafe in the face of multiple
simultaneous readers or writers, just like its equivalent classes in
 and  have always been.  Patch by Inada Naoki.

: OpenSSL 3.0.0: Donât call the password callback function a
second time when first call has signaled an error condition.

================================================================================

# Changelog - Library (Part 11)

: The header files for  error codes are now OpenSSL
version-specific. Exceptions will now show correct reason and library
codes. The make_ssl_data.py script has been rewritten to use OpenSSLâs
text file with error codes.

: Implement  in the  module by adding
.

: os.path.realpath() now accepts a  keyword-only
argument. When set to ,  is raised if a path doesnât
exist or a symlink loop is encountered.

: In importlib.metadata, incorporate changes from
importlib_metadata 3.10: Add mtime-based caching during distribution
discovery. Flagged use of dict result from entry_points() as
deprecated.

: The  and  attributes of
typing.ParamSpec are now instances of the new classes
typing.ParamSpecArgs and typing.ParamSpecKwargs, which
enables a more useful . Patch by Jelle Zijlstra.

: Add an  parameter logging.fileConfig().

: Add  and  parameters to
fileinput.input() and fileinput.FileInput.

: A simple_enum decorator is added to the  module to
convert a normal class into an Enum. test_simple_enum added to test
simple enums against a corresponding normal Enum.  Standard library
modules updated to use simple_enum.

: Fix an issue where __match_args__ generation
could fail for some dataclasses.

================================================================================

# Changelog - Library (Part 12)

: Fix  regression for zero-sized blobs with
converters, where  was returned instead of . The regression
was introduced by PR 24723. Patch by Erlend E. Aasland.

:  dialog windows are now recognized as dialogs by
window managers on macOS and X Window.

: The following  methods are now deprecated and
should be replaced:

List:
currentThread => threading.current_thread()
activeCount => threading.active_count()
Condition.notifyAll => threading.Condition.notify_all()
Event.isSet => threading.Event.is_set()
Thread.setName => threading.Thread.name
thread.getName => threading.Thread.name
Thread.isDaemon => threading.Thread.daemon
Thread.setDaemon => threading.Thread.daemon

currentThread => threading.current_thread()

activeCount => threading.active_count()

Condition.notifyAll => threading.Condition.notify_all()

Event.isSet => threading.Event.is_set()

Thread.setName => threading.Thread.name

thread.getName => threading.Thread.name

Thread.isDaemon => threading.Thread.daemon

Thread.setDaemon => threading.Thread.daemon

Patch by Jelle Zijlstra.

: Deprecate find_module() and find_loader() implementations in
importlib and zipimport.

================================================================================

# Changelog - Library (Part 13)

: turtle.textinput() and turtle.numinput() create now
a transient window working on behalf of the canvas window.

: Add the ability to specify keyword-only fields to dataclasses.
These fields will become keyword-only arguments to the generated __init__.

: Fix problem with
hostname_checks_common_name. OpenSSL does not copy
hostflags from struct SSL_CTX to struct SSL.

: Improve error message for tarfile.open() when 
/  are unavailable.  Patch by Anthony Sottile.

: Allow   argument in
urllib.parse.parse_qs and urllib.parse.parse_qsl when parsing
 query strings. Previously, this raised a .

: Improve  error handling: sqlite3_value_blob()
errors that set SQLITE_NOMEM now raise MemoryError. Patch by
Erlend E. Aasland.

: New functions sysconfig.get_preferred_scheme() and
sysconfig.get_default_scheme() are added to query a platform for its
preferred âuserâ, âhomeâ, and âprefixâ (default) scheme names.

: Improve sqlite3.Connection.backup() error handling. The
error message for non-existent target database names is now 
   instead of   . Patch by Erlend
E. Aasland.

: Install schemes in distutils.command.install are now loaded
from .

: distutils.sysconfig has been merged to .

================================================================================

# Changelog - Library (Part 14)

: Fixed processing of a dataclass that inherits from a frozen
dataclass with no fields.  It is now correctly detected as an error.

:  now has support for
dataclasses.dataclass. Patch by Lewis Gaul.

: Add pathlib.Path.hardlink_to() method that supersedes
. The new method has the same argument order as
symlink_to().

: typing.get_type_hints() now checks the local namespace of
a class when evaluating  annotations inside said class.

: Add  parameter to dataclasses.dataclass decorator
to automatically generate  for class. Patch provided by Yurii
Karabas.

: Deprecated use of asyncio.get_event_loop() without
running event loop. Emit deprecation warning for  functions
which implicitly create a  or
 objects if there is no running event loop and no
explicit  argument is passed: ensure_future(),
wrap_future(), ,
, as_completed() and constructors of
, ,
StreamReader, StreamReaderProtocol.

: Certificate and PrivateKey classes were added to the ssl
module. Certificates and keys can now be loaded from memory buffer, too.

================================================================================

# Changelog - Library (Part 15)

: Use a new output buffer management code for  /
 /  modules, and add .readall() function to
_compression.DecompressReader class. These bring some performance
improvements. Patch by Ma Lin.

: The ssl.get_server_certificate() function now has a
 parameter.

: Fix thread locks in zlib module may go wrong in rare case.
Patch by Ma Lin.

: Fix dataclasses with s and
. Patch by Claudiu Popa.

: Expose X509_V_FLAG_PARTIAL_CHAIN ssl flag

: ssl.RAND_status() now returns a boolean value (as
documented) instead of  or .

: pathlib.Path.stat() and  now
accept a follow_symlinks keyword-only argument for consistency with
corresponding functions in the  module.

: os.path.expanduser() now refuses to guess Windows home
directories if the basename of current userâs home directory does not
match their username.

pathlib.Path.expanduser() and  now
consistently raise RuntimeError exception when a home directory
cannot be resolved. Previously a  exception could be raised
on Windows when the "USERNAME"  environment variable was unset.

: Added SNI support to ssl.get_server_certificate().

================================================================================

# Changelog - Library (Part 16)

: Covariance, Pearsonâs correlation, and simple linear regression
functionality was added to statistics module. Patch by Tymoteusz WoÅodÅºko.

: Provide a locale.localize() function, which converts a
normalized number string into a locale format.

: Fix a regression in the handling of ctypesâ
ctypes.c_wchar_p type: embedded null characters would cause a
ValueError to be raised. Patch by Zackery Spytz.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Add âAnnotations Best Practicesâ document as a new HOWTO.
: Document the new Py_TPFLAGS_MAPPING and
Py_TPFLAGS_SEQUENCE type flags.
: The documentation on the PyContextVar C-API was clarified.
: Update dataclasses documentation to express that
FrozenInstanceError is derived from AttributeError.
: Fix the Sphinx glossary_search extension: create the _static/
sub-directory if it doesnât exist.
: Update documentation to reflect that unparenthesized lambda
expressions can no longer be the expression part in an  clause in
comprehensions and generator expressions since Python 3.9.
: Fixing the example code in Doc/extending/extending.rst to
declare and initialize the pmodule variable to be of the right type.

: Add âAnnotations Best Practicesâ document as a new HOWTO.

: Document the new Py_TPFLAGS_MAPPING and
Py_TPFLAGS_SEQUENCE type flags.

: The documentation on the PyContextVar C-API was clarified.

: Update dataclasses documentation to express that
FrozenInstanceError is derived from AttributeError.

: Fix the Sphinx glossary_search extension: create the _static/
sub-directory if it doesnât exist.

================================================================================

# Changelog - Documentation (Part 2)

: Update documentation to reflect that unparenthesized lambda
expressions can no longer be the expression part in an  clause in
comprehensions and generator expressions since Python 3.9.

: Fixing the example code in Doc/extending/extending.rst to
declare and initialize the pmodule variable to be of the right type.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_logging.test_namer_rotator_inheritance() on Windows:
use os.replace() rather than os.rename(). Patch by Victor
Stinner.
: Fix a race condition in the SMTP test of test_logging. Donât
close a file descriptor (socket) from a different thread while
asyncore.loop() is polling the file descriptor. Patch by Victor Stinner.
: test.libregrtest now marks a test as ENV_CHANGED
(altered the execution environment) if a thread raises an exception but
does not catch it. It sets a hook on threading.excepthook(). Use
--fail-env-changed option to mark the test as failed. Patch by Victor
Stinner.
: Tests multiple OpenSSL versions on GitHub Actions. Use ccache
to speed up testing.
: OpenSSL 3.0.0: Disable testing of legacy protocols TLS 1.0 and
1.1. Tests are failing with TLSV1_ALERT_INTERNAL_ERROR.

: Fix test_logging.test_namer_rotator_inheritance() on Windows:
use os.replace() rather than os.rename(). Patch by Victor
Stinner.

: Fix a race condition in the SMTP test of test_logging. Donât
close a file descriptor (socket) from a different thread while
asyncore.loop() is polling the file descriptor. Patch by Victor Stinner.

================================================================================

# Changelog - Tests (Part 2)

: test.libregrtest now marks a test as ENV_CHANGED
(altered the execution environment) if a thread raises an exception but
does not catch it. It sets a hook on threading.excepthook(). Use
--fail-env-changed option to mark the test as failed. Patch by Victor
Stinner.

: Tests multiple OpenSSL versions on GitHub Actions. Use ccache
to speed up testing.

: OpenSSL 3.0.0: Disable testing of legacy protocols TLS 1.0 and
1.1. Tests are failing with TLSV1_ALERT_INTERNAL_ERROR.

================================================================================

# Changelog - Build

List:
: Improved generated code refresh (AST/tokens/opcodes/keywords)
on Windows.
: Implement . Python now requires OpenSSL 1.1.1 or
newer.

: Improved generated code refresh (AST/tokens/opcodes/keywords)
on Windows.

: Implement . Python now requires OpenSSL 1.1.1 or
newer.

================================================================================

# Changelog - Windows (Part 1)

List:
: Adds additional arguments to os.startfile() function.
: Avoid raising errors from pathlib.Path.exists() when
passed an invalid filename.
: Fixed  failing on inaccessible directories with
a trailing slash, rather than falling back to the parent directoryâs
metadata. This implicitly affected os.path.exists() and
os.path.isdir().
: Fixed decoding of host names in socket.gethostbyaddr()
and socket.gethostbyname_ex().
: Updated pegen regeneration script on Windows to find and use
Python 3.8 or higher.  Prior to this, pegen regeneration already required
3.8 or higher, but the script may have used lower versions of Python.
: Actually updates Windows release to OpenSSL 1.1.1k. Earlier
releases were mislabelled and actually included 1.1.1i again.
: Update Tcl and Tk to 8.6.11 in Windows installer.
: Upgrade Windows installer to use SQLite 3.35.5.
: Fix WindowsConsoleIO errors in the presence of fd
redirection. Patch by Segev Finer.

: Adds additional arguments to os.startfile() function.

: Avoid raising errors from pathlib.Path.exists() when
passed an invalid filename.

================================================================================

# Changelog - Windows (Part 2)

: Fixed  failing on inaccessible directories with
a trailing slash, rather than falling back to the parent directoryâs
metadata. This implicitly affected os.path.exists() and
os.path.isdir().

: Fixed decoding of host names in socket.gethostbyaddr()
and socket.gethostbyname_ex().

: Updated pegen regeneration script on Windows to find and use
Python 3.8 or higher.  Prior to this, pegen regeneration already required
3.8 or higher, but the script may have used lower versions of Python.

: Actually updates Windows release to OpenSSL 1.1.1k. Earlier
releases were mislabelled and actually included 1.1.1i again.

: Update Tcl and Tk to 8.6.11 in Windows installer.

: Upgrade Windows installer to use SQLite 3.35.5.

: Fix WindowsConsoleIO errors in the presence of fd
redirection. Patch by Segev Finer.

================================================================================

# Changelog - macOS (Part 1)

List:
: Fix check for macOS SDK paths when building Python. Narrow
search to match contents of SDKs, namely only files in
/System/Library, /System/IOSSupport, and  other than
/usr/local. Previously, anything under  was assumed to be
in an SDK which causes problems with the new file system layout in 10.15+
where user file systems may appear to be mounted under .  Paths
in  were also incorrectly treated as SDK locations.
: Drop support for MACOSX_DEPLOYMENT_TARGET < 10.3
: Provide âpython3.x-intel64â executable to allow reliably
forcing macOS universal2 framework builds to run under Rosetta 2 Intel-64
emulation on Apple Silicon Macs.  This can be useful for testing or when
universal2 wheels are not yet available.
: Build SQLite with SQLITE_OMIT_AUTOINIT on macOS. Patch by
Erlend E. Aasland.
: Update macOS installer to use SQLite 3.35.4.
: Mac/BuildScript/build-installer.py will now use
ââenable-optimizationsâ and --with-lto when building on macOS 10.15
or later.

================================================================================

# Changelog - macOS (Part 2)

: Fix check for macOS SDK paths when building Python. Narrow
search to match contents of SDKs, namely only files in
/System/Library, /System/IOSSupport, and  other than
/usr/local. Previously, anything under  was assumed to be
in an SDK which causes problems with the new file system layout in 10.15+
where user file systems may appear to be mounted under .  Paths
in  were also incorrectly treated as SDK locations.

: Drop support for MACOSX_DEPLOYMENT_TARGET < 10.3

: Provide âpython3.x-intel64â executable to allow reliably
forcing macOS universal2 framework builds to run under Rosetta 2 Intel-64
emulation on Apple Silicon Macs.  This can be useful for testing or when
universal2 wheels are not yet available.

: Build SQLite with SQLITE_OMIT_AUTOINIT on macOS. Patch by
Erlend E. Aasland.

: Update macOS installer to use SQLite 3.35.4.

: Mac/BuildScript/build-installer.py will now use
ââenable-optimizationsâ and --with-lto when building on macOS 10.15
or later.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Add mouse actions to the shell sidebar.  Left click and
optional drag selects one or more lines, as with the editor line number
sidebar.  Right click after selecting raises a context menu with âcopy
with promptsâ.  This zips together prompts from the sidebar with lines
from the selected text.
: Fix reference leak in test_sidebar and test_squeezer. Patches
by Terry Jan Reedy and Pablo Galindo
: Indent IDLE Shell input with spaces instead of tabs
: IDLE dialog windows are now recognized as dialogs by window
managers on macOS and X Window.
: IDLEâs shell now shows prompts in a separate side-bar.

: Add mouse actions to the shell sidebar.  Left click and
optional drag selects one or more lines, as with the editor line number
sidebar.  Right click after selecting raises a context menu with âcopy
with promptsâ.  This zips together prompts from the sidebar with lines
from the selected text.

: Fix reference leak in test_sidebar and test_squeezer. Patches
by Terry Jan Reedy and Pablo Galindo

: Indent IDLE Shell input with spaces instead of tabs

: IDLE dialog windows are now recognized as dialogs by window
managers on macOS and X Window.

================================================================================

# Changelog - IDLE (Part 2)

: IDLEâs shell now shows prompts in a separate side-bar.

================================================================================

# Changelog - C API (Part 1)

List:
: Add a new Py_TPFLAGS_DISALLOW_INSTANTIATION type
flag to disallow creating type instances. Patch by Victor Stinner.
: Remove the now unused PYMALLOC_DEBUG macro. Debug hooks on
memory allocators are now installed by default if Python is built in debug
mode (if  macro is defined). Moreover, they can now be used on
Python build in release mode (ex: using PYTHONMALLOC=debug environment
variable).
: _PyInterpreterState_IDIncref() now calls
_PyInterpreterState_IDInitref() and always increments id_refcount.
Previously, calling _xxsubinterpreters.get_current() could create an
id_refcount inconsistency when a _xxsubinterpreters.InterpreterID object
was deallocated. Patch by Victor Stinner.
: Add new C-API functions to control the state of the garbage
collector: PyGC_Enable(), PyGC_Disable(),
PyGC_IsEnabled(), corresponding to the functions in the
 module.
: Introduce Py_TPFLAGS_IMMUTABLETYPE flag for
immutable type objects, and modify PyType_Ready() to set it for
static types. Patch by Erlend E. Aasland.
: PyMem_Calloc() is now available in the limited C API
(Py_LIMITED_API).
: PyOS_ReadlineFunctionPointer() is no longer exported by
limited C API headers and by python3.dll on Windows. Like any function
that takes , it is not part of the stable ABI.
: Stable ABI and limited API definitions are generated from a
central manifest ().
: Add the   function to test if the
 object is the  object, the same as    in Python. Add also
the Py_IsNone(), Py_IsTrue(), Py_IsFalse()
functions to test if an object is, respectively, the  singleton,
the  singleton or the  singleton. Patch by Victor
Stinner.

================================================================================

# Changelog - C API (Part 2)

: Add a new Py_TPFLAGS_DISALLOW_INSTANTIATION type
flag to disallow creating type instances. Patch by Victor Stinner.

: Remove the now unused PYMALLOC_DEBUG macro. Debug hooks on
memory allocators are now installed by default if Python is built in debug
mode (if  macro is defined). Moreover, they can now be used on
Python build in release mode (ex: using PYTHONMALLOC=debug environment
variable).

: _PyInterpreterState_IDIncref() now calls
_PyInterpreterState_IDInitref() and always increments id_refcount.
Previously, calling _xxsubinterpreters.get_current() could create an
id_refcount inconsistency when a _xxsubinterpreters.InterpreterID object
was deallocated. Patch by Victor Stinner.

: Add new C-API functions to control the state of the garbage
collector: PyGC_Enable(), PyGC_Disable(),
PyGC_IsEnabled(), corresponding to the functions in the
 module.

: Introduce Py_TPFLAGS_IMMUTABLETYPE flag for
immutable type objects, and modify PyType_Ready() to set it for
static types. Patch by Erlend E. Aasland.

: PyMem_Calloc() is now available in the limited C API
(Py_LIMITED_API).

================================================================================

# Changelog - C API (Part 3)

: PyOS_ReadlineFunctionPointer() is no longer exported by
limited C API headers and by python3.dll on Windows. Like any function
that takes , it is not part of the stable ABI.

: Stable ABI and limited API definitions are generated from a
central manifest ().

: Add the   function to test if the
 object is the  object, the same as    in Python. Add also
the Py_IsNone(), Py_IsTrue(), Py_IsFalse()
functions to test if an object is, respectively, the  singleton,
the  singleton or the  singleton. Patch by Victor
Stinner.

================================================================================

# Changelog - Security (Part 1)

List:
: CVE 2021-3426: Remove the  feature of the
 module which could be abused to read arbitrary files on the
disk (directory traversal vulnerability). Moreover, even source code of
Python modules can contain sensitive data like passwords. Vulnerability
reported by David SchwÃ¶rer.
:  no longer trusts the IP address value returned
from the server in response to the PASV command by default.  This prevents
a malicious FTP server from using the response to probe IPv4 address and
port combinations on the client network.
Code that requires the former vulnerable behavior may set a
trust_server_pasv_ipv4_address attribute on their ftplib.FTP
instances to  to re-enable it.

: Add audit hooks for gc.get_objects(),
gc.get_referrers() and gc.get_referents(). Patch by Pablo
Galindo.

: CVE 2021-3426: Remove the  feature of the
 module which could be abused to read arbitrary files on the
disk (directory traversal vulnerability). Moreover, even source code of
Python modules can contain sensitive data like passwords. Vulnerability
reported by David SchwÃ¶rer.

================================================================================

# Changelog - Security (Part 2)

:  no longer trusts the IP address value returned
from the server in response to the PASV command by default.  This prevents
a malicious FTP server from using the response to probe IPv4 address and
port combinations on the client network.

Code that requires the former vulnerable behavior may set a
trust_server_pasv_ipv4_address attribute on their ftplib.FTP
instances to  to re-enable it.

: Add audit hooks for gc.get_objects(),
gc.get_referrers() and gc.get_referents(). Patch by Pablo
Galindo.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Update CPython bytecode magic number.
: Raise ImportWarning when calling find_loader().
: Fix crash that happens when replacing sys.stderr with a
callable that can remove the object while an exception is being printed.
Patch by Pablo Galindo.
: The bytecode interpreter uses instruction, rather byte, offsets
internally. This reduces the number of EXTENDED_ARG instructions needed
and streamlines instruction dispatch a bit.
: Fix reference leak in the _hashopenssl extension. Patch
by Pablo Galindo.
: Calls to find_module() by the import system now raise
ImportWarning.
: Improve the syntax error for invalid usage of double starred
elements (â**â) in f-strings. Patch by Pablo Galindo.
: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.
: The import system now prefers using  for
ModuleType.__repr__ over module_repr().
: Added micro-optimizations to _PyType_Lookup() to improve
cache lookup performance in the common case of cache hits.
: Report the column offset for SyntaxError for invalid
line continuation characters. Patch by Pablo Galindo.
: Fix misdetection of circular imports when using  
 , which caused false positives in non-trivial multi-threaded
code.
: Emit SyntaxWarnings for assertions with tuple constants, this
is a regression introduced in python3.7
: Tracing now has correct line numbers for attribute accesses
when the attribute is on a different line from the object. Improves
debugging and profiling for multi-line method chains.
: Python no longer fails at startup with a fatal error if a
command line argument contains an invalid Unicode character. The
Py_DecodeLocale() function now escapes byte sequences which would
be decoded as Unicode characters outside the [U+0000; U+10ffff] range.
: Fix a bug that was causing the parser to crash when emitting
syntax errors when reading input from stdin. Patch by Pablo Galindo
: Fix a possible race condition where PyErr_CheckSignals
tries to execute a non-Python signal handler.
: Add __match_args__ to struct sequence objects. Patch by Pablo Galindo.
: CPython now sets the SA_ONSTACK flag in PyOS_setsig for
the VMâs default signal handlers.  This is friendlier to other in-process
code that an extension module or embedding use could pull in (such as
Golangâs cgo) where tiny thread stacks are the norm and sigaltstack()
has been used to provide for signal handlers.  This is a no-op change for
the vast majority of processes that donât use sigaltstack.
: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.
: Add a radix tree based memory map to track in-use obmalloc
arenas. Use to replace the old implementation of address_in_range(). The
radix tree approach makes it easy to increase pool sizes beyond the OS
page size. Boosting the pool and arena size allows obmalloc to handle a
significantly higher percentage of requests from its ultra-fast paths.
It also has the advantage of eliminating the memory unsanitary behavior of
the previous address_in_range(). The old address_in_range() was marked
with the annotations _Py_NO_SANITIZE_ADDRESS, _Py_NO_SANITIZE_THREAD, and
_Py_NO_SANITIZE_MEMORY. Those annotations are no longer needed.
To disable the radix tree map, set a preprocessor flag as follows:
-DWITH_PYMALLOC_RADIX_TREE=0.
Co-authored-by: Tim Peters <timpetersgmailcom>

================================================================================

# Changelog - Core and Builtins (Part 2)

: Only handle asynchronous exceptions and requests to drop the
GIL when returning from a call or on the back edges of loops. Makes sure
that __exit__() is always called in with statements, even
for interrupts.

: Update CPython bytecode magic number.

: Raise ImportWarning when calling find_loader().

: Fix crash that happens when replacing sys.stderr with a
callable that can remove the object while an exception is being printed.
Patch by Pablo Galindo.

: The bytecode interpreter uses instruction, rather byte, offsets
internally. This reduces the number of EXTENDED_ARG instructions needed
and streamlines instruction dispatch a bit.

: Fix reference leak in the _hashopenssl extension. Patch
by Pablo Galindo.

: Calls to find_module() by the import system now raise
ImportWarning.

: Improve the syntax error for invalid usage of double starred
elements (â**â) in f-strings. Patch by Pablo Galindo.

: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.

: The import system now prefers using  for
ModuleType.__repr__ over module_repr().

: Added micro-optimizations to _PyType_Lookup() to improve
cache lookup performance in the common case of cache hits.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Report the column offset for SyntaxError for invalid
line continuation characters. Patch by Pablo Galindo.

: Fix misdetection of circular imports when using  
 , which caused false positives in non-trivial multi-threaded
code.

: Emit SyntaxWarnings for assertions with tuple constants, this
is a regression introduced in python3.7

: Tracing now has correct line numbers for attribute accesses
when the attribute is on a different line from the object. Improves
debugging and profiling for multi-line method chains.

: Python no longer fails at startup with a fatal error if a
command line argument contains an invalid Unicode character. The
Py_DecodeLocale() function now escapes byte sequences which would
be decoded as Unicode characters outside the [U+0000; U+10ffff] range.

: Fix a bug that was causing the parser to crash when emitting
syntax errors when reading input from stdin. Patch by Pablo Galindo

: Fix a possible race condition where PyErr_CheckSignals
tries to execute a non-Python signal handler.

: Add __match_args__ to struct sequence objects. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 4)

: CPython now sets the SA_ONSTACK flag in PyOS_setsig for
the VMâs default signal handlers.  This is friendlier to other in-process
code that an extension module or embedding use could pull in (such as
Golangâs cgo) where tiny thread stacks are the norm and sigaltstack()
has been used to provide for signal handlers.  This is a no-op change for
the vast majority of processes that donât use sigaltstack.

: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.

: Add a radix tree based memory map to track in-use obmalloc
arenas. Use to replace the old implementation of address_in_range(). The
radix tree approach makes it easy to increase pool sizes beyond the OS
page size. Boosting the pool and arena size allows obmalloc to handle a
significantly higher percentage of requests from its ultra-fast paths.

It also has the advantage of eliminating the memory unsanitary behavior of
the previous address_in_range(). The old address_in_range() was marked
with the annotations _Py_NO_SANITIZE_ADDRESS, _Py_NO_SANITIZE_THREAD, and
_Py_NO_SANITIZE_MEMORY. Those annotations are no longer needed.

================================================================================

# Changelog - Core and Builtins (Part 5)

To disable the radix tree map, set a preprocessor flag as follows:
-DWITH_PYMALLOC_RADIX_TREE=0.

Co-authored-by: Tim Peters <timpetersgmailcom>

: Only handle asynchronous exceptions and requests to drop the
GIL when returning from a call or on the back edges of loops. Makes sure
that __exit__() is always called in with statements, even
for interrupts.

================================================================================

# Changelog - Library (Part 1)

List:
: Document various stdlib deprecations in imp, pkgutil, and
importlib.util for removal in Python 3.12.
: xmlrpc.client.ServerProxy no longer ignores query and
fragment in the URL of the server.
: The  method of array.array
now has optional  and  parameters.
: Enum: adjust  to show only enum and member name (not
value, nor angle brackets) and  to show only member name.  Update
and improve documentation to match.
: Deprecate all module_repr() methods found in importlib as their
use is being phased out by Python 3.12.
: Raising an exception raised in a âfutureâ instance will create
reference cycles.
: Finish updating the vendored libmpdec to version 2.5.1.  Patch
by Stefan Krah.
: Revert the _decimal C API which was added in .
: Fix deadlock when using ssl.SSLContext debug callback
with ssl.SSLContext.sni_callback().
: Itâs now possible to create MPTCP sockets with IPPROTO_MPTCP
: image/heic and image/heif were added to
.
: The  module now uses OpenSSLâs HMAC implementation
when digestmod argument is a hash name or builtin hash function.
: Implement : Add EncodingWarning warning, 
warn_default_encoding option, PYTHONWARNDEFAULTENCODING
environment variable and encoding="locale" argument value.
: ast.unparse can now render NaNs and empty sets.
: pprint.pprint() gains a new boolean
underscore_numbers optional argument to emit integers with thousands
separated by an underscore character for improved readability (for example
 instead of ).
:  calls are now slightly faster
due to faster argument parsing.
: subprocess.communicate() no longer raises an IndexError
when there is an empty stdout or stderr IO buffer during a timeout on
Windows.
: Fixed long-standing bug of smtplib.SMTP where doing AUTH LOGIN
with initial_response_ok=False will fail.
The cause is that SMTP.auth_login _always_ returns a password if provided
with a challenge string, thus non-compliant with the standard for AUTH
LOGIN.
Also fixes bug with the test for smtpd.

================================================================================

# Changelog - Library (Part 2)

: Add frozen modules to sys.stdlib_module_names. For
example, add "_frozen_importlib" and "_frozen_importlib_external"
names.
: Add keyword arguments support to ChainMap.new_child().
: Add optional parameter ignore_cleanup_errors to
tempfile.TemporaryDirectory() and allow multiple 
attempts. Contributed by C.A.M. Gerlach.
: Include changes from importlib_metadata 3.7:
Performance enhancements to distribution discovery.
entry_points only returns unique distributions.
Introduces new EntryPoints object for containing a set of entry points
with convenience methods for selecting entry points by group or name.
entry_points now returns this object if selection parameters are
supplied but continues to return a dict object for compatibility. Users
are encouraged to rely on the selection interface. The dict object result
is likely to be deprecated in the future.
Added packages_distributions function to return a mapping of packages to
the distributions that provide them.

================================================================================

# Changelog - Library (Part 3)

: Improves the networking efficiency of http.client when
using a proxy via set_tunnel().  Fewer small send
calls are made during connection setup.
: Improve performance of fractions.Fraction arithmetics
for large components.  Contributed by Sergey B. Kirpichev.
: Allow passing a signal number to _thread.interrupt_main().
: Fix ElementTree.extend not working on iterators when using
the Python implementation
: Improve  error handling: If
sqlite3_column_text() and sqlite3_column_blob() set
SQLITE_NOMEM, MemoryError is now raised. Patch by Erlend E.
Aasland.
: Fix a regression introduced in PR 24562, where an empty
bytestring was fetched as  instead of  in .
Patch by Mariusz Felisiak.
: Fixed stacklevel of DeprecationWarning emitted from
 .
: importlib.resources now honors namespace packages, merging
resources from each location in the namespace as introduced in
importlib_resources 3.2 and including incidental changes through
5.0.3.
: datetime.datetime.strptime() now raises ValueError
instead of IndexError when matching  with the  format
specifier.
: Return empty string if base64mime.body_encode receive empty
bytes
: curses.window.enclose() returns now  or 
(as was documented) instead of  or .
: Add MIME types for opus, AAC, 3gpp and 3gpp2
: Add an invalidate_caches() method to the zipimport.zipimporter
class to support importlib.invalidate_caches(). Patch by Desmond Cheong.
: Fail fast in shutil.move() to avoid creating destination
directories on failure.
: Enumâs  and  have changed:  is now
EnumClass.MemberName and  is MemberName.  Additionally,
stdlib Enumâs whose contents are available as module attributes, such as
RegexFlag.IGNORECASE, have their  as module.name, e.g.
re.IGNORECASE.
: Fixed bug where the  interactive run command echoed
the args from the shell command line, even if those have been overridden
at the pdb prompt.
: Fixed bug where breakpoints did not persist across multiple
debugger sessions in âs interactive mode.
: When the tempfile.tempdir global variable is set to a
value of type bytes, it is now handled consistently.  Previously
exceptions could be raised from some tempfile APIs when the directory did
not already exist in this situation.  Also ensures that the
tempfile.gettempdir() and tempfile.gettempdirb() functions
 return  and  respectively.
: Expose X509_V_FLAG_ALLOW_PROXY_CERTS as
VERIFY_ALLOW_PROXY_CERTS to allow proxy certificate
validation as explained in
https://docs.openssl.org/1.1.1/man7/proxy-certificates/.
: Add builtins.aiter and builtins.anext. Patch by Joshua Bronson
(@jab), Daniel Pope (@lordmauve), and Justin Wang (@justin39).

================================================================================

# Changelog - Library (Part 4)

: Document various stdlib deprecations in imp, pkgutil, and
importlib.util for removal in Python 3.12.

: xmlrpc.client.ServerProxy no longer ignores query and
fragment in the URL of the server.

: The  method of array.array
now has optional  and  parameters.

: Enum: adjust  to show only enum and member name (not
value, nor angle brackets) and  to show only member name.  Update
and improve documentation to match.

: Deprecate all module_repr() methods found in importlib as their
use is being phased out by Python 3.12.

: Raising an exception raised in a âfutureâ instance will create
reference cycles.

: Finish updating the vendored libmpdec to version 2.5.1.  Patch
by Stefan Krah.

: Revert the _decimal C API which was added in .

: Fix deadlock when using ssl.SSLContext debug callback
with ssl.SSLContext.sni_callback().

: Itâs now possible to create MPTCP sockets with IPPROTO_MPTCP

: image/heic and image/heif were added to
.

: The  module now uses OpenSSLâs HMAC implementation
when digestmod argument is a hash name or builtin hash function.

================================================================================

# Changelog - Library (Part 5)

: Implement : Add EncodingWarning warning, 
warn_default_encoding option, PYTHONWARNDEFAULTENCODING
environment variable and encoding="locale" argument value.

: ast.unparse can now render NaNs and empty sets.

: pprint.pprint() gains a new boolean
underscore_numbers optional argument to emit integers with thousands
separated by an underscore character for improved readability (for example
 instead of ).

:  calls are now slightly faster
due to faster argument parsing.

: subprocess.communicate() no longer raises an IndexError
when there is an empty stdout or stderr IO buffer during a timeout on
Windows.

: Fixed long-standing bug of smtplib.SMTP where doing AUTH LOGIN
with initial_response_ok=False will fail.

The cause is that SMTP.auth_login _always_ returns a password if provided
with a challenge string, thus non-compliant with the standard for AUTH
LOGIN.

Also fixes bug with the test for smtpd.

: Add frozen modules to sys.stdlib_module_names. For
example, add "_frozen_importlib" and "_frozen_importlib_external"
names.

: Add keyword arguments support to ChainMap.new_child().

================================================================================

# Changelog - Library (Part 6)

: Add optional parameter ignore_cleanup_errors to
tempfile.TemporaryDirectory() and allow multiple 
attempts. Contributed by C.A.M. Gerlach.

: Include changes from importlib_metadata 3.7:

Performance enhancements to distribution discovery.

entry_points only returns unique distributions.

Introduces new EntryPoints object for containing a set of entry points
with convenience methods for selecting entry points by group or name.
entry_points now returns this object if selection parameters are
supplied but continues to return a dict object for compatibility. Users
are encouraged to rely on the selection interface. The dict object result
is likely to be deprecated in the future.

Added packages_distributions function to return a mapping of packages to
the distributions that provide them.

: Improves the networking efficiency of http.client when
using a proxy via set_tunnel().  Fewer small send
calls are made during connection setup.

: Improve performance of fractions.Fraction arithmetics
for large components.  Contributed by Sergey B. Kirpichev.

: Allow passing a signal number to _thread.interrupt_main().

: Fix ElementTree.extend not working on iterators when using
the Python implementation

================================================================================

# Changelog - Library (Part 7)

: Improve  error handling: If
sqlite3_column_text() and sqlite3_column_blob() set
SQLITE_NOMEM, MemoryError is now raised. Patch by Erlend E.
Aasland.

: Fix a regression introduced in PR 24562, where an empty
bytestring was fetched as  instead of  in .
Patch by Mariusz Felisiak.

: Fixed stacklevel of DeprecationWarning emitted from
 .

: importlib.resources now honors namespace packages, merging
resources from each location in the namespace as introduced in
importlib_resources 3.2 and including incidental changes through
5.0.3.

: datetime.datetime.strptime() now raises ValueError
instead of IndexError when matching  with the  format
specifier.

: Return empty string if base64mime.body_encode receive empty
bytes

: curses.window.enclose() returns now  or 
(as was documented) instead of  or .

: Add MIME types for opus, AAC, 3gpp and 3gpp2

: Add an invalidate_caches() method to the zipimport.zipimporter
class to support importlib.invalidate_caches(). Patch by Desmond Cheong.

: Fail fast in shutil.move() to avoid creating destination
directories on failure.

================================================================================

# Changelog - Library (Part 8)

: Enumâs  and  have changed:  is now
EnumClass.MemberName and  is MemberName.  Additionally,
stdlib Enumâs whose contents are available as module attributes, such as
RegexFlag.IGNORECASE, have their  as module.name, e.g.
re.IGNORECASE.

: Fixed bug where the  interactive run command echoed
the args from the shell command line, even if those have been overridden
at the pdb prompt.

: Fixed bug where breakpoints did not persist across multiple
debugger sessions in âs interactive mode.

: When the tempfile.tempdir global variable is set to a
value of type bytes, it is now handled consistently.  Previously
exceptions could be raised from some tempfile APIs when the directory did
not already exist in this situation.  Also ensures that the
tempfile.gettempdir() and tempfile.gettempdirb() functions
 return  and  respectively.

: Expose X509_V_FLAG_ALLOW_PROXY_CERTS as
VERIFY_ALLOW_PROXY_CERTS to allow proxy certificate
validation as explained in
https://docs.openssl.org/1.1.1/man7/proxy-certificates/.

: Add builtins.aiter and builtins.anext. Patch by Joshua Bronson
(@jab), Daniel Pope (@lordmauve), and Justin Wang (@justin39).

================================================================================

# Changelog - Documentation

List:
: Answer âWhy is there no goto?â in the Design and History FAQ.
: Clarified that a result from time.monotonic(),
time.perf_counter(), time.process_time(), or
time.thread_time() can be compared with the result from any
following call to the same function - not just the next immediate call.
: Fix type documentation for Fault.faultCode; the type has to
be  instead of .
: Clarified wording of s * n in the Common Sequence Operations

: Answer âWhy is there no goto?â in the Design and History FAQ.

: Clarified that a result from time.monotonic(),
time.perf_counter(), time.process_time(), or
time.thread_time() can be compared with the result from any
following call to the same function - not just the next immediate call.

: Fix type documentation for Fault.faultCode; the type has to
be  instead of .

: Clarified wording of s * n in the Common Sequence Operations

================================================================================

# Changelog - Tests

List:
: Fix test_getsetlocale_issue1813() of test_locale: skip the test
if setlocale() fails. Patch by Victor Stinner.
: Add workaround for Ubuntuâs custom OpenSSL security level
policy.

: Fix test_getsetlocale_issue1813() of test_locale: skip the test
if setlocale() fails. Patch by Victor Stinner.

: Add workaround for Ubuntuâs custom OpenSSL security level
policy.

================================================================================

# Changelog - Build (Part 1)

List:
: Introduce and correctly use ALIGNOF_X in place of SIZEOF_X for
alignment-related code in optimized string routines. Patch by Jessica
Clarke.
: Update macOS, Windows, and CI to OpenSSL 1.1.1k.
: Improve configure.ac: Check for presence of autoconf-archive
package and remove our copies of M4 macros.
: The  script now supports --with-openssl-rpath
option.
: Use _freeze_importlib to generate code for the
 module. This approach ensures the code matches the
interpreter version.  Previously, PYTHON_FOR_REGEN was used to generate
the code, which might be wrong.  The marshal format for code objects has
changed with , commit 877df851. Update the code and the expected
code sizes in ctypes test_frozentable.

: Introduce and correctly use ALIGNOF_X in place of SIZEOF_X for
alignment-related code in optimized string routines. Patch by Jessica
Clarke.

: Update macOS, Windows, and CI to OpenSSL 1.1.1k.

: Improve configure.ac: Check for presence of autoconf-archive
package and remove our copies of M4 macros.

: The  script now supports --with-openssl-rpath
option.

================================================================================

# Changelog - Build (Part 2)

: Use _freeze_importlib to generate code for the
 module. This approach ensures the code matches the
interpreter version.  Previously, PYTHON_FOR_REGEN was used to generate
the code, which might be wrong.  The marshal format for code objects has
changed with , commit 877df851. Update the code and the expected
code sizes in ctypes test_frozentable.

================================================================================

# Changelog - Windows

List:
: Build  with the  module enabled. Patch
by Erlend E. Aasland.

: Build  with the  module enabled. Patch
by Erlend E. Aasland.

================================================================================

# Changelog - IDLE

List:
: Document that IDLE can fail on Unix either from misconfigured
IP masquerade rules or failure displaying complex colored (non-ascii)
characters.

: Document that IDLE can fail on Unix either from misconfigured
IP masquerade rules or failure displaying complex colored (non-ascii)
characters.

================================================================================

# Changelog - C API (Part 1)

List:
: The limited C API is now supported if Python is built in debug
mode (if the  macro is defined). In the limited C API, the
Py_INCREF() and Py_DECREF() functions are now implemented
as opaque function calls, rather than accessing directly the
PyObject.ob_refcnt member, if Python is built in debug mode
and the Py_LIMITED_API macro targets Python 3.10 or newer. It became
possible to support the limited C API in debug mode because the
 structure is the same in release and debug mode since
Python 3.8 (see ).
The limited C API is still not supported in the --with-trace-refs
special build (Py_TRACE_REFS macro).
Patch by Victor Stinner.

: Remove the  header file with functions:

PyArena_New()
PyArena_Free()
PyArena_Malloc()
PyArena_AddPyObject()

These functions were undocumented, excluded from the limited C API, and
were only used internally by the compiler. Patch by Victor Stinner.

: Remove the compiler and parser functions using  
type, because the public AST C API was removed:

================================================================================

# Changelog - C API (Part 2)

PyAST_Compile()
PyAST_CompileEx()
PyAST_CompileObject()
PyFuture_FromAST()
PyFuture_FromASTObject()
PyParser_ASTFromFile()
PyParser_ASTFromFileObject()
PyParser_ASTFromFilename()
PyParser_ASTFromString()
PyParser_ASTFromStringObject()

These functions were undocumented and excluded from the limited C API.
Patch by Victor Stinner.

: Remove , , and Python-ast.h header
files. These functions were undocumented and excluded from the limited C
API. Most names defined by these header files were not prefixed by 
and so could create names conflicts. For example, Python-ast.h defined
a  macro which was conflict with the  name used by the
Windows <winbase.h> header. Use the Python  module instead.
Patch by Victor Stinner.
: Fix a PyEval_EvalCodeEx() regression: fix reference
counting on builtins. Patch by Victor Stinner.
: Remove the symtable.h header file and the undocumented
functions:

PyST_GetScope()
PySymtable_Build()
PySymtable_BuildObject()
PySymtable_Free()
Py_SymtableString()
Py_SymtableStringObject()

================================================================================

# Changelog - C API (Part 3)

The Py_SymtableString() function was part the stable ABI by mistake
but it could not be used, because the symtable.h header file was
excluded from the limited C API.
The Python  module remains available and is unchanged.
Patch by Victor Stinner.

: Remove the PyAST_Validate() function. It is no longer
possible to build a AST object ( type) with the public C API.
The function was already excluded from the limited C API ().
Patch by Victor Stinner.

: The limited C API is now supported if Python is built in debug
mode (if the  macro is defined). In the limited C API, the
Py_INCREF() and Py_DECREF() functions are now implemented
as opaque function calls, rather than accessing directly the
PyObject.ob_refcnt member, if Python is built in debug mode
and the Py_LIMITED_API macro targets Python 3.10 or newer. It became
possible to support the limited C API in debug mode because the
 structure is the same in release and debug mode since
Python 3.8 (see ).

The limited C API is still not supported in the --with-trace-refs
special build (Py_TRACE_REFS macro).

Patch by Victor Stinner.

: Remove the  header file with functions:

List:
PyArena_New()
PyArena_Free()
PyArena_Malloc()
PyArena_AddPyObject()

================================================================================

# Changelog - C API (Part 4)

PyArena_AddPyObject()

These functions were undocumented, excluded from the limited C API, and
were only used internally by the compiler. Patch by Victor Stinner.

: Remove the compiler and parser functions using  
type, because the public AST C API was removed:

List:
PyAST_Compile()
PyAST_CompileEx()
PyAST_CompileObject()
PyFuture_FromAST()
PyFuture_FromASTObject()
PyParser_ASTFromFile()
PyParser_ASTFromFileObject()
PyParser_ASTFromFilename()
PyParser_ASTFromString()
PyParser_ASTFromStringObject()

PyAST_CompileObject()

PyFuture_FromASTObject()

PyParser_ASTFromFile()

PyParser_ASTFromFileObject()

PyParser_ASTFromFilename()

PyParser_ASTFromString()

PyParser_ASTFromStringObject()

These functions were undocumented and excluded from the limited C API.
Patch by Victor Stinner.

: Remove , , and Python-ast.h header
files. These functions were undocumented and excluded from the limited C
API. Most names defined by these header files were not prefixed by 
and so could create names conflicts. For example, Python-ast.h defined
a  macro which was conflict with the  name used by the
Windows <winbase.h> header. Use the Python  module instead.
Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 5)

: Fix a PyEval_EvalCodeEx() regression: fix reference
counting on builtins. Patch by Victor Stinner.

: Remove the symtable.h header file and the undocumented
functions:

List:
PyST_GetScope()
PySymtable_Build()
PySymtable_BuildObject()
PySymtable_Free()
Py_SymtableString()
Py_SymtableStringObject()

PySymtable_BuildObject()

Py_SymtableStringObject()

The Py_SymtableString() function was part the stable ABI by mistake
but it could not be used, because the symtable.h header file was
excluded from the limited C API.

The Python  module remains available and is unchanged.

Patch by Victor Stinner.

: Remove the PyAST_Validate() function. It is no longer
possible to build a AST object ( type) with the public C API.
The function was already excluded from the limited C API ().
Patch by Victor Stinner.

================================================================================

# Changelog - Security

List:
: Fix web cache poisoning vulnerability by defaulting the query
args separator to , and allowing the user to choose a custom
separator.

: Fix web cache poisoning vulnerability by defaulting the query
args separator to , and allowing the user to choose a custom
separator.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix SystemError raised when PyArg_Parse*() is used with
 but without PY_SSIZE_T_CLEAN defined.
: PyArg_Parse*() functions now emits DeprecationWarning
when  or  format is used. See  for detail.
: Add a new PySet_CheckExact() function to the C-API to
check if an object is an instance of  but not an instance of a
subtype. Patch by Pablo Galindo.
: The types.FunctionType constructor now inherits the
current builtins if the  dictionary has no "__builtins__"
key, rather than using   as builtins: same behavior as
 and  functions. Defining a function with 
function(...):  in Python is not affected, globals cannot be
overridden with this syntax: it also inherits the current builtins. Patch
by Victor Stinner.
: Functions have a new __builtins__ attribute which is used
to look for builtin symbols when a function is executed, instead of
looking into __globals__['__builtins__']. Patch by Mark Shannon and
Victor Stinner.
: Improve the error message in the parser for exception groups
without parentheses. Patch by Pablo Galindo.
: Fixed an incorrect SyntaxError message for missing comma
in literals. Patch by Pablo Galindo.
: : Explicitly disable bracketed paste in the
interactive interpreter, even if itâs set in the inputrc, is enabled by
default (eg GNU Readline 8.1), or a user calls
readline.read_init_file(). The Python REPL has not implemented
bracketed paste support. Also, bracketed mode writes the "\x1b[?2004h"
escape sequence into stdout which causes test failures in applications
that donât support it. It can still be explicitly enabled by calling
readline.parse_and_bind("set enable-bracketed-paste . Patch by
Dustin Rodrigues.
: Simple calls to type(object) are now faster due to the
vectorcall calling convention. Patch by Dennis Sweeney.
: Make the compiler merges same co_code and co_linetable objects
in a module like already did for co_consts.
: Substring search functions such as    and
str2.find(str1) now sometimes use the âTwo-Wayâ string comparison
algorithm to avoid quadratic behavior on long strings.
: Implement  (structural pattern matching). Patch by
Brandt Bucher.
: In the concurrent.futures.ProcessPoolExecutor,
validate that multiprocess.synchronize() is available on a given
platform and rely on that check in the concurrent.futures test
suite so we can run tests that are unrelated to
ProcessPoolExecutor on those platforms.
: If object.__ipow__() returns NotImplemented, the
operator will correctly fall back to object.__pow__() and
object.__rpow__() as expected.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix SystemError raised when PyArg_Parse*() is used with
 but without PY_SSIZE_T_CLEAN defined.

: PyArg_Parse*() functions now emits DeprecationWarning
when  or  format is used. See  for detail.

: Add a new PySet_CheckExact() function to the C-API to
check if an object is an instance of  but not an instance of a
subtype. Patch by Pablo Galindo.

: The types.FunctionType constructor now inherits the
current builtins if the  dictionary has no "__builtins__"
key, rather than using   as builtins: same behavior as
 and  functions. Defining a function with 
function(...):  in Python is not affected, globals cannot be
overridden with this syntax: it also inherits the current builtins. Patch
by Victor Stinner.

: Functions have a new __builtins__ attribute which is used
to look for builtin symbols when a function is executed, instead of
looking into __globals__['__builtins__']. Patch by Mark Shannon and
Victor Stinner.

: Improve the error message in the parser for exception groups
without parentheses. Patch by Pablo Galindo.

: Fixed an incorrect SyntaxError message for missing comma
in literals. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 3)

: : Explicitly disable bracketed paste in the
interactive interpreter, even if itâs set in the inputrc, is enabled by
default (eg GNU Readline 8.1), or a user calls
readline.read_init_file(). The Python REPL has not implemented
bracketed paste support. Also, bracketed mode writes the "\x1b[?2004h"
escape sequence into stdout which causes test failures in applications
that donât support it. It can still be explicitly enabled by calling
readline.parse_and_bind("set enable-bracketed-paste . Patch by
Dustin Rodrigues.

: Simple calls to type(object) are now faster due to the
vectorcall calling convention. Patch by Dennis Sweeney.

: Make the compiler merges same co_code and co_linetable objects
in a module like already did for co_consts.

: Substring search functions such as    and
str2.find(str1) now sometimes use the âTwo-Wayâ string comparison
algorithm to avoid quadratic behavior on long strings.

: Implement  (structural pattern matching). Patch by
Brandt Bucher.

================================================================================

# Changelog - Core and Builtins (Part 4)

: In the concurrent.futures.ProcessPoolExecutor,
validate that multiprocess.synchronize() is available on a given
platform and rely on that check in the concurrent.futures test
suite so we can run tests that are unrelated to
ProcessPoolExecutor on those platforms.

: If object.__ipow__() returns NotImplemented, the
operator will correctly fall back to object.__pow__() and
object.__rpow__() as expected.

================================================================================

# Changelog - Library (Part 1)

List:
: The    command line application now properly
fails when detecting an unsupported extension. It exits with a non-zero
exit code and prints an error message to stderr.
: Set the chunk size for the  module main function to
io.DEFAULT_BUFFER_SIZE. This is slightly faster than the 1024 bytes
constant that was used previously.
: Handle None in single-arg versions of
print_exception() and
format_exception().
: Fix TextIOWrapper can not flush internal buffer forever after
very large text is written.
: Prevent needless allocation of  aggregate
function context when no rows match an aggregate query. Patch by Erlend E.
Aasland.
: Improve  error handling:
sqlite3_column_name() failures now result in MemoryError. Patch
by Erlend E. Aasland.
: Fix segfault in sqlite3.Connection.backup() if no
argument was provided. The regression was introduced by PR 23838. Patch by
Erlend E. Aasland.
: The readline module now passes its tests when built directly
against libedit. Existing irreconcilable API differences remain in
readline.get_begidx() and readline.get_endidx() behavior based
on libreadline vs libedit use.
: Fix a bug in  that was causing it to not ask for
more input when multi-line snippets have unclosed parentheses. Patch by
Pablo Galindo
: deprecate unsupported ability to access enum members as
attributes of other enum members
: Fix recent regression in None argument handling in
 module functions.
: The namedtuple __new__ method had its __builtins__ set to None
instead of an actual dictionary.  This created problems for introspection
tools.
: Added , ,
 and O_NOFOLLOW_ANY for macOS. Patch by
Donghee Na.
: Adds resource.RLIMIT_KQUEUES constant from FreeBSD to
the  module.
: Make the pure Python implementation of
xml.etree.ElementTree behave the same as the C implementation
(_elementree) regarding default attribute values (by not setting
specified_attributes=1).
: In ctypes, now packed bitfields are calculated properly and the
first item of packed bitfields is now shrank correctly.

================================================================================

# Changelog - Library (Part 2)

: The    command line application now properly
fails when detecting an unsupported extension. It exits with a non-zero
exit code and prints an error message to stderr.

: Set the chunk size for the  module main function to
io.DEFAULT_BUFFER_SIZE. This is slightly faster than the 1024 bytes
constant that was used previously.

: Handle None in single-arg versions of
print_exception() and
format_exception().

: Fix TextIOWrapper can not flush internal buffer forever after
very large text is written.

: Prevent needless allocation of  aggregate
function context when no rows match an aggregate query. Patch by Erlend E.
Aasland.

: Improve  error handling:
sqlite3_column_name() failures now result in MemoryError. Patch
by Erlend E. Aasland.

: Fix segfault in sqlite3.Connection.backup() if no
argument was provided. The regression was introduced by PR 23838. Patch by
Erlend E. Aasland.

: The readline module now passes its tests when built directly
against libedit. Existing irreconcilable API differences remain in
readline.get_begidx() and readline.get_endidx() behavior based
on libreadline vs libedit use.

================================================================================

# Changelog - Library (Part 3)

: Fix a bug in  that was causing it to not ask for
more input when multi-line snippets have unclosed parentheses. Patch by
Pablo Galindo

: deprecate unsupported ability to access enum members as
attributes of other enum members

: Fix recent regression in None argument handling in
 module functions.

: The namedtuple __new__ method had its __builtins__ set to None
instead of an actual dictionary.  This created problems for introspection
tools.

: Added , ,
 and O_NOFOLLOW_ANY for macOS. Patch by
Donghee Na.

: Adds resource.RLIMIT_KQUEUES constant from FreeBSD to
the  module.

: Make the pure Python implementation of
xml.etree.ElementTree behave the same as the C implementation
(_elementree) regarding default attribute values (by not setting
specified_attributes=1).

: In ctypes, now packed bitfields are calculated properly and the
first item of packed bitfields is now shrank correctly.

================================================================================

# Changelog - Documentation

List:
: Clarify that âyield from <expr>â works with any iterable, not
just iterators.
: Update some deprecated unicode APIs which are documented as
âwill be removed in 4.0â to â3.12â. See  for detail.

: Clarify that âyield from <expr>â works with any iterable, not
just iterators.

: Update some deprecated unicode APIs which are documented as
âwill be removed in 4.0â to â3.12â. See  for detail.

================================================================================

# Changelog - Tests

List:
: Fix test_importlib to correctly skip Unicode file tests if the
filesystem does not support them.

: Fix test_importlib to correctly skip Unicode file tests if the
filesystem does not support them.

================================================================================

# Changelog - Build (Part 1)

List:
: Windows build now uses  compiler option.
: Add a new configure --without-static-libpython option to
not build the libpythonMAJOR.MINOR.a static library and not install
the  object file.
: The configure script can now use  instead of
 with the command line option --with-readline=editline.
: Make configure script use pkg-config to detect the location of
Tcl/Tk headers and libraries, used to build tkinter.
On macOS, a Tcl/Tk configuration provided by pkg-config will be preferred
over Tcl/Tk frameworks installed in /{System/,}Library/Frameworks. If
both exist and the latter is preferred, the appropriate --with-tcltk-*
configuration options need to be explicitly set.

: Add the âregen-frozenâ makefile target that regenerates the
code for the frozen  module.

: Windows build now uses  compiler option.

: Add a new configure --without-static-libpython option to
not build the libpythonMAJOR.MINOR.a static library and not install
the  object file.

: The configure script can now use  instead of
 with the command line option --with-readline=editline.

: Make configure script use pkg-config to detect the location of
Tcl/Tk headers and libraries, used to build tkinter.

================================================================================

# Changelog - Build (Part 2)

On macOS, a Tcl/Tk configuration provided by pkg-config will be preferred
over Tcl/Tk frameworks installed in /{System/,}Library/Frameworks. If
both exist and the latter is preferred, the appropriate --with-tcltk-*
configuration options need to be explicitly set.

: Add the âregen-frozenâ makefile target that regenerates the
code for the frozen  module.

================================================================================

# Changelog - Windows

List:
: PyCMethod_New() is now present in python3.lib.

: PyCMethod_New() is now present in python3.lib.

================================================================================

# Changelog - macOS

List:
: Update macOS installer build to use OpenSSL 1.1.1j.

: Update macOS installer build to use OpenSSL 1.1.1j.

================================================================================

# Changelog - IDLE

List:
: Document why printing to IDLEâs Shell is often slower than
printing to a system terminal and that it can be made faster by
pre-formatting a single string before printing.

: Document why printing to IDLEâs Shell is often slower than
printing to a system terminal and that it can be made faster by
pre-formatting a single string before printing.

================================================================================

# Changelog - C API (Part 1)

List:
: Always put compiler and system information on the first line of
the REPL welcome message.
: Remove the private _PyErr_OCCURRED() macro: use the public
PyErr_Occurred() function instead.
: Move odictobject.h, parser_interface.h, picklebufobject.h,
pydebug.h, and pyfpe.h into the cpython/ directory. They must not be
included directly, as they are already included by Python.h: Include
Files.
: Move pyarena.h, pyctype.h, and pytime.h into the cpython/
directory. They must not be included directly, as they are already
included by Python.h: Include Files.
: PyExceptionClass_Name() is now always declared as a
function, in order to hide implementation details. The macro accessed
PyTypeObject.tp_name directly.  Patch by Erlend E. Aasland.
: The PyCFunction_New() function is now exported in the
ABI when compiled with -fvisibility=hidden.
: PyIter_Check() is now always declared as a function, in
order to hide implementation details. The macro accessed
PyTypeObject.tp_iternext directly. Patch by Erlend E. Aasland.
: Convert PyDescr_IsData() macro to a function to hide
implementation details: The macro accessed
PyTypeObject.tp_descr_set directly. Patch by Erlend E.
Aasland.
: Convert PyObject_TypeCheck() macro to a static inline
function. Patch by Erlend E. Aasland.

================================================================================

# Changelog - C API (Part 2)

: Always put compiler and system information on the first line of
the REPL welcome message.

: Remove the private _PyErr_OCCURRED() macro: use the public
PyErr_Occurred() function instead.

: Move odictobject.h, parser_interface.h, picklebufobject.h,
pydebug.h, and pyfpe.h into the cpython/ directory. They must not be
included directly, as they are already included by Python.h: Include
Files.

: Move pyarena.h, pyctype.h, and pytime.h into the cpython/
directory. They must not be included directly, as they are already
included by Python.h: Include Files.

: PyExceptionClass_Name() is now always declared as a
function, in order to hide implementation details. The macro accessed
PyTypeObject.tp_name directly.  Patch by Erlend E. Aasland.

: The PyCFunction_New() function is now exported in the
ABI when compiled with -fvisibility=hidden.

: PyIter_Check() is now always declared as a function, in
order to hide implementation details. The macro accessed
PyTypeObject.tp_iternext directly. Patch by Erlend E. Aasland.

: Convert PyDescr_IsData() macro to a function to hide
implementation details: The macro accessed
PyTypeObject.tp_descr_set directly. Patch by Erlend E.
Aasland.

================================================================================

# Changelog - C API (Part 3)

: Convert PyObject_TypeCheck() macro to a static inline
function. Patch by Erlend E. Aasland.

================================================================================

# Changelog - Security

List:
: Avoid static buffers when computing the repr of
ctypes.c_double and ctypes.c_longdouble values.

: Avoid static buffers when computing the repr of
ctypes.c_double and ctypes.c_longdouble values.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Refactor the  family of functions.

An new function _PyEval_Vector is added to simplify calls to Python from C.
_PyEval_EvalCodeWithName is removed
PyEval_EvalCodeEx is retained as part of the API, but is not used internally

================================================================================

# Changelog - Core and Builtins (Part 2)


: Replace Py_FatalError() calls in the compiler with
regular SystemError exceptions. Patch by Victor Stinner.
: Improve error message for missing â:â before blocks. Patch by
Pablo Galindo.
: Improve error message in the parser when using un-parenthesised
tuples in comprehensions. Patch by Pablo Galindo.
: Fix parser crash when reporting syntax errors in f-string with
newlines. Patch by Pablo Galindo.
: Syntax errors for unterminated string literals now point to the
start of the string instead of reporting EOF/EOL.
: The inline cache for  now also optimizes access to
attributes defined by . This makes reading such attribute up
to 30% faster.
: Improve error messages in the parser when parentheses are not
closed. Patch by Pablo Galindo.
: Fix  repetition incorrectly copying data from the
start of the buffer, even if the data is offset within the buffer (e.g.
after reassigning a slice at the start of the  to a shorter
byte string).
: Fix the _PyUnicode_FromId() function
(_Py_IDENTIFIER(var) API) when Py_Initialize() /
Py_Finalize() is called multiple times: preserve
_PyRuntime.unicode_ids.next_index value.
: Fix a crash when working out the error line of a
SyntaxError in some multi-line expressions.
: frame.f_lineno is correct even if frame.f_trace is set to True
: Remove deprecated aliases to
Collections Abstract Base Classes from the collections
module.
: Fixed possible leak in  when sys.modules is not a
.
: In string formatting, preceding the  field by  no
longer affects the default alignment for strings.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Refactor the  family of functions.

List:
An new function _PyEval_Vector is added to simplify calls to Python from C.
_PyEval_EvalCodeWithName is removed
PyEval_EvalCodeEx is retained as part of the API, but is not used internally

An new function _PyEval_Vector is added to simplify calls to Python from C.

_PyEval_EvalCodeWithName is removed

PyEval_EvalCodeEx is retained as part of the API, but is not used internally

: Replace Py_FatalError() calls in the compiler with
regular SystemError exceptions. Patch by Victor Stinner.

: Improve error message for missing â:â before blocks. Patch by
Pablo Galindo.

: Improve error message in the parser when using un-parenthesised
tuples in comprehensions. Patch by Pablo Galindo.

: Fix parser crash when reporting syntax errors in f-string with
newlines. Patch by Pablo Galindo.

: Syntax errors for unterminated string literals now point to the
start of the string instead of reporting EOF/EOL.

: The inline cache for  now also optimizes access to
attributes defined by . This makes reading such attribute up
to 30% faster.

: Improve error messages in the parser when parentheses are not
closed. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix  repetition incorrectly copying data from the
start of the buffer, even if the data is offset within the buffer (e.g.
after reassigning a slice at the start of the  to a shorter
byte string).

: Fix the _PyUnicode_FromId() function
(_Py_IDENTIFIER(var) API) when Py_Initialize() /
Py_Finalize() is called multiple times: preserve
_PyRuntime.unicode_ids.next_index value.

: Fix a crash when working out the error line of a
SyntaxError in some multi-line expressions.

: frame.f_lineno is correct even if frame.f_trace is set to True

: Remove deprecated aliases to
Collections Abstract Base Classes from the collections
module.

: Fixed possible leak in  when sys.modules is not a
.

: In string formatting, preceding the  field by  no
longer affects the default alignment for strings.

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed a reference leak in the  module. Patch by
Pablo Galindo
: Update the bundled pip to 21.0.1 and setuptools to 52.0.0.
: Deprecate  in documentation and add warning on
import.
: Improve performance of  by 20-30%.  Patch by
Anthony Sottile.
: Fix math.nextafter() for NaN on AIX.
: Add sys.stdlib_module_names, containing the list of the
standard library module names. Patch by Victor Stinner.
: Fix random.Random.sample when  argument is not
.
: Use TracebackExceptionâs new 
param in TestResult to reduce time and memory consumed
by traceback formatting.
: Add randbytes() to random.__all__.
: [Enum] Flags consisting of a single bit are now considered
canonical, and will be the only flags returned from listing and iterating
over a Flag class or a Flag member.  Multi-bit flags are considered
aliases; they will be returned from lookups and operations that result in
their value. Iteration for both Flag and Flag members is in definition
order.
: Added the  parameter to the constructor of
traceback.TracebackException to reduce time and memory for use
cases that only need to call TracebackException.format() and
TracebackException.format_exception_only().
: The Py_FatalError() function and the
faulthandler module now dump the list of extension modules on a
fatal error.
: Removed recursion from TracebackException
to allow it to handle long exception chains.
: [Enum] move member creation from EnumMeta.__new__ to
_proto_member.__set_name__, allowing members to be created and visible
in __init_subclass__.
: Fix os.set_inheritable() for O_PATH file descriptors on Linux.
: Fix a reference leak in the getcodec() function of CJK
codecs. Patch by Victor Stinner.
: Convert the 6 CJK codec extension modules (_codecs_cn,
_codecs_hk, _codecs_iso2022, _codecs_jp, _codecs_kr and _codecs_tw) to the
multiphase initialization API (). Patch by Victor Stinner.
: remove __init_subclass__ support for Enum members
: Make internal caches of the  module compatible with
subinterpreters.
: Fix HTMLParser parsing rules for element attributes containing
commas with spaces. Patch by Karl Dubost.
: Require SQLite 3.7.15 or newer. Patch by Erlend E. Aasland.
bpo-1635741: Convert the _multibytecodec extension module (CJK codecs) to
multi-phase initialization ().  Patch by Erlend E. Aasland.
: The distutils bdist_wininst command deprecated in Python
3.8 has been removed. The distutils bdist_wheel command is now
recommended to distribute binary packages on Windows.
: The undocumented built-in function
sqlite3.enable_shared_cache is now deprecated, scheduled for removal
in Python 3.12.  Its use is strongly discouraged by the SQLite3
documentation.  Patch by Erlend E. Aasland.
: Make pdb populate sys.path[0] exactly the same as regular
python execution.
: Fix pdb: previously pdb would fail to restart the debugging
target if it was specified using a relative path and the current directory
changed.
: Fix CLI of  and  to catch
BrokenPipeError.
: Donât decrement the reference count of the previous user_ptr
when set_panel_userptr fails.
: Allow executing callables that have a boolean value of
 when passed to Threading.thread as the target. Patch
contributed by Barney Stratford.
: Add an âend_linenoâ attribute to the Class and Function objects
that appear in the tree returned by pyclbr functions.  This and the
existing âlinenoâ attribute define the extent of class and def statements.
Patch by Aviral Srivastava.
: The  constants are now exposed in the
 module if available.
: Correct call to tkinter.colorchooser to return RGB
triplet of ints instead of floats.  Patch by Cheryl Sabella.

================================================================================

# Changelog - Library (Part 2)

: Fixed a reference leak in the  module. Patch by
Pablo Galindo

: Update the bundled pip to 21.0.1 and setuptools to 52.0.0.

: Deprecate  in documentation and add warning on
import.

: Improve performance of  by 20-30%.  Patch by
Anthony Sottile.

: Fix math.nextafter() for NaN on AIX.

: Add sys.stdlib_module_names, containing the list of the
standard library module names. Patch by Victor Stinner.

: Fix random.Random.sample when  argument is not
.

: Use TracebackExceptionâs new 
param in TestResult to reduce time and memory consumed
by traceback formatting.

: Add randbytes() to random.__all__.

: [Enum] Flags consisting of a single bit are now considered
canonical, and will be the only flags returned from listing and iterating
over a Flag class or a Flag member.  Multi-bit flags are considered
aliases; they will be returned from lookups and operations that result in
their value. Iteration for both Flag and Flag members is in definition
order.

: Added the  parameter to the constructor of
traceback.TracebackException to reduce time and memory for use
cases that only need to call TracebackException.format() and
TracebackException.format_exception_only().

================================================================================

# Changelog - Library (Part 3)

: The Py_FatalError() function and the
faulthandler module now dump the list of extension modules on a
fatal error.

: Removed recursion from TracebackException
to allow it to handle long exception chains.

: [Enum] move member creation from EnumMeta.__new__ to
_proto_member.__set_name__, allowing members to be created and visible
in __init_subclass__.

: Fix os.set_inheritable() for O_PATH file descriptors on Linux.

: Fix a reference leak in the getcodec() function of CJK
codecs. Patch by Victor Stinner.

: Convert the 6 CJK codec extension modules (_codecs_cn,
_codecs_hk, _codecs_iso2022, _codecs_jp, _codecs_kr and _codecs_tw) to the
multiphase initialization API (). Patch by Victor Stinner.

: remove __init_subclass__ support for Enum members

: Make internal caches of the  module compatible with
subinterpreters.

: Fix HTMLParser parsing rules for element attributes containing
commas with spaces. Patch by Karl Dubost.

: Require SQLite 3.7.15 or newer. Patch by Erlend E. Aasland.

bpo-1635741: Convert the _multibytecodec extension module (CJK codecs) to
multi-phase initialization ().  Patch by Erlend E. Aasland.

================================================================================

# Changelog - Library (Part 4)

: The distutils bdist_wininst command deprecated in Python
3.8 has been removed. The distutils bdist_wheel command is now
recommended to distribute binary packages on Windows.

: The undocumented built-in function
sqlite3.enable_shared_cache is now deprecated, scheduled for removal
in Python 3.12.  Its use is strongly discouraged by the SQLite3
documentation.  Patch by Erlend E. Aasland.

: Make pdb populate sys.path[0] exactly the same as regular
python execution.

: Fix pdb: previously pdb would fail to restart the debugging
target if it was specified using a relative path and the current directory
changed.

: Fix CLI of  and  to catch
BrokenPipeError.

: Donât decrement the reference count of the previous user_ptr
when set_panel_userptr fails.

: Allow executing callables that have a boolean value of
 when passed to Threading.thread as the target. Patch
contributed by Barney Stratford.

: Add an âend_linenoâ attribute to the Class and Function objects
that appear in the tree returned by pyclbr functions.  This and the
existing âlinenoâ attribute define the extent of class and def statements.
Patch by Aviral Srivastava.

: The  constants are now exposed in the
 module if available.

================================================================================

# Changelog - Library (Part 5)

: Correct call to tkinter.colorchooser to return RGB
triplet of ints instead of floats.  Patch by Cheryl Sabella.

================================================================================

# Changelog - Documentation

List:
: Fix doc for type(name, bases, dict).  Patch by Boris
Verkhovskiy and Ãric Araujo.
: Updated importlib.util.resolve_name() doc to use
__spec__.parent instead of __package__. (Thanks Yair Frid.)

: Fix doc for type(name, bases, dict).  Patch by Boris
Verkhovskiy and Ãric Araujo.

: Updated importlib.util.resolve_name() doc to use
__spec__.parent instead of __package__. (Thanks Yair Frid.)

================================================================================

# Changelog - Tests

List:
: Use unittest.TestLoader().loadTestsFromTestCase() instead
of unittest.makeSuite() in  tests. Patch by Erlend E.
Aasland.
: In , fix CheckTraceCallbackContent for SQLite
pre 3.7.15.

: Use unittest.TestLoader().loadTestsFromTestCase() instead
of unittest.makeSuite() in  tests. Patch by Erlend E.
Aasland.

: In , fix CheckTraceCallbackContent for SQLite
pre 3.7.15.

================================================================================

# Changelog - Build (Part 1)

List:
: Pass --timeout=$(TESTTIMEOUT) option to the default profile
task     command.
:   now also runs regen-keyword. Patch by
Victor Stinner.
: Removed the grep -q and -E flags in the tzpath validation
section of the configure script to better accommodate users of some
platforms (specifically Solaris 10).
: Add library search path by wr-cc in add_cross_compiling_paths()
for VxWorks.
: Add --with-wheel-pkg-dir=PATH option to the ./configure
script. If specified, the  module looks for setuptools
and  wheel packages in this directory: if both are present, these
wheel packages are used instead of ensurepip bundled wheel packages.
Some Linux distribution packaging policies recommend against bundling
dependencies. For example, Fedora installs wheel packages in the
/usr/share/python-wheels/ directory and donât install the
ensurepip._bundled package.

: Pass --timeout=$(TESTTIMEOUT) option to the default profile
task     command.

:   now also runs regen-keyword. Patch by
Victor Stinner.

: Removed the grep -q and -E flags in the tzpath validation
section of the configure script to better accommodate users of some
platforms (specifically Solaris 10).

================================================================================

# Changelog - Build (Part 2)

: Add library search path by wr-cc in add_cross_compiling_paths()
for VxWorks.

: Add --with-wheel-pkg-dir=PATH option to the ./configure
script. If specified, the  module looks for setuptools
and  wheel packages in this directory: if both are present, these
wheel packages are used instead of ensurepip bundled wheel packages.

Some Linux distribution packaging policies recommend against bundling
dependencies. For example, Fedora installs wheel packages in the
/usr/share/python-wheels/ directory and donât install the
ensurepip._bundled package.

================================================================================

# Changelog - Windows

List:
: Updated Windows installer to include OpenSSL 1.1.1i
: Upgrade Windows installer to use SQLite 3.34.0.

: Updated Windows installer to include OpenSSL 1.1.1i

: Upgrade Windows installer to use SQLite 3.34.0.

================================================================================

# Changelog - macOS

List:
: Ensure that the value of
sysconfig.get_config_var(âMACOSX_DEPLOYMENT_TARGETâ) is always a string,
even in when the value is parsable as an integer.

: Ensure that the value of
sysconfig.get_config_var(âMACOSX_DEPLOYMENT_TARGETâ) is always a string,
even in when the value is parsable as an integer.

================================================================================

# Changelog - IDLE

List:
: Make IDLE invoke sys.excepthook() in normal, 2-process
mode. Patch by Ken Hilton.
: Fix problem debugging user classes with __repr__ method.
: Disable Debug=>Stack Viewer when user code is running or
Debugger is active, to prevent hang or crash.  Patch by Zackery Spytz.
: Finish zzdummy example extension module: make menu entries
work; add docstrings and tests with 100% coverage.

: Make IDLE invoke sys.excepthook() in normal, 2-process
mode. Patch by Ken Hilton.

: Fix problem debugging user classes with __repr__ method.

: Disable Debug=>Stack Viewer when user code is running or
Debugger is active, to prevent hang or crash.  Patch by Zackery Spytz.

: Finish zzdummy example extension module: make menu entries
work; add docstrings and tests with 100% coverage.

================================================================================

# Changelog - C API

List:
: When Python is built in debug mode (with C assertions), calling
a type slot like  ( in Python) now fails with a
fatal error if the slot succeeded with an exception set, or failed with no
exception set. The error message contains the slot, the type name, and the
current exception (if an exception is set). Patch by Victor Stinner.
: Fixed a compiler warning in Py_UNICODE_ISSPACE() on
platforms with signed .

: When Python is built in debug mode (with C assertions), calling
a type slot like  ( in Python) now fails with a
fatal error if the slot succeeded with an exception set, or failed with no
exception set. The error message contains the slot, the type name, and the
current exception (if an exception is set). Patch by Victor Stinner.

: Fixed a compiler warning in Py_UNICODE_ISSPACE() on
platforms with signed .

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix undefined behavior in Objects/genericaliasobject.c.
: Fix the column offsets for f-strings  nodes
surrounded by parentheses and for nodes that spawn multiple lines. Patch
by Pablo Galindo.
: Fix regression where a single parenthesized starred expression
was a valid assignment target.
: Improve the error message for failed writes/deletes to property
objects. When possible, the attribute name is now shown. Patch provided by
Yurii Karabas.
: Make the type attribute lookup cache per-interpreter. Patch by
Victor Stinner.
: Jumps to jumps are not eliminated when it would break PEP 626.
: Make sure that the  and  attributes of a
frame are set correctly when an exception is raised or re-raised. Required
for PEP 626.
: The coding cookie (ex:   ) is now ignored in
the command passed to the  command line option. Patch by
Victor Stinner.
: Improve error location in expressions that contain assignments.
Patch by Pablo Galindo and Lysandros Nikolaou.
: Remove jump commands made redundant by the deletion of
unreachable bytecode blocks
: Make the  module state per-interpreter. It is now
safe have more than one  module instance. Patch by Donghee Na
and Victor Stinner.
: Fix encoding name when running a  file on Windows:
PyRun_SimpleFileExFlags() now uses the correct encoding to
decode the filename.
: The  of the parameterized generics for
typing.Callable and collections.abc.Callable are now
consistent.  The  for collections.abc.Callable are
now flattened while typing.Callableâs have not changed.  To allow
this change, types.GenericAlias can now be subclassed and
collections.abc.Callableâs __class_getitem__ will now return a
subclass of types.GenericAlias.  Tests for typing were also updated to
not subclass things like Callable[...,  as that is not a valid base
class.  Finally, both s no longer validate their
, in Callable[[argtypes], resulttype] to prepare for
.  Patch by Ken Jin.
: Convert functools module to use
PyType_FromModuleAndSpec().
: Convert  to use heap types, and establish module
state for these.
: Fix _random.Random() seeding.
bpo-1635741: Port the  extension module to multi-phase
initialization ().
: Make the Unicode dictionary of interned strings compatible with
subinterpreters. Patch by Victor Stinner.
: Make _PyUnicode_FromId() function compatible with
subinterpreters. Each interpreter now has an array of identifier objects
(interned strings decoded from UTF-8). Patch by Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix undefined behavior in Objects/genericaliasobject.c.

: Fix the column offsets for f-strings  nodes
surrounded by parentheses and for nodes that spawn multiple lines. Patch
by Pablo Galindo.

: Fix regression where a single parenthesized starred expression
was a valid assignment target.

: Improve the error message for failed writes/deletes to property
objects. When possible, the attribute name is now shown. Patch provided by
Yurii Karabas.

: Make the type attribute lookup cache per-interpreter. Patch by
Victor Stinner.

: Jumps to jumps are not eliminated when it would break PEP 626.

: Make sure that the  and  attributes of a
frame are set correctly when an exception is raised or re-raised. Required
for PEP 626.

: The coding cookie (ex:   ) is now ignored in
the command passed to the  command line option. Patch by
Victor Stinner.

: Improve error location in expressions that contain assignments.
Patch by Pablo Galindo and Lysandros Nikolaou.

: Remove jump commands made redundant by the deletion of
unreachable bytecode blocks

: Make the  module state per-interpreter. It is now
safe have more than one  module instance. Patch by Donghee Na
and Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix encoding name when running a  file on Windows:
PyRun_SimpleFileExFlags() now uses the correct encoding to
decode the filename.

: The  of the parameterized generics for
typing.Callable and collections.abc.Callable are now
consistent.  The  for collections.abc.Callable are
now flattened while typing.Callableâs have not changed.  To allow
this change, types.GenericAlias can now be subclassed and
collections.abc.Callableâs __class_getitem__ will now return a
subclass of types.GenericAlias.  Tests for typing were also updated to
not subclass things like Callable[...,  as that is not a valid base
class.  Finally, both s no longer validate their
, in Callable[[argtypes], resulttype] to prepare for
.  Patch by Ken Jin.

: Convert functools module to use
PyType_FromModuleAndSpec().

: Convert  to use heap types, and establish module
state for these.

: Fix _random.Random() seeding.

bpo-1635741: Port the  extension module to multi-phase
initialization ().

: Make the Unicode dictionary of interned strings compatible with
subinterpreters. Patch by Victor Stinner.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Make _PyUnicode_FromId() function compatible with
subinterpreters. Each interpreter now has an array of identifier objects
(interned strings decoded from UTF-8). Patch by Victor Stinner.

================================================================================

# Changelog - Library (Part 1)

List:
: Handle empty string in variable executable in
platform.libc_ver()
: randrange() now raises a TypeError when step is specified
without a stop argument.  Formerly, it silently ignored the step argument.
: Fixed equality comparison of tkinter.Variable and
tkinter.font.Font. Objects which belong to different Tcl
interpreters are now always different, even if they have the same name.
: Configure LMTP Unix-domain socket to use socket global default
timeout when a timeout is not explicitly provided.
: Allow / character in username, password fields on _PROXY
envars.
: typing.get_args() and typing.get_origin() now
support  union types and  additions to .
: subprocess extra_groups is now correctly passed into
setgroups() system call.
: EnumMeta.__prepare__ now accepts  to properly
support __init_subclass__
: Add optional  to statistics.harmonic_mean().
: When simple query dialogs (tkinter.simpledialog),
message boxes (tkinter.messagebox) or color choose dialog
(tkinter.colorchooser) are created without arguments  and
, and the default root window is not yet created, and
NoDefaultRoot() was not called, a new temporal hidden root
window will be created automatically. It will not be set as the default
root window and will be destroyed right after closing the dialog window.
It will help to use these simple dialog windows in programs which do not
need other GUI.
: Optimized collections.deque.remove().
: Added a root parameter to tkinter.font.nametofont().
:  supports now widgets with boolean value False.
: Fixed range checks for color and pair numbers in .
: Improved placing of simple query windows in Tkinter (such as
tkinter.simpledialog.askinteger()). They are now centered at the
center of the parent window if it is specified and shown, otherwise at the
center of the screen.
: Argparse help no longer uses the confusing phrase, âoptional
argumentsâ. It uses âoptionsâ instead.
bpo-1635741: Port the  extension module to the multiphase
initialization API () and convert its static types to heap
types.
: Fix crash in tracemalloc.Traceback.__repr__() (regressed
in Python 3.9).
:  functions and constructors which need a default
root window raise now RuntimeError with descriptive message instead
of obscure AttributeError or  if it is not created
yet or cannot be created automatically.
: atexit._run_exitfuncs() now logs callback exceptions
using sys.unraisablehook, rather than logging them directly into
sys.stderr and raise the last exception.
: logging.disable will now validate the types and value of
its parameter. It also now accepts strings representing the levels (as
does logging.setLevel) instead of only the numerical values.
: At Python exit, if a callback registered with
atexit.register() fails, its exception is now logged. Previously,
only some exceptions were logged, and the last exception was always
silently ignored.
: Fixed lib2to3.pgen2 to be able to parse PEP-570 positional only
argument syntax.
: In importlib.metadata: -  EntryPoint objects now expose
a  object referencing the Distribution when constructed from
a Distribution. - Add support for package discovery under package
normalization rules. - The object returned by metadata() now has a
formally defined protocol called PackageMetadata with declared support
for the .get_all() method. - Synced with importlib_metadata 3.3.
: A check is added against misspellings of autospect, auto_spec
and set_spec being passed as arguments to patch, patch.object and
create_autospec.
: [tarfile] update nested exception raising to use  
or  
: AttributeError for suspected misspellings of assertions on
mocks are now pointing out that the cause are misspelled assertions and
also what to do if the misspelling is actually an intended attribute name.
The unittest.mock document is also updated to reflect the current set of
recognised misspellings.
: Implemented : added  and Concatenate
to .  Patch by Ken Jin.
: StrEnum: fix _generate_next_value_ to return a str
: Define THREAD_STACK_SIZE for VxWorks.
: [Enum] _EnumDict.update() is now supported.
: Enum: private names do not become members / do not generate
errors â they remain normal attributes
: : call __init_subclass__ after members have been
added
: ast.literal_eval() adds line number information (if
available) in error message for malformed nodes.
: random.sample() no longer warns on a sequence which is
also a set.
: posixpath.expanduser() returns the input  unchanged
if user home directory is None on VxWorks.
: Fix subprocess.check_output(â¦, input=None) behavior when
text=True to be consistent with that of the documentation and
universal_newlines=True.
: Fixed discrepancy between  and the interpreter
in formatting of SyntaxError with lineno not set ( was
changed to match interpreter).
: Raise OverflowError instead of silent truncation in
socket.ntohs() and socket.htons().  Silent truncation was
deprecated in Python 3.7. Patch by Erlend E. Aasland
: Harmonized random.randrange() argument handling to match
.

================================================================================

# Changelog - Library (Part 2)

The integer test and conversion in randrange() now uses
operator.index().
Non-integer arguments to randrange() are deprecated.
The ValueError is deprecated in favor of a .
It now runs a little faster than before.

(Contributed by Raymond Hettinger and Serhiy Storchaka.)

================================================================================

# Changelog - Library (Part 3)

: Restore compatibility for uname_result around deepcopy and
_replace.
: zipfile.Path.joinpath now accepts arbitrary arguments, same
as pathlib.Path.joinpath.
bpo-1635741: Port the _csv module to the multi-phase initialization API
().
: typing.TypedDict types created using the alternative
call-style syntax now correctly respect the  keyword argument
when setting their __required_keys__ and __optional_keys__ class
attributes.
: Add  and  parameters to the
inspect.signature() and inspect.Signature.from_callable().
: fix  behavior for 
: Ensure asyncio.wait_for waits for task completion
: Fixed bug where zipimporter sometimes reports an
incorrect cause of import errors.
: Fix site and sysconfig modules for VxWorks RTOS which has no
home directories.
: Add os.set_blocking() support for VxWorks RTOS.
: Lowered tkinter.ttk.LabeledScale dummy widget to
prevent hiding part of the content label.
: Fixed memory leak in socketserver.ThreadingMixIn introduced
in Python 3.7.
: Fix initialization race condition in a85encode() and
b85encode() in . Patch by Brandon Stansbury.

: Handle empty string in variable executable in
platform.libc_ver()

================================================================================

# Changelog - Library (Part 4)

: randrange() now raises a TypeError when step is specified
without a stop argument.  Formerly, it silently ignored the step argument.

: Fixed equality comparison of tkinter.Variable and
tkinter.font.Font. Objects which belong to different Tcl
interpreters are now always different, even if they have the same name.

: Configure LMTP Unix-domain socket to use socket global default
timeout when a timeout is not explicitly provided.

: Allow / character in username, password fields on _PROXY
envars.

: typing.get_args() and typing.get_origin() now
support  union types and  additions to .

: subprocess extra_groups is now correctly passed into
setgroups() system call.

: EnumMeta.__prepare__ now accepts  to properly
support __init_subclass__

: Add optional  to statistics.harmonic_mean().

================================================================================

# Changelog - Library (Part 5)

: When simple query dialogs (tkinter.simpledialog),
message boxes (tkinter.messagebox) or color choose dialog
(tkinter.colorchooser) are created without arguments  and
, and the default root window is not yet created, and
NoDefaultRoot() was not called, a new temporal hidden root
window will be created automatically. It will not be set as the default
root window and will be destroyed right after closing the dialog window.
It will help to use these simple dialog windows in programs which do not
need other GUI.

: Optimized collections.deque.remove().

: Added a root parameter to tkinter.font.nametofont().

:  supports now widgets with boolean value False.

: Fixed range checks for color and pair numbers in .

: Improved placing of simple query windows in Tkinter (such as
tkinter.simpledialog.askinteger()). They are now centered at the
center of the parent window if it is specified and shown, otherwise at the
center of the screen.

: Argparse help no longer uses the confusing phrase, âoptional
argumentsâ. It uses âoptionsâ instead.

bpo-1635741: Port the  extension module to the multiphase
initialization API () and convert its static types to heap
types.

================================================================================

# Changelog - Library (Part 6)

: Fix crash in tracemalloc.Traceback.__repr__() (regressed
in Python 3.9).

:  functions and constructors which need a default
root window raise now RuntimeError with descriptive message instead
of obscure AttributeError or  if it is not created
yet or cannot be created automatically.

: atexit._run_exitfuncs() now logs callback exceptions
using sys.unraisablehook, rather than logging them directly into
sys.stderr and raise the last exception.

: logging.disable will now validate the types and value of
its parameter. It also now accepts strings representing the levels (as
does logging.setLevel) instead of only the numerical values.

: At Python exit, if a callback registered with
atexit.register() fails, its exception is now logged. Previously,
only some exceptions were logged, and the last exception was always
silently ignored.

: Fixed lib2to3.pgen2 to be able to parse PEP-570 positional only
argument syntax.

================================================================================

# Changelog - Library (Part 7)

: In importlib.metadata: -  EntryPoint objects now expose
a  object referencing the Distribution when constructed from
a Distribution. - Add support for package discovery under package
normalization rules. - The object returned by metadata() now has a
formally defined protocol called PackageMetadata with declared support
for the .get_all() method. - Synced with importlib_metadata 3.3.

: A check is added against misspellings of autospect, auto_spec
and set_spec being passed as arguments to patch, patch.object and
create_autospec.

: [tarfile] update nested exception raising to use  
or

: AttributeError for suspected misspellings of assertions on
mocks are now pointing out that the cause are misspelled assertions and
also what to do if the misspelling is actually an intended attribute name.
The unittest.mock document is also updated to reflect the current set of
recognised misspellings.

: Implemented : added  and Concatenate
to .  Patch by Ken Jin.

: StrEnum: fix _generate_next_value_ to return a str

: Define THREAD_STACK_SIZE for VxWorks.

: [Enum] _EnumDict.update() is now supported.

: Enum: private names do not become members / do not generate
errors â they remain normal attributes

================================================================================

# Changelog - Library (Part 8)

: : call __init_subclass__ after members have been
added

: ast.literal_eval() adds line number information (if
available) in error message for malformed nodes.

: random.sample() no longer warns on a sequence which is
also a set.

: posixpath.expanduser() returns the input  unchanged
if user home directory is None on VxWorks.

: Fix subprocess.check_output(â¦, input=None) behavior when
text=True to be consistent with that of the documentation and
universal_newlines=True.

: Fixed discrepancy between  and the interpreter
in formatting of SyntaxError with lineno not set ( was
changed to match interpreter).

: Raise OverflowError instead of silent truncation in
socket.ntohs() and socket.htons().  Silent truncation was
deprecated in Python 3.7. Patch by Erlend E. Aasland

: Harmonized random.randrange() argument handling to match
.

List:
The integer test and conversion in randrange() now uses
operator.index().
Non-integer arguments to randrange() are deprecated.
The ValueError is deprecated in favor of a .
It now runs a little faster than before.

The integer test and conversion in randrange() now uses
operator.index().

Non-integer arguments to randrange() are deprecated.

================================================================================

# Changelog - Library (Part 9)

The ValueError is deprecated in favor of a .

It now runs a little faster than before.

(Contributed by Raymond Hettinger and Serhiy Storchaka.)

: Restore compatibility for uname_result around deepcopy and
_replace.

: zipfile.Path.joinpath now accepts arbitrary arguments, same
as pathlib.Path.joinpath.

bpo-1635741: Port the _csv module to the multi-phase initialization API
().

: typing.TypedDict types created using the alternative
call-style syntax now correctly respect the  keyword argument
when setting their __required_keys__ and __optional_keys__ class
attributes.

: Add  and  parameters to the
inspect.signature() and inspect.Signature.from_callable().

: Ensure asyncio.wait_for waits for task completion

: Fixed bug where zipimporter sometimes reports an
incorrect cause of import errors.

: Fix site and sysconfig modules for VxWorks RTOS which has no
home directories.

: Add os.set_blocking() support for VxWorks RTOS.

: Lowered tkinter.ttk.LabeledScale dummy widget to
prevent hiding part of the content label.

: Fixed memory leak in socketserver.ThreadingMixIn introduced
in Python 3.7.

: Fix initialization race condition in a85encode() and
b85encode() in . Patch by Brandon Stansbury.

================================================================================

# Changelog - Documentation

List:
: Add documentation for the
multiprocessing.pool.ThreadPool class.
: Prominently feature listings from the glossary in documentation
search results. Patch by Ammar Askar.

: Add documentation for the
multiprocessing.pool.ThreadPool class.

: Prominently feature listings from the glossary in documentation
search results. Patch by Ammar Askar.

================================================================================

# Changelog - Tests

List:
: Update test_nntplib to use official group name of news.aioe.org
for testing. Patch by Donghee Na.
: Skip some asyncio tests on VxWorks.
: Enhance test_select.test_select(): it now takes 500
milliseconds rather than 10 seconds. Use Python rather than a shell to
make the test more portable.
: Skip some tests in _test_all_chown_common() on VxWorks.
: Fix bytecode helper assertNotInBytecode.
: Add more attribute checking in test_posix.py
: Disable os.popen and impacted tests on VxWorks
: Port test_ssl and test_uuid to VxWorks RTOS.

: Update test_nntplib to use official group name of news.aioe.org
for testing. Patch by Donghee Na.

: Skip some asyncio tests on VxWorks.

: Enhance test_select.test_select(): it now takes 500
milliseconds rather than 10 seconds. Use Python rather than a shell to
make the test more portable.

: Skip some tests in _test_all_chown_common() on VxWorks.

: Fix bytecode helper assertNotInBytecode.

: Add more attribute checking in test_posix.py

: Disable os.popen and impacted tests on VxWorks

: Port test_ssl and test_uuid to VxWorks RTOS.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix __builtin_available check on older compilers. Patch by
Joshua Root.
: Added --disable-test-modules option to the 
script: donât build nor install test modules. Patch by Xavier de Gaye,
Thomas Petazzoni and Peixing Xin.
: Now all platforms use a value for the âEXT_SUFFIXâ build
variable derived from SOABI (for instance in freeBSD, âEXT_SUFFIXâ is now
â.cpython-310d.soâ instead of â.soâ). Previously only Linux, Mac and
VxWorks were using a value for âEXT_SUFFIXâ that included âSOABIâ.
: Fix implicit function declarations in configure which could
have resulted in incorrect configuration checks.  Patch contributed by
Joshua Root.
: Enable libpython3.so for VxWorks.
: Add fish shell support to macOS installer.

: Fix __builtin_available check on older compilers. Patch by
Joshua Root.

: Added --disable-test-modules option to the 
script: donât build nor install test modules. Patch by Xavier de Gaye,
Thomas Petazzoni and Peixing Xin.

================================================================================

# Changelog - Build (Part 2)

: Now all platforms use a value for the âEXT_SUFFIXâ build
variable derived from SOABI (for instance in freeBSD, âEXT_SUFFIXâ is now
â.cpython-310d.soâ instead of â.soâ). Previously only Linux, Mac and
VxWorks were using a value for âEXT_SUFFIXâ that included âSOABIâ.

: Fix implicit function declarations in configure which could
have resulted in incorrect configuration checks.  Patch contributed by
Joshua Root.

: Enable libpython3.so for VxWorks.

: Add fish shell support to macOS installer.

================================================================================

# Changelog - macOS

List:
: Update macOS installer build to use Tcl/Tk 8.6.11 (rc2,
expected to be final release).
: Update macOS installer build to use OpenSSL 1.1.1i.
: Update macOS installer to use SQLite 3.34.0.

: Update macOS installer build to use Tcl/Tk 8.6.11 (rc2,
expected to be final release).

: Update macOS installer build to use OpenSSL 1.1.1i.

: Update macOS installer to use SQLite 3.34.0.

================================================================================

# Changelog - Tools/Demos

List:
: Fixed Python 3 compatibility issue with gdb/libpython.py
handling of attribute dictionaries.
: Fix  tool to use the prope config and library
directories. Patch by Victor Stinner.

: Fixed Python 3 compatibility issue with gdb/libpython.py
handling of attribute dictionaries.

: Fix  tool to use the prope config and library
directories. Patch by Victor Stinner.

================================================================================

# Changelog - C API

List:
: Export the Py_FrozenMain() function: fix a Python 3.9.0
regression. Python 3.9 uses -fvisibility=hidden and the function was
not exported explicitly and so not exported.
: Remove the private _Py_fopen() function which is no
longer needed. Use _Py_wfopen() or _Py_fopen_obj()
instead. Patch by Victor Stinner.
bpo-1635741: Port  extension module to module state
: Update the  module to be a better example of how
to use the limited C API.
: Fix an alignment build warning/error in function
PyVectorcall_Function(). Patch by Andreas Schneider, Antoine Pitrou
and Petr Viktorin.

: Export the Py_FrozenMain() function: fix a Python 3.9.0
regression. Python 3.9 uses -fvisibility=hidden and the function was
not exported explicitly and so not exported.

: Remove the private _Py_fopen() function which is no
longer needed. Use _Py_wfopen() or _Py_fopen_obj()
instead. Patch by Victor Stinner.

bpo-1635741: Port  extension module to module state

: Update the  module to be a better example of how
to use the limited C API.

: Fix an alignment build warning/error in function
PyVectorcall_Function(). Patch by Andreas Schneider, Antoine Pitrou
and Petr Viktorin.

================================================================================

# Changelog - Security

List:
: Add  to the accumulator variable in
hmac.compare_digest, making constant-time-defeating optimizations less
likely.

: Add  to the accumulator variable in
hmac.compare_digest, making constant-time-defeating optimizations less
likely.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: types.GenericAlias will now raise a  when
attempting to initialize with a keyword argument.  Previously, this would
cause the interpreter to crash if the interpreter was compiled with debug
symbols. This does not affect interpreters compiled for release.  Patch by
Ken Jin.
: Several built-in and standard library types now ensure that
their internal result tuples are always tracked by the garbage
collector:

collections.OrderedDict.items()
dict.items()
enumerate()
functools.reduce()
itertools.combinations()
itertools.combinations_with_replacement()
itertools.permutations()
itertools.product()
itertools.zip_longest()


Previously, they could have become untracked by a prior garbage
collection. Patch by Brandt Bucher.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Improve handling of exceptions near recursion limit. Converts a
number of Fatal Errors in RecursionErrors.
: PEP 626: After a return, the f_lineno attribute of a frame is
always the last line executed.
: Speed up comparison of bytes objects with non-bytes objects
when option  is specified. Speed up comparison of bytarray
objects with non-buffer object.
bpo-1635741: Port the  extension module to the multi-phase
initialization API (). Patch by Victor Stinner.
: On Windows, the  event, _PyOS_SigintEvent(), is
now created even if Python is configured to not install signal handlers
(if PyConfig.install_signal_handlers equals to 0, or
Py_InitializeEx(0)).
: Allow assignment expressions in set literals and set
comprehensions as per PEP 572. Patch by Pablo Galindo.
: Change function parameters annotations internal representation
to tuple of strings. Patch provided by Yurii Karabas.
: Fix a regression introduced by the new parser, where an
unparenthesized walrus operator was not allowed within generator
expressions.
: Allow an unparenthesized walrus in subscript indexes.
: Make sure that the compiler front-end produces a well-formed
control flow graph. Be more aggressive in the compiler back-end, as it is
now safe to do so.
: On Windows, fix a regression in signal handling which prevented
to interrupt a program using CTRL+C. The signal handler can be run in a
thread different than the Python thread, in which case the test deciding
if the thread can handle signals is wrong.
: types.GenericAlias objects can now be the targets of
weakrefs.
: Optimise constant subexpressions that appear as part of named
expressions (previously the AST optimiser did not descend into named
expressions). Patch by Nick Coghlan.
: Fixed a bug with the LOAD_ATTR opcode cache that was not
respecting monkey-patching a class-level attribute to make it a
descriptor. Patch by Pablo Galindo.
: Convert  to use heap types.
: Improved accuracy of line tracing events and f_lineno attribute
of Frame objects. See PEP 626 for details.
: Convert  to use heap types.
: Allow GenericAlias objects to use union type
expressions. This allows expressions like  
dict[float,  where previously a  would have been
thrown.  This also fixes union type expressions not de-duplicating
GenericAlias objects. (Contributed by Ken Jin in .)
: The import system triggers a ImportWarning when it falls
back to using load_module().

================================================================================

# Changelog - Core and Builtins (Part 3)

: types.GenericAlias will now raise a  when
attempting to initialize with a keyword argument.  Previously, this would
cause the interpreter to crash if the interpreter was compiled with debug
symbols. This does not affect interpreters compiled for release.  Patch by
Ken Jin.

: Several built-in and standard library types now ensure that
their internal result tuples are always tracked by the garbage
collector:

List:
collections.OrderedDict.items()
dict.items()
enumerate()
functools.reduce()
itertools.combinations()
itertools.combinations_with_replacement()
itertools.permutations()
itertools.product()
itertools.zip_longest()

collections.OrderedDict.items()

itertools.combinations()

itertools.combinations_with_replacement()

itertools.permutations()

itertools.zip_longest()

Previously, they could have become untracked by a prior garbage
collection. Patch by Brandt Bucher.

: Improve handling of exceptions near recursion limit. Converts a
number of Fatal Errors in RecursionErrors.

: PEP 626: After a return, the f_lineno attribute of a frame is
always the last line executed.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Speed up comparison of bytes objects with non-bytes objects
when option  is specified. Speed up comparison of bytarray
objects with non-buffer object.

bpo-1635741: Port the  extension module to the multi-phase
initialization API (). Patch by Victor Stinner.

: On Windows, the  event, _PyOS_SigintEvent(), is
now created even if Python is configured to not install signal handlers
(if PyConfig.install_signal_handlers equals to 0, or
Py_InitializeEx(0)).

: Allow assignment expressions in set literals and set
comprehensions as per PEP 572. Patch by Pablo Galindo.

: Change function parameters annotations internal representation
to tuple of strings. Patch provided by Yurii Karabas.

: Fix a regression introduced by the new parser, where an
unparenthesized walrus operator was not allowed within generator
expressions.

: Allow an unparenthesized walrus in subscript indexes.

: Make sure that the compiler front-end produces a well-formed
control flow graph. Be more aggressive in the compiler back-end, as it is
now safe to do so.

================================================================================

# Changelog - Core and Builtins (Part 5)

: On Windows, fix a regression in signal handling which prevented
to interrupt a program using CTRL+C. The signal handler can be run in a
thread different than the Python thread, in which case the test deciding
if the thread can handle signals is wrong.

: types.GenericAlias objects can now be the targets of
weakrefs.

: Optimise constant subexpressions that appear as part of named
expressions (previously the AST optimiser did not descend into named
expressions). Patch by Nick Coghlan.

: Fixed a bug with the LOAD_ATTR opcode cache that was not
respecting monkey-patching a class-level attribute to make it a
descriptor. Patch by Pablo Galindo.

: Convert  to use heap types.

: Improved accuracy of line tracing events and f_lineno attribute
of Frame objects. See PEP 626 for details.

: Convert  to use heap types.

: Allow GenericAlias objects to use union type
expressions. This allows expressions like  
dict[float,  where previously a  would have been
thrown.  This also fixes union type expressions not de-duplicating
GenericAlias objects. (Contributed by Ken Jin in .)

: The import system triggers a ImportWarning when it falls
back to using load_module().

================================================================================

# Changelog - Library (Part 1)

List:
: CGIHTTPRequestHandler.run_cgi() HTTP_ACCEPT improperly parsed.
Replace the special purpose getallmatchingheaders with generic get_all
method and add relevant tests.
Original Patch by Martin Panter. Modified by Senthil Kumaran.

================================================================================

# Changelog - Library (Part 2)

: Fix issue when dis failed to parse function that has no line
numbers. Patch provided by Yurii Karabas.
: inspect.findsource() now raises  instead of
IndexError when  of a code object is greater than
the file length. This can happen, for example, when a file is edited after
it was imported.  PR by Irit Katriel.
: Fix handling of trailing comments by inspect.getsource().
: Remove unexpected call of  when passing a
 argument to a Mock.
: Added itertools.pairwise()
: Fix test_master_read() so that it succeeds on all platforms
that either raise OSError or return bââ upon reading from master.
: ChainMap.__iter__ no longer calls __getitem__ on underlying
maps
: TracebackException no longer holds a
reference to the exceptionâs traceback object. Consequently, instances of
TracebackException for equivalent but non-equal exceptions now compare as
equal.
: Make test_openpty() avoid unexpected success due to number of
rows and/or number of columns being == 0.
: Remove loop parameter from asyncio.subprocess and
asyncio.tasks functions. Patch provided by Yurii Karabas.
: Remove loop parameter from asyncio.open_connection and
asyncio.start_server functions. Patch provided by Yurii Karabas.
: Add platform.freedesktop_os_release() function to parse
freedesktop.org os-release files.
: Removed the  module, which was deprecated in
Python 3.4. It is somewhat obsolete, little used, and not tested. It was
originally scheduled to be removed in Python 3.6, but such removals were
delayed until after Python 2.7 EOL. Existing users should copy whatever
classes they use into their code. Patch by Donghee Na and and Terry J.
Reedy.
: Deprecate zipimport.zipimporter.load_module() in favour of
exec_module().
: Updated tests for the pty library. test_basic() has been
changed to test_openpty(); this additionally checks if slave termios and
slave winsize are being set properly by pty.openpty(). In order to add
support for FreeBSD, NetBSD, OpenBSD, and Darwin, this also adds
test_master_read(), which demonstrates that pty.spawn() should not depend
on an OSError to exit from its copy loop.
: Remove loop parameter from  in all
asyncio.locks and asyncio.Queue classes. Patch provided by Yurii
Karabas.
: Make filecmp.dircmp respect subclassing. Now the
filecmp.dircmp.subdirs behaves as expected when subclassing
dircmp.
: The exception socket.timeout is now an alias of
TimeoutError.
: Support signal module on VxWorks.
: We fixed an issue in pickle.whichmodule in which importing
multiprocessing could change the how pickle identifies which module an
object belongs to, potentially breaking the unpickling of those objects.
: Simplify the  external bootstrap code:
importlib._bootstrap_external now uses regular imports to import
builtin modules. When it is imported, the builtin __import__()
function is already fully working and so can be used to import builtin
modules like . Patch by Victor Stinner.
bpo-1635741: Convert _sre module types to heap types (PEP 384). Patch by
Erlend E. Aasland.
: subprocess module update for DragonFlyBSD support.
: Port the  extension module to the multi-phase
initialization API (). Patch by Victor Stinner and Mohamed
Koubaa.
: time.time(), time.perf_counter() and
time.monotonic() functions can no longer fail with a Python fatal
error, instead raise a regular Python exception on failure.
: Fixed tkinter.ttk.Style.map(). The function accepts now
the representation of the default state as empty sequence (as returned by
Style.map()). The structure of the result is now the same on all
platform and does not depend on the value of wantobjects.
: Fix various issues with typing.Literal parameter handling
(flatten, deduplicate, use type to cache key). Patch provided by Yurii
Karabas.
: time.perf_counter() on Windows and time.monotonic()
on macOS are now system-wide. Previously, they used an offset computed at
startup to reduce the precision loss caused by the float type. Use
time.perf_counter_ns() and time.monotonic_ns() added in Python
3.7 to avoid this precision loss.
: Fixed support of non-BMP characters in  on macOS.
: Fix the threading.Thread class at fork: do nothing if
the thread is already stopped (ex: fork called at Python exit).
Previously, an error was logged in the child process.
: Port _ssl extension module to heap types.
: The  callback from shutil.rmtree now receives
correct function when  fails.
: Fix os.sendfile() on illumos.
: Add threading.__excepthook__ to allow retrieving the
original value of threading.excepthook() in case it is set to a
broken or a different value. Patch by Mario Corchero.
: Implement PEP 451/spec methods on zipimport.zipimporter:
find_spec(), create_module(), and exec_module().
This also allows for the documented deprecation of find_loader(),
find_module(), and load_module().

================================================================================

# Changelog - Library (Part 3)

: Mock objects which are not unsafe will now raise an
AttributeError if an attribute with the prefix asert, aseert, or assrt is
accessed, in addition to this already happening for the prefixes assert or
assret.
: sqlite3.OptimizedUnicode has been undocumented and obsolete
since Python 3.3, when it was made an alias to .  It is now
deprecated, scheduled for removal in Python 3.12.
: Added threading.gettrace() and
threading.getprofile() to retrieve the functions set by
threading.settrace() and threading.setprofile() respectively.
Patch by Mario Corchero.
: Fixed writing binary Plist files larger than 4 GiB.
: On Unix, the os.device_encoding() function now returns
 rather than the device encoding if the Python UTF-8 Mode is enabled.
: webbrowser: Ignore NotADirectoryError when calling
xdg-settings.
: Fix a stack overflow error for asyncio Task or Future repr().
The overflow occurs under some circumstances when a Task or Future
recursively returns itself.

================================================================================

# Changelog - Library (Part 4)

: Improve asyncio.wait function to create the futures set just
one time.
: Update various modules in the stdlib to fall back on
__spec__.loader when __loader__ isnât defined on a module.
: The load_module() methods found in  now
trigger a DeprecationWarning.
: Windows: Change sysconfig.get_config_var('EXT_SUFFIX') to
the expected full platform_tag.extension format. Previously it was
hard-coded to , now it is compatible with distutils.sysconfig
and will result in something like .cp38-win_amd64.pyd. This brings
windows into conformance with the other platforms.
: The traceback.format_exception(),
traceback.format_exception_only(), and
traceback.print_exception() functions can now take an exception
object as a positional-only argument.
: Enum: fix regression involving inheriting a multiply inherited
enum
: Convert  to use heap types (PEP 384). Patch by
Erlend E. Aasland.
: Added support for the XPath  operator in xml.etree
: Fix pprint.PrettyPrinter.format() overrides being ignored
for contents of small containers. The pprint._safe_repr() function
was removed.
: Expose the  as os.splice() in the
 module. Patch by Pablo Galindo
: Clarify the error message for
asyncio.IncompleteReadError when  is .
: Add async context manager support for contextlib.nullcontext.
: pathlib.PurePath.parents now supports negative
indexing. Patch contributed by Yaroslav Pankovych.
: Added missing connect_accepted_socket() method to
asyncio.AbstractEventLoop.
: Extracting a symlink from a tarball should succeed and
overwrite the symlink if it already exists. The fix is to remove the
existing file or symlink before extraction. Based on patch by Chris AtLee,
Jeffrey Kintscher, and Senthil Kumaran.
: urllib.request and http.client now send
 ALPN extension during TLS handshake when no custom context is
supplied.
: Add os.eventfd() to provide a low level interface for
Linuxâs event notification file descriptor.
: Add AsyncContextDecorator to contextlib to support async
context manager as a decorator.
: Fix time-of-check/time-of-action issue in
subprocess.Popen.send_signal.
: Add an  identifier to âs 
objects. Patch by Batuhan Taskaya
: Add slice support to pathlib.PurePath.parents.

================================================================================

# Changelog - Library (Part 5)

: CGIHTTPRequestHandler.run_cgi() HTTP_ACCEPT improperly parsed.
Replace the special purpose getallmatchingheaders with generic get_all
method and add relevant tests.

Original Patch by Martin Panter. Modified by Senthil Kumaran.

: Fix issue when dis failed to parse function that has no line
numbers. Patch provided by Yurii Karabas.

: inspect.findsource() now raises  instead of
IndexError when  of a code object is greater than
the file length. This can happen, for example, when a file is edited after
it was imported.  PR by Irit Katriel.

: Fix handling of trailing comments by inspect.getsource().

: Remove unexpected call of  when passing a
 argument to a Mock.

: Added itertools.pairwise()

: Fix test_master_read() so that it succeeds on all platforms
that either raise OSError or return bââ upon reading from master.

: ChainMap.__iter__ no longer calls __getitem__ on underlying
maps

: TracebackException no longer holds a
reference to the exceptionâs traceback object. Consequently, instances of
TracebackException for equivalent but non-equal exceptions now compare as
equal.

: Make test_openpty() avoid unexpected success due to number of
rows and/or number of columns being == 0.

================================================================================

# Changelog - Library (Part 6)

: Remove loop parameter from asyncio.subprocess and
asyncio.tasks functions. Patch provided by Yurii Karabas.

: Remove loop parameter from asyncio.open_connection and
asyncio.start_server functions. Patch provided by Yurii Karabas.

: Add platform.freedesktop_os_release() function to parse
freedesktop.org os-release files.

: Removed the  module, which was deprecated in
Python 3.4. It is somewhat obsolete, little used, and not tested. It was
originally scheduled to be removed in Python 3.6, but such removals were
delayed until after Python 2.7 EOL. Existing users should copy whatever
classes they use into their code. Patch by Donghee Na and and Terry J.
Reedy.

: Deprecate zipimport.zipimporter.load_module() in favour of
exec_module().

: Updated tests for the pty library. test_basic() has been
changed to test_openpty(); this additionally checks if slave termios and
slave winsize are being set properly by pty.openpty(). In order to add
support for FreeBSD, NetBSD, OpenBSD, and Darwin, this also adds
test_master_read(), which demonstrates that pty.spawn() should not depend
on an OSError to exit from its copy loop.

================================================================================

# Changelog - Library (Part 7)

: Remove loop parameter from  in all
asyncio.locks and asyncio.Queue classes. Patch provided by Yurii
Karabas.

: Make filecmp.dircmp respect subclassing. Now the
filecmp.dircmp.subdirs behaves as expected when subclassing
dircmp.

: The exception socket.timeout is now an alias of
TimeoutError.

: Support signal module on VxWorks.

: We fixed an issue in pickle.whichmodule in which importing
multiprocessing could change the how pickle identifies which module an
object belongs to, potentially breaking the unpickling of those objects.

: Simplify the  external bootstrap code:
importlib._bootstrap_external now uses regular imports to import
builtin modules. When it is imported, the builtin __import__()
function is already fully working and so can be used to import builtin
modules like . Patch by Victor Stinner.

bpo-1635741: Convert _sre module types to heap types (PEP 384). Patch by
Erlend E. Aasland.

: subprocess module update for DragonFlyBSD support.

: Port the  extension module to the multi-phase
initialization API (). Patch by Victor Stinner and Mohamed
Koubaa.

================================================================================

# Changelog - Library (Part 8)

: time.time(), time.perf_counter() and
time.monotonic() functions can no longer fail with a Python fatal
error, instead raise a regular Python exception on failure.

: Fixed tkinter.ttk.Style.map(). The function accepts now
the representation of the default state as empty sequence (as returned by
Style.map()). The structure of the result is now the same on all
platform and does not depend on the value of wantobjects.

: Fix various issues with typing.Literal parameter handling
(flatten, deduplicate, use type to cache key). Patch provided by Yurii
Karabas.

: time.perf_counter() on Windows and time.monotonic()
on macOS are now system-wide. Previously, they used an offset computed at
startup to reduce the precision loss caused by the float type. Use
time.perf_counter_ns() and time.monotonic_ns() added in Python
3.7 to avoid this precision loss.

: Fixed support of non-BMP characters in  on macOS.

: Fix the threading.Thread class at fork: do nothing if
the thread is already stopped (ex: fork called at Python exit).
Previously, an error was logged in the child process.

: Port _ssl extension module to heap types.

: The  callback from shutil.rmtree now receives
correct function when  fails.

================================================================================

# Changelog - Library (Part 9)

: Fix os.sendfile() on illumos.

: Add threading.__excepthook__ to allow retrieving the
original value of threading.excepthook() in case it is set to a
broken or a different value. Patch by Mario Corchero.

: Implement PEP 451/spec methods on zipimport.zipimporter:
find_spec(), create_module(), and exec_module().

This also allows for the documented deprecation of find_loader(),
find_module(), and load_module().

: Mock objects which are not unsafe will now raise an
AttributeError if an attribute with the prefix asert, aseert, or assrt is
accessed, in addition to this already happening for the prefixes assert or
assret.

: sqlite3.OptimizedUnicode has been undocumented and obsolete
since Python 3.3, when it was made an alias to .  It is now
deprecated, scheduled for removal in Python 3.12.

: Added threading.gettrace() and
threading.getprofile() to retrieve the functions set by
threading.settrace() and threading.setprofile() respectively.
Patch by Mario Corchero.

: Fixed writing binary Plist files larger than 4 GiB.

: On Unix, the os.device_encoding() function now returns
 rather than the device encoding if the Python UTF-8 Mode is enabled.

================================================================================

# Changelog - Library (Part 10)

: webbrowser: Ignore NotADirectoryError when calling
xdg-settings.

: Fix a stack overflow error for asyncio Task or Future repr().

The overflow occurs under some circumstances when a Task or Future
recursively returns itself.

: Improve asyncio.wait function to create the futures set just
one time.

: Update various modules in the stdlib to fall back on
__spec__.loader when __loader__ isnât defined on a module.

: The load_module() methods found in  now
trigger a DeprecationWarning.

: Windows: Change sysconfig.get_config_var('EXT_SUFFIX') to
the expected full platform_tag.extension format. Previously it was
hard-coded to , now it is compatible with distutils.sysconfig
and will result in something like .cp38-win_amd64.pyd. This brings
windows into conformance with the other platforms.

: The traceback.format_exception(),
traceback.format_exception_only(), and
traceback.print_exception() functions can now take an exception
object as a positional-only argument.

: Enum: fix regression involving inheriting a multiply inherited
enum

: Convert  to use heap types (PEP 384). Patch by
Erlend E. Aasland.

: Added support for the XPath  operator in xml.etree

================================================================================

# Changelog - Library (Part 11)

: Fix pprint.PrettyPrinter.format() overrides being ignored
for contents of small containers. The pprint._safe_repr() function
was removed.

: Expose the  as os.splice() in the
 module. Patch by Pablo Galindo

: Clarify the error message for
asyncio.IncompleteReadError when  is .

: Add async context manager support for contextlib.nullcontext.

: pathlib.PurePath.parents now supports negative
indexing. Patch contributed by Yaroslav Pankovych.

: Added missing connect_accepted_socket() method to
asyncio.AbstractEventLoop.

: Extracting a symlink from a tarball should succeed and
overwrite the symlink if it already exists. The fix is to remove the
existing file or symlink before extraction. Based on patch by Chris AtLee,
Jeffrey Kintscher, and Senthil Kumaran.

: urllib.request and http.client now send
 ALPN extension during TLS handshake when no custom context is
supplied.

: Add os.eventfd() to provide a low level interface for
Linuxâs event notification file descriptor.

: Add AsyncContextDecorator to contextlib to support async
context manager as a decorator.

: Fix time-of-check/time-of-action issue in
subprocess.Popen.send_signal.

: Add an  identifier to âs 
objects. Patch by Batuhan Taskaya

================================================================================

# Changelog - Library (Part 12)

: Add slice support to pathlib.PurePath.parents.

================================================================================

# Changelog - Documentation

List:
: Tentative to deprecate  suspicious by first removing it
from the CI and documentation builds, but keeping it around for manual
uses.
: Fix the URL for the IMAP protocol documents.
: Language and version switchers, previously maintained in every
cpython branches, are now handled by docsbuild-script.

: Tentative to deprecate  suspicious by first removing it
from the CI and documentation builds, but keeping it around for manual
uses.

: Fix the URL for the IMAP protocol documents.

: Language and version switchers, previously maintained in every
cpython branches, are now handled by docsbuild-script.

================================================================================

# Changelog - Tests (Part 1)

List:
: Re-enable test_gdb on gdb 9.2 and newer:
https://bugzilla.redhat.com/show_bug.cgi?id=1866884 bug is fixed in gdb
10.1.
: Fix test_asyncio.test_call_later() race condition: donât
measure asyncio performance in the call_later() unit test. The test
failed randomly on the CI.
: Fix test_netrc on VxWorks: create temporary directories using
temp_cwd().
: skip test_getaddrinfo_ipv6_scopeid_symbolic and
test_getnameinfo_ipv6_scopeid_symbolic on VxWorks
: skip test_test of test_mailcap on VxWorks
: add shell requirement for test_pipes
: skip some tests related to fifo on VxWorks
: Fix test_doctest.py failures for VxWorks.
: Include _testinternalcapi module in Windows installer for
test suite
: test_ssl: skip test_min_max_version_mismatch when TLS 1.0 is
not available
: Fix os module failures for VxWorks RTOS.
: Fix fifo test cases for VxWorks RTOS.

: Re-enable test_gdb on gdb 9.2 and newer:
https://bugzilla.redhat.com/show_bug.cgi?id=1866884 bug is fixed in gdb
10.1.

: Fix test_asyncio.test_call_later() race condition: donât
measure asyncio performance in the call_later() unit test. The test
failed randomly on the CI.

================================================================================

# Changelog - Tests (Part 2)

: Fix test_netrc on VxWorks: create temporary directories using
temp_cwd().

: skip test_getaddrinfo_ipv6_scopeid_symbolic and
test_getnameinfo_ipv6_scopeid_symbolic on VxWorks

: skip test_test of test_mailcap on VxWorks

: add shell requirement for test_pipes

: skip some tests related to fifo on VxWorks

: Fix test_doctest.py failures for VxWorks.

: Include _testinternalcapi module in Windows installer for
test suite

: test_ssl: skip test_min_max_version_mismatch when TLS 1.0 is
not available

: Fix os module failures for VxWorks RTOS.

: Fix fifo test cases for VxWorks RTOS.

================================================================================

# Changelog - Build (Part 1)

List:
: remove libnet dependency from detect_socket() for VxWorks
: Fix a race condition in âmake regen-allâ when make -jN option
is used to run jobs in parallel. The clinic.py script now only use atomic
write to write files. Moveover, generated files are now left unchanged if
the content does not change, to not change the file modification time.
: Fix building pycore_bitutils.h internal header on old clang
version without __builtin_bswap16() (ex: Xcode 4.6.3 on Mac OS X
10.7). Patch by Joshua Root and Victor Stinner.
: It is no longer possible to build the  extension
module without  type: remove CTYPES_UNICODE macro.
Anyway, the  type is required to build Python. Patch by
Victor Stinner.
: Support was removed for AIX 5.3 and below. See .
: Addressed three compiler warnings found by undefined behavior
sanitizer (ubsan).

: remove libnet dependency from detect_socket() for VxWorks

: Fix a race condition in âmake regen-allâ when make -jN option
is used to run jobs in parallel. The clinic.py script now only use atomic
write to write files. Moveover, generated files are now left unchanged if
the content does not change, to not change the file modification time.

================================================================================

# Changelog - Build (Part 2)

: Fix building pycore_bitutils.h internal header on old clang
version without __builtin_bswap16() (ex: Xcode 4.6.3 on Mac OS X
10.7). Patch by Joshua Root and Victor Stinner.

: It is no longer possible to build the  extension
module without  type: remove CTYPES_UNICODE macro.
Anyway, the  type is required to build Python. Patch by
Victor Stinner.

: Support was removed for AIX 5.3 and below. See .

: Addressed three compiler warnings found by undefined behavior
sanitizer (ubsan).

================================================================================

# Changelog - Windows

List:
: Remove macro definition of  (to ) in
headers.
: The Windows launcher now properly handles Python 3.10 when
listing installed Python versions.

: Remove macro definition of  (to ) in
headers.

: The Windows launcher now properly handles Python 3.10 when
listing installed Python versions.

================================================================================

# Changelog - macOS (Part 1)

List:
: Fix build on macOS Big Sur when MACOSX_DEPLOYMENT_TARGET=11
: Ensure distutils.unixxcompiler.find_library_file can find
system provided libraries on macOS 11.
: Add support for macOS 11 and Apple Silicon systems.
It is now possible to build âUniversal 2â binaries using
ââenable-universalsdk âwith-universal-archs=universal2â.
Binaries build on later macOS versions can be deployed back to older
versions (tested up to macOS 10.9), when using the correct deployment
target. This is tested using Xcode 11 and later.

: Added Darwin specific madvise options to mmap module.
: The --enable-universalsdk and --with-universal-archs
options for the configure script now check that the specified
architectures can be used.

: Fix build on macOS Big Sur when MACOSX_DEPLOYMENT_TARGET=11

: Ensure distutils.unixxcompiler.find_library_file can find
system provided libraries on macOS 11.

: Add support for macOS 11 and Apple Silicon systems.

It is now possible to build âUniversal 2â binaries using
ââenable-universalsdk âwith-universal-archs=universal2â.

================================================================================

# Changelog - macOS (Part 2)

Binaries build on later macOS versions can be deployed back to older
versions (tested up to macOS 10.9), when using the correct deployment
target. This is tested using Xcode 11 and later.

: Added Darwin specific madvise options to mmap module.

: The --enable-universalsdk and --with-universal-archs
options for the configure script now check that the specified
architectures can be used.

================================================================================

# Changelog - IDLE

List:
: Keep IDLE running on macOS.  Remove obsolete workaround that
prevented running files with shortcuts when using new universal2
installers built on macOS 11.
: Fix reporting offset of the RE error in searchengine.
: Get docstrings for IDLE calltips more often by using
inspect.getdoc.

: Keep IDLE running on macOS.  Remove obsolete workaround that
prevented running files with shortcuts when using new universal2
installers built on macOS 11.

: Fix reporting offset of the RE error in searchengine.

: Get docstrings for IDLE calltips more often by using
inspect.getdoc.

================================================================================

# Changelog - Tools/Demos

List:
: The smelly.py script now also checks the Python dynamic library
and extension modules, not only the Python static library. Make also the
script more verbose: explain what it does.
: Allow Tools/i18n/pygettext.py to detect calls to
 in f-strings.

: The smelly.py script now also checks the Python dynamic library
and extension modules, not only the Python static library. Make also the
script more verbose: explain what it does.

: Allow Tools/i18n/pygettext.py to detect calls to
 in f-strings.

================================================================================

# Changelog - C API (Part 1)

List:
: The PyType_FromSpecWithBases() and
PyType_FromModuleAndSpec() functions now accept a single class as
the  argument.
bpo-1635741: Port  extension module to multiphase
initialization ().
bpo-1635741: Port _posixsubprocess extension module to multiphase
initialization ().
bpo-1635741: Port _posixshmem extension module to multiphase
initialization ()
bpo-1635741: Port _struct extension module to multiphase initialization
()
bpo-1635741: Port  extension module to multiphase
initialization ()
bpo-1635741: Port  extension module to multiphase initialization
()
bpo-1635741: Port _queue extension module to multiphase initialization
()
: Convert  and  back to macros
to allow using them as an l-value. Many third party C extension modules
rely on the ability of using Py_TYPE() and Py_SIZE() to set an object type
and size: Py_TYPE(obj)   and Py_SIZE(obj)  .
bpo-1635741: Port  extension module to multiphase
initialization ()
bpo-1635741: Port  and  extension modules to
multiphase initialization ()
bpo-1635741: Port _random extension module to multiphase initialization
()
bpo-1635741: Port _hashlib extension module to multiphase initialization
()
: Removed the undocumented PyOS_InitInterrupts() function.
Initializing Python already implicitly installs signal handlers: see
PyConfig.install_signal_handlers. Patch by Victor Stinner.
: The Py_TRASHCAN_BEGIN macro no longer accesses PyTypeObject
attributes, but now can get the condition by calling the new private
_PyTrash_cond() function which hides implementation details.
: Py_GetPath(), Py_GetPrefix(),
Py_GetExecPrefix(), Py_GetProgramFullPath(),
Py_GetPythonHome() and Py_GetProgramName() functions now
return  if called before Py_Initialize() (before Python is
initialized). Use the new Python Initialization Configuration API to get the Python Path Configuration.. Patch by Victor Stinner.
: The PyConfig_Read() function now only parses
PyConfig.argv arguments once: PyConfig.parse_argv
is set to  after arguments are parsed. Since Python arguments are
strippped from PyConfig.argv, parsing arguments twice would
parse the application options as Python options.
: Added Py_NewRef() and Py_XNewRef() functions to
increment the reference count of an object and return the object. Patch by
Victor Stinner.
: When Py_Initialize() is called twice, the second call
now updates more  attributes for the configuration, rather than
only . Patch by Victor Stinner.
: The PyType_FromModuleAndSpec() function now accepts
NULL  slot.
bpo-1635741: Added PyModule_AddObjectRef() function: similar to
PyModule_AddObject() but donât steal a reference to the value on
success. Patch by Victor Stinner.
: The METH_FASTCALL calling convention is added to the
limited API. The functions  PyModule_AddType(),
PyType_FromModuleAndSpec(), PyType_GetModule() and
PyType_GetModuleState() are added to the limited API on Windows.
: Add dedicated entry to PyAsyncMethods for sending values
: PyType_GetSlot() can now accept static types.
: PyList_SET_ITEM(), PyTuple_SET_ITEM() and
PyCell_SET() macros can no longer be used as l-value or r-value.
For example,   PyList_SET_ITEM(a,   and PyList_SET_ITEM(a, 
   now fail with a compiler error. It prevents bugs like 
(PyList_SET_ITEM       test. Patch by Zackery Spytz and
Victor Stinner.

================================================================================

# Changelog - C API (Part 2)

: The PyType_FromSpecWithBases() and
PyType_FromModuleAndSpec() functions now accept a single class as
the  argument.

bpo-1635741: Port  extension module to multiphase
initialization ().

bpo-1635741: Port _posixsubprocess extension module to multiphase
initialization ().

bpo-1635741: Port _posixshmem extension module to multiphase
initialization ()

bpo-1635741: Port _struct extension module to multiphase initialization
()

bpo-1635741: Port  extension module to multiphase
initialization ()

bpo-1635741: Port  extension module to multiphase initialization
()

bpo-1635741: Port _queue extension module to multiphase initialization
()

: Convert  and  back to macros
to allow using them as an l-value. Many third party C extension modules
rely on the ability of using Py_TYPE() and Py_SIZE() to set an object type
and size: Py_TYPE(obj)   and Py_SIZE(obj)  .

bpo-1635741: Port  extension module to multiphase
initialization ()

bpo-1635741: Port  and  extension modules to
multiphase initialization ()

bpo-1635741: Port _random extension module to multiphase initialization
()

bpo-1635741: Port _hashlib extension module to multiphase initialization
()

================================================================================

# Changelog - C API (Part 3)

: Removed the undocumented PyOS_InitInterrupts() function.
Initializing Python already implicitly installs signal handlers: see
PyConfig.install_signal_handlers. Patch by Victor Stinner.

: The Py_TRASHCAN_BEGIN macro no longer accesses PyTypeObject
attributes, but now can get the condition by calling the new private
_PyTrash_cond() function which hides implementation details.

: Py_GetPath(), Py_GetPrefix(),
Py_GetExecPrefix(), Py_GetProgramFullPath(),
Py_GetPythonHome() and Py_GetProgramName() functions now
return  if called before Py_Initialize() (before Python is
initialized). Use the new Python Initialization Configuration API to get the Python Path Configuration.. Patch by Victor Stinner.

: The PyConfig_Read() function now only parses
PyConfig.argv arguments once: PyConfig.parse_argv
is set to  after arguments are parsed. Since Python arguments are
strippped from PyConfig.argv, parsing arguments twice would
parse the application options as Python options.

: Added Py_NewRef() and Py_XNewRef() functions to
increment the reference count of an object and return the object. Patch by
Victor Stinner.

================================================================================

# Changelog - C API (Part 4)

: When Py_Initialize() is called twice, the second call
now updates more  attributes for the configuration, rather than
only . Patch by Victor Stinner.

: The PyType_FromModuleAndSpec() function now accepts
NULL  slot.

bpo-1635741: Added PyModule_AddObjectRef() function: similar to
PyModule_AddObject() but donât steal a reference to the value on
success. Patch by Victor Stinner.

: The METH_FASTCALL calling convention is added to the
limited API. The functions  PyModule_AddType(),
PyType_FromModuleAndSpec(), PyType_GetModule() and
PyType_GetModuleState() are added to the limited API on Windows.

: Add dedicated entry to PyAsyncMethods for sending values

: PyType_GetSlot() can now accept static types.

: PyList_SET_ITEM(), PyTuple_SET_ITEM() and
PyCell_SET() macros can no longer be used as l-value or r-value.
For example,   PyList_SET_ITEM(a,   and PyList_SET_ITEM(a, 
   now fail with a compiler error. It prevents bugs like 
(PyList_SET_ITEM       test. Patch by Zackery Spytz and
Victor Stinner.

================================================================================

# Changelog - Security

List:
: Prevented potential DoS attack via CPU and RAM exhaustion when
processing malformed Apple Property List files in binary format.
: The  module no longer accepts entity
declarations in XML plist files to avoid XML vulnerabilities. This should
not affect users as entity declarations are not used in regular plist
files.

: Prevented potential DoS attack via CPU and RAM exhaustion when
processing malformed Apple Property List files in binary format.

: The  module no longer accepts entity
declarations in XML plist files to avoid XML vulnerabilities. This should
not affect users as entity declarations are not used in regular plist
files.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: If the nl_langinfo(CODESET) function returns an empty
string, Python now uses UTF-8 as the filesystem encoding. Patch by Victor
Stinner.
: Fixed a bug in the PEG parser that was causing crashes in debug
mode. Now errors are checked in left-recursive rules to avoid cases where
such errors do not get handled in time and appear as long-distance crashes
in other places.
: Fixed a possible crash in the PEG parser when checking for the
â!=â token in the barry_as_flufl rule. Patch by Pablo Galindo.
: Propagate and raise the errors caused by
PyAST_Validate() in the parser.
: The  module internal state is now per interpreter.
Patch by Victor Stinner.
: Fix handling of errors during creation of PyFunctionObject,
which resulted in operations on uninitialized memory. Patch by Yonatan
Goldschmidt.
: Fix a bug in the parser, where a curly brace following a
 didnât fail immediately. This led to invalid expressions like
  to throw a SyntaxError with a wrong offset, or invalid
expressions ending with a curly brace like   to not fail immediately
in the REPL.
: Fix possible buffer overflow in the new parser when checking
for continuation lines. Patch by Pablo Galindo.
: Run the parser two times. On the first run, disable all the
rules that only generate better error messages to gain performance. If
thereâs a parse failure, run the parser a second time with those enabled.
: The  instruction now uses new âper opcode cacheâ
mechanism and it is about 36% faster now. Patch by Pablo Galindo and Yury
Selivanov.
: Support for the legacy AIX-specific shared library loading
support has been removed. All versions of AIX since 4.3 have supported and
defaulted to using the common Unix mechanism instead.
: The garbage collector now tracks all user-defined classes.
Patch by Brandt Bucher.
: Fixed potential issues with removing not completely initialized
module from sys.modules when import fails.
: Star-unpacking is now allowed for with itemâs targets in the
PEG parser.
: Removed special methods , ,
__floordiv__, , __divmod__, __rfloordiv__,
 and __rdivmod__ of the  class.  They
always raised a .
: Micro optimization when compute
 and
mp_subscript of . Patch by
Donghee Na.
: When loading a native module and a load failure occurs, prevent
a possible UnicodeDecodeError when not running in a UTF-8 locale by
decoding the load error message using the current localeâs encoding.
: Micro optimization for range.index if step is 1. Patch by
Donghee Na.
: Add sys._current_exceptions() function to retrieve a
dictionary mapping each threadâs identifier to the topmost exception
currently active in that thread at the time the function is called.
: Enable  __future__  annotations () by
default. The values found in __annotations__ dicts are now
strings, for example   instead of  .

================================================================================

# Changelog - Core and Builtins (Part 2)

: If the nl_langinfo(CODESET) function returns an empty
string, Python now uses UTF-8 as the filesystem encoding. Patch by Victor
Stinner.

: Fixed a bug in the PEG parser that was causing crashes in debug
mode. Now errors are checked in left-recursive rules to avoid cases where
such errors do not get handled in time and appear as long-distance crashes
in other places.

: Fixed a possible crash in the PEG parser when checking for the
â!=â token in the barry_as_flufl rule. Patch by Pablo Galindo.

: Propagate and raise the errors caused by
PyAST_Validate() in the parser.

: The  module internal state is now per interpreter.
Patch by Victor Stinner.

: Fix handling of errors during creation of PyFunctionObject,
which resulted in operations on uninitialized memory. Patch by Yonatan
Goldschmidt.

: Fix a bug in the parser, where a curly brace following a
 didnât fail immediately. This led to invalid expressions like
  to throw a SyntaxError with a wrong offset, or invalid
expressions ending with a curly brace like   to not fail immediately
in the REPL.

: Fix possible buffer overflow in the new parser when checking
for continuation lines. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Run the parser two times. On the first run, disable all the
rules that only generate better error messages to gain performance. If
thereâs a parse failure, run the parser a second time with those enabled.

: The  instruction now uses new âper opcode cacheâ
mechanism and it is about 36% faster now. Patch by Pablo Galindo and Yury
Selivanov.

: Support for the legacy AIX-specific shared library loading
support has been removed. All versions of AIX since 4.3 have supported and
defaulted to using the common Unix mechanism instead.

: The garbage collector now tracks all user-defined classes.
Patch by Brandt Bucher.

: Fixed potential issues with removing not completely initialized
module from sys.modules when import fails.

: Star-unpacking is now allowed for with itemâs targets in the
PEG parser.

: Removed special methods , ,
__floordiv__, , __divmod__, __rfloordiv__,
 and __rdivmod__ of the  class.  They
always raised a .

: Micro optimization when compute
 and
mp_subscript of . Patch by
Donghee Na.

================================================================================

# Changelog - Core and Builtins (Part 4)

: When loading a native module and a load failure occurs, prevent
a possible UnicodeDecodeError when not running in a UTF-8 locale by
decoding the load error message using the current localeâs encoding.

: Micro optimization for range.index if step is 1. Patch by
Donghee Na.

: Add sys._current_exceptions() function to retrieve a
dictionary mapping each threadâs identifier to the topmost exception
currently active in that thread at the time the function is called.

: Enable  __future__  annotations () by
default. The values found in __annotations__ dicts are now
strings, for example   instead of  .

================================================================================

# Changelog - Library (Part 1)

List:
: On Solaris, thread_time() is now implemented with
gethrvtime() because clock_gettime(CLOCK_THREAD_CPUTIME_ID) is not
always available. Patch by Jakub Kulik.
: The  of  types containing
Generic Alias Types previously did not show
the parameterized types in the GenericAlias.  They have now been
changed to do so.
: binhex.binhex() consistently writes macOS 9 line endings.
: The logging.FileHandler class now keeps a reference to
the builtin  function to be able to open or reopen the file
during Python finalization. Fix errors like: NameError:   
 . Patch by Victor Stinner.
: Removed the unicodedata.ucnhash_CAPI attribute which was an
internal PyCapsule object. The related private _PyUnicode_Name_CAPI
structure was moved to the internal C API. Patch by Victor Stinner.
: Convert the unicodedata extension module to the
multiphase initialization API () and convert the
unicodedata.UCD static type to a heap type. Patch by Mohamed Koubaa
and Victor Stinner.
: Fix memory leak in subprocess.Popen() in case an uid
(gid) specified in  (, extra_groups) overflows
 ().
: InvalidFileException and RecursionError
are now the only errors caused by loading malformed binary Plist file
(previously ValueError and TypeError could be raised in some specific
cases).
: In importlib.resources,  method is more aggressive
about releasing handles to zipfile objects early, enabling use-cases like
certifi to leave the context open but delete the underlying zip file.
: Pickling heap types implemented in C with protocols 0 and 1
raises now an error instead of producing incorrect data.
: In importlib.metadata.PackageNotFoundError, make reference
to the package metadata being missing to improve the user experience.
: plistlib: fix parsing XML plists with hexadecimal integer
values
: Fix an incorrectly formatted error from
_codecs.charmap_decode() when called with a mapped value outside
the range of valid Unicode code points. PR by Max Bernstein.
: Fix pickling pure Python datetime.time subclasses.
Patch by Dean Inwood.
: sched.scheduler.cancel() will now cancel the correct
event, if two events with same priority are scheduled for the same time.
Patch by Bar Harel.
: textwrap.wrap() now attempts to break long words after
hyphens when break_long_words=True and break_on_hyphens=True.
: Use  instead of  for
subprocess.Popen() on Linux to improve performance in cases where it
is deemed safe.
: Add support for zipfile.Path inheritance.
zipfile.Path.is_file() now returns False for non-existent names.
zipfile.Path objects now expose a  attribute and rely on
that to resolve  and  when the  object is at
the root of the zipfile.
: Fix possible ref leaks in  module init.
: Fixed tests using IsolatedAsyncioTestCase from hanging on
BaseExceptions.
: Fixed a bug that was causing ctypes.util.find_library()
to return  when triying to locate a library in an environment when
gcc>=9 is available and  is not. Patch by Pablo Galindo
: Fix bug where TestCase.assertLogs doesnât correctly filter
messages by level.
: Implement , introducing typing.TypeAlias
annotation.
: A new function in abc: update_abstractmethods to re-calculate
an abstract classâs abstract status. In addition,  has been
changed to call this function.
: Added  parameter to pathlib.Path.write_text().
: Tkinter font class repr uses font name
:  for the  attribute of the tkinter.Event
object always returns now the numeric code returned by Tk instead of the
name of the event type.
: encodings.normalize_encoding() now ignores non-ASCII
characters.
: Ensure all methods that generated from
dataclasses.dataclass() objects now have the proper __qualname__
attribute referring to the class they belong to. Patch by Batuhan Taskaya.
: Handle exceptions caused by unparsable date headers when using
email âdefaultâ policy.  Patch by Tim Bell, Georges Toth
: Add F_SETPIPE_SZ and F_GETPIPE_SZ to fcntl module. Allow
setting pipesize on subprocess.Popen.
: Add contextlib.aclosing for deterministic cleanup of async
generators which is analogous to contextlib.closing for non-async
generators. Patch by Joongi Kim and John Belmonte.
: Allow ctypes.wintypes to be imported on non-Windows
systems.
: Add a key function to the bisect module.
: shutil.which() now ignores empty entries in
 instead of treating them as a match.
: Fix  for  /  not
writing the output file in the original directory when the program being
profiled changes the working directory.  PR by Anthony Sottile.
: The  module now uses
pickle.DEFAULT_PROTOCOL by default instead of 
protocol .
: Fixed KeyError exception when flattening an email to a string
attempts to replace a non-existent Content-Transfer-Encoding header.
: The http.cookiejar module now supports the parsing of
cookies in CURL-style cookiejar files through MozillaCookieJar on all
platforms. Previously, such cookie entries would be silently ignored when
loading a cookiejar with such entries.
Additionally, the HTTP Only attribute is persisted in the object, and will
be correctly written to file if the MozillaCookieJar object is
subsequently dumped.

================================================================================

# Changelog - Library (Part 2)

: On Solaris, thread_time() is now implemented with
gethrvtime() because clock_gettime(CLOCK_THREAD_CPUTIME_ID) is not
always available. Patch by Jakub Kulik.

: The  of  types containing
Generic Alias Types previously did not show
the parameterized types in the GenericAlias.  They have now been
changed to do so.

: binhex.binhex() consistently writes macOS 9 line endings.

: The logging.FileHandler class now keeps a reference to
the builtin  function to be able to open or reopen the file
during Python finalization. Fix errors like: NameError:   
 . Patch by Victor Stinner.

: Removed the unicodedata.ucnhash_CAPI attribute which was an
internal PyCapsule object. The related private _PyUnicode_Name_CAPI
structure was moved to the internal C API. Patch by Victor Stinner.

: Convert the unicodedata extension module to the
multiphase initialization API () and convert the
unicodedata.UCD static type to a heap type. Patch by Mohamed Koubaa
and Victor Stinner.

: Fix memory leak in subprocess.Popen() in case an uid
(gid) specified in  (, extra_groups) overflows
 ().

================================================================================

# Changelog - Library (Part 3)

: InvalidFileException and RecursionError
are now the only errors caused by loading malformed binary Plist file
(previously ValueError and TypeError could be raised in some specific
cases).

: In importlib.resources,  method is more aggressive
about releasing handles to zipfile objects early, enabling use-cases like
certifi to leave the context open but delete the underlying zip file.

: Pickling heap types implemented in C with protocols 0 and 1
raises now an error instead of producing incorrect data.

: In importlib.metadata.PackageNotFoundError, make reference
to the package metadata being missing to improve the user experience.

: plistlib: fix parsing XML plists with hexadecimal integer
values

: Fix an incorrectly formatted error from
_codecs.charmap_decode() when called with a mapped value outside
the range of valid Unicode code points. PR by Max Bernstein.

: Fix pickling pure Python datetime.time subclasses.
Patch by Dean Inwood.

: sched.scheduler.cancel() will now cancel the correct
event, if two events with same priority are scheduled for the same time.
Patch by Bar Harel.

================================================================================

# Changelog - Library (Part 4)

: textwrap.wrap() now attempts to break long words after
hyphens when break_long_words=True and break_on_hyphens=True.

: Use  instead of  for
subprocess.Popen() on Linux to improve performance in cases where it
is deemed safe.

: Add support for zipfile.Path inheritance.
zipfile.Path.is_file() now returns False for non-existent names.
zipfile.Path objects now expose a  attribute and rely on
that to resolve  and  when the  object is at
the root of the zipfile.

: Fix possible ref leaks in  module init.

: Fixed tests using IsolatedAsyncioTestCase from hanging on
BaseExceptions.

: Fixed a bug that was causing ctypes.util.find_library()
to return  when triying to locate a library in an environment when
gcc>=9 is available and  is not. Patch by Pablo Galindo

: Fix bug where TestCase.assertLogs doesnât correctly filter
messages by level.

: Implement , introducing typing.TypeAlias
annotation.

: A new function in abc: update_abstractmethods to re-calculate
an abstract classâs abstract status. In addition,  has been
changed to call this function.

: Added  parameter to pathlib.Path.write_text().

: Tkinter font class repr uses font name

================================================================================

# Changelog - Library (Part 5)

:  for the  attribute of the tkinter.Event
object always returns now the numeric code returned by Tk instead of the
name of the event type.

: encodings.normalize_encoding() now ignores non-ASCII
characters.

: Ensure all methods that generated from
dataclasses.dataclass() objects now have the proper __qualname__
attribute referring to the class they belong to. Patch by Batuhan Taskaya.

: Handle exceptions caused by unparsable date headers when using
email âdefaultâ policy.  Patch by Tim Bell, Georges Toth

: Add F_SETPIPE_SZ and F_GETPIPE_SZ to fcntl module. Allow
setting pipesize on subprocess.Popen.

: Add contextlib.aclosing for deterministic cleanup of async
generators which is analogous to contextlib.closing for non-async
generators. Patch by Joongi Kim and John Belmonte.

: Allow ctypes.wintypes to be imported on non-Windows
systems.

: Add a key function to the bisect module.

: shutil.which() now ignores empty entries in
 instead of treating them as a match.

: Fix  for  /  not
writing the output file in the original directory when the program being
profiled changes the working directory.  PR by Anthony Sottile.

================================================================================

# Changelog - Library (Part 6)

: The  module now uses
pickle.DEFAULT_PROTOCOL by default instead of 
protocol .

: Fixed KeyError exception when flattening an email to a string
attempts to replace a non-existent Content-Transfer-Encoding header.

: The http.cookiejar module now supports the parsing of
cookies in CURL-style cookiejar files through MozillaCookieJar on all
platforms. Previously, such cookie entries would be silently ignored when
loading a cookiejar with such entries.

Additionally, the HTTP Only attribute is persisted in the object, and will
be correctly written to file if the MozillaCookieJar object is
subsequently dumped.

================================================================================

# Changelog - Documentation

List:
: Document __format__ functionality for IP addresses.
: Document the default implementation of object.__eq__.
: Clarify that subscription expressions are also valid for
certain  and  in the standard
library, and for user-defined classes and types if the classmethod
__class_getitem__() is provided.
: Documented generic alias type and
types.GenericAlias. Also added an entry in glossary for
generic types.
: Fix tarfileâs extractfile documentation
: Document some restrictions on the default string
representations of numeric classes.

: Document __format__ functionality for IP addresses.

: Document the default implementation of object.__eq__.

: Clarify that subscription expressions are also valid for
certain  and  in the standard
library, and for user-defined classes and types if the classmethod
__class_getitem__() is provided.

: Documented generic alias type and
types.GenericAlias. Also added an entry in glossary for
generic types.

: Fix tarfileâs extractfile documentation

: Document some restrictions on the default string
representations of numeric classes.

================================================================================

# Changelog - Tests

List:
: Fix test_logging.test_race_between_set_target_and_flush(): the
test now waits until all threads complete to avoid leaking running
threads.
: Avoid a test failure in test_lib2to3 if the module has
already imported at the time the test executes. Patch by Pablo Galindo.
: Tests for CJK codecs no longer call  on content
received via HTTP.
: Fixed a failure in test_tk.test_widgets.ScaleTest happening
when executing the test with Tk 8.6.10.

: Fix test_logging.test_race_between_set_target_and_flush(): the
test now waits until all threads complete to avoid leaking running
threads.

: Avoid a test failure in test_lib2to3 if the module has
already imported at the time the test executes. Patch by Pablo Galindo.

: Tests for CJK codecs no longer call  on content
received via HTTP.

: Fixed a failure in test_tk.test_widgets.ScaleTest happening
when executing the test with Tk 8.6.10.

================================================================================

# Changelog - Build

List:
: Add -fno-semantic-interposition to both the compile and
link line when building with --enable-optimizations. Patch by Victor
Stinner and Pablo Galindo.

: Add -fno-semantic-interposition to both the compile and
link line when building with --enable-optimizations. Patch by Victor
Stinner and Pablo Galindo.

================================================================================

# Changelog - Windows

List:
: Updates the icons for IDLE in the Windows Store package.
: Use 8-byte step to detect ASCII sequence in 64-bit Windows
build.
: Update Tcl and Tk to 8.6.10 in Windows installer.
: Update Windows installer to use SQLite 3.33.0.
: Avoid Unicode errors when accessing certain locale data on
Windows.

: Updates the icons for IDLE in the Windows Store package.

: Use 8-byte step to detect ASCII sequence in 64-bit Windows
build.

: Update Tcl and Tk to 8.6.10 in Windows installer.

: Update Windows installer to use SQLite 3.33.0.

: Avoid Unicode errors when accessing certain locale data on
Windows.

================================================================================

# Changelog - macOS

List:
: Ignore invalid prefix lengths in system proxy excludes.

: Ignore invalid prefix lengths in system proxy excludes.

================================================================================

# Changelog - IDLE

List:
: Mostly finish using ttk widgets, mainly for editor, settings,
and searches. Some patches by Mark Roseman.
: Typing opening and closing parentheses inside the parentheses
of a function call will no longer cause unnecessary âflashingâ off and on
of an existing open call-tip, e.g. when typed in a string literal.
: Add a 256Ã256 pixel IDLE icon to the Windows .ico file. Created
by Andrew Clover. Remove the low-color gif variations from the .ico file.

: Mostly finish using ttk widgets, mainly for editor, settings,
and searches. Some patches by Mark Roseman.

: Typing opening and closing parentheses inside the parentheses
of a function call will no longer cause unnecessary âflashingâ off and on
of an existing open call-tip, e.g. when typed in a string literal.

: Add a 256Ã256 pixel IDLE icon to the Windows .ico file. Created
by Andrew Clover. Remove the low-color gif variations from the .ico file.

================================================================================

# Changelog - C API (Part 1)

List:
: The private _PyUnicode_Name_CAPI structure of the PyCapsule
API unicodedata.ucnhash_CAPI has been moved to the internal C API.
Patch by Victor Stinner.
: Fix potential crash in deallocating method objects when
dynamically allocated PyMethodDefâs lifetime is managed through
the  argument of a PyCFunction.
: The subprocess module and os.closerange will now use
the close_range(low,   syscall when it is available for
more efficient closing of ranges of descriptors.
: PyObject_GenericGetDict() is available again in the
limited API when targeting 3.10 or later.
: Add _Py_closerange function to provide performant closing
of a range of file descriptors.
: Py_FileSystemDefaultEncodeErrors and
Py_UTF8Mode are available again in limited API.
: Add PyIter_Send function to allow sending value into
generator/coroutine/iterator without raising StopIteration exception to
signal return.
: Added PyUnicode_AsUTF8AndSize to the limited C API.

: The private _PyUnicode_Name_CAPI structure of the PyCapsule
API unicodedata.ucnhash_CAPI has been moved to the internal C API.
Patch by Victor Stinner.

================================================================================

# Changelog - C API (Part 2)

: Fix potential crash in deallocating method objects when
dynamically allocated PyMethodDefâs lifetime is managed through
the  argument of a PyCFunction.

: The subprocess module and os.closerange will now use
the close_range(low,   syscall when it is available for
more efficient closing of ranges of descriptors.

: PyObject_GenericGetDict() is available again in the
limited API when targeting 3.10 or later.

: Add _Py_closerange function to provide performant closing
of a range of file descriptors.

: Py_FileSystemDefaultEncodeErrors and
Py_UTF8Mode are available again in limited API.

: Add PyIter_Send function to allow sending value into
generator/coroutine/iterator without raising StopIteration exception to
signal return.

: Added PyUnicode_AsUTF8AndSize to the limited C API.

================================================================================

# Changelog - Security (Part 1)

List:
: Fixes python3x._pth being ignored on Windows, caused by the
fix for  (CVE 2020-15801).
: Audit hooks are now cleared later during finalization to avoid
missing events.
: Ensure python3.dll is loaded from correct locations
when Python is embedded (CVE 2020-15523).
: The __hash__() methods of  ipaddress.IPv4Interface and
ipaddress.IPv6Interface incorrectly generated constant hash values of 32
and 128 respectively. This resulted in always causing hash collisions. The
fix uses hash() to generate hash values for the tuple of (address, mask
length, network address).
: Prevent http header injection by rejecting control characters
in http.client.putrequest(â¦).

: Fixes python3x._pth being ignored on Windows, caused by the
fix for  (CVE 2020-15801).

: Audit hooks are now cleared later during finalization to avoid
missing events.

: Ensure python3.dll is loaded from correct locations
when Python is embedded (CVE 2020-15523).

================================================================================

# Changelog - Security (Part 2)

: The __hash__() methods of  ipaddress.IPv4Interface and
ipaddress.IPv6Interface incorrectly generated constant hash values of 32
and 128 respectively. This resulted in always causing hash collisions. The
fix uses hash() to generate hash values for the tuple of (address, mask
length, network address).

: Prevent http header injection by rejecting control characters
in http.client.putrequest(â¦).

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed stack overflow in issubclass() and
isinstance() when getting the  attribute leads to
infinite recursion.
: Speed up calls to reversed() by using the 
vectorcall calling convention. Patch by Donghee Na.
: Calls to  are now faster due to the vectorcall
calling convention. Patch by Dennis Sweeney.
: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.
bpo-1635741: Port the  module to the multi-phase
initialization API ().
: Correctly count control blocks in âexceptâ in compiler. Ensures
that a syntax error, rather a fatal error, occurs for deeply nested, named
exception handlers.
: Fix  of types.GenericAlias. Patch by
Batuhan Taskaya.
bpo-1635741: Port the  extension module to multi-phase
initialization ().
bpo-1635741: Port the  extension module to multi-phase
initialization ().
bpo-1635741: Port the  extension module to multi-phase
initialization ().
bpo-1635741: Port the  extension module to multi-phase
initialization ().
bpo-1635741: Convert the  extension module types to heap
types.
: Fix a possible stack overflow in the parser when parsing
functions and classes with a huge amount of arguments. Patch by Pablo
Galindo.
bpo-1635741: Port the _overlapped extension module to multi-phase
initialization ().
bpo-1635741: Port the _curses_panel extension module to
multi-phase initialization ().
bpo-1635741: Port the  extension module to multi-phase
initialization ().
: Fixes the wrong error description in the error raised by using
2  in format string in f-string and str.format().
: The implementation of signal.siginterrupt() now uses
sigaction() (if it is available in the system) instead of the
deprecated siginterrupt(). Patch by Pablo Galindo.
: Prevent line trace being skipped on platforms not compiled with
USE_COMPUTED_GOTOS. Fixes issue where some lines nested within a
try-except block were not being traced on Windows.
: Fix a crash that occurred when destroying subclasses of
MemoryError. Patch by Pablo Galindo.
bpo-1635741: Port the  extension module to multi-phase
initialization ().
: The  module uses again a global state. Using a module
state per module instance is causing subtle practical problems. For
example, the Mercurial project replaces the __import__() function to
implement lazy import, whereas Python expected that   always
return a fully initialized  module.
: Convert  to use PyType_FromSpec().
bpo-1653741: Port  to multi-phase init.  Convert static types
to heap types.
bpo-1635741: Port the  extension module to the multi-phase
initialization API ().
: Free the stack allocated in va_build_stack if
do_mkstack fails and the stack is not a small_stack.
: Fix a bug that was dropping keys when compiling dict literals
with more than 0xFFFF elements. Patch by Pablo Galindo.
: The output of   contains now only ASCII
characters.
bpo-1635741: Port the , , and 
extension modules to multi-phase initialization API ().
: Optimize dict_merge() for copying dict (e.g. 
and {}.update(d)).
: Implement PEP 604. This supports (int | str) etc. in place of
Union[str, int].
: Removed fallback implementation for .
: Handle interrupts that come after EOF correctly in
PyOS_StdioReadline.
:  with integer argument is now faster (9â60%).
: Constructors ,  and bytearray()
are now faster (around 30â40% for small objects).
: Resolve a regression in CPython 3.8.4 where defining
â__setattr__â in a multi-inheritance setup and calling up the hierarchy
chain could fail if builtins/extension types were involved in the base
types.
: Bytecode optimizations are performed directly on the control
flow graph. This will result in slightly more compact code objects in some
circumstances.
: Always cache the running loop holder when running
asyncio.set_running_loop.
: Fix incorrect refcounting in _ssl.câs
_servername_callback().
bpo-1635741: Port multiprocessing to multi-phase initialization
bpo-1635741: Port  to multiphase initialization
: Use non-NULL default values in the PEG parser keyword list to
overcome a bug that was preventing Python from being properly compiled
when using the XLC compiler. Patch by Pablo Galindo.
: Python 3.8.3 had a regression where compiling with
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT would aggressively mark list comprehension
with CO_COROUTINE. Now only list comprehension making use of async/await
will tagged as so.
bpo-1635741: Port faulthandler to multiphase initialization.
bpo-1635741: Port  to multiphase initialization
: Guard against a NULL pointer dereference within bytearrayobject
triggered by the bytearray()  bytearray() operation.
: add arm64 to the allowable Mac OS arches in mpdecimal.h
: Fix decoding errors with audit when open files with non-ASCII
names on non-UTF-8 locale.
: The âhackcheckâ that prevents sneaking around a typeâs
__setattr__() by calling the superclass method was rewritten to allow C
implemented heap types.
: Prefix the error message with âf-string: â, when parsing an
f-string expression which throws a SyntaxError.
: Empty frozensets are no longer singletons.
: Pre-feed the parser with the location of the f-string
expression, not the f-string itself, which allows us to skip the shifting
of the AST node locations after the parsing is completed.
: Fixes a reference to deallocated stack space during startup
when constructing sys.path involving a relative symlink when code was
supplied via -c.  (discovered via Coverity)
: Fix incorrect expressions and asserts in hashtable code and
tests.
: Opt out serialization/deserialization for _random.Random
: Rename  functions to , so that we can
remove the old set of  functions that were using the old
parser, but keep everything backwards-compatible.
: Stefan Behnel reported that cf_feature_version is used even
when PyCF_ONLY_AST is not set. This is against the intention and against
the documented behavior, so itâs been fixed.
: Remove the remaining files from the old parser and the
 module.
: Convert  to use PyType_FromSpec().
: The encodings.latin_1 module is no longer imported at
startup. Now it is only imported when it is the filesystem encoding or the
stdio encoding.
:  now supports âs  parameter,
which raises a ValueError if the arguments are exhausted at
different lengths. Patch by Brandt Bucher.
bpo-1635741: Port  to multiphase initialization.
: Fix a bug that caused the SyntaxError text to be empty
when a file ends with a line ending in a line continuation character (i.e.
backslash). The error text should contain the text of the last line.
: Fix a possible buffer overflow in the PEG parser when gathering
information for emitting syntax errors. Patch by Pablo Galindo.
bpo-1635741: Port  to multiphase initialization.
: Fix refleak in _Py_fopen_obj() when PySys_Audit() fails
: Add a state to the  module () and apply
the multiphase initialization. Patch by Donghee Na.
: The Python Path Configuration now
takes PyConfig.platlibdir in account.
: Remove the old parser, the  module and all
associated support code, command-line options and environment variables.
Patch by Pablo Galindo.
: Fix a bug where a line with only a line continuation character
is not considered a blank line at tokenizer level. In such cases, more
than a single  token was emitted. The old parser was working
around the issue, but the new parser threw a SyntaxError for valid
input due to this. For example, an empty line following a line
continuation character was interpreted as a SyntaxError.
: Each dictionary view now has a  attribute that
provides a types.MappingProxyType wrapping the original
dictionary.  Patch contributed by Dennis Sweeney.
: Improved the performance of symmetric difference operations on
dictionary item views.  Patch by Dennis Sweeney.
: Fix possible segfault in the new PEG parser when parsing
f-string containing yield statements with no value (f"{yield}").
Patch by Pablo Galindo
: Fixed a possible segfault in the new PEG parser when producing
error messages for invalid assignments of the form . Patch by
Pablo Galindo
: Fix invalid memory read in the new parser when checking
newlines in string literals. Patch by Pablo Galindo.
: Fix memory leak in when parsing f-strings in the new parser.
Patch by Pablo Galindo
: Raise ValueError when validating custom ASTâs where the
constants ,  and  are used within a
 node.
: Allow overriding sys.platlibdir via a new
PYTHONPLATLIBDIR environment variable.
: Fix GIL usage in PyOS_Readline(): lock the GIL to set
an exception and pass the Python thread state when checking if there is a
pending signal.
bpo-1635741: Port  to multiphase initialization.
: Delete unnecessary instance check in importlib.reload(). Patch
by Furkan Ãnder.
: Unexpected errors in calling the  method are no
longer masked by  in the  operator and functions
contains(),  and
 of the  module.
: Attributes ,  and  of the
 object now always has exact type .  Previously,
they could have been an instance of a subclass of .
: Fix a corner case where g-style string formatting of a float
failed to remove trailing zeros.
: When thereâs a SyntaxError in the expression part of an
fstring, the filename attribute of the SyntaxError gets correctly
set to the name of the file the fstring resides in.
: Support the â-dâ debug flag in the new PEG parser. Patch by
Pablo Galindo
: Instances of types created with
PyType_FromSpecWithBases() will no longer automatically visit
their class object when traversing references in the garbage collector.
The user is expected to manually visit the objectâs class. Patch by Pablo
Galindo.
:  is changed to the inline static function.
Patch by Donghee Na.
: Fix a hang that can arise after generator.throw() due to
a cycle in the exception context chain.
: Each interpreter now its has own free lists, singletons and
caches:

================================================================================

# Changelog - Core and Builtins (Part 2)

Free lists: float, tuple, list, dict, frame, context,
asynchronous generator, MemoryError.
Singletons: empty tuple, empty bytes string, empty Unicode string,
single byte character, single Unicode (latin1) character.
Slice cache.

They are no longer shared by all interpreters.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Certain  messages about missing or extra
arguments now include the functionâs qualified name.  Patch by
Dennis Sweeney.
: Make the stack trace correct after calling
generator.throw() on a generator that has yielded from a 
.
: Improve performance of generators by not raising internal
StopIteration.
bpo-1635741: Port  to multiphase initialization.
bpo-1635741: Port  to multiphase initialization.
: Builtin and extension functions that take integer arguments no
longer accept s, s and other objects that can be converted to integers only with a loss
(e.g. that have the  method but do not have the
__index__() method).
: Add int.bit_count(), counting the number of ones in the
binary representation of an integer. Patch by Niklas Fiekas.
: Use ncurses extended color functions when available to support
terminals with 256 colors, and add the new function
curses.has_extended_color_support() to indicate whether extended
color support is provided by the underlying ncurses library.
: Add the private macros _Py_COMP_DIAG_PUSH,
_Py_COMP_DIAG_IGNORE_DEPR_DECLS, and _Py_COMP_DIAG_POP.
: The int type now supports the x.is_integer() method for
compatibility with float.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fixed stack overflow in issubclass() and
isinstance() when getting the  attribute leads to
infinite recursion.

: Speed up calls to reversed() by using the 
vectorcall calling convention. Patch by Donghee Na.

: Calls to  are now faster due to the vectorcall
calling convention. Patch by Dennis Sweeney.

: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.

bpo-1635741: Port the  module to the multi-phase
initialization API ().

: Correctly count control blocks in âexceptâ in compiler. Ensures
that a syntax error, rather a fatal error, occurs for deeply nested, named
exception handlers.

: Fix  of types.GenericAlias. Patch by
Batuhan Taskaya.

bpo-1635741: Port the  extension module to multi-phase
initialization ().

bpo-1635741: Port the  extension module to multi-phase
initialization ().

bpo-1635741: Port the  extension module to multi-phase
initialization ().

bpo-1635741: Port the  extension module to multi-phase
initialization ().

bpo-1635741: Convert the  extension module types to heap
types.

: Fix a possible stack overflow in the parser when parsing
functions and classes with a huge amount of arguments. Patch by Pablo
Galindo.

================================================================================

# Changelog - Core and Builtins (Part 5)

bpo-1635741: Port the _overlapped extension module to multi-phase
initialization ().

bpo-1635741: Port the _curses_panel extension module to
multi-phase initialization ().

bpo-1635741: Port the  extension module to multi-phase
initialization ().

: Fixes the wrong error description in the error raised by using
2  in format string in f-string and str.format().

: The implementation of signal.siginterrupt() now uses
sigaction() (if it is available in the system) instead of the
deprecated siginterrupt(). Patch by Pablo Galindo.

: Prevent line trace being skipped on platforms not compiled with
USE_COMPUTED_GOTOS. Fixes issue where some lines nested within a
try-except block were not being traced on Windows.

: Fix a crash that occurred when destroying subclasses of
MemoryError. Patch by Pablo Galindo.

bpo-1635741: Port the  extension module to multi-phase
initialization ().

: The  module uses again a global state. Using a module
state per module instance is causing subtle practical problems. For
example, the Mercurial project replaces the __import__() function to
implement lazy import, whereas Python expected that   always
return a fully initialized  module.

: Convert  to use PyType_FromSpec().

================================================================================

# Changelog - Core and Builtins (Part 6)

bpo-1653741: Port  to multi-phase init.  Convert static types
to heap types.

bpo-1635741: Port the  extension module to the multi-phase
initialization API ().

: Free the stack allocated in va_build_stack if
do_mkstack fails and the stack is not a small_stack.

: Fix a bug that was dropping keys when compiling dict literals
with more than 0xFFFF elements. Patch by Pablo Galindo.

: The output of   contains now only ASCII
characters.

bpo-1635741: Port the , , and 
extension modules to multi-phase initialization API ().

: Optimize dict_merge() for copying dict (e.g. 
and {}.update(d)).

: Implement PEP 604. This supports (int | str) etc. in place of
Union[str, int].

: Removed fallback implementation for .

: Handle interrupts that come after EOF correctly in
PyOS_StdioReadline.

:  with integer argument is now faster (9â60%).

: Constructors ,  and bytearray()
are now faster (around 30â40% for small objects).

: Resolve a regression in CPython 3.8.4 where defining
â__setattr__â in a multi-inheritance setup and calling up the hierarchy
chain could fail if builtins/extension types were involved in the base
types.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Bytecode optimizations are performed directly on the control
flow graph. This will result in slightly more compact code objects in some
circumstances.

: Always cache the running loop holder when running
asyncio.set_running_loop.

: Fix incorrect refcounting in _ssl.câs
_servername_callback().

bpo-1635741: Port multiprocessing to multi-phase initialization

bpo-1635741: Port  to multiphase initialization

: Use non-NULL default values in the PEG parser keyword list to
overcome a bug that was preventing Python from being properly compiled
when using the XLC compiler. Patch by Pablo Galindo.

: Python 3.8.3 had a regression where compiling with
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT would aggressively mark list comprehension
with CO_COROUTINE. Now only list comprehension making use of async/await
will tagged as so.

bpo-1635741: Port faulthandler to multiphase initialization.

bpo-1635741: Port  to multiphase initialization

: Guard against a NULL pointer dereference within bytearrayobject
triggered by the bytearray()  bytearray() operation.

: add arm64 to the allowable Mac OS arches in mpdecimal.h

: Fix decoding errors with audit when open files with non-ASCII
names on non-UTF-8 locale.

================================================================================

# Changelog - Core and Builtins (Part 8)

: The âhackcheckâ that prevents sneaking around a typeâs
__setattr__() by calling the superclass method was rewritten to allow C
implemented heap types.

: Prefix the error message with âf-string: â, when parsing an
f-string expression which throws a SyntaxError.

: Empty frozensets are no longer singletons.

: Pre-feed the parser with the location of the f-string
expression, not the f-string itself, which allows us to skip the shifting
of the AST node locations after the parsing is completed.

: Fixes a reference to deallocated stack space during startup
when constructing sys.path involving a relative symlink when code was
supplied via -c.  (discovered via Coverity)

: Fix incorrect expressions and asserts in hashtable code and
tests.

: Opt out serialization/deserialization for _random.Random

: Rename  functions to , so that we can
remove the old set of  functions that were using the old
parser, but keep everything backwards-compatible.

: Stefan Behnel reported that cf_feature_version is used even
when PyCF_ONLY_AST is not set. This is against the intention and against
the documented behavior, so itâs been fixed.

: Remove the remaining files from the old parser and the
 module.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Convert  to use PyType_FromSpec().

: The encodings.latin_1 module is no longer imported at
startup. Now it is only imported when it is the filesystem encoding or the
stdio encoding.

:  now supports âs  parameter,
which raises a ValueError if the arguments are exhausted at
different lengths. Patch by Brandt Bucher.

bpo-1635741: Port  to multiphase initialization.

: Fix a bug that caused the SyntaxError text to be empty
when a file ends with a line ending in a line continuation character (i.e.
backslash). The error text should contain the text of the last line.

: Fix a possible buffer overflow in the PEG parser when gathering
information for emitting syntax errors. Patch by Pablo Galindo.

bpo-1635741: Port  to multiphase initialization.

: Fix refleak in _Py_fopen_obj() when PySys_Audit() fails

: Add a state to the  module () and apply
the multiphase initialization. Patch by Donghee Na.

: The Python Path Configuration now
takes PyConfig.platlibdir in account.

: Remove the old parser, the  module and all
associated support code, command-line options and environment variables.
Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Fix a bug where a line with only a line continuation character
is not considered a blank line at tokenizer level. In such cases, more
than a single  token was emitted. The old parser was working
around the issue, but the new parser threw a SyntaxError for valid
input due to this. For example, an empty line following a line
continuation character was interpreted as a SyntaxError.

: Each dictionary view now has a  attribute that
provides a types.MappingProxyType wrapping the original
dictionary.  Patch contributed by Dennis Sweeney.

: Improved the performance of symmetric difference operations on
dictionary item views.  Patch by Dennis Sweeney.

: Fix possible segfault in the new PEG parser when parsing
f-string containing yield statements with no value (f"{yield}").
Patch by Pablo Galindo

: Fixed a possible segfault in the new PEG parser when producing
error messages for invalid assignments of the form . Patch by
Pablo Galindo

: Fix invalid memory read in the new parser when checking
newlines in string literals. Patch by Pablo Galindo.

: Fix memory leak in when parsing f-strings in the new parser.
Patch by Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 11)

: Raise ValueError when validating custom ASTâs where the
constants ,  and  are used within a
 node.

: Allow overriding sys.platlibdir via a new
PYTHONPLATLIBDIR environment variable.

: Fix GIL usage in PyOS_Readline(): lock the GIL to set
an exception and pass the Python thread state when checking if there is a
pending signal.

bpo-1635741: Port  to multiphase initialization.

: Delete unnecessary instance check in importlib.reload(). Patch
by Furkan Ãnder.

: Unexpected errors in calling the  method are no
longer masked by  in the  operator and functions
contains(),  and
 of the  module.

: Attributes ,  and  of the
 object now always has exact type .  Previously,
they could have been an instance of a subclass of .

: Fix a corner case where g-style string formatting of a float
failed to remove trailing zeros.

: When thereâs a SyntaxError in the expression part of an
fstring, the filename attribute of the SyntaxError gets correctly
set to the name of the file the fstring resides in.

: Support the â-dâ debug flag in the new PEG parser. Patch by
Pablo Galindo

================================================================================

# Changelog - Core and Builtins (Part 12)

: Instances of types created with
PyType_FromSpecWithBases() will no longer automatically visit
their class object when traversing references in the garbage collector.
The user is expected to manually visit the objectâs class. Patch by Pablo
Galindo.

:  is changed to the inline static function.
Patch by Donghee Na.

: Fix a hang that can arise after generator.throw() due to
a cycle in the exception context chain.

: Each interpreter now its has own free lists, singletons and
caches:

List:
Free lists: float, tuple, list, dict, frame, context,
asynchronous generator, MemoryError.
Singletons: empty tuple, empty bytes string, empty Unicode string,
single byte character, single Unicode (latin1) character.
Slice cache.

Free lists: float, tuple, list, dict, frame, context,
asynchronous generator, MemoryError.

Singletons: empty tuple, empty bytes string, empty Unicode string,
single byte character, single Unicode (latin1) character.

They are no longer shared by all interpreters.

: Certain  messages about missing or extra
arguments now include the functionâs qualified name.  Patch by
Dennis Sweeney.

================================================================================

# Changelog - Core and Builtins (Part 13)

: Make the stack trace correct after calling
generator.throw() on a generator that has yielded from a 
.

: Improve performance of generators by not raising internal
StopIteration.

bpo-1635741: Port  to multiphase initialization.

bpo-1635741: Port  to multiphase initialization.

: Builtin and extension functions that take integer arguments no
longer accept s, s and other objects that can be converted to integers only with a loss
(e.g. that have the  method but do not have the
__index__() method).

: Add int.bit_count(), counting the number of ones in the
binary representation of an integer. Patch by Niklas Fiekas.

: Use ncurses extended color functions when available to support
terminals with 256 colors, and add the new function
curses.has_extended_color_support() to indicate whether extended
color support is provided by the underlying ncurses library.

: Add the private macros _Py_COMP_DIAG_PUSH,
_Py_COMP_DIAG_IGNORE_DEPR_DECLS, and _Py_COMP_DIAG_POP.

: The int type now supports the x.is_integer() method for
compatibility with float.

================================================================================

# Changelog - Library (Part 1)

List:
: C14N 2.0 serialisation in xml.etree.ElementTree failed for
unprefixed attributes when a default namespace was defined.
: Strip leading spaces and tabs on ast.literal_eval(). Also
document stripping of spaces and tabs for .
: Note in documentation that random.choices() doesnât
support non-finite weights, raise ValueError when given non-finite
weights.
: Fix a bug in the  module that was causing
module-scope global variables to not be reported as both local and global.
Patch by Pablo Galindo.
: Add codecs.unregister() function to unregister a codec
search function.
: In zipfile.Path, mutate the passed ZipFile object type
instead of making a copy. Prevents issues when both the local copy and the
callerâs copy attempt to close the same file handle.
: More reliable validation of statements in
timeit.Timer. It now accepts âemptyâ statements (only whitespaces
and comments) and rejects misindentent statements.
: The threading.Thread constructor now uses the target
name if the  argument is specified but the  argument is
omitted.
: fix tkinter.EventType Enum so all members are strings, and
none are tuples
: types.EllipsisType, types.NotImplementedType
and types.NoneType have been reintroduced, providing a new set of
types readily interpretable by static type checkers.
: Fix SQLite3 segfault when backing up closed database. Patch
contributed by Peter David McCormick.
: StrEnum added: it ensures that all members are already strings
or string candidates
: fix bug allowing Enums to be extended via multiple inheritance
: use the correct mix-in data type when constructing Enums
: Add is_typeddict function to typing.py to check if a type is a
TypedDict class
Previously there was no way to check that without using private API. See
the relevant issue in python/typing.

================================================================================

# Changelog - Library (Part 2)

: Honor  overrides in  class creation
(specifically, , , __format__, and
__reduce_ex__).
:  and enum.IntFlag members are now iterable.
: Fix a race condition in the call_soon_threadsafe() method
of asyncio.ProactorEventLoop: do nothing if the self-pipe socket has
been closed.
bpo-1635741: Port the  extension module to the multi-phase
initialization API ().
bpo-1635741: Port the  extension module to the multi-phase
initialization API ().
: Added an  to memoryview.
: Fixed turtle.Vec2D.__rmul__() for arguments which are not
int or float.
: Fix handling of debug mode in asyncio.run(). This allows
setting PYTHONASYNCIODEBUG or   to enable asyncio debug mode
when using asyncio.run().
: Fix implementation of sendfile to be compatible with Solaris.
: No longer override exceptions raised in  of a
sequence of parameters in  with
ProgrammingError.
: Restarting a ProactorEventLoop on Windows no longer logs
spurious ConnectionResetErrors.
: ProgrammingError message for absent parameter
in  contains now the name of the parameter instead of its
index when parameters are supplied as a dict.
: Fixed crash when mutate list of parameters during iteration in
.
: Improved the accuracy of math.hypot().  Internally, each step
is computed with extra precision so that the result is now almost always
correctly rounded.
: The pdb whatis command correctly reports instance methods as
âMethodâ rather than âFunctionâ.
: Fixed pprintâs handling of dict subclasses that override
__repr__.
: When cancelling the task due to a timeout,
asyncio.wait_for() will now wait until the cancellation is complete
also in the case when  is <= 0, like it does with positive
timeouts.
: asyncio.wait_for() now properly handles races between
cancellation of itself and the completion of the wrapped awaitable.
: Change the method asyncio.AbstractEventLoop.run_in_executor to
not be a coroutine.
: Fix  regression that prevented turning compile
warnings into errors.
: turtle uses math module functions to convert degrees to radians
and vice versa and to calculate vector norm
: Minor algorithmic improvement to math.hypot() and math.dist()
giving small gains in speed and accuracy.
: Fixed a race between setTarget and flush in
logging.handlers.MemoryHandler.
: Fix potential UnicodeDecodeError in dis module.
: On Windows, fix asyncio recv_into() return value when the
socket/pipe is closed (BrokenPipeError): return  rather than
an empty byte string ().
: Make tkinter doc example runnable.
: Make an algebraic simplification to random.paretovariate().  It
now is slightly less subject to round-off error and is slightly faster.
Inputs that used to cause ZeroDivisionError now cause an OverflowError
instead.
: Add os.cpu_count() support for VxWorks RTOS.
: Fix the  module to write only basename of TAR
file to GZIP compression header.
: Raise TclError instead of TypeError when an unknown option is
passed to tkinter.OptionMenu.
: Use add_done_callback() in asyncio.loop.sock_accept() to
unsubscribe reader early on cancellation.
: Reduce import overhead of .
: Set the environment variable VIRTUAL_ENV_PROMPT at
 activation.
: Recursive evaluation of typing.ForwardRef in
get_type_hints.
: Prevent creating shared_memory.SharedMemory objects
with .
: collections.OrderedDict.pop() is now 2 times faster.
: Unpickling invalid NEWOBJ_EX opcode with the C implementation
raises now UnpicklingError instead of crashing.
: Avoid infinite loop when reading specially crafted TAR files
using the tarfile module (CVE 2019-20907).
: Speed up any transport using _ProactorReadPipeTransport by
calling  instead of , thus not creating a new buffer
for each  call in the transportâs read loop.
: Fix the error handling in
ssl.SSLContext.load_dh_params().
: In distutils.spawn, restore expectation that DistutilsExecError
is raised when the command is not found.
: Register array.array as a
MutableSequence. Patch by Pablo Galindo.
: Remove the  method of typing.Generic.
: Fix a crash in the  module: it can no longer be loaded
more than once. It now uses a global state rather than a module state.
: Add read-only ssl.SSLContext.security_level attribute to
retrieve the contextâs security level.
: The write_history() atexit function of the readline
completer now ignores any  to ignore error if the filesystem
is read-only, instead of only ignoring FileNotFoundError and
PermissionError.
: selector: use DefaultSelector based upon implementation
: The decimal module now requires libmpdec-2.5.0. Users of
âwith-system-libmpdec should update their system library.
: The decimal module now requires libmpdec-2.5.0.
: Fixed the  module CLI for Python source files with
non-UTF-8 encoding.
: Use the term âiterableâ in the docstring for
functools.reduce().
: Remove freelist from collections.deque().
: Fix default-value signatures of several functions in the
 module - by Anthony Sottile.
: Fixed reading files with non-ASCII names from ZIP archive
directly after writing them.
: pdb.find_function() now correctly determines the source
file encoding.
: Invalid file descriptor values are now prevented from being
passed to os.fpathconf. (discovered by Coverity)
: Fix a NULL pointer dereference within the ssl module during a
MemoryError in the keylog callback. (discovered by Coverity)
: Fixed an instance where a MemoryError within the zoneinfo
module might not be reported or not reported at its source. (found by
Coverity)
: mimetypes.read_mime_types() function reads the rule file
using UTF-8 encoding, not the locale encoding. Patch by Srinivas Reddy
Thatiparthy.
: Fixed the use of  in the stdlib: literal part
of the path is now always correctly escaped.
: Fixed an issue preventing the C implementation of
zoneinfo.ZoneInfo from being subclassed.
: Add the xml.sax.handler.LexicalHandler class that is
present in other SAX XML implementations.
: Improve performance of HTTPResponse.read with a given amount.
Patch by Bruce Merry.
:  now disables the use of  cache when
installing the bundled versions of  and setuptools.  Patch by
Krzysztof Konopko.
: Removed asyncio.Task.current_task() and
asyncio.Task.all_tasks(). Patch contributed by RÃ©mi Lapeyre.
: Ensure importlib.resources.path returns an extant path for
the SourceFileLoaderâs resource reader. Avoids the regression identified
in master while a long-term solution is devised.
: Fix a minor memory leak in subprocess module when
extra_groups was specified.
: The standard deviation and variance functions in the statistics
module were ignoring their mu and xbar arguments.
: Use the new PEG parser when generating the stdlib
 module.
: Add sys.orig_argv attribute: the list of the original
command line arguments passed to the Python executable.
: Ignore empty or whitespace-only lines in .pth files. This
matches the documentated behavior. Before, empty lines caused the
site-packages dir to appear multiple times in sys.path. By Ido Michael,
contributors Malcolm Smith and Tal Einat.
: Added a  parameter to logging.Formatter,
to allow specifying default values for custom fields. Patch by Asaf Alon
and Bar Harel.
: Clarify error message in the  module.
: Refresh importlib.metadata from importlib_metadata 1.6.1.
: Stop codeop._maybe_compile, used by code.InteractiveInterpreter
(and IDLE). from emitting each warning three times.
: Fix reference leak in the  module when the module
is imported in a subinterpreter.
: Built-in loaders (SourceFileLoader and ZipImporter) now supply
TraversableResources implementations for ResourceReader, and the
fallback function has been removed.
: rlcompleter.Completer and the standard Python shell
now close the parenthesis for functions that take no arguments. Patch
contributed by RÃ©mi Lapeyre.
: The topological sort functionality that was introduced
initially in the  module has been moved to a new
 module to better accommodate the new tools and keep the
original scope of the  module. Patch by Pablo Galindo
: Fix truncate when sending str object
with_xxsubinterpreters.channel_send.
: Add rich comparisons to collections.Counter().
: Unexpected errors in calling the  method are no
longer masked by  in csv.reader(),
csv.writer.writerow() and csv.writer.writerows().
: Fixed email.contentmanager to allow set_content() to set a null
string.
: The  module uses SQLite API functions that
require SQLite v3.7.3 or higher.  This patch removes support for older
SQLite versions, and explicitly requires SQLite 3.7.3 both at build,
compile and runtime.  Patch by Sergey Fedoseev and Erlend E. Aasland.
: Initialize PyDateTime_IsoCalendarDateType.tp_base at run-time
to avoid errors on some compilers.
: Update ensurepip to install pip 20.1.1 and setuptools 47.1.0.
: The result of operator.index() now always has exact type
. Previously, the result could have been an instance of a
subclass of .
: webbrowser now properly finds the default browser in
pure Wayland systems by checking the WAYLAND_DISPLAY environment variable.
Patch contributed by JÃ©rÃ©my Attali.
: hashlib.compare_digest() uses OpenSSLâs
CRYPTO_memcmp() function when OpenSSL is available.
:  module: If ctypes fails to convert the result of
a callback or if a ctypes callback function raises an exception,
sys.unraisablehook is now called with an exception set. Previously, the
error was logged into stderr by PyErr_Print().
: Add base64.b32hexencode() and base64.b32hexdecode()
to support the Base32 Encoding with Extended Hex Alphabet.
: Fix  code to be compatible with OpenSSL 1.1.x builds
that use no-deprecated and --api=1.1.0.
: Fix asyncio loop.sock_* race condition issue
: Deprecate the  module.
: The second argument (extra) of LoggerAdapter.__init__ now
defaults to None.
: Add a new os.RWF_APPEND flag for os.pwritev().
: Fix possible reference leak for  initialization.
: Handle cases where the end_lineno is  on
ast.increment_lineno().
:  upload creates SHA2-256 and Blake2b-256 digests.
MD5 digests is skipped if platform blocks MD5.
:  no longer falls back to builtin hash
implementations when OpenSSL provides a hash digest and the algorithm is
blocked by security policy.
: hashlib.new() passed usedforsecurity to OpenSSL EVP
constructor _hashlib.new(). test_hashlib and test_smtplib handle
strict security policy better.
: ast.parse() will not parse self documenting expressions
in f-strings when passed feature_version is less than  .
: Add h5 file extension as MIME Type application/x-hdf5, as per
HDF Group recommendation for HDF5 formatted data files. Patch contributed
by Mark Schwab.
: On macOS, when building Python for macOS 10.4 and older, which
wasnât the case for python.org macOS installer, socket.getaddrinfo()
no longer uses an internal lock to prevent race conditions when calling
getaddrinfo() which is thread-safe since macOS 10.5. Python 3.9
requires macOS 10.6 or newer. The internal lock caused random hang on fork
when another thread was calling socket.getaddrinfo(). The lock was
also used on FreeBSD older than 5.3, OpenBSD older than 201311 and NetBSD
older than 4.
: Prepare  for  and use
PyModule_AddType().
: Added a new  asyncio.to_thread(). It is
mainly used for running IO-bound functions in a separate thread to avoid
blocking the event loop, and essentially works as a high-level version of
run_in_executor() that can directly take keyword
arguments.
: Restored the deprecated xml.etree.cElementTree module.
: MAP_POPULATE constant has now been added to the
list of exported  module flags.
: PEP 554 for use in the test suite. (Patch By Joannah Nanjekye)
:  now raises an ArgumentError when a callback is
invoked with more than 1024 arguments.
: A new test assertion context-manager,
unittest.assertNoLogs() will ensure a given block of code emits no
log messages using the logging module. Contributed by Kit Yan Choi.
: Updated the error message and docs of PurePath.relative_to() to
better reflect the function behaviour.
: Use SQLite3 trace v2 API, if it is available.
: ZipFile truncates files to avoid corruption when a shorter
comment is provided in append (âaâ) mode. Patch by Jan Mazur.
: Fix Enum.__dir__: dir(Enum.member) now includes attributes
as well as methods.
: ssl.wrap_socket() now raises ssl.SSLEOFError rather than
OSError when peer closes connection during TLS negotiation
: fix default  so a duplicate ValueError is not
set as the __context__ of the original ValueError.
: Fixed multiprocessing.context.get_all_start_methods to
properly return the default method first on macOS.
: Fix parsing of invalid mime headers parameters by collapsing
whitespace between encoded words in a bare-quote-string.
: Add  option to command-line interface of
py_compile. Patch by Gregory Schevchenko.
: struct.error is now raised if there is a null character
in a  format string.
: Added the  and  parameters in
glob.glob().
: Fix IMAP4.noop() when debug mode is enabled (ex:
imaplib.Debug  ).
: csv.writer() now correctly escapes escapechar when
input contains escapechar.  Patch by Catalin Iacob, Berker Peksag, and
Itay Elbirt.
: AST nodes are now raising  on conflicting
keyword arguments. Patch contributed by RÃ©mi Lapeyre.
: Added site.py site-packages tracing in verbose mode.
: Refactor formatweekday, formatmonthname methods in
LocaleHTMLCalendar and LocaleTextCalendar classes in calendar module to
call the base class methods.This enables customizable CSS classes for
LocaleHTMLCalendar. Patch by Srinivas Reddy Thatiparthy
: assertWarns() no longer raises a
RuntimeException when accessing a moduleâs __warningregistry__
causes importation of a new module, or when a new module is imported in
another thread. Patch by Kernc.
: Remove ParserBase.error() method from the private and
undocumented _markupbase module.  html.parser.HTMLParser is
the only subclass of ParserBase and its  implementation was
deprecated in Python 3.4 and removed in Python 3.5.
: Fix cgi.parse_multipart without content_length. Patch by
Roger Duran
: Fix pathlib.PosixPath to resolve a relative path located on the
root directory properly.
: Improve the error message for a misbehaving rawio.readinto
: The d.is_integer() method is added to the Decimal type, for
compatibility with other number types.
: The x.is_integer() method is incorporated into the abstract
types of the numeric tower, Real, Rational and Integral, with appropriate
default implementations.

================================================================================

# Changelog - Library (Part 3)

: C14N 2.0 serialisation in xml.etree.ElementTree failed for
unprefixed attributes when a default namespace was defined.

: Strip leading spaces and tabs on ast.literal_eval(). Also
document stripping of spaces and tabs for .

: Note in documentation that random.choices() doesnât
support non-finite weights, raise ValueError when given non-finite
weights.

: Fix a bug in the  module that was causing
module-scope global variables to not be reported as both local and global.
Patch by Pablo Galindo.

: Add codecs.unregister() function to unregister a codec
search function.

: In zipfile.Path, mutate the passed ZipFile object type
instead of making a copy. Prevents issues when both the local copy and the
callerâs copy attempt to close the same file handle.

: More reliable validation of statements in
timeit.Timer. It now accepts âemptyâ statements (only whitespaces
and comments) and rejects misindentent statements.

: The threading.Thread constructor now uses the target
name if the  argument is specified but the  argument is
omitted.

: fix tkinter.EventType Enum so all members are strings, and
none are tuples

================================================================================

# Changelog - Library (Part 4)

: types.EllipsisType, types.NotImplementedType
and types.NoneType have been reintroduced, providing a new set of
types readily interpretable by static type checkers.

: Fix SQLite3 segfault when backing up closed database. Patch
contributed by Peter David McCormick.

: StrEnum added: it ensures that all members are already strings
or string candidates

: fix bug allowing Enums to be extended via multiple inheritance

: use the correct mix-in data type when constructing Enums

: Add is_typeddict function to typing.py to check if a type is a
TypedDict class

Previously there was no way to check that without using private API. See
the relevant issue in python/typing.

: Honor  overrides in  class creation
(specifically, , , __format__, and
__reduce_ex__).

:  and enum.IntFlag members are now iterable.

: Fix a race condition in the call_soon_threadsafe() method
of asyncio.ProactorEventLoop: do nothing if the self-pipe socket has
been closed.

bpo-1635741: Port the  extension module to the multi-phase
initialization API ().

bpo-1635741: Port the  extension module to the multi-phase
initialization API ().

: Added an  to memoryview.

: Fixed turtle.Vec2D.__rmul__() for arguments which are not
int or float.

================================================================================

# Changelog - Library (Part 5)

: Fix handling of debug mode in asyncio.run(). This allows
setting PYTHONASYNCIODEBUG or   to enable asyncio debug mode
when using asyncio.run().

: Fix implementation of sendfile to be compatible with Solaris.

: No longer override exceptions raised in  of a
sequence of parameters in  with
ProgrammingError.

: Restarting a ProactorEventLoop on Windows no longer logs
spurious ConnectionResetErrors.

: ProgrammingError message for absent parameter
in  contains now the name of the parameter instead of its
index when parameters are supplied as a dict.

: Fixed crash when mutate list of parameters during iteration in
.

: Improved the accuracy of math.hypot().  Internally, each step
is computed with extra precision so that the result is now almost always
correctly rounded.

: The pdb whatis command correctly reports instance methods as
âMethodâ rather than âFunctionâ.

: Fixed pprintâs handling of dict subclasses that override
__repr__.

: When cancelling the task due to a timeout,
asyncio.wait_for() will now wait until the cancellation is complete
also in the case when  is <= 0, like it does with positive
timeouts.

================================================================================

# Changelog - Library (Part 6)

: asyncio.wait_for() now properly handles races between
cancellation of itself and the completion of the wrapped awaitable.

: Change the method asyncio.AbstractEventLoop.run_in_executor to
not be a coroutine.

: Fix  regression that prevented turning compile
warnings into errors.

: turtle uses math module functions to convert degrees to radians
and vice versa and to calculate vector norm

: Minor algorithmic improvement to math.hypot() and math.dist()
giving small gains in speed and accuracy.

: Fixed a race between setTarget and flush in
logging.handlers.MemoryHandler.

: Fix potential UnicodeDecodeError in dis module.

: On Windows, fix asyncio recv_into() return value when the
socket/pipe is closed (BrokenPipeError): return  rather than
an empty byte string ().

: Make tkinter doc example runnable.

: Make an algebraic simplification to random.paretovariate().  It
now is slightly less subject to round-off error and is slightly faster.
Inputs that used to cause ZeroDivisionError now cause an OverflowError
instead.

: Add os.cpu_count() support for VxWorks RTOS.

: Fix the  module to write only basename of TAR
file to GZIP compression header.

================================================================================

# Changelog - Library (Part 7)

: Raise TclError instead of TypeError when an unknown option is
passed to tkinter.OptionMenu.

: Use add_done_callback() in asyncio.loop.sock_accept() to
unsubscribe reader early on cancellation.

: Reduce import overhead of .

: Set the environment variable VIRTUAL_ENV_PROMPT at
 activation.

: Recursive evaluation of typing.ForwardRef in
get_type_hints.

: Prevent creating shared_memory.SharedMemory objects
with .

: collections.OrderedDict.pop() is now 2 times faster.

: Unpickling invalid NEWOBJ_EX opcode with the C implementation
raises now UnpicklingError instead of crashing.

: Avoid infinite loop when reading specially crafted TAR files
using the tarfile module (CVE 2019-20907).

: Speed up any transport using _ProactorReadPipeTransport by
calling  instead of , thus not creating a new buffer
for each  call in the transportâs read loop.

: Fix the error handling in
ssl.SSLContext.load_dh_params().

: In distutils.spawn, restore expectation that DistutilsExecError
is raised when the command is not found.

: Register array.array as a
MutableSequence. Patch by Pablo Galindo.

: Remove the  method of typing.Generic.

================================================================================

# Changelog - Library (Part 8)

: Fix a crash in the  module: it can no longer be loaded
more than once. It now uses a global state rather than a module state.

: Add read-only ssl.SSLContext.security_level attribute to
retrieve the contextâs security level.

: The write_history() atexit function of the readline
completer now ignores any  to ignore error if the filesystem
is read-only, instead of only ignoring FileNotFoundError and
PermissionError.

: selector: use DefaultSelector based upon implementation

: The decimal module now requires libmpdec-2.5.0. Users of
âwith-system-libmpdec should update their system library.

: The decimal module now requires libmpdec-2.5.0.

: Fixed the  module CLI for Python source files with
non-UTF-8 encoding.

: Use the term âiterableâ in the docstring for
functools.reduce().

: Remove freelist from collections.deque().

: Fix default-value signatures of several functions in the
 module - by Anthony Sottile.

: Fixed reading files with non-ASCII names from ZIP archive
directly after writing them.

: pdb.find_function() now correctly determines the source
file encoding.

: Invalid file descriptor values are now prevented from being
passed to os.fpathconf. (discovered by Coverity)

================================================================================

# Changelog - Library (Part 9)

: Fix a NULL pointer dereference within the ssl module during a
MemoryError in the keylog callback. (discovered by Coverity)

: Fixed an instance where a MemoryError within the zoneinfo
module might not be reported or not reported at its source. (found by
Coverity)

: mimetypes.read_mime_types() function reads the rule file
using UTF-8 encoding, not the locale encoding. Patch by Srinivas Reddy
Thatiparthy.

: Fixed the use of  in the stdlib: literal part
of the path is now always correctly escaped.

: Fixed an issue preventing the C implementation of
zoneinfo.ZoneInfo from being subclassed.

: Add the xml.sax.handler.LexicalHandler class that is
present in other SAX XML implementations.

: Improve performance of HTTPResponse.read with a given amount.
Patch by Bruce Merry.

:  now disables the use of  cache when
installing the bundled versions of  and setuptools.  Patch by
Krzysztof Konopko.

: Removed asyncio.Task.current_task() and
asyncio.Task.all_tasks(). Patch contributed by RÃ©mi Lapeyre.

: Ensure importlib.resources.path returns an extant path for
the SourceFileLoaderâs resource reader. Avoids the regression identified
in master while a long-term solution is devised.

================================================================================

# Changelog - Library (Part 10)

: Fix a minor memory leak in subprocess module when
extra_groups was specified.

: The standard deviation and variance functions in the statistics
module were ignoring their mu and xbar arguments.

: Use the new PEG parser when generating the stdlib
 module.

: Add sys.orig_argv attribute: the list of the original
command line arguments passed to the Python executable.

: Ignore empty or whitespace-only lines in .pth files. This
matches the documentated behavior. Before, empty lines caused the
site-packages dir to appear multiple times in sys.path. By Ido Michael,
contributors Malcolm Smith and Tal Einat.

: Added a  parameter to logging.Formatter,
to allow specifying default values for custom fields. Patch by Asaf Alon
and Bar Harel.

: Clarify error message in the  module.

: Refresh importlib.metadata from importlib_metadata 1.6.1.

: Stop codeop._maybe_compile, used by code.InteractiveInterpreter
(and IDLE). from emitting each warning three times.

: Fix reference leak in the  module when the module
is imported in a subinterpreter.

: Built-in loaders (SourceFileLoader and ZipImporter) now supply
TraversableResources implementations for ResourceReader, and the
fallback function has been removed.

================================================================================

# Changelog - Library (Part 11)

: rlcompleter.Completer and the standard Python shell
now close the parenthesis for functions that take no arguments. Patch
contributed by RÃ©mi Lapeyre.

: The topological sort functionality that was introduced
initially in the  module has been moved to a new
 module to better accommodate the new tools and keep the
original scope of the  module. Patch by Pablo Galindo

: Fix truncate when sending str object
with_xxsubinterpreters.channel_send.

: Add rich comparisons to collections.Counter().

: Unexpected errors in calling the  method are no
longer masked by  in csv.reader(),
csv.writer.writerow() and csv.writer.writerows().

: Fixed email.contentmanager to allow set_content() to set a null
string.

: The  module uses SQLite API functions that
require SQLite v3.7.3 or higher.  This patch removes support for older
SQLite versions, and explicitly requires SQLite 3.7.3 both at build,
compile and runtime.  Patch by Sergey Fedoseev and Erlend E. Aasland.

: Initialize PyDateTime_IsoCalendarDateType.tp_base at run-time
to avoid errors on some compilers.

: Update ensurepip to install pip 20.1.1 and setuptools 47.1.0.

================================================================================

# Changelog - Library (Part 12)

: The result of operator.index() now always has exact type
. Previously, the result could have been an instance of a
subclass of .

: webbrowser now properly finds the default browser in
pure Wayland systems by checking the WAYLAND_DISPLAY environment variable.
Patch contributed by JÃ©rÃ©my Attali.

: hashlib.compare_digest() uses OpenSSLâs
CRYPTO_memcmp() function when OpenSSL is available.

:  module: If ctypes fails to convert the result of
a callback or if a ctypes callback function raises an exception,
sys.unraisablehook is now called with an exception set. Previously, the
error was logged into stderr by PyErr_Print().

: Add base64.b32hexencode() and base64.b32hexdecode()
to support the Base32 Encoding with Extended Hex Alphabet.

: Fix  code to be compatible with OpenSSL 1.1.x builds
that use no-deprecated and --api=1.1.0.

: Fix asyncio loop.sock_* race condition issue

: Deprecate the  module.

: The second argument (extra) of LoggerAdapter.__init__ now
defaults to None.

: Add a new os.RWF_APPEND flag for os.pwritev().

: Fix possible reference leak for  initialization.

: Handle cases where the end_lineno is  on
ast.increment_lineno().

================================================================================

# Changelog - Library (Part 13)

:  upload creates SHA2-256 and Blake2b-256 digests.
MD5 digests is skipped if platform blocks MD5.

:  no longer falls back to builtin hash
implementations when OpenSSL provides a hash digest and the algorithm is
blocked by security policy.

: hashlib.new() passed usedforsecurity to OpenSSL EVP
constructor _hashlib.new(). test_hashlib and test_smtplib handle
strict security policy better.

: ast.parse() will not parse self documenting expressions
in f-strings when passed feature_version is less than  .

: Add h5 file extension as MIME Type application/x-hdf5, as per
HDF Group recommendation for HDF5 formatted data files. Patch contributed
by Mark Schwab.

: On macOS, when building Python for macOS 10.4 and older, which
wasnât the case for python.org macOS installer, socket.getaddrinfo()
no longer uses an internal lock to prevent race conditions when calling
getaddrinfo() which is thread-safe since macOS 10.5. Python 3.9
requires macOS 10.6 or newer. The internal lock caused random hang on fork
when another thread was calling socket.getaddrinfo(). The lock was
also used on FreeBSD older than 5.3, OpenBSD older than 201311 and NetBSD
older than 4.

: Prepare  for  and use
PyModule_AddType().

================================================================================

# Changelog - Library (Part 14)

: Added a new  asyncio.to_thread(). It is
mainly used for running IO-bound functions in a separate thread to avoid
blocking the event loop, and essentially works as a high-level version of
run_in_executor() that can directly take keyword
arguments.

: Restored the deprecated xml.etree.cElementTree module.

: MAP_POPULATE constant has now been added to the
list of exported  module flags.

: PEP 554 for use in the test suite. (Patch By Joannah Nanjekye)

:  now raises an ArgumentError when a callback is
invoked with more than 1024 arguments.

: A new test assertion context-manager,
unittest.assertNoLogs() will ensure a given block of code emits no
log messages using the logging module. Contributed by Kit Yan Choi.

: Updated the error message and docs of PurePath.relative_to() to
better reflect the function behaviour.

: Use SQLite3 trace v2 API, if it is available.

: ZipFile truncates files to avoid corruption when a shorter
comment is provided in append (âaâ) mode. Patch by Jan Mazur.

: Fix Enum.__dir__: dir(Enum.member) now includes attributes
as well as methods.

: ssl.wrap_socket() now raises ssl.SSLEOFError rather than
OSError when peer closes connection during TLS negotiation

================================================================================

# Changelog - Library (Part 15)

: fix default  so a duplicate ValueError is not
set as the __context__ of the original ValueError.

: Fixed multiprocessing.context.get_all_start_methods to
properly return the default method first on macOS.

: Fix parsing of invalid mime headers parameters by collapsing
whitespace between encoded words in a bare-quote-string.

: Add  option to command-line interface of
py_compile. Patch by Gregory Schevchenko.

: struct.error is now raised if there is a null character
in a  format string.

: Added the  and  parameters in
glob.glob().

: Fix IMAP4.noop() when debug mode is enabled (ex:
imaplib.Debug  ).

: csv.writer() now correctly escapes escapechar when
input contains escapechar.  Patch by Catalin Iacob, Berker Peksag, and
Itay Elbirt.

: AST nodes are now raising  on conflicting
keyword arguments. Patch contributed by RÃ©mi Lapeyre.

: Added site.py site-packages tracing in verbose mode.

: Refactor formatweekday, formatmonthname methods in
LocaleHTMLCalendar and LocaleTextCalendar classes in calendar module to
call the base class methods.This enables customizable CSS classes for
LocaleHTMLCalendar. Patch by Srinivas Reddy Thatiparthy

================================================================================

# Changelog - Library (Part 16)

: assertWarns() no longer raises a
RuntimeException when accessing a moduleâs __warningregistry__
causes importation of a new module, or when a new module is imported in
another thread. Patch by Kernc.

: Remove ParserBase.error() method from the private and
undocumented _markupbase module.  html.parser.HTMLParser is
the only subclass of ParserBase and its  implementation was
deprecated in Python 3.4 and removed in Python 3.5.

: Fix cgi.parse_multipart without content_length. Patch by
Roger Duran

: Fix pathlib.PosixPath to resolve a relative path located on the
root directory properly.

: Improve the error message for a misbehaving rawio.readinto

: The d.is_integer() method is added to the Decimal type, for
compatibility with other number types.

: The x.is_integer() method is incorporated into the abstract
types of the numeric tower, Real, Rational and Integral, with appropriate
default implementations.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Add documentation for  (Allow writing union types as
  ).
: In Programming FAQ âSequences (Tuples/Lists)â section, add âHow
do you remove multiple items from a listâ.
: Fix RemovedInSphinx40Warning when building the documentation.
Patch by Donghee Na.
: Change Shipman tkinter doc link from archive.org to TkDocs.
(The doc has been removed from the NMT server.)  The new link responds
much faster and includes a short explanatory note.
: Update the refcounts info of PyType_FromModuleAndSpec.
: Fix the signature of typing.Coroutine.
: Enable Sphinx 3.2 c_allow_pre_v3 option and disable
c_warn_on_allowed_pre_v3 option to make the documentation compatible
with Sphinx 2 and Sphinx 3.
: Add documentation for debug feature of f-strings.
: Changed the release when  __future__  annotations
becomes the default from  to  (following a change in PEP
563).
: Refactored typing.rst, arranging more than 70 classes,
functions, and decorators into new sub-sections.
: Fix in tutorial section 4.2. Code snippet is now correct.
: Make code, examples, and recipes in the Python documentation be
licensed under the more permissive BSD0 license in addition to the
existing Python 2.0 license.
: Updated Documentation to comprehensively elaborate on the
behaviour of gather.cancel()

================================================================================

# Changelog - Documentation (Part 2)

: Add documentation for  (Allow writing union types as
  ).

: In Programming FAQ âSequences (Tuples/Lists)â section, add âHow
do you remove multiple items from a listâ.

: Fix RemovedInSphinx40Warning when building the documentation.
Patch by Donghee Na.

: Change Shipman tkinter doc link from archive.org to TkDocs.
(The doc has been removed from the NMT server.)  The new link responds
much faster and includes a short explanatory note.

: Update the refcounts info of PyType_FromModuleAndSpec.

: Fix the signature of typing.Coroutine.

: Enable Sphinx 3.2 c_allow_pre_v3 option and disable
c_warn_on_allowed_pre_v3 option to make the documentation compatible
with Sphinx 2 and Sphinx 3.

: Add documentation for debug feature of f-strings.

: Changed the release when  __future__  annotations
becomes the default from  to  (following a change in PEP
563).

: Refactored typing.rst, arranging more than 70 classes,
functions, and decorators into new sub-sections.

: Fix in tutorial section 4.2. Code snippet is now correct.

: Make code, examples, and recipes in the Python documentation be
licensed under the more permissive BSD0 license in addition to the
existing Python 2.0 license.

================================================================================

# Changelog - Documentation (Part 3)

: Updated Documentation to comprehensively elaborate on the
behaviour of gather.cancel()

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_site.test_license_exists_at_url(): call
urllib.request.urlcleanup() to reset the global
urllib.request._opener. Patch by Victor Stinner.
: Make test_cmd_line_script pass with option â-vvâ.
: Add tests for SIGINT handling in the runpy module.
: test.support: Rename  parameter of
check__all__() to not_exported.
: Make ctypes optional in test_genericalias.
: Fix integer overflow in the array.array.index() method on
64-bit Windows for index larger than .
: test.support.TESTFN and the current directory for tests
when run via test.regrtest contain now non-ascii characters if
possible.
: On Linux, skip tests using multiprocessing if the current user
cannot create a file in  directory. Add the
skip_if_broken_multiprocessing_synchronize() function
to the test.support module.
: Fix use of support.require_{linux|mac|freebsd}_version()
decorators as class decorator.
: Fix test_copyreg when  is installed:
test.pickletester now saves/restores warnings filters when importing
, to ignore filters installed by .
: Disable remote  tests, host cyrus.andrew.cmu.edu
is blocking incoming connections.
: Fix test_binhex when run twice: it now uses
import_fresh_module() to ensure that it raises DeprecationWarning each
time.
: Skip some multiprocessing tests when MD5 hash digest is
blocked.
: Increase LOOPBACK_TIMEOUT to 10 for VxWorks RTOS.
: Increase code coverage for SharedMemory and ShareableList
: Make test_gdb properly run on HP-UX. Patch by Michael Osipov.

================================================================================

# Changelog - Tests (Part 2)

: Fix test_site.test_license_exists_at_url(): call
urllib.request.urlcleanup() to reset the global
urllib.request._opener. Patch by Victor Stinner.

: Make test_cmd_line_script pass with option â-vvâ.

: Add tests for SIGINT handling in the runpy module.

: test.support: Rename  parameter of
check__all__() to not_exported.

: Make ctypes optional in test_genericalias.

: Fix integer overflow in the array.array.index() method on
64-bit Windows for index larger than .

: test.support.TESTFN and the current directory for tests
when run via test.regrtest contain now non-ascii characters if
possible.

: On Linux, skip tests using multiprocessing if the current user
cannot create a file in  directory. Add the
skip_if_broken_multiprocessing_synchronize() function
to the test.support module.

: Fix use of support.require_{linux|mac|freebsd}_version()
decorators as class decorator.

: Fix test_copyreg when  is installed:
test.pickletester now saves/restores warnings filters when importing
, to ignore filters installed by .

: Disable remote  tests, host cyrus.andrew.cmu.edu
is blocking incoming connections.

================================================================================

# Changelog - Tests (Part 3)

: Fix test_binhex when run twice: it now uses
import_fresh_module() to ensure that it raises DeprecationWarning each
time.

: Skip some multiprocessing tests when MD5 hash digest is
blocked.

: Increase LOOPBACK_TIMEOUT to 10 for VxWorks RTOS.

: Increase code coverage for SharedMemory and ShareableList

: Make test_gdb properly run on HP-UX. Patch by Michael Osipov.

================================================================================

# Changelog - Build

List:
: Update Py_UNREACHABLE to use __builtin_unreachable()
if only the compiler is able to use it. Patch by Donghee Na.
: Fix pycore_bitutils.h header file to support old clang
versions: __builtin_bswap16() is not available in LLVM clang 3.0.
: Pin Sphinx version to 2.3.1 in Doc/Makefile.
: The C99 functions snprintf() and vsnprintf()
are now required to build Python.
:   now uses the PLATLIBDIR variable for the
destination lib-dynload/ directory when ./configure
--with-platlibdir is used.
: Fixed an issue where the  module and its tests
were not included when Python is installed with .

: Update Py_UNREACHABLE to use __builtin_unreachable()
if only the compiler is able to use it. Patch by Donghee Na.

: Fix pycore_bitutils.h header file to support old clang
versions: __builtin_bswap16() is not available in LLVM clang 3.0.

: Pin Sphinx version to 2.3.1 in Doc/Makefile.

: The C99 functions snprintf() and vsnprintf()
are now required to build Python.

:   now uses the PLATLIBDIR variable for the
destination lib-dynload/ directory when ./configure
--with-platlibdir is used.

: Fixed an issue where the  module and its tests
were not included when Python is installed with .

================================================================================

# Changelog - Windows (Part 1)

List:
: Fixes automatic import of props file when using the Nuget
package.
: The user site directory for 32-bit now includes a 
suffix to distinguish it from the 64-bit interpreterâs directory.
: Fixed layout of final page of the installer by removing the
special thanks to Mark Hammond (with his permission).
: Fixes the description that appears in UAC prompts.
: Improve post-install message to direct people to the âpyâ
command.
: The installer will now fail to install on Windows 7 and Windows
8. Further, the UCRT dependency is now always downloaded on demand.
: Update Windows release to include SQLite 3.32.3.
:  now supports creating CAB files with non-ASCII
file path and adding files with non-ASCII file path to them.
: Fixed support of non-ASCII names in functions
msilib.OpenDatabase() and msilib.init_database() and
non-ASCII SQL in method msilib.Database.OpenView().
: Stable ABI redirection DLL (python3.dll) now uses 
comment(linker) for re-exporting.
: Updates Windows OpenSSL to 1.1.1g
: Changes the registered MIME type for  files on Windows
to text/x-python instead of text/plain.
: Manually define IO_REPARSE_TAG_APPEXECLINK in case some old
Windows SDK doesnât have it.
: Extend py.exe help to mention overrides via venv, shebang,
environmental variables & ini files.

================================================================================

# Changelog - Windows (Part 2)

: Fixes automatic import of props file when using the Nuget
package.

: The user site directory for 32-bit now includes a 
suffix to distinguish it from the 64-bit interpreterâs directory.

: Fixed layout of final page of the installer by removing the
special thanks to Mark Hammond (with his permission).

: Fixes the description that appears in UAC prompts.

: Improve post-install message to direct people to the âpyâ
command.

: The installer will now fail to install on Windows 7 and Windows
8. Further, the UCRT dependency is now always downloaded on demand.

: Update Windows release to include SQLite 3.32.3.

:  now supports creating CAB files with non-ASCII
file path and adding files with non-ASCII file path to them.

: Fixed support of non-ASCII names in functions
msilib.OpenDatabase() and msilib.init_database() and
non-ASCII SQL in method msilib.Database.OpenView().

: Stable ABI redirection DLL (python3.dll) now uses 
comment(linker) for re-exporting.

: Updates Windows OpenSSL to 1.1.1g

: Changes the registered MIME type for  files on Windows
to text/x-python instead of text/plain.

: Manually define IO_REPARSE_TAG_APPEXECLINK in case some old
Windows SDK doesnât have it.

================================================================================

# Changelog - Windows (Part 3)

: Extend py.exe help to mention overrides via venv, shebang,
environmental variables & ini files.

================================================================================

# Changelog - macOS (Part 1)

List:
: Update macOS installer to use SQLite 3.33.0.
: Avoid opening Finder window if running installer from the
command line. Patch contributed by Rick Heil.
: Fix configure error when building on macOS 11. Note that the
current Python release was released shortly after the first developer
preview of macOS 11 (Big Sur); there are other known issues with building
and running on the developer preview. Big Sur is expected to be fully
supported in a future bugfix release of Python 3.8.x and with 3.9.0.
: Update macOS installer to use SQLite 3.32.3.
: fixed an XDG settings issue not allowing macos to open browser
in webbrowser.py
: Update macOS installer to use SQLite 3.32.2.

: Update macOS installer to use SQLite 3.33.0.

: Avoid opening Finder window if running installer from the
command line. Patch contributed by Rick Heil.

: Fix configure error when building on macOS 11. Note that the
current Python release was released shortly after the first developer
preview of macOS 11 (Big Sur); there are other known issues with building
and running on the developer preview. Big Sur is expected to be fully
supported in a future bugfix release of Python 3.8.x and with 3.9.0.

================================================================================

# Changelog - macOS (Part 2)

: Update macOS installer to use SQLite 3.32.3.

: fixed an XDG settings issue not allowing macos to open browser
in webbrowser.py

: Update macOS installer to use SQLite 3.32.2.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Use âIDLE Shellâ as shell title
: Rewrite the Calltips doc section.
: In calltips, stop reminding that â/â marks the end of
positional-only arguments.
: Improve IDLE run crash error message (which users should never
see).
: Save files loaded with no line ending, as when blank, or
different line endings, by setting its line ending to the system default.
Fix regression in 3.8.4 and 3.9.0b4.
: Save files with non-ascii chars. Fix regression released in
3.9.0b4 and 3.8.4.
: Add keywords to module name completion list.  Rewrite
Completions section of IDLE doc.
: The encoding of ,  and  in IDLE is
now always UTF-8.
: Make Open Module open a special module such as os.path.
: Make context menu Cut and Copy work again when right-clicking
within a selection.
: Make test_idle pass when run after import.

: Use âIDLE Shellâ as shell title

: Rewrite the Calltips doc section.

: In calltips, stop reminding that â/â marks the end of
positional-only arguments.

: Improve IDLE run crash error message (which users should never
see).

================================================================================

# Changelog - IDLE (Part 2)

: Save files loaded with no line ending, as when blank, or
different line endings, by setting its line ending to the system default.
Fix regression in 3.8.4 and 3.9.0b4.

: Save files with non-ascii chars. Fix regression released in
3.9.0b4 and 3.8.4.

: Add keywords to module name completion list.  Rewrite
Completions section of IDLE doc.

: The encoding of ,  and  in IDLE is
now always UTF-8.

: Make Open Module open a special module such as os.path.

: Make context menu Cut and Copy work again when right-clicking
within a selection.

: Make test_idle pass when run after import.

================================================================================

# Changelog - C API (Part 1)

List:
: Removed undocumented macros Py_ALLOW_RECURSION and
Py_END_ALLOW_RECURSION and the recursion_critical field of the
PyInterpreterState structure.
: The PyUnicode_InternImmortal() function is now deprecated
and will be removed in Python 3.12: use PyUnicode_InternInPlace()
instead. Patch by Victor Stinner.
: Add PyCodec_Unregister() function to unregister a codec
search function.
: Remove the _Py_CheckRecursionLimit variable: it has been
replaced by ceval.recursion_limit of the PyInterpreterState
structure. Patch by Victor Stinner.
: Types created with PyType_FromSpec() now make any
signature in their  slot accessible from __text_signature__.
: Fix bug in PyOS_mystrnicmp and PyOS_mystricmp that incremented
pointers beyond the end of a string.
: Add a minimal decimal capsule API.  The API supports fast
conversions between Decimals up to 38 digits and their triple
representation as a C struct.
: Add PyDateTime_DATE_GET_TZINFO() and
PyDateTime_TIME_GET_TZINFO() macros for accessing the 
attributes of datetime.datetime and datetime.time
objects.
: Revert PyType_HasFeature() change: it reads again
directly the PyTypeObject.tp_flags member when the limited C
API is not used, rather than always calling PyType_GetFlags()
which hides implementation details.
: Remove PyUnicode_AsUnicodeCopy.
: Removed PyLong_FromUnicode().
: Removed PyUnicode_GetMax().
: Removed Py_UNICODE_str* functions manipulating
Py_UNICODE* strings.
: PyObject_AsCharBuffer(), PyObject_AsReadBuffer(),
PyObject_CheckReadBuffer(), and PyObject_AsWriteBuffer() are
removed. Please migrate to new buffer protocol;
PyObject_GetBuffer() and PyBuffer_Release().
: Raises DeprecationWarning for PyUnicode_FromUnicode(NULL,
 and PyUnicode_FromStringAndSize(NULL,  with   .
: Mark Py_UNICODE_COPY, Py_UNICODE_FILL,
PyUnicode_WSTR_LENGTH, PyUnicode_FromUnicode,
PyUnicode_AsUnicode, and PyUnicode_AsUnicodeAndSize as deprecated
in C. Remove Py_UNICODE_MATCH which was deprecated and broken since
Python 3.3.
: The PyObject_INIT() and PyObject_INIT_VAR()
macros become aliases to, respectively, PyObject_Init() and
PyObject_InitVar() functions.
: On Windows,  "pyerrors.h" no longer defines
 and  macros.
: The PY_SSIZE_T_CLEAN macro must now be defined to use
PyArg_ParseTuple() and Py_BuildValue() formats which use
: , , , , , ,  and
. See Parsing arguments and building values and
the .
: Export explicitly the Py_GetArgcArgv() function to the
C API and document the function. Previously, it was exported implicitly
which no longer works since Python is built with -fvisibility=hidden.
: Allow defining buffer slots in type specs.
: Fix a _PyEval_EvalCode() crash if  argument is
NULL.
: Calling PyDict_GetItem() without  held had
been allowed for historical reason. It is no longer allowed.
: PyOS_InterruptOccurred() now fails with a fatal error
if it is called with the GIL released.
: The result of PyNumber_Index() now always has exact
type . Previously, the result could have been an instance of a
subclass of .
: Convert Py_REFCNT() and  macros to
static inline functions. They cannot be used as l-value anymore: use
Py_SET_REFCNT() and Py_SET_SIZE() to set an object
reference count and size. This change is backward incompatible on purpose,
to prepare the C API for an opaque  structure.
: The PyType_FromSpec*() functions no longer overwrite the typeâs
â__module__â attribute if it is set via âPy_tp_membersâ or âPy_tp_getsetâ.
: Remove superfluous âextern Câ declarations from
Include/cpython/*.h.

================================================================================

# Changelog - C API (Part 2)

: Removed undocumented macros Py_ALLOW_RECURSION and
Py_END_ALLOW_RECURSION and the recursion_critical field of the
PyInterpreterState structure.

: The PyUnicode_InternImmortal() function is now deprecated
and will be removed in Python 3.12: use PyUnicode_InternInPlace()
instead. Patch by Victor Stinner.

: Add PyCodec_Unregister() function to unregister a codec
search function.

: Remove the _Py_CheckRecursionLimit variable: it has been
replaced by ceval.recursion_limit of the PyInterpreterState
structure. Patch by Victor Stinner.

: Types created with PyType_FromSpec() now make any
signature in their  slot accessible from __text_signature__.

: Fix bug in PyOS_mystrnicmp and PyOS_mystricmp that incremented
pointers beyond the end of a string.

: Add a minimal decimal capsule API.  The API supports fast
conversions between Decimals up to 38 digits and their triple
representation as a C struct.

: Add PyDateTime_DATE_GET_TZINFO() and
PyDateTime_TIME_GET_TZINFO() macros for accessing the 
attributes of datetime.datetime and datetime.time
objects.

================================================================================

# Changelog - C API (Part 3)

: Revert PyType_HasFeature() change: it reads again
directly the PyTypeObject.tp_flags member when the limited C
API is not used, rather than always calling PyType_GetFlags()
which hides implementation details.

: Remove PyUnicode_AsUnicodeCopy.

: Removed PyLong_FromUnicode().

: Removed PyUnicode_GetMax().

: Removed Py_UNICODE_str* functions manipulating
Py_UNICODE* strings.

: PyObject_AsCharBuffer(), PyObject_AsReadBuffer(),
PyObject_CheckReadBuffer(), and PyObject_AsWriteBuffer() are
removed. Please migrate to new buffer protocol;
PyObject_GetBuffer() and PyBuffer_Release().

: Raises DeprecationWarning for PyUnicode_FromUnicode(NULL,
 and PyUnicode_FromStringAndSize(NULL,  with   .

: Mark Py_UNICODE_COPY, Py_UNICODE_FILL,
PyUnicode_WSTR_LENGTH, PyUnicode_FromUnicode,
PyUnicode_AsUnicode, and PyUnicode_AsUnicodeAndSize as deprecated
in C. Remove Py_UNICODE_MATCH which was deprecated and broken since
Python 3.3.

: The PyObject_INIT() and PyObject_INIT_VAR()
macros become aliases to, respectively, PyObject_Init() and
PyObject_InitVar() functions.

: On Windows,  "pyerrors.h" no longer defines
 and  macros.

================================================================================

# Changelog - C API (Part 4)

: The PY_SSIZE_T_CLEAN macro must now be defined to use
PyArg_ParseTuple() and Py_BuildValue() formats which use
: , , , , , ,  and
. See Parsing arguments and building values and
the .

: Export explicitly the Py_GetArgcArgv() function to the
C API and document the function. Previously, it was exported implicitly
which no longer works since Python is built with -fvisibility=hidden.

: Allow defining buffer slots in type specs.

: Fix a _PyEval_EvalCode() crash if  argument is
NULL.

: Calling PyDict_GetItem() without  held had
been allowed for historical reason. It is no longer allowed.

: PyOS_InterruptOccurred() now fails with a fatal error
if it is called with the GIL released.

: The result of PyNumber_Index() now always has exact
type . Previously, the result could have been an instance of a
subclass of .

: Convert Py_REFCNT() and  macros to
static inline functions. They cannot be used as l-value anymore: use
Py_SET_REFCNT() and Py_SET_SIZE() to set an object
reference count and size. This change is backward incompatible on purpose,
to prepare the C API for an opaque  structure.

================================================================================

# Changelog - C API (Part 5)

: The PyType_FromSpec*() functions no longer overwrite the typeâs
â__module__â attribute if it is set via âPy_tp_membersâ or âPy_tp_getsetâ.

: Remove superfluous âextern Câ declarations from
Include/cpython/*.h.

================================================================================

# Changelog - Security

List:
:  no longer uses  to load
 or rpcrt4.dll at runtime.

:  no longer uses  to load
 or rpcrt4.dll at runtime.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Correctly generate annotations where parentheses are omitted
but required (e.g: Type[(str,  .
: Fixed str.isidentifier() for non-canonicalized strings
containing non-BMP characters on Windows.
: Improved syntax errors for invalid characters in source code.
: Fixed a bug when using codeop.compile_command() that was
causing exceptions to be swallowed with the new parser. Patch by Pablo
Galindo
: Apply  to .
: Initialize n->n_col_offset. (Patch by Joannah Nanjekye)
: Fix command line argument parsing: no longer write errors
multiple times into stderr.
bpo-1635741: Port  to multiphase initialization ().
: Add pass-throughs for  and reversed() to
weakref.proxy objects. Patch by Pablo Galindo.
bpo-1635741: Port  to multiphase initialization ().
: Reporting a specialised error message for invalid string
prefixes, which was introduced in , is being reverted due to
backwards compatibility concerns for strings that immediately follow a
reserved keyword without whitespace between them. Constructs like
   else"#fca" were failing to parse, which is not an
acceptable breakage on such short notice.
: Fix imp module deprecation warning when PyImport_ReloadModule
is called. Patch by Robert Rouhani.
: Fixed support of nested type variables in GenericAlias (e.g.
list[list[T]]).
bpo-1635741: Port _stat module to multiphase initialization ().
: Enable implicit exception chaining when calling
generator.throw().
: Add tools for generating mappings headers for CJKCodecs.
: Setting frame.f_lineno is now robust w.r.t. changes in the
source-to-bytecode compiler
: Added the ability to list interpreters associated with channel
ends in the internal subinterpreters module.
: Improve performance of PyLong_FromDouble() for values
that fit into .

================================================================================

# Changelog - Core and Builtins (Part 2)

: Correctly generate annotations where parentheses are omitted
but required (e.g: Type[(str,  .

: Fixed str.isidentifier() for non-canonicalized strings
containing non-BMP characters on Windows.

: Improved syntax errors for invalid characters in source code.

: Fixed a bug when using codeop.compile_command() that was
causing exceptions to be swallowed with the new parser. Patch by Pablo
Galindo

: Initialize n->n_col_offset. (Patch by Joannah Nanjekye)

: Fix command line argument parsing: no longer write errors
multiple times into stderr.

bpo-1635741: Port  to multiphase initialization ().

: Add pass-throughs for  and reversed() to
weakref.proxy objects. Patch by Pablo Galindo.

bpo-1635741: Port  to multiphase initialization ().

: Reporting a specialised error message for invalid string
prefixes, which was introduced in , is being reverted due to
backwards compatibility concerns for strings that immediately follow a
reserved keyword without whitespace between them. Constructs like
   else"#fca" were failing to parse, which is not an
acceptable breakage on such short notice.

: Fix imp module deprecation warning when PyImport_ReloadModule
is called. Patch by Robert Rouhani.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fixed support of nested type variables in GenericAlias (e.g.
list[list[T]]).

bpo-1635741: Port _stat module to multiphase initialization ().

: Enable implicit exception chaining when calling
generator.throw().

: Add tools for generating mappings headers for CJKCodecs.

: Setting frame.f_lineno is now robust w.r.t. changes in the
source-to-bytecode compiler

: Added the ability to list interpreters associated with channel
ends in the internal subinterpreters module.

: Improve performance of PyLong_FromDouble() for values
that fit into .

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed ast.get_source_segment() for ast nodes that have
incomplete location information. Patch by Irit Katriel.
: Convert  to use Argument Clinic.
: Added the available_timezones() function to the
 module. Patch by Paul Ganssle.
: The  exposes internal implementation details.
The attributes digest_cons, , and  are deprecated
and will be removed in the future.
: The internal module  wraps and exposes OpenSSLâs
HMAC API. The new code will be used in Python 3.10 after the internal
implementation details of the pure Python HMAC module are no longer part
of the public API.
: Builtin hash modules can now be disabled or selectively enabled
with  --with-builtin-hashlib-hashes=sha3,blake1 or
--without-builtin-hashlib-hashes.
: The  module can now use SHA3 hashes and SHAKE XOF
from OpenSSL when available.
: The  now compiles with OpenSSL 3.0.0-alpha2.
: Revert changes to inspect.getdoc().
: When cancelling a task due to timeout, asyncio.wait_for()
will now propagate the exception if an error happens during cancellation.
Patch by Roman Skurikhin.
: Fix edge cases in SyntaxError formatting. If the offset is <=
0, no caret is printed. If the offset is > line length, the caret is
printed pointing just after the last character.
: If text content lines are longer than policy.max_line_length,
always use a content-encoding to make sure they are wrapped.
: Added functools.cache() as a simpler, more discoverable way to
access the unbounded cache variant of lru_cache(maxsize=None).
: , the  module. Adds support for the
IANA time zone database.
: Removed attributes  and __parameters__ from
special generic aliases like typing.List (not subscripted).
: Convert posixmodule.c (âposixâ or ântâ module) to the
multiphase initialization (PEP 489).
: Add a  argument to Future.cancel() and
Task.cancel().
: Added an optional  parameter to random.sample().
: The  and  modules now actively check
that OpenSSL is build with thread support. Python 3.7.0 made thread
support mandatory and no longer works safely with a no-thread builds.
: When a asyncio.Task is cancelled, the exception
traceback now chains all the way back to where the task was first
interrupted.
: functools.lru_cache() objects can now be the targets of
weakrefs.
: Fix possible memory leak in the C implementation of
asyncio.Task.
: fnmatch.fnmatch() could take exponential time in the
presence of multiple  pattern characters.  This was repaired by
generating more elaborate regular expressions to avoid futile
backtracking.
: compileall is now able to use hardlinks to prevent
duplicates in a case when  files for different optimization levels
have the same content.
: The ssl module now support OpenSSL builds without TLS 1.0 and
1.1 methods.
: Improve error reporting in ast.literal_eval() in the
presence of malformed  nodes instead of silently ignoring
any non-conforming elements. Patch by Curtis Bucher.
: Deprecated the optional  argument to
random.shuffle().
: platform.win32_ver() now produces correct  strings
instead of empty strings.
: The first argument of pickle.loads() is now
positional-only.
: Update  to merge nntplib.NNTP and
nntplib._NNTPBase. Patch by Donghee Na.
: Update  to use gdbm_count if possible when
calling . Patch by Donghee Na.
: Add isolated=True keyword-only parameter to
_xxsubinterpreters.create(). An isolated subinterpreter cannot spawn
threads, spawn a child process or call .
: Remove _random.Random.randbytes(): the C implementation of
randbytes(). Implement the method in Python to ease subclassing:
randbytes() now directly reuses getrandbits().
: Added default arguments to
difflib.SequenceMatcher.find_longest_match().
: Fix a race condition in concurrent.futures._ThreadWakeup:
access to _ThreadWakeup is now protected with the shutdown lock.
: Process.shutdown(wait=True) of concurrent.futures
now closes explicitly the result queue.
: Add a new  method to
the SimpleQueue class to explicitly close the
queue.
: Revert . unittest.mock.MagicMock with wrapsâ
set uses default return values for magic methods.
: Added  function to importlib.resources with support
for subdirectories in package data, matching backport in
importlib_resources 1.5.
: imaplib.IMAP4.unselect() is added. Patch by Donghee Na.
:  now returns typing.Optional[T] when called for
typing.Union of two types, one of which is .
: Add support for CAN_J1939 sockets (available on Linux 5.4+)
: types.MappingProxyType is now reversible.
: The repr for types.SimpleNamespace is now insertion
ordered rather than alphabetical.
: On AIX, thread_time() is now implemented with
thread_cputime() which has nanosecond resolution, rather than
clock_gettime(CLOCK_THREAD_CPUTIME_ID) which has a resolution of 10
milliseconds. Patch by Batuhan Taskaya.
: Raise TypeError when _generate_next_value_ is defined after
members. Patch by Ethan Onstott.
: In the argparse module, the repr for Namespace() and other
argument holders now displayed in the order attributes were added.
Formerly, it displayed in alphabetical order even though argument order is
preserved the user visible parts of the module.
: The isocalendar() methods of datetime.date and
datetime.datetime now return a named tuple instead of a
.

================================================================================

# Changelog - Library (Part 2)

: Fixed ast.get_source_segment() for ast nodes that have
incomplete location information. Patch by Irit Katriel.

: Convert  to use Argument Clinic.

: Added the available_timezones() function to the
 module. Patch by Paul Ganssle.

: The  exposes internal implementation details.
The attributes digest_cons, , and  are deprecated
and will be removed in the future.

: The internal module  wraps and exposes OpenSSLâs
HMAC API. The new code will be used in Python 3.10 after the internal
implementation details of the pure Python HMAC module are no longer part
of the public API.

: Builtin hash modules can now be disabled or selectively enabled
with  --with-builtin-hashlib-hashes=sha3,blake1 or
--without-builtin-hashlib-hashes.

: The  module can now use SHA3 hashes and SHAKE XOF
from OpenSSL when available.

: The  now compiles with OpenSSL 3.0.0-alpha2.

: Revert changes to inspect.getdoc().

: When cancelling a task due to timeout, asyncio.wait_for()
will now propagate the exception if an error happens during cancellation.
Patch by Roman Skurikhin.

================================================================================

# Changelog - Library (Part 3)

: Fix edge cases in SyntaxError formatting. If the offset is <=
0, no caret is printed. If the offset is > line length, the caret is
printed pointing just after the last character.

: If text content lines are longer than policy.max_line_length,
always use a content-encoding to make sure they are wrapped.

: Added functools.cache() as a simpler, more discoverable way to
access the unbounded cache variant of lru_cache(maxsize=None).

: , the  module. Adds support for the
IANA time zone database.

: Removed attributes  and __parameters__ from
special generic aliases like typing.List (not subscripted).

: Convert posixmodule.c (âposixâ or ântâ module) to the
multiphase initialization (PEP 489).

: Add a  argument to Future.cancel() and
Task.cancel().

: Added an optional  parameter to random.sample().

: The  and  modules now actively check
that OpenSSL is build with thread support. Python 3.7.0 made thread
support mandatory and no longer works safely with a no-thread builds.

: When a asyncio.Task is cancelled, the exception
traceback now chains all the way back to where the task was first
interrupted.

: functools.lru_cache() objects can now be the targets of
weakrefs.

================================================================================

# Changelog - Library (Part 4)

: Fix possible memory leak in the C implementation of
asyncio.Task.

: fnmatch.fnmatch() could take exponential time in the
presence of multiple  pattern characters.  This was repaired by
generating more elaborate regular expressions to avoid futile
backtracking.

: compileall is now able to use hardlinks to prevent
duplicates in a case when  files for different optimization levels
have the same content.

: The ssl module now support OpenSSL builds without TLS 1.0 and
1.1 methods.

: Improve error reporting in ast.literal_eval() in the
presence of malformed  nodes instead of silently ignoring
any non-conforming elements. Patch by Curtis Bucher.

: Deprecated the optional  argument to
random.shuffle().

: platform.win32_ver() now produces correct  strings
instead of empty strings.

: The first argument of pickle.loads() is now
positional-only.

: Update  to merge nntplib.NNTP and
nntplib._NNTPBase. Patch by Donghee Na.

: Update  to use gdbm_count if possible when
calling . Patch by Donghee Na.

: Add isolated=True keyword-only parameter to
_xxsubinterpreters.create(). An isolated subinterpreter cannot spawn
threads, spawn a child process or call .

================================================================================

# Changelog - Library (Part 5)

: Remove _random.Random.randbytes(): the C implementation of
randbytes(). Implement the method in Python to ease subclassing:
randbytes() now directly reuses getrandbits().

: Added default arguments to
difflib.SequenceMatcher.find_longest_match().

: Fix a race condition in concurrent.futures._ThreadWakeup:
access to _ThreadWakeup is now protected with the shutdown lock.

: Process.shutdown(wait=True) of concurrent.futures
now closes explicitly the result queue.

: Add a new  method to
the SimpleQueue class to explicitly close the
queue.

: Revert . unittest.mock.MagicMock with wrapsâ
set uses default return values for magic methods.

: Added  function to importlib.resources with support
for subdirectories in package data, matching backport in
importlib_resources 1.5.

: imaplib.IMAP4.unselect() is added. Patch by Donghee Na.

:  now returns typing.Optional[T] when called for
typing.Union of two types, one of which is .

: Add support for CAN_J1939 sockets (available on Linux 5.4+)

: types.MappingProxyType is now reversible.

: The repr for types.SimpleNamespace is now insertion
ordered rather than alphabetical.

================================================================================

# Changelog - Library (Part 6)

: On AIX, thread_time() is now implemented with
thread_cputime() which has nanosecond resolution, rather than
clock_gettime(CLOCK_THREAD_CPUTIME_ID) which has a resolution of 10
milliseconds. Patch by Batuhan Taskaya.

: Raise TypeError when _generate_next_value_ is defined after
members. Patch by Ethan Onstott.

: In the argparse module, the repr for Namespace() and other
argument holders now displayed in the order attributes were added.
Formerly, it displayed in alphabetical order even though argument order is
preserved the user visible parts of the module.

: The isocalendar() methods of datetime.date and
datetime.datetime now return a named tuple instead of a
.

================================================================================

# Changelog - Documentation

List:
: Add version of removal for explicit passing of coros to
asyncio.wait()âs documentation
: Provide docstrings for webbrowser open functions.
: Mention that asyncio.wait() requires a non-empty set of
awaitables.
: Tutorial example for sorted() in the Loop Techniques section is
given a better explanation. Also a new example is included to explain
sorted()âs basic behavior.
: Fix an incorrect signature for pickle.loads() in the docs

: Add version of removal for explicit passing of coros to
asyncio.wait()âs documentation

: Provide docstrings for webbrowser open functions.

: Mention that asyncio.wait() requires a non-empty set of
awaitables.

: Tutorial example for sorted() in the Loop Techniques section is
given a better explanation. Also a new example is included to explain
sorted()âs basic behavior.

: Fix an incorrect signature for pickle.loads() in the docs

================================================================================

# Changelog - Tests

List:
: distutils.tests now saves/restores warnings filters to leave
them unchanged. Importing tests imports docutils which imports
pkg_resources which adds a warnings filter.
: test_gdb and test.pythoninfo now check gdb command exit code.

: distutils.tests now saves/restores warnings filters to leave
them unchanged. Importing tests imports docutils which imports
pkg_resources which adds a warnings filter.

: test_gdb and test.pythoninfo now check gdb command exit code.

================================================================================

# Changelog - Build

List:
: Move _dirnameW out of HAVE_SYMLINK to fix a potential compiling
issue.
: Add --with-experimental-isolated-subinterpreters build
option to : better isolate subinterpreters, experimental
build mode.

: Move _dirnameW out of HAVE_SYMLINK to fix a potential compiling
issue.

: Add --with-experimental-isolated-subinterpreters build
option to : better isolate subinterpreters, experimental
build mode.

================================================================================

# Changelog - Windows

List:
: Include winsock2.h in pytime.c for timeval.
: Increase reserved stack space to prevent overflow crash on
Windows.
: Add IPv6 support to  datagram endpoints in
ProactorEventLoop. Change the raised exception for unknown address
families to ValueError as itâs not coming from Windows API.

: Include winsock2.h in pytime.c for timeval.

: Increase reserved stack space to prevent overflow crash on
Windows.

: Add IPv6 support to  datagram endpoints in
ProactorEventLoop. Change the raised exception for unknown address
families to ValueError as itâs not coming from Windows API.

================================================================================

# Changelog - macOS

List:
: When building Python on macOS from source,  now
links with non-system Tcl and Tk frameworks if they are installed in
/Library/Frameworks, as had been the case on older releases of macOS.
If a macOS SDK is explicitly configured, by using
--enable-universalsdk= or , only the SDK itself is
searched. The default behavior can still be overridden with
--with-tcltk-includes and --with-tcltk-libs.
: Expose RFC 3542 IPv6 socket options.

: When building Python on macOS from source,  now
links with non-system Tcl and Tk frameworks if they are installed in
/Library/Frameworks, as had been the case on older releases of macOS.
If a macOS SDK is explicitly configured, by using
--enable-universalsdk= or , only the SDK itself is
searched. The default behavior can still be overridden with
--with-tcltk-includes and --with-tcltk-libs.

: Expose RFC 3542 IPv6 socket options.

================================================================================

# Changelog - Tools/Demos

List:
: Update multissltest helper to test with latest OpenSSL 1.0.2,
1.1.0, 1.1.1, and 3.0.0-alpha.
: Fix a syntax typo in turtledemo that now raises a
SyntaxError.
: Fix multissltest tool. OpenSSL has changed download URL for old
releases. The multissltest tool now tries to download from current and old
download URLs.

: Update multissltest helper to test with latest OpenSSL 1.0.2,
1.1.0, 1.1.1, and 3.0.0-alpha.

: Fix a syntax typo in turtledemo that now raises a
SyntaxError.

: Fix multissltest tool. OpenSSL has changed download URL for old
releases. The multissltest tool now tries to download from current and old
download URLs.

================================================================================

# Changelog - C API (Part 1)

List:
: Remove the _PyUnicode_ClearStaticStrings() function from
the C API.
: Add PyCFunction_CheckExact() macro for exact type checks now
that we allow subtypes of PyCFunction, as well as PyCMethod_CheckExact()
and PyCMethod_Check() for the new PyCMethod subtype.
: Declare _PyErr_GetTopmostException() with PyAPI_FUNC()
to properly export the function in the C API. The function remains private
() prefix.
: Nullify inittab_copy during finalization, preventing future
interpreter initializations in an embedded situation from crashing. Patch
by Gregory Szorc.
: The PyThreadState_GetFrame() function now returns a
strong reference to the frame.
: Remove the following functions from the C API. Call
PyGC_Collect() explicitly to free all free lists.

PyAsyncGen_ClearFreeLists()
PyContext_ClearFreeList()
PyDict_ClearFreeList()
PyFloat_ClearFreeList()
PyFrame_ClearFreeList()
PyList_ClearFreeList()
PySet_ClearFreeList()
PyTuple_ClearFreeList()

================================================================================

# Changelog - C API (Part 2)


: New PyFrame_GetBack() function: get the frame next
outer frame.
: New PyFrame_GetCode() function: return a borrowed
reference to the frame code.
: Ensure that instances of types created with
PyType_FromSpecWithBases() will visit its class object when
traversing references in the garbage collector (implemented as an
extension of the provided tp_traverse). Patch by
Pablo Galindo.
: Module C state is now accessible from C-defined heap type
methods (). Patch by Marcel Plch and Petr Viktorin.

: Remove the _PyUnicode_ClearStaticStrings() function from
the C API.

: Add PyCFunction_CheckExact() macro for exact type checks now
that we allow subtypes of PyCFunction, as well as PyCMethod_CheckExact()
and PyCMethod_Check() for the new PyCMethod subtype.

: Declare _PyErr_GetTopmostException() with PyAPI_FUNC()
to properly export the function in the C API. The function remains private
() prefix.

: Nullify inittab_copy during finalization, preventing future
interpreter initializations in an embedded situation from crashing. Patch
by Gregory Szorc.

: The PyThreadState_GetFrame() function now returns a
strong reference to the frame.

================================================================================

# Changelog - C API (Part 3)

: Remove the following functions from the C API. Call
PyGC_Collect() explicitly to free all free lists.

List:
PyAsyncGen_ClearFreeLists()
PyContext_ClearFreeList()
PyDict_ClearFreeList()
PyFloat_ClearFreeList()
PyFrame_ClearFreeList()
PyList_ClearFreeList()
PySet_ClearFreeList()
PyTuple_ClearFreeList()

PyAsyncGen_ClearFreeLists()

PyContext_ClearFreeList()

PyDict_ClearFreeList()

PyFloat_ClearFreeList()

PyFrame_ClearFreeList()

PyList_ClearFreeList()

PySet_ClearFreeList()

PyTuple_ClearFreeList()

: New PyFrame_GetBack() function: get the frame next
outer frame.

: New PyFrame_GetCode() function: return a borrowed
reference to the frame code.

: Ensure that instances of types created with
PyType_FromSpecWithBases() will visit its class object when
traversing references in the garbage collector (implemented as an
extension of the provided tp_traverse). Patch by
Pablo Galindo.

: Module C state is now accessible from C-defined heap type
methods (). Patch by Marcel Plch and Petr Viktorin.

================================================================================

# Changelog - Security

List:
: Fixes audit events raised on creating a new socket.
: Disallow CR or LF in email.headerregistry.Address arguments to
guard against header injection attacks.
: CVE 2020-8492: The
AbstractBasicAuthHandler class of the
urllib.request module uses an inefficient regular expression which
can be exploited by an attacker to cause a denial of service. Fix the
regex to prevent the catastrophic backtracking. Vulnerability reported by
Ben Caller and Matt Schwager.

: Fixes audit events raised on creating a new socket.

: Disallow CR or LF in email.headerregistry.Address arguments to
guard against header injection attacks.

: CVE 2020-8492: The
AbstractBasicAuthHandler class of the
urllib.request module uses an inefficient regular expression which
can be exploited by an attacker to cause a denial of service. Fix the
regex to prevent the catastrophic backtracking. Vulnerability reported by
Ben Caller and Matt Schwager.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Improve the performance of bytes.hex().
: Switch to a new parser, based on PEG.  For more details see PEP
617. To temporarily switch back to the old parser, use   or
PYTHONOLDPARSER=1.  In Python 3.10 we will remove the old parser
completely, including the  module (already deprecated) and
anything that depends on it.
: Fix the tokenizer to display the correct error message, when
there is a SyntaxError on the last input character and no newline
follows. It used to be unexpected   , while it should
be  .
: Correctly unparse explicit  prefix for strings when
postponed evaluation for annotations activated. Patch by Batuhan Taskaya.
: Report a specialized error message,   ,
when the tokenizer encounters a string with an invalid prefix.
: Fix the signal handler: it now always uses the main
interpreter, rather than trying to get the current Python thread state.
: str.encode() and str.decode() no longer check the encoding and
errors in development mode or in debug mode during Python finalization.
The codecs machinery can no longer work on very late calls to str.encode()
and str.decode().
: Fix possible refleaks in , memo of PyScannerObject
should be traversed.
: Speed up calls to  by using the 
vectorcall calling convention.
: Add column and line information to ast.keyword nodes. Patch
by Pablo Galindo.
bpo-1635741: Port  to multiphase initialization
().
bpo-1635741: Port  to multiphase initialization ().
bpo-1635741: Port _uuid module to multiphase initialization ().
: Convert json module to use PyType_FromSpec().
: Improve the error message for multiple star expressions in an
assignment. Patch by Furkan Onder
bpo-1635741: Port _functools module to multiphase initialization (PEP
489). Patch by Paulo Henrique Silva.
bpo-1635741: Port operator module to multiphase initialization (PEP 489).
Patch by Paulo Henrique Silva.
: Fix PyThreadState_Clear(). PyThreadState.frame is
a borrowed reference, not a strong reference: PyThreadState_Clear()
must not call Py_CLEAR(tstate->frame).
bpo-1635741: Port time module to multiphase initialization ().
Patch by Paulo Henrique Silva.
bpo-1635741: Port _weakref extension module to multiphase initialization
().
: Fix a leak and subsequent crash in parsetok.c caused by realloc
misuse on a rare codepath.
: Added str.removeprefix and str.removesuffix methods and
corresponding bytes, bytearray, and collections.UserString methods to
remove affixes from a string if present. See  for a full
description. Patch by Dennis Sweeney.
: Implement PEP 585. This supports list[int], tuple[str, â¦]
etc.
: Support unparsing of infinity numbers in postponed annotations.
Patch by Batuhan TaÅkaya.
: Speed up calls to  by using the 
vectorcall calling convention. Patch by Mark Shannon.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Improve the performance of bytes.hex().

: Switch to a new parser, based on PEG.  For more details see PEP
617. To temporarily switch back to the old parser, use   or
PYTHONOLDPARSER=1.  In Python 3.10 we will remove the old parser
completely, including the  module (already deprecated) and
anything that depends on it.

: Fix the tokenizer to display the correct error message, when
there is a SyntaxError on the last input character and no newline
follows. It used to be unexpected   , while it should
be  .

: Correctly unparse explicit  prefix for strings when
postponed evaluation for annotations activated. Patch by Batuhan Taskaya.

: Report a specialized error message,   ,
when the tokenizer encounters a string with an invalid prefix.

: Fix the signal handler: it now always uses the main
interpreter, rather than trying to get the current Python thread state.

: str.encode() and str.decode() no longer check the encoding and
errors in development mode or in debug mode during Python finalization.
The codecs machinery can no longer work on very late calls to str.encode()
and str.decode().

: Fix possible refleaks in , memo of PyScannerObject
should be traversed.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Speed up calls to  by using the 
vectorcall calling convention.

: Add column and line information to ast.keyword nodes. Patch
by Pablo Galindo.

bpo-1635741: Port  to multiphase initialization
().

bpo-1635741: Port  to multiphase initialization ().

bpo-1635741: Port _uuid module to multiphase initialization ().

: Convert json module to use PyType_FromSpec().

: Improve the error message for multiple star expressions in an
assignment. Patch by Furkan Onder

bpo-1635741: Port _functools module to multiphase initialization (PEP
489). Patch by Paulo Henrique Silva.

bpo-1635741: Port operator module to multiphase initialization (PEP 489).
Patch by Paulo Henrique Silva.

: Fix PyThreadState_Clear(). PyThreadState.frame is
a borrowed reference, not a strong reference: PyThreadState_Clear()
must not call Py_CLEAR(tstate->frame).

bpo-1635741: Port time module to multiphase initialization ().
Patch by Paulo Henrique Silva.

bpo-1635741: Port _weakref extension module to multiphase initialization
().

: Fix a leak and subsequent crash in parsetok.c caused by realloc
misuse on a rare codepath.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Added str.removeprefix and str.removesuffix methods and
corresponding bytes, bytearray, and collections.UserString methods to
remove affixes from a string if present. See  for a full
description. Patch by Dennis Sweeney.

: Implement PEP 585. This supports list[int], tuple[str, â¦]
etc.

: Support unparsing of infinity numbers in postponed annotations.
Patch by Batuhan TaÅkaya.

: Speed up calls to  by using the 
vectorcall calling convention. Patch by Mark Shannon.

================================================================================

# Changelog - Library (Part 1)

List:
: typing.get_args() now always returns an empty tuple for
special generic aliases.
: Functions typing.get_origin(), typing.get_args()
and typing.get_type_hints() support now generic aliases like
.
: Optimize the subprocess module on FreeBSD using
closefrom(). A single  syscall is cheap, but when
sysconf(_SC_OPEN_MAX) is high, the loop calling  on each
file descriptor can take several milliseconds.
The workaround on FreeBSD to improve performance was to load and mount the
fdescfs kernel module, but this is not enabled by default.
Initial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans
(kevans) and Kubilay Kocak (koobs):
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274

: On FreeBSD, os.closerange(fd_low,  now calls
closefrom(fd_low) if  is greater than or equal to
sysconf(_SC_OPEN_MAX).
Initial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans
(kevans) and Kubilay Kocak (koobs):
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274

================================================================================

# Changelog - Library (Part 2)

: The  module is pending deprecation due to
.
: Fix the Windows implementation of os.waitpid() for exit
code larger than   . The exit status is now interpreted as
an unsigned number.
: Set â__main__â as the default module name when â__name__â is
missing in typing.TypeVar. Patch by Weipeng Hong.
: The  package is now imported lazily in
 only when the assertLogs()
assertion is used.
: The  package is now imported lazily in
 only when the IsolatedAsyncioTestCase
class is used.
: In ShareableList.__setitem__(), check the size of a new
string item after encoding it to utf-8, not before.
: Added pathlib.Path.with_stem() to create a new Path with
the stem replaced.
: Deprecated support for set objects in random.sample().
: Improved help for the  module. Docstrings are now
shown for all special forms and special generic aliases (like 
and ). Using  with generic alias like  will
show the help for the correspondent concrete type ( in this case).
: inspect.getdoc() no longer returns docstring inherited
from the type of the object or from parent class if it is a class if it is
not defined in the object itself. In  the documentation string
is now shown not only for class, function, method etc, but for any object
that has its own  attribute.
: Fixed SpooledTemporaryFile.seek() to return the position.
: Added zscore() to statistics.NormalDist().
: Allow random.getrandbits(0) to succeed and to return 0.
: Add random.randbytes() function and
random.Random.randbytes() method to generate random bytes.
: collections.namedtuple() now provides a human-readable
repr for its field accessors.
: The included copy of sqlite3 on Windows is now compiled with
the json extension. This allows the use of functions such as
json_object.
: Wait in KqueueSelector.select when no fds are registered
: Ensure modulefinder uses io.open_code() and
respects coding comments.
: Allow again to spawn daemon threads in subinterpreters (revert
change which denied them).
: Workers in ProcessPoolExecutor are
now spawned on demand, only when there are no available idle workers to
reuse. This optimizes startup overhead and reduces the amount of lost CPU
time to idle workers. Patch by Kyle Stanley.
: Fix a hang at fork in the logging module: the new private
_at_fork_reinit() method is now used to reinitialize locks at fork in the
child process.
: Implement traverse and clear slots in _abc._abc_data type.
: Remove deprecated symtable.SymbolTable.has_exec().
: Fix a bug in the  module that was causing
incorrectly report global variables as local. Patch by Pablo Galindo.
: Add support for _SC_AIX_REALMEM to posix.sysconf().
: Removed the _field_types attribute of the
typing.NamedTuple class.
: Multiple inheritance with typing.NamedTuple now raises
an error instead of silently ignoring other types.
: Fixed reverting multiple patches in unittest.mock. Patcherâs
__exit__() is now never called if its __enter__() is failed.
Returning true from __exit__() silences now the exception.
: CGIHTTPRequestHandler of http.server now logs the CGI script
exit code, rather than the CGI script exit status of os.waitpid(). For
example, if the script is killed by signal 11, it now logs: âCGI script
exit code -11.â
: Improve the error message when triying to import a module using
 and incorrectly using the â.pyâ extension at the end of the
module name. Patch by Pablo Galindo.
: Add os.waitstatus_to_exitcode() function: convert a wait
status to an exit code.
: Fix threading._after_fork(): if fork was not called by a thread
spawned by threading.Thread, threading._after_fork() now creates a
_MainThread instance for _main_thread, instead of a _DummyThread instance.
: Add a private _at_fork_reinit() method to
_thread.Lock, _thread.RLock, threading.RLock
and threading.Condition classes: reinitialize the lock at fork in
the child process, reset the lock to the unlocked state. Rename also the
private _reset_internal_locks() method of threading.Event to
_at_fork_reinit().
: Expose CAN_RAW_JOIN_FILTERS in the
 module.
: AbstractBasicAuthHandler of
urllib.request now parses all WWW-Authenticate HTTP headers and
accepts multiple challenges per header: use the realm of the first Basic
challenge.
: Removed daemon threads from concurrent.futures by adding
an internal threading._register_atexit(), which calls registered
functions prior to joining all non-daemon threads. This allows for
compatibility with subinterpreters, which donât support daemon threads.
: Fix importlib._bootstrap_external: avoid creating a new
 builtin module if itâs already available in
sys.modules, and remove redundant imports.
: Fix os.getgrouplist(): if getgrouplist() function fails
because the group list is too small, retry with a larger group list. On
failure, the glibc implementation of getgrouplist() sets 
to the total number of groups. For other implementations, double the group
list size.
: Add time.CLOCK_TAI constant if the operating system
support it.
: In re docstring, clarify the relationship between inline and
argument compile flags.
: Update internal table of OpenSSL error codes in the 
module.
: Added  operators to
weakref.WeakValueDictionary.
: Added  operators to
weakref.WeakKeyDictionary.
: Fix linear runtime behaviour of the __getitem__ and
__setitem__ methods in
multiprocessing.shared_memory.ShareableList. This avoids
quadratic performance when iterating a ShareableList. Patch by Thomas
Krennwallner.
: Remove undocumented support for  a pathlib.Path
object via its context manager. The context manager magic methods remain,
but they are now a no-op, making  objects immutable.
: Added  operators ( and ) to
collections.ChainMap.
: Normalization of line endings in ElementTree attributes was
removed, as line endings which were replaced by entity numbers should be
preserved in original form.
: Properly handle sys.audit() failures in
sys.set_asyncgen_hooks().
: lib2to3 now recognizes named assignment expressions (the walrus
operator, )
: In platform, delay the invocation of âuname -pâ until the
processor attribute is requested.
: inspect.getsource() now returns correct source code for
inner class with same name as module level class. Decorators are also
returned as part of source of the class. Patch by Karthikeyan
Singaravelan.
: Deprecate passing None as an argument for shlex.split()âs
 parameter.  Patch by Zackery Spytz.
: Prevent crashes when using an uninitialized
_elementtree.XMLParser object. Patch by Oren Milman.

================================================================================

# Changelog - Library (Part 3)

: typing.get_args() now always returns an empty tuple for
special generic aliases.

: Functions typing.get_origin(), typing.get_args()
and typing.get_type_hints() support now generic aliases like
.

: Optimize the subprocess module on FreeBSD using
closefrom(). A single  syscall is cheap, but when
sysconf(_SC_OPEN_MAX) is high, the loop calling  on each
file descriptor can take several milliseconds.

The workaround on FreeBSD to improve performance was to load and mount the
fdescfs kernel module, but this is not enabled by default.

Initial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans
(kevans) and Kubilay Kocak (koobs):
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274

: On FreeBSD, os.closerange(fd_low,  now calls
closefrom(fd_low) if  is greater than or equal to
sysconf(_SC_OPEN_MAX).

Initial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans
(kevans) and Kubilay Kocak (koobs):
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274

: The  module is pending deprecation due to
.

: Fix the Windows implementation of os.waitpid() for exit
code larger than   . The exit status is now interpreted as
an unsigned number.

================================================================================

# Changelog - Library (Part 4)

: Set â__main__â as the default module name when â__name__â is
missing in typing.TypeVar. Patch by Weipeng Hong.

: The  package is now imported lazily in
 only when the assertLogs()
assertion is used.

: The  package is now imported lazily in
 only when the IsolatedAsyncioTestCase
class is used.

: In ShareableList.__setitem__(), check the size of a new
string item after encoding it to utf-8, not before.

: Added pathlib.Path.with_stem() to create a new Path with
the stem replaced.

: Deprecated support for set objects in random.sample().

: Improved help for the  module. Docstrings are now
shown for all special forms and special generic aliases (like 
and ). Using  with generic alias like  will
show the help for the correspondent concrete type ( in this case).

: inspect.getdoc() no longer returns docstring inherited
from the type of the object or from parent class if it is a class if it is
not defined in the object itself. In  the documentation string
is now shown not only for class, function, method etc, but for any object
that has its own  attribute.

: Fixed SpooledTemporaryFile.seek() to return the position.

: Added zscore() to statistics.NormalDist().

================================================================================

# Changelog - Library (Part 5)

: Allow random.getrandbits(0) to succeed and to return 0.

: Add random.randbytes() function and
random.Random.randbytes() method to generate random bytes.

: collections.namedtuple() now provides a human-readable
repr for its field accessors.

: The included copy of sqlite3 on Windows is now compiled with
the json extension. This allows the use of functions such as
json_object.

: Wait in KqueueSelector.select when no fds are registered

: Ensure modulefinder uses io.open_code() and
respects coding comments.

: Allow again to spawn daemon threads in subinterpreters (revert
change which denied them).

: Workers in ProcessPoolExecutor are
now spawned on demand, only when there are no available idle workers to
reuse. This optimizes startup overhead and reduces the amount of lost CPU
time to idle workers. Patch by Kyle Stanley.

: Fix a hang at fork in the logging module: the new private
_at_fork_reinit() method is now used to reinitialize locks at fork in the
child process.

: Implement traverse and clear slots in _abc._abc_data type.

: Remove deprecated symtable.SymbolTable.has_exec().

: Fix a bug in the  module that was causing
incorrectly report global variables as local. Patch by Pablo Galindo.

================================================================================

# Changelog - Library (Part 6)

: Add support for _SC_AIX_REALMEM to posix.sysconf().

: Removed the _field_types attribute of the
typing.NamedTuple class.

: Multiple inheritance with typing.NamedTuple now raises
an error instead of silently ignoring other types.

: Fixed reverting multiple patches in unittest.mock. Patcherâs
__exit__() is now never called if its __enter__() is failed.
Returning true from __exit__() silences now the exception.

: CGIHTTPRequestHandler of http.server now logs the CGI script
exit code, rather than the CGI script exit status of os.waitpid(). For
example, if the script is killed by signal 11, it now logs: âCGI script
exit code -11.â

: Improve the error message when triying to import a module using
 and incorrectly using the â.pyâ extension at the end of the
module name. Patch by Pablo Galindo.

: Add os.waitstatus_to_exitcode() function: convert a wait
status to an exit code.

: Fix threading._after_fork(): if fork was not called by a thread
spawned by threading.Thread, threading._after_fork() now creates a
_MainThread instance for _main_thread, instead of a _DummyThread instance.

================================================================================

# Changelog - Library (Part 7)

: Add a private _at_fork_reinit() method to
_thread.Lock, _thread.RLock, threading.RLock
and threading.Condition classes: reinitialize the lock at fork in
the child process, reset the lock to the unlocked state. Rename also the
private _reset_internal_locks() method of threading.Event to
_at_fork_reinit().

: Expose CAN_RAW_JOIN_FILTERS in the
 module.

: AbstractBasicAuthHandler of
urllib.request now parses all WWW-Authenticate HTTP headers and
accepts multiple challenges per header: use the realm of the first Basic
challenge.

: Removed daemon threads from concurrent.futures by adding
an internal threading._register_atexit(), which calls registered
functions prior to joining all non-daemon threads. This allows for
compatibility with subinterpreters, which donât support daemon threads.

: Fix importlib._bootstrap_external: avoid creating a new
 builtin module if itâs already available in
sys.modules, and remove redundant imports.

================================================================================

# Changelog - Library (Part 8)

: Fix os.getgrouplist(): if getgrouplist() function fails
because the group list is too small, retry with a larger group list. On
failure, the glibc implementation of getgrouplist() sets 
to the total number of groups. For other implementations, double the group
list size.

: Add time.CLOCK_TAI constant if the operating system
support it.

: In re docstring, clarify the relationship between inline and
argument compile flags.

: Update internal table of OpenSSL error codes in the 
module.

: Added  operators to
weakref.WeakValueDictionary.

: Added  operators to
weakref.WeakKeyDictionary.

: Fix linear runtime behaviour of the __getitem__ and
__setitem__ methods in
multiprocessing.shared_memory.ShareableList. This avoids
quadratic performance when iterating a ShareableList. Patch by Thomas
Krennwallner.

: Remove undocumented support for  a pathlib.Path
object via its context manager. The context manager magic methods remain,
but they are now a no-op, making  objects immutable.

: Added  operators ( and ) to
collections.ChainMap.

: Normalization of line endings in ElementTree attributes was
removed, as line endings which were replaced by entity numbers should be
preserved in original form.

================================================================================

# Changelog - Library (Part 9)

: Properly handle sys.audit() failures in
sys.set_asyncgen_hooks().

: lib2to3 now recognizes named assignment expressions (the walrus
operator, )

: In platform, delay the invocation of âuname -pâ until the
processor attribute is requested.

: inspect.getsource() now returns correct source code for
inner class with same name as module level class. Decorators are also
returned as part of source of the class. Patch by Karthikeyan
Singaravelan.

: Deprecate passing None as an argument for shlex.split()âs
 parameter.  Patch by Zackery Spytz.

: Prevent crashes when using an uninitialized
_elementtree.XMLParser object. Patch by Oren Milman.

================================================================================

# Changelog - Documentation

List:
: The pickle documentation incorrectly claimed that 
isnât called by default when unpickling.
: Updated Data model docs to include  insertion
order preservation. Patch by Furkan Onder and Samy Lahfa.
: Document PyDoc_STRVAR macro in the C-API reference.
: Some methods within xml.dom.minidom.Element class are now
better documented.

: The pickle documentation incorrectly claimed that 
isnât called by default when unpickling.

: Updated Data model docs to include  insertion
order preservation. Patch by Furkan Onder and Samy Lahfa.

: Document PyDoc_STRVAR macro in the C-API reference.

: Some methods within xml.dom.minidom.Element class are now
better documented.

================================================================================

# Changelog - Tests (Part 1)

List:
: Set expected default encoding in test_c_locale_coercion.py for
VxWorks RTOS.
: Update Travis CI configuration to OpenSSL 1.1.1f.
: Update OpenSSL to 1.1.1f in Azure Pipelines.
: Add test.support.wait_process() function.
: test.bisect_cmd now copies Python command line options like
 or . Moreover, emit a warning if test.bisect_cmd is used
with /--verbose2 option.
: Add the encoding in ftplib.FTP and
ftplib.FTP_TLS to the constructor as keyword-only and change the
default from  to  to follow .
: Use the same domain when testing make_msgid. Patch by
Batuhan Taskaya.
: Fix newline handling in doctest.testfile when loading from a
package whose loader has a get_data method. Patch by Peter Donis.

: Set expected default encoding in test_c_locale_coercion.py for
VxWorks RTOS.

: Update Travis CI configuration to OpenSSL 1.1.1f.

: Update OpenSSL to 1.1.1f in Azure Pipelines.

: Add test.support.wait_process() function.

: test.bisect_cmd now copies Python command line options like
 or . Moreover, emit a warning if test.bisect_cmd is used
with /--verbose2 option.

: Add the encoding in ftplib.FTP and
ftplib.FTP_TLS to the constructor as keyword-only and change the
default from  to  to follow .

================================================================================

# Changelog - Tests (Part 2)

: Use the same domain when testing make_msgid. Patch by
Batuhan Taskaya.

: Fix newline handling in doctest.testfile when loading from a
package whose loader has a get_data method. Patch by Peter Donis.

================================================================================

# Changelog - Build

List:
: Support single-argument form of macOS -isysroot flag.
: Fix CPython MSBuild Properties in NuGet Package
(build/native/python.props)
: Fix configure check on Solaris for âfloat word orderingâ:
sometimes, the correct âgrepâ command was not being used. Patch by Arnon
Yaari.

: Support single-argument form of macOS -isysroot flag.

: Fix CPython MSBuild Properties in NuGet Package
(build/native/python.props)

: Fix configure check on Solaris for âfloat word orderingâ:
sometimes, the correct âgrepâ command was not being used. Patch by Arnon
Yaari.

================================================================================

# Changelog - Windows

List:
: Updates Windows to OpenSSL 1.1.1f
: Ignore the Windows registry when the  option is used.

: Updates Windows to OpenSSL 1.1.1f

: Ignore the Windows registry when the  option is used.

================================================================================

# Changelog - macOS

List:
: python.org macOS installers now update the Current version
symlink of /Library/Frameworks/Python.framework/Versions for 3.9 installs.
Previously, Current was only updated for Python 2.x installs. This should
make it easier to embed Python 3 into other macOS applications.
: Update macOS installer builds to use OpenSSL 1.1.1g.

: python.org macOS installers now update the Current version
symlink of /Library/Frameworks/Python.framework/Versions for 3.9 installs.
Previously, Current was only updated for Python 2.x installs. This should
make it easier to embed Python 3 into other macOS applications.

: Update macOS installer builds to use OpenSSL 1.1.1g.

================================================================================

# Changelog - IDLE

List:
: Add a 256Ã256 pixel IDLE icon to support more modern
environments. Created by Andrew Clover. Delete the unused macOS idle.icns
icon file.
: IDLE will no longer freeze when inspect.signature fails when
fetching a calltip.

: Add a 256Ã256 pixel IDLE icon to support more modern
environments. Created by Andrew Clover. Delete the unused macOS idle.icns
icon file.

: IDLE will no longer freeze when inspect.signature fails when
fetching a calltip.

================================================================================

# Changelog - Tools/Demos

List:
: Removed the checkpyc.py tool. Please see compileall without
force mode as a potential alternative.
: Fixed translation of  in Argument Clinic.
: Fix  script exit code: it now uses
os.waitstatus_to_exitcode() to convert os.system() exit status
into an exit code.

: Removed the checkpyc.py tool. Please see compileall without
force mode as a potential alternative.

: Fixed translation of  in Argument Clinic.

: Fix  script exit code: it now uses
os.waitstatus_to_exitcode() to convert os.system() exit status
into an exit code.

================================================================================

# Changelog - C API (Part 1)

List:
: Move the  structure to the internal C API.
: Convert PyObject_IS_GC() macro to a function to hide
implementation details.
: Add the functions PyObject_GC_IsTracked() and
PyObject_GC_IsFinalized() to the public API to allow to query if
Python objects are being currently tracked or have been already finalized
by the garbage collector respectively. Patch by Pablo Galindo.
: The PyObject_NEW() macro becomes an alias to the
PyObject_New() macro, and the PyObject_NEW_VAR() macro
becomes an alias to the PyObject_NewVar() macro, to hide
implementation details. They no longer access directly the
PyTypeObject.tp_basicsize member.
: PyType_HasFeature() now always calls
PyType_GetFlags() to hide implementation details. Previously, it
accessed directly the PyTypeObject.tp_flags member when the
limited C API was not used.
: Convert the PyObject_GET_WEAKREFS_LISTPTR() macro to a
function to hide implementation details: the macro accessed directly to
the PyTypeObject.tp_weaklistoffset member.
: Convert PyObject_CheckBuffer() macro to a function to
hide implementation details: the macro accessed directly the
PyTypeObject.tp_as_buffer member.
: Always declare PyIndex_Check() as an opaque function to
hide implementation details: remove PyIndex_Check() macro. The macro
accessed directly the PyTypeObject.tp_as_number member.
: Add PyThreadState_GetID() function: get the unique
identifier of a Python thread state.

================================================================================

# Changelog - C API (Part 2)

: Move the  structure to the internal C API.

: Convert PyObject_IS_GC() macro to a function to hide
implementation details.

: Add the functions PyObject_GC_IsTracked() and
PyObject_GC_IsFinalized() to the public API to allow to query if
Python objects are being currently tracked or have been already finalized
by the garbage collector respectively. Patch by Pablo Galindo.

: The PyObject_NEW() macro becomes an alias to the
PyObject_New() macro, and the PyObject_NEW_VAR() macro
becomes an alias to the PyObject_NewVar() macro, to hide
implementation details. They no longer access directly the
PyTypeObject.tp_basicsize member.

: PyType_HasFeature() now always calls
PyType_GetFlags() to hide implementation details. Previously, it
accessed directly the PyTypeObject.tp_flags member when the
limited C API was not used.

: Convert the PyObject_GET_WEAKREFS_LISTPTR() macro to a
function to hide implementation details: the macro accessed directly to
the PyTypeObject.tp_weaklistoffset member.

: Convert PyObject_CheckBuffer() macro to a function to
hide implementation details: the macro accessed directly the
PyTypeObject.tp_as_buffer member.

================================================================================

# Changelog - C API (Part 3)

: Always declare PyIndex_Check() as an opaque function to
hide implementation details: remove PyIndex_Check() macro. The macro
accessed directly the PyTypeObject.tp_as_number member.

: Add PyThreadState_GetID() function: get the unique
identifier of a Python thread state.

================================================================================

# Changelog - Security

List:
: Disallow control characters in hostnames in http.client,
addressing CVE 2019-18348. Such potentially malicious header injection
URLs now cause a InvalidURL to be raised.

: Disallow control characters in hostnames in http.client,
addressing CVE 2019-18348. Such potentially malicious header injection
URLs now cause a InvalidURL to be raised.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Optimize pending calls in multithreaded applications. If a
thread different than the main thread schedules a pending call
(Py_AddPendingCall()), the bytecode evaluation loop is no longer
interrupted at each bytecode instruction to check for pending calls which
cannot be executed. Only the main thread can execute pending calls.
Previously, the bytecode evaluation loop was interrupted at each
instruction until the main thread executes pending calls.

bpo-1635741: Port _weakref extension module to multiphase initialization
().
bpo-1635741: Port _collections module to multiphase initialization
().
: Optimize signal handling in multithreaded applications. If a
thread different than the main thread gets a signal, the bytecode
evaluation loop is no longer interrupted at each bytecode instruction to
check for pending signals which cannot be handled. Only the main thread of
the main interpreter can handle signals.
Previously, the bytecode evaluation loop was interrupted at each
instruction until the main thread handles signals.

================================================================================

# Changelog - Core and Builtins (Part 2)

: If Py_AddPendingCall() is called in a subinterpreter,
the function is now scheduled to be called from the subinterpreter, rather
than being called from the main interpreter. Each subinterpreter now has
its own list of scheduled calls.
bpo-1635741: Port _heapq module to multiphase initialization.
bpo-1635741: Port itertools module to multiphase initialization
().
: Speed up calls to frozenset() by using the 
vectorcall calling convention. Patch by Donghee Na.
: subinterpreters: Move
_PyRuntimeState.ceval.tracing_possible to
PyInterpreterState.ceval.tracing_possible: each interpreter now has
its own variable.
: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.
bpo-1635741: Port _statistics module to multiphase initialization
().
: Use inline function to replace extension modulesâ
get_module_state macros.
: Correctly raise SyntaxError if  is used inside
non-async functions and PyCF_ALLOW_TOP_LEVEL_AWAIT is set (like in the
asyncio REPL). Patch by Pablo Galindo.
: Allow executing asynchronous comprehensions on the top level
when the PyCF_ALLOW_TOP_LEVEL_AWAIT flag is given. Patch by Batuhan
Taskaya.
: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.
: Changed list overallocation strategy. It no longer
overallocates if the new size is closer to overallocated size than to the
old size and adds padding.
: Update Unicode database to Unicode version 13.0.0.
: Clear the frames of daemon threads earlier during the Python
shutdown to call objects destructors. So âunclosed fileâ resource warnings
are now emitted for daemon threads in a more reliable way.
: Fix a bug that was causing incomplete results when calling
pathlib.Path.glob in the presence of symlinks that point to files
where the user does not have read access. Patch by Pablo Galindo and Matt
Wozniski.
: Fix PyEval_RestoreThread() random crash at exit with
daemon threads. It now accesses the _PyRuntime variable directly
instead of using tstate->interp->runtime, since  can be a
dangling pointer after Py_Finalize() has been called. Moreover,
the daemon thread now exits before trying to take the GIL.
: Fix a possible SystemError in
math.{atan2,copysign,remainder}() when the first argument cannot be
converted to a . Patch by Zackery Spytz.
: Fix race condition where threads created by PyGILState_Ensure()
could get a duplicate id.
This affects consumers of tstate->id like the contextvar caching
machinery, which could return invalid cached objects under heavy thread
load (observed in embedded scenarios).

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fixed a crash due to incorrect handling of weak references in
collections.OrderedDict classes. Patch by Pablo Galindo.
bpo-1635741: Port audioop extension module to multiphase initialization
().
: Relax  grammar restrictions to allow any valid
expression ().
: Tweak import deadlock detection code to not deadlock itself.
bpo-1635741: Port _locale extension module to multiphase initialization
().
: Optimize PyUnicode_AsUTF8() and
PyUnicode_AsUTF8AndSize() slightly when they need to create
internal UTF-8 cache.
: Fix unparsing of ext slices with no items (). Patch
by Batuhan Taskaya.
: Do not optimize annotations if âfrom __future__ import
annotationsâ is used. Patch by Pablo Galindo.
: Using NotImplemented in a boolean context has been
deprecated. Patch contributed by Josh Rosenberg.
: Donât leak environment variable __PYVENV_LAUNCHER__ into
the interpreter session on macOS.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Optimize pending calls in multithreaded applications. If a
thread different than the main thread schedules a pending call
(Py_AddPendingCall()), the bytecode evaluation loop is no longer
interrupted at each bytecode instruction to check for pending calls which
cannot be executed. Only the main thread can execute pending calls.

Previously, the bytecode evaluation loop was interrupted at each
instruction until the main thread executes pending calls.

bpo-1635741: Port _weakref extension module to multiphase initialization
().

bpo-1635741: Port _collections module to multiphase initialization
().

: Optimize signal handling in multithreaded applications. If a
thread different than the main thread gets a signal, the bytecode
evaluation loop is no longer interrupted at each bytecode instruction to
check for pending signals which cannot be handled. Only the main thread of
the main interpreter can handle signals.

Previously, the bytecode evaluation loop was interrupted at each
instruction until the main thread handles signals.

================================================================================

# Changelog - Core and Builtins (Part 5)

: If Py_AddPendingCall() is called in a subinterpreter,
the function is now scheduled to be called from the subinterpreter, rather
than being called from the main interpreter. Each subinterpreter now has
its own list of scheduled calls.

bpo-1635741: Port _heapq module to multiphase initialization.

bpo-1635741: Port itertools module to multiphase initialization
().

: Speed up calls to frozenset() by using the 
vectorcall calling convention. Patch by Donghee Na.

: subinterpreters: Move
_PyRuntimeState.ceval.tracing_possible to
PyInterpreterState.ceval.tracing_possible: each interpreter now has
its own variable.

: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.

bpo-1635741: Port _statistics module to multiphase initialization
().

: Use inline function to replace extension modulesâ
get_module_state macros.

: Correctly raise SyntaxError if  is used inside
non-async functions and PyCF_ALLOW_TOP_LEVEL_AWAIT is set (like in the
asyncio REPL). Patch by Pablo Galindo.

: Allow executing asynchronous comprehensions on the top level
when the PyCF_ALLOW_TOP_LEVEL_AWAIT flag is given. Patch by Batuhan
Taskaya.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Speed up calls to  by using the 
vectorcall calling convention. Patch by Donghee Na.

: Changed list overallocation strategy. It no longer
overallocates if the new size is closer to overallocated size than to the
old size and adds padding.

: Update Unicode database to Unicode version 13.0.0.

: Clear the frames of daemon threads earlier during the Python
shutdown to call objects destructors. So âunclosed fileâ resource warnings
are now emitted for daemon threads in a more reliable way.

: Fix a bug that was causing incomplete results when calling
pathlib.Path.glob in the presence of symlinks that point to files
where the user does not have read access. Patch by Pablo Galindo and Matt
Wozniski.

: Fix PyEval_RestoreThread() random crash at exit with
daemon threads. It now accesses the _PyRuntime variable directly
instead of using tstate->interp->runtime, since  can be a
dangling pointer after Py_Finalize() has been called. Moreover,
the daemon thread now exits before trying to take the GIL.

: Fix a possible SystemError in
math.{atan2,copysign,remainder}() when the first argument cannot be
converted to a . Patch by Zackery Spytz.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Fix race condition where threads created by PyGILState_Ensure()
could get a duplicate id.

This affects consumers of tstate->id like the contextvar caching
machinery, which could return invalid cached objects under heavy thread
load (observed in embedded scenarios).

: Fixed a crash due to incorrect handling of weak references in
collections.OrderedDict classes. Patch by Pablo Galindo.

bpo-1635741: Port audioop extension module to multiphase initialization
().

: Relax  grammar restrictions to allow any valid
expression ().

: Tweak import deadlock detection code to not deadlock itself.

bpo-1635741: Port _locale extension module to multiphase initialization
().

: Optimize PyUnicode_AsUTF8() and
PyUnicode_AsUTF8AndSize() slightly when they need to create
internal UTF-8 cache.

: Fix unparsing of ext slices with no items (). Patch
by Batuhan Taskaya.

: Do not optimize annotations if âfrom __future__ import
annotationsâ is used. Patch by Pablo Galindo.

: Using NotImplemented in a boolean context has been
deprecated. Patch contributed by Josh Rosenberg.

: Donât leak environment variable __PYVENV_LAUNCHER__ into
the interpreter session on macOS.

================================================================================

# Changelog - Library (Part 1)

List:
: Add zipfile.Path to  in the 
module.
: Improved error messages for validation of ast.Constant
nodes. Patch by Batuhan Taskaya.
: __module__ of the AST node classes is now set to âastâ
instead of â_astâ. Added docstrings for dummy AST node classes and
deprecated attributes.
: uuid.getnode() now skips IPv6 addresses with the same
string length than a MAC address (17 characters): only use MAC addresses.
: Deprecated ast.AugLoad and ast.AugStore node classes
because they are no longer used.
: Ensure bin/python3.# is always present in virtual
environments on POSIX platforms - by Anthony Sottile.
: Deprecated  node class because itâs no longer
used. Patch by Batuhan Taskaya.
: Ensure all workers exit when finalizing a
multiprocessing.Pool implicitly via the module finalization
handlers of multiprocessing. This fixes a deadlock situation that can be
experienced when the Pool is not properly finalized via the context
manager or a call to multiprocessing.Pool.terminate. Patch by Batuhan
Taskaya and Pablo Galindo.
: sys.settrace(), sys.setprofile() and _lsprof.Profiler.enable()
now properly report PySys_Audit() error if âsys.setprofileâ or
âsys.settraceâ audit event is denied.
: AIX: Fix _aix_support module when the subprocess is not
available, when building Python from scratch. It now uses new private
_bootsubprocess module, rather than having two implementations depending
if subprocess is available or not. So _aix_support.aix_platform() result
is now the same if subprocess is available or not.
: collections.OrderedDict now implements  and
 ().
: The column name found in sqlite3.Cursor.description is now
truncated on the first â[â only if the PARSE_COLNAMES option is set.
: Ensure unittest.mock.AsyncMock.await_args_list has call
objects in the order of awaited arguments instead of using
unittest.mock.Mock.call_args which has the last value of the call.
Patch by Karthikeyan Singaravelan.
: Updated os.environ and os.environb to support
âs merge () and update () operators.
: The  module now invokes  via the 
module. Hence it is no longer tightly coupled with the internal API of the
bundled  version, allowing easier updates to a newer 
version both internally and for distributors.
: Fix the random.Random.seed() method when a 
is passed as the seed.
: More reliable use of os.scandir() in Path.glob(). It no
longer emits a ResourceWarning when interrupted.
: multiprocessing now supports abstract socket addresses
(if abstract sockets are supported in the running platform). When creating
arbitrary addresses (like when default-constructing
multiprocessing.connection.Listener objects) abstract sockets are
preferred to avoid the case when the temporary-file-generated address is
too large for an AF_UNIX socket address. Patch by Pablo Galindo.
: ast.dump() no longer outputs optional fields and
attributes with default values. The default values for optional fields and
attributes of AST nodes are now set as class attributes (e.g.
Constant.kind is set to ).
: Fixed ast.unparse() for extended slices containing a
single element (e.g. ). Remove redundant tuples when index with
a tuple (e.g.  ).
: Fix  to catch BrokenPipeError. Patch by
Donghee Na.
: Avoid a possible âRuntimeError: dictionary changed size during
iterationâ from inspect.getmodule() when it tried to loop through
sys.modules.
: Revert â: open() no longer accept âUâ in file modeâ.
The âUâ mode of open() is kept in Python 3.9 to ease transition from
Python 2.7, but will be removed in Python 3.10.
: The hosts method on 32-bit prefix length IPv4Networks and
128-bit prefix IPv6Networks now returns a list containing the single
Address instead of an empty list.
: Add getConnection method to logging HTTPHandler to enable
custom connections.
: Reimplement distutils.spawn.spawn function with the
subprocess module.
: Add âwithout-decimal-contextvar build option.  This enables a
thread-local rather than a coroutine local context.
: collections.defaultdict now implements 
().
: Fix runpy.run_path() when using pathlike objects
: Change inspect.Signature.parameters back to
collections.OrderedDict. This was changed to  in Python
3.9.0a4.
: Refactor queue_manager in
concurrent.futures.ProcessPoolExecutor to make it easier to
maintain.
: Fix AttributeError when calling get_stack on a PyAsyncGenObject
Task
: The compileall.compile_dir() functionâs  parameter
and the compileall command line flag  no longer write the wrong
pathname to the generated pyc file for submodules beneath the root of the
directory tree being compiled.  This fixes a regression introduced with
Python 3.5.
: types.MappingProxyType objects now support the merge
() operator from .
: The  module now ignores the
PYTHONCASEOK environment variable when the  or
 command line options are being used.
: Remove tempfile.SpooledTemporaryFile.softspace() as files
no longer have the  attribute in Python 3. Patch by Shantanu.
: Improve pathlib.Path compatibility on zipfile.Path and correct
performance degradation as found in zipp 3.0.
: Keep ASDL signatures in the docstrings for  nodes. Patch
by Batuhan Taskaya
: Deprecated  node class because itâs no longer
used. Patch by Batuhan Taskaya.
: Add thread_name_prefix to default asyncio executor
: Fix handling of header in
urllib.request.AbstractDigestAuthHandler when the optional
 parameter is not present.
: HTTP status codes  EARLY_HINTS and   are
added to http.HTTPStatus. Patch by Donghee Na.
: Adding HTTP status 418 âIâm a Teapotâ to HTTPStatus in http
library. Patch by Ross Rhodes.
: Remove default value from  parameter of
xml.etree.ElementTree.TreeBuilder.start() for consistency between
Python and C implementations.
: Open issue in the BPO indicated a desire to make the
implementation of codecs.open() at parity with io.open(), which implements
a try/except to assure file stream gets closed before an exception is
raised.
: Added starred expressions support to  and 
statements for . Patch by Vlad Emelianov.
: When using minidom module to generate XML documents the ability
to add Standalone Document Declaration is added. All the changes are made
to generate a document in compliance with Extensible Markup Language (XML)
1.0 (Fifth Edition) W3C Recommendation (available here:
https://www.w3.org/TR/xml/#sec-prolog-dtd).
: Add support for scoped IPv6 addresses to .
Patch by Oleksandr Pavliuk.
: Simplified AST for subscription. Simple indices are now
represented by their value, extended slices are represented as tuples.
 classes  and  are considered deprecated
and will be removed in future Python versions. In the meantime,
Index(value) now returns a  itself, ExtSlice(slices)
returns Tuple(slices, .

================================================================================

# Changelog - Library (Part 2)

: Add zipfile.Path to  in the 
module.

: Improved error messages for validation of ast.Constant
nodes. Patch by Batuhan Taskaya.

: __module__ of the AST node classes is now set to âastâ
instead of â_astâ. Added docstrings for dummy AST node classes and
deprecated attributes.

: uuid.getnode() now skips IPv6 addresses with the same
string length than a MAC address (17 characters): only use MAC addresses.

: Deprecated ast.AugLoad and ast.AugStore node classes
because they are no longer used.

: Ensure bin/python3.# is always present in virtual
environments on POSIX platforms - by Anthony Sottile.

: Deprecated  node class because itâs no longer
used. Patch by Batuhan Taskaya.

: Ensure all workers exit when finalizing a
multiprocessing.Pool implicitly via the module finalization
handlers of multiprocessing. This fixes a deadlock situation that can be
experienced when the Pool is not properly finalized via the context
manager or a call to multiprocessing.Pool.terminate. Patch by Batuhan
Taskaya and Pablo Galindo.

: sys.settrace(), sys.setprofile() and _lsprof.Profiler.enable()
now properly report PySys_Audit() error if âsys.setprofileâ or
âsys.settraceâ audit event is denied.

================================================================================

# Changelog - Library (Part 3)

: AIX: Fix _aix_support module when the subprocess is not
available, when building Python from scratch. It now uses new private
_bootsubprocess module, rather than having two implementations depending
if subprocess is available or not. So _aix_support.aix_platform() result
is now the same if subprocess is available or not.

: collections.OrderedDict now implements  and
 ().

: The column name found in sqlite3.Cursor.description is now
truncated on the first â[â only if the PARSE_COLNAMES option is set.

: Ensure unittest.mock.AsyncMock.await_args_list has call
objects in the order of awaited arguments instead of using
unittest.mock.Mock.call_args which has the last value of the call.
Patch by Karthikeyan Singaravelan.

: Updated os.environ and os.environb to support
âs merge () and update () operators.

: The  module now invokes  via the 
module. Hence it is no longer tightly coupled with the internal API of the
bundled  version, allowing easier updates to a newer 
version both internally and for distributors.

: Fix the random.Random.seed() method when a 
is passed as the seed.

: More reliable use of os.scandir() in Path.glob(). It no
longer emits a ResourceWarning when interrupted.

================================================================================

# Changelog - Library (Part 4)

: multiprocessing now supports abstract socket addresses
(if abstract sockets are supported in the running platform). When creating
arbitrary addresses (like when default-constructing
multiprocessing.connection.Listener objects) abstract sockets are
preferred to avoid the case when the temporary-file-generated address is
too large for an AF_UNIX socket address. Patch by Pablo Galindo.

: ast.dump() no longer outputs optional fields and
attributes with default values. The default values for optional fields and
attributes of AST nodes are now set as class attributes (e.g.
Constant.kind is set to ).

: Fixed ast.unparse() for extended slices containing a
single element (e.g. ). Remove redundant tuples when index with
a tuple (e.g.  ).

: Fix  to catch BrokenPipeError. Patch by
Donghee Na.

: Avoid a possible âRuntimeError: dictionary changed size during
iterationâ from inspect.getmodule() when it tried to loop through
sys.modules.

: Revert â: open() no longer accept âUâ in file modeâ.
The âUâ mode of open() is kept in Python 3.9 to ease transition from
Python 2.7, but will be removed in Python 3.10.

================================================================================

# Changelog - Library (Part 5)

: The hosts method on 32-bit prefix length IPv4Networks and
128-bit prefix IPv6Networks now returns a list containing the single
Address instead of an empty list.

: Add getConnection method to logging HTTPHandler to enable
custom connections.

: Reimplement distutils.spawn.spawn function with the
subprocess module.

: Add âwithout-decimal-contextvar build option.  This enables a
thread-local rather than a coroutine local context.

: collections.defaultdict now implements 
().

: Fix runpy.run_path() when using pathlike objects

: Change inspect.Signature.parameters back to
collections.OrderedDict. This was changed to  in Python
3.9.0a4.

: Refactor queue_manager in
concurrent.futures.ProcessPoolExecutor to make it easier to
maintain.

: Fix AttributeError when calling get_stack on a PyAsyncGenObject
Task

: The compileall.compile_dir() functionâs  parameter
and the compileall command line flag  no longer write the wrong
pathname to the generated pyc file for submodules beneath the root of the
directory tree being compiled.  This fixes a regression introduced with
Python 3.5.

: types.MappingProxyType objects now support the merge
() operator from .

================================================================================

# Changelog - Library (Part 6)

: The  module now ignores the
PYTHONCASEOK environment variable when the  or
 command line options are being used.

: Remove tempfile.SpooledTemporaryFile.softspace() as files
no longer have the  attribute in Python 3. Patch by Shantanu.

: Improve pathlib.Path compatibility on zipfile.Path and correct
performance degradation as found in zipp 3.0.

: Keep ASDL signatures in the docstrings for  nodes. Patch
by Batuhan Taskaya

: Deprecated  node class because itâs no longer
used. Patch by Batuhan Taskaya.

: Add thread_name_prefix to default asyncio executor

: Fix handling of header in
urllib.request.AbstractDigestAuthHandler when the optional
 parameter is not present.

: HTTP status codes  EARLY_HINTS and   are
added to http.HTTPStatus. Patch by Donghee Na.

: Adding HTTP status 418 âIâm a Teapotâ to HTTPStatus in http
library. Patch by Ross Rhodes.

: Remove default value from  parameter of
xml.etree.ElementTree.TreeBuilder.start() for consistency between
Python and C implementations.

: Open issue in the BPO indicated a desire to make the
implementation of codecs.open() at parity with io.open(), which implements
a try/except to assure file stream gets closed before an exception is
raised.

================================================================================

# Changelog - Library (Part 7)

: Added starred expressions support to  and 
statements for . Patch by Vlad Emelianov.

: When using minidom module to generate XML documents the ability
to add Standalone Document Declaration is added. All the changes are made
to generate a document in compliance with Extensible Markup Language (XML)
1.0 (Fifth Edition) W3C Recommendation (available here:
https://www.w3.org/TR/xml/#sec-prolog-dtd).

: Add support for scoped IPv6 addresses to .
Patch by Oleksandr Pavliuk.

: Simplified AST for subscription. Simple indices are now
represented by their value, extended slices are represented as tuples.
 classes  and  are considered deprecated
and will be removed in future Python versions. In the meantime,
Index(value) now returns a  itself, ExtSlice(slices)
returns Tuple(slices, .

================================================================================

# Changelog - Documentation

List:
: Updated the Language Reference for .
: Change âstringâ to âspecificationâ in format doc.
: The language reference no longer restricts default class
namespaces to dicts only.
: Fix misleading documentation about mixed-type numeric
comparisons.
: Update  documentation to reflect additions in
Python 3.8
: Changed operand name of MAKE_FUNCTION from  to
 for module

: Updated the Language Reference for .

: Change âstringâ to âspecificationâ in format doc.

: The language reference no longer restricts default class
namespaces to dicts only.

: Fix misleading documentation about mixed-type numeric
comparisons.

: Update  documentation to reflect additions in
Python 3.8

: Changed operand name of MAKE_FUNCTION from  to
 for module

================================================================================

# Changelog - Tests

List:
: test_gdb now skips tests if it detects that gdb failed to read
debug information because the Python binary is optimized.
: test_site.test_startup_imports() is now skipped if a path
of  contains a  file.
: Do not fail test_shutil test_chown test when uid or gid of user
cannot be resolved to a name.
: test_subprocess.test_user() now skips the test on an user name
if the user name doesnât exist. For example, skip the test if the user
ânobodyâ doesnât exist on Linux.

: test_gdb now skips tests if it detects that gdb failed to read
debug information because the Python binary is optimized.

: test_site.test_startup_imports() is now skipped if a path
of  contains a  file.

: Do not fail test_shutil test_chown test when uid or gid of user
cannot be resolved to a name.

: test_subprocess.test_user() now skips the test on an user name
if the user name doesnât exist. For example, skip the test if the user
ânobodyâ doesnât exist on Linux.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix build with DTrace but without additional DFLAGS.
: setup.py now uses a basic implementation of the
subprocess module if the subprocess module is not available:
before required C extension modules are built.
bpo-1294959: Add --with-platlibdir option to the configure script:
name of the platform-specific library directory, stored in the new
sys.platlibdir attribute. It is used to build the path of
platform-specific extension modules and the path of the standard library.
It is equal to  on most platforms. On Fedora and SuSE, it is
equal to  on 64-bit platforms. Patch by Jan MatÄjek, MatÄj
Cepl, Charalampos Stratakis and Victor Stinner.

: Fix build with DTrace but without additional DFLAGS.

: setup.py now uses a basic implementation of the
subprocess module if the subprocess module is not available:
before required C extension modules are built.

================================================================================

# Changelog - Build (Part 2)

bpo-1294959: Add --with-platlibdir option to the configure script:
name of the platform-specific library directory, stored in the new
sys.platlibdir attribute. It is used to build the path of
platform-specific extension modules and the path of the standard library.
It is equal to  on most platforms. On Fedora and SuSE, it is
equal to  on 64-bit platforms. Patch by Jan MatÄjek, MatÄj
Cepl, Charalampos Stratakis and Victor Stinner.

================================================================================

# Changelog - Windows (Part 1)

List:
: Ensures the required vcruntime140.dll is included in
install packages.
: Avoid hang when computer is hibernated whilst waiting for a
mutex (for lock-related objects from ) around 49-day
uptime.
:  will no longer statically link
vcruntime140.dll when a redistributable version is unavailable.
All future releases of CPython will include a copy of this DLL to ensure
distributed extensions can continue to load.
: Update Windows builds to use SQLite 3.31.1
: Update Windows release build machines to Visual Studio 2019
(MSVC 14.2).
: Package for nuget.org now includes repository reference and
bundled icon image.

: Ensures the required vcruntime140.dll is included in
install packages.

: Avoid hang when computer is hibernated whilst waiting for a
mutex (for lock-related objects from ) around 49-day
uptime.

:  will no longer statically link
vcruntime140.dll when a redistributable version is unavailable.
All future releases of CPython will include a copy of this DLL to ensure
distributed extensions can continue to load.

: Update Windows builds to use SQLite 3.31.1

: Update Windows release build machines to Visual Studio 2019
(MSVC 14.2).

================================================================================

# Changelog - Windows (Part 2)

: Package for nuget.org now includes repository reference and
bundled icon image.

================================================================================

# Changelog - macOS

List:
: Update macOS builds to use SQLite 3.31.1

: Update macOS builds to use SQLite 3.31.1

================================================================================

# Changelog - IDLE

List:
: For âGo to Lineâ, use a Query box subclass with IDLE standard
behavior and improved error checking.
: Since clicking to get an IDLE context menu moves the cursor,
any text selection should be and now is cleared.
: Edit âGo to lineâ now clears any selection, preventing
accidental deletion. It also updates Ln and Col on the status bar.
: Selecting code context lines no longer causes a jump.

: For âGo to Lineâ, use a Query box subclass with IDLE standard
behavior and improved error checking.

: Since clicking to get an IDLE context menu moves the cursor,
any text selection should be and now is cleared.

: Edit âGo to lineâ now clears any selection, preventing
accidental deletion. It also updates Ln and Col on the status bar.

: Selecting code context lines no longer causes a jump.

================================================================================

# Changelog - Tools/Demos

List:
: Port python-gdb.py to FreeBSD. python-gdb.py now checks for
âtake_gilâ function name to check if a frame tries to acquire the GIL,
instead of checking for âpthread_cond_timedwaitâ which is specific to
Linux and can be a different condition than the GIL.
: Added support to fix getproxies in the
lib2to3.fixes.fix_urllib module. Patch by JosÃ© Roberto Meza
Cabrera.

: Port python-gdb.py to FreeBSD. python-gdb.py now checks for
âtake_gilâ function name to check if a frame tries to acquire the GIL,
instead of checking for âpthread_cond_timedwaitâ which is specific to
Linux and can be a different condition than the GIL.

: Added support to fix getproxies in the
lib2to3.fixes.fix_urllib module. Patch by JosÃ© Roberto Meza
Cabrera.

================================================================================

# Changelog - C API (Part 1)

List:
: Add PyModule_AddType() helper function: add a type to a
module. Patch by Donghee Na.
: Remove _PyRuntime.getframe hook and remove
_PyThreadState_GetFrame macro which was an alias to
_PyRuntime.getframe. They were only exposed by the internal C API.
Remove also PyThreadFrameGetter type.
: Add PyThreadState_GetFrame() function: get the current
frame of a Python thread state.
: Add _PyArg_NoKwnames helper function. Patch by Donghee Na.
: Add PyThreadState_GetInterpreter(): get the interpreter
of a Python thread state.
: Add PyInterpreterState_Get() function to the limited C
API.
: If PySys_Audit() fails in PyEval_SetProfile()
or PyEval_SetTrace(), log the error as an unraisable exception.
: Move the static inline function flavor of
Py_EnterRecursiveCall() and Py_LeaveRecursiveCall() to the internal C API:
they access PyThreadState attributes. The limited C API provides regular
functions which hide implementation details.
: Py_TRASHCAN_BEGIN_CONDITION and Py_TRASHCAN_END macro no longer
access PyThreadState attributes, but call new private _PyTrash_begin() and
_PyTrash_end() functions which hide implementation details.
: PyDescr_NewMethod() and PyCFunction_NewEx() now
include the method name in the SystemError âbad call flagsâ error message
to ease debug.
: Deprecated PyEval_InitThreads() and
PyEval_ThreadsInitialized(). Calling
PyEval_InitThreads() now does nothing.
: Py_UNREACHABLE is now implemented with
__builtin_unreachable() and analogs in release mode.
: PyNumber_ToBase() now raises a SystemError
instead of crashing when called with invalid base.
: The Py_FatalError() function is replaced with a macro
which logs automatically the name of the current function, unless the
Py_LIMITED_API macro is defined.
: Extension modules: m_traverse,
 and 
functions of PyModuleDef are no longer called if the module
state was requested but is not allocated yet. This is the case immediately
after the module is created and before the module is executed
(Py_mod_exec function). More precisely, these functions are not
called if  is greater than 0 and the module
state (as returned by PyModule_GetState()) is .
Extension modules without module state (  ) are not affected.

================================================================================

# Changelog - C API (Part 2)

: Fixed segfault in Py_BuildValue() called with a format
containing â#â and undefined PY_SSIZE_T_CLEAN whwn an exception is set.
: Add a private API to get and set the frame evaluation function:
add _PyInterpreterState_GetEvalFrameFunc() and
_PyInterpreterState_SetEvalFrameFunc() C functions. The
_PyFrameEvalFunction function type now takes a 
parameter.

: Add PyModule_AddType() helper function: add a type to a
module. Patch by Donghee Na.

: Remove _PyRuntime.getframe hook and remove
_PyThreadState_GetFrame macro which was an alias to
_PyRuntime.getframe. They were only exposed by the internal C API.
Remove also PyThreadFrameGetter type.

: Add PyThreadState_GetFrame() function: get the current
frame of a Python thread state.

: Add _PyArg_NoKwnames helper function. Patch by Donghee Na.

: Add PyThreadState_GetInterpreter(): get the interpreter
of a Python thread state.

: Add PyInterpreterState_Get() function to the limited C
API.

: If PySys_Audit() fails in PyEval_SetProfile()
or PyEval_SetTrace(), log the error as an unraisable exception.

================================================================================

# Changelog - C API (Part 3)

: Move the static inline function flavor of
Py_EnterRecursiveCall() and Py_LeaveRecursiveCall() to the internal C API:
they access PyThreadState attributes. The limited C API provides regular
functions which hide implementation details.

: Py_TRASHCAN_BEGIN_CONDITION and Py_TRASHCAN_END macro no longer
access PyThreadState attributes, but call new private _PyTrash_begin() and
_PyTrash_end() functions which hide implementation details.

: PyDescr_NewMethod() and PyCFunction_NewEx() now
include the method name in the SystemError âbad call flagsâ error message
to ease debug.

: Deprecated PyEval_InitThreads() and
PyEval_ThreadsInitialized(). Calling
PyEval_InitThreads() now does nothing.

: Py_UNREACHABLE is now implemented with
__builtin_unreachable() and analogs in release mode.

: PyNumber_ToBase() now raises a SystemError
instead of crashing when called with invalid base.

: The Py_FatalError() function is replaced with a macro
which logs automatically the name of the current function, unless the
Py_LIMITED_API macro is defined.

================================================================================

# Changelog - C API (Part 4)

: Extension modules: m_traverse,
 and 
functions of PyModuleDef are no longer called if the module
state was requested but is not allocated yet. This is the case immediately
after the module is created and before the module is executed
(Py_mod_exec function). More precisely, these functions are not
called if  is greater than 0 and the module
state (as returned by PyModule_GetState()) is .

Extension modules without module state (  ) are not affected.

: Fixed segfault in Py_BuildValue() called with a format
containing â#â and undefined PY_SSIZE_T_CLEAN whwn an exception is set.

: Add a private API to get and set the frame evaluation function:
add _PyInterpreterState_GetEvalFrameFunc() and
_PyInterpreterState_SetEvalFrameFunc() C functions. The
_PyFrameEvalFunction function type now takes a 
parameter.

================================================================================

# Changelog - Security

List:
: Add audit events to functions in , , ,
, ,  and .
: Avoid unsafe DLL load at startup on Windows 7 and earlier.
: Add audit events to command execution functions in os and pty
modules.

: Add audit events to functions in , , ,
, ,  and .

: Avoid unsafe DLL load at startup on Windows 7 and earlier.

: Add audit events to command execution functions in os and pty
modules.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix a use-after-free in the single inheritance path of
issubclass(), when the  of an object has a single
reference, and so does its first item. Patch by Yonatan Goldschmidt.
: Update clinic tool to use Py_IS_TYPE(). Patch by
Donghee Na.
: Enable use of os.chroot() on HP-UX systems.
: Add Py_IS_TYPE() static inline function to check
whether the object  type is .
: Fix regression caused by fix for , that prevented
calling  on an async generator that had already been closed or
exhausted.
: Change the ending column offset of  nodes
constructed in ast_for_dotted_name to point at the end of the current
node and not at the end of the last  node.
bpo-1635741: Port _crypt extension module to multiphase initialization
().
bpo-1635741: Port _contextvars extension module to multiphase
initialization ().
: Fix segfault in readinto() method on closed BufferedReader.
: Fix time.localtime() on 64-bit AIX  to support years
before 1902 and after 2038. Patch by M Felt.
: Fix a reference cycle in the C Pickler that was preventing the
garbage collection of deleted, pickled objects.
: Fixed a possible crash in list.__contains__() when a list
is changed during comparing items. Patch by Donghee Na.
: floor division of float operation now has a better
performance. Also the message of ZeroDivisionError for this
operation is updated. Patch by Donghee Na.
bpo-1635741: Port _codecs extension module to multiphase initialization
().
bpo-1635741: Port _bz2 extension module to multiphase initialization
().
bpo-1635741: Port _abc extension module to multiphase initialization
().
: Replace two complex bytecodes for building dicts with two
simpler ones. The new bytecodes DICT_MERGE and DICT_UPDATE have
been added The old bytecodes BUILD_MAP_UNPACK and
BUILD_MAP_UNPACK_WITH_CALL have been removed.
: Syntax errors raised in the tokenizer now always set correct
âtextâ and âoffsetâ attributes.
: Drop the GIL during large bytes.join operations. Patch by
Bruce Merry.
: Fix DTrace build issues on FreeBSD. Patch by David Carlier.
: Speed up calls to  by about 30%, by using the PEP
590 vectorcall calling convention. Patch by Mark Shannon.
:  (and collections.UserDict) objects now
support PEP 584âs merge () and update () operators. Patch by
Brandt Bucher.
: Optimized the idiom for assignment a temporary variable in
comprehensions. Now     in comprehensions is as fast as a
simple assignment   .

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix a use-after-free in the single inheritance path of
issubclass(), when the  of an object has a single
reference, and so does its first item. Patch by Yonatan Goldschmidt.

: Update clinic tool to use Py_IS_TYPE(). Patch by
Donghee Na.

: Enable use of os.chroot() on HP-UX systems.

: Add Py_IS_TYPE() static inline function to check
whether the object  type is .

: Fix regression caused by fix for , that prevented
calling  on an async generator that had already been closed or
exhausted.

: Change the ending column offset of  nodes
constructed in ast_for_dotted_name to point at the end of the current
node and not at the end of the last  node.

bpo-1635741: Port _crypt extension module to multiphase initialization
().

bpo-1635741: Port _contextvars extension module to multiphase
initialization ().

: Fix segfault in readinto() method on closed BufferedReader.

: Fix time.localtime() on 64-bit AIX  to support years
before 1902 and after 2038. Patch by M Felt.

: Fix a reference cycle in the C Pickler that was preventing the
garbage collection of deleted, pickled objects.

: Fixed a possible crash in list.__contains__() when a list
is changed during comparing items. Patch by Donghee Na.

================================================================================

# Changelog - Core and Builtins (Part 3)

: floor division of float operation now has a better
performance. Also the message of ZeroDivisionError for this
operation is updated. Patch by Donghee Na.

bpo-1635741: Port _codecs extension module to multiphase initialization
().

bpo-1635741: Port _bz2 extension module to multiphase initialization
().

bpo-1635741: Port _abc extension module to multiphase initialization
().

: Replace two complex bytecodes for building dicts with two
simpler ones. The new bytecodes DICT_MERGE and DICT_UPDATE have
been added The old bytecodes BUILD_MAP_UNPACK and
BUILD_MAP_UNPACK_WITH_CALL have been removed.

: Syntax errors raised in the tokenizer now always set correct
âtextâ and âoffsetâ attributes.

: Drop the GIL during large bytes.join operations. Patch by
Bruce Merry.

: Fix DTrace build issues on FreeBSD. Patch by David Carlier.

: Speed up calls to  by about 30%, by using the PEP
590 vectorcall calling convention. Patch by Mark Shannon.

:  (and collections.UserDict) objects now
support PEP 584âs merge () and update () operators. Patch by
Brandt Bucher.

: Optimized the idiom for assignment a temporary variable in
comprehensions. Now     in comprehensions is as fast as a
simple assignment   .

================================================================================

# Changelog - Library (Part 1)

List:
: Fix IndexError when trying to decode an invalid string
with punycode codec.
: Remove obsolete check for  in
bdb.Bdb.format_stack_entry.
: Expanded math.gcd() and math.lcm() to handle
multiple arguments.
: Fix a regression where the C pickle module wouldnât allow
unpickling from a file-like object that doesnât expose a readinto()
method.
: Raise io.UnsupportedOperation in
io.BufferedReader.truncate() when it is called on a read-only
io.BufferedReader instance.
: Add math.lcm() function: least common multiple.
: Revert âDo not expose abstract collection classes in the
collections moduleâ change (). Aliases to ABC like
collections.Mapping are kept in Python 3.9 to ease transition from Python
2.7, but will be removed in Python 3.10.
: Fix hanging ProcessPoolExcutor on shutdown(wait=False) when
a task has failed pickling.
: Fixed TypedDict totality check for inherited keys.
: Fixed starting position of AST for expressions like ,
 and .
: The  and  modules now use the
 module to get the path to the Python standard library, to
support uncommon installation path like /usr/lib64/python3.9/ on
Fedora. Patch by Jan MatÄjek.
: Collections.deque now holds strong references during
deque.__contains__ and deque.count, fixing crashes.
: The distutils  command is deprecated in Python
3.9, use bdist_wheel (wheel packages) instead.
: Improved performance of zipfile.Path for files with a large
number of entries. Also improved performance and fixed minor issue as
published with importlib_metadata 1.5.
: Fix regression in fractions.Fraction if the numerator
and/or the denominator is an  subclass. The math.gcd()
function is now used to normalize the  and denominator.
math.gcd() always return a  type. Previously, the GCD
type depended on  and denominator.
: Added audit for , os.fwalk(),
pathlib.Path.glob() and pathlib.Path.rglob().
: Remove unused, undocumented argument  from
uuid.getnode()
: sys.audit() is now called only once per call of
glob.glob() and glob.iglob().
: Fix a regression in ArgumentParser where
allow_abbrev=False was ignored for long options that used a prefix
character other than â-â.
: Striped whitespace from docstring before returning it from
unittest.case.shortDescription().
: A new function resolve_name has been added to the
 module. This resolves a string of the form  or
 to an object. In the example,  is a package/module
and  is an object within that package/module reached via recursive
attribute access.
: The binascii.crc_hqx() function is no longer deprecated.
: Mark typing.IO.closed as a property
: Add typing.Annotated and include_extras parameter
to typing.get_type_hints() as part of . Patch by Till
Varoquaux, documentation by Till Varoquaux and Konstantin Kashin.
: Fix a bug in unittest.mock.create_autospec() that would
complain about the wrong number of arguments for custom descriptors
defined in an extension module returning functions.
: Mock fully resets child objects on reset_mock(). Patch by
Vegard Stikbakke
: Allow AsyncMock to correctly patch static/class methods
: Implement PEP-489 algorithm for non-ascii âPyInit_â¦â symbol
names in distutils to make it export the correct init symbol also on
Windows.
: Omit  and  fields for non-device files
in  archives, enabling bit-for-bit compatibility with GNU
.
: Added a new cancel_futures parameter to
concurrent.futures.Executor.shutdown() that cancels all pending
futures which have not started running, instead of waiting for them to
complete before shutting down the executor.
: bool(fraction.Fraction) now returns a boolean even if
(numerator != 0) does not return a boolean (ex: numpy number).
: Remove support for   asyncio.lock): and 
  asyncio.lock):.  The same is correct for
asyncio.Condition and asyncio.Semaphore.
: Ensure, if  is supplied to
unittest.mock.MagicMock, it is used to calculate return values
for the magic methods instead of using the default return values. Patch by
Karthikeyan Singaravelan.
: inspect.Signature.parameters and
inspect.BoundArguments.arguments are now dicts instead of
OrderedDicts. Patch contributed by RÃ©mi Lapeyre.
: Fix sys.exit() and sys.exit(None) exit code propagation when
used in multiprocessing.Process.
: * Add  function to . * Use
dict.clear to clear the cache. * Refactoring  function and
checkcache function.

================================================================================

# Changelog - Library (Part 2)

: Fix IndexError when trying to decode an invalid string
with punycode codec.

: Remove obsolete check for  in
bdb.Bdb.format_stack_entry.

: Expanded math.gcd() and math.lcm() to handle
multiple arguments.

: Fix a regression where the C pickle module wouldnât allow
unpickling from a file-like object that doesnât expose a readinto()
method.

: Raise io.UnsupportedOperation in
io.BufferedReader.truncate() when it is called on a read-only
io.BufferedReader instance.

: Add math.lcm() function: least common multiple.

: Revert âDo not expose abstract collection classes in the
collections moduleâ change (). Aliases to ABC like
collections.Mapping are kept in Python 3.9 to ease transition from Python
2.7, but will be removed in Python 3.10.

: Fix hanging ProcessPoolExcutor on shutdown(wait=False) when
a task has failed pickling.

: Fixed TypedDict totality check for inherited keys.

: Fixed starting position of AST for expressions like ,
 and .

: The  and  modules now use the
 module to get the path to the Python standard library, to
support uncommon installation path like /usr/lib64/python3.9/ on
Fedora. Patch by Jan MatÄjek.

================================================================================

# Changelog - Library (Part 3)

: Collections.deque now holds strong references during
deque.__contains__ and deque.count, fixing crashes.

: The distutils  command is deprecated in Python
3.9, use bdist_wheel (wheel packages) instead.

: Improved performance of zipfile.Path for files with a large
number of entries. Also improved performance and fixed minor issue as
published with importlib_metadata 1.5.

: Fix regression in fractions.Fraction if the numerator
and/or the denominator is an  subclass. The math.gcd()
function is now used to normalize the  and denominator.
math.gcd() always return a  type. Previously, the GCD
type depended on  and denominator.

: Added audit for , os.fwalk(),
pathlib.Path.glob() and pathlib.Path.rglob().

: Remove unused, undocumented argument  from
uuid.getnode()

: sys.audit() is now called only once per call of
glob.glob() and glob.iglob().

: Fix a regression in ArgumentParser where
allow_abbrev=False was ignored for long options that used a prefix
character other than â-â.

: Striped whitespace from docstring before returning it from
unittest.case.shortDescription().

================================================================================

# Changelog - Library (Part 4)

: A new function resolve_name has been added to the
 module. This resolves a string of the form  or
 to an object. In the example,  is a package/module
and  is an object within that package/module reached via recursive
attribute access.

: The binascii.crc_hqx() function is no longer deprecated.

: Mark typing.IO.closed as a property

: Add typing.Annotated and include_extras parameter
to typing.get_type_hints() as part of . Patch by Till
Varoquaux, documentation by Till Varoquaux and Konstantin Kashin.

: Fix a bug in unittest.mock.create_autospec() that would
complain about the wrong number of arguments for custom descriptors
defined in an extension module returning functions.

: Mock fully resets child objects on reset_mock(). Patch by
Vegard Stikbakke

: Allow AsyncMock to correctly patch static/class methods

: Implement PEP-489 algorithm for non-ascii âPyInit_â¦â symbol
names in distutils to make it export the correct init symbol also on
Windows.

: Omit  and  fields for non-device files
in  archives, enabling bit-for-bit compatibility with GNU
.

================================================================================

# Changelog - Library (Part 5)

: Added a new cancel_futures parameter to
concurrent.futures.Executor.shutdown() that cancels all pending
futures which have not started running, instead of waiting for them to
complete before shutting down the executor.

: bool(fraction.Fraction) now returns a boolean even if
(numerator != 0) does not return a boolean (ex: numpy number).

: Remove support for   asyncio.lock): and 
  asyncio.lock):.  The same is correct for
asyncio.Condition and asyncio.Semaphore.

: Ensure, if  is supplied to
unittest.mock.MagicMock, it is used to calculate return values
for the magic methods instead of using the default return values. Patch by
Karthikeyan Singaravelan.

: inspect.Signature.parameters and
inspect.BoundArguments.arguments are now dicts instead of
OrderedDicts. Patch contributed by RÃ©mi Lapeyre.

: Fix sys.exit() and sys.exit(None) exit code propagation when
used in multiprocessing.Process.

: * Add  function to . * Use
dict.clear to clear the cache. * Refactoring  function and
checkcache function.

================================================================================

# Changelog - Documentation (Part 1)

List:
: The language reference now specifies restrictions on class
namespaces. Adapted from a patch by Ethan Furman.
: Updated documentation of  flag of .
: In pyclbr doc, update âclassâ to âmoduleâ where appropriate and
add readmodule comment. Patch by Hakan Ãelik.
: Clarify refcounting semantics for the following functions: -
PyObject_SetItem - PyMapping_SetItemString - PyDict_SetItem -
PyDict_SetItemString
: Explain that when filling with turtle, overlap regions may be
left unfilled.
: Update mmap readline method description. The fact that the
readline method does update the file position should not be ignored since
this might give the impression for the programmer that it doesnât update
it.
: Include subsection in TOC for PDF version of docs.

: The language reference now specifies restrictions on class
namespaces. Adapted from a patch by Ethan Furman.

: Updated documentation of  flag of .

: In pyclbr doc, update âclassâ to âmoduleâ where appropriate and
add readmodule comment. Patch by Hakan Ãelik.

: Clarify refcounting semantics for the following functions: -
PyObject_SetItem - PyMapping_SetItemString - PyDict_SetItem -
PyDict_SetItemString

================================================================================

# Changelog - Documentation (Part 2)

: Explain that when filling with turtle, overlap regions may be
left unfilled.

: Update mmap readline method description. The fact that the
readline method does update the file position should not be ignored since
this might give the impression for the programmer that it doesnât update
it.

: Include subsection in TOC for PDF version of docs.

================================================================================

# Changelog - Tests

List:
: Skip tests on non-BMP characters of test_winconsoleio.
: Skip test_zipfile.test_add_file_after_2107() if
time.localtime() fails with OverflowError. It is the case on
AIX 6.1 for example.

: Skip tests on non-BMP characters of test_winconsoleio.

: Skip test_zipfile.test_add_file_after_2107() if
time.localtime() fails with OverflowError. It is the case on
AIX 6.1 for example.

================================================================================

# Changelog - Build

List:
: Remove COUNT_ALLOCS special build.

: Remove COUNT_ALLOCS special build.

================================================================================

# Changelog - Windows

List:
: Delete unused code related to SxS manifests.
: Honor the Python path when a virtualenv is active on Windows.
: Improve the error message when attempting to load a DLL with
unresolved dependencies.
:  and expanduser()
on Windows now prefer USERPROFILE and no longer use
, which is not normally set for regular user accounts. This
makes them again behave like os.path.expanduser(), which was changed
to ignore  in 3.8, see .
: The build.bat script has additional options for very-quiet
output (-q) and very-verbose output (-vv)

: Delete unused code related to SxS manifests.

: Honor the Python path when a virtualenv is active on Windows.

: Improve the error message when attempting to load a DLL with
unresolved dependencies.

:  and expanduser()
on Windows now prefer USERPROFILE and no longer use
, which is not normally set for regular user accounts. This
makes them again behave like os.path.expanduser(), which was changed
to ignore  in 3.8, see .

: The build.bat script has additional options for very-quiet
output (-q) and very-verbose output (-vv)

================================================================================

# Changelog - IDLE

List:
: Add tests for pyparse find_good_parse_start().
: In the font configuration window, remove duplicated font names.
: Add remaining configdialog tests for buttons and highlights and
keys tabs.
: IDLE Settings Cancel button now cancels pending changes
: Close an IDLE shell calltip if a KeyboardInterrupt or
shell restart occurs.  Patch by Zackery Spytz.

: Add tests for pyparse find_good_parse_start().

: In the font configuration window, remove duplicated font names.

: Add remaining configdialog tests for buttons and highlights and
keys tabs.

: IDLE Settings Cancel button now cancels pending changes

: Close an IDLE shell calltip if a KeyboardInterrupt or
shell restart occurs.  Patch by Zackery Spytz.

================================================================================

# Changelog - C API (Part 1)

List:
: Move the bytes_methods.h header file to the internal C API
as pycore_bytes_methods.h: it only contains private symbols (prefixed
by ), except of the PyDoc_STRVAR_shared() macro.
: Move the  header file to the internal C API as
pycore_dtoa.h: it only contains private functions (prefixed by
). The  and  modules must now be compiled
with the Py_BUILD_CORE macro defined.
: Add Py_SET_SIZE() function to set the size of an
object.
: PyUnicode_IsIdentifier() does not call
Py_FatalError() anymore if the string is not ready.
: Add Py_SET_TYPE() function to set the type of an
object.
: Add a Py_SET_REFCNT() function to set the reference
counter of an object.
: Convert PyType_HasFeature(), PyType_Check() and
PyType_CheckExact() macros to static inline functions.
: In the limited C API, PyObject_INIT() and
PyObject_INIT_VAR() are now defined as aliases to
PyObject_Init() and PyObject_InitVar() to make their
implementation opaque. It avoids to leak implementation details in the
limited C API. Exclude the following functions from the limited C API:
_Py_NewReference(), _Py_ForgetReference(),
_PyTraceMalloc_NewReference() and _Py_GetRefTotal().
: Exclude trashcan mechanism from the limited C API: it requires
access to PyTypeObject and PyThreadState structure fields, whereas these
structures are opaque in the limited C API.
: The PyThreadState_Clear() function now calls the
PyThreadState.on_delete callback. Previously, that happened in
PyThreadState_Delete().
: Fix to clear the interpreter state only after clearing module
globals to guarantee module state access from C Extensions during runtime
destruction
: The Vectorcall API (PEP 590) was made public, adding the
functions PyObject_Vectorcall, PyObject_VectorcallMethod,
PyVectorcall_Function, PyObject_CallOneArg,
PyObject_CallMethodNoArgs, PyObject_CallMethodOneArg,
PyObject_FastCallDict, and the flag Py_TPFLAGS_HAVE_VECTORCALL.

================================================================================

# Changelog - C API (Part 2)

: Move the bytes_methods.h header file to the internal C API
as pycore_bytes_methods.h: it only contains private symbols (prefixed
by ), except of the PyDoc_STRVAR_shared() macro.

: Move the  header file to the internal C API as
pycore_dtoa.h: it only contains private functions (prefixed by
). The  and  modules must now be compiled
with the Py_BUILD_CORE macro defined.

: Add Py_SET_SIZE() function to set the size of an
object.

: PyUnicode_IsIdentifier() does not call
Py_FatalError() anymore if the string is not ready.

: Add Py_SET_TYPE() function to set the type of an
object.

: Add a Py_SET_REFCNT() function to set the reference
counter of an object.

: Convert PyType_HasFeature(), PyType_Check() and
PyType_CheckExact() macros to static inline functions.

: In the limited C API, PyObject_INIT() and
PyObject_INIT_VAR() are now defined as aliases to
PyObject_Init() and PyObject_InitVar() to make their
implementation opaque. It avoids to leak implementation details in the
limited C API. Exclude the following functions from the limited C API:
_Py_NewReference(), _Py_ForgetReference(),
_PyTraceMalloc_NewReference() and _Py_GetRefTotal().

================================================================================

# Changelog - C API (Part 3)

: Exclude trashcan mechanism from the limited C API: it requires
access to PyTypeObject and PyThreadState structure fields, whereas these
structures are opaque in the limited C API.

: The PyThreadState_Clear() function now calls the
PyThreadState.on_delete callback. Previously, that happened in
PyThreadState_Delete().

: Fix to clear the interpreter state only after clearing module
globals to guarantee module state access from C Extensions during runtime
destruction

: The Vectorcall API (PEP 590) was made public, adding the
functions PyObject_Vectorcall, PyObject_VectorcallMethod,
PyVectorcall_Function, PyObject_CallOneArg,
PyObject_CallMethodNoArgs, PyObject_CallMethodOneArg,
PyObject_FastCallDict, and the flag Py_TPFLAGS_HAVE_VECTORCALL.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Document all possibilities for the  options in the
command line help section. Patch by Pablo Galindo.
: Fix possible crashes when operating with the functions in the
 module and custom comparison operators.
: Prevent double awaiting of async iterator.
: Add functools.TopologicalSorter to the
 module to offers functionality to perform topological
sorting of graphs. Patch by Pablo Galindo, Tim Peters and Larry Hastings.
: Replace four complex bytecodes for building sequences with
three simpler ones.
The following four bytecodes have been removed:

BUILD_LIST_UNPACK
BUILD_TUPLE_UNPACK
BUILD_SET_UNPACK
BUILD_TUPLE_UNPACK_WITH_CALL

The following three bytecodes have been added:

LIST_TO_TUPLE
LIST_EXTEND
SET_UPDATE

================================================================================

# Changelog - Core and Builtins (Part 2)


: Import loaders which publish immutable module objects can now
publish immutable packages in addition to individual modules.
: Added a new function gc.is_finalized() to check if an
object has been finalized by the garbage collector. Patch by Pablo
Galindo.
: Improve the displayed error message when incorrect types are
passed to   statements by looking up the __aenter__()
special method before the __aexit__() special method when entering
an asynchronous context manager. Patch by GÃ©ry Ogam.
: Fix AST end location for lone generator expression in function
call, e.g. f(i for i in a).
: Correctly handle multi-line tokens in interactive mode. Patch
by Pablo Galindo.
bpo-1635741: Port _json extension module to multiphase initialization
().
: Fix constant folding optimization for positional only arguments
- by Anthony Sottile.
: Fix SystemError when nested function has annotation on
positional-only argument - by Anthony Sottile.
: Correct the error message when calling the  or
 with no arguments. Patch by Donghee Na.
: Correct the error message when trying to construct
 objects with no arguments. Patch by Pablo Galindo.
: Fix incorrect line execution reporting in trace functions when
tracing the last iteration of asynchronous for loops. Patch by Pablo
Galindo.
: Fix incorrect line execution reporting in trace functions when
tracing exception handlers with name binding. Patch by Pablo Galindo.
: Split the COMPARE_OP bytecode instruction into four distinct
instructions.

================================================================================

# Changelog - Core and Builtins (Part 3)

COMPARE_OP for rich comparisons
IS_OP for âisâ and âis notâ tests
CONTAINS_OP for âinâ and âis notâ tests
JUMP_IF_NOT_EXC_MATCH for checking exceptions in âtry-exceptâ statements.

This improves the clarity of the interpreter and should provide a modest
speedup.

: Fix possible crashes in dict and list when calling
PyObject_RichCompareBool().
: By default, sys.stderr is line-buffered now, even if
 is redirected to a file. You can still make sys.stderr
unbuffered by passing the  command-line option or setting the
PYTHONUNBUFFERED environment variable.
(Contributed by Jendrik Seipp in .)

: Fix possible crashes in several list methods by holding strong
references to list elements when calling
PyObject_RichCompareBool().
: Include brotli .br encoding in mimetypes encodings_map

: Document all possibilities for the  options in the
command line help section. Patch by Pablo Galindo.

: Fix possible crashes when operating with the functions in the
 module and custom comparison operators.

: Prevent double awaiting of async iterator.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Add functools.TopologicalSorter to the
 module to offers functionality to perform topological
sorting of graphs. Patch by Pablo Galindo, Tim Peters and Larry Hastings.

: Replace four complex bytecodes for building sequences with
three simpler ones.

The following four bytecodes have been removed:

List:
BUILD_LIST_UNPACK
BUILD_TUPLE_UNPACK
BUILD_SET_UNPACK
BUILD_TUPLE_UNPACK_WITH_CALL

BUILD_TUPLE_UNPACK_WITH_CALL

The following three bytecodes have been added:

List:
LIST_TO_TUPLE
LIST_EXTEND
SET_UPDATE

: Import loaders which publish immutable module objects can now
publish immutable packages in addition to individual modules.

: Added a new function gc.is_finalized() to check if an
object has been finalized by the garbage collector. Patch by Pablo
Galindo.

: Improve the displayed error message when incorrect types are
passed to   statements by looking up the __aenter__()
special method before the __aexit__() special method when entering
an asynchronous context manager. Patch by GÃ©ry Ogam.

: Fix AST end location for lone generator expression in function
call, e.g. f(i for i in a).

: Correctly handle multi-line tokens in interactive mode. Patch
by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 5)

bpo-1635741: Port _json extension module to multiphase initialization
().

: Fix constant folding optimization for positional only arguments
- by Anthony Sottile.

: Fix SystemError when nested function has annotation on
positional-only argument - by Anthony Sottile.

: Correct the error message when calling the  or
 with no arguments. Patch by Donghee Na.

: Correct the error message when trying to construct
 objects with no arguments. Patch by Pablo Galindo.

: Fix incorrect line execution reporting in trace functions when
tracing the last iteration of asynchronous for loops. Patch by Pablo
Galindo.

: Fix incorrect line execution reporting in trace functions when
tracing exception handlers with name binding. Patch by Pablo Galindo.

: Split the COMPARE_OP bytecode instruction into four distinct
instructions.

List:
COMPARE_OP for rich comparisons
IS_OP for âisâ and âis notâ tests
CONTAINS_OP for âinâ and âis notâ tests
JUMP_IF_NOT_EXC_MATCH for checking exceptions in âtry-exceptâ statements.

COMPARE_OP for rich comparisons

IS_OP for âisâ and âis notâ tests

CONTAINS_OP for âinâ and âis notâ tests

================================================================================

# Changelog - Core and Builtins (Part 6)

JUMP_IF_NOT_EXC_MATCH for checking exceptions in âtry-exceptâ statements.

This improves the clarity of the interpreter and should provide a modest
speedup.

: Fix possible crashes in dict and list when calling
PyObject_RichCompareBool().

: By default, sys.stderr is line-buffered now, even if
 is redirected to a file. You can still make sys.stderr
unbuffered by passing the  command-line option or setting the
PYTHONUNBUFFERED environment variable.

(Contributed by Jendrik Seipp in .)

: Fix possible crashes in several list methods by holding strong
references to list elements when calling
PyObject_RichCompareBool().

: Include brotli .br encoding in mimetypes encodings_map

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed race condition in lazy imports in .
: The os.unsetenv() function is now also available on
Windows.
: Fixed a regression with the  callback of
shutil.copytree(). The argument types are now  and
 again.
: The os.putenv() and os.unsetenv() functions are now
always available.
: If  C function is available, os.putenv() is
now implemented with  instead of , so Python
doesnât have to handle the environment variable memory.
: Fix math.nextafter(-0.0,  on AIX 7.1.
: Allow tarfile.is_tarfile() to be used with file and
file-like objects, like zipfile.is_zipfile(). Patch by William
Woodruff.
: Removed  option from json.loads().  It has
been deprecated since Python 3.1.
: Write accurate compression level metadata in 
archives, rather than always signaling maximum compression.
: The previously deprecated  and  methods
of nntplib.NNTP have been removed.
: Remove the  parameter of bz2.BZ2File. Since
Python 3.0, it was ignored and using it was emitting
DeprecationWarning. Pass an open file object, to control how the
file is opened. The compresslevel parameter becomes keyword-only.
: Deprecate binhex4 and hexbin4 standards. Deprecate the
 module and the following  functions:
, ,
rlecode_hqx(), rledecode_hqx(),
.
: Remove base64.encodestring() and base64.decodestring(),
aliases deprecated since Python 3.1: use base64.encodebytes() and
base64.decodebytes() instead.
: Remove fractions.gcd() function, deprecated since Python
3.5 (): use math.gcd() instead.
:  constructor now has an optional
 parameter. Patch by Donghee Na.
: Add a new exec_function option (âexec-function in the
CLI) to RefactoringTool for making  a function. Patch by
Batuhan Taskaya.
:  and  now raise
a ValueError if the given timeout for their constructor is zero
to prevent the creation of a non-blocking socket. Patch by Donghee Na.
:  and  now raise
a ValueError if the given timeout for their constructor is zero
to prevent the creation of a non-blocking socket. Patch by Donghee Na.
: Add math.ulp(): return the value of the least significant
bit of a float.
: Improved performance of importlib.metadata distribution
discovery and resilients to inaccessible sys.path entries
(importlib_metadata v1.4.0).
:  and  now raise a
ValueError if the given timeout for their constructor is zero to
prevent the creation of a non-blocking socket. Patch by Donghee Na.
: When you specify prompt=â.â or equivalently python -m venv
âprompt . â¦ the basename of the current directory is used to set the
created venvâs prompt when itâs activated.
: Add math.nextafter(): return the next floating-point
value after  towards .
:  and  now raise a
ValueError if the given timeout for their constructor is zero to
prevent the creation of a non-blocking socket. Patch by Donghee Na.
: Updated the Gmane domain from news.gmane.org to news.gmane.io
which is used for examples of  news reader server and
nntplib tests.
: Proxy the SimpleHTTPRequestHandler.guess_type to
mimetypes.guess_type so the mimetypes.init is called lazily to
avoid unnecessary costs when http.server module is imported.
: The select.epoll.unregister() method no longer ignores
the  error.
: In http.server script, restore binding to IPv4 on Windows.
: Fix ttk.Scale.configure([name]) to return configuration tuple
for name or all options.  Giovanni Lombardo contributed part of the patch.
: If an exception were to be thrown in Logger.isEnabledFor
(say, by asyncio timeouts or stopit) , the  global lock may not
be released appropriately, resulting in deadlock.  This change wraps that
block of code with try...finally to ensure the lock is released.
: Perform a check for running loop before starting a new task in
loop.run_until_complete() to fail fast; it prevents the side effect of
new task spawning before exception raising.
: Correctly parenthesize filter-based statements that contain
lambda expressions in . Patch by Donghee Na.
: A change was made to logging.config.dictConfig to avoid
converting instances of named tuples to ConvertingTuple. Itâs assumed that
named tuples are too specialised to be treated like ordinary tuples; if a
user of named tuples requires ConvertingTuple functionality, they will
have to implement that themselves in their named tuple class.
: ast.literal_eval() now supports empty sets.
: Fix import path for asyncio.TimeoutError
: urllib.request.proxy_bypass_environment() now ignores
leading dots and no longer ignores a trailing newline.
: Fixed handling invalid warning category in the -W option.  No
longer import the re module if it is not needed.
: base64.b64decode() with validate=True raises now a
binascii.Error if the input ends with a single .
: Fix mock.patch.stopall() to stop active patches that were
created with mock.patch.dict().
: Implement dummy __class_getitem__ for
tempfile.SpooledTemporaryFile.
: Implement dummy __class_getitem__ for subprocess.Popen,
subprocess.CompletedProcess
: Adjusted the wording of the warning issued by distutilsâ
 command when the  and maintainer fields are
supplied but no corresponding e-mail field (author_email or
maintainer_email) is found. The wording now reflects the fact that
these fields are suggested, but not required. Patch by Juergen Gmach.
: Fixed __subclasshook__ of os.PathLike to return a
correct result upon inheritance. Patch by Bar Harel.
:  and  now
have an optional  parameter for their constructors. Also, the
 method now has an optional  parameter
with this change. The overridden methods of 
and IMAP4_stream were applied to this change. Patch by
Donghee Na.
: Fixed Popen.communicate() subsequent call crash when the
child process has already closed any piped standard stream, but still
continues to be running. Patch by Andriy Maletsky.
: On Unix, subprocess.Popen.send_signal() now polls the
process status. Polling reduces the risk of sending a signal to the wrong
process if the process completed, the subprocess.Popen.returncode
attribute is still , and the pid has been reassigned (recycled) to
a new different process.
: Removes trailing space in formatted currency with
international=True and a locale with symbol following value. E.g.
locale.currency(12.34, international=True) returned   
instead of  .
: Use signature from inner mock for autospecced methods attached
with unittest.mock.attach_mock(). Patch by Karthikeyan Singaravelan.
: Fixed an issue where  could include a leading path
separator when syslog.openlog() was called without arguments.
: Add copy.copy() and copy.deepcopy() support to
property() objects.
: Added the pstats.Stats.get_profile_dict() method to return the
profile data as a StatsProfile instance.
: Termios magic constants for the following baud rates:   -
B500000   - B576000   - B921600   - B1000000   - B1152000   - B1500000   -
B2000000   - B2500000   - B3000000   - B3500000   - B4000000 Patch by
Andrey Smirnov

================================================================================

# Changelog - Library (Part 2)

: Fixed race condition in lazy imports in .

: The os.unsetenv() function is now also available on
Windows.

: Fixed a regression with the  callback of
shutil.copytree(). The argument types are now  and
 again.

: The os.putenv() and os.unsetenv() functions are now
always available.

: If  C function is available, os.putenv() is
now implemented with  instead of , so Python
doesnât have to handle the environment variable memory.

: Fix math.nextafter(-0.0,  on AIX 7.1.

: Allow tarfile.is_tarfile() to be used with file and
file-like objects, like zipfile.is_zipfile(). Patch by William
Woodruff.

: Removed  option from json.loads().  It has
been deprecated since Python 3.1.

: Write accurate compression level metadata in 
archives, rather than always signaling maximum compression.

: The previously deprecated  and  methods
of nntplib.NNTP have been removed.

: Remove the  parameter of bz2.BZ2File. Since
Python 3.0, it was ignored and using it was emitting
DeprecationWarning. Pass an open file object, to control how the
file is opened. The compresslevel parameter becomes keyword-only.

================================================================================

# Changelog - Library (Part 3)

: Deprecate binhex4 and hexbin4 standards. Deprecate the
 module and the following  functions:
, ,
rlecode_hqx(), rledecode_hqx(),
.

: Remove base64.encodestring() and base64.decodestring(),
aliases deprecated since Python 3.1: use base64.encodebytes() and
base64.decodebytes() instead.

: Remove fractions.gcd() function, deprecated since Python
3.5 (): use math.gcd() instead.

:  constructor now has an optional
 parameter. Patch by Donghee Na.

: Add a new exec_function option (âexec-function in the
CLI) to RefactoringTool for making  a function. Patch by
Batuhan Taskaya.

:  and  now raise
a ValueError if the given timeout for their constructor is zero
to prevent the creation of a non-blocking socket. Patch by Donghee Na.

:  and  now raise
a ValueError if the given timeout for their constructor is zero
to prevent the creation of a non-blocking socket. Patch by Donghee Na.

: Add math.ulp(): return the value of the least significant
bit of a float.

: Improved performance of importlib.metadata distribution
discovery and resilients to inaccessible sys.path entries
(importlib_metadata v1.4.0).

================================================================================

# Changelog - Library (Part 4)

:  and  now raise a
ValueError if the given timeout for their constructor is zero to
prevent the creation of a non-blocking socket. Patch by Donghee Na.

: When you specify prompt=â.â or equivalently python -m venv
âprompt . â¦ the basename of the current directory is used to set the
created venvâs prompt when itâs activated.

: Add math.nextafter(): return the next floating-point
value after  towards .

:  and  now raise a
ValueError if the given timeout for their constructor is zero to
prevent the creation of a non-blocking socket. Patch by Donghee Na.

: Updated the Gmane domain from news.gmane.org to news.gmane.io
which is used for examples of  news reader server and
nntplib tests.

: Proxy the SimpleHTTPRequestHandler.guess_type to
mimetypes.guess_type so the mimetypes.init is called lazily to
avoid unnecessary costs when http.server module is imported.

: The select.epoll.unregister() method no longer ignores
the  error.

: In http.server script, restore binding to IPv4 on Windows.

: Fix ttk.Scale.configure([name]) to return configuration tuple
for name or all options.  Giovanni Lombardo contributed part of the patch.

================================================================================

# Changelog - Library (Part 5)

: If an exception were to be thrown in Logger.isEnabledFor
(say, by asyncio timeouts or stopit) , the  global lock may not
be released appropriately, resulting in deadlock.  This change wraps that
block of code with try...finally to ensure the lock is released.

: Perform a check for running loop before starting a new task in
loop.run_until_complete() to fail fast; it prevents the side effect of
new task spawning before exception raising.

: Correctly parenthesize filter-based statements that contain
lambda expressions in . Patch by Donghee Na.

: A change was made to logging.config.dictConfig to avoid
converting instances of named tuples to ConvertingTuple. Itâs assumed that
named tuples are too specialised to be treated like ordinary tuples; if a
user of named tuples requires ConvertingTuple functionality, they will
have to implement that themselves in their named tuple class.

: ast.literal_eval() now supports empty sets.

: Fix import path for asyncio.TimeoutError

: urllib.request.proxy_bypass_environment() now ignores
leading dots and no longer ignores a trailing newline.

: Fixed handling invalid warning category in the -W option.  No
longer import the re module if it is not needed.

================================================================================

# Changelog - Library (Part 6)

: base64.b64decode() with validate=True raises now a
binascii.Error if the input ends with a single .

: Fix mock.patch.stopall() to stop active patches that were
created with mock.patch.dict().

: Implement dummy __class_getitem__ for
tempfile.SpooledTemporaryFile.

: Implement dummy __class_getitem__ for subprocess.Popen,
subprocess.CompletedProcess

: Adjusted the wording of the warning issued by distutilsâ
 command when the  and maintainer fields are
supplied but no corresponding e-mail field (author_email or
maintainer_email) is found. The wording now reflects the fact that
these fields are suggested, but not required. Patch by Juergen Gmach.

: Fixed __subclasshook__ of os.PathLike to return a
correct result upon inheritance. Patch by Bar Harel.

:  and  now
have an optional  parameter for their constructors. Also, the
 method now has an optional  parameter
with this change. The overridden methods of 
and IMAP4_stream were applied to this change. Patch by
Donghee Na.

: Fixed Popen.communicate() subsequent call crash when the
child process has already closed any piped standard stream, but still
continues to be running. Patch by Andriy Maletsky.

================================================================================

# Changelog - Library (Part 7)

: On Unix, subprocess.Popen.send_signal() now polls the
process status. Polling reduces the risk of sending a signal to the wrong
process if the process completed, the subprocess.Popen.returncode
attribute is still , and the pid has been reassigned (recycled) to
a new different process.

: Removes trailing space in formatted currency with
international=True and a locale with symbol following value. E.g.
locale.currency(12.34, international=True) returned   
instead of  .

: Use signature from inner mock for autospecced methods attached
with unittest.mock.attach_mock(). Patch by Karthikeyan Singaravelan.

: Fixed an issue where  could include a leading path
separator when syslog.openlog() was called without arguments.

: Add copy.copy() and copy.deepcopy() support to
property() objects.

: Added the pstats.Stats.get_profile_dict() method to return the
profile data as a StatsProfile instance.

: Termios magic constants for the following baud rates:   -
B500000   - B576000   - B921600   - B1000000   - B1152000   - B1500000   -
B2000000   - B2500000   - B3000000   - B3500000   - B4000000 Patch by
Andrey Smirnov

================================================================================

# Changelog - Documentation

List:
: Mention in docs that asyncio.get_event_loop() implicitly
creates new event loop only if called from the main thread.
: Add an entry for __module__ in the âfunctionâ & âmethodâ
sections of the  docsâ Types and members table.
: In the  module documentation, fix a misleading
NodeTransformer example and add advice on when to use the
fix_missing_locations function.

: Mention in docs that asyncio.get_event_loop() implicitly
creates new event loop only if called from the main thread.

: Add an entry for __module__ in the âfunctionâ & âmethodâ
sections of the  docsâ Types and members table.

: In the  module documentation, fix a misleading
NodeTransformer example and add advice on when to use the
fix_missing_locations function.

================================================================================

# Changelog - Build

List:
: On non-Windows platforms, the  and
unsetenv() functions are now required to build Python.
: Updated the documentation in ./configure  to show
default values, reference documentation where required and add additional
explanation where needed.
: The ctags and etags build targets both include Modules/_ctypes
and Python standard library source files.

: On non-Windows platforms, the  and
unsetenv() functions are now required to build Python.

: Updated the documentation in ./configure  to show
default values, reference documentation where required and add additional
explanation where needed.

: The ctags and etags build targets both include Modules/_ctypes
and Python standard library source files.

================================================================================

# Changelog - IDLE

List:
: Make IDLE Settings dialog Help button work again.
: Tag memoryview, range, and tuple as classes, the same as list,
etcetera, in the library manual built-in functions list.
: Add tests for editor newline_and_indent_event method. Remove
dead code from pyparse find_good_parse_start method.

: Make IDLE Settings dialog Help button work again.

: Tag memoryview, range, and tuple as classes, the same as list,
etcetera, in the library manual built-in functions list.

: Add tests for editor newline_and_indent_event method. Remove
dead code from pyparse find_good_parse_start method.

================================================================================

# Changelog - C API

List:
: Clean header files of interfaces defined but with no
implementation. The public API symbols being removed are:
_PyBytes_InsertThousandsGroupingLocale,
_PyBytes_InsertThousandsGrouping, _Py_InitializeFromArgs,
_Py_InitializeFromWideArgs, _PyFloat_Repr, _PyFloat_Digits,
_PyFloat_DigitsInit, PyFrame_ExtendStack,
_PyAIterWrapper_Type, PyNullImporter_Type, PyCmpWrapper_Type,
PySortWrapper_Type, PyNoArgsFunction.
: Add a private _PyErr_GetExcInfo() function to retrieve
exception information of the specified Python thread state.

: Clean header files of interfaces defined but with no
implementation. The public API symbols being removed are:
_PyBytes_InsertThousandsGroupingLocale,
_PyBytes_InsertThousandsGrouping, _Py_InitializeFromArgs,
_Py_InitializeFromWideArgs, _PyFloat_Repr, _PyFloat_Digits,
_PyFloat_DigitsInit, PyFrame_ExtendStack,
_PyAIterWrapper_Type, PyNullImporter_Type, PyCmpWrapper_Type,
PySortWrapper_Type, PyNoArgsFunction.

: Add a private _PyErr_GetExcInfo() function to retrieve
exception information of the specified Python thread state.

================================================================================

# Changelog - Security (Part 1)

List:
: Newline characters have been escaped when performing uu
encoding to prevent them from overflowing into to content section of the
encoded file. This prevents malicious or accidental modification of data
during the decoding process.
: Due to significant security concerns, the reuse_address
parameter of asyncio.loop.create_datagram_endpoint() is no longer
supported. This is because of the behavior of SO_REUSEADDR in UDP. For
more details, see the documentation for
loop.create_datagram_endpoint(). (Contributed by Kyle Stanley, Antoine
Pitrou, and Yury Selivanov in .)
: Fixes a ReDoS vulnerability in http.cookiejar. Patch by
Ben Caller.

: Newline characters have been escaped when performing uu
encoding to prevent them from overflowing into to content section of the
encoded file. This prevents malicious or accidental modification of data
during the decoding process.

================================================================================

# Changelog - Security (Part 2)

: Due to significant security concerns, the reuse_address
parameter of asyncio.loop.create_datagram_endpoint() is no longer
supported. This is because of the behavior of SO_REUSEADDR in UDP. For
more details, see the documentation for
loop.create_datagram_endpoint(). (Contributed by Kyle Stanley, Antoine
Pitrou, and Yury Selivanov in .)

: Fixes a ReDoS vulnerability in http.cookiejar. Patch by
Ben Caller.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Slightly improve the speed of keyword argument parsing with
many kwargs by strengthening the assumption that kwargs are interned
strings.
: Fix the value of end_col_offset for Starred Expression AST
nodes when they are among the elements in the  attribute of Call AST
nodes.
: When parsing an âelifâ node, lineno and col_offset of the node
now point to the âelifâ keyword and not to its condition, making it
consistent with the âifâ node. Patch by Lysandros Nikolaou.
: In Python 3.9.0a1, sys.argv[0] was made an absolute path if a
filename was specified on the command line. Revert this change, since most
users expect sys.argv to be unmodified.
: PySys_Audit() now requires Py_ssize_t to be used
for size arguments in the format string, regardless of whether
PY_SSIZE_T_CLEAN was defined at include time.
: In REPL mode, donât switch to PS2 if the line starts with
comment or whitespace. Based on work by Batuhan TaÅkaya.
: Calling  on a code object now raises the
code.__new__ audit event.
: Add audit hooks for when sys.excepthook() and
sys.unraisablehook() are invoked.
: Improve documentation for audit events table and functions.
: Set the thread stack size to 8 Mb for debug builds on android
platforms.
: Each Python subinterpreter now has its own âsmall integer
singletonsâ: numbers in [-5; 257] range. It is no longer possible to
change the number of small integers at build time by overriding
NSMALLNEGINTS and NSMALLPOSINTS macros: macros should now be
modified manually in pycore_pystate.h header file.
: The garbage collector state becomes per interpreter
(PyInterpreterState.gc), rather than being global
(_PyRuntimeState.gc).
: The PyFPE_START_PROTECT() and PyFPE_END_PROTECT()
macros are empty: they have been doing nothing for the last year, so stop
using them.
: Sped up the creation time of constant  and
 displays. Patch by Brandt Bucher.
: MainThread.native_id is now correctly reset in child
processes spawned using multiprocessing.Process, instead of
retaining the parentâs value.
: Added  and  methods to float object.
Patch by Batuhan TaÅkaya.
: int + int and int - int operators can now return small integer
singletons. Patch by hongweipeng.
: Provide a platform tag for AIX that is sufficient for PEP425
binary distribution identification. Patch by Michael Felt.
: Ignore GeneratorExit exceptions when throwing an exception into
the aclose coroutine of an asynchronous generator.
: Removed WITH_CLEANUP_START, WITH_CLEANUP_FINISH, BEGIN_FINALLY,
END_FINALLY, CALL_FINALLY and POP_FINALLY bytecodes. Replaced with RERAISE
and WITH_EXCEPT_START bytecodes. The compiler now generates different code
for exceptional and non-exceptional branches for âwithâ and âtry-exceptâ
statements. For âtry-finallyâ statements the âfinallyâ block is replicated
for each exit from the âtryâ body.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Slightly improve the speed of keyword argument parsing with
many kwargs by strengthening the assumption that kwargs are interned
strings.

: Fix the value of end_col_offset for Starred Expression AST
nodes when they are among the elements in the  attribute of Call AST
nodes.

: When parsing an âelifâ node, lineno and col_offset of the node
now point to the âelifâ keyword and not to its condition, making it
consistent with the âifâ node. Patch by Lysandros Nikolaou.

: In Python 3.9.0a1, sys.argv[0] was made an absolute path if a
filename was specified on the command line. Revert this change, since most
users expect sys.argv to be unmodified.

: PySys_Audit() now requires Py_ssize_t to be used
for size arguments in the format string, regardless of whether
PY_SSIZE_T_CLEAN was defined at include time.

: In REPL mode, donât switch to PS2 if the line starts with
comment or whitespace. Based on work by Batuhan TaÅkaya.

: Calling  on a code object now raises the
code.__new__ audit event.

: Add audit hooks for when sys.excepthook() and
sys.unraisablehook() are invoked.

: Improve documentation for audit events table and functions.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Set the thread stack size to 8 Mb for debug builds on android
platforms.

: Each Python subinterpreter now has its own âsmall integer
singletonsâ: numbers in [-5; 257] range. It is no longer possible to
change the number of small integers at build time by overriding
NSMALLNEGINTS and NSMALLPOSINTS macros: macros should now be
modified manually in pycore_pystate.h header file.

: The garbage collector state becomes per interpreter
(PyInterpreterState.gc), rather than being global
(_PyRuntimeState.gc).

: The PyFPE_START_PROTECT() and PyFPE_END_PROTECT()
macros are empty: they have been doing nothing for the last year, so stop
using them.

: Sped up the creation time of constant  and
 displays. Patch by Brandt Bucher.

: MainThread.native_id is now correctly reset in child
processes spawned using multiprocessing.Process, instead of
retaining the parentâs value.

: Added  and  methods to float object.
Patch by Batuhan TaÅkaya.

: int + int and int - int operators can now return small integer
singletons. Patch by hongweipeng.

: Provide a platform tag for AIX that is sufficient for PEP425
binary distribution identification. Patch by Michael Felt.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Ignore GeneratorExit exceptions when throwing an exception into
the aclose coroutine of an asynchronous generator.

: Removed WITH_CLEANUP_START, WITH_CLEANUP_FINISH, BEGIN_FINALLY,
END_FINALLY, CALL_FINALLY and POP_FINALLY bytecodes. Replaced with RERAISE
and WITH_EXCEPT_START bytecodes. The compiler now generates different code
for exceptional and non-exceptional branches for âwithâ and âtry-exceptâ
statements. For âtry-finallyâ statements the âfinallyâ block is replicated
for each exit from the âtryâ body.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix  in . Patch by Karthikeyan
Singaravelan.
: Update importlib.metadata to include improvements from
importlib_metadata 1.3 including better serialization of EntryPoints and
improved documentation for custom finders.
: Fix asyncio when the ssl module is missing: only check for
ssl.SSLSocket instance if the ssl module is available.
: Fix a potential IndexError in email parser when parsing an
empty msg-id.
: Add a new InvalidMessageID token to email parser to
represent invalid Message-ID headers.  Also, add defects when there is
remaining value after parsing the header.
: Implement __class_getitem__ for os.PathLike,
pathlib.Path.
: Return class from ContextVar.__class_getitem__ to simplify
subclassing.
: Implement __class_getitem__ on asyncio objects (Future,
Task, Queue). Patch by Batuhan Taskaya.
: array.array: Remove tostring() and
fromstring() methods. They were aliases to  and
frombytes(), deprecated since Python 3.2.
: Make repr of C accelerated TaskWakeupMethWrapper the same as of
pure Python version.
: Fix asyncio PidfdChildWatcher: handle  error.
If  is called elsewhere,  call fails with
ChildProcessError: use return code 255 in this case, and log a
warning. It ensures that the pidfd file descriptor is closed if this error
occurs.
: Drop too noisy asyncio warning about deletion of a stream
without explicit  call.
: Added ability to pass through ensure_ascii options to
json.dumps in the  command-line interface.
: The  module now detects if Python is linked to
libedit at runtime on all platforms.  Previously, the check was only done
on macOS.
: Fix  failed to read a JSON file with non-ASCII
characters when locale encoding is not UTF-8.
: Prevent UnboundLocalError to pop up in parse_message_id.
parse_message_id() was improperly using a token defined inside an
exception handler, which was raising UnboundLocalError on parsing an
invalid value. Patch by Claudiu Popa.

================================================================================

# Changelog - Library (Part 2)

: Use    instead of  to upgrade
dependencies in venv.
: Fix SpooledTemporaryFile.rollover() might corrupt the file
when it is in text mode. Patch by Serhiy Storchaka.
: random.choices() now raises a ValueError when all the weights
are zero.
: Raise pickle.UnpicklingError when loading an item from memo for
invalid input.
The previous code was raising a  for both the Python and C
implementation. This was caused by the specified index of an invalid input
which did not exist in the memo structure, where the pickle stores what
objects it has seen. The malformed input would have caused either a
 or LONG_BINGET load from the memo, leading to a
 as the determined index was bogus. Patch by Claudiu Popa.

================================================================================

# Changelog - Library (Part 3)

: Calling func:shutil.copytree to copy a directory tree from
one directory to another subdirectory resulted in an endless loop and a
RecursionError. A fix was added to consume an iterator and create the list
of the entries to be copied, avoiding the recursion for newly created
directories. Patch by Bruno P. Kinoshita.
: Improve  function in http.server, which
enables processing the case that cgi directory is a child of another
directory other than root.
: typing.get_type_hints() properly handles functions
decorated with functools.wraps().
: Expose ast.unparse() as a function of the 
module that can be used to unparse an  object and produce
a string with code that would produce an equivalent 
object when parsed. Patch by Pablo Galindo and Batuhan Taskaya.
: AsyncMock now returns StopAsyncIteration on the exhaustion of a
side_effects iterable. Since PEP-479 its Impossible to raise a
StopIteration exception from a coroutine.
: AsyncMock fix for return values that are awaitable types.  This
also covers side_effect iterable values that happened to be awaitable, and
wraps callables that return an awaitable type. Before these awaitables
were being awaited instead of being returned as is.
: typing.TypedDict subclasses now track which keys are
optional using the __required_keys__ and __optional_keys__
attributes, to enable runtime validation by downstream projects.  Patch by
Zac Hatfield-Dodds.
: Fix unhandled exceptions in  when
internationalizing error messages for arguments with  set to
special (non-integer) values. Patch by Federico Bond.
: Make Python compatible with OpenSSL 3.0.0.
ssl.SSLSocket.getpeercert() no longer returns IPv6 addresses with a
trailing new line.
: Fix an unhandled exception in  when
 is missing. Patch by Toke HÃ¸iland-JÃ¸rgensen.
: Added support for multiple  values in
urllib.request.AbstractDigestAuthHandler.
: Add the Linux-specific signal.pidfd_send_signal()
function, which allows sending a signal to a process identified by a file
descriptor rather than a pid.
: Add  and  (indentation level), and
--no-type-comments (type comments) command line options to ast parsing
tool.
: Change zipfile.ZipExtFile to raise ValueError when
trying to access the underlying file object after it has been closed. This
new behavior is consistent with how accessing closed files is handled in
other parts of Python.
: Improve the performance of enum._decompose() in
. Patch by hongweipeng.
: Break cycle generated when saving an exception in socket.py,
codeop.py and dyld.py as they keep alive not only the exception but user
objects through the __traceback__ attribute. Patch by Mario Corchero.
: Handle namespace packages in . Patch by
Karthikeyan Singaravelan.
: Fix dataclasses to support forward references in type
annotations
: ElementTree supports recursive XInclude processing.  Patch by
Stefan Behnel.
: Add whitespace options for formatting JSON with the
 CLI. The following mutually exclusive options are now
supported:  for setting the indent level in spaces; 
for indenting with tabs; --no-indent for suppressing newlines; and
 for suppressing all whitespace. The default behavior remains
the same as --indent=4.

================================================================================

# Changelog - Library (Part 4)

: Fix  in . Patch by Karthikeyan
Singaravelan.

: Update importlib.metadata to include improvements from
importlib_metadata 1.3 including better serialization of EntryPoints and
improved documentation for custom finders.

: Fix asyncio when the ssl module is missing: only check for
ssl.SSLSocket instance if the ssl module is available.

: Fix a potential IndexError in email parser when parsing an
empty msg-id.

: Add a new InvalidMessageID token to email parser to
represent invalid Message-ID headers.  Also, add defects when there is
remaining value after parsing the header.

: Implement __class_getitem__ for os.PathLike,
pathlib.Path.

: Return class from ContextVar.__class_getitem__ to simplify
subclassing.

: Implement __class_getitem__ on asyncio objects (Future,
Task, Queue). Patch by Batuhan Taskaya.

: array.array: Remove tostring() and
fromstring() methods. They were aliases to  and
frombytes(), deprecated since Python 3.2.

: Make repr of C accelerated TaskWakeupMethWrapper the same as of
pure Python version.

================================================================================

# Changelog - Library (Part 5)

: Fix asyncio PidfdChildWatcher: handle  error.
If  is called elsewhere,  call fails with
ChildProcessError: use return code 255 in this case, and log a
warning. It ensures that the pidfd file descriptor is closed if this error
occurs.

: Drop too noisy asyncio warning about deletion of a stream
without explicit  call.

: Added ability to pass through ensure_ascii options to
json.dumps in the  command-line interface.

: The  module now detects if Python is linked to
libedit at runtime on all platforms.  Previously, the check was only done
on macOS.

: Fix  failed to read a JSON file with non-ASCII
characters when locale encoding is not UTF-8.

: Prevent UnboundLocalError to pop up in parse_message_id.

parse_message_id() was improperly using a token defined inside an
exception handler, which was raising UnboundLocalError on parsing an
invalid value. Patch by Claudiu Popa.

: Use    instead of  to upgrade
dependencies in venv.

: Fix SpooledTemporaryFile.rollover() might corrupt the file
when it is in text mode. Patch by Serhiy Storchaka.

: random.choices() now raises a ValueError when all the weights
are zero.

: Raise pickle.UnpicklingError when loading an item from memo for
invalid input.

================================================================================

# Changelog - Library (Part 6)

The previous code was raising a  for both the Python and C
implementation. This was caused by the specified index of an invalid input
which did not exist in the memo structure, where the pickle stores what
objects it has seen. The malformed input would have caused either a
 or LONG_BINGET load from the memo, leading to a
 as the determined index was bogus. Patch by Claudiu Popa.

: Calling func:shutil.copytree to copy a directory tree from
one directory to another subdirectory resulted in an endless loop and a
RecursionError. A fix was added to consume an iterator and create the list
of the entries to be copied, avoiding the recursion for newly created
directories. Patch by Bruno P. Kinoshita.

: Improve  function in http.server, which
enables processing the case that cgi directory is a child of another
directory other than root.

: typing.get_type_hints() properly handles functions
decorated with functools.wraps().

: Expose ast.unparse() as a function of the 
module that can be used to unparse an  object and produce
a string with code that would produce an equivalent 
object when parsed. Patch by Pablo Galindo and Batuhan Taskaya.

================================================================================

# Changelog - Library (Part 7)

: AsyncMock now returns StopAsyncIteration on the exhaustion of a
side_effects iterable. Since PEP-479 its Impossible to raise a
StopIteration exception from a coroutine.

: AsyncMock fix for return values that are awaitable types.  This
also covers side_effect iterable values that happened to be awaitable, and
wraps callables that return an awaitable type. Before these awaitables
were being awaited instead of being returned as is.

: typing.TypedDict subclasses now track which keys are
optional using the __required_keys__ and __optional_keys__
attributes, to enable runtime validation by downstream projects.  Patch by
Zac Hatfield-Dodds.

: Fix unhandled exceptions in  when
internationalizing error messages for arguments with  set to
special (non-integer) values. Patch by Federico Bond.

: Make Python compatible with OpenSSL 3.0.0.
ssl.SSLSocket.getpeercert() no longer returns IPv6 addresses with a
trailing new line.

: Fix an unhandled exception in  when
 is missing. Patch by Toke HÃ¸iland-JÃ¸rgensen.

: Added support for multiple  values in
urllib.request.AbstractDigestAuthHandler.

================================================================================

# Changelog - Library (Part 8)

: Add the Linux-specific signal.pidfd_send_signal()
function, which allows sending a signal to a process identified by a file
descriptor rather than a pid.

: Add  and  (indentation level), and
--no-type-comments (type comments) command line options to ast parsing
tool.

: Change zipfile.ZipExtFile to raise ValueError when
trying to access the underlying file object after it has been closed. This
new behavior is consistent with how accessing closed files is handled in
other parts of Python.

: Improve the performance of enum._decompose() in
. Patch by hongweipeng.

: Break cycle generated when saving an exception in socket.py,
codeop.py and dyld.py as they keep alive not only the exception but user
objects through the __traceback__ attribute. Patch by Mario Corchero.

: Handle namespace packages in . Patch by
Karthikeyan Singaravelan.

: Fix dataclasses to support forward references in type
annotations

: ElementTree supports recursive XInclude processing.  Patch by
Stefan Behnel.

================================================================================

# Changelog - Library (Part 9)

: Add whitespace options for formatting JSON with the
 CLI. The following mutually exclusive options are now
supported:  for setting the indent level in spaces; 
for indenting with tabs; --no-indent for suppressing newlines; and
 for suppressing all whitespace. The default behavior remains
the same as --indent=4.

================================================================================

# Changelog - Documentation

List:
: Correct when venvâs upgrade_dependencies() and
--upgrade-deps are added.
: Update documentation to state that to activate virtual
environments under fish one should use , not  as documented
at https://fishshell.com/docs/current/cmds/source.html.
: Improves documentation of the values that
datetime.datetime.strptime() accepts for . Patch by Karl
Dubost.

: Correct when venvâs upgrade_dependencies() and
--upgrade-deps are added.

: Update documentation to state that to activate virtual
environments under fish one should use , not  as documented
at https://fishshell.com/docs/current/cmds/source.html.

: Improves documentation of the values that
datetime.datetime.strptime() accepts for . Patch by Karl
Dubost.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_ressources_gced_in_workers() of
test_concurrent_futures: explicitly stop the manager to prevent leaking a
child process running in the background after the test completes.
: Multiprocessing and concurrent.futures tests now stop the
resource tracker process when tests complete.
: Replace hardcoded timeout constants in tests with new
test.support constants: LOOPBACK_TIMEOUT,
INTERNET_TIMEOUT,
SHORT_TIMEOUT and
LONG_TIMEOUT. It becomes easier to adjust these four
timeout constants for all tests at once, rather than having to adjust
every single test file.
: Fix test_pty: if the process is the session leader, closing the
master file descriptor raises a SIGHUP signal: simply ignore SIGHUP when
running the tests.
: Fix a test for math.fsum() that was failing due to
constant folding.
: test.support:
run_python_until_end(),
assert_python_ok() and
assert_python_failure() functions no longer strip
whitespaces from stderr. Remove test.support.strip_python_stderr()
function.
: Fix test_faulthandler on GCC 10. Use the âvolatileâ keyword in
faulthandler._stack_overflow() to prevent tail call optimization on
any compiler, rather than relying on compiler specific pragma.
: test_capi: trashcan tests now require the test âcpuâ resource.
: Skip asyncio test_create_datagram_endpoint_existing_sock_unix
on platforms lacking a functional bind() for named unix domain sockets.
: Skip the test_posix.test_pidfd_open() test if
os.pidfd_open() fails with a PermissionError. This situation
can happen in a Linux sandbox using a syscall whitelist which doesnât
allow the pidfd_open() syscall yet.
: Fix some unused functions in tests. Patch by Adam Johnson.
: Raise  when passing target as a string with
unittest.mock.patch.object().
: test.regrtest now can receive a list of test patterns to ignore
(using the -i/âignore argument) or a file with a list of patterns to
ignore (using the âignore-file argument). Patch by Pablo Galindo.

================================================================================

# Changelog - Tests (Part 2)

: Fix test_ressources_gced_in_workers() of
test_concurrent_futures: explicitly stop the manager to prevent leaking a
child process running in the background after the test completes.

: Multiprocessing and concurrent.futures tests now stop the
resource tracker process when tests complete.

: Replace hardcoded timeout constants in tests with new
test.support constants: LOOPBACK_TIMEOUT,
INTERNET_TIMEOUT,
SHORT_TIMEOUT and
LONG_TIMEOUT. It becomes easier to adjust these four
timeout constants for all tests at once, rather than having to adjust
every single test file.

: Fix test_pty: if the process is the session leader, closing the
master file descriptor raises a SIGHUP signal: simply ignore SIGHUP when
running the tests.

: Fix a test for math.fsum() that was failing due to
constant folding.

: test.support:
run_python_until_end(),
assert_python_ok() and
assert_python_failure() functions no longer strip
whitespaces from stderr. Remove test.support.strip_python_stderr()
function.

: Fix test_faulthandler on GCC 10. Use the âvolatileâ keyword in
faulthandler._stack_overflow() to prevent tail call optimization on
any compiler, rather than relying on compiler specific pragma.

================================================================================

# Changelog - Tests (Part 3)

: test_capi: trashcan tests now require the test âcpuâ resource.

: Skip asyncio test_create_datagram_endpoint_existing_sock_unix
on platforms lacking a functional bind() for named unix domain sockets.

: Skip the test_posix.test_pidfd_open() test if
os.pidfd_open() fails with a PermissionError. This situation
can happen in a Linux sandbox using a syscall whitelist which doesnât
allow the pidfd_open() syscall yet.

: Fix some unused functions in tests. Patch by Adam Johnson.

: Raise  when passing target as a string with
unittest.mock.patch.object().

: test.regrtest now can receive a list of test patterns to ignore
(using the -i/âignore argument) or a file with a list of patterns to
ignore (using the âignore-file argument). Patch by Pablo Galindo.

================================================================================

# Changelog - Build

List:
:  now raises  when calling
incompatible methods with an ssl.SSLSocket socket.  Patch by Ido
Michael.
: Added an optional âregenâ project to the Visual Studio solution
that will regenerate all grammar, tokens, and opcodes.

:  now raises  when calling
incompatible methods with an ssl.SSLSocket socket.  Patch by Ido
Michael.

: Added an optional âregenâ project to the Visual Studio solution
that will regenerate all grammar, tokens, and opcodes.

================================================================================

# Changelog - Windows

List:
: Add auditing events to functions in .
: Add support for building and releasing Windows ARM64 packages.

: Add auditing events to functions in .

: Add support for building and releasing Windows ARM64 packages.

================================================================================

# Changelog - macOS

List:
: Fixed a crash on OSX dynamic builds that occurred when
re-initializing the posix module after a Py_Finalize if the environment
had changed since the previous  . Patch by BenoÃ®t Hudson.

: Fixed a crash on OSX dynamic builds that occurred when
re-initializing the posix module after a Py_Finalize if the environment
had changed since the previous  . Patch by BenoÃ®t Hudson.

================================================================================

# Changelog - IDLE

List:
: Escape key now closes IDLE completion windows.  Patch by Johnny
Najera.
: Fix IDLE autocomplete windows not always appearing on some
systems. Patch by Johnny Najera.
: âStrip Trailing Whitespaceâ on the Format menu removes extra
newlines at the end of non-shell files.
: Fix IDLE Format menu tab toggle and file indent width. These
functions (default shortcuts Alt-T and Alt-U) were mistakenly disabled in
3.7.5 and 3.8.0.

: Escape key now closes IDLE completion windows.  Patch by Johnny
Najera.

: Fix IDLE autocomplete windows not always appearing on some
systems. Patch by Johnny Najera.

: âStrip Trailing Whitespaceâ on the Format menu removes extra
newlines at the end of non-shell files.

: Fix IDLE Format menu tab toggle and file indent width. These
functions (default shortcuts Alt-T and Alt-U) were mistakenly disabled in
3.7.5 and 3.8.0.

================================================================================

# Changelog - C API

List:
: Remove PyUnicode_ClearFreeList() function: the Unicode free
list has been removed in Python 3.3.
: Remove PyMethod_ClearFreeList() and
PyCFunction_ClearFreeList() functions: the free lists of bound method
objects have been removed.
: Exclude PyFPE_START_PROTECT() and PyFPE_END_PROTECT()
macros of  from Py_LIMITED_API (stable API).

: Remove PyUnicode_ClearFreeList() function: the Unicode free
list has been removed in Python 3.3.

: Remove PyMethod_ClearFreeList() and
PyCFunction_ClearFreeList() functions: the free lists of bound method
objects have been removed.

: Exclude PyFPE_START_PROTECT() and PyFPE_END_PROTECT()
macros of  from Py_LIMITED_API (stable API).

================================================================================

# Changelog - Security (Part 1)

List:
:  now uses io.open_code() to open code files.
Patch by Jason Killen.
: Add additional audit events for the  module.
: Fixes audit event for os.system() to be named
.
: Escape the server title of
xmlrpc.server.DocXMLRPCServer when rendering the document page as
HTML. (Contributed by Donghee Na in .)
: Update vendorized expat library version to 2.2.8, which
resolves CVE 2019-15903.
: Fixes email._header_value_parser.get_unstructured going into an
infinite loop for a specific case in which the email header does not have
trailing whitespace, and the case in which it contains an invalid encoded
word. Patch by Ashwin Ramaswami.
: Fix an infinite loop when parsing specially crafted email
headers. Patch by Abhilash Raj.
: Adds audit events for the range of supported run commands (see
Command line and environment).
: ssl.match_hostname() no longer accepts IPv4 addresses with
additional text after the address and only quad-dotted notation without
trailing whitespaces. Some inet_aton() implementations ignore whitespace
and all data after whitespace, e.g. â127.0.0.1 whateverâ.
: Adds audit events for , ,
, , , , ,
, , , subprocess,
,  and webbrowser, as well as
os.listdir(), os.scandir() and breakpoint().
: io.open_code() is now used when reading 
files.
: Updated OpenSSL to 1.1.1c in Windows installer
: Fix parsing of invalid email addresses with more than one 
(e.g. a@b@c.com.) to not return the part before 2nd  as valid email
address. Patch by maxking & jpic.

================================================================================

# Changelog - Security (Part 2)

:  now uses io.open_code() to open code files.
Patch by Jason Killen.

: Add additional audit events for the  module.

: Fixes audit event for os.system() to be named
.

: Escape the server title of
xmlrpc.server.DocXMLRPCServer when rendering the document page as
HTML. (Contributed by Donghee Na in .)

: Update vendorized expat library version to 2.2.8, which
resolves CVE 2019-15903.

: Fixes email._header_value_parser.get_unstructured going into an
infinite loop for a specific case in which the email header does not have
trailing whitespace, and the case in which it contains an invalid encoded
word. Patch by Ashwin Ramaswami.

: Fix an infinite loop when parsing specially crafted email
headers. Patch by Abhilash Raj.

: Adds audit events for the range of supported run commands (see
Command line and environment).

: ssl.match_hostname() no longer accepts IPv4 addresses with
additional text after the address and only quad-dotted notation without
trailing whitespaces. Some inet_aton() implementations ignore whitespace
and all data after whitespace, e.g. â127.0.0.1 whateverâ.

================================================================================

# Changelog - Security (Part 3)

: Adds audit events for , ,
, , , , ,
, , , subprocess,
,  and webbrowser, as well as
os.listdir(), os.scandir() and breakpoint().

: io.open_code() is now used when reading 
files.

: Updated OpenSSL to 1.1.1c in Windows installer

: Fix parsing of invalid email addresses with more than one 
(e.g. a@b@c.com.) to not return the part before 2nd  as valid email
address. Patch by maxking & jpic.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Replace Py_FatalError() call with a regular
RuntimeError exception in float.__getformat__().
: Optimized math.floor(), math.ceil() and
math.trunc() for floats.
: Fixed a bug in the compiler that was causing to raise in the
presence of break statements and continue statements inside always false
while loops. Patch by Pablo Galindo.
: Optimized some set operations (e.g. , , and ) of
.    was slower than    but
they are almost same performance for now.
: "".replace("",   now returns  instead of an empty
string for all non-zero .  There are similar changes for
 and  objects.
: Fixed line numbers and column offsets for AST nodes for calls
without arguments in decorators.
: Fix a segmentation fault when using reverse iterators of empty
 objects. Patch by Donghee Na and Inada Naoki.
: ,  and
 objects allow now to export more than 
buffers at a time.
: Fixed a bug where the scope of named expressions was not being
resolved correctly in the presence of the  keyword. Patch by Pablo
Galindo.
: Activate the  macro for debug builds of the
interpreter (when  is set). Patch by Pablo Galindo.
: When the garbage collector makes a collection in which some
objects resurrect (they are reachable from outside the isolated cycles
after the finalizers have been executed), do not block the collection of
all objects that are still unreachable. Patch by Pablo Galindo and Tim
Peters.
: When cyclic garbage collection (gc) runs finalizers that
resurrect unreachable objects, the current gc run ends, without collecting
any cyclic trash.  However, the statistics reported by  and
get_stats() claimed that all cyclic trash found was collected, and
that the resurrected objects were collected.   Changed the stats to report
that none were collected.
: In debug mode, PyObject_GC_Track() now calls
tp_traverse() of the object type to ensure that the object is valid:
test that objects visited by tp_traverse() are valid.
: Remove unnecessary intersection and update set operation in
dictview with empty set. (Contributed by Donghee Na in .)
: Check the error from the systemâs underlying  or
.
: On FreeBSD, Python no longer calls fedisableexcept() at
startup to control the floating-point control mode. The call became
useless since FreeBSD 6: it became the default mode.
: Fix a bug due to the interaction of weakrefs and the cyclic
garbage collector. We must clear any weakrefs in garbage in order to
prevent their callbacks from executing and causing a crash.
: Fix warnings options priority: PyConfig.warnoptions has the
highest priority, as stated in the .
: Predict BUILD_MAP_UNPACK_WITH_CALL -> CALL_FUNCTION_EX
opcode pairs in the main interpreter loop. Patch by Brandt Bucher.
: Improve error handling for the assert_has_calls and
assert_has_awaits methods of mocks. Fixed a bug where any errors
encountered while binding the expected calls to the mockâs spec were
silently swallowed, leading to misleading error output.
: Better control over symbol visibility is provided through use
of the visibility attributes available in gcc >= 4.0, provided in a
uniform way across POSIX and Windows. The POSIX build files have been
updated to compile with -fvisibility=hidden, minimising exported symbols.
: Optimized the  constructor and the
 method for the case when the argument is a dict.
: Python now dumps path configuration if it fails to import the
Python codecs of the filesystem and stdio encodings.
: Allow to call async_generator_athrow().throw(...) even for
non-started async generator helper. It fixes annoying warning at the end
of asyncio.run() call.
: Fix an off-by-one error in PyState_AddModule that could cause
out-of-bounds memory access.
: The select module is now PEP-384 compliant and no longer has
static state
: ast module updated to PEP-384 and all statics removed
: The struct module is now PEP-384 compatible
: The random module is now PEP-384 compatible
: zlib module made PEP-384 compatible
: Make pwd extension module PEP-384 compatible
: grp module made PEP-384 compatible
: Make _posixsubprocess PEP-384 compatible
: Make termios extension module PEP-384 compatible
: Fixed comparing and creating of InterpreterID and ChannelID.
: Fix possible signed integer overflow when handling slices.
Patch by hongweipeng.
: Fixed silencing arbitrary errors if an attribute lookup fails
in several sites. Only AttributeError should be silenced.
: Optimize set difference_update for the case when the other set
is much larger than the base set.  (Suggested by Evgeny Kapun with code
contributed by Michele OrrÃ¹).
: The implementation of is_normalized() has
been greatly sped up on strings that arenât normalized, by implementing
the full normalization-quick-check algorithm from the Unicode standard.
: Adjust correctly the recursion level in the symtable generation
for named expressions. Patch by Pablo Galindo.
: The CHECK_SMALL_INT macro used inside
Object/longobject.c has been replaced with an explicit 
at each call site.
: Fix codecs.lookup() to normalize the encoding name the
same way than encodings.normalize_encoding(), except that
codecs.lookup() also converts the name to lower case.
: Fixed compilation of  and 
in the  block when the corresponding 
block contains  with a non-constant value.
: Improve import error message for partially initialized module
on circular  imports - by Anthony Sottile.
: Fix handling of negative indices in
 of . Patch by
Sergey Fedoseev.
: Slightly improve performance of
PyLong_FromUnsignedLong(), PyLong_FromUnsignedLongLong()
and PyLong_FromSize_t(). Patch by Sergey Fedoseev.
: Ensure explicit relative imports from interactive sessions and
scripts (having no parent package) always raise ImportError, rather than
treating the current module as the package. Patch by Ben Lewis.
: Reverted : emitting SyntaxWarning instead
of DeprecationWarning for invalid escape sequences in string and
bytes literals.
: : As described in the PEP, assignment expressions now
raise SyntaxError when their interaction with comprehension scoping
results in an ambiguous target scope.
The TargetScopeError subclass originally proposed by the PEP has been
removed in favour of just raising regular syntax errors for the disallowed
cases.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix potential use of uninitialized memory in os.wait3().
: Decoding bytes objects larger than 2GiB is faster and no longer
fails when a multibyte characters spans a chunk boundary.
: The  statement now works properly if the
AssertionError exception is being shadowed. Patch by Zackery Spytz.
: Removed object cache () for bound method objects.
Temporary bound method objects are less used than before thanks to the
LOAD_METHOD opcode and the _PyObject_VectorcallMethod C API.
: Fixed minor inconsistency in list.__contains__(),
tuple.__contains__() and a few other places. The collectionâs item
is now always at the left and the needle is on the right of .
: Update differing exception between builtins.__import__()
and importlib.__import__().
: When adding a wrapper descriptor from one class to a different
class (for example, setting   str.__add__ on an 
subclass), an exception is correctly raised when the operator is called.
: Swap the positions of the posonlyargs and  parameters
in the constructor of ast.parameters nodes.
: Optimized pymalloc for non PGO build.
: Compute allocated pymalloc blocks inside
_Py_GetAllocatedBlocks().  This slows down _Py_GetAllocatedBlocks() but
gives a small speedup to _PyObject_Malloc() and _PyObject_Free().
: Fix sys.excepthook() and PyErr_Display() if a
filename is a bytes string. For example, for a SyntaxError exception where
the filename attribute is a bytes string.
: Fix SyntaxError indicator printing too many spaces for
multi-line strings - by Anthony Sottile.
: bytearray.extend() now correctly handles errors that
arise during iteration. Patch by Brandt Bucher.
: The undocumented sys.callstats() function has been removed.
Since Python 3.7, it was deprecated and always returned . It
required a special build option CALL_PROFILE which was already removed
in Python 3.7.
: Remove sys.getcheckinterval() and
sys.setcheckinterval() functions. They were deprecated since Python
3.2. Use sys.getswitchinterval() and sys.setswitchinterval()
instead. Remove also check_interval field of the
PyInterpreterState structure.
: In development mode and in debug build,  and 
arguments are now checked on string encoding and decoding operations.
Examples: , str.encode() and bytes.decode().
By default, for best performances, the  argument is only checked
at the first encoding/decoding error, and the  argument is
sometimes ignored for empty strings.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Optimized decoding short ASCII string with UTF-8 and ascii
codecs. b"foo".decode() is about 15% faster.  Patch by Inada Naoki.
: Improved support of the surrogatepass error handler in the
UTF-8 and UTF-16 incremental decoders.
: , , codecs.open() and
fileinput.FileInput no longer accept  (âuniversal
newlineâ) in the file mode. This flag was deprecated since Python 3.3.
: Reverse evaluation order of key: value in dict comprehensions
as proposed in PEP 572. I.e. in    ,  will be
evaluated before .
: Fix the PySys_Audit() call in .
: Remove an unnecessary Py_XINCREF in classobject.c.
: Fix a bug in the peephole optimizer that was not treating
correctly constant conditions with binary operators. Patch by Pablo
Galindo.
: Python now gets the absolute path of the script filename
specified on the command line (ex: âpython3 script.pyâ): the __file__
attribute of the __main__ module and sys.path[0] become an absolute path,
rather than a relative path.
: Pythonâs small object allocator (obmalloc.c) now allows (no
more than) one empty arena to remain available for immediate reuse,
without returning it to the OS.  This prevents thrashing in simple loops
where an arena could be created and destroyed anew on each iteration.
: The dispatching of type slots to special methods (for example
calling  when doing   ) has been made faster.
: Implemented separate vectorcall functions for every calling
convention of builtin functions and methods. This improves performance for
calls.
: Handle correctly negative line offsets in the peephole
optimizer. Patch by Pablo Galindo.
: Remove erroneous optimization for empty set differences.
: Implement PyBuffer_SizeFromFormat() function
(previously documented but not implemented): call struct.calcsize().
Patch by Joannah Nanjekye.
: Slot functions optimize any callable with
Py_TPFLAGS_METHOD_DESCRIPTOR instead of only instances of
.
: The slot tp_vectorcall_offset is inherited unconditionally
to support super().__call__() when the base class uses vectorcall.
: threading.get_native_id() now also supports NetBSD.
: Add threading.get_native_id() support for AIX. Patch by
M. Felt
:  has been optimized for boolean values.
: Add --upgrade-deps to venv module. Patch by Cooper Ry Lees
:  supports ~/.pdbrc in Windows 7. Patch by Tim Hopper
and Dan Lidral-Porter.
: Updated encodings: - Removed the âtis260â encoding, which was
an alias for the nonexistent âtactisâ codec. - Added âmac_centeuroâ as an
alias for the mac_latin2 encoding.
: The classmethod decorator can now wrap other
descriptors such as property objects.  Adapted from a patch written by
Graham Dumpleton.
: Improve speed of dictview intersection by directly using set
intersection logic. Patch by David Su.
: Prohibit parallel running of aclose() / asend() / athrow(). Fix
ag_running to reflect the actual running status of the AG.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Replace Py_FatalError() call with a regular
RuntimeError exception in float.__getformat__().

: Optimized math.floor(), math.ceil() and
math.trunc() for floats.

: Fixed a bug in the compiler that was causing to raise in the
presence of break statements and continue statements inside always false
while loops. Patch by Pablo Galindo.

: Optimized some set operations (e.g. , , and ) of
.    was slower than    but
they are almost same performance for now.

: "".replace("",   now returns  instead of an empty
string for all non-zero .  There are similar changes for
 and  objects.

: Fixed line numbers and column offsets for AST nodes for calls
without arguments in decorators.

: Fix a segmentation fault when using reverse iterators of empty
 objects. Patch by Donghee Na and Inada Naoki.

: ,  and
 objects allow now to export more than 
buffers at a time.

: Fixed a bug where the scope of named expressions was not being
resolved correctly in the presence of the  keyword. Patch by Pablo
Galindo.

: Activate the  macro for debug builds of the
interpreter (when  is set). Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 5)

: When the garbage collector makes a collection in which some
objects resurrect (they are reachable from outside the isolated cycles
after the finalizers have been executed), do not block the collection of
all objects that are still unreachable. Patch by Pablo Galindo and Tim
Peters.

: When cyclic garbage collection (gc) runs finalizers that
resurrect unreachable objects, the current gc run ends, without collecting
any cyclic trash.  However, the statistics reported by  and
get_stats() claimed that all cyclic trash found was collected, and
that the resurrected objects were collected.   Changed the stats to report
that none were collected.

: In debug mode, PyObject_GC_Track() now calls
tp_traverse() of the object type to ensure that the object is valid:
test that objects visited by tp_traverse() are valid.

: Remove unnecessary intersection and update set operation in
dictview with empty set. (Contributed by Donghee Na in .)

: Check the error from the systemâs underlying  or
.

: On FreeBSD, Python no longer calls fedisableexcept() at
startup to control the floating-point control mode. The call became
useless since FreeBSD 6: it became the default mode.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Fix a bug due to the interaction of weakrefs and the cyclic
garbage collector. We must clear any weakrefs in garbage in order to
prevent their callbacks from executing and causing a crash.

: Fix warnings options priority: PyConfig.warnoptions has the
highest priority, as stated in the .

: Predict BUILD_MAP_UNPACK_WITH_CALL -> CALL_FUNCTION_EX
opcode pairs in the main interpreter loop. Patch by Brandt Bucher.

: Improve error handling for the assert_has_calls and
assert_has_awaits methods of mocks. Fixed a bug where any errors
encountered while binding the expected calls to the mockâs spec were
silently swallowed, leading to misleading error output.

: Better control over symbol visibility is provided through use
of the visibility attributes available in gcc >= 4.0, provided in a
uniform way across POSIX and Windows. The POSIX build files have been
updated to compile with -fvisibility=hidden, minimising exported symbols.

: Optimized the  constructor and the
 method for the case when the argument is a dict.

: Python now dumps path configuration if it fails to import the
Python codecs of the filesystem and stdio encodings.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Allow to call async_generator_athrow().throw(...) even for
non-started async generator helper. It fixes annoying warning at the end
of asyncio.run() call.

: Fix an off-by-one error in PyState_AddModule that could cause
out-of-bounds memory access.

: The select module is now PEP-384 compliant and no longer has
static state

: ast module updated to PEP-384 and all statics removed

: The struct module is now PEP-384 compatible

: The random module is now PEP-384 compatible

: zlib module made PEP-384 compatible

: Make pwd extension module PEP-384 compatible

: grp module made PEP-384 compatible

: Make _posixsubprocess PEP-384 compatible

: Make termios extension module PEP-384 compatible

: Fixed comparing and creating of InterpreterID and ChannelID.

: Fix possible signed integer overflow when handling slices.
Patch by hongweipeng.

: Fixed silencing arbitrary errors if an attribute lookup fails
in several sites. Only AttributeError should be silenced.

: Optimize set difference_update for the case when the other set
is much larger than the base set.  (Suggested by Evgeny Kapun with code
contributed by Michele OrrÃ¹).

================================================================================

# Changelog - Core and Builtins (Part 8)

: The implementation of is_normalized() has
been greatly sped up on strings that arenât normalized, by implementing
the full normalization-quick-check algorithm from the Unicode standard.

: Adjust correctly the recursion level in the symtable generation
for named expressions. Patch by Pablo Galindo.

: The CHECK_SMALL_INT macro used inside
Object/longobject.c has been replaced with an explicit 
at each call site.

: Fix codecs.lookup() to normalize the encoding name the
same way than encodings.normalize_encoding(), except that
codecs.lookup() also converts the name to lower case.

: Fixed compilation of  and 
in the  block when the corresponding 
block contains  with a non-constant value.

: Improve import error message for partially initialized module
on circular  imports - by Anthony Sottile.

: Fix handling of negative indices in
 of . Patch by
Sergey Fedoseev.

: Slightly improve performance of
PyLong_FromUnsignedLong(), PyLong_FromUnsignedLongLong()
and PyLong_FromSize_t(). Patch by Sergey Fedoseev.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Ensure explicit relative imports from interactive sessions and
scripts (having no parent package) always raise ImportError, rather than
treating the current module as the package. Patch by Ben Lewis.

: Reverted : emitting SyntaxWarning instead
of DeprecationWarning for invalid escape sequences in string and
bytes literals.

: : As described in the PEP, assignment expressions now
raise SyntaxError when their interaction with comprehension scoping
results in an ambiguous target scope.

The TargetScopeError subclass originally proposed by the PEP has been
removed in favour of just raising regular syntax errors for the disallowed
cases.

: Fix potential use of uninitialized memory in os.wait3().

: Decoding bytes objects larger than 2GiB is faster and no longer
fails when a multibyte characters spans a chunk boundary.

: The  statement now works properly if the
AssertionError exception is being shadowed. Patch by Zackery Spytz.

: Removed object cache () for bound method objects.
Temporary bound method objects are less used than before thanks to the
LOAD_METHOD opcode and the _PyObject_VectorcallMethod C API.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Fixed minor inconsistency in list.__contains__(),
tuple.__contains__() and a few other places. The collectionâs item
is now always at the left and the needle is on the right of .

: Update differing exception between builtins.__import__()
and importlib.__import__().

: When adding a wrapper descriptor from one class to a different
class (for example, setting   str.__add__ on an 
subclass), an exception is correctly raised when the operator is called.

: Swap the positions of the posonlyargs and  parameters
in the constructor of ast.parameters nodes.

: Optimized pymalloc for non PGO build.

: Compute allocated pymalloc blocks inside
_Py_GetAllocatedBlocks().  This slows down _Py_GetAllocatedBlocks() but
gives a small speedup to _PyObject_Malloc() and _PyObject_Free().

: Fix sys.excepthook() and PyErr_Display() if a
filename is a bytes string. For example, for a SyntaxError exception where
the filename attribute is a bytes string.

: Fix SyntaxError indicator printing too many spaces for
multi-line strings - by Anthony Sottile.

: bytearray.extend() now correctly handles errors that
arise during iteration. Patch by Brandt Bucher.

================================================================================

# Changelog - Core and Builtins (Part 11)

: The undocumented sys.callstats() function has been removed.
Since Python 3.7, it was deprecated and always returned . It
required a special build option CALL_PROFILE which was already removed
in Python 3.7.

: Remove sys.getcheckinterval() and
sys.setcheckinterval() functions. They were deprecated since Python
3.2. Use sys.getswitchinterval() and sys.setswitchinterval()
instead. Remove also check_interval field of the
PyInterpreterState structure.

: In development mode and in debug build,  and 
arguments are now checked on string encoding and decoding operations.
Examples: , str.encode() and bytes.decode().

By default, for best performances, the  argument is only checked
at the first encoding/decoding error, and the  argument is
sometimes ignored for empty strings.

: Optimized decoding short ASCII string with UTF-8 and ascii
codecs. b"foo".decode() is about 15% faster.  Patch by Inada Naoki.

: Improved support of the surrogatepass error handler in the
UTF-8 and UTF-16 incremental decoders.

: , , codecs.open() and
fileinput.FileInput no longer accept  (âuniversal
newlineâ) in the file mode. This flag was deprecated since Python 3.3.

================================================================================

# Changelog - Core and Builtins (Part 12)

: Reverse evaluation order of key: value in dict comprehensions
as proposed in PEP 572. I.e. in    ,  will be
evaluated before .

: Fix the PySys_Audit() call in .

: Remove an unnecessary Py_XINCREF in classobject.c.

: Fix a bug in the peephole optimizer that was not treating
correctly constant conditions with binary operators. Patch by Pablo
Galindo.

: Python now gets the absolute path of the script filename
specified on the command line (ex: âpython3 script.pyâ): the __file__
attribute of the __main__ module and sys.path[0] become an absolute path,
rather than a relative path.

: Pythonâs small object allocator (obmalloc.c) now allows (no
more than) one empty arena to remain available for immediate reuse,
without returning it to the OS.  This prevents thrashing in simple loops
where an arena could be created and destroyed anew on each iteration.

: The dispatching of type slots to special methods (for example
calling  when doing   ) has been made faster.

: Implemented separate vectorcall functions for every calling
convention of builtin functions and methods. This improves performance for
calls.

================================================================================

# Changelog - Core and Builtins (Part 13)

: Handle correctly negative line offsets in the peephole
optimizer. Patch by Pablo Galindo.

: Remove erroneous optimization for empty set differences.

: Implement PyBuffer_SizeFromFormat() function
(previously documented but not implemented): call struct.calcsize().
Patch by Joannah Nanjekye.

: Slot functions optimize any callable with
Py_TPFLAGS_METHOD_DESCRIPTOR instead of only instances of
.

: The slot tp_vectorcall_offset is inherited unconditionally
to support super().__call__() when the base class uses vectorcall.

: threading.get_native_id() now also supports NetBSD.

: Add threading.get_native_id() support for AIX. Patch by
M. Felt

:  has been optimized for boolean values.

: Add --upgrade-deps to venv module. Patch by Cooper Ry Lees

:  supports ~/.pdbrc in Windows 7. Patch by Tim Hopper
and Dan Lidral-Porter.

: Updated encodings: - Removed the âtis260â encoding, which was
an alias for the nonexistent âtactisâ codec. - Added âmac_centeuroâ as an
alias for the mac_latin2 encoding.

: The classmethod decorator can now wrap other
descriptors such as property objects.  Adapted from a patch written by
Graham Dumpleton.

================================================================================

# Changelog - Core and Builtins (Part 14)

: Improve speed of dictview intersection by directly using set
intersection logic. Patch by David Su.

: Prohibit parallel running of aclose() / asend() / athrow(). Fix
ag_running to reflect the actual running status of the AG.

================================================================================

# Changelog - Library (Part 1)

List:
: The curses.update_lines_cols() function now returns
 instead of  on success.
: Update  messages for os.path.join() to
include os.PathLike objects as acceptable input types.
: Add a repr for subprocess.Popen objects. Patch by Andrey
Doroschenko.
: pydoc now recognizes and parses HTTPS URLs. Patch by python273.
: Prevent asyncio from crashing if parent  is not
called from a constructor of object derived from asyncio.Future.
:  now uses io.open_code() to trigger auditing
events.
: Allow opening pipes and other non-seekable files in append mode
with .
: Simplify the  usage message for .
: WeakSet is now registered as a collections.abc.MutableSet.
: logging: change RotatingHandler namer and rotator to
class-level attributes. This stops __init__ from setting them to None in
the case where a subclass defines them with eponymous methods.
: Add os.P_PIDFD constant, which may be passed to
os.waitid() to wait on a Linux process file descriptor.
: Add asyncio.PidfdChildWatcher, a Linux-specific child
watcher implementation that polls process file descriptors.
: Expose the Linux pidfd_open syscall as
os.pidfd_open().
: Added constants F_OFD_GETLK,
F_OFD_SETLK and F_OFD_SETLKW to the
 module. Patch by Donghee Na.
: Fixed seeking backward on an encrypted
zipfile.ZipExtFile.
: Add curses.get_escdelay(), curses.set_escdelay(),
curses.get_tabsize(), and curses.set_tabsize() functions - by
Anthony Sottile.
: Now fileConfig() correctly sets the .name
of handlers loaded.
: Add new cache_parameters() method for functools.lru_cache() to
better support pickling.
: asynci.ProactorEventLoop.close() now only calls
signal.set_wakeup_fd() in the main thread.
: The case the result of pathlib.WindowsPath.glob() matches
now the case of the pattern for literal parts.
: Remove misspelled attribute.  The 3.8 changelog noted that this
would be removed in 3.9.
: Fixed erroneous equality comparison in statistics.NormalDist().
: Added CLD_KILLED and CLD_STOPPED for
. Patch by Donghee Na.
: Fixed a bug in inspect.signature.bind() that was causing
it to fail when handling a keyword argument with same name as
positional-only parameter. Patch by Pablo Galindo.
: Fixed  and  to raise TypeError instead
of ValueError when the digestmod parameter, now required in 3.8, is
omitted. Also clarified the hmac module documentation and docstrings.
: Parameters  and  of os.sendfile() was renamed to
 and .
: Added support for setting the umask in the child process to the
subprocess module on POSIX systems.
: Revert PR 15522, which introduces a regression in
mimetypes.guess_type() due to improper handling of filenames as
urls.
: Fix  method for dataclasses.InitVar to
support typing objects, patch by Samuel Colvin.
: Add missing stat.S_IFDOOR, stat.S_IFPORT,
stat.S_IFWHT, stat.S_ISDOOR(), stat.S_ISPORT(), and
stat.S_ISWHT() values to the Python implementation of .
: Clarify docstrings of pathlib suffix(es)
: Nested subclasses of typing.NamedTuple are now
pickleable.
: Prevent  thrown by
_encoded_words.decode() when given an encoded-word with invalid
content-type encoding from propagating all the way to
email.message.get().
: Deprecated the  method in
_tkinter.TkappType in favour of the splitlist() method which
has more consistent and predictable behavior.
: Add smtplib.SMTPNotSupportedError to the 
exported names.
: sendfile() used in socket and shutil modules was raising
OverflowError for files >= 2GiB on 32-bit architectures.  (patch by
Giampaolo Rodola)
: Revert the new asyncio Streams API
: OS native encoding is now used for converting between Python
strings and Tcl objects.  This allows to display, copy and paste to
clipboard emoji and other non-BMP characters.  Converting strings from Tcl
to Python and back now never fails (except MemoryError).
: Correctly handle pause/resume reading of closed asyncio unix
pipe.
: Child mocks will now detect their type as either synchronous or
asynchronous, asynchronous child mocks will be AsyncMocks and synchronous
child mocks will be either MagicMock or Mock (depending on their parent
type).
: Removes _AwaitEvent from AsyncMock.
: Allow the rare code that wants to send invalid http requests
from the http.client library a way to do so.  The fixes for 
led to breakage for some projects that were relying on this ability to
test their own behavior in the face of bad requests.
: Deprecate opening  for writing
implicitly.  Always specify the  argument for writing.
: Any synchronous magic methods on an AsyncMock now return a
MagicMock. Any asynchronous magic methods on a MagicMock now return an
AsyncMock.
: Update the  parameter of os.pread() to accept
Py_ssize_t instead of .
: compileall has a higher default recursion limit and new
command-line arguments for path manipulation, symlinks handling, and
multiple optimization levels.
: asyncio: Fix inconsistent immediate Task cancellation
: The arguments for the builtin pow function are more
descriptive. They can now also be passed in as keywords.
: Improve efficiency in parts of email package by changing
while-pop to a for loop, using isdisjoint instead of set intersections.
: Constructors of NamedTuple and
 types now accept arbitrary keyword argument
names, including âclsâ, âselfâ, âtypenameâ, â_typenameâ, âfieldsâ and
â_fieldsâ.
: Add  to  . Patch by Tahia Khan.
: Fixed case-insensitive string comparison in
sqlite3.Row indexing.
: Changes AsyncMock call count and await count to be two
different counters. Now await count only counts when a coroutine has been
awaited, not when it has been called, and vice-versa. Update the
documentation around this.
: Fix default mock name in
unittest.mock.Mock.assert_called() exceptions. Patch by Abraham
Toriz Cruz.
: Fix a memory leak in comparison of sqlite3.Row
objects.
: _hashlib no longer calls obsolete OpenSSL initialization
function with OpenSSL 1.1.0+.
: Preserve subclassing in inspect.Signature.from_callable.
: Names of hashing algorithms from OpenSSL are now normalized to
follow Pythonâs naming conventions. For example OpenSSL uses sha3-512
instead of sha3_512 or blake2b512 instead of blake2b.
: Fix a bug in dis.findlinestarts() where it would return invalid
bytecode offsets. Document that a code objectâs co_lnotab can contain
invalid bytecode offsets.
: Add slots to  transport classes, which can reduce
memory usage.
: The _hashlib OpenSSL wrapper extension module is now PEP-384
compliant.
: hashlib constructors now support usedforsecurity flag to signal
that a hashing algorithm is not used in a security context.
: Fixes a potential incorrect AttributeError exception escaping
ZipFile.extract() in some unsupported input error situations.
: Remove obsolete copy of PBKDF2_HMAC_fast. All supported OpenSSL
versions contain a fast implementation.
: The OpenSSL hashlib wrapper uses a simpler implementation.
Several Macros and pointless caches are gone. The hash name now comes from
OpenSSLâs EVP. The algorithm name stays the same, except it is now always
lower case.
: Fix parent class check in protocols to correctly identify the
module that provides a builtin protocol, instead of assuming they all come
from the collections.abc module
: For , add a new coroutine
loop.shutdown_default_executor(). The new coroutine provides an API
to schedule an executor shutdown that waits on the threadpool to finish
closing. Also, asyncio.run() has been updated to utilize the new
coroutine. Patch by Kyle Stanley.
: Fixed regression bug for socket.getsockname() for non-CAN_ISOTP
AF_CAN address family sockets by returning a 1-tuple instead of string.
: Update parameter names on functions in importlib.metadata
matching the changes in the 0.22 release of importlib_metadata.
: The os.closewalk() implementation now uses the libc fdwalk()
API on platforms where it is available.
: Fixes AsyncMock so it doesnât crash when used with
AsyncContextManagers or AsyncIterators.
: Add warning to datetime.utctimetuple(),
datetime.utcnow() and datetime.utcfromtimestamp() .
: Allow passing a path-like object as 
argument to the http.server.SimpleHTTPRequestHandler class. Patch
by GÃ©ry Ogam.
: Update importlib.metadata with changes from importlib_metadata
0.21.
: Remove  check in AsyncMock that incorrectly
evaluated function specs as async objects but failed to evaluate classes
with  but no  attribute defined as async objects.
: Fix reference counters in the  module.
: Hide internal asyncio.Stream methods: feed_eof(), feed_data(),
set_exception() and set_transport().
: inspect.py now uses sys.exit() instead of exit()
: Added command-line interface for the  module.
: In , improved the  and 
methods for ForwardReferences.
: Fixed inspect.getattr_static() used isinstance while
it should avoid dynamic lookup.
: Update importlib.machinery.BuiltinImporter to use
loader._ORIGIN instead of a hardcoded value. Patch by Donghee Na.
: In importlib.metadata sync with importlib_metadata
0.20, clarifying behavior of  and fixing issue where only one
requirement was returned for requires() on  packages.
: weakref.WeakValueDictionary defines a local remove() function
used as callback for weak references. This function was created with a
closure. Modify the implementation to avoid the closure.
: Added the  option to ast.dump() which allows it
to produce a multiline indented output.
: Fixed a crash in the  iterator when re-enter it.
RuntimeError is now raised in this case.
: Fix a ctypes regression of Python 3.8. When a ctypes.Structure
is passed by copy to a function, ctypes internals created a temporary
object which had the side effect of calling the structure finalizer
(__del__) twice. The Python semantics requires a finalizer to be called
exactly once. Fix ctypes internals to no longer call the finalizer twice.
: _json.scanstring is now up to 3x faster when there are many
backslash escaped characters in the JSON string.
: Prevent shutil.rmtree exception when built on non-Windows
system without fd system call support, like older versions of macOS.
: Semaphores and BoundedSemaphores can now release more than one
waiting thread at a time.
: Subscripts to the unittest.mock.call objects now receive
the same chaining mechanism as any other custom attributes, so that the
following usage no longer raises a :
call().foo().__getitem__('bar')
Patch by blhsing

================================================================================

# Changelog - Library (Part 2)

: Fix C compiler warning caused by
distutils.ccompiler.CCompiler.has_function.
: Add  command to .
:  of buffered and text streams now silences only
expected exceptions when get the value of ânameâ and âmodeâ attributes.
: Add a total_nframe field to the traces collected by the
tracemalloc module. This field indicates the original number of frames
before it was truncated.
: Most features of the subprocess module now work again in
subinterpreters. Only preexec_fn is restricted in subinterpreters.
: Fix the rusage implementation of time.process_time() to
correctly report the sum of the system and user CPU time.
: Fix ast.dump() when call with incompletely initialized
node.
: Restores instantiation of Windows IOCP event loops from the
non-main thread.
: Add default implementation of the
ast.NodeVisitor.visit_Constant() method which emits a deprecation
warning and calls corresponding methods visit_Num(), visit_Str(),
etc.
: Update test_statistics.py to verify that the statistics module
works well for both C and Python implementations. Patch by Donghee Na
: Added a new status code to the http module: 451
UNAVAILABLE_FOR_LEGAL_REASONS
: Fix a segmentation fault that appeared when comparing instances
of datetime.timezone and datetime.tzinfo objects. Patch by Pablo
Galindo.
: Deprecate having random.seed() call hash on arbitrary types.
: Add optional keyword argument exit_on_error for
ArgumentParser.
: The faulthandler module no longer allocates its
alternative stack at Python startup. Now the stack is only allocated at
the first faulthandler usage.
: Fix a duplicated debug message when
smtplib.SMTP.connect() is called.
: venv: Donât generate unset variable warning on deactivate.
: Fix dataclasses.is_dataclass when given an instance that never
raises AttributeError in __getattr__.  That is, an object that returns
something for __dataclass_fields__ even if itâs not a dataclass.
: Fix  moduleâs socket.connect(address) function
being unable to establish connection in case of interrupted system call.
The problem was observed on all OSes which  system call can
take only non-negative integers and -1 as a timeout value.
: Optimizations for Fraction.__hash__ suggested by Tim Peters.
: Fix faulthandler.register(chain=True) stack. faulthandler
now allocates a dedicated stack of SIGSTKSZ*2 bytes, instead of just
 bytes. Calling the previous signal handler in faulthandler
signal handler uses more than  bytes of stack memory on some
platforms.
: Add C fastpath for statistics.NormalDist.inv_cdf() Patch by
Donghee Na
: Remove the deprecated method threading.Thread.isAlive().
Patch by Donghee Na.
: Add Fraction.as_integer_ratio() to match the corresponding
methods in bool, int, float, and decimal.
: Add an xml.etree.ElementTree.indent() function for
pretty-printing XML trees. Contributed by Stefan Behnel.
: Fix   hint in diff output when dealing with
tabs.  Patch by Anthony Sottile.
: In zipfile.Path, when adding implicit dirs, ensure that
ancestral directories are added and that duplicates are excluded.
: Renamed and documented test.bytecode_helper as
test.support.bytecode_helper. Patch by Joannah Nanjekye.
: Fix xgettext warnings in .
: writelines() method of io.BytesIO is now
slightly faster when many small lines are passed. Patch by Sergey
Fedoseev.
:  now uses importlib.resources.read_binary() to
read data instead of pkgutil.get_data(). Patch by Joannah Nanjekye.
: Mark calendar.py helper functions as being private.  The
follows PEP 8 guidance to maintain the style conventions in the module and
it addresses a known case of user confusion.
: Add definition of THREAD_STACK_SIZE for AIX in
Python/thread_pthread.h The default thread stacksize caused crashes with
the default recursion limit Patch by M Felt
: The logging.getLogger() API now returns the root logger when
passed the name ârootâ, whereas previously it returned a non-root logger
named ârootâ. This could affect cases where user code explicitly wants a
non-root logger named ârootâ, or instantiates a logger using
logging.getLogger(__name__) in some top-level module called âroot.pyâ.
: Fix the implementation of curses addch(str, color_pair):
pass the color pair to setcchar(), instead of always passing 0 as the
color pair.
: Fix performance regression on regular expression parsing with
huge character sets. Patch by Yann Vaginay.
: The function PyImport_GetModule() now ensures any
module it returns is fully initialized. Patch by Joannah Nanjekye.
: Fix IndexError in  package when trying to parse
invalid address fields starting with .
: The  module is deprecated and will be removed in
future versions of Python.
: Completing WSA* error codes in .
: Fixed comparisons of datetime.timedelta and
datetime.timezone.
: Synchronize importlib.metadata with importlib_metadata
0.19,
improving handling of EGG-INFO files and fixing a crash when entry point
names contained colons.
: Correct curses.unget_wch() error message.  Patch by
Anthony Sottile.
: Add is_relative_to() in  to determine
whether or not one path is relative to another.
: Fixed argparse.ArgumentParser.format_usage() for mutually
exclusive groups. Patch by Andrew Nester.
: Let math.dist() accept coordinates as sequences (or iterables)
rather than just tuples.
: Fixed ,  etc implementations in some
classes. They now return NotImplemented for unsupported type of
the other operand. This allows the other operand to play role (for example
the equality comparison with  will return
).
: Make Activate.ps1 Powershell script static to allow for signing
it.
: Update wheels bundled with ensurepip (pip 19.2.3 and setuptools
41.2.0)
: Bring consistency to venv shell activation scripts by always
using __VENV_PROMPT__.
: Allowed the pure Python implementation of
datetime.timezone to represent sub-minute offsets close to
minimum and maximum boundaries, specifically in the ranges (23:59, 24:00)
and (-23:59, 24:00). Patch by Ngalim Siregar
: In , use  instead of  for
thread safety.
: Make internal attributes for statistics.NormalDist() private.
: Fix NonCallableMock._call_matcher returning tuple instead
of  object when self._spec_signature exists. Patch by
Elizabeth Uselton
: Make     import only the expected
objects.
: Adding a value error when an invalid value in passed to nargs
Patch by Robert Leenders
: Exceptions from  now use the __qualname of the
enum class in the exception message instead of the .
: Fix IndexError when parsing email headers with unexpectedly
ending bare-quoted string value. Patch by Abhilash Raj.
: Make json.loads faster for long strings. (Patch by Marco
Paolini)
: Recognize âUTF-8â as a valid value for LC_CTYPE in
locale._parse_localename.
: Return NotImplemented in Python implementation of
 for  and 
when the other object being compared is not of the same type to match C
implementation. Patch by Karthikeyan Singaravelan.
: Record calls to parent when autospecced object is attached to a
mock using unittest.mock.attach_mock(). Patch by Karthikeyan
Singaravelan.
: âpython3 -m test -jN âtimeout=TIMEOUTâ now kills a worker
process if it runs longer than  seconds.
: Fix serialization of display name in originator or destination
address fields with both encoded words and special chars.
: Improve error reporting for corrupt zip files with bad zip64
extra data. Patch by Daniel Hillier.
: pickle.loads() no longer raises TypeError when the buffers
argument is set to None
: Correct behavior for zipfile.Path.parent when the path object
identifies a subdirectory.
: Fix the .col_offset attribute of nested 
instances which had a too large value in some situations.
: Fixes a possible hang when using a timeout on
subprocess.run() while capturing output.  If the child process spawned
its own children or otherwise connected its stdout or stderr handles with
another process, we could hang after the timeout was reached and our child
was killed when attempting to read final output from the pipes.
: Fix multiprocessing.util.get_temp_dir() finalizer: clear
also the âtempdirâ configuration of the current process, so next call to
get_temp_dir() will create a new temporary directory, rather than
reusing the removed temporary directory.
: The distutils bdist_wininst command is deprecated in Python
3.8, use bdist_wheel (wheel packages) instead.
: When Enum.__str__ is overridden in a derived class, the
override will be used by Enum.__format__ regardless of whether mixin
classes are present.
: http.client now enables TLS 1.3 post-handshake authentication
for default context or if a cert_file is passed to HTTPSConnection.
: Update vendorized expat version to 2.2.7.
: SSLContext.post_handshake_auth = True no longer sets
SSL_VERIFY_POST_HANDSHAKE verify flag for client connections. Although the
option is documented as ignored for clients, OpenSSL implicitly enables
cert chain validation when the flag is set.
: os.sched_setaffinity() now correctly handles errors that
arise during iteration over its  argument. Patch by Brandt Bucher.
: The os.getcwdb() function now uses the UTF-8 encoding on
Windows, rather than the ANSI code page: see  for the rationale.
The function is no longer deprecated on Windows.
: The sqlite3 module now raises TypeError, rather than
ValueError, if operation argument type is not str: execute(),
executemany() and calling a connection.
: Fix IndexError in parsing a header value ending unexpectedly.
Patch by Abhilash Raj.
: The  argument for statistics.quantiles() is now
positional only. The current name doesnât reflect that the argument can be
either a dataset or a distribution.  Marking the parameter as positional
avoids confusion and makes it possible to change the name later.
: Fix a bug that was causing the  module to fail if
the accelerator module was not available. Patch by Pablo Galindo.
:  now has support for
types.SimpleNamespace. Patch by Carl Bordum Hansen.
: An ArgumentParser with
allow_abbrev=False no longer disables grouping of short flags, such as
, but only disables abbreviation of long flags as documented. Patch
by Zac Hatfield-Dodds.
: unittest.mock.call() now preserves the order of keyword
arguments in repr output. Patch by Karthikeyan Singaravelan.
: Fix error unpickling datetime.time objects from Python 2 with
seconds>=24. Patch by Justin Blanchard.
: Add formal support for UDPLITE sockets. Support was present
before, but it is now easier to detect support with hasattr(socket,
'IPPROTO_UDPLITE') and there are constants defined for each of the
values needed: socket.IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV, and
UDPLITE_RECV_CSCOV. Patch by Gabe Appleton.
: Optimized functools.partial by using vectorcall.
: sqlite3.Connection.create_aggregate(),
sqlite3.Connection.create_function(),
sqlite3.Connection.set_authorizer(),
sqlite3.Connection.set_progress_handler()
sqlite3.Connection.set_trace_callback() methods lead to segfaults if
some of these methods are called twice with an equal object but not the
same. Now callbacks are stored more carefully. Patch by Aleksandr Balezin.
: The  argument of dataclasses.replace() is
positional-only now.
: Add the optional Linux SocketCAN Broadcast Manager constants,
used as flags to configure the BCM behaviour, in the socket module.  Patch
by Karl Ding.
: HTMLParser.unescape is removed.  It was undocumented and
deprecated since Python 3.4.
: Add .webmanifest -> application/manifest+json to list of
recognized file types and content type headers
: aifc.openfp() alias to aifc.open(), sunau.openfp()
alias to sunau.open(), and wave.openfp() alias to wave.open()
have been removed. They were deprecated since Python 3.7.
: Deprecated accepting floats with integral value (like )
in math.factorial().
: _dummy_thread and dummy_threading modules have been
removed. These modules were deprecated since Python 3.7 which requires
threading support.
: Email with single part but content-type set to multipart/*
doesnât raise AttributeError anymore.
: Use threadpool for reading from file for sendfile fallback
mode.
: Fix asyncio sendfile support when sendfile sends extra data in
fallback mode.
: ctypes.create_unicode_buffer() now also supports non-BMP
characters on platforms with 16-bit  (for example,
Windows and AIX).
: In a subinterpreter, spawning a daemon thread now raises an
exception. Daemon threads were never supported in subinterpreters.
Previously, the subinterpreter finalization crashed with a Python fatal
error if a daemon thread was still running.
: Allow pure Python implementation of  to work even
when the C  module is unavailable.
: Fix : module decompresses data incompletely. When
decompressing a FORMAT_ALONE format file, and it doesnât have the end
marker, sometimes the last one to dozens bytes canât be output. Patch by
Ma Lin.
: Fix RobotFileParser.crawl_delay() and
RobotFileParser.request_rate() to return  rather than raise
AttributeError when no relevant rule is defined in the robots.txt
file.  Patch by RÃ©mi Lapeyre.
: Change the format of feature_version to be a (major, minor)
tuple.
: Eliminate RuntimeError raised by
asyncio.all_tasks() if internal tasks weak set is changed by another
thread during iteration.
: _pyio.IOBase destructor now does nothing if getting
the  attribute fails to better mimic _io.IOBase
finalizer.
: Fix a race condition at Python shutdown when waiting for
threads. Wait until the Python thread state of all non-daemon threads get
deleted (join all non-daemon threads), rather than just wait until
non-daemon Python threads complete.
: Default values which cannot be represented as Python objects no
longer improperly represented as  in function signatures.
: Added  and  keyword parameters to
logging.basicConfig.
: Ensure cookies with  attribute are handled in
CookieJar.make_cookies().
: Fix an unintended ValueError from subprocess.run() when
checking for conflicting  and  or capture_output and
 or  args when they were explicitly provided but with
 values within a passed in  dict rather than as passed
directly by name. Patch contributed by RÃ©mi Lapeyre.
: The exception message for inspect.getfile() now correctly
reports the passed class rather than the builtins module.
: Give math.perm() a one argument form that means the same as
math.factorial().
: For math.perm(n, k), let k default to n, giving the same result
as factorial.
: Converted _collections._count_elements to use the Argument
Clinic.
: Do not always create a collections.deque in
asyncio.Lock.
: Speed-up statistics.fmean() by switching from a function to a
generator.
: Remove Enum._convert method, deprecated in 3.8.
: argparse._ActionsContainer.add_argument now throws error,
if someone accidentally pass FileType class object instead of instance of
FileType as  argument.
: The socket module now has the socket.send_fds() and
socket.recv.fds() methods. Contributed by Joannah Nanjekye, Shinya
Okano and Victor Stinner.
: Support running asyncio subprocesses when execution event loop
in a thread on UNIX.
: Lengthy email headers with UTF-8 characters are now properly
encoded when they are folded. Patch by Jeffrey Kintscher.
: Fixed a bug in email parsing where a message with invalid bytes
in content-transfer-encoding of a multipart message can cause an
AttributeError. Patch by Andrew Donnellan.
: pathlib.Path instanceâs rename and replace methods now return
the new Path instance.
: urllib.request.ProxyHandler now lowercases the keys of
the passed dictionary.
: Fix  on empty  object. Patch by
MickaÃ«l Schoentgen.
: Email headers containing RFC2047 encoded words are parsed
despite the missing whitespace, and a defect registered. Also missing
trailing whitespace after encoded words is now registered as a defect.
: Port test_datetime to VxWorks: skip zoneinfo tests on VxWorks
: Add parser for Message-ID header and add it to default
HeaderRegistry. This should prevent folding of Message-ID using RFC 2048
encoded words.
: Ensure method signature is used instead of constructor
signature of a class while asserting mock object against method calls.
Patch by Karthikeyan Singaravelan.
: posix.getgrouplist() now works correctly when the user belongs
to NGROUPS_MAX supplemental groups. Patch by Jeffrey Kintscher.
: Fix race condition in ThreadPoolExecutor when worker threads
are created during interpreter shutdown.
: Fix UserString.encode() to correctly return 
rather than a UserString instance.
: Deprecate xml.etree.ElementTree.Element.copy() in favor of
copy.copy().
Patch by Gordon P. Hemsley

================================================================================

# Changelog - Library (Part 3)

: Fix infinite loop in email header folding logic that would be
triggered when an email policyâs max_line_length is not long enough to
include the required markup and any values in the message. Patch by Paul
Ganssle
: Removed methods Element.getchildren(), Element.getiterator()
and ElementTree.getiterator() and the xml.etree.cElementTree module.
: Remove the old plistlib API deprecated in Python 3.4
: distutils sorts source file lists so that Extension .so files
build more reproducibly by default
: Ignore ValueError from  with interaction in
non-main thread.
: Added ,  and extra_groups parameters to
the subprocess.Popen constructor. Patch by Patrick McLean.
: Fix compile error when  headers conflicting included.
: Deprecate smtpd.MailmanProxy ready for future removal.
: shlex.shlex.punctuation_chars is now a read-only
property.
: Add support for boolean actions like  and 
to argparse. Patch contributed by RÃ©mi Lapeyre.
: Fixes a bug in  module when a multipart/form-data
request has no Content-Length header.
: The abstract base classes in collections.abc no longer
are exposed in the regular collections module.
: Distutils wonât check for rpmbuild in specified paths only.
: Division handling of PurePath now returns NotImplemented
instead of raising a TypeError when passed something other than an
instance of str or PurePath. Patch by Roger Aiudi.
: binascii.a2b_base64() is now up to 2 times faster. Patch
by Sergey Fedoseev.
: Add additional aliases for HP Roman 8. Patch by Michael Osipov.
: Fix uuid.getnode() on platforms with â.â as MAC Addr delimiter
as well fix for MAC Addr format that omits a leading 0 in MAC Addr values.
Currently, AIX is the only know platform with these settings. Patch by
Michael Felt.
: Add readlink(). Patch by Girts Folkmanis.
: Made urllib.parse.unquote() accept bytes in addition to
strings. Patch by Stein Karlsen.
: lib2to3 now recognizes expressions after  and  like
in   .
: Update shutil.move() function to allow for Path objects
to be used as source argument. Patch by Emily Morehouse and Maxwell
â5.13bâ McKinnon.
: Added __format__ to IPv4 and IPv6 classes.  Always outputs
a fully zero-padded string. Supports b/x/n modifiers (bin/hex/native
format). Native format for IPv4 is bin, native format for IPv6 is hex.
Also supports â#â and â_â modifiers.
: Fix urllib.parse.urlparse() with numeric paths. A string like
âpath:80â is no longer parsed as a path but as a scheme (âpathâ) and a
path (â80â).
: Fixed non-deterministic behavior related to mimetypes extension
mapping and module reinitialization.

================================================================================

# Changelog - Library (Part 4)

: The curses.update_lines_cols() function now returns
 instead of  on success.

: Update  messages for os.path.join() to
include os.PathLike objects as acceptable input types.

: Add a repr for subprocess.Popen objects. Patch by Andrey
Doroschenko.

: pydoc now recognizes and parses HTTPS URLs. Patch by python273.

: Prevent asyncio from crashing if parent  is not
called from a constructor of object derived from asyncio.Future.

:  now uses io.open_code() to trigger auditing
events.

: Allow opening pipes and other non-seekable files in append mode
with .

: Simplify the  usage message for .

: WeakSet is now registered as a collections.abc.MutableSet.

: logging: change RotatingHandler namer and rotator to
class-level attributes. This stops __init__ from setting them to None in
the case where a subclass defines them with eponymous methods.

: Add os.P_PIDFD constant, which may be passed to
os.waitid() to wait on a Linux process file descriptor.

: Add asyncio.PidfdChildWatcher, a Linux-specific child
watcher implementation that polls process file descriptors.

: Expose the Linux pidfd_open syscall as
os.pidfd_open().

================================================================================

# Changelog - Library (Part 5)

: Added constants F_OFD_GETLK,
F_OFD_SETLK and F_OFD_SETLKW to the
 module. Patch by Donghee Na.

: Fixed seeking backward on an encrypted
zipfile.ZipExtFile.

: Add curses.get_escdelay(), curses.set_escdelay(),
curses.get_tabsize(), and curses.set_tabsize() functions - by
Anthony Sottile.

: Now fileConfig() correctly sets the .name
of handlers loaded.

: Add new cache_parameters() method for functools.lru_cache() to
better support pickling.

: asynci.ProactorEventLoop.close() now only calls
signal.set_wakeup_fd() in the main thread.

: The case the result of pathlib.WindowsPath.glob() matches
now the case of the pattern for literal parts.

: Remove misspelled attribute.  The 3.8 changelog noted that this
would be removed in 3.9.

: Fixed erroneous equality comparison in statistics.NormalDist().

: Added CLD_KILLED and CLD_STOPPED for
. Patch by Donghee Na.

: Fixed a bug in inspect.signature.bind() that was causing
it to fail when handling a keyword argument with same name as
positional-only parameter. Patch by Pablo Galindo.

================================================================================

# Changelog - Library (Part 6)

: Fixed  and  to raise TypeError instead
of ValueError when the digestmod parameter, now required in 3.8, is
omitted. Also clarified the hmac module documentation and docstrings.

: Parameters  and  of os.sendfile() was renamed to
 and .

: Added support for setting the umask in the child process to the
subprocess module on POSIX systems.

: Revert PR 15522, which introduces a regression in
mimetypes.guess_type() due to improper handling of filenames as
urls.

: Fix  method for dataclasses.InitVar to
support typing objects, patch by Samuel Colvin.

: Add missing stat.S_IFDOOR, stat.S_IFPORT,
stat.S_IFWHT, stat.S_ISDOOR(), stat.S_ISPORT(), and
stat.S_ISWHT() values to the Python implementation of .

: Clarify docstrings of pathlib suffix(es)

: Nested subclasses of typing.NamedTuple are now
pickleable.

: Prevent  thrown by
_encoded_words.decode() when given an encoded-word with invalid
content-type encoding from propagating all the way to
email.message.get().

: Deprecated the  method in
_tkinter.TkappType in favour of the splitlist() method which
has more consistent and predictable behavior.

: Add smtplib.SMTPNotSupportedError to the 
exported names.

================================================================================

# Changelog - Library (Part 7)

: sendfile() used in socket and shutil modules was raising
OverflowError for files >= 2GiB on 32-bit architectures.  (patch by
Giampaolo Rodola)

: Revert the new asyncio Streams API

: OS native encoding is now used for converting between Python
strings and Tcl objects.  This allows to display, copy and paste to
clipboard emoji and other non-BMP characters.  Converting strings from Tcl
to Python and back now never fails (except MemoryError).

: Correctly handle pause/resume reading of closed asyncio unix
pipe.

: Child mocks will now detect their type as either synchronous or
asynchronous, asynchronous child mocks will be AsyncMocks and synchronous
child mocks will be either MagicMock or Mock (depending on their parent
type).

: Removes _AwaitEvent from AsyncMock.

: Allow the rare code that wants to send invalid http requests
from the http.client library a way to do so.  The fixes for 
led to breakage for some projects that were relying on this ability to
test their own behavior in the face of bad requests.

: Deprecate opening  for writing
implicitly.  Always specify the  argument for writing.

================================================================================

# Changelog - Library (Part 8)

: Any synchronous magic methods on an AsyncMock now return a
MagicMock. Any asynchronous magic methods on a MagicMock now return an
AsyncMock.

: Update the  parameter of os.pread() to accept
Py_ssize_t instead of .

: compileall has a higher default recursion limit and new
command-line arguments for path manipulation, symlinks handling, and
multiple optimization levels.

: asyncio: Fix inconsistent immediate Task cancellation

: The arguments for the builtin pow function are more
descriptive. They can now also be passed in as keywords.

: Improve efficiency in parts of email package by changing
while-pop to a for loop, using isdisjoint instead of set intersections.

: Constructors of NamedTuple and
 types now accept arbitrary keyword argument
names, including âclsâ, âselfâ, âtypenameâ, â_typenameâ, âfieldsâ and
â_fieldsâ.

: Add  to  . Patch by Tahia Khan.

: Fixed case-insensitive string comparison in
sqlite3.Row indexing.

: Changes AsyncMock call count and await count to be two
different counters. Now await count only counts when a coroutine has been
awaited, not when it has been called, and vice-versa. Update the
documentation around this.

================================================================================

# Changelog - Library (Part 9)

: Fix default mock name in
unittest.mock.Mock.assert_called() exceptions. Patch by Abraham
Toriz Cruz.

: Fix a memory leak in comparison of sqlite3.Row
objects.

: _hashlib no longer calls obsolete OpenSSL initialization
function with OpenSSL 1.1.0+.

: Preserve subclassing in inspect.Signature.from_callable.

: Names of hashing algorithms from OpenSSL are now normalized to
follow Pythonâs naming conventions. For example OpenSSL uses sha3-512
instead of sha3_512 or blake2b512 instead of blake2b.

: Fix a bug in dis.findlinestarts() where it would return invalid
bytecode offsets. Document that a code objectâs co_lnotab can contain
invalid bytecode offsets.

: Add slots to  transport classes, which can reduce
memory usage.

: The _hashlib OpenSSL wrapper extension module is now PEP-384
compliant.

: hashlib constructors now support usedforsecurity flag to signal
that a hashing algorithm is not used in a security context.

: Fixes a potential incorrect AttributeError exception escaping
ZipFile.extract() in some unsupported input error situations.

: Remove obsolete copy of PBKDF2_HMAC_fast. All supported OpenSSL
versions contain a fast implementation.

================================================================================

# Changelog - Library (Part 10)

: The OpenSSL hashlib wrapper uses a simpler implementation.
Several Macros and pointless caches are gone. The hash name now comes from
OpenSSLâs EVP. The algorithm name stays the same, except it is now always
lower case.

: Fix parent class check in protocols to correctly identify the
module that provides a builtin protocol, instead of assuming they all come
from the collections.abc module

: For , add a new coroutine
loop.shutdown_default_executor(). The new coroutine provides an API
to schedule an executor shutdown that waits on the threadpool to finish
closing. Also, asyncio.run() has been updated to utilize the new
coroutine. Patch by Kyle Stanley.

: Fixed regression bug for socket.getsockname() for non-CAN_ISOTP
AF_CAN address family sockets by returning a 1-tuple instead of string.

: Update parameter names on functions in importlib.metadata
matching the changes in the 0.22 release of importlib_metadata.

: The os.closewalk() implementation now uses the libc fdwalk()
API on platforms where it is available.

: Fixes AsyncMock so it doesnât crash when used with
AsyncContextManagers or AsyncIterators.

================================================================================

# Changelog - Library (Part 11)

: Add warning to datetime.utctimetuple(),
datetime.utcnow() and datetime.utcfromtimestamp() .

: Allow passing a path-like object as 
argument to the http.server.SimpleHTTPRequestHandler class. Patch
by GÃ©ry Ogam.

: Update importlib.metadata with changes from importlib_metadata
0.21.

: Remove  check in AsyncMock that incorrectly
evaluated function specs as async objects but failed to evaluate classes
with  but no  attribute defined as async objects.

: Fix reference counters in the  module.

: Hide internal asyncio.Stream methods: feed_eof(), feed_data(),
set_exception() and set_transport().

: inspect.py now uses sys.exit() instead of exit()

: Added command-line interface for the  module.

: In , improved the  and 
methods for ForwardReferences.

: Fixed inspect.getattr_static() used isinstance while
it should avoid dynamic lookup.

: Update importlib.machinery.BuiltinImporter to use
loader._ORIGIN instead of a hardcoded value. Patch by Donghee Na.

: In importlib.metadata sync with importlib_metadata
0.20, clarifying behavior of  and fixing issue where only one
requirement was returned for requires() on  packages.

================================================================================

# Changelog - Library (Part 12)

: weakref.WeakValueDictionary defines a local remove() function
used as callback for weak references. This function was created with a
closure. Modify the implementation to avoid the closure.

: Added the  option to ast.dump() which allows it
to produce a multiline indented output.

: Fixed a crash in the  iterator when re-enter it.
RuntimeError is now raised in this case.

: Fix a ctypes regression of Python 3.8. When a ctypes.Structure
is passed by copy to a function, ctypes internals created a temporary
object which had the side effect of calling the structure finalizer
(__del__) twice. The Python semantics requires a finalizer to be called
exactly once. Fix ctypes internals to no longer call the finalizer twice.

: _json.scanstring is now up to 3x faster when there are many
backslash escaped characters in the JSON string.

: Prevent shutil.rmtree exception when built on non-Windows
system without fd system call support, like older versions of macOS.

: Semaphores and BoundedSemaphores can now release more than one
waiting thread at a time.

================================================================================

# Changelog - Library (Part 13)

: Subscripts to the unittest.mock.call objects now receive
the same chaining mechanism as any other custom attributes, so that the
following usage no longer raises a :

call().foo().__getitem__('bar')

: Fix C compiler warning caused by
distutils.ccompiler.CCompiler.has_function.

:  of buffered and text streams now silences only
expected exceptions when get the value of ânameâ and âmodeâ attributes.

: Add a total_nframe field to the traces collected by the
tracemalloc module. This field indicates the original number of frames
before it was truncated.

: Most features of the subprocess module now work again in
subinterpreters. Only preexec_fn is restricted in subinterpreters.

: Fix the rusage implementation of time.process_time() to
correctly report the sum of the system and user CPU time.

: Fix ast.dump() when call with incompletely initialized
node.

: Restores instantiation of Windows IOCP event loops from the
non-main thread.

: Add default implementation of the
ast.NodeVisitor.visit_Constant() method which emits a deprecation
warning and calls corresponding methods visit_Num(), visit_Str(),
etc.

================================================================================

# Changelog - Library (Part 14)

: Update test_statistics.py to verify that the statistics module
works well for both C and Python implementations. Patch by Donghee Na

: Added a new status code to the http module: 451
UNAVAILABLE_FOR_LEGAL_REASONS

: Fix a segmentation fault that appeared when comparing instances
of datetime.timezone and datetime.tzinfo objects. Patch by Pablo
Galindo.

: Deprecate having random.seed() call hash on arbitrary types.

: Add optional keyword argument exit_on_error for
ArgumentParser.

: The faulthandler module no longer allocates its
alternative stack at Python startup. Now the stack is only allocated at
the first faulthandler usage.

: Fix a duplicated debug message when
smtplib.SMTP.connect() is called.

: venv: Donât generate unset variable warning on deactivate.

: Fix dataclasses.is_dataclass when given an instance that never
raises AttributeError in __getattr__.  That is, an object that returns
something for __dataclass_fields__ even if itâs not a dataclass.

================================================================================

# Changelog - Library (Part 15)

: Fix  moduleâs socket.connect(address) function
being unable to establish connection in case of interrupted system call.
The problem was observed on all OSes which  system call can
take only non-negative integers and -1 as a timeout value.

: Optimizations for Fraction.__hash__ suggested by Tim Peters.

: Fix faulthandler.register(chain=True) stack. faulthandler
now allocates a dedicated stack of SIGSTKSZ*2 bytes, instead of just
 bytes. Calling the previous signal handler in faulthandler
signal handler uses more than  bytes of stack memory on some
platforms.

: Add C fastpath for statistics.NormalDist.inv_cdf() Patch by
Donghee Na

: Remove the deprecated method threading.Thread.isAlive().
Patch by Donghee Na.

: Add Fraction.as_integer_ratio() to match the corresponding
methods in bool, int, float, and decimal.

: Add an xml.etree.ElementTree.indent() function for
pretty-printing XML trees. Contributed by Stefan Behnel.

: Fix   hint in diff output when dealing with
tabs.  Patch by Anthony Sottile.

: In zipfile.Path, when adding implicit dirs, ensure that
ancestral directories are added and that duplicates are excluded.

================================================================================

# Changelog - Library (Part 16)

: Renamed and documented test.bytecode_helper as
test.support.bytecode_helper. Patch by Joannah Nanjekye.

: Fix xgettext warnings in .

: writelines() method of io.BytesIO is now
slightly faster when many small lines are passed. Patch by Sergey
Fedoseev.

:  now uses importlib.resources.read_binary() to
read data instead of pkgutil.get_data(). Patch by Joannah Nanjekye.

: Mark calendar.py helper functions as being private.  The
follows PEP 8 guidance to maintain the style conventions in the module and
it addresses a known case of user confusion.

: Add definition of THREAD_STACK_SIZE for AIX in
Python/thread_pthread.h The default thread stacksize caused crashes with
the default recursion limit Patch by M Felt

: The logging.getLogger() API now returns the root logger when
passed the name ârootâ, whereas previously it returned a non-root logger
named ârootâ. This could affect cases where user code explicitly wants a
non-root logger named ârootâ, or instantiates a logger using
logging.getLogger(__name__) in some top-level module called âroot.pyâ.

================================================================================

# Changelog - Library (Part 17)

: Fix the implementation of curses addch(str, color_pair):
pass the color pair to setcchar(), instead of always passing 0 as the
color pair.

: Fix performance regression on regular expression parsing with
huge character sets. Patch by Yann Vaginay.

: The function PyImport_GetModule() now ensures any
module it returns is fully initialized. Patch by Joannah Nanjekye.

: Fix IndexError in  package when trying to parse
invalid address fields starting with .

: The  module is deprecated and will be removed in
future versions of Python.

: Completing WSA* error codes in .

: Fixed comparisons of datetime.timedelta and
datetime.timezone.

: Synchronize importlib.metadata with importlib_metadata
0.19,
improving handling of EGG-INFO files and fixing a crash when entry point
names contained colons.

: Correct curses.unget_wch() error message.  Patch by
Anthony Sottile.

: Add is_relative_to() in  to determine
whether or not one path is relative to another.

: Fixed argparse.ArgumentParser.format_usage() for mutually
exclusive groups. Patch by Andrew Nester.

: Let math.dist() accept coordinates as sequences (or iterables)
rather than just tuples.

================================================================================

# Changelog - Library (Part 18)

: Fixed ,  etc implementations in some
classes. They now return NotImplemented for unsupported type of
the other operand. This allows the other operand to play role (for example
the equality comparison with  will return
).

: Make Activate.ps1 Powershell script static to allow for signing
it.

: Update wheels bundled with ensurepip (pip 19.2.3 and setuptools
41.2.0)

: Bring consistency to venv shell activation scripts by always
using __VENV_PROMPT__.

: Allowed the pure Python implementation of
datetime.timezone to represent sub-minute offsets close to
minimum and maximum boundaries, specifically in the ranges (23:59, 24:00)
and (-23:59, 24:00). Patch by Ngalim Siregar

: In , use  instead of  for
thread safety.

: Make internal attributes for statistics.NormalDist() private.

: Fix NonCallableMock._call_matcher returning tuple instead
of  object when self._spec_signature exists. Patch by
Elizabeth Uselton

: Make     import only the expected
objects.

: Adding a value error when an invalid value in passed to nargs
Patch by Robert Leenders

: Exceptions from  now use the __qualname of the
enum class in the exception message instead of the .

================================================================================

# Changelog - Library (Part 19)

: Fix IndexError when parsing email headers with unexpectedly
ending bare-quoted string value. Patch by Abhilash Raj.

: Make json.loads faster for long strings. (Patch by Marco
Paolini)

: Recognize âUTF-8â as a valid value for LC_CTYPE in
locale._parse_localename.

: Return NotImplemented in Python implementation of
 for  and 
when the other object being compared is not of the same type to match C
implementation. Patch by Karthikeyan Singaravelan.

: Record calls to parent when autospecced object is attached to a
mock using unittest.mock.attach_mock(). Patch by Karthikeyan
Singaravelan.

: âpython3 -m test -jN âtimeout=TIMEOUTâ now kills a worker
process if it runs longer than  seconds.

: Fix serialization of display name in originator or destination
address fields with both encoded words and special chars.

: Improve error reporting for corrupt zip files with bad zip64
extra data. Patch by Daniel Hillier.

: pickle.loads() no longer raises TypeError when the buffers
argument is set to None

: Correct behavior for zipfile.Path.parent when the path object
identifies a subdirectory.

: Fix the .col_offset attribute of nested 
instances which had a too large value in some situations.

================================================================================

# Changelog - Library (Part 20)

: Fixes a possible hang when using a timeout on
subprocess.run() while capturing output.  If the child process spawned
its own children or otherwise connected its stdout or stderr handles with
another process, we could hang after the timeout was reached and our child
was killed when attempting to read final output from the pipes.

: Fix multiprocessing.util.get_temp_dir() finalizer: clear
also the âtempdirâ configuration of the current process, so next call to
get_temp_dir() will create a new temporary directory, rather than
reusing the removed temporary directory.

: The distutils bdist_wininst command is deprecated in Python
3.8, use bdist_wheel (wheel packages) instead.

: When Enum.__str__ is overridden in a derived class, the
override will be used by Enum.__format__ regardless of whether mixin
classes are present.

: http.client now enables TLS 1.3 post-handshake authentication
for default context or if a cert_file is passed to HTTPSConnection.

: Update vendorized expat version to 2.2.7.

================================================================================

# Changelog - Library (Part 21)

: SSLContext.post_handshake_auth = True no longer sets
SSL_VERIFY_POST_HANDSHAKE verify flag for client connections. Although the
option is documented as ignored for clients, OpenSSL implicitly enables
cert chain validation when the flag is set.

: os.sched_setaffinity() now correctly handles errors that
arise during iteration over its  argument. Patch by Brandt Bucher.

: The os.getcwdb() function now uses the UTF-8 encoding on
Windows, rather than the ANSI code page: see  for the rationale.
The function is no longer deprecated on Windows.

: The sqlite3 module now raises TypeError, rather than
ValueError, if operation argument type is not str: execute(),
executemany() and calling a connection.

: Fix IndexError in parsing a header value ending unexpectedly.
Patch by Abhilash Raj.

: The  argument for statistics.quantiles() is now
positional only. The current name doesnât reflect that the argument can be
either a dataset or a distribution.  Marking the parameter as positional
avoids confusion and makes it possible to change the name later.

: Fix a bug that was causing the  module to fail if
the accelerator module was not available. Patch by Pablo Galindo.

================================================================================

# Changelog - Library (Part 22)

:  now has support for
types.SimpleNamespace. Patch by Carl Bordum Hansen.

: An ArgumentParser with
allow_abbrev=False no longer disables grouping of short flags, such as
, but only disables abbreviation of long flags as documented. Patch
by Zac Hatfield-Dodds.

: unittest.mock.call() now preserves the order of keyword
arguments in repr output. Patch by Karthikeyan Singaravelan.

: Fix error unpickling datetime.time objects from Python 2 with
seconds>=24. Patch by Justin Blanchard.

: Add formal support for UDPLITE sockets. Support was present
before, but it is now easier to detect support with hasattr(socket,
'IPPROTO_UDPLITE') and there are constants defined for each of the
values needed: socket.IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV, and
UDPLITE_RECV_CSCOV. Patch by Gabe Appleton.

: Optimized functools.partial by using vectorcall.

================================================================================

# Changelog - Library (Part 23)

: sqlite3.Connection.create_aggregate(),
sqlite3.Connection.create_function(),
sqlite3.Connection.set_authorizer(),
sqlite3.Connection.set_progress_handler()
sqlite3.Connection.set_trace_callback() methods lead to segfaults if
some of these methods are called twice with an equal object but not the
same. Now callbacks are stored more carefully. Patch by Aleksandr Balezin.

: The  argument of dataclasses.replace() is
positional-only now.

: Add the optional Linux SocketCAN Broadcast Manager constants,
used as flags to configure the BCM behaviour, in the socket module.  Patch
by Karl Ding.

: HTMLParser.unescape is removed.  It was undocumented and
deprecated since Python 3.4.

: Add .webmanifest -> application/manifest+json to list of
recognized file types and content type headers

: aifc.openfp() alias to aifc.open(), sunau.openfp()
alias to sunau.open(), and wave.openfp() alias to wave.open()
have been removed. They were deprecated since Python 3.7.

: Deprecated accepting floats with integral value (like )
in math.factorial().

: _dummy_thread and dummy_threading modules have been
removed. These modules were deprecated since Python 3.7 which requires
threading support.

================================================================================

# Changelog - Library (Part 24)

: Email with single part but content-type set to multipart/*
doesnât raise AttributeError anymore.

: Use threadpool for reading from file for sendfile fallback
mode.

: Fix asyncio sendfile support when sendfile sends extra data in
fallback mode.

: ctypes.create_unicode_buffer() now also supports non-BMP
characters on platforms with 16-bit  (for example,
Windows and AIX).

: In a subinterpreter, spawning a daemon thread now raises an
exception. Daemon threads were never supported in subinterpreters.
Previously, the subinterpreter finalization crashed with a Python fatal
error if a daemon thread was still running.

: Allow pure Python implementation of  to work even
when the C  module is unavailable.

: Fix : module decompresses data incompletely. When
decompressing a FORMAT_ALONE format file, and it doesnât have the end
marker, sometimes the last one to dozens bytes canât be output. Patch by
Ma Lin.

: Fix RobotFileParser.crawl_delay() and
RobotFileParser.request_rate() to return  rather than raise
AttributeError when no relevant rule is defined in the robots.txt
file.  Patch by RÃ©mi Lapeyre.

: Change the format of feature_version to be a (major, minor)
tuple.

================================================================================

# Changelog - Library (Part 25)

: Eliminate RuntimeError raised by
asyncio.all_tasks() if internal tasks weak set is changed by another
thread during iteration.

: _pyio.IOBase destructor now does nothing if getting
the  attribute fails to better mimic _io.IOBase
finalizer.

: Fix a race condition at Python shutdown when waiting for
threads. Wait until the Python thread state of all non-daemon threads get
deleted (join all non-daemon threads), rather than just wait until
non-daemon Python threads complete.

: Default values which cannot be represented as Python objects no
longer improperly represented as  in function signatures.

: Added  and  keyword parameters to
logging.basicConfig.

: Ensure cookies with  attribute are handled in
CookieJar.make_cookies().

: Fix an unintended ValueError from subprocess.run() when
checking for conflicting  and  or capture_output and
 or  args when they were explicitly provided but with
 values within a passed in  dict rather than as passed
directly by name. Patch contributed by RÃ©mi Lapeyre.

: The exception message for inspect.getfile() now correctly
reports the passed class rather than the builtins module.

: Give math.perm() a one argument form that means the same as
math.factorial().

================================================================================

# Changelog - Library (Part 26)

: For math.perm(n, k), let k default to n, giving the same result
as factorial.

: Converted _collections._count_elements to use the Argument
Clinic.

: Do not always create a collections.deque in
asyncio.Lock.

: Speed-up statistics.fmean() by switching from a function to a
generator.

: Remove Enum._convert method, deprecated in 3.8.

: argparse._ActionsContainer.add_argument now throws error,
if someone accidentally pass FileType class object instead of instance of
FileType as  argument.

: The socket module now has the socket.send_fds() and
socket.recv.fds() methods. Contributed by Joannah Nanjekye, Shinya
Okano and Victor Stinner.

: Support running asyncio subprocesses when execution event loop
in a thread on UNIX.

: Lengthy email headers with UTF-8 characters are now properly
encoded when they are folded. Patch by Jeffrey Kintscher.

: Fixed a bug in email parsing where a message with invalid bytes
in content-transfer-encoding of a multipart message can cause an
AttributeError. Patch by Andrew Donnellan.

: pathlib.Path instanceâs rename and replace methods now return
the new Path instance.

: urllib.request.ProxyHandler now lowercases the keys of
the passed dictionary.

================================================================================

# Changelog - Library (Part 27)

: Fix  on empty  object. Patch by
MickaÃ«l Schoentgen.

: Email headers containing RFC2047 encoded words are parsed
despite the missing whitespace, and a defect registered. Also missing
trailing whitespace after encoded words is now registered as a defect.

: Port test_datetime to VxWorks: skip zoneinfo tests on VxWorks

: Add parser for Message-ID header and add it to default
HeaderRegistry. This should prevent folding of Message-ID using RFC 2048
encoded words.

: Ensure method signature is used instead of constructor
signature of a class while asserting mock object against method calls.
Patch by Karthikeyan Singaravelan.

: posix.getgrouplist() now works correctly when the user belongs
to NGROUPS_MAX supplemental groups. Patch by Jeffrey Kintscher.

: Fix race condition in ThreadPoolExecutor when worker threads
are created during interpreter shutdown.

: Fix UserString.encode() to correctly return 
rather than a UserString instance.

: Deprecate xml.etree.ElementTree.Element.copy() in favor of
copy.copy().

Patch by Gordon P. Hemsley

================================================================================

# Changelog - Library (Part 28)

: Fix infinite loop in email header folding logic that would be
triggered when an email policyâs max_line_length is not long enough to
include the required markup and any values in the message. Patch by Paul
Ganssle

: Removed methods Element.getchildren(), Element.getiterator()
and ElementTree.getiterator() and the xml.etree.cElementTree module.

: Remove the old plistlib API deprecated in Python 3.4

: distutils sorts source file lists so that Extension .so files
build more reproducibly by default

: Ignore ValueError from  with interaction in
non-main thread.

: Added ,  and extra_groups parameters to
the subprocess.Popen constructor. Patch by Patrick McLean.

: Fix compile error when  headers conflicting included.

: Deprecate smtpd.MailmanProxy ready for future removal.

: shlex.shlex.punctuation_chars is now a read-only
property.

: Add support for boolean actions like  and 
to argparse. Patch contributed by RÃ©mi Lapeyre.

: Fixes a bug in  module when a multipart/form-data
request has no Content-Length header.

: The abstract base classes in collections.abc no longer
are exposed in the regular collections module.

: Distutils wonât check for rpmbuild in specified paths only.

================================================================================

# Changelog - Library (Part 29)

: Division handling of PurePath now returns NotImplemented
instead of raising a TypeError when passed something other than an
instance of str or PurePath. Patch by Roger Aiudi.

: binascii.a2b_base64() is now up to 2 times faster. Patch
by Sergey Fedoseev.

: Add additional aliases for HP Roman 8. Patch by Michael Osipov.

: Fix uuid.getnode() on platforms with â.â as MAC Addr delimiter
as well fix for MAC Addr format that omits a leading 0 in MAC Addr values.
Currently, AIX is the only know platform with these settings. Patch by
Michael Felt.

: Add readlink(). Patch by Girts Folkmanis.

: Made urllib.parse.unquote() accept bytes in addition to
strings. Patch by Stein Karlsen.

: lib2to3 now recognizes expressions after  and  like
in   .

: Update shutil.move() function to allow for Path objects
to be used as source argument. Patch by Emily Morehouse and Maxwell
â5.13bâ McKinnon.

: Added __format__ to IPv4 and IPv6 classes.  Always outputs
a fully zero-padded string. Supports b/x/n modifiers (bin/hex/native
format). Native format for IPv4 is bin, native format for IPv6 is hex.
Also supports â#â and â_â modifiers.

================================================================================

# Changelog - Library (Part 30)

: Fix urllib.parse.urlparse() with numeric paths. A string like
âpath:80â is no longer parsed as a path but as a scheme (âpathâ) and a
path (â80â).

: Fixed non-deterministic behavior related to mimetypes extension
mapping and module reinitialization.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Explicitly mention abc support in functools.singledispatch
: Provides more details about the interaction between
 and CPythonâs runtime, focusing just on the C-API.  This
includes cautions about where  should and shouldnât be
called.
: Modernize  examples from %-formatting to f-strings.
: Document the fact that RuntimeError is raised if
 is called in a subinterpreter.
: Add Brazilian Portuguese to the language switcher at Python
Documentation website.
: Add list of no-longer-escaped chars to re.escape documentation
: Modernized the plistlib documentation
: Fix example usage of PyModule_AddObject() to properly
handle errors.
: Fix a dead link in the distutils API Reference.
: Warn more strongly and clearly about pickle insecurity
: Added a link to dateutil.parser.isoparse in the
datetime.fromisoformat documentation. Patch by Paul Ganssle
: Deprecate info(), geturl(), getcode() methods in favor of the
headers, url, and status properties, respectively, for HTTPResponse and
addinfourl. Also deprecate the code attribute of addinfourl in favor of
the status attribute. Patch by Ashwin Ramaswami
: Mention frame.f_trace in sys.settrace() docs.
: Make PyThreadState_DeleteCurrent() Internal.
: Beginning edits to Whatsnew 3.8
: Stop recommending getopt in the tutorial for command line
argument parsing and promote argparse.
: Remove implementation-specific behaviour of how venvâs
Deactivate works.
: Fix wording of arguments for  in
urllib.request
: Add a brief note to indicate that any new
sys.implementation required attributes must go through the PEP
process.
: Documented that mailbox.Maildir constructor doesnât
attempt to verify the maildir folder layout correctness. Patch by
Sviatoslav Sydorenko.
: Fix  examples to insert any newly created modules
via importlib.util.module_from_spec() immediately into sys.modules instead
of after calling loader.exec_module().
Thanks to Benjamin Mintz for finding the bug.

================================================================================

# Changelog - Documentation (Part 2)

: Slash (â/â) is now part of syntax.
: Fix PyList_GetItem index description to include 0.
: Replace the dead link to the Tkinter 8.5 reference by John
Shipman, New Mexico Tech, with a link to the archive.org copy.
: Added possible exceptions to the description of os.chdir().
: Documented that in datetime.datetime.strptime(), the
leading zero in some two-digit formats is optional. Patch by Mike Gleen.
: Add decompression pitfalls to zipfile module documentation.
: In the documentation for difflib, a note was added explicitly
warning that the results of SequenceMatcherâs ratio method may depend on
the order of the input strings.
: Restructured the  docs in the interest of making
them more user-friendly and improving readability. Patch by Brad Solomon.
: Make C-API docs clear about what the âmainâ interpreter is.
: The documentation for decimal string formatting using the
 specifier has been updated to reflect the correct exponential
notation cutoff point. Original patch contributed by Tuomas Suutari.
: Document and test that  functions may accept a
path-like object for the  argument.  Patch by Anthony
Sottile.
: Added a note about the intended use of code in .pth files.
: Fix the Doc/Makefile regarding PAPER environment variable and
PDF builds
: Add documentation for tkinter modules

================================================================================

# Changelog - Documentation (Part 3)

: Explicitly mention abc support in functools.singledispatch

: Provides more details about the interaction between
 and CPythonâs runtime, focusing just on the C-API.  This
includes cautions about where  should and shouldnât be
called.

: Modernize  examples from %-formatting to f-strings.

: Document the fact that RuntimeError is raised if
 is called in a subinterpreter.

: Add Brazilian Portuguese to the language switcher at Python
Documentation website.

: Add list of no-longer-escaped chars to re.escape documentation

: Modernized the plistlib documentation

: Fix example usage of PyModule_AddObject() to properly
handle errors.

: Fix a dead link in the distutils API Reference.

: Warn more strongly and clearly about pickle insecurity

: Added a link to dateutil.parser.isoparse in the
datetime.fromisoformat documentation. Patch by Paul Ganssle

: Deprecate info(), geturl(), getcode() methods in favor of the
headers, url, and status properties, respectively, for HTTPResponse and
addinfourl. Also deprecate the code attribute of addinfourl in favor of
the status attribute. Patch by Ashwin Ramaswami

: Mention frame.f_trace in sys.settrace() docs.

: Make PyThreadState_DeleteCurrent() Internal.

================================================================================

# Changelog - Documentation (Part 4)

: Beginning edits to Whatsnew 3.8

: Stop recommending getopt in the tutorial for command line
argument parsing and promote argparse.

: Remove implementation-specific behaviour of how venvâs
Deactivate works.

: Fix wording of arguments for  in
urllib.request

: Add a brief note to indicate that any new
sys.implementation required attributes must go through the PEP
process.

: Documented that mailbox.Maildir constructor doesnât
attempt to verify the maildir folder layout correctness. Patch by
Sviatoslav Sydorenko.

: Fix  examples to insert any newly created modules
via importlib.util.module_from_spec() immediately into sys.modules instead
of after calling loader.exec_module().

Thanks to Benjamin Mintz for finding the bug.

: Slash (â/â) is now part of syntax.

: Fix PyList_GetItem index description to include 0.

: Replace the dead link to the Tkinter 8.5 reference by John
Shipman, New Mexico Tech, with a link to the archive.org copy.

: Added possible exceptions to the description of os.chdir().

: Documented that in datetime.datetime.strptime(), the
leading zero in some two-digit formats is optional. Patch by Mike Gleen.

: Add decompression pitfalls to zipfile module documentation.

================================================================================

# Changelog - Documentation (Part 5)

: In the documentation for difflib, a note was added explicitly
warning that the results of SequenceMatcherâs ratio method may depend on
the order of the input strings.

: Restructured the  docs in the interest of making
them more user-friendly and improving readability. Patch by Brad Solomon.

: Make C-API docs clear about what the âmainâ interpreter is.

: The documentation for decimal string formatting using the
 specifier has been updated to reflect the correct exponential
notation cutoff point. Original patch contributed by Tuomas Suutari.

: Document and test that  functions may accept a
path-like object for the  argument.  Patch by Anthony
Sottile.

: Added a note about the intended use of code in .pth files.

: Fix the Doc/Makefile regarding PAPER environment variable and
PDF builds

: Add documentation for tkinter modules

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_communicate() of test_asyncio.test_subprocess: use
support.LONG_TIMEOUT (5 minutes), instead of just 1 minute.
: Add timeout constants to test.support:
LOOPBACK_TIMEOUT,
INTERNET_TIMEOUT,
SHORT_TIMEOUT and
LONG_TIMEOUT.
: test.regrtest now uses process groups in the multiprocessing
mode (-jN command line option) if process groups are available: if
os.setsid() and os.killpg() functions are available.
: Fix a race condition in test_asyncio.test_start_tls_server_1().
Previously, there was a race condition between the test main() function
which replaces the protocol and the test ServerProto protocol which sends
ANSWER once it gets HELLO. Now, only the test main() function is
responsible to send data, ServerProto no longer sends data.
: Fix test_compileall.test_compile_dir_maxlevels() on Windows
without long path support: only create 3 subdirectories instead of between
20 and 100 subdirectories.
: On timeout, regrtest no longer attempts to call
popen.communicate() again: it can hang until all child processes using
stdout and stderr pipes completes. Kill the worker process and ignores its
output. Change also the faulthandler timeout of the main process from 1
minute to 5 minutes, for Python slowest buildbots.
: Fix test_gdb for Link Time Optimization (LTO) builds.
: test_ssl now handles disabled TLS/SSL versions better.
OpenSSLâs crypto policy and run-time settings are recognized and tests for
disabled versions are skipped. Tests also accept more TLS minimum_versions
for platforms that override OpenSSLâs default with strict settings.
: The private keys for test_ssl were encrypted with 3DES in
traditional PKCS#5 format. 3DES and the digest algorithm of PKCS#5 are
blocked by some strict crypto policies. Use PKCS#8 format with AES256
encryption instead.
: test.support now has a helper function to check for
availability of a hash digest function. Several tests are refactored avoid
MD5 and use SHA256 instead. Other tests are marked to use MD5 and skipped
when MD5 is disabled.
: Multiprocessing test test_mymanager() now also expects
-SIGTERM, not only exitcode 0. BaseManager._finalize_manager() sends
SIGTERM to the manager process if it takes longer than 1 second to stop,
which happens on slow buildbots.
: Multiprocessing tests: increase
test_queue_feeder_donot_stop_onexc() timeout from 1 to 60 seconds.
: Test with OpenSSL 1.1.1d
: Increase code coverage for multiprocessing.shared_memory.
: Add tests for json.dump(â¦, skipkeys=True). Patch by Donghee
Na.
: Enhance regrtest multiprocess timeout: write a message when
killing a worker process, catch popen.kill() and popen.wait() exceptions,
put a timeout on the second call to popen.communicate().
: Add tests for ROT-13 codec.
: Added tests for PyDateTime_ macros of
the C API of the  module. Patch by Joannah Nanjekye.
: Fix test_shared_memory_cleaned_after_process_termination name
handling
: Add test.support.catch_threading_exception(): context
manager catching threading.Thread exception using
threading.excepthook().
: test_concurrent_futures now explicitly stops the ForkServer
instance if itâs running.
: multiprocessing tests now stop the ForkServer instance if itâs
running: close the âaliveâ file descriptor to ask the server to stop and
then remove its UNIX address.
: test_distutils.test_build_ext() is now able to remove the
temporary directory on Windows: donât import the newly built C extension
(âxxâ) in the current process, but test it in a separated process.
: test_concurrent_futures now cleans up multiprocessing to remove
immediately temporary directories created by
multiprocessing.util.get_temp_dir().
: test_winconsoleio doesnât leak a temporary file anymore: use
tempfile.TemporaryFile() to remove it when the test completes.
: multiprocessing tests now explicitly call _run_finalizers()
to immediately remove temporary directories created by tests.
: urllib.request tests now call
urlcleanup() to remove temporary files created by
urlretrieve() tests and to clear the  global variable set
by  and functions calling indirectly .
: Remove Lib/test/outstanding_bugs.py.
: Fix test failures when IPv6 is unavailable or disabled.
: Replace deprecated method ârandom.chooseâ with ârandom.choiceâ
in âtest_pkg_import.pyâ.
: Remove no longer necessary code from c locale coercion tests
: Fix test_shutil to no longer leak temporary files.
: Fix test_wsgiref.testEnviron() to no longer depend on the
environment variables (donât fail if âXâ variable is set).
: Fix test_os.test_chown(): use os.getgroups() rather than
grp.getgrall() to get groups. Rename also the test to test_chown_gid().
: Add âcleanup option to python3 -m test to remove
test_python_* directories of previous failed jobs. Add âmake
cleantestâ to run    .
: test_gdb no longer fails if it gets an âunexpectedâ message on
stderr: it now ignores stderr. The purpose of test_gdb is to test that
python-gdb.py commands work as expected, not to test gdb.
: Avoid TimeoutError in test_asyncio: test_start_tls_server_1()
: Fix test_asyncio ProactorLoopCtrlC: join the thread to prevent
leaking a running thread and leaking a reference.
: Fix test.support.catch_unraisable_exception(): its
__exit__() method now ignores unraisable exception raised when clearing
its unraisable attribute.
: regrtest now uses sys.unraisablehook() to mark a test as
âenvironment alteredâ (ENV_CHANGED) if it emits an âunraisable exceptionâ.
Moreover, regrtest logs a warning in this case.
Use    --fail-env-changed to catch unraisable exceptions
in tests.

================================================================================

# Changelog - Tests (Part 2)

: Fix assertions in test_close and
test_events_mask_overflow devpoll tests.
: Rewrite _PyObject_IsFreed() unit tests.
: test_venv.test_multiprocessing() now explicitly calls
pool.terminate() to wait until the pool completes.
: Make test_ssl pass with LibreSSL. LibreSSL handles minimum and
maximum TLS version differently than OpenSSL.
: Make test_source_encoding.test_issue2301 implementation
independent. The test will work now for both CPython and IronPython.
: Update test.test_importlib.test_abc to test
find_spec().
: Modify the test_uuid logic to test when a program is available
AND can be used to obtain a MACADDR as basis for an UUID. Patch by M. Felt
: Fallback to a default reason when unittest.skip() is
uncalled. Patch by Naitree Zhu.

: Fix test_communicate() of test_asyncio.test_subprocess: use
support.LONG_TIMEOUT (5 minutes), instead of just 1 minute.

: Add timeout constants to test.support:
LOOPBACK_TIMEOUT,
INTERNET_TIMEOUT,
SHORT_TIMEOUT and
LONG_TIMEOUT.

: test.regrtest now uses process groups in the multiprocessing
mode (-jN command line option) if process groups are available: if
os.setsid() and os.killpg() functions are available.

================================================================================

# Changelog - Tests (Part 3)

: Fix a race condition in test_asyncio.test_start_tls_server_1().
Previously, there was a race condition between the test main() function
which replaces the protocol and the test ServerProto protocol which sends
ANSWER once it gets HELLO. Now, only the test main() function is
responsible to send data, ServerProto no longer sends data.

: Fix test_compileall.test_compile_dir_maxlevels() on Windows
without long path support: only create 3 subdirectories instead of between
20 and 100 subdirectories.

: On timeout, regrtest no longer attempts to call
popen.communicate() again: it can hang until all child processes using
stdout and stderr pipes completes. Kill the worker process and ignores its
output. Change also the faulthandler timeout of the main process from 1
minute to 5 minutes, for Python slowest buildbots.

: Fix test_gdb for Link Time Optimization (LTO) builds.

: test_ssl now handles disabled TLS/SSL versions better.
OpenSSLâs crypto policy and run-time settings are recognized and tests for
disabled versions are skipped. Tests also accept more TLS minimum_versions
for platforms that override OpenSSLâs default with strict settings.

================================================================================

# Changelog - Tests (Part 4)

: The private keys for test_ssl were encrypted with 3DES in
traditional PKCS#5 format. 3DES and the digest algorithm of PKCS#5 are
blocked by some strict crypto policies. Use PKCS#8 format with AES256
encryption instead.

: test.support now has a helper function to check for
availability of a hash digest function. Several tests are refactored avoid
MD5 and use SHA256 instead. Other tests are marked to use MD5 and skipped
when MD5 is disabled.

: Multiprocessing test test_mymanager() now also expects
-SIGTERM, not only exitcode 0. BaseManager._finalize_manager() sends
SIGTERM to the manager process if it takes longer than 1 second to stop,
which happens on slow buildbots.

: Multiprocessing tests: increase
test_queue_feeder_donot_stop_onexc() timeout from 1 to 60 seconds.

: Test with OpenSSL 1.1.1d

: Increase code coverage for multiprocessing.shared_memory.

: Add tests for json.dump(â¦, skipkeys=True). Patch by Donghee
Na.

: Enhance regrtest multiprocess timeout: write a message when
killing a worker process, catch popen.kill() and popen.wait() exceptions,
put a timeout on the second call to popen.communicate().

: Add tests for ROT-13 codec.

================================================================================

# Changelog - Tests (Part 5)

: Added tests for PyDateTime_ macros of
the C API of the  module. Patch by Joannah Nanjekye.

: Fix test_shared_memory_cleaned_after_process_termination name
handling

: Add test.support.catch_threading_exception(): context
manager catching threading.Thread exception using
threading.excepthook().

: test_concurrent_futures now explicitly stops the ForkServer
instance if itâs running.

: multiprocessing tests now stop the ForkServer instance if itâs
running: close the âaliveâ file descriptor to ask the server to stop and
then remove its UNIX address.

: test_distutils.test_build_ext() is now able to remove the
temporary directory on Windows: donât import the newly built C extension
(âxxâ) in the current process, but test it in a separated process.

: test_concurrent_futures now cleans up multiprocessing to remove
immediately temporary directories created by
multiprocessing.util.get_temp_dir().

: test_winconsoleio doesnât leak a temporary file anymore: use
tempfile.TemporaryFile() to remove it when the test completes.

: multiprocessing tests now explicitly call _run_finalizers()
to immediately remove temporary directories created by tests.

================================================================================

# Changelog - Tests (Part 6)

: urllib.request tests now call
urlcleanup() to remove temporary files created by
urlretrieve() tests and to clear the  global variable set
by  and functions calling indirectly .

: Remove Lib/test/outstanding_bugs.py.

: Fix test failures when IPv6 is unavailable or disabled.

: Replace deprecated method ârandom.chooseâ with ârandom.choiceâ
in âtest_pkg_import.pyâ.

: Remove no longer necessary code from c locale coercion tests

: Fix test_shutil to no longer leak temporary files.

: Fix test_wsgiref.testEnviron() to no longer depend on the
environment variables (donât fail if âXâ variable is set).

: Fix test_os.test_chown(): use os.getgroups() rather than
grp.getgrall() to get groups. Rename also the test to test_chown_gid().

: Add âcleanup option to python3 -m test to remove
test_python_* directories of previous failed jobs. Add âmake
cleantestâ to run    .

: test_gdb no longer fails if it gets an âunexpectedâ message on
stderr: it now ignores stderr. The purpose of test_gdb is to test that
python-gdb.py commands work as expected, not to test gdb.

: Avoid TimeoutError in test_asyncio: test_start_tls_server_1()

================================================================================

# Changelog - Tests (Part 7)

: Fix test_asyncio ProactorLoopCtrlC: join the thread to prevent
leaking a running thread and leaking a reference.

: Fix test.support.catch_unraisable_exception(): its
__exit__() method now ignores unraisable exception raised when clearing
its unraisable attribute.

: regrtest now uses sys.unraisablehook() to mark a test as
âenvironment alteredâ (ENV_CHANGED) if it emits an âunraisable exceptionâ.
Moreover, regrtest logs a warning in this case.

Use    --fail-env-changed to catch unraisable exceptions
in tests.

: Fix assertions in test_close and
test_events_mask_overflow devpoll tests.

: Rewrite _PyObject_IsFreed() unit tests.

: test_venv.test_multiprocessing() now explicitly calls
pool.terminate() to wait until the pool completes.

: Make test_ssl pass with LibreSSL. LibreSSL handles minimum and
maximum TLS version differently than OpenSSL.

: Make test_source_encoding.test_issue2301 implementation
independent. The test will work now for both CPython and IronPython.

: Update test.test_importlib.test_abc to test
find_spec().

: Modify the test_uuid logic to test when a program is available
AND can be used to obtain a MACADDR as basis for an UUID. Patch by M. Felt

================================================================================

# Changelog - Tests (Part 8)

: Fallback to a default reason when unittest.skip() is
uncalled. Patch by Naitree Zhu.

================================================================================

# Changelog - Build (Part 1)

List:
: On Windows, build scripts will now recognize and use python.exe
from an active virtual env.
: Fix _hashlib build when Blake2 is disabled, but OpenSSL
supports it.
: Misc/python-config.in now uses  for all still
existing sysconfig.get_config_var() calls. Patch by Joannah Nanjekye.
: Fix stdatomic.h header check for ICC compiler: the ICC
implementation lacks atomic_uintptr_t type which is needed by Python.
: In Solaris family, we must be sure to use -D_REENTRANT.
Patch by JesÃºs Cea AviÃ³n.
: Locate llvm-profdata and  binaries using
AC_PATH_TOOL rather than AC_PATH_TARGET_TOOL.
: The .gitignore file systematically keeps ârootedâ, with
a non-trailing slash, all the rules that are meant to apply to files in a
specific place in the repo.  Previously, when the intended file to ignore
happened to be at the root of the repo, weâd most often accidentally also
ignore files and directories with the same name anywhere in the tree.
: The Tools/unicode/makeunicodedata.py script, which is
used for converting information from the Unicode Character Database into
generated code and data used by the methods of  and by the
unicodedata module, now handles each characterâs data as a
 with named attributes, rather than a length-18 list of
different fields.
: The .gitignore file no longer applies to any files that
are in fact tracked in the Git repository.  Patch by Greg Price.
: Change âcleanâ makefile target to also clean the program guided
optimization (PGO) data.  Previously you would have to use âmake cleanâ
and âmake profile-removalâ, or âmake clobberâ.
: Mark some individual tests to skip when âpgo is used.  The
tests marked increase the PGO task time significantly and likely donât
help improve optimization of the final executable.
: Reduce the number of unit tests run for the PGO generation
task.  This speeds up the task by a factor of about 15x.  Running the full
unit test suite is slow.  This change may result in a slightly less
optimized build since not as many code branches will be executed.  If you
are willing to wait for the much slower build, the old behavior can be
restored using â./configure [..] PROFILE_TASK=â-m test âpgo-extendedââ.
We make no guarantees as to which PGO task set produces a faster build.
Users who care should run their own relevant benchmarks as results can
depend on the environment, workload, and compiler tool chain.
:   no longer installs wininst-*.exe files
used by distutils bdist_wininst: bdist_wininst only works on Windows.
: Many  functions like
PyRun_String() were no longer exported in libpython38.dll by
mistake. Export them again to fix the ABI compatibility.
: Enables use of SSE2 instructions in Windows 32-bit build.
: Update optional extension module detection for AIX. ossaudiodev
and spwd are not applicable for AIX, and are no longer reported as
missing. 3rd-party packaging of ncurses (with ASIS support) conflicts with
officially supported AIX curses library, so configure AIX to use
libcurses.a. However, skip trying to build _curses_panel.
patch by M Felt

================================================================================

# Changelog - Build (Part 2)

: On Windows, build scripts will now recognize and use python.exe
from an active virtual env.

: Fix _hashlib build when Blake2 is disabled, but OpenSSL
supports it.

: Misc/python-config.in now uses  for all still
existing sysconfig.get_config_var() calls. Patch by Joannah Nanjekye.

: Fix stdatomic.h header check for ICC compiler: the ICC
implementation lacks atomic_uintptr_t type which is needed by Python.

: In Solaris family, we must be sure to use -D_REENTRANT.
Patch by JesÃºs Cea AviÃ³n.

: Locate llvm-profdata and  binaries using
AC_PATH_TOOL rather than AC_PATH_TARGET_TOOL.

: The .gitignore file systematically keeps ârootedâ, with
a non-trailing slash, all the rules that are meant to apply to files in a
specific place in the repo.  Previously, when the intended file to ignore
happened to be at the root of the repo, weâd most often accidentally also
ignore files and directories with the same name anywhere in the tree.

================================================================================

# Changelog - Build (Part 3)

: The Tools/unicode/makeunicodedata.py script, which is
used for converting information from the Unicode Character Database into
generated code and data used by the methods of  and by the
unicodedata module, now handles each characterâs data as a
 with named attributes, rather than a length-18 list of
different fields.

: The .gitignore file no longer applies to any files that
are in fact tracked in the Git repository.  Patch by Greg Price.

: Change âcleanâ makefile target to also clean the program guided
optimization (PGO) data.  Previously you would have to use âmake cleanâ
and âmake profile-removalâ, or âmake clobberâ.

: Mark some individual tests to skip when âpgo is used.  The
tests marked increase the PGO task time significantly and likely donât
help improve optimization of the final executable.

================================================================================

# Changelog - Build (Part 4)

: Reduce the number of unit tests run for the PGO generation
task.  This speeds up the task by a factor of about 15x.  Running the full
unit test suite is slow.  This change may result in a slightly less
optimized build since not as many code branches will be executed.  If you
are willing to wait for the much slower build, the old behavior can be
restored using â./configure [..] PROFILE_TASK=â-m test âpgo-extendedââ.
We make no guarantees as to which PGO task set produces a faster build.
Users who care should run their own relevant benchmarks as results can
depend on the environment, workload, and compiler tool chain.

:   no longer installs wininst-*.exe files
used by distutils bdist_wininst: bdist_wininst only works on Windows.

: Many  functions like
PyRun_String() were no longer exported in libpython38.dll by
mistake. Export them again to fix the ABI compatibility.

: Enables use of SSE2 instructions in Windows 32-bit build.

================================================================================

# Changelog - Build (Part 5)

: Update optional extension module detection for AIX. ossaudiodev
and spwd are not applicable for AIX, and are no longer reported as
missing. 3rd-party packaging of ncurses (with ASIS support) conflicts with
officially supported AIX curses library, so configure AIX to use
libcurses.a. However, skip trying to build _curses_panel.

================================================================================

# Changelog - Windows (Part 1)

List:
: Fixes HTML Help shortcut when Windows is not installed to C
drive
: Ensure ntpath.realpath() correctly resolves relative paths.
: Restores the internal C headers that were missing from the
nuget.org and Microsoft Store packages.
: Remove pythonw.exe dependency on the Microsoft C++ runtime.
: Fix error message in activate.bat
: Ensures  launcher reads correct registry key.
: Fixes ntpath.realpath failing on sys.executable.
: Update bundled OpenSSL to 1.1.1d
: Reduce overhead when using multiprocessing in a Windows virtual
environment.
: Allow py.exe launcher to locate installations from the
Microsoft Store and improve display of active virtual environments.
: The  is no longer included in the Nuget package.
: Set Windows 8 as the minimum required version for API support
: os.cpu_count() now returns active processors rather than
maximum processors.
: venv activate.bat now works when the existing variables contain
double quote characters.
: Prevent error calling os.path.realpath() on .
: Fix case sensitivity in test_pathlib and test_ntpath.
: Fixes distutils not finding vcruntime140.dll with only the v142
toolset installed.
: Ensure command-line and unattend.xml setting override
previously detected states in Windows installer.
: Fixes  failing for block devices on Windows
: Fixes potential crash when calling os.readlink() (or
indirectly through realpath()) on a file that is not a
supported link.
: Improve the implementation of winerror_to_errno().
:  no longer fails for standard streams on Windows
7.
: The  file on Windows now returns True from
 and a valid result from  with
 set.
: Enable support for following symlinks in os.realpath().
: Treat all name surrogate reparse points on Windows in
os.lstat() and other reparse points as regular files in
.
: Add the module name in the formatted error message when DLL
load fail happens during module import in
_PyImport_FindSharedFuncptrWindows(). Patch by Srinivas Nyayapati.
: Trying to import the  module on Windows will
result in an ImportError with a message explaining that the module
isnât supported on Windows. On other platforms, if the underlying
 module is not available, the ImportError will include a message
explaining the problem.
: Fixes the icons used for file associations to the Microsoft
Store package.
: Fix use of registry values to launch Python from Microsoft
Store app.
: Fix memory leak on Windows in creating an SSLContext object or
running urllib.request.urlopen('https://...').
: Switch Windows Store packageâs pip to use bundled
 instead of  variable.
: Officially drop support for creating bdist_wininst installers
on non-Windows systems.
: Include the FORMAT_MESSAGE_IGNORE_INSERTS flag in
FormatMessageW() calls.
: Fixes path for sys.executable when running from the
Microsoft Store.
: Donât collect unfinished processes with subprocess._active
on Windows to cleanup later. Patch by Ruslan Kuprieiev.
: Removes libpython38.a from standard Windows distribution.
: Update Windows builds to use SQLite 3.28.0.
: On Windows,  no longer creates an inheritable fd
when handling a character file.
: Ensure time.tzname is correct on Windows when the active
code page is set to CP_UTF7 or CP_UTF8.
: Make winreg.REG_MULTI_SZ support zero-length strings.
: Replace use of strcasecmp() for the system function
_stricmp(). Patch by Minmin Gong.
: Add native Bluetooth RFCOMM support to socket module.

================================================================================

# Changelog - Windows (Part 2)

: Fixes HTML Help shortcut when Windows is not installed to C
drive

: Ensure ntpath.realpath() correctly resolves relative paths.

: Restores the internal C headers that were missing from the
nuget.org and Microsoft Store packages.

: Remove pythonw.exe dependency on the Microsoft C++ runtime.

: Fix error message in activate.bat

: Ensures  launcher reads correct registry key.

: Fixes ntpath.realpath failing on sys.executable.

: Update bundled OpenSSL to 1.1.1d

: Reduce overhead when using multiprocessing in a Windows virtual
environment.

: Allow py.exe launcher to locate installations from the
Microsoft Store and improve display of active virtual environments.

: The  is no longer included in the Nuget package.

: Set Windows 8 as the minimum required version for API support

: os.cpu_count() now returns active processors rather than
maximum processors.

: venv activate.bat now works when the existing variables contain
double quote characters.

: Prevent error calling os.path.realpath() on .

: Fix case sensitivity in test_pathlib and test_ntpath.

: Fixes distutils not finding vcruntime140.dll with only the v142
toolset installed.

================================================================================

# Changelog - Windows (Part 3)

: Ensure command-line and unattend.xml setting override
previously detected states in Windows installer.

: Fixes  failing for block devices on Windows

: Fixes potential crash when calling os.readlink() (or
indirectly through realpath()) on a file that is not a
supported link.

: Improve the implementation of winerror_to_errno().

:  no longer fails for standard streams on Windows
7.

: The  file on Windows now returns True from
 and a valid result from  with
 set.

: Enable support for following symlinks in os.realpath().

: Treat all name surrogate reparse points on Windows in
os.lstat() and other reparse points as regular files in
.

: Add the module name in the formatted error message when DLL
load fail happens during module import in
_PyImport_FindSharedFuncptrWindows(). Patch by Srinivas Nyayapati.

: Trying to import the  module on Windows will
result in an ImportError with a message explaining that the module
isnât supported on Windows. On other platforms, if the underlying
 module is not available, the ImportError will include a message
explaining the problem.

: Fixes the icons used for file associations to the Microsoft
Store package.

================================================================================

# Changelog - Windows (Part 4)

: Fix use of registry values to launch Python from Microsoft
Store app.

: Fix memory leak on Windows in creating an SSLContext object or
running urllib.request.urlopen('https://...').

: Switch Windows Store packageâs pip to use bundled
 instead of  variable.

: Officially drop support for creating bdist_wininst installers
on non-Windows systems.

: Include the FORMAT_MESSAGE_IGNORE_INSERTS flag in
FormatMessageW() calls.

: Fixes path for sys.executable when running from the
Microsoft Store.

: Donât collect unfinished processes with subprocess._active
on Windows to cleanup later. Patch by Ruslan Kuprieiev.

: Removes libpython38.a from standard Windows distribution.

: Update Windows builds to use SQLite 3.28.0.

: On Windows,  no longer creates an inheritable fd
when handling a character file.

: Ensure time.tzname is correct on Windows when the active
code page is set to CP_UTF7 or CP_UTF8.

: Make winreg.REG_MULTI_SZ support zero-length strings.

: Replace use of strcasecmp() for the system function
_stricmp(). Patch by Minmin Gong.

: Add native Bluetooth RFCOMM support to socket module.

================================================================================

# Changelog - macOS (Part 1)

List:
: Updated OpenSSL to 1.1.1d in macOS installer.
: Move Azure Pipelines to latest VM versions and make macOS tests
optional
: Increase the default stack size of threads from 5MB to 16MB on
macOS, to match the stack size of the main thread. This avoids crashes on
deep recursion in threads.
: Avoid test suite failures on macOS by no longer calling
resource.setrlimit to increase the process stack size limit at runtime.
The runtime change is no longer needed since the interpreter is being
built with a larger default stack size.
: Update macOS installer to use SQLite 3.28.0.
: Updated OpenSSL to 1.1.1c in macOS installer.

: Updated OpenSSL to 1.1.1d in macOS installer.

: Move Azure Pipelines to latest VM versions and make macOS tests
optional

: Increase the default stack size of threads from 5MB to 16MB on
macOS, to match the stack size of the main thread. This avoids crashes on
deep recursion in threads.

: Avoid test suite failures on macOS by no longer calling
resource.setrlimit to increase the process stack size limit at runtime.
The runtime change is no longer needed since the interpreter is being
built with a larger default stack size.

: Update macOS installer to use SQLite 3.28.0.

================================================================================

# Changelog - macOS (Part 2)

: Updated OpenSSL to 1.1.1c in macOS installer.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Stop adding newline when saving an IDLE shell window.
: Add an option to toggle IDLEâs cursor blink for shell, editor,
and output windows.  See Settings, General, Window Preferences, Cursor
Blink. Patch by Zackery Spytz.
: Do not try to compile IDLE shell or output windows
: IDLE no longer fails when write non-encodable characters to
stderr.  It now escapes them with a backslash, as the regular Python
interpreter. Added the  field to the standard streams.
: When exiting IDLE, catch any AttributeError.  One happens when
EditorWindow.close is called twice.  Printing a traceback, when IDLE is
run from a terminal, is useless and annoying.
: To avoid problems, test_idle ignores the user config directory.
It no longer tries to create or access .idlerc or any files within. Users
must run IDLE to discover problems with saving settings.
: IDLE no longer adds âargvâ to the user namespace when
initializing it.  This bug only affected 3.7.4 and 3.8.0b2 to 3.8.0b4.
: Shell restart lines now fill the window width, always start
with â=â, and avoid wrapping unnecessarily. The line will still wrap if
the included file name is long relative to the width.
: To avoid occasional spurious test_idle failures on slower
machines, increase the hover_delay in test_tooltip.
: Properly handle user input warnings in IDLE shell. Cease
turning SyntaxWarnings into SyntaxErrors.
: IDLE Settings dialog now closes properly when there is no shell
window.
: Add mousewheel scrolling for IDLE module, path, and stack
browsers. Patch by George Zhang.
: Fixed completions list appearing too high or low when shown
above the current line.
: Refactor IDLE autocomplete and improve testing.
: Reorder the Run menu.  Put the most common choice, Run Module,
at the top.
: Improve highlight config sample with example shell interaction
and better labels for shell elements.
: Settings dialog no longer expands with font size.
: Initialize the Customize Run dialog with the command line
arguments most recently entered before.  The user can optionally edit
before submitting them.
: Fix code context not showing the correct context when first
toggled on.
: Optimize code context to reduce unneeded background activity.
Font and highlight changes now occur along with text changes instead of
after a random delay.
: Cleanup  by inlining RemoveFile and
simplifying the handling of  in CreateConfigHandlers.
: Fix tab focus traversal order for help source and custom run
dialogs.
: Both subprocess connection error messages now refer to the
âStartup failureâ section of the IDLE doc.
: Add optional line numbers for IDLE editor windows.  Windows
open without line numbers unless set otherwise in the General tab of the
configuration dialog.
: To compensate for stack frames added by IDLE and avoid possible
problems with low recursion limits, add 30 to limits in the user code
execution process.  Subtract 30 when reporting recursion limits to make
this addition mostly transparent.
: Properly âattachâ search dialogs to their main window so that
they behave like other dialogs and do not get hidden behind their main
window.
: Adjust âZoom Heightâ to individual screens by momentarily
maximizing the window on first use with a particular screen.  Changing
screen settings may invalidate the saved height.  While a window is
maximized, âZoom Heightâ has no effect.
: Make calltip reminder about â/â meaning positional-only less
obtrusive by only adding it when there is room on the first line.
: Add âRunâ¦ Customizedâ to the Run menu to run a module with
customized settings.  Any âcommand line argumentsâ entered are added to
sys.argv. One can suppress the normal Shell main module restart.
: Gather Format menu functions into format.py.  Combine
paragraph.py, rstrip.py, and format methods from editor.py.

================================================================================

# Changelog - IDLE (Part 2)

: Stop adding newline when saving an IDLE shell window.

: Add an option to toggle IDLEâs cursor blink for shell, editor,
and output windows.  See Settings, General, Window Preferences, Cursor
Blink. Patch by Zackery Spytz.

: Do not try to compile IDLE shell or output windows

: IDLE no longer fails when write non-encodable characters to
stderr.  It now escapes them with a backslash, as the regular Python
interpreter. Added the  field to the standard streams.

: When exiting IDLE, catch any AttributeError.  One happens when
EditorWindow.close is called twice.  Printing a traceback, when IDLE is
run from a terminal, is useless and annoying.

: To avoid problems, test_idle ignores the user config directory.
It no longer tries to create or access .idlerc or any files within. Users
must run IDLE to discover problems with saving settings.

: IDLE no longer adds âargvâ to the user namespace when
initializing it.  This bug only affected 3.7.4 and 3.8.0b2 to 3.8.0b4.

: Shell restart lines now fill the window width, always start
with â=â, and avoid wrapping unnecessarily. The line will still wrap if
the included file name is long relative to the width.

================================================================================

# Changelog - IDLE (Part 3)

: To avoid occasional spurious test_idle failures on slower
machines, increase the hover_delay in test_tooltip.

: Properly handle user input warnings in IDLE shell. Cease
turning SyntaxWarnings into SyntaxErrors.

: IDLE Settings dialog now closes properly when there is no shell
window.

: Add mousewheel scrolling for IDLE module, path, and stack
browsers. Patch by George Zhang.

: Fixed completions list appearing too high or low when shown
above the current line.

: Refactor IDLE autocomplete and improve testing.

: Reorder the Run menu.  Put the most common choice, Run Module,
at the top.

: Improve highlight config sample with example shell interaction
and better labels for shell elements.

: Settings dialog no longer expands with font size.

: Initialize the Customize Run dialog with the command line
arguments most recently entered before.  The user can optionally edit
before submitting them.

: Fix code context not showing the correct context when first
toggled on.

: Optimize code context to reduce unneeded background activity.
Font and highlight changes now occur along with text changes instead of
after a random delay.

================================================================================

# Changelog - IDLE (Part 4)

: Cleanup  by inlining RemoveFile and
simplifying the handling of  in CreateConfigHandlers.

: Fix tab focus traversal order for help source and custom run
dialogs.

: Both subprocess connection error messages now refer to the
âStartup failureâ section of the IDLE doc.

: Add optional line numbers for IDLE editor windows.  Windows
open without line numbers unless set otherwise in the General tab of the
configuration dialog.

: To compensate for stack frames added by IDLE and avoid possible
problems with low recursion limits, add 30 to limits in the user code
execution process.  Subtract 30 when reporting recursion limits to make
this addition mostly transparent.

: Properly âattachâ search dialogs to their main window so that
they behave like other dialogs and do not get hidden behind their main
window.

: Adjust âZoom Heightâ to individual screens by momentarily
maximizing the window on first use with a particular screen.  Changing
screen settings may invalidate the saved height.  While a window is
maximized, âZoom Heightâ has no effect.

: Make calltip reminder about â/â meaning positional-only less
obtrusive by only adding it when there is room on the first line.

================================================================================

# Changelog - IDLE (Part 5)

: Add âRunâ¦ Customizedâ to the Run menu to run a module with
customized settings.  Any âcommand line argumentsâ entered are added to
sys.argv. One can suppress the normal Shell main module restart.

: Gather Format menu functions into format.py.  Combine
paragraph.py, rstrip.py, and format methods from editor.py.

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: Update Valgrind suppression file to ignore a false alarm in
PyUnicode_Decode() when using GCC builtin strcmp().
: pathfix.py: Assume all files that end on â.pyâ are Python
scripts when working recursively.
: pdbâs  and  long options now work.
: Improve ArgumentClinic converter for floats.
: Remove Tools/scripts/h2py.py: use cffi to access a C API in
Python.
: 2to3 now works when run from a zipped standard library.
: Argument Clinic now uses the argument name on errors with
keyword-only argument instead of their position. Patch contributed by RÃ©mi
Lapeyre.
: Add option -k to pathscript.py script: preserve shebang flags.
Add option -a to pathscript.py script: add flags.

: Update Valgrind suppression file to ignore a false alarm in
PyUnicode_Decode() when using GCC builtin strcmp().

: pathfix.py: Assume all files that end on â.pyâ are Python
scripts when working recursively.

: pdbâs  and  long options now work.

: Improve ArgumentClinic converter for floats.

: Remove Tools/scripts/h2py.py: use cffi to access a C API in
Python.

: 2to3 now works when run from a zipped standard library.

================================================================================

# Changelog - Tools/Demos (Part 2)

: Argument Clinic now uses the argument name on errors with
keyword-only argument instead of their position. Patch contributed by RÃ©mi
Lapeyre.

: Add option -k to pathscript.py script: preserve shebang flags.
Add option -a to pathscript.py script: add flags.

================================================================================

# Changelog - C API (Part 1)

List:
: Re-export some function compatibility wrappers for macros in
pythonrun.h.
: Provide Py_EnterRecursiveCall() and
Py_LeaveRecursiveCall() as regular functions for the limited API.
Previously, there were defined as macros, but these macros didnât work
with the limited API which cannot access PyThreadState.recursion_depth
field. Remove _Py_CheckRecursionLimit from the stable ABI.
: The global variable PyStructSequence_UnnamedField is
now a constant and refers to a constant string.
: Fixed possible leak in PyArg_Parse() and similar
functions for format units  and  when the macro
PY_SSIZE_T_CLEAN is not defined.
: Fix a crash in weakref.proxy objects due to incorrect
lifetime management when calling some associated methods that may delete
the last reference to object being referenced by the proxy. Patch by Pablo
Galindo.
: The _PyObject_CheckConsistency() function is now also
available in release mode. For example, it can be used to debug a crash in
the visit_decref() function of the GC.
: Revert the removal of PyThreadState_DeleteCurrent() with
documentation.
: Update audioop extension module to use the stable ABI
(PEP-384). Patch by Tyler Kieft.
: Py_SetPath() now sets sys.executable to the
program full path (Py_GetProgramFullPath()) rather than to the
program name (Py_GetProgramName()).
: Python ignored arguments passed to Py_SetPath(),
Py_SetPythonHome() and Py_SetProgramName(): fix Python
initialization to use specified arguments.
: The Py_UNREACHABLE() macro now calls
Py_FatalError().
: Make dict and weakref offsets opaque for C heap types by
passing the offsets through PyMemberDef
: The C function PyGen_NeedsFinalizing has been removed. It
was not documented, tested or used anywhere within CPython after the
implementation of . Patch by Joannah Nanjekye. (Patch by Joannah
Nanjekye)
: Options added by PySys_AddXOption() are now handled the
same way than PyConfig.xoptions and command line  options.
: Fix a crash in PySys_SetArgvEx(0,  .
: Fix subtype_dealloc to suppress the type decref when the base
type is a C heap type
: Add _PyObject_FunctionStr() to get a user-friendly
string representation of a function-like object. Patch by Jeroen Demeyer.
: The functions PyEval_CallObject, PyEval_CallFunction,
PyEval_CallMethod and PyEval_CallObjectWithKeywords are
deprecated. Use PyObject_Call() and its variants instead.
: PyCFunction_Call is now a deprecated alias of
PyObject_Call().
: The vectorcall protocol now requires that the caller passes
only strings as keyword names.
: The vectorcall protocol is now enabled for  objects:
set tp_vectorcall to a vectorcall function to be used instead of
 and  when calling the class itself.
: Exclude Python-ast.h, ast.h and asdl.h from the limited API.
: Add new function _PyObject_CallOneArg for calling an object
with one positional argument.
: Add PyConfig_SetWideStringList() function.
: Add fast functions for calling methods:
_PyObject_VectorcallMethod(),
_PyObject_CallMethodNoArgs() and
_PyObject_CallMethodOneArg().
: The METH_FASTCALL calling convention has been
documented.
: The new function PyCode_NewWithPosOnlyArgs() allows to
create code objects like PyCode_New(), but with an extra
posonlyargcount parameter for indicating the number of positonal-only
arguments.
: Fix dtrace issue introduce by 
: Add a new public PyObject_CallNoArgs() function to the
C API: call a callable Python object without any arguments. It is the most
efficient way to call a callback without any argument. On x86-64, for
example, PyObject_CallFunctionObjArgs(func,  allocates 960 bytes
on the stack per call, whereas PyObject_CallNoArgs(func) only
allocates 624 bytes per call.
: Fix the cast on error in
PyLong_AsUnsignedLongLongMask().
: Convert posixmodule.c statically allocated types
DirEntryType and ScandirIteratorType to heap-allocated types.
: Use singular/plural noun in error message when instantiating an
abstract class with non-overridden abstract method(s).

================================================================================

# Changelog - C API (Part 2)

: Re-export some function compatibility wrappers for macros in
pythonrun.h.

: Provide Py_EnterRecursiveCall() and
Py_LeaveRecursiveCall() as regular functions for the limited API.
Previously, there were defined as macros, but these macros didnât work
with the limited API which cannot access PyThreadState.recursion_depth
field. Remove _Py_CheckRecursionLimit from the stable ABI.

: The global variable PyStructSequence_UnnamedField is
now a constant and refers to a constant string.

: Fixed possible leak in PyArg_Parse() and similar
functions for format units  and  when the macro
PY_SSIZE_T_CLEAN is not defined.

: Fix a crash in weakref.proxy objects due to incorrect
lifetime management when calling some associated methods that may delete
the last reference to object being referenced by the proxy. Patch by Pablo
Galindo.

: The _PyObject_CheckConsistency() function is now also
available in release mode. For example, it can be used to debug a crash in
the visit_decref() function of the GC.

: Revert the removal of PyThreadState_DeleteCurrent() with
documentation.

: Update audioop extension module to use the stable ABI
(PEP-384). Patch by Tyler Kieft.

================================================================================

# Changelog - C API (Part 3)

: Py_SetPath() now sets sys.executable to the
program full path (Py_GetProgramFullPath()) rather than to the
program name (Py_GetProgramName()).

: Python ignored arguments passed to Py_SetPath(),
Py_SetPythonHome() and Py_SetProgramName(): fix Python
initialization to use specified arguments.

: The Py_UNREACHABLE() macro now calls
Py_FatalError().

: Make dict and weakref offsets opaque for C heap types by
passing the offsets through PyMemberDef

: The C function PyGen_NeedsFinalizing has been removed. It
was not documented, tested or used anywhere within CPython after the
implementation of . Patch by Joannah Nanjekye. (Patch by Joannah
Nanjekye)

: Options added by PySys_AddXOption() are now handled the
same way than PyConfig.xoptions and command line  options.

: Fix a crash in PySys_SetArgvEx(0,  .

: Fix subtype_dealloc to suppress the type decref when the base
type is a C heap type

: Add _PyObject_FunctionStr() to get a user-friendly
string representation of a function-like object. Patch by Jeroen Demeyer.

: The functions PyEval_CallObject, PyEval_CallFunction,
PyEval_CallMethod and PyEval_CallObjectWithKeywords are
deprecated. Use PyObject_Call() and its variants instead.

================================================================================

# Changelog - C API (Part 4)

: PyCFunction_Call is now a deprecated alias of
PyObject_Call().

: The vectorcall protocol now requires that the caller passes
only strings as keyword names.

: The vectorcall protocol is now enabled for  objects:
set tp_vectorcall to a vectorcall function to be used instead of
 and  when calling the class itself.

: Exclude Python-ast.h, ast.h and asdl.h from the limited API.

: Add new function _PyObject_CallOneArg for calling an object
with one positional argument.

: Add PyConfig_SetWideStringList() function.

: Add fast functions for calling methods:
_PyObject_VectorcallMethod(),
_PyObject_CallMethodNoArgs() and
_PyObject_CallMethodOneArg().

: The METH_FASTCALL calling convention has been
documented.

: The new function PyCode_NewWithPosOnlyArgs() allows to
create code objects like PyCode_New(), but with an extra
posonlyargcount parameter for indicating the number of positonal-only
arguments.

: Fix dtrace issue introduce by

================================================================================

# Changelog - C API (Part 5)

: Add a new public PyObject_CallNoArgs() function to the
C API: call a callable Python object without any arguments. It is the most
efficient way to call a callback without any argument. On x86-64, for
example, PyObject_CallFunctionObjArgs(func,  allocates 960 bytes
on the stack per call, whereas PyObject_CallNoArgs(func) only
allocates 624 bytes per call.

: Fix the cast on error in
PyLong_AsUnsignedLongLongMask().

: Convert posixmodule.c statically allocated types
DirEntryType and ScandirIteratorType to heap-allocated types.

: Use singular/plural noun in error message when instantiating an
abstract class with non-overridden abstract method(s).

================================================================================

# Changelog - Security

List:
: CVE 2019-9948: Avoid file reading by disallowing
local-file:// and local_file:// URL schemes in
URLopener().open() and URLopener().retrieve() of
urllib.request.
: Prevent fold function used in email header encoding from
entering infinite loop when there are too many non-ASCII characters in a
header.
: Updated blake2 implementation which uses secure memset
implementation provided by platform.

: CVE 2019-9948: Avoid file reading by disallowing
local-file:// and local_file:// URL schemes in
URLopener().open() and URLopener().retrieve() of
urllib.request.

: Prevent fold function used in email header encoding from
entering infinite loop when there are too many non-ASCII characters in a
header.

: Updated blake2 implementation which uses secure memset
implementation provided by platform.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Allow unpacking in the right hand side of annotated
assignments. In particular,  Tuple[int,      is now
allowed.
: All structseq objects are now tracked by the garbage collector.
Patch by Pablo Galindo.
: Make the co_argcount attribute of code objects represent the
total number of positional arguments (including positional-only
arguments). The value of co_posonlyargcount can be used to distinguish
which arguments are positional only, and the difference (co_argcount -
co_posonlyargcount) is the number of positional-or-keyword arguments.
Patch by Pablo Galindo.
: Constructors of ,  and
 will now use the __index__() special
method, if available and the corresponding method ,
__float__() or __complex__() is not available.
: Add native thread ID (TID) support to OpenBSD.
: Implemented per opcode cache mechanism and LOAD_GLOBAL
instruction use it. LOAD_GLOBAL is now about 40% faster. Contributed
by Yury Selivanov, and Inada Naoki.
: Fix crash in PyAST_FromNodeObject() when flags is NULL.
: Freeing a great many small objects could take time quadratic in
the number of arenas, due to using linear search to keep obmalloc.câs
list of usable arenas sorted by order of number of free memory pools.
This is accomplished without search now, leaving the worst-case time
linear in the number of arenas.  For programs where this quite visibly
matters (typically with more than 100 thousand small objects alive
simultaneously), this can greatly reduce the time needed to release their
memory.
: Fix possible overflow in wrap_lenfunc() when sizeof(long)
 sizeof(Py_ssize_t) (e.g., 64-bit Windows).
: Improve the AST for âdebugâ f-strings, which use â=â to print
out the source of the expression being evaluated.  Delete expr_text from
the FormattedValue node, and instead use a Constant string node (possibly
merged with adjacent constant expressions inside the f-string).
: The , bytearray.hex, and memoryview.hex
methods as well as the binascii.hexlify and  functions now
have the ability to include an optional separator between hex bytes.  This
functionality was inspired by MicroPythonâs hexlify implementation.
: Add os.memfd_create().
: Added new  method to the code type
(types.CodeType).
: Implement socket.if_nameindex(),
socket.if_nametoindex(), and socket.if_indextoname() on
Windows.
: PyErr_WriteUnraisable() now creates a traceback object
if there is no current traceback. Moreover, call
PyErr_NormalizeException() and PyException_SetTraceback()
to normalize the exception value. Ignore any error.
: Only accept text after    if the first
character is ASCII. This is to disallow things like   .
: Store text appearing after a    comment in the
AST. For example a type ignore like   ignore[E1000] will have
the string  stored in its AST node.
: Treat line continuation at EOF as a SyntaxError by Anthony
Sottile.
: Fix a crash when calling a C function with a keyword dict
(f(**kwargs)) and changing the dict  while that function is
running.
: Fix possible signed integer overflow when handling slices.
: Add NamedExpression kind support to ast_unparse.c
: A SyntaxError is now raised if a code blocks that will be
optimized away (e.g. if conditions that are always false) contains syntax
errors. Patch by Pablo Galindo.
: Allow computation of modular inverses via three-argument
: the second argument is now permitted to be negative in the case
where the first and third arguments are relatively prime.
: Update the Unicode database to version 12.1.0.
: Avoid caching attributes of classes which type defines mro() to
avoid a hard cache invalidation problem.
: The  stack is now correctly cleaned up if the
execution ends with a return and the stack is not empty.
: The  builtin functions now support the
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT flag,  which allow to compile sources
that  contains top-level ,   or  . This
is useful to evaluate async-code from with an already async functions; for
example in a custom REPL.
: Implement PEP 578, adding sys.audit, io.open_code and related
APIs.
: Correct return type for UserList slicing operations. Patch by
Michael Blahay, Erick Cervantes, and vaultah
: Move PyRuntimeState.warnings into per-interpreter state (via
âmodule stateâ).
: Removed  implementations from builtin types
, , ,  and few
classes from the standard library. They now inherit  from
.
: Add a  feature f-strings for debugging. This can precede
, , or . It produces the text of the expression,
followed by an equal sign, followed by the repr of the value of the
expression. So f'{3*9+15=}' would be equal to the string
'3*9+15=42'.  If  is specified, the default conversion is set to
, unless a format spec is given, in which case the formatting
behavior is unchanged, and __format__ will be used.
: Save the live exception during import.câs remove_module().
: pymalloc returns memory blocks aligned by 16 bytes, instead of
8 bytes, on 64-bit platforms to conform x86-64 ABI. Recent compilers
assume this alignment more often. Patch by Inada Naoki.
: A long-since-meaningless check for    was
removed from Pythonâs internal C signal handler.
: Fix incorrect use of  in format strings. Patch by Zackery
Spytz.
: builtins.help() now prefixes  for async functions.
: Add native thread ID (TID) to threading.Thread objects
(supported platforms: Windows, FreeBSD, Linux, macOS)
: Added fix for broken symlinks in combination with pathlib
: Added new trashcan macros to deal with a double deallocation
that could occur when the tp_dealloc of a subclass calls the
tp_dealloc of a base class and that base class uses the trashcan
mechanism. Patch by Jeroen Demeyer.
: Do not clear  and sys.float_info
during shutdown. Patch by Zackery Spytz.
: Expose copy_file_range() as a low level API in the
 module.
: Remove cross-version binary compatibility requirement in
tp_flags.
: Port binascii to PEP 489 multiphase initialization. Patch by
Marcel Plch.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Allow unpacking in the right hand side of annotated
assignments. In particular,  Tuple[int,      is now
allowed.

: All structseq objects are now tracked by the garbage collector.
Patch by Pablo Galindo.

: Make the co_argcount attribute of code objects represent the
total number of positional arguments (including positional-only
arguments). The value of co_posonlyargcount can be used to distinguish
which arguments are positional only, and the difference (co_argcount -
co_posonlyargcount) is the number of positional-or-keyword arguments.
Patch by Pablo Galindo.

: Constructors of ,  and
 will now use the __index__() special
method, if available and the corresponding method ,
__float__() or __complex__() is not available.

: Add native thread ID (TID) support to OpenBSD.

: Implemented per opcode cache mechanism and LOAD_GLOBAL
instruction use it. LOAD_GLOBAL is now about 40% faster. Contributed
by Yury Selivanov, and Inada Naoki.

: Fix crash in PyAST_FromNodeObject() when flags is NULL.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Freeing a great many small objects could take time quadratic in
the number of arenas, due to using linear search to keep obmalloc.câs
list of usable arenas sorted by order of number of free memory pools.
This is accomplished without search now, leaving the worst-case time
linear in the number of arenas.  For programs where this quite visibly
matters (typically with more than 100 thousand small objects alive
simultaneously), this can greatly reduce the time needed to release their
memory.

: Fix possible overflow in wrap_lenfunc() when sizeof(long)
 sizeof(Py_ssize_t) (e.g., 64-bit Windows).

: Improve the AST for âdebugâ f-strings, which use â=â to print
out the source of the expression being evaluated.  Delete expr_text from
the FormattedValue node, and instead use a Constant string node (possibly
merged with adjacent constant expressions inside the f-string).

: The , bytearray.hex, and memoryview.hex
methods as well as the binascii.hexlify and  functions now
have the ability to include an optional separator between hex bytes.  This
functionality was inspired by MicroPythonâs hexlify implementation.

: Add os.memfd_create().

================================================================================

# Changelog - Core and Builtins (Part 4)

: Added new  method to the code type
(types.CodeType).

: Implement socket.if_nameindex(),
socket.if_nametoindex(), and socket.if_indextoname() on
Windows.

: PyErr_WriteUnraisable() now creates a traceback object
if there is no current traceback. Moreover, call
PyErr_NormalizeException() and PyException_SetTraceback()
to normalize the exception value. Ignore any error.

: Only accept text after    if the first
character is ASCII. This is to disallow things like   .

: Store text appearing after a    comment in the
AST. For example a type ignore like   ignore[E1000] will have
the string  stored in its AST node.

: Treat line continuation at EOF as a SyntaxError by Anthony
Sottile.

: Fix a crash when calling a C function with a keyword dict
(f(**kwargs)) and changing the dict  while that function is
running.

: Fix possible signed integer overflow when handling slices.

: Add NamedExpression kind support to ast_unparse.c

: A SyntaxError is now raised if a code blocks that will be
optimized away (e.g. if conditions that are always false) contains syntax
errors. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Allow computation of modular inverses via three-argument
: the second argument is now permitted to be negative in the case
where the first and third arguments are relatively prime.

: Update the Unicode database to version 12.1.0.

: Avoid caching attributes of classes which type defines mro() to
avoid a hard cache invalidation problem.

: The  stack is now correctly cleaned up if the
execution ends with a return and the stack is not empty.

: The  builtin functions now support the
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT flag,  which allow to compile sources
that  contains top-level ,   or  . This
is useful to evaluate async-code from with an already async functions; for
example in a custom REPL.

: Implement PEP 578, adding sys.audit, io.open_code and related
APIs.

: Correct return type for UserList slicing operations. Patch by
Michael Blahay, Erick Cervantes, and vaultah

: Move PyRuntimeState.warnings into per-interpreter state (via
âmodule stateâ).

: Removed  implementations from builtin types
, , ,  and few
classes from the standard library. They now inherit  from
.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Add a  feature f-strings for debugging. This can precede
, , or . It produces the text of the expression,
followed by an equal sign, followed by the repr of the value of the
expression. So f'{3*9+15=}' would be equal to the string
'3*9+15=42'.  If  is specified, the default conversion is set to
, unless a format spec is given, in which case the formatting
behavior is unchanged, and __format__ will be used.

: Save the live exception during import.câs remove_module().

: pymalloc returns memory blocks aligned by 16 bytes, instead of
8 bytes, on 64-bit platforms to conform x86-64 ABI. Recent compilers
assume this alignment more often. Patch by Inada Naoki.

: A long-since-meaningless check for    was
removed from Pythonâs internal C signal handler.

: Fix incorrect use of  in format strings. Patch by Zackery
Spytz.

: builtins.help() now prefixes  for async functions.

: Add native thread ID (TID) to threading.Thread objects
(supported platforms: Windows, FreeBSD, Linux, macOS)

: Added fix for broken symlinks in combination with pathlib

================================================================================

# Changelog - Core and Builtins (Part 7)

: Added new trashcan macros to deal with a double deallocation
that could occur when the tp_dealloc of a subclass calls the
tp_dealloc of a base class and that base class uses the trashcan
mechanism. Patch by Jeroen Demeyer.

: Do not clear  and sys.float_info
during shutdown. Patch by Zackery Spytz.

: Expose copy_file_range() as a low level API in the
 module.

: Remove cross-version binary compatibility requirement in
tp_flags.

: Port binascii to PEP 489 multiphase initialization. Patch by
Marcel Plch.

================================================================================

# Changelog - Library (Part 1)

List:
: Added math.perm().
: Add SSLContext.num_tickets to control the number of TLSv1.3
session tickets.
: Fix the error handling in
msilib.SummaryInformation.GetProperty(). Patch by Zackery Spytz.
: The fcntl module now contains file sealing constants for
sealing of memfds.
: Add get_origin() and get_args() introspection helpers
to  module.
: msilib.Directory.start_component() no longer fails if
 is not .
: Add the asyncio.Task.get_coro() method to publicly expose
the tasksâs coroutine object.
: Make asyncio.create_subprocess_exec() accept path-like
arguments.
: Change default max_workers of ThreadPoolExecutor from
cpu_count()   to  cpu_count()  .  Previous value was
unreasonably large on many cores machines.
: _thread.start_new_thread() now logs uncaught exception
raised by the function using sys.unraisablehook(), rather than
sys.excepthook(), so the hook gets access to the function which
raised the exception.
: On macOS, the multiprocessing module now uses 
start method by default.
: Fix destructor _pyio.BytesIO and
_pyio.TextIOWrapper: initialize their  attribute as
soon as possible (in the class body), because itâs used by 
which calls .
: PEP 544: Add  and @runtime_checkable to the
 module.
: The functions sys.set_coroutine_wrapper and
sys.get_coroutine_wrapper that were deprecated and marked for removal
in 3.8 have been removed.
: Handle late binding and attribute access in
unittest.mock.AsyncMock setup for autospeccing. Document newly
implemented async methods in unittest.mock.MagicMock.
: PEP 589: Add  to the  module.
: PEP 586: Add  to the  module.
: PEP 591: Add  qualifier and  decorator to
the  module.
: Donât log OSError based exceptions if a fatal error has
occurred in asyncio transport. Peer can generate almost any OSError, user
cannot avoid these exceptions by fixing own code. Errors are still
propagated to user code, itâs just logging them is pointless and pollute
asyncio logs.
: symtable.symtable() now accepts the same input types for
source code as the built-in  function. Patch by Dino
Viehland.
: Implement asyncio REPL
: Return safe to use proxy socket object from
transport.get_extra_info(âsocketâ)
: Make asyncio.CancelledError a BaseException.
This will address the common mistake many asyncio users make: an âexcept
Exceptionâ clause breaking Tasks cancellation.
In addition to this change, we stop inheriting asyncio.TimeoutError and
asyncio.InvalidStateError from their concurrent.futures.* counterparts.
Thereâs no point for these exceptions to share the inheritance chain.

================================================================================

# Changelog - Library (Part 2)

bpo-1230540: Add a new threading.excepthook() function which handles
uncaught threading.Thread.run() exception. It can be overridden to
control how uncaught threading.Thread.run() exceptions are handled.
: Handle unittest.mock.patch() used as a decorator on async
functions.
: Add support for calling  with the mock resulting
from unittest.mock.mock_open()
: Allow whitespace only header encoding in email.header - by
Batuhan Taskaya
: PDB command  now  display positional only arguments.
Patch contributed by RÃ©mi Lapeyre.
: PDB command  now  display keyword only arguments. Patch
contributed by RÃ©mi Lapeyre.
: Add missing names to typing.__all__: ,
ForwardRef, OrderedDict - by Anthony Sottile.
: Add SupportsIndex protocol to the typing module to allow type
checking to detect classes that can be passed to ,  and
.
: Implement unittest.IsolatedAsyncioTestCase to help testing
asyncio-based code.
: fileinput.input() and fileinput.FileInput
 argument has been removed (was deprecated and ignored since
Python 3.6), and as a result the  and  arguments have
been made keyword-only.
: Starting with Python 3.3, importing ABCs from
collections is deprecated, and import should be done from
collections.abc. Still being able to import from collections
was marked for removal in 3.8, but has been delayed to 3.9; documentation
and DeprecationWarning clarified.
: Implement __repr__ for WeakSet objects.
: Fix  in
urllib.request.URLopener.retrieve(). Patch by Karthikeyan
Singaravelan.
: Fix the folding of email header when the max_line_length is 0
or None and the header contains non-ascii characters.  Contributed by
Licht Takeuchi (@Licht-T).
: shutil.copystat() now ignores errno.EINVAL on
os.setxattr() which may occur when copying files on filesystems
without extended attributes support.
Original patch by Giampaolo Rodola, updated by Ying Wang.

================================================================================

# Changelog - Library (Part 3)

: Python child processes can now access the status of their
parent process using multiprocessing.process.parent_process
: Deprecate @coroutine for sake of  .
: Fix bug in  of UserString - by Batuhan Taskaya.
: Remove a message about an unhandled exception in a task when
writer.write() is used without await and writer.drain() fails with an
exception.
: Introduce asyncio.Stream class that merges
asyncio.StreamReader and asyncio.StreamWriter
functionality. asyncio.Stream can work in readonly, writeonly and
readwrite modes. Provide asyncio.connect(),
asyncio.connect_unix(), asyncio.connect_read_pipe() and
asyncio.connect_write_pipe() factories to open
asyncio.Stream connections. Provide asyncio.StreamServer
and UnixStreamServer to serve servers with asyncio.Stream API.
Modify asyncio.create_subprocess_shell() and
asyncio.create_subprocess_exec() to use asyncio.Stream
instead of deprecated StreamReader and StreamWriter.
Deprecate asyncio.StreamReader and asyncio.StreamWriter.
Deprecate usage of private classes, e.g.
asyncio.FlowControlMixing and
asyncio.StreamReaderProtocol outside of asyncio package.
: Added validation of integer prefixes to the construction of IP
networks and interfaces in the ipaddress module.
: Add an extend action to argparser.
: Fix a bug making a SharedMemoryManager instance and its parent
process use two separate resource_tracker processes.
: Adds a grammar to lib2to3.pygram that contains exec as a
function not as statement.
: The function time.clock() was deprecated in 3.3 in favor of
time.perf_counter() and marked for removal in 3.8, it has removed.
: Fix asyncio discarding IPv6 scopes when ensuring hostname
resolutions internally
: Add new function math.isqrt() to compute integer square
roots.
: Introduce the importlib.metadata module with (provisional)
support for reading metadata from third-party packages.
: When using type_comments=True in , treat 
  followed by a non-alphanumeric character and then arbitrary
text as a type ignore, instead of requiring nothing but whitespace or
another comment. This is to permit formations such as  
ignore[E1000].
:  encoding (Windows code page 65001) becomes an alias
to  encoding.
: The multiprocessing.resource_tracker replaces the
multiprocessing.semaphore_tracker module. Other than semaphores,
resource_tracker also tracks shared_memory segments.
: The  and  objects of the 
module are not exposed to the user.  Patch by Aviv Palivoda.
: In shutil.copystat(), first copy extended file attributes
and then file permissions, since extended attributes can only be set on
the destination while it is still writeable.
: Add new sys.unraisablehook() function which can be
overridden to control how âunraisable exceptionsâ are handled. It is
called when an exception has occurred but there is no way for Python to
handle it. For example, when a destructor raises an exception or during
garbage collection (gc.collect()).
: Introducing zipfile.Path, a pathlib-compatible wrapper for
traversing zip files.
: Fix an issue where os.posix_spawnp() would incorrectly raise a
TypeError when file_actions is None.
: Handle exceptions raised by functions added by
concurrent.futures add_done_callback correctly when the Future has already
completed.
: Limit max_workers in ProcessPoolExecutor to 61 to work
around a WaitForMultipleObjects limitation.
: Fix QueueListener to call
queue.task_done() upon stopping. Patch by Bar Harel.
: Forbid creation of asyncio stream objects like StreamReader,
StreamWriter, Process, and their protocols outside of asyncio package.
: Provide both sync and async calls for StreamWriter.write() and
StreamWriter.close()
: Properly handle SSL connection closing in asyncio
StreamWriter.drain() call.
: Implement PEP 574 (pickle protocol 5 with out-of-band buffers).
: functools.lru_cache() can now be used as a straight decorator
in addition to its existing usage as a function that returns a decorator.
: Add a BadGzipFile exception to the 
module.
: Optimized write buffering in C implementation of
TextIOWrapper. Writing ASCII string to TextIOWrapper with ascii,
latin1, or utf-8 encoding is about 20% faster.  Patch by Inada Naoki.
: Donât mark wsgiref.simple_server.SimpleServer as
multi-threaded since wsgiref.simple_server.WSGIServer is
single-threaded.
: py_compile.compile() now supports silent mode. Patch by
Joannah Nanjekye
: Fix double exceptions in wsgiref.handlers.BaseHandler
by calling its  method only
when no exception is raised.
: Improved the repr of regular expression flags.
: The signature of Python functions can now be overridden by
specifying the __text_signature__ attribute.
: Reinitialize logging.Handler locks in forked child processes
instead of attempting to acquire them all in the parent before forking
only to be released in the child process.  The acquire/release pattern was
leading to deadlocks in code that has implemented any form of chained
logging handlers that depend upon one another as the lock acquisition
order cannot be guaranteed.
: Throw a TypeError instead of an AssertionError when using an
invalid type annotation with singledispatch.
: Allow reduction methods to return a 6-item tuple where the 6th
item specifies a custom state-setting method thatâs called instead of the
regular __setstate__ method.
: enable custom reduction callback registration for functions and
classes in _pickle.c, using the new Picklerâs attribute
reducer_override
: Fix a bug crashing SharedMemoryManager instances in interactive
sessions after a ctrl-c (KeyboardInterrupt) was sent
: Fix mmap fail for VxWorks
: csv.DictWriter.writeheader() now returns the return value
of the underlying csv.Writer.writerow() method. Patch contributed by
Ashish Nitin Patil.
: Parsing .mo files now ignores comments starting and ending with
#-#-#-#-#.
: Enable plistlib to read and write binary plist files that were
created as a KeyedArchive file. Specifically, this allows the plistlib to
process 0x80 tokens as UID objects.
: Add posix module support for VxWorks.
: Asyncio: Remove inner callback on outer cancellation in shield
: Fix asyncio.SelectorEventLoop.subprocess_exec() leaks
file descriptors if  fails and called with
stdin=subprocess.PIPE. Patch by Niklas Fiekas.
: unittest.mock.mock_open() results now respects the
argument of read([size]). Patch contributed by RÃ©mi Lapeyre.
: Implement math.comb() that returns binomial coefficient,
that computes the number of ways to choose k items from n items without
repetition and without order. Patch by Yash Aggarwal and Keller Fuchs.
: Fixed permission errors in
TemporaryDirectory clean up. Previously
TemporaryDirectory.cleanup() failed when non-writeable or
non-searchable files or directories were created inside a temporary
directory.
: Add debugging helpers to ssl module. Itâs now possible to dump
key material and to trace TLS protocol. The default and stdlib contexts
also support SSLKEYLOGFILE env var.
: Added AsyncMock to support using unittest to mock asyncio
coroutines. Patch by Lisa Roach.
: dataclasses.InitVar: Exposes the type used to create the init
var.
: Fix serialization of messages containing encoded strings when
the policy.linesep is set to a multi-character string. Patch by Jens
Troeger.
: Performance of functools.reduce() is slightly improved.
Patch by Sergey Fedoseev.
: Fix a bug in codecs.StreamRecoder where seeking might
leave old data in a buffer and break subsequent read calls. Patch by Ammar
Askar.
: The  module now exposes shlex.join(), the
inverse of shlex.split(). Patch by Bo Bayles.
: asyncio.AbstractEventLoop.create_datagram_endpoint(): Do
not connect UDP socket when broadcast is allowed. This allows to receive
replies after a UDP broadcast.
: Change ThreadPoolExecutor to use existing idle threads before
spinning up new ones.
: Added support for bytes and path-like objects in
subprocess.Popen() on Windows.  The  parameter now accepts a
path-like object if  is  and a sequence containing
bytes and path-like objects. The executable parameter now accepts a
bytes and path-like object. The  parameter now accepts a
bytes object. Based on patch by Anders Lorentsen.
: pathlib.Path.unlink now accepts a missing_ok
parameter to avoid a FileNotFoundError from being raised. Patch by
Robert Buchholz.
: Allow  objects to access the madvise() system
call (through mmap.mmap.madvise()).
: Added support for ZIP files with disks set to 0. Such files are
commonly created by builtin tools on Windows when use ZIP64 extension.
Patch by Francisco Facioni.
: trace.py can now run modules via python3 -m trace -t âmodule
module_name
: Changed unittest.mock.patch.dict() to return the patched
dictionary when used as context manager. Patch by Vadim Tsander.
: Added a __copy__() to collections.UserList and
collections.UserDict in order to correctly implement shallow copying
of the objects. Patch by Bar Harel.
: ,  and  (end-of-file on Windows) are now
escaped in protocol 0 pickles of Unicode strings. This allows to load them
without loss from files open in text mode in Python 2.
: _thread.interrupt_main() now avoids setting the Python
error status if the  signal is ignored or not handled by Python.

================================================================================

# Changelog - Library (Part 4)

: Add SSLContext.num_tickets to control the number of TLSv1.3
session tickets.

: Fix the error handling in
msilib.SummaryInformation.GetProperty(). Patch by Zackery Spytz.

: The fcntl module now contains file sealing constants for
sealing of memfds.

: Add get_origin() and get_args() introspection helpers
to  module.

: msilib.Directory.start_component() no longer fails if
 is not .

: Add the asyncio.Task.get_coro() method to publicly expose
the tasksâs coroutine object.

: Make asyncio.create_subprocess_exec() accept path-like
arguments.

: Change default max_workers of ThreadPoolExecutor from
cpu_count()   to  cpu_count()  .  Previous value was
unreasonably large on many cores machines.

: _thread.start_new_thread() now logs uncaught exception
raised by the function using sys.unraisablehook(), rather than
sys.excepthook(), so the hook gets access to the function which
raised the exception.

: On macOS, the multiprocessing module now uses 
start method by default.

: Fix destructor _pyio.BytesIO and
_pyio.TextIOWrapper: initialize their  attribute as
soon as possible (in the class body), because itâs used by 
which calls .

: PEP 544: Add  and @runtime_checkable to the
 module.

================================================================================

# Changelog - Library (Part 5)

: The functions sys.set_coroutine_wrapper and
sys.get_coroutine_wrapper that were deprecated and marked for removal
in 3.8 have been removed.

: Handle late binding and attribute access in
unittest.mock.AsyncMock setup for autospeccing. Document newly
implemented async methods in unittest.mock.MagicMock.

: PEP 589: Add  to the  module.

: PEP 586: Add  to the  module.

: PEP 591: Add  qualifier and  decorator to
the  module.

: Donât log OSError based exceptions if a fatal error has
occurred in asyncio transport. Peer can generate almost any OSError, user
cannot avoid these exceptions by fixing own code. Errors are still
propagated to user code, itâs just logging them is pointless and pollute
asyncio logs.

: symtable.symtable() now accepts the same input types for
source code as the built-in  function. Patch by Dino
Viehland.

: Implement asyncio REPL

: Return safe to use proxy socket object from
transport.get_extra_info(âsocketâ)

: Make asyncio.CancelledError a BaseException.

This will address the common mistake many asyncio users make: an âexcept
Exceptionâ clause breaking Tasks cancellation.

================================================================================

# Changelog - Library (Part 6)

In addition to this change, we stop inheriting asyncio.TimeoutError and
asyncio.InvalidStateError from their concurrent.futures.* counterparts.
Thereâs no point for these exceptions to share the inheritance chain.

bpo-1230540: Add a new threading.excepthook() function which handles
uncaught threading.Thread.run() exception. It can be overridden to
control how uncaught threading.Thread.run() exceptions are handled.

: Handle unittest.mock.patch() used as a decorator on async
functions.

: Add support for calling  with the mock resulting
from unittest.mock.mock_open()

: Allow whitespace only header encoding in email.header - by
Batuhan Taskaya

: PDB command  now  display positional only arguments.
Patch contributed by RÃ©mi Lapeyre.

: PDB command  now  display keyword only arguments. Patch
contributed by RÃ©mi Lapeyre.

: Add missing names to typing.__all__: ,
ForwardRef, OrderedDict - by Anthony Sottile.

: Add SupportsIndex protocol to the typing module to allow type
checking to detect classes that can be passed to ,  and
.

: Implement unittest.IsolatedAsyncioTestCase to help testing
asyncio-based code.

================================================================================

# Changelog - Library (Part 7)

: fileinput.input() and fileinput.FileInput
 argument has been removed (was deprecated and ignored since
Python 3.6), and as a result the  and  arguments have
been made keyword-only.

: Starting with Python 3.3, importing ABCs from
collections is deprecated, and import should be done from
collections.abc. Still being able to import from collections
was marked for removal in 3.8, but has been delayed to 3.9; documentation
and DeprecationWarning clarified.

: Implement __repr__ for WeakSet objects.

: Fix  in
urllib.request.URLopener.retrieve(). Patch by Karthikeyan
Singaravelan.

: Fix the folding of email header when the max_line_length is 0
or None and the header contains non-ascii characters.  Contributed by
Licht Takeuchi (@Licht-T).

: shutil.copystat() now ignores errno.EINVAL on
os.setxattr() which may occur when copying files on filesystems
without extended attributes support.

Original patch by Giampaolo Rodola, updated by Ying Wang.

: Python child processes can now access the status of their
parent process using multiprocessing.process.parent_process

: Deprecate @coroutine for sake of  .

: Fix bug in  of UserString - by Batuhan Taskaya.

================================================================================

# Changelog - Library (Part 8)

: Remove a message about an unhandled exception in a task when
writer.write() is used without await and writer.drain() fails with an
exception.

: Introduce asyncio.Stream class that merges
asyncio.StreamReader and asyncio.StreamWriter
functionality. asyncio.Stream can work in readonly, writeonly and
readwrite modes. Provide asyncio.connect(),
asyncio.connect_unix(), asyncio.connect_read_pipe() and
asyncio.connect_write_pipe() factories to open
asyncio.Stream connections. Provide asyncio.StreamServer
and UnixStreamServer to serve servers with asyncio.Stream API.
Modify asyncio.create_subprocess_shell() and
asyncio.create_subprocess_exec() to use asyncio.Stream
instead of deprecated StreamReader and StreamWriter.
Deprecate asyncio.StreamReader and asyncio.StreamWriter.
Deprecate usage of private classes, e.g.
asyncio.FlowControlMixing and
asyncio.StreamReaderProtocol outside of asyncio package.

: Added validation of integer prefixes to the construction of IP
networks and interfaces in the ipaddress module.

: Add an extend action to argparser.

: Fix a bug making a SharedMemoryManager instance and its parent
process use two separate resource_tracker processes.

================================================================================

# Changelog - Library (Part 9)

: Adds a grammar to lib2to3.pygram that contains exec as a
function not as statement.

: The function time.clock() was deprecated in 3.3 in favor of
time.perf_counter() and marked for removal in 3.8, it has removed.

: Fix asyncio discarding IPv6 scopes when ensuring hostname
resolutions internally

: Add new function math.isqrt() to compute integer square
roots.

: Introduce the importlib.metadata module with (provisional)
support for reading metadata from third-party packages.

: When using type_comments=True in , treat 
  followed by a non-alphanumeric character and then arbitrary
text as a type ignore, instead of requiring nothing but whitespace or
another comment. This is to permit formations such as  
ignore[E1000].

:  encoding (Windows code page 65001) becomes an alias
to  encoding.

: The multiprocessing.resource_tracker replaces the
multiprocessing.semaphore_tracker module. Other than semaphores,
resource_tracker also tracks shared_memory segments.

: The  and  objects of the 
module are not exposed to the user.  Patch by Aviv Palivoda.

================================================================================

# Changelog - Library (Part 10)

: In shutil.copystat(), first copy extended file attributes
and then file permissions, since extended attributes can only be set on
the destination while it is still writeable.

: Add new sys.unraisablehook() function which can be
overridden to control how âunraisable exceptionsâ are handled. It is
called when an exception has occurred but there is no way for Python to
handle it. For example, when a destructor raises an exception or during
garbage collection (gc.collect()).

: Introducing zipfile.Path, a pathlib-compatible wrapper for
traversing zip files.

: Fix an issue where os.posix_spawnp() would incorrectly raise a
TypeError when file_actions is None.

: Handle exceptions raised by functions added by
concurrent.futures add_done_callback correctly when the Future has already
completed.

: Limit max_workers in ProcessPoolExecutor to 61 to work
around a WaitForMultipleObjects limitation.

: Fix QueueListener to call
queue.task_done() upon stopping. Patch by Bar Harel.

: Forbid creation of asyncio stream objects like StreamReader,
StreamWriter, Process, and their protocols outside of asyncio package.

: Provide both sync and async calls for StreamWriter.write() and
StreamWriter.close()

================================================================================

# Changelog - Library (Part 11)

: Properly handle SSL connection closing in asyncio
StreamWriter.drain() call.

: Implement PEP 574 (pickle protocol 5 with out-of-band buffers).

: functools.lru_cache() can now be used as a straight decorator
in addition to its existing usage as a function that returns a decorator.

: Add a BadGzipFile exception to the 
module.

: Optimized write buffering in C implementation of
TextIOWrapper. Writing ASCII string to TextIOWrapper with ascii,
latin1, or utf-8 encoding is about 20% faster.  Patch by Inada Naoki.

: Donât mark wsgiref.simple_server.SimpleServer as
multi-threaded since wsgiref.simple_server.WSGIServer is
single-threaded.

: py_compile.compile() now supports silent mode. Patch by
Joannah Nanjekye

: Fix double exceptions in wsgiref.handlers.BaseHandler
by calling its  method only
when no exception is raised.

: Improved the repr of regular expression flags.

: The signature of Python functions can now be overridden by
specifying the __text_signature__ attribute.

================================================================================

# Changelog - Library (Part 12)

: Reinitialize logging.Handler locks in forked child processes
instead of attempting to acquire them all in the parent before forking
only to be released in the child process.  The acquire/release pattern was
leading to deadlocks in code that has implemented any form of chained
logging handlers that depend upon one another as the lock acquisition
order cannot be guaranteed.

: Throw a TypeError instead of an AssertionError when using an
invalid type annotation with singledispatch.

: Allow reduction methods to return a 6-item tuple where the 6th
item specifies a custom state-setting method thatâs called instead of the
regular __setstate__ method.

: enable custom reduction callback registration for functions and
classes in _pickle.c, using the new Picklerâs attribute
reducer_override

: Fix a bug crashing SharedMemoryManager instances in interactive
sessions after a ctrl-c (KeyboardInterrupt) was sent

: Fix mmap fail for VxWorks

: csv.DictWriter.writeheader() now returns the return value
of the underlying csv.Writer.writerow() method. Patch contributed by
Ashish Nitin Patil.

: Parsing .mo files now ignores comments starting and ending with
#-#-#-#-#.

================================================================================

# Changelog - Library (Part 13)

: Enable plistlib to read and write binary plist files that were
created as a KeyedArchive file. Specifically, this allows the plistlib to
process 0x80 tokens as UID objects.

: Add posix module support for VxWorks.

: Asyncio: Remove inner callback on outer cancellation in shield

: Fix asyncio.SelectorEventLoop.subprocess_exec() leaks
file descriptors if  fails and called with
stdin=subprocess.PIPE. Patch by Niklas Fiekas.

: unittest.mock.mock_open() results now respects the
argument of read([size]). Patch contributed by RÃ©mi Lapeyre.

: Implement math.comb() that returns binomial coefficient,
that computes the number of ways to choose k items from n items without
repetition and without order. Patch by Yash Aggarwal and Keller Fuchs.

: Fixed permission errors in
TemporaryDirectory clean up. Previously
TemporaryDirectory.cleanup() failed when non-writeable or
non-searchable files or directories were created inside a temporary
directory.

: Add debugging helpers to ssl module. Itâs now possible to dump
key material and to trace TLS protocol. The default and stdlib contexts
also support SSLKEYLOGFILE env var.

================================================================================

# Changelog - Library (Part 14)

: Added AsyncMock to support using unittest to mock asyncio
coroutines. Patch by Lisa Roach.

: dataclasses.InitVar: Exposes the type used to create the init
var.

: Fix serialization of messages containing encoded strings when
the policy.linesep is set to a multi-character string. Patch by Jens
Troeger.

: Performance of functools.reduce() is slightly improved.
Patch by Sergey Fedoseev.

: Fix a bug in codecs.StreamRecoder where seeking might
leave old data in a buffer and break subsequent read calls. Patch by Ammar
Askar.

: The  module now exposes shlex.join(), the
inverse of shlex.split(). Patch by Bo Bayles.

: asyncio.AbstractEventLoop.create_datagram_endpoint(): Do
not connect UDP socket when broadcast is allowed. This allows to receive
replies after a UDP broadcast.

: Change ThreadPoolExecutor to use existing idle threads before
spinning up new ones.

: Added support for bytes and path-like objects in
subprocess.Popen() on Windows.  The  parameter now accepts a
path-like object if  is  and a sequence containing
bytes and path-like objects. The executable parameter now accepts a
bytes and path-like object. The  parameter now accepts a
bytes object. Based on patch by Anders Lorentsen.

================================================================================

# Changelog - Library (Part 15)

: pathlib.Path.unlink now accepts a missing_ok
parameter to avoid a FileNotFoundError from being raised. Patch by
Robert Buchholz.

: Allow  objects to access the madvise() system
call (through mmap.mmap.madvise()).

: Added support for ZIP files with disks set to 0. Such files are
commonly created by builtin tools on Windows when use ZIP64 extension.
Patch by Francisco Facioni.

: trace.py can now run modules via python3 -m trace -t âmodule
module_name

: Changed unittest.mock.patch.dict() to return the patched
dictionary when used as context manager. Patch by Vadim Tsander.

: Added a __copy__() to collections.UserList and
collections.UserDict in order to correctly implement shallow copying
of the objects. Patch by Bar Harel.

: ,  and  (end-of-file on Windows) are now
escaped in protocol 0 pickles of Unicode strings. This allows to load them
without loss from files open in text mode in Python 2.

: _thread.interrupt_main() now avoids setting the Python
error status if the  signal is ignored or not handled by Python.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Clarify that some types have unstable constructor signature
between Python versions.
: Improve documentation of the stdin, stdout, and stderr
arguments of the asyncio.subprocess_exec function to specify which
values are supported. Also mention that decoding as text is not supported.
Add a few tests to verify that the various values passed to the std*
arguments actually work.

================================================================================

# Changelog - Documentation (Part 2)

: Improve version added references in  module - by
Anthony Sottile.
: Whatâs new now mentions SSLContext.hostname_checks_common_name
instead of SSLContext.host_flags.
: Add a note to the curses.addstr() documentation to warn
that multiline strings can cause segfaults because of an ncurses bug.
: Added C API Documentation for Time_FromTimeAndFold and
PyDateTime_FromDateAndTimeAndFold as per PEP 495. Patch by Edison
Abahurire.
: More of the legacy distutils documentation has been either
pruned, or else more clearly marked as being retained solely until the
setuptools documentation covers it independently.
: Add detail to the documentation on the  function.
: Remove deprecation and document urllib.parse.unwrap(). Patch
contributed by RÃ©mi Lapeyre.
: Added the context variable in glossary.
: Clarify that  is not part of the MutableSequence
ABC.
: Make codecs.StreamRecoder.writelines take a list of bytes.
: Added documentation for func factorial to indicate that returns
integer values
: Expand object.__doc__ (docstring) to make it clearer. Modify
pydoc.py so that help(object) lists object methods (for other classes,
help omits methods of the object base class.)

================================================================================

# Changelog - Documentation (Part 3)

: Clarify that some types have unstable constructor signature
between Python versions.

: Improve documentation of the stdin, stdout, and stderr
arguments of the asyncio.subprocess_exec function to specify which
values are supported. Also mention that decoding as text is not supported.

Add a few tests to verify that the various values passed to the std*
arguments actually work.

: Improve version added references in  module - by
Anthony Sottile.

: Whatâs new now mentions SSLContext.hostname_checks_common_name
instead of SSLContext.host_flags.

: Add a note to the curses.addstr() documentation to warn
that multiline strings can cause segfaults because of an ncurses bug.

: Added C API Documentation for Time_FromTimeAndFold and
PyDateTime_FromDateAndTimeAndFold as per PEP 495. Patch by Edison
Abahurire.

: More of the legacy distutils documentation has been either
pruned, or else more clearly marked as being retained solely until the
setuptools documentation covers it independently.

: Add detail to the documentation on the  function.

: Remove deprecation and document urllib.parse.unwrap(). Patch
contributed by RÃ©mi Lapeyre.

: Added the context variable in glossary.

================================================================================

# Changelog - Documentation (Part 4)

: Clarify that  is not part of the MutableSequence
ABC.

: Make codecs.StreamRecoder.writelines take a list of bytes.

: Added documentation for func factorial to indicate that returns
integer values

: Expand object.__doc__ (docstring) to make it clearer. Modify
pydoc.py so that help(object) lists object methods (for other classes,
help omits methods of the object base class.)

================================================================================

# Changelog - Tests (Part 1)

List:
: Modify test_coroutines, test_cprofile, test_generators,
test_raise, test_ssl and test_yield_from to use
test.support.catch_unraisable_exception() rather than
test.support.captured_stderr().
: Fix test_memfd_create on older Linux Kernels.
: Test with OpenSSL 1.1.1c
: Add test.support.catch_unraisable_exception(): context
manager catching unraisable exception using sys.unraisablehook().
: The main regrtest process now always removes all temporary
directories of worker processes even if they crash or if they are killed
on KeyboardInterrupt (CTRL+c).
: âpython3 -m test -jN â¦â now continues the execution of next
tests when a worker process crash (CHILD_ERROR state). Previously, the
test suite stopped immediately. Use âfailfast to stop at the first error.
: Update Lib/test/selfsigned_pythontestdotnet.pem to match
self-signed.pythontest.netâs new TLS certificate.
: Skip httplib and nntplib networking tests when they would
otherwise fail due to a modern OS or distro with a default OpenSSL policy
of rejecting connections to servers with weak certificates.
: Add tests for several C API functions in the 
module. Patch by Edison Abahurire.
: Fix test_multiprocessing in test_venv if platform lacks
functioning sem_open.

================================================================================

# Changelog - Tests (Part 2)

: Modify test_coroutines, test_cprofile, test_generators,
test_raise, test_ssl and test_yield_from to use
test.support.catch_unraisable_exception() rather than
test.support.captured_stderr().

: Fix test_memfd_create on older Linux Kernels.

: Test with OpenSSL 1.1.1c

: Add test.support.catch_unraisable_exception(): context
manager catching unraisable exception using sys.unraisablehook().

: The main regrtest process now always removes all temporary
directories of worker processes even if they crash or if they are killed
on KeyboardInterrupt (CTRL+c).

: âpython3 -m test -jN â¦â now continues the execution of next
tests when a worker process crash (CHILD_ERROR state). Previously, the
test suite stopped immediately. Use âfailfast to stop at the first error.

: Update Lib/test/selfsigned_pythontestdotnet.pem to match
self-signed.pythontest.netâs new TLS certificate.

: Skip httplib and nntplib networking tests when they would
otherwise fail due to a modern OS or distro with a default OpenSSL policy
of rejecting connections to servers with weak certificates.

: Add tests for several C API functions in the 
module. Patch by Edison Abahurire.

================================================================================

# Changelog - Tests (Part 3)

: Fix test_multiprocessing in test_venv if platform lacks
functioning sem_open.

================================================================================

# Changelog - Build (Part 1)

List:
: To embed Python into an application, a new  option
must be passed to python3-config   to get -lpython3.8
(link the application to libpython). To support both 3.8 and older, try
python3-config   first and fallback to python3-config
 (without ) if the previous command fails.
Add a pkg-config python-3.8-embed module to embed Python into an
application: pkg-config python-3.8-embed  includes
-lpython3.8. To support both 3.8 and older, try pkg-config
python-X.Y-embed  first and fallback to pkg-config python-X.Y
 (without ) if the previous command fails (replace
 with the Python version).
On the other hand, pkg-config   no longer contains
-lpython3.8. C extensions must not be linked to libpython (except on
Android, case handled by the script); this change is backward incompatible
on purpose.

: âmake installâ now runs compileall in parallel.

: To embed Python into an application, a new  option
must be passed to python3-config   to get -lpython3.8
(link the application to libpython). To support both 3.8 and older, try
python3-config   first and fallback to python3-config
 (without ) if the previous command fails.

================================================================================

# Changelog - Build (Part 2)

Add a pkg-config python-3.8-embed module to embed Python into an
application: pkg-config python-3.8-embed  includes
-lpython3.8. To support both 3.8 and older, try pkg-config
python-X.Y-embed  first and fallback to pkg-config python-X.Y
 (without ) if the previous command fails (replace
 with the Python version).

On the other hand, pkg-config   no longer contains
-lpython3.8. C extensions must not be linked to libpython (except on
Android, case handled by the script); this change is backward incompatible
on purpose.

: âmake installâ now runs compileall in parallel.

================================================================================

# Changelog - Windows

List:
: include of STATUS_CONTROL_C_EXIT without depending on MSC
compiler
: Update to OpenSSL 1.1.1b for Windows.
: Add Windows support for UDP transports for the Proactor Event
Loop. Patch by Adam Meily.
: The Py_DEPRECATED() macro has been implemented for
MSVC.

: include of STATUS_CONTROL_C_EXIT without depending on MSC
compiler

: Update to OpenSSL 1.1.1b for Windows.

: Add Windows support for UDP transports for the Proactor Event
Loop. Patch by Adam Meily.

: The Py_DEPRECATED() macro has been implemented for
MSVC.

================================================================================

# Changelog - macOS

List:
: Support building Python on macOS without /usr/include
installed. As of macOS 10.14, system header files are only available
within an SDK provided by either the Command Line Tools or the Xcode app.

: Support building Python on macOS without /usr/include
installed. As of macOS 10.14, system header files are only available
within an SDK provided by either the Command Line Tools or the Xcode app.

================================================================================

# Changelog - IDLE

List:
: Replace now redundant .context_use_ps1 with .prompt_last_line.
This finishes change started in .
: Make idlelib.run runnable; add test clause.
: Print any argument other than None or int passed to SystemExit
or sys.exit().
: When saving a file, call os.fsync() so bits are flushed to e.g.
USB drive.
: In browser.py, remove extraneous sorting by line number since
dictionary was created in line number order.

: Replace now redundant .context_use_ps1 with .prompt_last_line.
This finishes change started in .

: Make idlelib.run runnable; add test clause.

: Print any argument other than None or int passed to SystemExit
or sys.exit().

: When saving a file, call os.fsync() so bits are flushed to e.g.
USB drive.

: In browser.py, remove extraneous sorting by line number since
dictionary was created in line number order.

================================================================================

# Changelog - Tools/Demos

List:
: Handle strings like uâbarâ correctly in
Tools/parser/unparse.py. Patch by Chih-Hsuan Yen.

: Handle strings like uâbarâ correctly in
Tools/parser/unparse.py. Patch by Chih-Hsuan Yen.

================================================================================

# Changelog - C API (Part 1)

List:
: Implement the  âPython Initialization Configurationâ.
: Fix crashes when attempting to use the  parameter when
 is implemented in C.
: Update PyObject_CallMethodObjArgs() and
_PyObject_CallMethodIdObjArgs to use _PyObject_GetMethod to avoid
creating a bound method object in many cases. Patch by Michael J.
Sullivan.
: Implement : Vectorcall: a fast calling protocol for
CPython. This is a new protocol to optimize calls of custom callable
objects.
:  now returns the exitcode rather than calling
Py_Exit(exitcode) when calling PyErr_Print() if the current
exception type is SystemExit.
: Add new type flag Py_TPFLAGS_METHOD_DESCRIPTOR for objects
behaving like unbound methods. These are objects supporting the
optimization given by the LOAD_METHOD/CALL_METHOD opcodes. See PEP
590.
: The PyEval_ReInitThreads() function has been removed
from the C API. It should not be called explicitly: use
PyOS_AfterFork_Child() instead.

: Implement the  âPython Initialization Configurationâ.

: Fix crashes when attempting to use the  parameter when
 is implemented in C.

================================================================================

# Changelog - C API (Part 2)

: Update PyObject_CallMethodObjArgs() and
_PyObject_CallMethodIdObjArgs to use _PyObject_GetMethod to avoid
creating a bound method object in many cases. Patch by Michael J.
Sullivan.

: Implement : Vectorcall: a fast calling protocol for
CPython. This is a new protocol to optimize calls of custom callable
objects.

:  now returns the exitcode rather than calling
Py_Exit(exitcode) when calling PyErr_Print() if the current
exception type is SystemExit.

: Add new type flag Py_TPFLAGS_METHOD_DESCRIPTOR for objects
behaving like unbound methods. These are objects supporting the
optimization given by the LOAD_METHOD/CALL_METHOD opcodes. See PEP
590.

: The PyEval_ReInitThreads() function has been removed
from the C API. It should not be called explicitly: use
PyOS_AfterFork_Child() instead.

================================================================================

# Changelog - Security (Part 1)

List:
: Fixes mishandling of pre-normalization characters in
urlsplit().
: Address CVE 2019-9740 by disallowing URL paths with embedded
whitespace or control characters through into the underlying http client
request.  Such potentially malicious header injection URLs now cause an
http.client.InvalidURL exception to be raised.
: shutil.which() now uses os.confstr("CS_PATH") if
available and if the  environment variable is not set.
Remove also the current directory from posixpath.defpath. On Unix,
shutil.which() and the subprocess module no longer search the
executable in the current directory if the  environment
variable is not set.

: Fixes mishandling of pre-normalization characters in
urlsplit().

: Address CVE 2019-9740 by disallowing URL paths with embedded
whitespace or control characters through into the underlying http client
request.  Such potentially malicious header injection URLs now cause an
http.client.InvalidURL exception to be raised.

================================================================================

# Changelog - Security (Part 2)

: shutil.which() now uses os.confstr("CS_PATH") if
available and if the  environment variable is not set.
Remove also the current directory from posixpath.defpath. On Unix,
shutil.which() and the subprocess module no longer search the
executable in the current directory if the  environment
variable is not set.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: In debug build, import now also looks for C extensions compiled
in release mode and for C extensions compiled in the stable ABI.
: Fix Python Initialization code on FreeBSD to detect properly
when stdin file descriptor (fd 0) is invalid.
: Remove parser headers and related function declarations that
lack implementations after the removal of pgen.
: dict.pop() is now up to 33% faster thanks to Argument
Clinic. Patch by Inada Naoki.
: Debug memory allocators: disable serialno field by default from
debug hooks on Python memory allocators to reduce the memory footprint by
5%. Enable tracemalloc to get the traceback where a memory block
has been allocated when a fatal memory error is logged to decide where to
put a breakpoint. Compile Python with PYMEM_DEBUG_SERIALNO defined to
get back the field.
: On AIX, sys.platform doesnât contain the major version
anymore. Always return , instead of  .. .
Since older Python versions include the version number, it is recommended
to always use sys.platform.startswith('aix'). Contributed by M. Felt.
: Change str.capitalize to use titlecase for the first character
instead of uppercase.
: Implement  (Python positional-only parameters). Patch
by Pablo Galindo.
: PyEval_AcquireLock() and
PyEval_AcquireThread() now terminate the current thread if called
while the interpreter is finalizing, making them consistent with
PyEval_RestoreThread(), Py_END_ALLOW_THREADS(), and
PyGILState_Ensure().
: Fix signed integer overflow in _ctypes.câs
PyCArrayType_new().
: Fix running script with encoding cookie and LF line ending may
fail on Windows.
: Fixed support of the surrogatepass error handler in the UTF-8
incremental decoder.
: Changing  keys during iteration of the dict itself,
, , or  will now be detected in certain
corner cases where keys are deleted/added so that the number of keys isnât
changed. A RuntimeError will be raised after  iterations.
Contributed by Thomas Perl.
: Fix a possible double PyMem_FREE() due to tokenizer.câs
tok_nextc().
: Fixed TypeError message in classmethoddescr_call.
: Fix a possible reference leak in itertools.count().
: Include node names in ParserError messages, instead of
numeric IDs. Patch by A. Skrobov.
: Regenerate  from the Grammar and Tokens file
using pgen. Patch by Pablo Galindo.
: Add missing PyObject_GC_Track() calls in the
 module. Patch by Zackery Spytz.

================================================================================

# Changelog - Core and Builtins (Part 2)

: In debug build, import now also looks for C extensions compiled
in release mode and for C extensions compiled in the stable ABI.

: Fix Python Initialization code on FreeBSD to detect properly
when stdin file descriptor (fd 0) is invalid.

: Remove parser headers and related function declarations that
lack implementations after the removal of pgen.

: dict.pop() is now up to 33% faster thanks to Argument
Clinic. Patch by Inada Naoki.

: Debug memory allocators: disable serialno field by default from
debug hooks on Python memory allocators to reduce the memory footprint by
5%. Enable tracemalloc to get the traceback where a memory block
has been allocated when a fatal memory error is logged to decide where to
put a breakpoint. Compile Python with PYMEM_DEBUG_SERIALNO defined to
get back the field.

: On AIX, sys.platform doesnât contain the major version
anymore. Always return , instead of  .. .
Since older Python versions include the version number, it is recommended
to always use sys.platform.startswith('aix'). Contributed by M. Felt.

: Change str.capitalize to use titlecase for the first character
instead of uppercase.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Implement  (Python positional-only parameters). Patch
by Pablo Galindo.

: PyEval_AcquireLock() and
PyEval_AcquireThread() now terminate the current thread if called
while the interpreter is finalizing, making them consistent with
PyEval_RestoreThread(), Py_END_ALLOW_THREADS(), and
PyGILState_Ensure().

: Fix signed integer overflow in _ctypes.câs
PyCArrayType_new().

: Fix running script with encoding cookie and LF line ending may
fail on Windows.

: Fixed support of the surrogatepass error handler in the UTF-8
incremental decoder.

: Changing  keys during iteration of the dict itself,
, , or  will now be detected in certain
corner cases where keys are deleted/added so that the number of keys isnât
changed. A RuntimeError will be raised after  iterations.
Contributed by Thomas Perl.

: Fix a possible double PyMem_FREE() due to tokenizer.câs
tok_nextc().

: Fixed TypeError message in classmethoddescr_call.

: Fix a possible reference leak in itertools.count().

: Include node names in ParserError messages, instead of
numeric IDs. Patch by A. Skrobov.

: Regenerate  from the Grammar and Tokens file
using pgen. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Add missing PyObject_GC_Track() calls in the
 module. Patch by Zackery Spytz.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix pythoninfo when the compiler is missing.
: The  methods of xml.etree.ElementTree can now
search for wildcards like  and  that match a tag in any
namespace or all tags in a namespace.  Patch by Stefan Behnel.
: pathlib.path.link_to() is now implemented. It creates a
hard link pointing to a path.
bpo-1613500: fileinput.FileInput now uses the input file mode to
correctly set the output file mode (previously it was hardcoded to
)  when inplace=True is passed to its constructor.
: Fix compilation of faulthandler.c on HP-UX. Initialize
 current_stack to zero using .
: The xml.etree.ElementTree packages gained support for C14N 2.0
serialisation. Patch by Stefan Behnel.
: Add missing matrix multiplication operator support to
weakref.proxy.
: The XMLParser() in xml.etree.ElementTree provides namespace
prefix context to the parser target if it defines the callback methods
âstart_ns()â and/or âend_ns()â. Patch by Stefan Behnel.
: The TreeBuilder and XMLPullParser in xml.etree.ElementTree
gained support for parsing comments and processing instructions. Patch by
Stefan Behnel.
: The C version of functools.lru_cache() was treating calls with
an empty  dictionary as being distinct from calls with no
keywords at all. This did not result in an incorrect answer, but it did
trigger an unexpected cache miss.
: Fix distutils.sysconfig if sys.executable is
 or an empty string: use os.getcwd() to initialize
project_base.  Fix also the distutils build command: donât use
sys.executable if it is  or an empty string.
: shutil.which() and distutils.spawn.find_executable
now use os.confstr("CS_PATH") if available instead of
os.defpath, if the  environment variable is not set.
Moreover, donât use os.confstr("CS_PATH") nor os.defpath if
the  environment variable is set to an empty string.
: improve performance of IPNetwork.__contains__()
: Path expressions in xml.etree.ElementTree can now avoid
explicit namespace prefixes for tags (or the â{namespace}tagâ notation) by
passing a default namespace with an empty string prefix.
: Fix  wait() not removing callback if exception
: Fix isinstance check for Mock objects with spec when the
code is executed under tracing. Patch by Karthikeyan Singaravelan.
: In development mode ( ) and in debug build,
the  destructor now logs  exceptions. These
exceptions are silent by default in release mode.
: The  module now uses internal timer same to
time.perf_counter() by default. gettimeofday(2) was used on Unix.
New timer has better resolution on most Unix platforms and timings are no
longer impacted by system clock updates since perf_counter() is
monotonic. Patch by Inada Naoki.
: json.loads now emits DeprecationWarning when
 option is specified.  Patch by Matthias Bussonnier.
: The random module now prefers the lean internal _sha512 module
over hashlib for seed(version=2) to optimize import time.
: Set backlog=None as the default for socket.create_server.
: Fix time.mktime() error handling on AIX for year before
1970.
: Improve error message when trying to open existing DBM database
that actually doesnât exist. Patch by Marco Rougeth.
: Add statistics.quantiles()
: Optimized http.client.HTTPResponse.read() for large
response. Patch by Inada Naoki.
: If debuglevel is set to >0 in http.client, print all
values for headers with multiple values for the same header name. Patch by
Matt Houglum.
: Deprecated passing required arguments like  as keyword
arguments in functions which should accept arbitrary keyword arguments and
pass them to other function. Arbitrary keyword arguments (even with names
âselfâ and âfuncâ) can now be passed to these functions if the required
arguments are passed as positional arguments.
: Add statistics.geometric_mean().
: os.path.normcase() relies on os.fspath() to check the
type of its argument. Redundant checks have been removed from its
posixpath.normcase() and ntpath.normcase() implementations. Patch
by Wolfgang Maier.
: Stop rejecting IPv4 octets for being ambiguously octal. Leading
zeros are ignored, and no longer are assumed to specify octal octets.
Octets are always decimal numbers. Octets must still be no more than three
digits, including leading zeroes.
: Errors during writing to a ZIP file no longer prevent to
properly close it.
: Fixed wrong indentation writing for CDATA section in
xml.dom.minidom. Patch by Vladimir Surjaninov.
: inspect.getdoc() can now find docstrings for member objects
when __slots__ is a dictionary.
: Calling  on an unstarted or stopped
unittest.mock.patch() object will now return  instead of
raising RuntimeError, making the method idempotent. Patch by
Karthikeyan Singaravelan.
: The imap.IMAP4.logout() method no longer ignores silently
arbitrary exceptions.
: Add time module support and fix test_time failures for VxWorks.
: Added support for keyword arguments default_namespace and
xml_declaration in functions ElementTree.tostring() and
ElementTree.tostringlist().
: Added new alternate constructors
datetime.date.fromisocalendar() and
datetime.datetime.fromisocalendar(), which construct date objects
from ISO year, week number and weekday; these are the inverse of each
classâs isocalendar method. Patch by Paul Ganssle.
: modulefinder no longer depends on the deprecated
 module, and the initializer for
modulefinder.ModuleFinder now has immutable default arguments.
Patch by Brandt Bucher.
: modulefinder correctly handles modules that have the
same name as a bad package. Patch by Brandt Bucher.
: modulefinder no longer crashes when encountering syntax
errors in followed imports. Patch by Brandt Bucher.
: Added create_server() and
has_dualstack_ipv6() convenience functions to automate the
necessary tasks usually involved when creating a server socket, including
accepting both IPv4 and IPv6 connections on the same socket.  (Contributed
by Giampaolo Rodola in .)
: Add support for classmethod() and staticmethod() to
unittest.mock.create_autospec().  Initial patch by Felipe Ochoa.
: Fix potential resource warnings in distutils. Patch by MickaÃ«l
Schoentgen.
: Add transparency methods to tkinter.PhotoImage.  Patch
by Zackery Spytz.
: Donât return deleted attributes when calling dir on a
unittest.mock.Mock.
: wsgiref.handlers.BaseHandler now handles abrupt client
connection terminations gracefully. Patch by Petter Strandmark.
: xml.sax.parse() now supports . Patch by MickaÃ«l Schoentgen.
: Remove stale unix datagram socket before binding
: Implemented Happy Eyeballs in asyncio.create_connection().
Added two new arguments, happy_eyeballs_delay and interleave, to
specify Happy Eyeballs behavior.
: Do not raise AttributeError when calling the inspect functions
isgeneratorfunction, iscoroutinefunction, isasyncgenfunction on a method
created from an arbitrary callable. Instead, return False.
: Fix the multiprocessing.semaphore_tracker so it is reused by
child processes
: Fix   --restructuredtext for files containing
 directives.

================================================================================

# Changelog - Library (Part 2)

: Fix pythoninfo when the compiler is missing.

: The  methods of xml.etree.ElementTree can now
search for wildcards like  and  that match a tag in any
namespace or all tags in a namespace.  Patch by Stefan Behnel.

: pathlib.path.link_to() is now implemented. It creates a
hard link pointing to a path.

bpo-1613500: fileinput.FileInput now uses the input file mode to
correctly set the output file mode (previously it was hardcoded to
)  when inplace=True is passed to its constructor.

: Fix compilation of faulthandler.c on HP-UX. Initialize
 current_stack to zero using .

: The xml.etree.ElementTree packages gained support for C14N 2.0
serialisation. Patch by Stefan Behnel.

: Add missing matrix multiplication operator support to
weakref.proxy.

: The XMLParser() in xml.etree.ElementTree provides namespace
prefix context to the parser target if it defines the callback methods
âstart_ns()â and/or âend_ns()â. Patch by Stefan Behnel.

: The TreeBuilder and XMLPullParser in xml.etree.ElementTree
gained support for parsing comments and processing instructions. Patch by
Stefan Behnel.

================================================================================

# Changelog - Library (Part 3)

: The C version of functools.lru_cache() was treating calls with
an empty  dictionary as being distinct from calls with no
keywords at all. This did not result in an incorrect answer, but it did
trigger an unexpected cache miss.

: Fix distutils.sysconfig if sys.executable is
 or an empty string: use os.getcwd() to initialize
project_base.  Fix also the distutils build command: donât use
sys.executable if it is  or an empty string.

: shutil.which() and distutils.spawn.find_executable
now use os.confstr("CS_PATH") if available instead of
os.defpath, if the  environment variable is not set.
Moreover, donât use os.confstr("CS_PATH") nor os.defpath if
the  environment variable is set to an empty string.

: improve performance of IPNetwork.__contains__()

: Path expressions in xml.etree.ElementTree can now avoid
explicit namespace prefixes for tags (or the â{namespace}tagâ notation) by
passing a default namespace with an empty string prefix.

: Fix  wait() not removing callback if exception

: Fix isinstance check for Mock objects with spec when the
code is executed under tracing. Patch by Karthikeyan Singaravelan.

================================================================================

# Changelog - Library (Part 4)

: In development mode ( ) and in debug build,
the  destructor now logs  exceptions. These
exceptions are silent by default in release mode.

: The  module now uses internal timer same to
time.perf_counter() by default. gettimeofday(2) was used on Unix.
New timer has better resolution on most Unix platforms and timings are no
longer impacted by system clock updates since perf_counter() is
monotonic. Patch by Inada Naoki.

: json.loads now emits DeprecationWarning when
 option is specified.  Patch by Matthias Bussonnier.

: The random module now prefers the lean internal _sha512 module
over hashlib for seed(version=2) to optimize import time.

: Set backlog=None as the default for socket.create_server.

: Fix time.mktime() error handling on AIX for year before
1970.

: Improve error message when trying to open existing DBM database
that actually doesnât exist. Patch by Marco Rougeth.

: Add statistics.quantiles()

: Optimized http.client.HTTPResponse.read() for large
response. Patch by Inada Naoki.

: If debuglevel is set to >0 in http.client, print all
values for headers with multiple values for the same header name. Patch by
Matt Houglum.

================================================================================

# Changelog - Library (Part 5)

: Deprecated passing required arguments like  as keyword
arguments in functions which should accept arbitrary keyword arguments and
pass them to other function. Arbitrary keyword arguments (even with names
âselfâ and âfuncâ) can now be passed to these functions if the required
arguments are passed as positional arguments.

: Add statistics.geometric_mean().

: os.path.normcase() relies on os.fspath() to check the
type of its argument. Redundant checks have been removed from its
posixpath.normcase() and ntpath.normcase() implementations. Patch
by Wolfgang Maier.

: Stop rejecting IPv4 octets for being ambiguously octal. Leading
zeros are ignored, and no longer are assumed to specify octal octets.
Octets are always decimal numbers. Octets must still be no more than three
digits, including leading zeroes.

: Errors during writing to a ZIP file no longer prevent to
properly close it.

: Fixed wrong indentation writing for CDATA section in
xml.dom.minidom. Patch by Vladimir Surjaninov.

: inspect.getdoc() can now find docstrings for member objects
when __slots__ is a dictionary.

================================================================================

# Changelog - Library (Part 6)

: Calling  on an unstarted or stopped
unittest.mock.patch() object will now return  instead of
raising RuntimeError, making the method idempotent. Patch by
Karthikeyan Singaravelan.

: The imap.IMAP4.logout() method no longer ignores silently
arbitrary exceptions.

: Add time module support and fix test_time failures for VxWorks.

: Added support for keyword arguments default_namespace and
xml_declaration in functions ElementTree.tostring() and
ElementTree.tostringlist().

: Added new alternate constructors
datetime.date.fromisocalendar() and
datetime.datetime.fromisocalendar(), which construct date objects
from ISO year, week number and weekday; these are the inverse of each
classâs isocalendar method. Patch by Paul Ganssle.

: modulefinder no longer depends on the deprecated
 module, and the initializer for
modulefinder.ModuleFinder now has immutable default arguments.
Patch by Brandt Bucher.

: modulefinder correctly handles modules that have the
same name as a bad package. Patch by Brandt Bucher.

: modulefinder no longer crashes when encountering syntax
errors in followed imports. Patch by Brandt Bucher.

================================================================================

# Changelog - Library (Part 7)

: Added create_server() and
has_dualstack_ipv6() convenience functions to automate the
necessary tasks usually involved when creating a server socket, including
accepting both IPv4 and IPv6 connections on the same socket.  (Contributed
by Giampaolo Rodola in .)

: Add support for classmethod() and staticmethod() to
unittest.mock.create_autospec().  Initial patch by Felipe Ochoa.

: Fix potential resource warnings in distutils. Patch by MickaÃ«l
Schoentgen.

: Add transparency methods to tkinter.PhotoImage.  Patch
by Zackery Spytz.

: Donât return deleted attributes when calling dir on a
unittest.mock.Mock.

: wsgiref.handlers.BaseHandler now handles abrupt client
connection terminations gracefully. Patch by Petter Strandmark.

: xml.sax.parse() now supports . Patch by MickaÃ«l Schoentgen.

: Remove stale unix datagram socket before binding

: Implemented Happy Eyeballs in asyncio.create_connection().
Added two new arguments, happy_eyeballs_delay and interleave, to
specify Happy Eyeballs behavior.

: Do not raise AttributeError when calling the inspect functions
isgeneratorfunction, iscoroutinefunction, isasyncgenfunction on a method
created from an arbitrary callable. Instead, return False.

================================================================================

# Changelog - Library (Part 8)

: Fix the multiprocessing.semaphore_tracker so it is reused by
child processes

: Fix   --restructuredtext for files containing
 directives.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Remove obsolete comments from docstrings in fractions.Fraction
: Document relative imports
: Add docstring for io.IOBase.writelines().
: New documentation translation: Simplified Chinese.
: Avoid the duplication of code from Tools/scripts/serve.py
in using the literalinclude directive for the basic
wsgiref-based web server in the documentation of .
Contributed by StÃ©phane Wirtel.
: Using the code of the Tools/scripts/serve.py script as an
example in the  documentation.  Contributed by StÃ©phane
Wirtel.
: Added documentation for PyInterpreterState_Main().
: Updates the docs.python.org page with the addition of a
âContributing to Docsâ link at the end of the page (between âReporting
Bugsâ and âAbout Documentationâ). Updates the âFound a Bugâ page with
additional links and information in the Documentation Bugs section.
: @typing.type_check_only now allows type stubs to mark functions
and classes not available during runtime.
: Add glossary entry for âmagic methodâ.
: Added re.Match.groupdict example to regex HOWTO.

: Remove obsolete comments from docstrings in fractions.Fraction

: Document relative imports

: Add docstring for io.IOBase.writelines().

================================================================================

# Changelog - Documentation (Part 2)

: New documentation translation: Simplified Chinese.

: Avoid the duplication of code from Tools/scripts/serve.py
in using the literalinclude directive for the basic
wsgiref-based web server in the documentation of .
Contributed by StÃ©phane Wirtel.

: Using the code of the Tools/scripts/serve.py script as an
example in the  documentation.  Contributed by StÃ©phane
Wirtel.

: Added documentation for PyInterpreterState_Main().

: Updates the docs.python.org page with the addition of a
âContributing to Docsâ link at the end of the page (between âReporting
Bugsâ and âAbout Documentationâ). Updates the âFound a Bugâ page with
additional links and information in the Documentation Bugs section.

: @typing.type_check_only now allows type stubs to mark functions
and classes not available during runtime.

: Add glossary entry for âmagic methodâ.

: Added re.Match.groupdict example to regex HOWTO.

================================================================================

# Changelog - Tests (Part 1)

List:
: regrtest now always detects uncollectable objects. Previously,
the check was only enabled by --findleaks. The check now also works
with -jN/--multiprocess . --findleaks becomes a deprecated alias
to --fail-env-changed.
: When using multiprocessing mode (-jN), regrtest now better
reports errors if a worker process fails, and it exits immediately on a
worker thread failure or when interrupted.
: Change test_time.test_monotonic() to test only the lower bound
of elapsed time after a sleep command rather than the upper bound. This
prevents unnecessary test failures on slow buildbots. Patch by Victor
Stinner.
: Improve test coverage for xml.etree.ElementTree. Patch by
Gordon P. Hemsley.
: Fix typo in test_cyclic_gc() test for xml.etree.ElementTree.
Patch by Gordon P. Hemsley.
: Add a new _testinternalcapi module to test the internal
C API.
: Fix test_imap4_host_default_value() of test_imaplib:
catch also errno.ENETUNREACH error.
: Fix test_sys.test_getallocatedblocks() when
tracemalloc is enabled.
: Fix reference leak hunting in regrtest: compute also deltas (of
reference count, allocated memory blocks, file descriptor count) during
warmup, to ensure that everything is initialized before starting to hunt
reference leaks.
: Fix reference hunting (    ) when Python
has no built-in abc module.
: Port test_resource to VxWorks: skip tests cases setting
RLIMIT_FSIZE and RLIMIT_CPU.
: Fix test_tabnanny on VxWorks: adjust ENOENT error message.
: Fix _testcapi.pymem_buffer_overflow(): handle memory
allocation failure.
: Fix test_utf8_mode on VxWorks: Python always use UTF-8 on
VxWorks.
: Fix tests that may fail with PermissionError upon calling
bind() on AF_UNIX sockets.

================================================================================

# Changelog - Tests (Part 2)

: regrtest now always detects uncollectable objects. Previously,
the check was only enabled by --findleaks. The check now also works
with -jN/--multiprocess . --findleaks becomes a deprecated alias
to --fail-env-changed.

: When using multiprocessing mode (-jN), regrtest now better
reports errors if a worker process fails, and it exits immediately on a
worker thread failure or when interrupted.

: Change test_time.test_monotonic() to test only the lower bound
of elapsed time after a sleep command rather than the upper bound. This
prevents unnecessary test failures on slow buildbots. Patch by Victor
Stinner.

: Improve test coverage for xml.etree.ElementTree. Patch by
Gordon P. Hemsley.

: Fix typo in test_cyclic_gc() test for xml.etree.ElementTree.
Patch by Gordon P. Hemsley.

: Add a new _testinternalcapi module to test the internal
C API.

: Fix test_imap4_host_default_value() of test_imaplib:
catch also errno.ENETUNREACH error.

: Fix test_sys.test_getallocatedblocks() when
tracemalloc is enabled.

================================================================================

# Changelog - Tests (Part 3)

: Fix reference leak hunting in regrtest: compute also deltas (of
reference count, allocated memory blocks, file descriptor count) during
warmup, to ensure that everything is initialized before starting to hunt
reference leaks.

: Fix reference hunting (    ) when Python
has no built-in abc module.

: Port test_resource to VxWorks: skip tests cases setting
RLIMIT_FSIZE and RLIMIT_CPU.

: Fix test_tabnanny on VxWorks: adjust ENOENT error message.

: Fix _testcapi.pymem_buffer_overflow(): handle memory
allocation failure.

: Fix test_utf8_mode on VxWorks: Python always use UTF-8 on
VxWorks.

: Fix tests that may fail with PermissionError upon calling
bind() on AF_UNIX sockets.

================================================================================

# Changelog - Build (Part 1)

List:
: Remove the stale scriptsinstall Makefile target.
: On Unix, C extensions are no longer linked to libpython except
on Android and Cygwin.
It is now possible for a statically linked Python to load a C extension
built using a shared library Python.
When Python is embedded,  must not be loaded with
RTLD_LOCAL, but RTLD_GLOBAL instead. Previously, using
RTLD_LOCAL, it was already not possible to load C extensions which
were not linked to , such as C extensions of the standard
library built by the  section of Modules/Setup.
distutils, python-config and python-config.py have been modified.

================================================================================

# Changelog - Build (Part 2)

: ./configure --with-pymalloc no longer adds the  flag
to SOABI (sys.implementation.cache_tag). Enabling or disabling pymalloc
has no impact on the ABI.
: Change PyAPI_FUNC(type), PyAPI_DATA(type) and
PyMODINIT_FUNC macros of  when Py_BUILD_CORE_MODULE is
defined. The Py_BUILD_CORE_MODULE define must be now be used to build
a C extension as a dynamic library accessing Python internals: export the
 function in DLL exports on Windows.
: Donât build the  extension on VxWorks.
: Add -fmax-type-align=8 to CFLAGS when clang compiler is
detected. The pymalloc memory allocator aligns memory on 8 bytes. On
x86-64, clang expects alignment on 16 bytes by default and so uses MOVAPS
instruction which can lead to segmentation fault. Instruct clang that
Python is limited to alignment on 8 bytes to use MOVUPS instruction
instead: slower but donât trigger a SIGSEGV if the memory is not aligned
on 16 bytes. Sadly, the flag must be added to  and not just
CFLAGS_NODIST, since third party C extensions can have the same issue.
:   and   now also parse
Modules/_io/*.c and Modules/_io/*.h.
: Release builds and debug builds are now ABI compatible:
defining the  macro no longer implies the Py_TRACE_REFS
macro, which introduces the only ABI incompatibility. The
Py_TRACE_REFS macro, which adds the sys.getobjects() function
and the PYTHONDUMPREFS environment variable, can be set using
the new ./configure --with-trace-refs build option.
: setup.py now correctly reports missing OpenSSL headers and
libraries again.
: Fix regression introduced in  refactoring setup.py
: python-config  no longer includes flags of the
LINKFORSHARED variable. The LINKFORSHARED variable must only be
used to build executables.
: Remove references to âaix3â and âaix4â. Patch by M. Felt.

================================================================================

# Changelog - Build (Part 3)

: Remove the stale scriptsinstall Makefile target.

: On Unix, C extensions are no longer linked to libpython except
on Android and Cygwin.

It is now possible for a statically linked Python to load a C extension
built using a shared library Python.

When Python is embedded,  must not be loaded with
RTLD_LOCAL, but RTLD_GLOBAL instead. Previously, using
RTLD_LOCAL, it was already not possible to load C extensions which
were not linked to , such as C extensions of the standard
library built by the  section of Modules/Setup.

distutils, python-config and python-config.py have been modified.

: ./configure --with-pymalloc no longer adds the  flag
to SOABI (sys.implementation.cache_tag). Enabling or disabling pymalloc
has no impact on the ABI.

: Change PyAPI_FUNC(type), PyAPI_DATA(type) and
PyMODINIT_FUNC macros of  when Py_BUILD_CORE_MODULE is
defined. The Py_BUILD_CORE_MODULE define must be now be used to build
a C extension as a dynamic library accessing Python internals: export the
 function in DLL exports on Windows.

: Donât build the  extension on VxWorks.

================================================================================

# Changelog - Build (Part 4)

: Add -fmax-type-align=8 to CFLAGS when clang compiler is
detected. The pymalloc memory allocator aligns memory on 8 bytes. On
x86-64, clang expects alignment on 16 bytes by default and so uses MOVAPS
instruction which can lead to segmentation fault. Instruct clang that
Python is limited to alignment on 8 bytes to use MOVUPS instruction
instead: slower but donât trigger a SIGSEGV if the memory is not aligned
on 16 bytes. Sadly, the flag must be added to  and not just
CFLAGS_NODIST, since third party C extensions can have the same issue.

:   and   now also parse
Modules/_io/*.c and Modules/_io/*.h.

: Release builds and debug builds are now ABI compatible:
defining the  macro no longer implies the Py_TRACE_REFS
macro, which introduces the only ABI incompatibility. The
Py_TRACE_REFS macro, which adds the sys.getobjects() function
and the PYTHONDUMPREFS environment variable, can be set using
the new ./configure --with-trace-refs build option.

: setup.py now correctly reports missing OpenSSL headers and
libraries again.

: Fix regression introduced in  refactoring setup.py

================================================================================

# Changelog - Build (Part 5)

: python-config  no longer includes flags of the
LINKFORSHARED variable. The LINKFORSHARED variable must only be
used to build executables.

: Remove references to âaix3â and âaix4â. Patch by M. Felt.

================================================================================

# Changelog - Windows (Part 1)

List:
: Added platform.win32_edition() and platform.win32_is_iot().
Added support for cross-compiling packages for Windows ARM32. Skip tests
that are not expected to work on Windows IoT Core ARM32.
: Remove trailing spaces for registry keys when installed via the
Store.
: Fixed activate.bat to correctly update codepage when chcp.com
returns dots in output. Patch by Lorenz Mende.
: Added preset-iot layout for Windows IoT ARM containers. This
layout doesnât contain UI components like tkinter or IDLE. It also doesnât
contain files to support on-target builds since Windows ARM32 builds must
be cross-compiled when using MSVC.
: enum_certificates function of the ssl module now returns
certificates from all available certificate stores inside windows in a
query instead of returning only certificates from the system wide
certificate store. This includes certificates from these certificate
stores: local machine, local machine enterprise, local machine group
policy, current user, current user group policy, services, users.
ssl.enum_crls() function is changed in the same way to return all
certificate revocation lists inside the windows certificate revocation
list stores.
: Fixes creating a venv when debug binaries are installed.
: Enable better DLL resolution on Windows by using safe DLL
search paths and adding os.add_dll_directory().
: Add the venv standard library module to the nuget distribution
for Windows.
: Add the following socket module constants on Windows:
IPPROTO_AH IPPROTO_CBT IPPROTO_DSTOPTS IPPROTO_EGP IPPROTO_ESP
IPPROTO_FRAGMENT IPPROTO_GGP IPPROTO_HOPOPTS IPPROTO_ICLFXBM
IPPROTO_ICMPV6 IPPROTO_IDP IPPROTO_IGMP IPPROTO_IGP IPPROTO_IPV4
IPPROTO_IPV6 IPPROTO_L2TP IPPROTO_MAX IPPROTO_ND IPPROTO_NONE IPPROTO_PGM
IPPROTO_PIM IPPROTO_PUP IPPROTO_RDP IPPROTO_ROUTING IPPROTO_SCTP
IPPROTO_ST
: Added current version of libffi to cpython-source-deps. Change
_ctypes to use current version of libffi on Windows.
: Report system load when running test suite on Windows. Patch by
Ammar Askar. Based on prior work by Jeremy Kloth.
: With the Windows 10 Creators Update, non-elevated users can now
create symlinks as long as the computer has Developer Mode enabled.

================================================================================

# Changelog - Windows (Part 2)

: Added platform.win32_edition() and platform.win32_is_iot().
Added support for cross-compiling packages for Windows ARM32. Skip tests
that are not expected to work on Windows IoT Core ARM32.

: Remove trailing spaces for registry keys when installed via the
Store.

: Fixed activate.bat to correctly update codepage when chcp.com
returns dots in output. Patch by Lorenz Mende.

: Added preset-iot layout for Windows IoT ARM containers. This
layout doesnât contain UI components like tkinter or IDLE. It also doesnât
contain files to support on-target builds since Windows ARM32 builds must
be cross-compiled when using MSVC.

: enum_certificates function of the ssl module now returns
certificates from all available certificate stores inside windows in a
query instead of returning only certificates from the system wide
certificate store. This includes certificates from these certificate
stores: local machine, local machine enterprise, local machine group
policy, current user, current user group policy, services, users.
ssl.enum_crls() function is changed in the same way to return all
certificate revocation lists inside the windows certificate revocation
list stores.

================================================================================

# Changelog - Windows (Part 3)

: Fixes creating a venv when debug binaries are installed.

: Enable better DLL resolution on Windows by using safe DLL
search paths and adding os.add_dll_directory().

: Add the venv standard library module to the nuget distribution
for Windows.

: Add the following socket module constants on Windows:
IPPROTO_AH IPPROTO_CBT IPPROTO_DSTOPTS IPPROTO_EGP IPPROTO_ESP
IPPROTO_FRAGMENT IPPROTO_GGP IPPROTO_HOPOPTS IPPROTO_ICLFXBM
IPPROTO_ICMPV6 IPPROTO_IDP IPPROTO_IGMP IPPROTO_IGP IPPROTO_IPV4
IPPROTO_IPV6 IPPROTO_L2TP IPPROTO_MAX IPPROTO_ND IPPROTO_NONE IPPROTO_PGM
IPPROTO_PIM IPPROTO_PUP IPPROTO_RDP IPPROTO_ROUTING IPPROTO_SCTP
IPPROTO_ST

: Added current version of libffi to cpython-source-deps. Change
_ctypes to use current version of libffi on Windows.

: Report system load when running test suite on Windows. Patch by
Ammar Askar. Based on prior work by Jeremy Kloth.

: With the Windows 10 Creators Update, non-elevated users can now
create symlinks as long as the computer has Developer Mode enabled.

================================================================================

# Changelog - macOS

List:
: Avoid failures setting macOS stack resource limit with
resource.setrlimit. This reverts an earlier fix for  which forced
a non-default stack size when building the interpreter executable on
macOS.

: Avoid failures setting macOS stack resource limit with
resource.setrlimit. This reverts an earlier fix for  which forced
a non-default stack size when building the interpreter executable on
macOS.

================================================================================

# Changelog - IDLE

List:
: Fix starting IDLE with pyshell. Add idlelib.pyshell alias at
top; remove pyshell alias at bottom. Remove obsolete __name__==â__main__â
command.

: Fix starting IDLE with pyshell. Add idlelib.pyshell alias at
top; remove pyshell alias at bottom. Remove obsolete __name__==â__main__â
command.

================================================================================

# Changelog - Tools/Demos

List:
: Fix the argument handling in Tools/scripts/lll.py.

: Fix the argument handling in Tools/scripts/lll.py.

================================================================================

# Changelog - C API (Part 1)

List:
: Fix memory leak in Py_SetStandardStreamEncoding():
release memory if the function is called twice.
:  and PyDoc_STRVAR
now create     instead of   .
Patch by Inada Naoki.
: Change the value of ,  and
FORBIDDENBYTE internal constants used by debug hooks on Python memory
allocators (PyMem_SetupDebugHooks() function). Byte patterns
,  and  have been replaced with , 
and  to use the same values than Windows CRT debug 
and .
: Since Python 3.7.0, calling Py_DecodeLocale() before
Py_Initialize() produces mojibake if the  locale is
coerced and/or if the UTF-8 Mode is enabled by the user configuration. The
LC_CTYPE coercion and UTF-8 Mode are now disabled by default to fix the
mojibake issue. They must now be enabled explicitly (opt-in) using the new
_Py_PreInitialize() API with _PyPreConfig.
: Fixed an accidental change to the datetime C API where the
arguments to the PyDate_FromTimestamp() function were incorrectly
interpreted as a single timestamp rather than an arguments tuple, which
causes existing code to start raising . The
backwards-incompatible change was only present in alpha releases of Python
3.8. Patch by Paul Ganssle.
: Modify PyObject_Init to correctly increase the refcount of
heap-allocated Type objects. Also fix the refcounts of the heap-allocated
types that were either doing this manually or not decreasing the typeâs
refcount in tp_dealloc

================================================================================

# Changelog - C API (Part 2)

: Fix memory leak in Py_SetStandardStreamEncoding():
release memory if the function is called twice.

:  and PyDoc_STRVAR
now create     instead of   .
Patch by Inada Naoki.

: Change the value of ,  and
FORBIDDENBYTE internal constants used by debug hooks on Python memory
allocators (PyMem_SetupDebugHooks() function). Byte patterns
,  and  have been replaced with , 
and  to use the same values than Windows CRT debug 
and .

: Since Python 3.7.0, calling Py_DecodeLocale() before
Py_Initialize() produces mojibake if the  locale is
coerced and/or if the UTF-8 Mode is enabled by the user configuration. The
LC_CTYPE coercion and UTF-8 Mode are now disabled by default to fix the
mojibake issue. They must now be enabled explicitly (opt-in) using the new
_Py_PreInitialize() API with _PyPreConfig.

: Fixed an accidental change to the datetime C API where the
arguments to the PyDate_FromTimestamp() function were incorrectly
interpreted as a single timestamp rather than an arguments tuple, which
causes existing code to start raising . The
backwards-incompatible change was only present in alpha releases of Python
3.8. Patch by Paul Ganssle.

================================================================================

# Changelog - C API (Part 3)

: Modify PyObject_Init to correctly increase the refcount of
heap-allocated Type objects. Also fix the refcounts of the heap-allocated
types that were either doing this manually or not decreasing the typeâs
refcount in tp_dealloc

================================================================================

# Changelog - Security

List:
: Changes urlsplit() to raise ValueError when the URL contains
characters that decompose under IDNA encoding (NFKC-normalization) into
characters that affect how the URL is parsed.
: Donât send cookies of domain A without Domain attribute to
domain B when domain A is a suffix match of domain B while using a
cookiejar with http.cookiejar.DefaultCookiePolicy policy. Patch
by Karthikeyan Singaravelan.

: Changes urlsplit() to raise ValueError when the URL contains
characters that decompose under IDNA encoding (NFKC-normalization) into
characters that affect how the URL is parsed.

: Donât send cookies of domain A without Domain attribute to
domain B when domain A is a suffix match of domain B while using a
cookiejar with http.cookiejar.DefaultCookiePolicy policy. Patch
by Karthikeyan Singaravelan.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix a possible double decref in _ctypes.câs
PyCArrayType_new().
: Fix a possible crash when creating a new dictionary.
: Fix a possible crash in structseq_repr().
: Fix bug in parsermodule when parsing a state in a DFA that has
two or more arcs with labels of the same type. Patch by Pablo Galindo.
: repr(structseq) is no longer limited to 512 bytes.
: Fix a possible null pointer dereference in
merge_consts_recursive(). Patch by Zackery Spytz.
: At Python initialization, the current directory is no longer
prepended to  if it has been removed.
: Python initialization now fails with an error, rather than
silently truncating paths, if a path is too long.
: Python initialization now fails if decoding pybuilddir.txt
configuration file fails at startup.
: Fix leak in _PyRuntimeState_Fini. Contributed by StÃ©phane
Wirtel.
: The builtin  can now handle AST objects that
contain assignment expressions. Patch by Pablo Galindo.
: Improved error message for too much positional arguments in
some builtin functions.
: New empty dict uses fewer memory for now.  It used more memory
than empty dict created by dict.clear().  And empty dict creation and
deletion is about 2x faster.  Patch by Inada Naoki.
: Fix an unlikely memory leak on conversion from string to float
in the function _Py_dg_strtod() used by float(str),
complex(str), pickle.load(), marshal.load(), etc.
: Update Unicode databases to version 12.0.0.
: Fix a segfault occurring when sorting a list of heterogeneous
values. Patch contributed by RÃ©mi Lapeyre and Elliot Gorokhovsky.
: Cleaned up left-over vestiges of Python 2 unbound method
handling in method objects and documentation. Patch by Martijn Pieters
: Add a new interpreter-specific dict and expose it in the C-API
via PyInterpreterState_GetDict().  This parallels PyThreadState_GetDict().
However, extension modules should continue using PyModule_GetState() for
their own internal per-interpreter state.
: Add a feature_version flag to ast.parse() (documented)
and  (hidden) that allows tweaking the parser to support
older versions of the grammar. In particular, if feature_version is 5
or 6, the hacks for the  and  keyword from PEP 492 are
reinstated. (For 7 or higher, these are unconditionally treated as
keywords, but they are still special tokens rather than  tokens
that the parser driver recognizes.)
: Use UTF-8 as the system encoding on VxWorks.
: The __index__() special method will be used
instead of  for implicit conversion of Python
numbers to C integers.  Using the  method in implicit
conversions has been deprecated.
: Retire pgen and use a modified version of pgen2 to generate the
parser. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix a possible double decref in _ctypes.câs
PyCArrayType_new().

: Fix a possible crash when creating a new dictionary.

: Fix a possible crash in structseq_repr().

: Fix bug in parsermodule when parsing a state in a DFA that has
two or more arcs with labels of the same type. Patch by Pablo Galindo.

: repr(structseq) is no longer limited to 512 bytes.

: Fix a possible null pointer dereference in
merge_consts_recursive(). Patch by Zackery Spytz.

: At Python initialization, the current directory is no longer
prepended to  if it has been removed.

: Python initialization now fails with an error, rather than
silently truncating paths, if a path is too long.

: Python initialization now fails if decoding pybuilddir.txt
configuration file fails at startup.

: Fix leak in _PyRuntimeState_Fini. Contributed by StÃ©phane
Wirtel.

: The builtin  can now handle AST objects that
contain assignment expressions. Patch by Pablo Galindo.

: Improved error message for too much positional arguments in
some builtin functions.

: New empty dict uses fewer memory for now.  It used more memory
than empty dict created by dict.clear().  And empty dict creation and
deletion is about 2x faster.  Patch by Inada Naoki.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix an unlikely memory leak on conversion from string to float
in the function _Py_dg_strtod() used by float(str),
complex(str), pickle.load(), marshal.load(), etc.

: Update Unicode databases to version 12.0.0.

: Fix a segfault occurring when sorting a list of heterogeneous
values. Patch contributed by RÃ©mi Lapeyre and Elliot Gorokhovsky.

: Cleaned up left-over vestiges of Python 2 unbound method
handling in method objects and documentation. Patch by Martijn Pieters

: Add a new interpreter-specific dict and expose it in the C-API
via PyInterpreterState_GetDict().  This parallels PyThreadState_GetDict().
However, extension modules should continue using PyModule_GetState() for
their own internal per-interpreter state.

: Add a feature_version flag to ast.parse() (documented)
and  (hidden) that allows tweaking the parser to support
older versions of the grammar. In particular, if feature_version is 5
or 6, the hacks for the  and  keyword from PEP 492 are
reinstated. (For 7 or higher, these are unconditionally treated as
keywords, but they are still special tokens rather than  tokens
that the parser driver recognizes.)

: Use UTF-8 as the system encoding on VxWorks.

================================================================================

# Changelog - Core and Builtins (Part 4)

: The __index__() special method will be used
instead of  for implicit conversion of Python
numbers to C integers.  Using the  method in implicit
conversions has been deprecated.

: Retire pgen and use a modified version of pgen2 to generate the
parser. Patch by Pablo Galindo.

================================================================================

# Changelog - Library (Part 1)

List:
: The class documentation created by pydoc now has a separate
section for readonly properties.
: The typing.NamedTuple() class has deprecated the _field_types
attribute in favor of the __annotations__ attribute which carried the same
information. Also, both attributes were converted from OrderedDict to a
regular dict.
: Fix  ssl memory issues caused by circular
references
: Add method to statistics.NormalDist for computing the inverse
cumulative normal distribution.
: collections.namedtuple() misspelled the name of an attribute.
To be consistent with typing.NamedTuple, the attribute name should have
been â_field_defaultsâ instead of â_fields_defaultsâ.  For backwards
compatibility, both spellings are now created.  The misspelled version may
be removed in the future.
: âunicode_internalâ codec is removed.  It was deprecated since
Python 3.3. Patch by Inada Naoki.
: Raise ModuleNotFoundError in pyclbr when a module canât be
found. Thanks to âmentalâ for the bug report.
: Switch the default format used for writing tars with
 to the modern POSIX.1-2001 pax standard, from the
vendor-specific GNU. Contributed by C.A.M. Gerlach.
: Fix integer overflows in the array module. Patch by Stephan
Hohe.
: Add _signal module support for VxWorks.
:  does not silently ignore RecursionError anymore.
Patch contributed by RÃ©mi Lapeyre.
: Add a kind field to ast.Constant. It is âuâ if the literal has
a âuâ prefix (i.e. a Python 2 style unicode literal), else None.
: The   command now gracefully handles all
exceptions.
: Fix format strings used for stderrprinter and re.Match reprs.
Patch by Stephan Hohe.
: Fix  in customize_compiler() of
distutils.sysconfig: when the  environment variable is
defined, donât override  variable with the  variable
anymore. Initial patch written by David Malcolm.
: Update ensurepip to install pip 19.0.3 and setuptools 40.8.0.
: Release GIL when closing  objects.
: Fix two unlikely reference leaks in _hashopenssl. The leaks
only occur in out-of-memory cases.
: Add overlap() method to statistics.NormalDist.  Computes the
overlapping coefficient for two normal distributions.
: Default buffer size used by shutil.copyfileobj() is changed
from 16 KiB to 64 KiB on non-Windows platform to reduce system call
overhead. Contributed by Inada Naoki.
: Fix  with  when stepping into a frame
without a  global.  Patch by Anthony Sottile.
: shutil.copytree(copy_function=â¦) erroneously pass DirEntry
instead of a path string.
: Ensure custom warnings.formatwarning() function can
receive  as positional argument. Based on patch by Tashrif Billah.
: Resolve potential name clash with libmâs sinpi(). Patch by
Dmitrii Pasechnik.
: Clean up reference to async generator in Lib/types. Patch by
Henry Chen.
: FileCookieJar supports path-like object.
Contributed by StÃ©phane Wirtel
: Enum has been fixed to correctly handle empty strings and
strings with non-Latin characters (ie. âÎ±â, â×â) without crashing.
Original patch contributed by Maxwell. Assisted by StÃ©phane Wirtel.
: Add  and  properties to mock call objects.
Contributed by Kumar Akshay.
:  has been added to pretty-print objects with
dictionary keys being sorted with their insertion order by default.
Parameter sort_dicts has been added to pprint.pprint,
pprint.pformat and pprint.PrettyPrinter. Contributed by RÃ©mi
Lapeyre.
: Implement __getitem__ for _NamespacePath.  Patch by
Anthony Sottile.
: Clean up code which checked presence of  /
 /  which are always present.  Patch by Anthony
Sottile.
: Librates the return value of a ProcessPoolExecutor
_process_worker after itâs no longer needed to free memory
: Use multiprocessing.connection.wait() instead of polling
each 0.2 seconds for worker updates in multiprocessing.Pool.
Patch by Pablo Galindo.
: Store the venv prompt in pyvenv.cfg.
: Donât set cookie for a request when the request path is a
prefix match of the cookieâs path attribute but doesnât end with â/â.
Patch by Karthikeyan Singaravelan.
: Calls to a child function created with
unittest.mock.create_autospec() should propagate to the parent.
Patch by Karthikeyan Singaravelan.
: Fix C++ extension compilation on AIX

================================================================================

# Changelog - Library (Part 2)

: The class documentation created by pydoc now has a separate
section for readonly properties.

: The typing.NamedTuple() class has deprecated the _field_types
attribute in favor of the __annotations__ attribute which carried the same
information. Also, both attributes were converted from OrderedDict to a
regular dict.

: Fix  ssl memory issues caused by circular
references

: Add method to statistics.NormalDist for computing the inverse
cumulative normal distribution.

: collections.namedtuple() misspelled the name of an attribute.
To be consistent with typing.NamedTuple, the attribute name should have
been â_field_defaultsâ instead of â_fields_defaultsâ.  For backwards
compatibility, both spellings are now created.  The misspelled version may
be removed in the future.

: âunicode_internalâ codec is removed.  It was deprecated since
Python 3.3. Patch by Inada Naoki.

: Raise ModuleNotFoundError in pyclbr when a module canât be
found. Thanks to âmentalâ for the bug report.

: Switch the default format used for writing tars with
 to the modern POSIX.1-2001 pax standard, from the
vendor-specific GNU. Contributed by C.A.M. Gerlach.

================================================================================

# Changelog - Library (Part 3)

: Fix integer overflows in the array module. Patch by Stephan
Hohe.

: Add _signal module support for VxWorks.

:  does not silently ignore RecursionError anymore.
Patch contributed by RÃ©mi Lapeyre.

: Add a kind field to ast.Constant. It is âuâ if the literal has
a âuâ prefix (i.e. a Python 2 style unicode literal), else None.

: The   command now gracefully handles all
exceptions.

: Fix format strings used for stderrprinter and re.Match reprs.
Patch by Stephan Hohe.

: Fix  in customize_compiler() of
distutils.sysconfig: when the  environment variable is
defined, donât override  variable with the  variable
anymore. Initial patch written by David Malcolm.

: Update ensurepip to install pip 19.0.3 and setuptools 40.8.0.

: Release GIL when closing  objects.

: Fix two unlikely reference leaks in _hashopenssl. The leaks
only occur in out-of-memory cases.

: Add overlap() method to statistics.NormalDist.  Computes the
overlapping coefficient for two normal distributions.

: Default buffer size used by shutil.copyfileobj() is changed
from 16 KiB to 64 KiB on non-Windows platform to reduce system call
overhead. Contributed by Inada Naoki.

================================================================================

# Changelog - Library (Part 4)

: Fix  with  when stepping into a frame
without a  global.  Patch by Anthony Sottile.

: shutil.copytree(copy_function=â¦) erroneously pass DirEntry
instead of a path string.

: Ensure custom warnings.formatwarning() function can
receive  as positional argument. Based on patch by Tashrif Billah.

: Resolve potential name clash with libmâs sinpi(). Patch by
Dmitrii Pasechnik.

: Clean up reference to async generator in Lib/types. Patch by
Henry Chen.

: FileCookieJar supports path-like object.
Contributed by StÃ©phane Wirtel

: Enum has been fixed to correctly handle empty strings and
strings with non-Latin characters (ie. âÎ±â, â×â) without crashing.
Original patch contributed by Maxwell. Assisted by StÃ©phane Wirtel.

: Add  and  properties to mock call objects.
Contributed by Kumar Akshay.

:  has been added to pretty-print objects with
dictionary keys being sorted with their insertion order by default.
Parameter sort_dicts has been added to pprint.pprint,
pprint.pformat and pprint.PrettyPrinter. Contributed by RÃ©mi
Lapeyre.

: Implement __getitem__ for _NamespacePath.  Patch by
Anthony Sottile.

================================================================================

# Changelog - Library (Part 5)

: Clean up code which checked presence of  /
 /  which are always present.  Patch by Anthony
Sottile.

: Librates the return value of a ProcessPoolExecutor
_process_worker after itâs no longer needed to free memory

: Use multiprocessing.connection.wait() instead of polling
each 0.2 seconds for worker updates in multiprocessing.Pool.
Patch by Pablo Galindo.

: Store the venv prompt in pyvenv.cfg.

: Donât set cookie for a request when the request path is a
prefix match of the cookieâs path attribute but doesnât end with â/â.
Patch by Karthikeyan Singaravelan.

: Calls to a child function created with
unittest.mock.create_autospec() should propagate to the parent.
Patch by Karthikeyan Singaravelan.

: Fix C++ extension compilation on AIX

================================================================================

# Changelog - Documentation

List:
: Declare the path of the Python binary for the usage of
Tools/scripts/serve.py when executing    .
Contributed by StÃ©phane Wirtel
: Improve documentation about converting datetime.timedelta to
scalars.
: A new entry was added to the Core Language Section of the
Programming FAQ, which explaines the usage of slash(/) in the signature of
a function. Patch by Lysandros Nikolaou

: Declare the path of the Python binary for the usage of
Tools/scripts/serve.py when executing    .
Contributed by StÃ©phane Wirtel

: Improve documentation about converting datetime.timedelta to
scalars.

: A new entry was added to the Core Language Section of the
Programming FAQ, which explaines the usage of slash(/) in the signature of
a function. Patch by Lysandros Nikolaou

================================================================================

# Changelog - Tests

List:
: test_posix.PosixUidGidTests: add tests for invalid uid/gid type
(str). Initial patch written by David Malcolm.
: Fix test_re.test_locale_flag():  use
locale.getpreferredencoding() rather than locale.getlocale() to
get the locale encoding. With some locales, locale.getlocale() returns
the wrong encoding.
: Fix race condition in test_socket.

: test_posix.PosixUidGidTests: add tests for invalid uid/gid type
(str). Initial patch written by David Malcolm.

: Fix test_re.test_locale_flag():  use
locale.getpreferredencoding() rather than locale.getlocale() to
get the locale encoding. With some locales, locale.getlocale() returns
the wrong encoding.

: Fix race condition in test_socket.

================================================================================

# Changelog - Build

List:
: Fix leaks that led to build failure when configured with
address sanitizer.
: Add TEST_EXTENSIONS constant to  to allow to
not build test extensions like .
: Fix setup.py on macOS: only add /usr/include/ffi to include
directories of _ctypes, not for all extensions.
: Enable build system to cross-build for VxWorks RTOS.

: Fix leaks that led to build failure when configured with
address sanitizer.

: Add TEST_EXTENSIONS constant to  to allow to
not build test extensions like .

: Fix setup.py on macOS: only add /usr/include/ffi to include
directories of _ctypes, not for all extensions.

: Enable build system to cross-build for VxWorks RTOS.

================================================================================

# Changelog - Windows

List:
: Fixed decoders for the following code pages: 50220, 50221,
50222, 50225, 50227, 50229, 57002 through 57011, 65000 and 42.
: Donât honor POSIX  in os.path.expanduser on
windows.  Patch by Anthony Sottile.
: Fix name collisions due to    in
PC/pyconfig.h.

: Fixed decoders for the following code pages: 50220, 50221,
50222, 50225, 50227, 50229, 57002 through 57011, 65000 and 42.

: Donât honor POSIX  in os.path.expanduser on
windows.  Patch by Anthony Sottile.

: Fix name collisions due to    in
PC/pyconfig.h.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Use dict unpacking in idlelib.
: Remove fgBg param of idlelib.config.GetHighlight(). This param
was only used twice and changed the return type.
: Fix IDLE autocomplete & calltip popup colors. Prevent conflicts
with Linux dark themes (and slightly darken calltip background).
: For the grep module, add tests for findfiles, refactor
findfiles to be a module-level function, and refactor findfiles to use
os.walk.
: Add docstrings to IDLE search modules.
: Remove colorizer.ColorDelegator.close_when_done and the
corresponding argument of .close().  In IDLE, both have always been None
or False since 2007.
: Avoid blurry IDLE application icon on macOS with Tk 8.6. Patch
by Kevin Walzer.
: Refactor class variables to instance variables in colorizer.
: Increase test coverage of idlelib.autocomplete by 30%. Patch by
Louie Lu

: Use dict unpacking in idlelib.

: Remove fgBg param of idlelib.config.GetHighlight(). This param
was only used twice and changed the return type.

: Fix IDLE autocomplete & calltip popup colors. Prevent conflicts
with Linux dark themes (and slightly darken calltip background).

================================================================================

# Changelog - IDLE (Part 2)

: For the grep module, add tests for findfiles, refactor
findfiles to be a module-level function, and refactor findfiles to use
os.walk.

: Add docstrings to IDLE search modules.

: Remove colorizer.ColorDelegator.close_when_done and the
corresponding argument of .close().  In IDLE, both have always been None
or False since 2007.

: Avoid blurry IDLE application icon on macOS with Tk 8.6. Patch
by Kevin Walzer.

: Refactor class variables to instance variables in colorizer.

: Increase test coverage of idlelib.autocomplete by 30%. Patch by
Louie Lu

================================================================================

# Changelog - Tools/Demos

List:
: Fix py-list and py-bt commands of python-gdb.py on gdb7.
: Fix freeze script on Windows.

: Fix py-list and py-bt commands of python-gdb.py on gdb7.

: Fix freeze script on Windows.

================================================================================

# Changelog - C API

List:
: Raise DeprecationWarning when â#â formats are used for
building or parsing values without PY_SSIZE_T_CLEAN.
: The whole coreconfig.h header is now excluded from
Py_LIMITED_API. Move functions definitions into a new internal
pycore_coreconfig.h header.

: Raise DeprecationWarning when â#â formats are used for
building or parsing values without PY_SSIZE_T_CLEAN.

: The whole coreconfig.h header is now excluded from
Py_LIMITED_API. Move functions definitions into a new internal
pycore_coreconfig.h header.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Raise a SyntaxError when assigning a value to
 with the Assignment Operator. Contributed by StÃ©phane Wirtel
and Pablo Galindo.
: Doubled the speed of class variable writes.  When a non-dunder
attribute was updated, there was an unnecessary call to update slots.
: The error message emitted when returning invalid types from
__fspath__ in interfaces that allow passing 
objects has been improved and now it does explain the origin of the error.
: gc.get_objects can now receive an optional parameter
indicating a generation to get objects from. Patch by Pablo Galindo.
bpo-1054041: When the main interpreter exits due to an uncaught
KeyboardInterrupt, the process now exits in the appropriate manner for its
parent process to detect that a SIGINT or ^C terminated the process.  This
allows shells and batch scripts to understand that the user has asked them
to stop.
: Fix __class_getitem__() not being called on a class with a
custom non-subscriptable metaclass.
: Fix a crash on fork when using subinterpreters. Contributed by
StÃ©phane Wirtel
: Fix a potential double free in Modules/_randommodule.c.
: Fix a crash in slice_richcompare(): use strong references
rather than stolen references for the two temporary internal tuples.
: Enable the creation of cell objects by adding a
cell.__new__ method, and expose the type  in Lib/types.py
under the name CellType. Patch by Pierre Glaser.
: Use monotonic clock for pthread_cond_timedwait when
pthread_condattr_setclock and CLOCK_MONOTONIC are available.
: The compiler emits now syntax warnings in the case when a comma
is likely missed before tuple or list.
: The implementation of PyInterpreterState has been moved into
the internal header files (guarded by Py_BUILD_CORE).
: Clarify the errors reported when object.__new__ and
object.__init__ receive more than one argument. Contributed by Sanyam
Khurana.
: Signal-handling is now guaranteed to happen relative to the
main interpreter.
: We added a new internal _Py_AddPendingCall() that operates
relative to the provided interpreter.  This allows us to use the existing
implementation to ask another interpreter to do work that cannot be done
in the current interpreter, like decref an object the other interpreter
owns.  The existing Py_AddPendingCall() only operates relative to the main
interpreter.
: Fix a possible crash in list.sort() when sorting objects
with ob_type->tp_richcompare  .  Patch by Zackery Spytz.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Raise a SyntaxError when assigning a value to
 with the Assignment Operator. Contributed by StÃ©phane Wirtel
and Pablo Galindo.

: Doubled the speed of class variable writes.  When a non-dunder
attribute was updated, there was an unnecessary call to update slots.

: The error message emitted when returning invalid types from
__fspath__ in interfaces that allow passing 
objects has been improved and now it does explain the origin of the error.

: gc.get_objects can now receive an optional parameter
indicating a generation to get objects from. Patch by Pablo Galindo.

bpo-1054041: When the main interpreter exits due to an uncaught
KeyboardInterrupt, the process now exits in the appropriate manner for its
parent process to detect that a SIGINT or ^C terminated the process.  This
allows shells and batch scripts to understand that the user has asked them
to stop.

: Fix __class_getitem__() not being called on a class with a
custom non-subscriptable metaclass.

: Fix a crash on fork when using subinterpreters. Contributed by
StÃ©phane Wirtel

: Fix a potential double free in Modules/_randommodule.c.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix a crash in slice_richcompare(): use strong references
rather than stolen references for the two temporary internal tuples.

: Enable the creation of cell objects by adding a
cell.__new__ method, and expose the type  in Lib/types.py
under the name CellType. Patch by Pierre Glaser.

: Use monotonic clock for pthread_cond_timedwait when
pthread_condattr_setclock and CLOCK_MONOTONIC are available.

: The compiler emits now syntax warnings in the case when a comma
is likely missed before tuple or list.

: The implementation of PyInterpreterState has been moved into
the internal header files (guarded by Py_BUILD_CORE).

: Clarify the errors reported when object.__new__ and
object.__init__ receive more than one argument. Contributed by Sanyam
Khurana.

: Signal-handling is now guaranteed to happen relative to the
main interpreter.

: We added a new internal _Py_AddPendingCall() that operates
relative to the provided interpreter.  This allows us to use the existing
implementation to ask another interpreter to do work that cannot be done
in the current interpreter, like decref an object the other interpreter
owns.  The existing Py_AddPendingCall() only operates relative to the main
interpreter.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix a possible crash in list.sort() when sorting objects
with ob_type->tp_richcompare  .  Patch by Zackery Spytz.

================================================================================

# Changelog - Library (Part 1)

List:
: unittest.mock.patch.dict() used as a decorator with
string target resolves the target during function call instead of during
decorator construction. Patch by Karthikeyan Singaravelan.
: Add statistics.NormalDist, a tool for creating and manipulating
normal distributions of random variable.  Features a composite class that
treats the mean and standard deviation of measurement data as single
entity.
: Added statistics.fmean() as a faster, floating-point variant of
the existing mean() function.
: Removed broken  method from
multiprocessing.managers.SyncManager.dict. Contributed by RÃ©mi Lapeyre.
: Add support for bytes to shutil.which().
: Fix dataclasses.field() throwing away empty mapping
objects passed as metadata.
: Write expected and actual call parameters on separate lines in
unittest.mock.Mock.assert_called_with() assertion errors.
Contributed by Susan Su.
: The   command now gracefully handles syntax
errors.
: In http.server script, rely on getaddrinfo to bind to preferred
address based on the bind parameter. Now default bind or binding to a name
may bind to IPv6 or dual-stack, depending on the environment.
: Set __spec__.origin of  _frozen_importlib to frozen so
that it matches the behavior of _frozen_importlib_external.  Patch by
Nina Zakharenko.
: Fix a reference issue inside multiprocessing.Pool that
caused the pool to remain alive if it was deleted without being closed or
terminated explicitly. A new strong reference is added to the pool
iterators to link the lifetime of the pool to the lifetime of its
iterators so the pool does not get destroyed if a pool iterator is still
alive.
: re module, fix wrong capturing groups in rare cases.
re.search(), re.findall(),  and other functions
that scan through string looking for a match, should reset capturing
groups between two match attempts. Patch by Ma Lin.
: : Fix a RuntimeError when copying a
WeakKeyDictionary or a WeakValueDictionary, due to some keys or values
disappearing while iterating.
: Implement math.prod() as analogous function to
 that returns the product of a âstartâ value (default: 1) times
an iterable of numbers. Patch by Pablo Galindo.
: Performing arithmetic between datetime.datetime
subclasses and datetime.timedelta now returns an object of the
same type as the datetime.datetime subclass. As a result,
datetime.datetime.astimezone() and alternate constructors like
datetime.datetime.now() and datetime.fromtimestamp() called
with a  argument now  retain their subclass.
: Add  optional keyword-only parameter to
xmlrpc.client.ServerProxy, xmlrpc.client.Transport and
xmlrpc.client.SafeTransport.  Patch by CÃ©dric Krier.
: Fix C implementation of pickle.loads to use importlibâs locking
mechanisms, and thereby avoid using partially loaded modules. Patch by Tim
Burgess.

================================================================================

# Changelog - Library (Part 2)

: unittest.mock.patch.dict() used as a decorator with
string target resolves the target during function call instead of during
decorator construction. Patch by Karthikeyan Singaravelan.

: Add statistics.NormalDist, a tool for creating and manipulating
normal distributions of random variable.  Features a composite class that
treats the mean and standard deviation of measurement data as single
entity.

: Added statistics.fmean() as a faster, floating-point variant of
the existing mean() function.

: Removed broken  method from
multiprocessing.managers.SyncManager.dict. Contributed by RÃ©mi Lapeyre.

: Add support for bytes to shutil.which().

: Fix dataclasses.field() throwing away empty mapping
objects passed as metadata.

: Write expected and actual call parameters on separate lines in
unittest.mock.Mock.assert_called_with() assertion errors.
Contributed by Susan Su.

: The   command now gracefully handles syntax
errors.

: In http.server script, rely on getaddrinfo to bind to preferred
address based on the bind parameter. Now default bind or binding to a name
may bind to IPv6 or dual-stack, depending on the environment.

================================================================================

# Changelog - Library (Part 3)

: Set __spec__.origin of  _frozen_importlib to frozen so
that it matches the behavior of _frozen_importlib_external.  Patch by
Nina Zakharenko.

: Fix a reference issue inside multiprocessing.Pool that
caused the pool to remain alive if it was deleted without being closed or
terminated explicitly. A new strong reference is added to the pool
iterators to link the lifetime of the pool to the lifetime of its
iterators so the pool does not get destroyed if a pool iterator is still
alive.

: re module, fix wrong capturing groups in rare cases.
re.search(), re.findall(),  and other functions
that scan through string looking for a match, should reset capturing
groups between two match attempts. Patch by Ma Lin.

: : Fix a RuntimeError when copying a
WeakKeyDictionary or a WeakValueDictionary, due to some keys or values
disappearing while iterating.

: Implement math.prod() as analogous function to
 that returns the product of a âstartâ value (default: 1) times
an iterable of numbers. Patch by Pablo Galindo.

================================================================================

# Changelog - Library (Part 4)

: Performing arithmetic between datetime.datetime
subclasses and datetime.timedelta now returns an object of the
same type as the datetime.datetime subclass. As a result,
datetime.datetime.astimezone() and alternate constructors like
datetime.datetime.now() and datetime.fromtimestamp() called
with a  argument now  retain their subclass.

: Add  optional keyword-only parameter to
xmlrpc.client.ServerProxy, xmlrpc.client.Transport and
xmlrpc.client.SafeTransport.  Patch by CÃ©dric Krier.

: Fix C implementation of pickle.loads to use importlibâs locking
mechanisms, and thereby avoid using partially loaded modules. Patch by Tim
Burgess.

================================================================================

# Changelog - Documentation

List:
: Fix formatting of âcheck-hash-based-pycs options in the
manpage Synopsis.
: Bump minimum sphinx version to 1.8.  Patch by Anthony Sottile.
: Update documentation and docstrings for pathlib. Original patch
by Mike Short.

: Fix formatting of âcheck-hash-based-pycs options in the
manpage Synopsis.

: Bump minimum sphinx version to 1.8.  Patch by Anthony Sottile.

: Update documentation and docstrings for pathlib. Original patch
by Mike Short.

================================================================================

# Changelog - Tests (Part 1)

List:
: Avoid test_ttk_guionly ComboboxTest failure with macOS Cocoa
Tk.
: Add test.support.TEST_HTTP_URL and replace references of
http://www.example.com by this new constant. Contributed by StÃ©phane
Wirtel.
: Fix test_ssl for strict OpenSSL configuration like RHEL8 strict
crypto policy. Use older TLS version for minimum TLS version of the server
SSL context if needed, to test TLS version older than default minimum TLS
version.
: Added test.support.check_syntax_warning().
: Make test_imap4_host_default_value independent on whether the
local IMAP server is running.
: multiprocessing: provide unit tests for SyncManager and
SharedMemoryManager classes + all the shareable types which are supposed
to be supported by them.  (patch by Giampaolo Rodola)
: Skip test_shutil.test_unpack_archive_xztar to prevent a
MemoryError on 32-bit AIX when MAXDATA setting is less than 0x20000000.
Patch by Michael Felt (aixtools)

: Assert m_state != NULL to mimic GC traversal functions that do
not correctly handle module creation when the module state has not been
created.

: Avoid test_ttk_guionly ComboboxTest failure with macOS Cocoa
Tk.

================================================================================

# Changelog - Tests (Part 2)

: Add test.support.TEST_HTTP_URL and replace references of
http://www.example.com by this new constant. Contributed by StÃ©phane
Wirtel.

: Fix test_ssl for strict OpenSSL configuration like RHEL8 strict
crypto policy. Use older TLS version for minimum TLS version of the server
SSL context if needed, to test TLS version older than default minimum TLS
version.

: Added test.support.check_syntax_warning().

: Make test_imap4_host_default_value independent on whether the
local IMAP server is running.

: multiprocessing: provide unit tests for SyncManager and
SharedMemoryManager classes + all the shareable types which are supposed
to be supported by them.  (patch by Giampaolo Rodola)

: Skip test_shutil.test_unpack_archive_xztar to prevent a
MemoryError on 32-bit AIX when MAXDATA setting is less than 0x20000000.

Patch by Michael Felt (aixtools)

: Assert m_state != NULL to mimic GC traversal functions that do
not correctly handle module creation when the module state has not been
created.

================================================================================

# Changelog - Windows

List:
: Added ARM build support to Windows build files in PCBuild.
:  no longer raises when checking file and directory
existence on drives that are not ready
: Uses the base Python executable when invoking venv in a virtual
environment
: Prevents venv paths being inherited by child processes
: Fix sysconfig detection of the source directory and distutils
handling of pyconfig.h during PGO profiling

: Added ARM build support to Windows build files in PCBuild.

:  no longer raises when checking file and directory
existence on drives that are not ready

: Uses the base Python executable when invoking venv in a virtual
environment

: Prevents venv paths being inherited by child processes

: Fix sysconfig detection of the source directory and distutils
handling of pyconfig.h during PGO profiling

================================================================================

# Changelog - IDLE

List:
: IDLE â Document settings dialog font tab sample.
: Revise IDLE doc for control codes sent to Shell. Add a code
example block.
: Add docstrings and unittests for colorizer.py.

: IDLE â Document settings dialog font tab sample.

: Revise IDLE doc for control codes sent to Shell. Add a code
example block.

: Add docstrings and unittests for colorizer.py.

================================================================================

# Changelog - Security (Part 1)

List:
: CVE 2019-5010: Fix a NULL pointer deref in ssl module. The
cert parser did not handle CRL distribution points with empty DP or URI
correctly. A malicious or buggy certificate can result into segfault.
Vulnerability (TALOS-2018-0758) reported by Colin Read and Nicolas Edet of
Cisco.
: The  command line option (run Python in isolated
mode) is now also copied by the multiprocessing and 
modules when spawning child processes. Previously, only  and
 options (enabled by ) were copied.
: The xml.sax and xml.dom.domreg no longer use environment
variables to override parser implementations when
sys.flags.ignore_environment is set by -E or -I arguments.
: The xml.sax and xml.dom.minidom parsers no longer processes
external entities by default. External DTD and ENTITY declarations no
longer load files or create network connections.
: CVE 2018-14647: The C accelerated _elementtree module now
initializes hash randomization salt from _Py_HashSecret instead of
libexpatâs default CSPRNG.
: Updated to OpenSSL 1.1.0i for Windows builds.
: Fixed sending the part of the file in os.sendfile() on
macOS.  Using the  argument could cause sending more bytes from
the input file than was specified.
: Fixed thread-safety of error handling in _ssl.
: Harden ssl module against LibreSSL CVE 2018-8970.
X509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new
test ensures that NULL bytes are not allowed.
: Minimal fix to prevent buffer overrun in os.symlink on Windows
: Regexes in difflib and poplib were vulnerable to catastrophic
backtracking. These regexes formed potential DOS vectors (REDOS). They
have been refactored. This resolves CVE 2018-1060 and CVE 2018-1061.
Patch by Jamie Davis.
: The ssl module now allows users to perform their own IDN
en/decoding when using SNI.

================================================================================

# Changelog - Security (Part 2)

: CVE 2019-5010: Fix a NULL pointer deref in ssl module. The
cert parser did not handle CRL distribution points with empty DP or URI
correctly. A malicious or buggy certificate can result into segfault.
Vulnerability (TALOS-2018-0758) reported by Colin Read and Nicolas Edet of
Cisco.

: The  command line option (run Python in isolated
mode) is now also copied by the multiprocessing and 
modules when spawning child processes. Previously, only  and
 options (enabled by ) were copied.

: The xml.sax and xml.dom.domreg no longer use environment
variables to override parser implementations when
sys.flags.ignore_environment is set by -E or -I arguments.

: The xml.sax and xml.dom.minidom parsers no longer processes
external entities by default. External DTD and ENTITY declarations no
longer load files or create network connections.

: CVE 2018-14647: The C accelerated _elementtree module now
initializes hash randomization salt from _Py_HashSecret instead of
libexpatâs default CSPRNG.

: Updated to OpenSSL 1.1.0i for Windows builds.

: Fixed sending the part of the file in os.sendfile() on
macOS.  Using the  argument could cause sending more bytes from
the input file than was specified.

================================================================================

# Changelog - Security (Part 3)

: Fixed thread-safety of error handling in _ssl.

: Harden ssl module against LibreSSL CVE 2018-8970.
X509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new
test ensures that NULL bytes are not allowed.

: Minimal fix to prevent buffer overrun in os.symlink on Windows

: Regexes in difflib and poplib were vulnerable to catastrophic
backtracking. These regexes formed potential DOS vectors (REDOS). They
have been refactored. This resolves CVE 2018-1060 and CVE 2018-1061.
Patch by Jamie Davis.

: The ssl module now allows users to perform their own IDN
en/decoding when using SNI.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Make parenthesis optional for named expressions in while
statement. Patch by Karthikeyan Singaravelan.
: Allow same right hand side expressions in annotated assignments
as in normal ones. In particular,  Tuple[int,     (without
parentheses on the right) is now allowed.
: Add the option to parse PEP 484 type comments in the ast
module. (Off by default.) This is merging the key functionality of the
third party fork thereof,
[typed_ast](https://github.com/python/typed_ast).
: Reorganize Python initialization to get working exceptions and
sys.stderr earlier.
: Add end line and end column position information to the Python
AST nodes. This is a C-level backwards incompatible change.
: Fixed a minor memory leak in pymain_parse_cmdline_impl function
in Modules/main.c
: func(**kwargs) will now raise an error when  is a
mapping containing multiple entries with the same key. An error was
already raised when other keyword arguments are passed before 
since Python 3.6.
: Fix a crash when sorting very long lists. Patch by Stephan
Hohe.
: clang Memory Sanitizer build instrumentation was added to work
around false positives from posix, socket, time, test_io, and
test_faulthandler.
: Fix an assertion error in  in debug build for
floating-point formatting with ânâ format, zero padding and small width.
Release build is not impacted. Patch by Karthikeyan Singaravelan.
: Format characters  and  in
PyUnicode_FromFormat() and  in PyBytes_FromFormat()
no longer read memory past the limit if  is specified.
: Fix segfaults and SystemErrors when deleting certain
attributes. Patch by Zackery Spytz.
: Fixed a SystemError when delete the characters_written
attribute of an OSError.
: Improved syntax error messages for unbalanced parentheses in
f-string.
: Fixed error handling in pickling methods when fail to look up
builtin âgetattrâ. Sped up pickling iterators.
: Fix various issues with memory allocation error handling.
Patch by Zackery Spytz.
: Separate the signal handling trigger in the eval loop from the
âpending callsâ machinery. There is no semantic change and the difference
in performance is insignificant.
: Internal attributesâ names of unittest.mock._Call and
unittest.mock.MagicProxy (name, parent & from_kall) are now prefixed with
_mock_ in order to prevent clashes with widely used object attributes.
Fixed minor typo in test function name.
: Fixed the code page decoder for input longer than 2 GiB
containing undecodable bytes.
: Fix PYTHONCOERCECLOCALE=1 environment variable: only coerce the
C locale if the LC_CTYPE locale is âCâ.
: The  and col_offset attributes of AST nodes for list
comprehensions, generator expressions and tuples are now point to the
opening parenthesis or square brace. For tuples without parenthesis they
point to the position of the first item.
: For str.format(), float.__format__() and
complex.__format__() methods for non-ASCII decimal point when using
the ânâ formatter.
: Fix a possible segfault involving a newly created coroutine.
Patch by Zackery Spytz.
: Implement  (assignment expressions). Patch by Emily
Morehouse.
: Speed up namedtuple() attribute access by 1.6x using a C
fast-path for the name descriptors. Patch by Pablo Galindo.
: Fixed an out of bounds memory access when parsing a truncated
unicode escape sequence at the end of a string such as .  It would
read one byte beyond the end of the memory allocation.
: The interpreter and extension modules have had annotations
added so that they work properly under clangâs Memory Sanitizer.  A new
configure flag âwith-memory-sanitizer has been added to make test builds
of this nature easier to perform.
: Fix an off by one error in the bytecode peephole optimizer
where it could read bytes beyond the end of bounds of an array when
removing unreachable code. This bug was present in every release of Python
3.6 and 3.7 until now.
: Improved error messages for forbidden assignments.
: Fix handling of hash-based bytecode files in .
Patch by Elvis Pranskevichus.
: Debug builds will no longer to attempt to import extension
modules built for the ABI as they were never compatible to begin with.
Patch by Stefano Rivera.
: Clarify in the docstrings of  methods that path-like
objects are also accepted as input parameters.
: : Fix off-by-one bug in length check for
 name and type.
: Raise ValueError instead of OverflowError in case
of a negative  in a ctypes.Array subclass.  Also
raise  instead of AttributeError for non-integer
. Original patch by Oren Milman.
: Fix  and col_offset for multi-line string tokens.
: SyntaxWarning raised as an exception at code generation
time will be now replaced with a SyntaxError for better error
reporting.
: Expose symtable.Symbol.is_nonlocal() in the symtable
module. Patch by Pablo Galindo.
:  and  constructors no longer
convert unexpected exceptions (e.g. MemoryError and
KeyboardInterrupt) to .
: Allow annotated names in module namespace that are declared
global before the annotation happens. Patch by Pablo Galindo.
: Fixed crash in  when the  argument is
mutated while it is iterated.
: The  and col_offset attributes of the AST for
decorated function and class refer now to the position of the
corresponding ,   and  instead of the position
of the first decorator. This leads to more correct line reporting in
tracing. This is the only case when the position of child AST nodes can
precede the position of the parent AST node.
: Fix a possible null pointer dereference in bytesobject.c.
Patch by Zackery Spytz.
: Fix the implementation of PyStructSequence_NewType in order to
create heap allocated StructSequences.
: A SyntaxWarning is now emitted instead of a
DeprecationWarning for invalid escape sequences in string and bytes
literals.
: Fixed a crash in compiling string annotations containing a
lambda with a keyword-only argument that doesnât have a default value.
: The compiler now produces a SyntaxWarning when identity
checks ( and  ) are used with certain types of literals
(e.g. strings, ints).  These can often work by accident in CPython, but
are not guaranteed by the language spec.  The warning advises users to use
equality tests ( and ) instead.
: Fix a possible null pointer dereference in Modules/_ssl.c.
Patch by Zackery Spytz.
: The C function property_descr_get() uses a âcachedâ tuple
to optimize function calls. But this tuple can be discovered in debug mode
with sys.getobjects(). Remove the optimization, itâs not really
worth it and it causes 3 different crashes last years.
: Fix contextvars C API to use PyObject* pointer types.
: The hash function for tuples is now based on xxHash which gives
better collision results on (formerly) pathological cases. Additionally,
on 64-bit systems it improves tuple hashes in general. Patch by Jeroen
Demeyer with substantial contributions by Tim Peters.
: Fix a memory leak in Modules/timemodule.c.  Patch by Zackery
Spytz.
: Fixed a bug where some SyntaxError error pointed to locations
that were off-by-one.
: Only allow the main interpreter to fork.  The avoids the
possibility of affecting the main interpreter, which is critical to
operation of the runtime.
: Remove unused function PyParser_SimpleParseStringFilename.
: Warn that line buffering is not supported if  is
called with binary mode and buffering=1.
: Further restrict the syntax of the left-hand side of keyword
arguments in function calls. In particular, f((keyword)=arg) is now
disallowed.
: Make the  argument to  visible as a keyword
argument.
: Do not assume signed integer overflow behavior (C undefined
behavior) when performing set hash table resizing.
: Fix an off-by-one in the recursive call pruning feature of
traceback formatting.
: On Windows, the LC_CTYPE is now set to the user preferred
locale at startup. Previously, the LC_CTYPE locale was âCâ at startup, but
changed when calling setlocale(LC_CTYPE, ââ) or setlocale(LC_ALL, ââ).
: Standard streams like sys.stdout now use the âsurrogateescapeâ
error handler, instead of âstrictâ, on the POSIX locale (when the C locale
is not coerced and the UTF-8 Mode is disabled).
: Fix the error handler of standard streams like sys.stdout:
PYTHONIOENCODING=â:â is now ignored instead of setting the error handler
to âstrictâ.
: Python now gets the locale encoding with C code to initialize
the encoding of standard streams like sys.stdout. Moreover, the encoding
is now initialized to the Python codec name to get a normalized encoding
name and to ensure that the codec is loaded. The change avoids importing
_bootlocale and _locale modules at startup by default.
: On FreeBSD, Py_DecodeLocale() and Py_EncodeLocale() now also
forces the ASCII encoding if the LC_CTYPE locale is âPOSIXâ, not only if
the LC_CTYPE locale is âCâ.
: The UTF-8 Mode is now also enabled by the âPOSIXâ locale, not
only by the âCâ locale.
: On HP-UX with C or POSIX locale, sys.getfilesystemencoding()
now returns âasciiâ instead of âroman8â (when the UTF-8 Mode is disabled
and the C locale is not coerced).
: The Python filesystem encoding is now read earlier during the
Python initialization.
: Tracebacks show now correct line number for subexpressions in
multiline expressions. Tracebacks show now the line number of the first
line for multiline expressions instead of the line number of the last
subexpression.
: Prevent a null pointer dereference and resource leakage in
PyInterpreterState_New().
: Fix undefined behavior in parsetok.c.  Patch by Zackery Spytz.
: Added as_integer_ratio to ints to make them more interoperable
with floats.
: Update valgrind suppression list to use
_PyObject_Free/_PyObject_Realloc instead of
PyObject_Free/PyObject_Realloc.
: Added the âsocketâ option in the stat.filemode() Python
implementation to match the C implementation.
: Fix  didnât copy iteration order of OrderedDict.
: Fixed crash on debug builds when opcode stack was adjusted with
negative numbers. Patch by Constantin Petrisor.
: Compiler now merges constants in tuples and frozensets
recursively. Code attributes like  are merged too.
: Performance of list concatenation, repetition and slicing
operations is slightly improved. Patch by Sergey Fedoseev.
: -X dev: it is now possible to override the memory allocator
using PYTHONMALLOC even if the developer mode is enabled.
: Improved AttributeError message for partially
initialized module.
: Fix min and max functions to get default behavior when key is
None.
: Profiling of unbound built-in methods now works when
 is given.
: Optimized pickling atomic types (None, bool, int, float, bytes,
str).
: Fix crashes when profiling certain invalid calls of unbound
methods. Patch by Jeroen Demeyer.
: Fixed reading invalid memory when create the code object with
too small varnames tuple or too large argument counts.
: In io.IOBase.close(), ensure that the
 attribute is not set with a live exception.
Patch by Zackery Spytz and Serhiy Storchaka.
: Fix buffer overflow while converting unicode to numeric values.
: Fixed a memory leak in the compiler when it raised some
uncommon errors during tokenizing.
: Disabled interruption by Ctrl-C between calling  and
entering a  block in  .
: Fix dict.copy() to maintain correct total refcount (as reported
by sys.gettotalrefcount()).
: Fix potential memory leak in function object when it creates
reference cycle.
: Implement contextvars.ContextVar.name attribute.
: Update vendored Expat library copy to version 2.2.5.
: Decref the module object in PyRun_SimpleFileExFlags()
before calling PyErr_Print().  Patch by Zackery Spytz.
: Close directly executed pyc files before calling
PyEval_EvalCode().
bpo-1617161: The hash of BuiltinMethodType instances (methods of
built-in classes) now depends on the hash of the identity of 
instead of its value. The hash and equality of ModuleType and
MethodWrapperType instances (methods of user-defined classes and
some methods of built-in classes like str.__add__) now depend on the
hash and equality of the identity of  instead of its value.
MethodWrapperType instances no longer support ordering.
: Fix âLC_ALL=C python3.7 -Vâ: reset properly the command line
parser when the encoding changes after reading the Python configuration.
: Fix a crash in hamt.c caused by enabling GC tracking for an
object that hadnât all of its fields set to NULL.
: Seven macro incompatibilities with the Limited API were fixed,
and the macros PyIter_Check(), PyIndex_Check() and
PyExceptionClass_Name() were added as functions. A script for
automatic macro checks was added.
: Fix asynchronous generators to handle GeneratorExit in athrow()
correctly
: PyRun_SimpleFileExFlags removes __cached__ from module
in addition to .
: Fix a crash in Python initialization when parsing the command
line options. Thanks Christoph Gohlke for the bug report and the fix!
: Reduce  size from 3 words to 2 words.
: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
shutdown even when there was a custom handler set previously. Patch by
Philipp Kerling.
: Fixed a leak when the garbage collector fails to add an object
with the  method or referenced by it into the
gc.garbage list. PyGC_Collect() can now be called when an
exception is set and preserves it.
: Make dict and dict views reversible. Patch by RÃ©mi Lapeyre.
: A RuntimeError is now raised when the custom metaclass
doesnât provide the __classcell__ entry in the namespace passed to
type.__new__.  A DeprecationWarning was emitted in Python
3.6â3.7.
: Add PYTHONPYCACHEPREFIX environment variable and
 pycache_prefix command-line option to set an alternate
root directory for writing module bytecode cache files.
: The  module has been rewritten in pure Python.
: Fix module_globals parameter of warnings.warn_explicit(): donât
crash if module_globals is not a dict.
: Fix signed/unsigned comparison warning in pyhash.c.
: Fixed miscellaneous bugs in converting annotations to strings
and optimized parentheses in the string representation.
: Added support for the , ,
setsigmask,  and  parameters of
posix_spawn. Patch by Pablo Galindo.
: Fix a leak in set_symmetric_difference().
: Raise a SyntaxError for   and  
statements outside of async functions.
: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.
: Fix a bug that causes PathFinder to appear twice on
sys.meta_path. Patch by Pablo Galindo Salgado.
: Modules imported last are now cleared first at interpreter
shutdown.
: Fixed clang ubsan (undefined behavior sanitizer) warnings in
dictobject.c by adjusting how the internal struct _dictkeysobject shared
keys structure is declared.
: Improved syntax error messages for invalid numerical literals.
: Improved syntax error messages for unbalanced parentheses.
: The list constructor will pre-size and not over-allocate when
the input length is known.
: Intern the names for all anonymous code objects.  Patch by
Zackery Spytz.
: The C and Python code and the documentation related to tokens
are now generated from a single source file Grammar/Tokens.
: Add a toreadonly() method to memoryviews.
: Fix potential memory leak in normalizestring().
: Change dict growth function from
round_up_to_power_2(used*2+hashtable_size/2) to
round_up_to_power_2(used*3).  Previously, dict is shrinked only when
  . Now dict has more chance to be shrinked.
: Improved error messages in âasync withâ when __aenter__()
or __aexit__() return non-awaitable object.
: Fix ma_version_tag in dict implementation is uninitialized
when copying from key-sharing dict.
: When using the -m switch, sys.path[0] is now explicitly
expanded as the  working directory, rather than being left as
the empty path (which allows imports from the current working directory at
the time of the import)
: Changed standard error message for non-pickleable and
non-copyable types. It now says âcannot pickleâ instead of âcanât pickleâ
or âcannot serializeâ.
: Improve consistency of errors raised by issubclass() when
called with a non-class and an abstract base class as the first and second
arguments, respectively. Patch by Josh Bronson.
: math.factorial no longer accepts arguments that are not
int-like. Patch by Pablo Galindo.
: Added new opcode END_ASYNC_FOR and fixes the
following issues:

================================================================================

# Changelog - Core and Builtins (Part 2)

Setting global StopAsyncIteration no longer breaks  
loops.
Jumping into an   loop is now disabled.
Jumping out of an   loop no longer corrupts the stack.

================================================================================

# Changelog - Core and Builtins (Part 3)


: Fix rare Python crash due to bad refcounting in
type_getattro() if a descriptor deletes itself from the class. Patch
by Jeroen Demeyer.
: Fixed bytecode generation for âasync forâ with a complex
target. A StopAsyncIteration raised on assigning or unpacking will be now
propagated instead of stopping the iteration.
: Fixed jumping out of âwithâ block by setting f_lineno.
: Fix a crash on fork when using a custom memory allocator (ex:
using PYTHONMALLOC env var). _PyGILState_Reinit() and
_PyInterpreterState_Enable() now use the default RAW memory allocator to
allocate a new interpreters mutex on fork.
: Due to unexpected compatibility issues discovered during
downstream beta testing, reverted .  field is
removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes
which was added in 3.7a1.  Docstring expression is restored as a first
statement in their body. Based on patch by Inada Naoki.
: Prevent jumps from âreturnâ and âexceptionâ trace events.
: Importing names from already imported module with âfrom â¦
import â¦â is now 30% faster if the module is not a package.
: Make error message more revealing when there are non-str
objects in .
: Optimized iterating and containing test for literal lists
consisting of non-constants:     and     . The
case of all constant elements already was optimized.
: Update Valgrind suppression list to account for the rename of
Py_ADDRESS_IN_RANG to address_in_range.
: Donât use temporary variables in cases of list/dict/set
comprehensions
: Remove the new API added in  (gc.ensure_disabled()
context manager).
: For namespace packages, ensure that both  and
__spec__.origin are set to None.
: Make sure __spec__.loader matches __loader__ for
namespace packages.
: Fix the warning messages for Python/ast_unparse.c. Patch by
StÃ©phane Wirtel
: Fix possible crashing in builtin Unicode decoders caused by
write out-of-bound errors when using customized decode error handlers.
: A  statement is now allowed in the
 clause.
: Simplified the interpreter loop by moving the logic of
unrolling the stack of blocks into the compiler. The compiler emits now
explicit instructions for adjusting the stack of values and calling the
cleaning up code for ,  and
.
Removed opcodes BREAK_LOOP, CONTINUE_LOOP,
SETUP_LOOP and SETUP_EXCEPT. Added new opcodes
, BEGIN_FINALLY and CALL_FINALLY and
POP_FINALLY. Changed the behavior of END_FINALLY and
WITH_CLEANUP_START.

================================================================================

# Changelog - Core and Builtins (Part 4)

: New function unicodedata.is_normalized, which can check whether
a string is in a specific normal form.
: Yield expressions are now disallowed in comprehensions and
generator expressions except the expression for the outermost iterable.
: Iterable unpacking is now allowed without parentheses in yield
and return statements, e.g.     . Thanks to David
Cuthbert for the change and Jordan Chapman for added tests.
: Fix the col_offset attribute for ast nodes
ast.AsyncFor, ast.AsyncFunctionDef, and ast.AsyncWith.
Previously, col_offset pointed to the keyword after .
: Fix assertion failures in the  method of
io.TextIOWrapper. Patch by Zackery Spytz.
: Fix a crash in ctypes.cast() in case the type argument is a
ctypes structured data type. Patch by Eryk Sun and Oren Milman.
: Fix a crash in os.utime() in case of a bad ns argument.
Patch by Oren Milman.
: Remove references to âgetsockaddrargâ from various socket error
messages. Patch by Oren Milman.

: Make parenthesis optional for named expressions in while
statement. Patch by Karthikeyan Singaravelan.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Allow same right hand side expressions in annotated assignments
as in normal ones. In particular,  Tuple[int,     (without
parentheses on the right) is now allowed.

: Add the option to parse PEP 484 type comments in the ast
module. (Off by default.) This is merging the key functionality of the
third party fork thereof,
[typed_ast](https://github.com/python/typed_ast).

: Reorganize Python initialization to get working exceptions and
sys.stderr earlier.

: Add end line and end column position information to the Python
AST nodes. This is a C-level backwards incompatible change.

: Fixed a minor memory leak in pymain_parse_cmdline_impl function
in Modules/main.c

: func(**kwargs) will now raise an error when  is a
mapping containing multiple entries with the same key. An error was
already raised when other keyword arguments are passed before 
since Python 3.6.

: Fix a crash when sorting very long lists. Patch by Stephan
Hohe.

: clang Memory Sanitizer build instrumentation was added to work
around false positives from posix, socket, time, test_io, and
test_faulthandler.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Fix an assertion error in  in debug build for
floating-point formatting with ânâ format, zero padding and small width.
Release build is not impacted. Patch by Karthikeyan Singaravelan.

: Format characters  and  in
PyUnicode_FromFormat() and  in PyBytes_FromFormat()
no longer read memory past the limit if  is specified.

: Fix segfaults and SystemErrors when deleting certain
attributes. Patch by Zackery Spytz.

: Fixed a SystemError when delete the characters_written
attribute of an OSError.

: Improved syntax error messages for unbalanced parentheses in
f-string.

: Fixed error handling in pickling methods when fail to look up
builtin âgetattrâ. Sped up pickling iterators.

: Fix various issues with memory allocation error handling.
Patch by Zackery Spytz.

: Separate the signal handling trigger in the eval loop from the
âpending callsâ machinery. There is no semantic change and the difference
in performance is insignificant.

: Internal attributesâ names of unittest.mock._Call and
unittest.mock.MagicProxy (name, parent & from_kall) are now prefixed with
_mock_ in order to prevent clashes with widely used object attributes.
Fixed minor typo in test function name.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Fixed the code page decoder for input longer than 2 GiB
containing undecodable bytes.

: Fix PYTHONCOERCECLOCALE=1 environment variable: only coerce the
C locale if the LC_CTYPE locale is âCâ.

: The  and col_offset attributes of AST nodes for list
comprehensions, generator expressions and tuples are now point to the
opening parenthesis or square brace. For tuples without parenthesis they
point to the position of the first item.

: For str.format(), float.__format__() and
complex.__format__() methods for non-ASCII decimal point when using
the ânâ formatter.

: Fix a possible segfault involving a newly created coroutine.
Patch by Zackery Spytz.

: Implement  (assignment expressions). Patch by Emily
Morehouse.

: Speed up namedtuple() attribute access by 1.6x using a C
fast-path for the name descriptors. Patch by Pablo Galindo.

: Fixed an out of bounds memory access when parsing a truncated
unicode escape sequence at the end of a string such as .  It would
read one byte beyond the end of the memory allocation.

================================================================================

# Changelog - Core and Builtins (Part 8)

: The interpreter and extension modules have had annotations
added so that they work properly under clangâs Memory Sanitizer.  A new
configure flag âwith-memory-sanitizer has been added to make test builds
of this nature easier to perform.

: Fix an off by one error in the bytecode peephole optimizer
where it could read bytes beyond the end of bounds of an array when
removing unreachable code. This bug was present in every release of Python
3.6 and 3.7 until now.

: Improved error messages for forbidden assignments.

: Fix handling of hash-based bytecode files in .
Patch by Elvis Pranskevichus.

: Debug builds will no longer to attempt to import extension
modules built for the ABI as they were never compatible to begin with.
Patch by Stefano Rivera.

: Clarify in the docstrings of  methods that path-like
objects are also accepted as input parameters.

: : Fix off-by-one bug in length check for
 name and type.

: Raise ValueError instead of OverflowError in case
of a negative  in a ctypes.Array subclass.  Also
raise  instead of AttributeError for non-integer
. Original patch by Oren Milman.

: Fix  and col_offset for multi-line string tokens.

================================================================================

# Changelog - Core and Builtins (Part 9)

: SyntaxWarning raised as an exception at code generation
time will be now replaced with a SyntaxError for better error
reporting.

: Expose symtable.Symbol.is_nonlocal() in the symtable
module. Patch by Pablo Galindo.

:  and  constructors no longer
convert unexpected exceptions (e.g. MemoryError and
KeyboardInterrupt) to .

: Allow annotated names in module namespace that are declared
global before the annotation happens. Patch by Pablo Galindo.

: Fixed crash in  when the  argument is
mutated while it is iterated.

: The  and col_offset attributes of the AST for
decorated function and class refer now to the position of the
corresponding ,   and  instead of the position
of the first decorator. This leads to more correct line reporting in
tracing. This is the only case when the position of child AST nodes can
precede the position of the parent AST node.

: Fix a possible null pointer dereference in bytesobject.c.
Patch by Zackery Spytz.

: Fix the implementation of PyStructSequence_NewType in order to
create heap allocated StructSequences.

: A SyntaxWarning is now emitted instead of a
DeprecationWarning for invalid escape sequences in string and bytes
literals.

================================================================================

# Changelog - Core and Builtins (Part 10)

: Fixed a crash in compiling string annotations containing a
lambda with a keyword-only argument that doesnât have a default value.

: The compiler now produces a SyntaxWarning when identity
checks ( and  ) are used with certain types of literals
(e.g. strings, ints).  These can often work by accident in CPython, but
are not guaranteed by the language spec.  The warning advises users to use
equality tests ( and ) instead.

: Fix a possible null pointer dereference in Modules/_ssl.c.
Patch by Zackery Spytz.

: The C function property_descr_get() uses a âcachedâ tuple
to optimize function calls. But this tuple can be discovered in debug mode
with sys.getobjects(). Remove the optimization, itâs not really
worth it and it causes 3 different crashes last years.

: Fix contextvars C API to use PyObject* pointer types.

: The hash function for tuples is now based on xxHash which gives
better collision results on (formerly) pathological cases. Additionally,
on 64-bit systems it improves tuple hashes in general. Patch by Jeroen
Demeyer with substantial contributions by Tim Peters.

: Fix a memory leak in Modules/timemodule.c.  Patch by Zackery
Spytz.

================================================================================

# Changelog - Core and Builtins (Part 11)

: Fixed a bug where some SyntaxError error pointed to locations
that were off-by-one.

: Only allow the main interpreter to fork.  The avoids the
possibility of affecting the main interpreter, which is critical to
operation of the runtime.

: Remove unused function PyParser_SimpleParseStringFilename.

: Warn that line buffering is not supported if  is
called with binary mode and buffering=1.

: Further restrict the syntax of the left-hand side of keyword
arguments in function calls. In particular, f((keyword)=arg) is now
disallowed.

: Make the  argument to  visible as a keyword
argument.

: Do not assume signed integer overflow behavior (C undefined
behavior) when performing set hash table resizing.

: Fix an off-by-one in the recursive call pruning feature of
traceback formatting.

: On Windows, the LC_CTYPE is now set to the user preferred
locale at startup. Previously, the LC_CTYPE locale was âCâ at startup, but
changed when calling setlocale(LC_CTYPE, ââ) or setlocale(LC_ALL, ââ).

: Standard streams like sys.stdout now use the âsurrogateescapeâ
error handler, instead of âstrictâ, on the POSIX locale (when the C locale
is not coerced and the UTF-8 Mode is disabled).

================================================================================

# Changelog - Core and Builtins (Part 12)

: Fix the error handler of standard streams like sys.stdout:
PYTHONIOENCODING=â:â is now ignored instead of setting the error handler
to âstrictâ.

: Python now gets the locale encoding with C code to initialize
the encoding of standard streams like sys.stdout. Moreover, the encoding
is now initialized to the Python codec name to get a normalized encoding
name and to ensure that the codec is loaded. The change avoids importing
_bootlocale and _locale modules at startup by default.

: On FreeBSD, Py_DecodeLocale() and Py_EncodeLocale() now also
forces the ASCII encoding if the LC_CTYPE locale is âPOSIXâ, not only if
the LC_CTYPE locale is âCâ.

: The UTF-8 Mode is now also enabled by the âPOSIXâ locale, not
only by the âCâ locale.

: On HP-UX with C or POSIX locale, sys.getfilesystemencoding()
now returns âasciiâ instead of âroman8â (when the UTF-8 Mode is disabled
and the C locale is not coerced).

: The Python filesystem encoding is now read earlier during the
Python initialization.

================================================================================

# Changelog - Core and Builtins (Part 13)

: Tracebacks show now correct line number for subexpressions in
multiline expressions. Tracebacks show now the line number of the first
line for multiline expressions instead of the line number of the last
subexpression.

: Prevent a null pointer dereference and resource leakage in
PyInterpreterState_New().

: Fix undefined behavior in parsetok.c.  Patch by Zackery Spytz.

: Added as_integer_ratio to ints to make them more interoperable
with floats.

: Update valgrind suppression list to use
_PyObject_Free/_PyObject_Realloc instead of
PyObject_Free/PyObject_Realloc.

: Added the âsocketâ option in the stat.filemode() Python
implementation to match the C implementation.

: Fix  didnât copy iteration order of OrderedDict.

: Fixed crash on debug builds when opcode stack was adjusted with
negative numbers. Patch by Constantin Petrisor.

: Compiler now merges constants in tuples and frozensets
recursively. Code attributes like  are merged too.

: Performance of list concatenation, repetition and slicing
operations is slightly improved. Patch by Sergey Fedoseev.

: -X dev: it is now possible to override the memory allocator
using PYTHONMALLOC even if the developer mode is enabled.

================================================================================

# Changelog - Core and Builtins (Part 14)

: Improved AttributeError message for partially
initialized module.

: Fix min and max functions to get default behavior when key is
None.

: Profiling of unbound built-in methods now works when
 is given.

: Optimized pickling atomic types (None, bool, int, float, bytes,
str).

: Fix crashes when profiling certain invalid calls of unbound
methods. Patch by Jeroen Demeyer.

: Fixed reading invalid memory when create the code object with
too small varnames tuple or too large argument counts.

: In io.IOBase.close(), ensure that the
 attribute is not set with a live exception.
Patch by Zackery Spytz and Serhiy Storchaka.

: Fix buffer overflow while converting unicode to numeric values.

: Fixed a memory leak in the compiler when it raised some
uncommon errors during tokenizing.

: Disabled interruption by Ctrl-C between calling  and
entering a  block in  .

: Fix dict.copy() to maintain correct total refcount (as reported
by sys.gettotalrefcount()).

: Fix potential memory leak in function object when it creates
reference cycle.

: Implement contextvars.ContextVar.name attribute.

: Update vendored Expat library copy to version 2.2.5.

================================================================================

# Changelog - Core and Builtins (Part 15)

: Decref the module object in PyRun_SimpleFileExFlags()
before calling PyErr_Print().  Patch by Zackery Spytz.

: Close directly executed pyc files before calling
PyEval_EvalCode().

bpo-1617161: The hash of BuiltinMethodType instances (methods of
built-in classes) now depends on the hash of the identity of 
instead of its value. The hash and equality of ModuleType and
MethodWrapperType instances (methods of user-defined classes and
some methods of built-in classes like str.__add__) now depend on the
hash and equality of the identity of  instead of its value.
MethodWrapperType instances no longer support ordering.

: Fix âLC_ALL=C python3.7 -Vâ: reset properly the command line
parser when the encoding changes after reading the Python configuration.

: Fix a crash in hamt.c caused by enabling GC tracking for an
object that hadnât all of its fields set to NULL.

: Seven macro incompatibilities with the Limited API were fixed,
and the macros PyIter_Check(), PyIndex_Check() and
PyExceptionClass_Name() were added as functions. A script for
automatic macro checks was added.

: Fix asynchronous generators to handle GeneratorExit in athrow()
correctly

================================================================================

# Changelog - Core and Builtins (Part 16)

: PyRun_SimpleFileExFlags removes __cached__ from module
in addition to .

: Fix a crash in Python initialization when parsing the command
line options. Thanks Christoph Gohlke for the bug report and the fix!

: Reduce  size from 3 words to 2 words.

: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
shutdown even when there was a custom handler set previously. Patch by
Philipp Kerling.

: Fixed a leak when the garbage collector fails to add an object
with the  method or referenced by it into the
gc.garbage list. PyGC_Collect() can now be called when an
exception is set and preserves it.

: Make dict and dict views reversible. Patch by RÃ©mi Lapeyre.

: A RuntimeError is now raised when the custom metaclass
doesnât provide the __classcell__ entry in the namespace passed to
type.__new__.  A DeprecationWarning was emitted in Python
3.6â3.7.

: Add PYTHONPYCACHEPREFIX environment variable and
 pycache_prefix command-line option to set an alternate
root directory for writing module bytecode cache files.

: The  module has been rewritten in pure Python.

: Fix module_globals parameter of warnings.warn_explicit(): donât
crash if module_globals is not a dict.

================================================================================

# Changelog - Core and Builtins (Part 17)

: Fix signed/unsigned comparison warning in pyhash.c.

: Fixed miscellaneous bugs in converting annotations to strings
and optimized parentheses in the string representation.

: Added support for the , ,
setsigmask,  and  parameters of
posix_spawn. Patch by Pablo Galindo.

: Fix a leak in set_symmetric_difference().

: Raise a SyntaxError for   and  
statements outside of async functions.

: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.

: Fix a bug that causes PathFinder to appear twice on
sys.meta_path. Patch by Pablo Galindo Salgado.

: Modules imported last are now cleared first at interpreter
shutdown.

: Fixed clang ubsan (undefined behavior sanitizer) warnings in
dictobject.c by adjusting how the internal struct _dictkeysobject shared
keys structure is declared.

: Improved syntax error messages for invalid numerical literals.

: Improved syntax error messages for unbalanced parentheses.

: The list constructor will pre-size and not over-allocate when
the input length is known.

: Intern the names for all anonymous code objects.  Patch by
Zackery Spytz.

: The C and Python code and the documentation related to tokens
are now generated from a single source file Grammar/Tokens.

================================================================================

# Changelog - Core and Builtins (Part 18)

: Add a toreadonly() method to memoryviews.

: Fix potential memory leak in normalizestring().

: Change dict growth function from
round_up_to_power_2(used*2+hashtable_size/2) to
round_up_to_power_2(used*3).  Previously, dict is shrinked only when
  . Now dict has more chance to be shrinked.

: Improved error messages in âasync withâ when __aenter__()
or __aexit__() return non-awaitable object.

: Fix ma_version_tag in dict implementation is uninitialized
when copying from key-sharing dict.

: When using the -m switch, sys.path[0] is now explicitly
expanded as the  working directory, rather than being left as
the empty path (which allows imports from the current working directory at
the time of the import)

: Changed standard error message for non-pickleable and
non-copyable types. It now says âcannot pickleâ instead of âcanât pickleâ
or âcannot serializeâ.

: Improve consistency of errors raised by issubclass() when
called with a non-class and an abstract base class as the first and second
arguments, respectively. Patch by Josh Bronson.

: math.factorial no longer accepts arguments that are not
int-like. Patch by Pablo Galindo.

================================================================================

# Changelog - Core and Builtins (Part 19)

: Added new opcode END_ASYNC_FOR and fixes the
following issues:

List:
Setting global StopAsyncIteration no longer breaks  
loops.
Jumping into an   loop is now disabled.
Jumping out of an   loop no longer corrupts the stack.

Setting global StopAsyncIteration no longer breaks  
loops.

Jumping into an   loop is now disabled.

Jumping out of an   loop no longer corrupts the stack.

: Fix rare Python crash due to bad refcounting in
type_getattro() if a descriptor deletes itself from the class. Patch
by Jeroen Demeyer.

: Fixed bytecode generation for âasync forâ with a complex
target. A StopAsyncIteration raised on assigning or unpacking will be now
propagated instead of stopping the iteration.

: Fixed jumping out of âwithâ block by setting f_lineno.

: Fix a crash on fork when using a custom memory allocator (ex:
using PYTHONMALLOC env var). _PyGILState_Reinit() and
_PyInterpreterState_Enable() now use the default RAW memory allocator to
allocate a new interpreters mutex on fork.

================================================================================

# Changelog - Core and Builtins (Part 20)

: Due to unexpected compatibility issues discovered during
downstream beta testing, reverted .  field is
removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes
which was added in 3.7a1.  Docstring expression is restored as a first
statement in their body. Based on patch by Inada Naoki.

: Prevent jumps from âreturnâ and âexceptionâ trace events.

: Importing names from already imported module with âfrom â¦
import â¦â is now 30% faster if the module is not a package.

: Make error message more revealing when there are non-str
objects in .

: Optimized iterating and containing test for literal lists
consisting of non-constants:     and     . The
case of all constant elements already was optimized.

: Update Valgrind suppression list to account for the rename of
Py_ADDRESS_IN_RANG to address_in_range.

: Donât use temporary variables in cases of list/dict/set
comprehensions

: Remove the new API added in  (gc.ensure_disabled()
context manager).

: For namespace packages, ensure that both  and
__spec__.origin are set to None.

: Make sure __spec__.loader matches __loader__ for
namespace packages.

================================================================================

# Changelog - Core and Builtins (Part 21)

: Fix the warning messages for Python/ast_unparse.c. Patch by
StÃ©phane Wirtel

: Fix possible crashing in builtin Unicode decoders caused by
write out-of-bound errors when using customized decode error handlers.

: A  statement is now allowed in the
 clause.

: Simplified the interpreter loop by moving the logic of
unrolling the stack of blocks into the compiler. The compiler emits now
explicit instructions for adjusting the stack of values and calling the
cleaning up code for ,  and
.

Removed opcodes BREAK_LOOP, CONTINUE_LOOP,
SETUP_LOOP and SETUP_EXCEPT. Added new opcodes
, BEGIN_FINALLY and CALL_FINALLY and
POP_FINALLY. Changed the behavior of END_FINALLY and
WITH_CLEANUP_START.

: New function unicodedata.is_normalized, which can check whether
a string is in a specific normal form.

: Yield expressions are now disallowed in comprehensions and
generator expressions except the expression for the outermost iterable.

: Iterable unpacking is now allowed without parentheses in yield
and return statements, e.g.     . Thanks to David
Cuthbert for the change and Jordan Chapman for added tests.

================================================================================

# Changelog - Core and Builtins (Part 22)

: Fix the col_offset attribute for ast nodes
ast.AsyncFor, ast.AsyncFunctionDef, and ast.AsyncWith.
Previously, col_offset pointed to the keyword after .

: Fix assertion failures in the  method of
io.TextIOWrapper. Patch by Zackery Spytz.

: Fix a crash in ctypes.cast() in case the type argument is a
ctypes structured data type. Patch by Eryk Sun and Oren Milman.

: Fix a crash in os.utime() in case of a bad ns argument.
Patch by Oren Milman.

: Remove references to âgetsockaddrargâ from various socket error
messages. Patch by Oren Milman.

================================================================================

# Changelog - Library (Part 1)

List:
: Add âorderâ parameter to memoryview.tobytes().
: The _asdict() method for collections.namedtuple now returns a
regular dict instead of an OrderedDict.
: An ExitStack is now used internally within subprocess.Popen to
clean up pipe file handles. No behavior change in normal operation. But if
closing one handle were ever to cause an exception, the others will now be
closed instead of leaked.  (patch by Giampaolo Rodola)
: RISC-V needed the CTYPES_PASS_BY_REF_HACK.  Fixes ctypes
Structure test_pass_by_value.
: Shared memory submodule added to multiprocessing to avoid need
for serialization between processes
: Fix lru_cache() errors arising in recursive, reentrant, or
multi-threaded code. These errors could result in orphan links and in the
cache being trapped in a state with fewer than the specified maximum
number of links. Fix handling of negative maxsize which should have been
treated as zero. Fix errors in toggling the âfullâ status flag. Fix
misordering of links when errors are encountered.  Sync-up the C code and
pure Python code for the space saving path in functions with a single
positional argument. In this common case, the space overhead of an lru
cache entry is reduced by almost half.  Fix counting of cache misses. In
error cases, the miss count was out of sync with the actual number of
times the underlying user function was called.
: os.posix_spawn() and os.posix_spawnp() now have a
 parameter.
: asyncio.ProactorEventLoop now catches and logs send
errors when the self-pipe is full.
: : Enhance IocpProactor.close() log: wait 1
second before the first log, then log every second. Log also the number of
seconds since  was called.
: Add a new os.posix_spawnp() function. Patch by Joannah
Nanjekye.
: ast.Constant(boolean) no longer an instance of
.  Patch by Anthony Sottile.
: QueueHandler.prepare() now makes a copy of the record before
modifying and enqueueing it, to avoid affecting other handlers in the
chain.
: Sped up multi-argument  functions atan2(),
copysign(), remainder() and hypot() by 1.3â2.5 times.
: Fix KeyError exception raised when using enums and compile.
Patch contributed by RÃ©mi Lapeyre.
: Fixed detection of Visual Studio Build Tools 2017 in distutils
: Fix memory leaks in asyncio ProactorEventLoop on overlapped
operation failure.
: The time.CLOCK_UPTIME_RAW constant is now available
for macOS 10.12.
: Fix a memory leak in asyncio in the ProactorEventLoop when
ReadFile() or  overlapped operation fail immediately:
release the internal buffer.
: Fix asyncio.ProactorEventLoop.sendfile(): donât attempt to
set the result of an internal future if itâs already done.
: Add a deprecated warning for the
threading.Thread.isAlive() method. Patch by Donghee Na.
: Improve operator.itemgetter() performance by 33% with optimized
argument handling and with adding a fast path for the common case of a
single non-negative integer index into a tuple (which is the typical use
case in the standard library).
: Fixed a SyntaxWarning: invalid escape sequence in
Modules/_sha3/cleanup.py. Patch by MickaÃ«l Schoentgen.
: Improved support of custom data descriptors in  and
.
: The  module now internally uses the 
library function instead of  when available.
: Fixed help() on metaclasses. Patch by Sanyam Khurana.
: Expose raise(signum) as raise_signal
: The floor division and modulo operations and the 
function on fractions.Fraction types are 2â4x faster. Patch by
Stefan Behnel.
: Speed-up building enums by value, e.g. http.HTTPStatus(200).
: random.gammavariate(1.0, beta) now computes the same result as
random.expovariate(1.0 / beta).  This synchronizes the two algorithms and
eliminates some idiosyncrasies in the old implementation.  It does however
produce a difference stream of random variables than it used to.
: The subprocess module can now use the
os.posix_spawn() function in some cases for better performance.
: Delaying the âjokeâ of barry_as_FLUFL.mandatory to Python
version 4.0
: Remove  callback workaround: no longer create a
callback at startup. Avoid SELinux alert on   and 
.
: uuid.uuid1() now calls time.time_ns() rather than
int(time.time()  .
: TextTestRunner of
unittest.runner now uses time.perf_counter() rather than
time.time() to measure the execution time of a test:
time.time() can go backwards, whereas time.perf_counter() is
monotonic.
: Fixed reference leaks in
xml.etree.ElementTree.TreeBuilder in case of unfinished building
of the tree (in particular when an error was raised during parsing XML).
: Make platform.architecture() parsing of  command
output more reliable: add the  option to the  command to
omit the filename, force the usage of the C locale, and search also the
âshared objectâ pattern.
: multiprocessing: Add Pool.__repr__() and enhance
BaseProcess.__repr__() (add pid and parent pid) to ease debugging.
Pool state constant values are now strings instead of integers, for
example  value becomes  instead of .
: multiprocessing.Pool.__enter__() now fails if the pool is
not running:   fails if used more than once.
: Copy command line that was passed to CreateProcessW since this
function can change the content of the input buffer.
: Python 2.4 dropped MacOS 9 support. The macpath module was
deprecated in Python 3.7. The module is now removed.
: Unblock Proactor event loop when keyboard interrupt is received
on Windows
: Fix xml.dom.minidom cloneNode() on a document with an entity:
pass the correct arguments to the user data handler of an entity.
: Allow repeated assignment deletion of
unittest.mock.Mock attributes. Patch by Pablo Galindo.
: Set __signature__ on mock for  to get
signature. Patch by Karthikeyan Singaravelan.
: Memory errors during creating posix.environ no longer ignored.
: Validate fileno= argument to socket.socket().
: multiprocessing.Pool destructor now emits
ResourceWarning if the pool is still running.
: When a  instance was used to wrap an object, if
side_effect is used in one of the mocks of it methods, donât call the
original implementation and return the result of using the side effect the
same way that it is done with return_value.
: Drop Mac OS 9 and Rhapsody support from the 
module. Rhapsody last release was in 2000. Mac OS 9 last release was in
2001.
: check_environ() of distutils.utils
now catches  on calling pwd.getpwuid(): donât create
the  environment variable in this case.
: posixpath.expanduser() now returns the input 
unchanged if the  environment variable is not set and the current
user has no home directory (if the current user identifier doesnât exist
in the password database). This change fix the  module if the
current user doesnât exist in the password database (if the user has no
home directory).
: platform.libc_ver() now uses
os.confstr('CS_GNU_LIBC_VERSION') if available and the executable
parameter is not set.
: Add empty slots to asyncio abstract protocols.
: Fix a bug in select.select() where, in some cases, the
file descriptor sequences were returned unmodified after a signal
interruption, even though the file descriptors might not be ready yet.
select.select() will now always return empty lists if a timeout has
occurred.  Patch by Oran Avraham.
: Enable TCP_NODELAY on Windows for proactor asyncio event loop.
: Add generic version of collections.OrderedDict to the
 module. Patch by Ismo Toijala.
: Fixed possible crash in os.utime() on Windows when pass
incorrect arguments.
: platform.uname() now redirects  to
os.devnull when running external programs like   .
: Previously, calling the strftime() method on a datetime object
with a trailing â%â in the format string would result in an exception.
However, this only occurred when the datetime C module was being used; the
python implementation did not match this behavior. Datetime is now PEP-399
compliant, and will not throw an exception on a trailing â%â.
: The function platform.popen has been removed, it was
deprecated since Python 3.3: use os.popen() instead.
: On macOS, platform.platform() now uses
platform.mac_ver(), if it returns a non-empty release string, to get
the macOS version rather than the darwin version.
: Make lib2to3.pgen2.parse.ParseError round-trip pickle-able.
Patch by Anthony Sottile.
: Fix regression in webbrowser where default browsers may be
preferred over browsers in the  environment variable.
: Avoid stripping trailing whitespace in doctest fancy diff.
Original patch by R. David Murray & Jairo Trad. Enhanced by Sanyam
Khurana.
: locale.localeconv() now sets temporarily the 
locale to the LC_MONETARY locale if the two locales are different and
monetary strings are non-ASCII. This temporary change affects other
threads.
: Update ensurepip to install pip 18.1 and setuptools 40.6.2.
: Adds IPv6 support when invoking http.server directly.
: Recursively check arguments when testing for equality of
unittest.mock.call objects and add note that tracking of
parameters used to create ancestors of mocks in mock_calls is not
possible.
: The warnings module now suggests to enable tracemalloc if the
source is specified, the tracemalloc module is available, but tracemalloc
is not tracing memory allocations.
: Modify the following fnctl function to retry if interrupted by
a signal (EINTR): flock, lockf, fnctl
: Use add_done_callback() in sock_* asyncio API to unsubscribe
reader/writer early on calcellation.
: Removed the âbuilt withâ comment added when  
is used with either  or bdist_dumb.
: Allow sending more than 2 GB at once on a multiprocessing
connection on non-Windows systems.
: Fix incorrect parsing of
io.IncrementalNewlineDecoderâs  argument.
: Remove StreamReaderProtocol._untrack_reader. The call to
_untrack_reader is currently performed too soon, causing the protocol
to forget about the reader before connection_lost can run and feed the
EOF to the reader.
: ElementTree and minidom now preserve the attribute order
specified by the user.
: Improve difflib.SequenceManager.get_matching_blocks doc by
adding ânon-overlappingâ and changing â!=â to â<â.
: Deprecated l*gettext() functions and methods in the
 module. They return encoded bytes instead of Unicode
strings and are artifacts from Python 2 times. Also deprecated functions
and methods related to setting the charset for l*gettext() functions
and methods.
: socketserver.BaseServer.serve_forever() now exits
immediately if itâs shutdown() method is
called while it is polling for new events.
:  no longer logs   
redundantly after (created|could     is
already logged. Patch by Quentin Agren.
: unittest.mock now includes mock calls in exception messages
if assert_not_called, assert_called_once, or
assert_called_once_with fails. Patch by Petter Strandmark.
: Fix ntpath.abspath regression where it didnât remove a
trailing separator on Windows. Patch by Tim Graham.
: tracemalloc now tries to update the traceback when an object is
reused from a âfree listâ (optimization for faster object creation, used
by the builtin list type for example).
: Add the âjson-lines option to json.tool. Patch by hongweipeng.
: Fixed a leak in Tkinter when pass the Python wrapper around
Tcl_Obj back to Tcl/Tk.
: Enum: fix grandchildren subclassing when parent mixed with
concrete data types.
: unittest.mock.MagicMock now supports the
__fspath__ method (from os.PathLike).
: Fixed references leaks when call the __setstate__() method
of xml.etree.ElementTree.Element in the C implementation for
already initialized element.
: Verify the value for the parameter â-sâ of the cProfile CLI.
Patch by Robert Kuska
: dataclasses now handle recursive reprs without raising
RecursionError.
: Make inspect.iscoroutinefunction(),
inspect.isgeneratorfunction() and inspect.isasyncgenfunction()
work with functools.partial(). Patch by Pablo Galindo.
: Use socket.CMSG_SPACE() to calculate ancillary data size
instead of socket.CMSG_LEN() in
multiprocessing.reduction.recvfds() as  requires the use
of the former for portable applications.
: The mailbox.mbox.get_string function  parameter can
now successfully be set to a non-default value.
: Protect tasks weak set manipulation in asyncio.all_tasks()
: gzip: Add âfast, âbest on the gzip CLI, these parameters will
be used for the fast compression method (quick) or the best method
compress (slower, but smaller file). Also, change the default compression
level to 6 (tradeoff).
: The 2to3  fixer now opens the file with mode
.  Patch by Zackery Spytz.
:  now supports aliases not only to methods defined
in the end class, but also to inherited methods.  The docstring is not
duplicated for aliases.
: mimetypes.MimeTypes.guess_type() now accepts
path-like object in addition to url strings. Patch by Mayank
Asthana.
: Add  method to the tkinter.Canvas widget. Patch
by Juliette Monsel.
: Methods , findtext() and  of the
 class in the xml.etree.ElementTree module are now able
to find children which are instances of  subclasses.
: smtplib.SMTP objects now always have a 
attribute present
: Fix for async generators not finalizing when event loop is in
debug mode and garbage collector runs in another thread.
: Fix  in tkinter.Spinbox.selection_element().
Patch by Juliette Monsel.
: Add methods selection_from, selection_range,
selection_present and selection_to to the tkinter.Spinbox for
consistency with the tkinter.Entry widget. Patch by Juliette Monsel.
: Added secure_protocols argument to
http.cookiejar.DefaultCookiePolicy to allow for tweaking of protocols
and also to add support by default for , the secure websocket
protocol.
: Fixed integer overflow in the  and
hexdigest() methods for the SHAKE algorithm in the
 module.
: 25% speedup in argument parsing for the functions in the bisect
module.
: Fixed unittest.TestCase.debug() when used to call test
methods with subtests.  Patch by Bruno Oliveira.
: logging.Formatter enhancement - Ensure styles and fmt matches
in logging.Formatter - Added validate method in each format style class:
StrFormatStyle, PercentStyle, StringTemplateStyle. - This method is called
in the constructor of logging.Formatter class - Also re-raise the KeyError
in the format method of each style class, so it would a bit clear that
itâs an error with the invalid format fields.
: Adjust test.support.missing_compiler_executable check so that a
nominal command name of ââ is ignored. Patch by Michael Felt.
: Fix inspect module polluted sys.modules when parsing
__text_signature__ of callable.
: Add  argument to gzip.compress for reproducible
output. Patch by Guo Ci Teo.
: On Cygwin and MinGW, ensure that sys.executable always
includes the full filename in the path, including the  suffix
(unless it is a symbolic link).
: Adding max_num_fields to cgi.FieldStorage to make DOS
attacks harder by limiting the number of MiniFieldStorage objects
created by FieldStorage.
: http.server ensures it reports HTTPStatus.NOT_FOUND when the
local path ends with â/â and is not a directory, even if the underlying OS
(e.g. AIX) accepts such paths as a valid file reference. Patch by Michael
Felt.
: Fix self-cancellation in C implementation of asyncio.Task
: Donât log waiting for selector.select in asyncio loop
iteration. The waiting is pretty normal for any asyncio program, logging
its time just adds a noise to logs without any useful information
provided.
: The SOURCE_DATE_EPOCH environment variable no longer
overrides the value of the invalidation_mode argument to
py_compile.compile(), and determines its default value instead.
: Use a monotonic clock to compute timeouts in
Executor.map() and as_completed(), in order to prevent
timeouts from deviating when the system clock is adjusted.
: Add .wasm -> application/wasm to list of recognized file types
and content type headers
: xml.sax.make_parser() now accepts any iterable as its
parser_list argument.  Patch by AndrÃ©s Delfino.
: In QueueHandler, clear  from
 to prevent traceback from being written twice.
: On Windows, asyncio now uses ProactorEventLoop, instead of
SelectorEventLoop, by default.
: Support reading zip files with archive comments in
.
: The parser now represents all constants as
ast.Constant instead of using specific constant AST types
(, , , NameConstant and ). These
classes are considered deprecated and will be removed in future Python
versions.
: Add deprecation warning when  is used in methods:
asyncio.sleep, asyncio.wait and asyncio.wait_for.
: ZIP files created by  will now include entries for
directories.
: Add an optional  argument to itertools.accumulate().
: Support multiple mixin classes when creating Enums.
: Add SSLContext.post_handshake_auth and
SSLSocket.verify_client_post_handshake for TLS 1.3âs post handshake
authentication feature.
: The Activate.ps1 script from venv works with PowerShell Core
6.1 and is now available under all operating systems.
: Fix bug that prevented using reset_mock on mock instances with deleted attributes
: Add a workaround, so the  time.strftime()
specifier on the musl C library can work in some cases.
: Implement asyncio.StreamWriter.awrite and
asyncio.StreamWriter.aclose() coroutines.  Methods are needed for
providing a consistent stream API with control flow switched on by
default.
: Acquire the logging moduleâs commonly used internal locks while
fork()ing to avoid deadlocks in the child process.
: Fix a rare interpreter unhandled exception state SystemError
only seen when using subprocess with a preexec_fn while an after_parent
handler has been registered with os.register_at_fork and the fork system
call fails.
: Ensure os.lchmod() is never defined on Linux.
: Store a weak reference to stream reader to break strong
references loop between reader and protocol.  It allows to detect and
close the socket if the stream is deleted (garbage collected) without
 call.
: Enum._missing_:  raise ValueError if None returned and
 if non-member is returned.
: Speed up re scanning of many non-matching characters for s w
and d within bytes objects. (microoptimization)
: Add addModuleCleanup() and
addClassCleanup() to unittest to support cleanups
for setUpModule() and
setUpClass(). Patch by Lisa Roach.
: Donât log SSL certificate errors in asyncio code (connection
error logging is skipped already).
: Prevent filename duplication in subprocess exception
messages.  Patch by Zackery Spytz.
: dataclasses.asdict() and .astuple() now handle namedtuples
correctly.
: Update vendorized expat library version to 2.2.6.
: The subprocess module no longer mistakenly closes redirected
fds even when they were in pass_fds when outside of the default {0, 1, 2}
set.
: Create a dedicated asyncio.CancelledError,
asyncio.InvalidStateError and asyncio.TimeoutError exception
classes.  Inherit them from corresponding exceptions from
concurrent.futures package. Extract  exceptions into a
separate file.
: Fixed iterator of multiprocessing.managers.DictProxy.
: Fix distutils logging for non-ASCII strings.  This caused
installation issues on Windows.
: Fix possible mojibake in the error message of pwd.getpwnam
and grp.getgrnam using string representation because of invisible
characters or trailing whitespaces. Patch by William Grzybowski.
: Make uuid.UUID use  to reduce its memory
footprint. Based on original patch by Wouter Bolsterlee.
: OrderedDict iterators are not exhausted during pickling
anymore. Patch by Sergey Fedoseev.
: Refactored subprocess to check for Windows-specific
modules rather than sys.platform  .
: distutils.spawn.find_executable() now falls back on
os.defpath if the  environment variable is not set.
: On Windows, fix multiprocessing.Connection for very large read:
fix _winapi.PeekNamedPipe() and _winapi.ReadFile() for read larger than
INT_MAX (usually ).
: Correct typo in Lib/ctypes/_aix.py
: Move Enum._convert to EnumMeta._convert_ and fix enum
members getting shadowed by parent attributes.
: When the queue is closed, ValueError is now raised by
multiprocessing.Queue.put() and multiprocessing.Queue.get()
instead of AssertionError and , respectively. Patch
by Zackery Spytz.
: Fix parsing non-ASCII identifiers in
lib2to3.pgen2.tokenize ().
: Avoids a possible integer underflow (undefined behavior) in the
time moduleâs year handling code when passed a very low negative year
value.
: Improved compatibility for streamed files in .
Previously an optional signature was not being written and certain ZIP
applications were not supported. Patch by Silas Sewell.
: Fix the .fromisoformat() methods of datetime types crashing
when given unicode with non-UTF-8-encodable code points.  Specifically,
datetime.fromisoformat() now accepts surrogate unicode code points used as
the separator. Report and tests by Alexey Izbyshev, patch by Paul Ganssle.
: Fix inspect.getsourcelines for module level frames/tracebacks.
Patch by Vladimir Matveev.
: Running the  module no longer creates the
trace.cover file.
: Fix crash when an -derived class with invalid
__subclasses__ is passed as the second argument to issubclass().
Patch by Alexey Izbyshev.
: Fix infinite loop in a.extend(a) for MutableSequence
subclasses.
: Make signal.strsignal() work on HP-UX. Patch by Michael
Osipov.
: shutil.copytree now accepts a new dirs_exist_ok keyword
argument. Patch by Josh Bronson.
: Associate  file extension with
application/javascript MIME Type.
: os.readlink() now accepts  and  objects on Windows.
: The UTF-7 decoder now raises UnicodeDecodeError for
ill-formed sequences starting with â+â (as specified in RFC 2152).  Patch
by Zackery Spytz.
: The mmap.flush() method now returns
 on success, raises an exception on error under all platforms.
: Appending to the ZIP archive with the ZIP64 extension no longer
grows the size of extra fields of existing entries.
: Fix %-formatting in pathlib.PurePath.with_suffix() when
formatting an error message.
: The imaplib.IMAP4 and imaplib.IMAP4_SSL
classes now resolve to the local host IP correctly when the default value
of  parameter () is used.
: Implement traceback.FrameSummary.__len__() method to
preserve compatibility with the old tuple API.
: assertRaises(),
assertRaisesRegex(),
assertWarns() and
assertWarnsRegex() no longer success if the
passed callable is None. They no longer ignore unknown keyword arguments
in the context manager mode. A DeprecationWarning was raised in these
cases since Python 3.5.
: Deprecate __getitem__() methods of
xml.dom.pulldom.DOMEventStream, wsgiref.util.FileWrapper
and fileinput.FileInput.
: Fix a race condition in multiprocessing.semaphore_tracker
when the tracker receives SIGINT before it can register signal handlers
for ignoring it.
: Report filename in the exception raised when the database file
cannot be opened by dbm.gnu.open() and dbm.ndbm.open() due to
OS-related error. Patch by Zsolt Cserna.
: Add math.dist() to compute the Euclidean distance between two
points.
: smtplib.SMTP.send_message() no longer modifies the
content of the mail_options argument. Patch by Pablo S. Blum de Aguiar.
: Fix ntpath.abspath for invalid paths on windows. Patch by
Franz Woellert.
: Add pure Python fallback for functools.reduce. Patch by Robert
Wright.
: The default asyncio task class now always has a name which can
be get or set using two new methods (get_name() and
set_name()) and is visible in the  output.
An initial name can also be set using the new  keyword argument to
asyncio.create_task() or the
create_task() method of the event loop.
If no initial name is set, the default Task implementation generates a
name like  using a monotonic counter.
: asyncioâs event loop will not pass timeouts longer than one day
to epoll/select etc.
: Fix several AttributeError in zipfile seek() methods. Patch by
MickaÃ«l Schoentgen.
: Fix performance regression in  when a DML
statement appeared in a different line than the rest of the SQL query.
: Deprecate passing non-ThreadPoolExecutor instances to
AbstractEventLoop.set_default_executor().
: Restore msilib.Win64 to preserve backwards compatibility
since itâs already used by â  command.
: Ignore errors caused by missing / non-writable homedir while
writing history during exit of an interactive session.  Patch by Anthony
Sottile.
: Enhanced math.hypot() to support more than two dimensions.
: tracemalloc: PYTHONTRACEMALLOC=0 environment variable and -X
tracemalloc=0 command line option are now allowed to disable explicitly
tracemalloc at startup.
: Use shutil.get_terminal_size() to calculate the terminal
width correctly in the argparse.HelpFormatter class.  Initial patch by
Zbyszek JÄdrzejewski-Szmek.
: Allow frozen dataclasses to have a field named âobjectâ.
Previously this conflicted with an internal use of âobjectâ.
: sqlite3.Connection.create_aggregate(),
sqlite3.Connection.create_function(),
sqlite3.Connection.set_authorizer(),
sqlite3.Connection.set_progress_handler() methods raises TypeError
when unhashable objects are passed as callable. These methods now donât
pass such objects to SQLite API. Previous behavior could lead to
segfaults. Patch by Sergey Fedoseev.
: Attributes skipinitialspace, doublequote and  of
the  attribute of the  reader are now 
instances instead of integers 0 or 1.
: Errors other than  raised in methods
__adapt__() and __conform__() in the  module are now
propagated to the user.
: The  fixer now uses importlib.reload() instead
of deprecated imp.reload().
bpo-940286: pydocâs Helper.showtopic() method now prints the cross
references of a topic correctly.
: base64.b32decode() could raise UnboundLocalError or
OverflowError for incorrect padding.  Now it always raises
base64.Error in these cases.
: Fixed issues with arguments parsing in .
: ZipFile can zip files older than 1980-01-01 and newer than
2107-12-31 using a new strict_timestamps parameter at the cost of
setting the timestamp to the limit.
: Remove extraneous CR in 2to3 refactor.
: Make sure to only check if the handle is a tty, when opening a
file with buffering=-1.
: Reverted . 2to3 rejects now a trailing comma in
generator expressions.
: functools.singledispatch now raises TypeError instead of
IndexError when no positional arguments are passed.
: Add the parameter deterministic to the
sqlite3.Connection.create_function() method. Patch by Sergey
Fedoseev.
: Ensure the loader shim created by imp.load_module always
returns bytes from its get_data() function. This fixes using
imp.load_module with  hash-based pycs.
: The multiprocessing module now uses the monotonic clock
time.monotonic() instead of the system clock time.time() to
implement timeout.
: Optimize tarfile uncompress performance about 15% when gzip is
used.
: subprocess.Popen now copies the startupinfo argument to
leave it unchanged: it will modify the copy, so that the same
STARTUPINFO object can be used multiple times.
: Fixed a performance regression for reading streams with
tarfile. The buffered read should use a list, instead of appending to a
bytes object.
: webbrowser: Correct the arguments passed to Opera Browser when
opening a new URL using the webbrowser module. Patch by Bumsik Kim.
: csv.DictReader now creates dicts instead of OrderedDicts. Patch
by Michael Selik.
: Closed existing logging handlers before reconfiguration via
fileConfig and dictConfig. Patch by Karthikeyan Singaravelan.
: Make minor tweaks to turtledemo. The âwikipediaâ example is now
ârosetteâ, describing what it draws.  The âpenroseâ print output is
reduced. Theâ1024â output of âtreeâ is eliminated.
: Fixed passing lists and tuples of strings containing special
characters , , ,  and  as options to
 widgets.
: Fix getaddrinfo to resolve IPv6 addresses correctly.
: Improve random.choices() to handle subnormal input weights that
could occasionally trigger an IndexError.
: Fixed integer overflow in os.readv(), os.writev(),
os.preadv() and os.pwritev() and in os.sendfile() with
 or  arguments (on BSD-based OSes and macOS).
: Add copy.copy() and copy.deepcopy() support to zlib
compressors and decompressors.  Patch by Zackery Spytz.
: multiprocessing: Fix a race condition in Popen of
multiprocessing.popen_spawn_win32. The child process now duplicates the
read end of pipe instead of âstealingâ it. Previously, the read end of
pipe was âstolenâ by the child process, but it leaked a handle if the
child process had been terminated before it could steal the handle from
the parent process.
: Tokenize module now implicitly emits a NEWLINE when provided
with input that does not have a trailing new line.  This behavior now
matches what the C tokenizer does internally.  Contributed by Ammar Askar.
: Added a âforceâ keyword argument to logging.basicConfig().
: shutil.copytree() uses os.scandir() function and
all copy functions depending from it use cached  values.
The speedup for copying a directory with 8000 files is around +9% on
Linux, +20% on Windows and + 30% on a Windows SMB share. Also the number
of  syscalls is reduced by 38% making
shutil.copytree() especially faster on network filesystems.
(Contributed by Giampaolo Rodolaâ in .)
: bz2 and lzma: When Decompressor.__init__() is called twice,
free the old lock to not leak memory.
: Make select.epoll() and its documentation consistent regarding
 and .
: Fixed bug in asyncio where ProactorSocketTransport logs
AssertionError if force closed during write.
: Convert content length to string before putting to header.
:  functions that return a boolean result like
, , ,
, , and
, and pathlib.Path methods that return a
boolean result like ,
, ,
is_mount(), is_symlink(),
is_block_device(),
is_char_device(), ,
is_socket() now return  instead of raising
ValueError or its subclasses UnicodeEncodeError and
UnicodeDecodeError for paths that contain characters or bytes
unrepresentable at the OS level.
: Fixed implementation of platform.libc_ver(). It almost
always returned version â2.9â for glibc.
: Remove deprecated cgi.escape, cgi.parse_qs and
cgi.parse_qsl.
: Remove tarfile.filemode which is deprecated since Python
3.3.
: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
Steve Weber.
: Improve error message of dataclasses.replace() when an InitVar
is not specified
: Fix the call to os.chmod() for uu.decode() if a mode is
given or decoded. Patch by Timo Furrer.
: Datetime instance d with non-None tzinfo, but with
d.tzinfo.utcoffset(d) returning None is now treated as naive by the
astimezone() method.
: In configparser, donât clear section when it is assigned to
itself.
: Make email module properly handle invalid-length base64
strings.
: Implement multibyte encoder/decoder state methods
: Avoid race condition with debug logging
: Fix _header_value_parser.py when address group is missing final
â;â. Contributed by Enrique Perez-Terron
: asyncio: Fix a race condition causing data loss on
pause_reading()/resume_reading() when using the ProactorEventLoop.
: Correct test for uuid_enc_be availability in
configure.ac. Patch by Michael Felt.
: Add asyncio.WindowsSelectorEventLoopPolicy and
asyncio.WindowsProactorEventLoopPolicy.
: W3C DOM Level 1 specifies return value of
Element.removeAttributeNode() as âThe Attr node that was removed.â
xml.dom.minidom now complies with this requirement.
: Update unicodedataâs database to Unicode version 11.0.0.
: Added a stacklevel parameter to logging calls to allow use of
wrapper/helper functions for logging APIs.
: improve base64 exception message for encoded inputs of invalid
length
: asyncio/start_tls: Fix error message; cancel callbacks in case
of an unhandled error; mark SSLTransport as closed if it is aborted.
: The concatenation () and repetition () sequence
operations now raise  instead of SystemError when
performed on  objects.  Patch by Zackery Spytz.
: asyncio/ssl: Fix AttributeError, increase default handshake
timeout
: Fixed creating a controller for webbrowser when a user
specifies a path to an entry in the BROWSER environment variable.  Based
on patch by John Still.
: Add gettext.pgettext() and variants.
: Add description property for _ParameterKind
: When cancelling the task due to a timeout,
asyncio.wait_for() will now wait until the cancellation is complete.
: Fix gather to propagate cancellation of itself even with
return_exceptions.
: Support protocol type switching in SSLTransport.set_protocol().
: Pause the transport as early as possible to further reduce the
risk of data_received() being called before connection_made().
: shutil.copyfile(), shutil.copy(),
shutil.copy2(), shutil.copytree() and shutil.move() use
platform-specific fast-copy syscalls on Linux and macOS in order to copy
the file more efficiently. On Windows shutil.copyfile() uses a
bigger default buffer size (1 MiB instead of 16 KiB) and a
memoryview()-based variant of shutil.copyfileobj() is used.
The speedup for copying a 512MiB file is about +26% on Linux, +50% on
macOS and +40% on Windows. Also, much less CPU cycles are consumed.
(Contributed by Giampaolo Rodolaâ in .)
: Fix a race condition in SSLProtocol.connection_made() of
asyncio.sslproto: start immediately the handshake instead of using
call_soon(). Previously, data_received() could be called before the
handshake started, causing the handshake to hang or fail.
: Fixed bug where calling write_eof() on a
_SelectorSocketTransport after itâs already closed raises AttributeError.
: Make asyncio.all_tasks() return only pending tasks.
: Avoid blocking on file IO in sendfile fallback code
: Fix RuntimeError after closing loop that used run_in_executor
: Fix Task.__repr__ crash with Cythonâs bogus coroutines
: Fix transport.set_protocol() to support switching between
asyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to
work with asyncio.BufferedProtocols.
: Pickles of type variables and subscripted generics are now
future-proof and compatible with older Python versions.
: Fixed uuid.uuid1() on FreeBSD.
: Add InvalidStateError to concurrent.futures.
Future.set_result and Future.set_exception now raise
InvalidStateError if the futures are not pending or running. Patch by
Jason Haydaman.
: Finalize and document preliminary and experimental TLS 1.3
support with OpenSSL 1.1.1
: Release GIL on grp.getgrnam, grp.getgrgid,
pwd.getpwnam and pwd.getpwuid if reentrant variants of these
functions are available. Patch by William Grzybowski.
: Fix possible SIGSGV when asyncio.Future is created in __del__
: Use a better regex when breaking usage into wrappable parts.
Avoids bogus assertion errors from custom metavar strings.
: Fixed a bug in the Python implementation of the JSON decoder
that prevented the cache of parsed strings from clearing after finishing
the decoding. Based on patch by c-fos.
: Remove HMAC default to md5 marked for removal in 3.8 (removal
originally planned in 3.6, bump to 3.8 in PR 7062).
: Emit a deprecation warning for inspect.formatargspec
: Add functools.cached_property decorator, for computed
properties cached for the life of the instance.
: Change TLS 1.3 cipher suite settings for compatibility with
OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers
enabled by default.
: Do not simplify arguments to typing.Union. Now
Union[Manager,  is not simplified to  at runtime.
Such simplification previously caused several bugs and limited
possibilities for introspection.
: tokenize.generate_tokens() is now documented as a public
API to tokenize unicode strings. It was previously present but
undocumented.
: Add a new block_on_close class attribute to
ForkingMixIn and ThreadingMixIn classes of socketserver.
: tempfile._candidate_tempdir_list should consider common TEMP
locations
: argparse subparsers are once again not required by default,
reverting the change in behavior introduced by  in 3.7.0a2.
: Remove unused private method _strptime.LocaleTime.__pad
(a.k.a. _LocaleTime__pad).
: dataclasses.make_dataclass now checks for invalid field names
and duplicate fields. Also, added a check for invalid field
specifications.
: Prevent uuid.get_node from using a DUID instead of a MAC on
Windows. Patch by Zvi Effron
: Fix race condition with ReadTransport.resume_reading in
Windows proactor event loop.
Fix failure in typing.get_type_hints() when ClassVar was provided as a
string forward reference.
: unittest.mock.MagicMock now supports the 
magic method.
: Added support for Site Maps to urllibâs RobotFileParser as
RobotFileParser.site_maps(). Patch by Lady Red, based
on patch by Peter Wirtz.
: Remove platform.linux_distribution, which was deprecated since
3.5.
: Switch the default dictionary implementation for
configparser from collections.OrderedDict to the standard
 type.
: Optimize asyncio.ensure_future() by reordering if checks: 1.17x
faster.
: Add errors param to cgi.parse_multipart and make an encoding in
FieldStorage use the given errors (needed for Twisted).  Patch by Amber
Brown.
: The cProfile.Profile class can now be used as a
context manager. Patch by Scott Sanderson.
: Change dataclasses.Fields repr to use the repr of each of its
members, instead of str.  This makes it more clear what each field
actually represents.  This is especially true for the âtypeâ member.
: Correct inspect.isdatadescriptor to look for  or
__delete__.  Patch by Aaron Hall.
: Removed the  method and the  parameter of
the constructor of .  The
 method defined in a subclass will no longer be called.
Deprecated methods getchildren() and getiterator() in the
ElementTree module emit now a DeprecationWarning
instead of PendingDeprecationWarning.
: Fix dataclasses to work if using literal string type
annotations or if using PEP 563 âPostponed Evaluation of Annotationsâ.
Only specific string prefixes are detected for both ClassVar (âClassVarâ
and âtyping.ClassVarâ) and InitVar (âInitVarâ and âdataclasses.InitVarâ).
: Minor fixes in typing module: add annotations to
NamedTuple.__new__, pass  and  in
Generic.__new__.  Original PRs by Paulius Å arka and Chad Dombrova.
: Print the header values besides the header keys instead just
the header keys if debuglevel is set to >0 in http.client. Patch
by Marco Strigl.
: Updated alias mapping with glibc 2.27 supported locales.
: Fix trailing quotation marks getting deleted when looking up
byte/string literals on pydoc. Patch by AndrÃ©s Delfino.
: The function platform.linux_distribution and
platform.dist now trigger a DeprecationWarning and have been
marked for removal in Python 3.8
: Fix ctypes.util.find_library regression on macOS.
: Text and html output generated by cgitb does not display
parentheses if the current call is done directly in the module. Patch by
StÃ©phane Blondon.
: The file classes in  now accept an  parameter
that complements the already existing .  Patch by Stephan Hohe.
: unittest.mock.mock_open() now supports iteration over the
file contents. Patch by Tony Flury.
: Raise  when looking up non-Enum objects in Enum
classes and Enum members.
: Update error message when constructing invalid
inspect.Parameters Patch by Donghee Na.
: Fixed crash in the get() method of the  database
object when it is called with a single argument.
: The warnings module now finds the Python file associated with a
warning from the code object, rather than the frameâs global namespace.
This is consistent with how tracebacks and pdb find filenames, and should
work better for dynamically executed code.
:  now allows  command in IMAP4.uid() (RFC
6851: IMAP MOVE Extension) and potentially as a name of supported method
of  object.
: Added  parameter to dis.stack_effect().
: Rename and deprecate undocumented functions in
urllib.parse().
: Add signal.valid_signals() to expose the POSIX sigfillset()
functionality.
: ConfigParser.items() was fixed so that key-value pairs
passed in via  are not included in the resulting output.
: Fix multiprocessing regression on newer glibcs
: dis.stack_effect() now supports all defined opcodes
including NOP and EXTENDED_ARG.
bpo-991266: Fix quoting of the  attribute of
http.cookies.SimpleCookie.
: Upgrade bundled version of pip to 10.0.1.
: Fixed a crash in the  module when converting an ST
object to a tree of tuples or lists with line_info=False and
col_info=True.
: lib2to3 now uses pickle protocol 4 for pre-computed grammars.
: lib2to3 now recognizes  strings.
: Ensure line-endings are respected when using lib2to3.
: Have importlib.resources.contents() and
importlib.abc.ResourceReader.contents() return an 
instead of an .
: contextlib.ExitStack and contextlib.AsyncExitStack now
use a method instead of a wrapper function for exit callbacks.
: Fix FD leak in _SelectorSocketTransport  Patch by Vlad
Starostin.
: Fix display of  call in the html produced by
cgitb.html(). Patch by StÃ©phane Blondon.
: random.Random() and its subclassing mechanism got optimized
to check only once at class/subclass instantiation time whether its
getrandbits() method can be relied on by other methods, including
randrange(), for the generation of arbitrarily large random integers.
Patch by Wolfgang Maier.
: Fixed regression when running pydoc with the 
switch. (The regression was introduced in 3.7.0b3 by the resolution of
)
This fix also changed pydoc to add os.getcwd() to 
when necessary, rather than adding .

================================================================================

# Changelog - Library (Part 2)

: Added support for the  cookie flag to the
http.cookies module.
: Delete entries of  in sys.path_importer_cache
when importlib.machinery.invalidate_caches() is called.
: random.Random.choice() now raises IndexError for empty
sequences consistently even when called from subclasses without a
getrandbits() implementation.
: Update difflib.mdiff() for .  Convert an uncaught
StopIteration in a generator into a return-statement.
: End framing at the end of C implementation of
pickle.Pickler.dump().
: The urllib.robotparserâs  representation now
includes wildcard entries and the âCrawl-delayâ and âRequest-rateâ fields.
Also removes extra newlines that were being appended to the end of the
string. Patch by Michael Lazar.
: DEFAULT_PROTOCOL in  was bumped to 4. Protocol
4 is described in  and available since Python 3.4. It offers
better performance and smaller size compared to protocol 3 introduced in
Python 3.0.
: Improved error handling and fixed a reference leak in
os.posix_spawn().
: Deleting a key from a read-only dbm database raises module
specific error instead of KeyError.
: In dataclasses, Field.__set_name__ now looks up the
__set_name__ special method on the class, not the instance, of the default
value.
: Create functools.singledispatchmethod to support generic single
dispatch on descriptors and methods.
: Have Field objects pass through __set_name__ to their default
values, if they have their own __set_name__.
: Allow ttk.Treeview.insert to insert iid that has a false
boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
Khatri.
: Treat type variables and special typing forms as immutable by
copy and pickle.  This fixes several minor issues and inconsistencies, and
improves backwards compatibility with Python 3.6.
: When computing dataclassâs __hash__, use the lookup table to
contain the function which returns the __hash__ value.  This is an
improvement over looking up a string, and then testing that string to see
what to do.
: The ssl module now compiles with LibreSSL 2.7.1.
: Raise TypeError if a member variable of a dataclass is of type
Field, but doesnât have a type annotation.
: Fix the failure on OSX caused by the tests relying on
sem_getvalue
: Add âFieldâ to dataclasses.__all__.
: Fix an error where subclassing a dataclass with a field that
uses a default_factory would generate an incorrect class.
: Dataclasses: If a field has a default value thatâs a
MemberDescriptorType, then itâs from that field being in __slots__, not an
actual default value.
: If a non-dataclass inherits from a frozen dataclass, allow
attributes to be added to the derived class.  Only attributes from the
frozen dataclass cannot be assigned to.  Require all dataclasses in a
hierarchy to be either all frozen or all non-frozen.
: Raise RuntimeError when executor.submit is called during
interpreter shutdown.
: Modulo and floor division involving Fraction and float should
return float.
: Add missing  to  in typing.py
: Fix the size handling in multiprocessing.Queue when a pickling
error occurs.
: lib2to3 now properly supports trailing commas after 
and  in function signatures.
: FIX properly close leaking fds in
concurrent.futures.ProcessPoolExecutor.
: Release the GIL during fstat() calls, avoiding hang of all
threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
by Nir Soffer.
: Avoid failing in multiprocessing.Process if the standard
streams are closed or None at exit.
: Providing an explicit error message when casting the port
property to anything that is not an integer value using urlparse() and
urlsplit(). Patch by Matt Eaton.
: Improve struct.unpack_from() exception messages for problems
with the buffer size and offset.
: Skip sending/receiving data after SSL transport closing.
: Fix a regression in  that result of
 is empty when the network is constructed by a tuple
containing an integer mask and only 1 bit left for addresses.
: Add the strsignal() function in the signal module that returns
the system description of the given signal, as returned by strsignal(3).
: Fix C implementation of ABC.__subclasscheck__(cls,
 crashed when  is not a type object.
: Fix inspect.signature() for single-parameter partialmethods.
: Expose several missing constants in zlib and fix corresponding
documentation.
: Improved exceptions raised for invalid number of channels and
sample width when read an audio file in modules , 
and .
: Improved disassembly of the MAKE_FUNCTION instruction.
: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
subprocess if another low descriptor is closed.
: For dataclasses, disallow inheriting frozen from non-frozen
classes, and also disallow inheriting non-frozen from frozen classes. This
restriction will be relaxed at a future date.
: Fixed tarfile.itn handling of out-of-bounds float values. Patch
by Joffrey Fuhrer.
: The ssl module now contains OP_NO_RENEGOTIATION constant,
available with OpenSSL 1.1.0h or 1.1.1.
: Direct instantiation of SSLSocket and SSLObject objects is now
prohibited. The constructors were never documented, tested, or designed as
public constructors. Users were suppose to use ssl.wrap_socket() or
SSLContext.
: Remove the tri-state parameter âhashâ, and add the boolean
âunsafe_hashâ. If unsafe_hash is True, add a __hash__ function, but if a
__hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__
based on the values of eq= and frozen=.  The unsafe_hash=False behavior is
the same as the old hash=None behavior.  unsafe_hash=False is the default,
just as hash=None used to be.
: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3
for future compatibility with OpenSSL 1.1.1.
: Document the interaction between frozen executables and the
spawn and forkserver start methods in multiprocessing.
: The ssl module now detects missing NPN support in LibreSSL.
: dbm.open() now encodes filename with the filesystem encoding
rather than default encoding.
: Free unused arenas in multiprocessing.heap.
: In , donât check every call whether the 
syscall exists or not.
: nt._getfinalpathname, nt._getvolumepathname and
nt._getdiskusage now correctly convert from bytes.
: Rewrite confusing message from setup.py upload from âNo dist
file created in earlier commandâ to the more helpful âMust create and
upload files in one commandâ.
: In , after_cancel(None) now raises a
ValueError instead of canceling the first scheduled function.
Patch by Cheryl Sabella.
: Make sure sys.argv remains as a list when running trace.
:  module is added.  It is a speedup module with C
implementations for various functions and methods in .  Creating an
ABC subclass and calling isinstance or issubclass with an ABC
subclass are up to 1.5x faster. In addition, this makes Python start-up up
to 10% faster.
Note that the new implementation hides internal registry and caches,
previously accessible via private attributes _abc_registry,
_abc_cache, and _abc_negative_cache.  There are three debugging
helper methods that can be used instead _dump_registry,
_abc_registry_clear, and _abc_caches_clear.

================================================================================

# Changelog - Library (Part 3)

: Fixed asyncio.Condition issue which silently ignored
cancellation after notifying and cancelling a conditional lock. Patch by
Bar Harel.
: ssl.match_hostname() has been simplified and no longer depends
on re and ipaddress module for wildcard and IP addresses. Error reporting
for invalid wildcards has been improved.
: multiprocessing.Pool no longer leaks processes if its
initialization fails.
: socket: Remove
TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version
Windows during run-time.
: Fixed refleaks of __init__() methods in various modules.
(Contributed by Oren Milman)
: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
only the last field is quoted.  Patch by Jake Davis.
: Added support of  escapes in regular expressions.
Based on patch by Jonathan Eunice.
: collections.ChainMap() preserves the order of the underlying
mappings.
: fnmatch.translate() no longer produces patterns which
contain set operations. Sets starting with â[â or containing âââ, â&&â,
â~~â or â||â will be interpreted differently in regular expressions in
future versions. Currently they emit warnings. fnmatch.translate() now
avoids producing patterns containing such sets by accident.
: Implement native fast sendfile for Windows proactor event loop.
: Fix a rare but potential pre-exec child process deadlock in
subprocess on POSIX systems when marking file descriptors inheritable on
exec in the child process.  This bug appears to have been introduced in
3.4.
: The ctypes module used to depend on indirect linking for
dlopen. The shared extension is now explicitly linked against libdl on
platforms with dl.
: A  database opened with flags ârâ is now
read-only. dbm.dumb.open() with flags ârâ and âwâ no longer creates
a database if it does not exist.
: Implement asyncio.TimerHandle.when() method.
: Use mod_spec.parent when running modules with pdb
: Fixed asyncio.Lock() safety issue which allowed acquiring
and locking the same lock multiple times, without it being free. Patch by
Bar Harel.
: Do not include name field in SMTP envelope from address. Patch
by StÃ©phane Wirtel
: Add TLSVersion constants and SSLContext.maximum_version /
minimum_version attributes. The new API wraps OpenSSL 1.1
https://web.archive.org/web/20180309043602/https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html
feature.
: Internal implementation details of ssl module were cleaned up.
The SSLSocket has one less layer of indirection. Owner and session
information are now handled by the SSLSocket and SSLObject constructor.
Channel binding implementation has been simplified.
: Fix the error handling in Aifc_read.initfp() when the SSND
chunk is not found. Patch by Zackery Spytz.
: Add Ttk spinbox widget to tkinter.ttk.  Patch by Alan D
Moore.
:  CLI accepts  module_name as an alternative
to script path.
: help() on a type now displays builtin subclasses. This is
intended primarily to help with notification of more specific exception
subclasses.
Patch by Sanyam Khurana.

================================================================================

# Changelog - Library (Part 4)

: http.server now exposes a ThreadingHTTPServer class and uses it
when the module is run with  to cope with web browsers pre-opening
sockets.
: compileall: import ProcessPoolExecutor only when needed,
preventing hangs on low resource platforms
: Various functions returning tuple containing IPv6 addresses now
omit  part since the same information is already encoded in
 tuple item. Especially this speeds up socket.recvfrom()
when it receives multicast packet since useless resolving of network
interface name is omitted.
: binascii.unhexlify() is now up to 2 times faster. Patch
by Sergey Fedoseev.
: The TarFile class now recurses directories in a reproducible
way.
: The ZipFile class now recurses directories in a reproducible
way.
: Added curses.ncurses_version.
: Fix output of cover files for  module command-line
tool. Previously emitted cover files only when  option was
used. Patch by Michael Selik.
: Raise a  instead of crashing if a
collections.deque subclass returns a non-deque from . Patch
by Oren Milman.
: Add support for sockets of the AF_QIPCRTR address family,
supported by the Linux kernel. This is used to communicate with services,
such as GPS or radio, running on Qualcomm devices. Patch by Bjorn
Andersson.
: Implemented unpickling instances of
,  and
 pickled by Python 2. encoding='latin1' should
be used for successful decoding.
: sqlite3.Connection now exposes a
 method, if the underlying SQLite
library is at version 3.6.11 or higher.  Patch by Lele Gaifax.
: Support arrays >=2GiB in .  Patch by Segev Finer.
: Removed support of arguments in
tkinter.ttk.Treeview.selection. It was deprecated in 3.6.  Use
specialized methods like selection_set for changing the selection.
: Fix bugs in hangul normalization: u1176, u11a7 and u11c3

================================================================================

# Changelog - Library (Part 5)

: Add âorderâ parameter to memoryview.tobytes().

: The _asdict() method for collections.namedtuple now returns a
regular dict instead of an OrderedDict.

: An ExitStack is now used internally within subprocess.Popen to
clean up pipe file handles. No behavior change in normal operation. But if
closing one handle were ever to cause an exception, the others will now be
closed instead of leaked.  (patch by Giampaolo Rodola)

: RISC-V needed the CTYPES_PASS_BY_REF_HACK.  Fixes ctypes
Structure test_pass_by_value.

: Shared memory submodule added to multiprocessing to avoid need
for serialization between processes

================================================================================

# Changelog - Library (Part 6)

: Fix lru_cache() errors arising in recursive, reentrant, or
multi-threaded code. These errors could result in orphan links and in the
cache being trapped in a state with fewer than the specified maximum
number of links. Fix handling of negative maxsize which should have been
treated as zero. Fix errors in toggling the âfullâ status flag. Fix
misordering of links when errors are encountered.  Sync-up the C code and
pure Python code for the space saving path in functions with a single
positional argument. In this common case, the space overhead of an lru
cache entry is reduced by almost half.  Fix counting of cache misses. In
error cases, the miss count was out of sync with the actual number of
times the underlying user function was called.

: os.posix_spawn() and os.posix_spawnp() now have a
 parameter.

: asyncio.ProactorEventLoop now catches and logs send
errors when the self-pipe is full.

: : Enhance IocpProactor.close() log: wait 1
second before the first log, then log every second. Log also the number of
seconds since  was called.

: Add a new os.posix_spawnp() function. Patch by Joannah
Nanjekye.

: ast.Constant(boolean) no longer an instance of
.  Patch by Anthony Sottile.

================================================================================

# Changelog - Library (Part 7)

: QueueHandler.prepare() now makes a copy of the record before
modifying and enqueueing it, to avoid affecting other handlers in the
chain.

: Sped up multi-argument  functions atan2(),
copysign(), remainder() and hypot() by 1.3â2.5 times.

: Fix KeyError exception raised when using enums and compile.
Patch contributed by RÃ©mi Lapeyre.

: Fixed detection of Visual Studio Build Tools 2017 in distutils

: Fix memory leaks in asyncio ProactorEventLoop on overlapped
operation failure.

: The time.CLOCK_UPTIME_RAW constant is now available
for macOS 10.12.

: Fix a memory leak in asyncio in the ProactorEventLoop when
ReadFile() or  overlapped operation fail immediately:
release the internal buffer.

: Fix asyncio.ProactorEventLoop.sendfile(): donât attempt to
set the result of an internal future if itâs already done.

: Add a deprecated warning for the
threading.Thread.isAlive() method. Patch by Donghee Na.

: Improve operator.itemgetter() performance by 33% with optimized
argument handling and with adding a fast path for the common case of a
single non-negative integer index into a tuple (which is the typical use
case in the standard library).

================================================================================

# Changelog - Library (Part 8)

: Fixed a SyntaxWarning: invalid escape sequence in
Modules/_sha3/cleanup.py. Patch by MickaÃ«l Schoentgen.

: Improved support of custom data descriptors in  and
.

: The  module now internally uses the 
library function instead of  when available.

: Fixed help() on metaclasses. Patch by Sanyam Khurana.

: Expose raise(signum) as raise_signal

: The floor division and modulo operations and the 
function on fractions.Fraction types are 2â4x faster. Patch by
Stefan Behnel.

: Speed-up building enums by value, e.g. http.HTTPStatus(200).

: random.gammavariate(1.0, beta) now computes the same result as
random.expovariate(1.0 / beta).  This synchronizes the two algorithms and
eliminates some idiosyncrasies in the old implementation.  It does however
produce a difference stream of random variables than it used to.

: The subprocess module can now use the
os.posix_spawn() function in some cases for better performance.

: Delaying the âjokeâ of barry_as_FLUFL.mandatory to Python
version 4.0

: Remove  callback workaround: no longer create a
callback at startup. Avoid SELinux alert on   and 
.

: uuid.uuid1() now calls time.time_ns() rather than
int(time.time()  .

================================================================================

# Changelog - Library (Part 9)

: TextTestRunner of
unittest.runner now uses time.perf_counter() rather than
time.time() to measure the execution time of a test:
time.time() can go backwards, whereas time.perf_counter() is
monotonic.

: Fixed reference leaks in
xml.etree.ElementTree.TreeBuilder in case of unfinished building
of the tree (in particular when an error was raised during parsing XML).

: Make platform.architecture() parsing of  command
output more reliable: add the  option to the  command to
omit the filename, force the usage of the C locale, and search also the
âshared objectâ pattern.

: multiprocessing: Add Pool.__repr__() and enhance
BaseProcess.__repr__() (add pid and parent pid) to ease debugging.
Pool state constant values are now strings instead of integers, for
example  value becomes  instead of .

: multiprocessing.Pool.__enter__() now fails if the pool is
not running:   fails if used more than once.

: Copy command line that was passed to CreateProcessW since this
function can change the content of the input buffer.

: Python 2.4 dropped MacOS 9 support. The macpath module was
deprecated in Python 3.7. The module is now removed.

================================================================================

# Changelog - Library (Part 10)

: Unblock Proactor event loop when keyboard interrupt is received
on Windows

: Fix xml.dom.minidom cloneNode() on a document with an entity:
pass the correct arguments to the user data handler of an entity.

: Allow repeated assignment deletion of
unittest.mock.Mock attributes. Patch by Pablo Galindo.

: Set __signature__ on mock for  to get
signature. Patch by Karthikeyan Singaravelan.

: Memory errors during creating posix.environ no longer ignored.

: Validate fileno= argument to socket.socket().

: multiprocessing.Pool destructor now emits
ResourceWarning if the pool is still running.

: When a  instance was used to wrap an object, if
side_effect is used in one of the mocks of it methods, donât call the
original implementation and return the result of using the side effect the
same way that it is done with return_value.

: Drop Mac OS 9 and Rhapsody support from the 
module. Rhapsody last release was in 2000. Mac OS 9 last release was in
2001.

: check_environ() of distutils.utils
now catches  on calling pwd.getpwuid(): donât create
the  environment variable in this case.

================================================================================

# Changelog - Library (Part 11)

: posixpath.expanduser() now returns the input 
unchanged if the  environment variable is not set and the current
user has no home directory (if the current user identifier doesnât exist
in the password database). This change fix the  module if the
current user doesnât exist in the password database (if the user has no
home directory).

: platform.libc_ver() now uses
os.confstr('CS_GNU_LIBC_VERSION') if available and the executable
parameter is not set.

: Add empty slots to asyncio abstract protocols.

: Fix a bug in select.select() where, in some cases, the
file descriptor sequences were returned unmodified after a signal
interruption, even though the file descriptors might not be ready yet.
select.select() will now always return empty lists if a timeout has
occurred.  Patch by Oran Avraham.

: Enable TCP_NODELAY on Windows for proactor asyncio event loop.

: Add generic version of collections.OrderedDict to the
 module. Patch by Ismo Toijala.

: Fixed possible crash in os.utime() on Windows when pass
incorrect arguments.

: platform.uname() now redirects  to
os.devnull when running external programs like   .

================================================================================

# Changelog - Library (Part 12)

: Previously, calling the strftime() method on a datetime object
with a trailing â%â in the format string would result in an exception.
However, this only occurred when the datetime C module was being used; the
python implementation did not match this behavior. Datetime is now PEP-399
compliant, and will not throw an exception on a trailing â%â.

: The function platform.popen has been removed, it was
deprecated since Python 3.3: use os.popen() instead.

: On macOS, platform.platform() now uses
platform.mac_ver(), if it returns a non-empty release string, to get
the macOS version rather than the darwin version.

: Make lib2to3.pgen2.parse.ParseError round-trip pickle-able.
Patch by Anthony Sottile.

: Fix regression in webbrowser where default browsers may be
preferred over browsers in the  environment variable.

: Avoid stripping trailing whitespace in doctest fancy diff.
Original patch by R. David Murray & Jairo Trad. Enhanced by Sanyam
Khurana.

: locale.localeconv() now sets temporarily the 
locale to the LC_MONETARY locale if the two locales are different and
monetary strings are non-ASCII. This temporary change affects other
threads.

================================================================================

# Changelog - Library (Part 13)

: Update ensurepip to install pip 18.1 and setuptools 40.6.2.

: Adds IPv6 support when invoking http.server directly.

: Recursively check arguments when testing for equality of
unittest.mock.call objects and add note that tracking of
parameters used to create ancestors of mocks in mock_calls is not
possible.

: The warnings module now suggests to enable tracemalloc if the
source is specified, the tracemalloc module is available, but tracemalloc
is not tracing memory allocations.

: Modify the following fnctl function to retry if interrupted by
a signal (EINTR): flock, lockf, fnctl

: Use add_done_callback() in sock_* asyncio API to unsubscribe
reader/writer early on calcellation.

: Removed the âbuilt withâ comment added when  
is used with either  or bdist_dumb.

: Allow sending more than 2 GB at once on a multiprocessing
connection on non-Windows systems.

: Fix incorrect parsing of
io.IncrementalNewlineDecoderâs  argument.

: Remove StreamReaderProtocol._untrack_reader. The call to
_untrack_reader is currently performed too soon, causing the protocol
to forget about the reader before connection_lost can run and feed the
EOF to the reader.

================================================================================

# Changelog - Library (Part 14)

: ElementTree and minidom now preserve the attribute order
specified by the user.

: Improve difflib.SequenceManager.get_matching_blocks doc by
adding ânon-overlappingâ and changing â!=â to â<â.

: Deprecated l*gettext() functions and methods in the
 module. They return encoded bytes instead of Unicode
strings and are artifacts from Python 2 times. Also deprecated functions
and methods related to setting the charset for l*gettext() functions
and methods.

: socketserver.BaseServer.serve_forever() now exits
immediately if itâs shutdown() method is
called while it is polling for new events.

:  no longer logs   
redundantly after (created|could     is
already logged. Patch by Quentin Agren.

: unittest.mock now includes mock calls in exception messages
if assert_not_called, assert_called_once, or
assert_called_once_with fails. Patch by Petter Strandmark.

: Fix ntpath.abspath regression where it didnât remove a
trailing separator on Windows. Patch by Tim Graham.

: tracemalloc now tries to update the traceback when an object is
reused from a âfree listâ (optimization for faster object creation, used
by the builtin list type for example).

================================================================================

# Changelog - Library (Part 15)

: Add the âjson-lines option to json.tool. Patch by hongweipeng.

: Fixed a leak in Tkinter when pass the Python wrapper around
Tcl_Obj back to Tcl/Tk.

: Enum: fix grandchildren subclassing when parent mixed with
concrete data types.

: unittest.mock.MagicMock now supports the
__fspath__ method (from os.PathLike).

: Fixed references leaks when call the __setstate__() method
of xml.etree.ElementTree.Element in the C implementation for
already initialized element.

: Verify the value for the parameter â-sâ of the cProfile CLI.
Patch by Robert Kuska

: dataclasses now handle recursive reprs without raising
RecursionError.

: Make inspect.iscoroutinefunction(),
inspect.isgeneratorfunction() and inspect.isasyncgenfunction()
work with functools.partial(). Patch by Pablo Galindo.

: Use socket.CMSG_SPACE() to calculate ancillary data size
instead of socket.CMSG_LEN() in
multiprocessing.reduction.recvfds() as  requires the use
of the former for portable applications.

: The mailbox.mbox.get_string function  parameter can
now successfully be set to a non-default value.

: Protect tasks weak set manipulation in asyncio.all_tasks()

================================================================================

# Changelog - Library (Part 16)

: gzip: Add âfast, âbest on the gzip CLI, these parameters will
be used for the fast compression method (quick) or the best method
compress (slower, but smaller file). Also, change the default compression
level to 6 (tradeoff).

: The 2to3  fixer now opens the file with mode
.  Patch by Zackery Spytz.

:  now supports aliases not only to methods defined
in the end class, but also to inherited methods.  The docstring is not
duplicated for aliases.

: mimetypes.MimeTypes.guess_type() now accepts
path-like object in addition to url strings. Patch by Mayank
Asthana.

: Add  method to the tkinter.Canvas widget. Patch
by Juliette Monsel.

: Methods , findtext() and  of the
 class in the xml.etree.ElementTree module are now able
to find children which are instances of  subclasses.

: smtplib.SMTP objects now always have a 
attribute present

: Fix for async generators not finalizing when event loop is in
debug mode and garbage collector runs in another thread.

: Fix  in tkinter.Spinbox.selection_element().
Patch by Juliette Monsel.

================================================================================

# Changelog - Library (Part 17)

: Add methods selection_from, selection_range,
selection_present and selection_to to the tkinter.Spinbox for
consistency with the tkinter.Entry widget. Patch by Juliette Monsel.

: Added secure_protocols argument to
http.cookiejar.DefaultCookiePolicy to allow for tweaking of protocols
and also to add support by default for , the secure websocket
protocol.

: Fixed integer overflow in the  and
hexdigest() methods for the SHAKE algorithm in the
 module.

: 25% speedup in argument parsing for the functions in the bisect
module.

: Fixed unittest.TestCase.debug() when used to call test
methods with subtests.  Patch by Bruno Oliveira.

: logging.Formatter enhancement - Ensure styles and fmt matches
in logging.Formatter - Added validate method in each format style class:
StrFormatStyle, PercentStyle, StringTemplateStyle. - This method is called
in the constructor of logging.Formatter class - Also re-raise the KeyError
in the format method of each style class, so it would a bit clear that
itâs an error with the invalid format fields.

: Adjust test.support.missing_compiler_executable check so that a
nominal command name of ââ is ignored. Patch by Michael Felt.

================================================================================

# Changelog - Library (Part 18)

: Fix inspect module polluted sys.modules when parsing
__text_signature__ of callable.

: Add  argument to gzip.compress for reproducible
output. Patch by Guo Ci Teo.

: On Cygwin and MinGW, ensure that sys.executable always
includes the full filename in the path, including the  suffix
(unless it is a symbolic link).

: Adding max_num_fields to cgi.FieldStorage to make DOS
attacks harder by limiting the number of MiniFieldStorage objects
created by FieldStorage.

: http.server ensures it reports HTTPStatus.NOT_FOUND when the
local path ends with â/â and is not a directory, even if the underlying OS
(e.g. AIX) accepts such paths as a valid file reference. Patch by Michael
Felt.

: Fix self-cancellation in C implementation of asyncio.Task

: Donât log waiting for selector.select in asyncio loop
iteration. The waiting is pretty normal for any asyncio program, logging
its time just adds a noise to logs without any useful information
provided.

: The SOURCE_DATE_EPOCH environment variable no longer
overrides the value of the invalidation_mode argument to
py_compile.compile(), and determines its default value instead.

================================================================================

# Changelog - Library (Part 19)

: Use a monotonic clock to compute timeouts in
Executor.map() and as_completed(), in order to prevent
timeouts from deviating when the system clock is adjusted.

: Add .wasm -> application/wasm to list of recognized file types
and content type headers

: xml.sax.make_parser() now accepts any iterable as its
parser_list argument.  Patch by AndrÃ©s Delfino.

: In QueueHandler, clear  from
 to prevent traceback from being written twice.

: On Windows, asyncio now uses ProactorEventLoop, instead of
SelectorEventLoop, by default.

: Support reading zip files with archive comments in
.

: The parser now represents all constants as
ast.Constant instead of using specific constant AST types
(, , , NameConstant and ). These
classes are considered deprecated and will be removed in future Python
versions.

: Add deprecation warning when  is used in methods:
asyncio.sleep, asyncio.wait and asyncio.wait_for.

: ZIP files created by  will now include entries for
directories.

: Add an optional  argument to itertools.accumulate().

: Support multiple mixin classes when creating Enums.

: Add SSLContext.post_handshake_auth and
SSLSocket.verify_client_post_handshake for TLS 1.3âs post handshake
authentication feature.

================================================================================

# Changelog - Library (Part 20)

: The Activate.ps1 script from venv works with PowerShell Core
6.1 and is now available under all operating systems.

: Fix bug that prevented using reset_mock on mock instances with deleted attributes

: Add a workaround, so the  time.strftime()
specifier on the musl C library can work in some cases.

: Implement asyncio.StreamWriter.awrite and
asyncio.StreamWriter.aclose() coroutines.  Methods are needed for
providing a consistent stream API with control flow switched on by
default.

: Acquire the logging moduleâs commonly used internal locks while
fork()ing to avoid deadlocks in the child process.

: Fix a rare interpreter unhandled exception state SystemError
only seen when using subprocess with a preexec_fn while an after_parent
handler has been registered with os.register_at_fork and the fork system
call fails.

: Ensure os.lchmod() is never defined on Linux.

: Store a weak reference to stream reader to break strong
references loop between reader and protocol.  It allows to detect and
close the socket if the stream is deleted (garbage collected) without
 call.

: Enum._missing_:  raise ValueError if None returned and
 if non-member is returned.

================================================================================

# Changelog - Library (Part 21)

: Speed up re scanning of many non-matching characters for s w
and d within bytes objects. (microoptimization)

: Add addModuleCleanup() and
addClassCleanup() to unittest to support cleanups
for setUpModule() and
setUpClass(). Patch by Lisa Roach.

: Donât log SSL certificate errors in asyncio code (connection
error logging is skipped already).

: Prevent filename duplication in subprocess exception
messages.  Patch by Zackery Spytz.

: dataclasses.asdict() and .astuple() now handle namedtuples
correctly.

: Update vendorized expat library version to 2.2.6.

: The subprocess module no longer mistakenly closes redirected
fds even when they were in pass_fds when outside of the default {0, 1, 2}
set.

: Create a dedicated asyncio.CancelledError,
asyncio.InvalidStateError and asyncio.TimeoutError exception
classes.  Inherit them from corresponding exceptions from
concurrent.futures package. Extract  exceptions into a
separate file.

: Fixed iterator of multiprocessing.managers.DictProxy.

: Fix distutils logging for non-ASCII strings.  This caused
installation issues on Windows.

================================================================================

# Changelog - Library (Part 22)

: Fix possible mojibake in the error message of pwd.getpwnam
and grp.getgrnam using string representation because of invisible
characters or trailing whitespaces. Patch by William Grzybowski.

: Make uuid.UUID use  to reduce its memory
footprint. Based on original patch by Wouter Bolsterlee.

: OrderedDict iterators are not exhausted during pickling
anymore. Patch by Sergey Fedoseev.

: Refactored subprocess to check for Windows-specific
modules rather than sys.platform  .

: distutils.spawn.find_executable() now falls back on
os.defpath if the  environment variable is not set.

: On Windows, fix multiprocessing.Connection for very large read:
fix _winapi.PeekNamedPipe() and _winapi.ReadFile() for read larger than
INT_MAX (usually ).

: Correct typo in Lib/ctypes/_aix.py

: Move Enum._convert to EnumMeta._convert_ and fix enum
members getting shadowed by parent attributes.

: When the queue is closed, ValueError is now raised by
multiprocessing.Queue.put() and multiprocessing.Queue.get()
instead of AssertionError and , respectively. Patch
by Zackery Spytz.

: Fix parsing non-ASCII identifiers in
lib2to3.pgen2.tokenize ().

================================================================================

# Changelog - Library (Part 23)

: Avoids a possible integer underflow (undefined behavior) in the
time moduleâs year handling code when passed a very low negative year
value.

: Improved compatibility for streamed files in .
Previously an optional signature was not being written and certain ZIP
applications were not supported. Patch by Silas Sewell.

: Fix the .fromisoformat() methods of datetime types crashing
when given unicode with non-UTF-8-encodable code points.  Specifically,
datetime.fromisoformat() now accepts surrogate unicode code points used as
the separator. Report and tests by Alexey Izbyshev, patch by Paul Ganssle.

: Fix inspect.getsourcelines for module level frames/tracebacks.
Patch by Vladimir Matveev.

: Running the  module no longer creates the
trace.cover file.

: Fix crash when an -derived class with invalid
__subclasses__ is passed as the second argument to issubclass().
Patch by Alexey Izbyshev.

: Fix infinite loop in a.extend(a) for MutableSequence
subclasses.

: Make signal.strsignal() work on HP-UX. Patch by Michael
Osipov.

: shutil.copytree now accepts a new dirs_exist_ok keyword
argument. Patch by Josh Bronson.

: Associate  file extension with
application/javascript MIME Type.

================================================================================

# Changelog - Library (Part 24)

: os.readlink() now accepts  and  objects on Windows.

: The UTF-7 decoder now raises UnicodeDecodeError for
ill-formed sequences starting with â+â (as specified in RFC 2152).  Patch
by Zackery Spytz.

: The mmap.flush() method now returns
 on success, raises an exception on error under all platforms.

: Appending to the ZIP archive with the ZIP64 extension no longer
grows the size of extra fields of existing entries.

: Fix %-formatting in pathlib.PurePath.with_suffix() when
formatting an error message.

: The imaplib.IMAP4 and imaplib.IMAP4_SSL
classes now resolve to the local host IP correctly when the default value
of  parameter () is used.

: Implement traceback.FrameSummary.__len__() method to
preserve compatibility with the old tuple API.

: assertRaises(),
assertRaisesRegex(),
assertWarns() and
assertWarnsRegex() no longer success if the
passed callable is None. They no longer ignore unknown keyword arguments
in the context manager mode. A DeprecationWarning was raised in these
cases since Python 3.5.

: Deprecate __getitem__() methods of
xml.dom.pulldom.DOMEventStream, wsgiref.util.FileWrapper
and fileinput.FileInput.

================================================================================

# Changelog - Library (Part 25)

: Fix a race condition in multiprocessing.semaphore_tracker
when the tracker receives SIGINT before it can register signal handlers
for ignoring it.

: Report filename in the exception raised when the database file
cannot be opened by dbm.gnu.open() and dbm.ndbm.open() due to
OS-related error. Patch by Zsolt Cserna.

: Add math.dist() to compute the Euclidean distance between two
points.

: smtplib.SMTP.send_message() no longer modifies the
content of the mail_options argument. Patch by Pablo S. Blum de Aguiar.

: Fix ntpath.abspath for invalid paths on windows. Patch by
Franz Woellert.

: Add pure Python fallback for functools.reduce. Patch by Robert
Wright.

: The default asyncio task class now always has a name which can
be get or set using two new methods (get_name() and
set_name()) and is visible in the  output.
An initial name can also be set using the new  keyword argument to
asyncio.create_task() or the
create_task() method of the event loop.
If no initial name is set, the default Task implementation generates a
name like  using a monotonic counter.

: asyncioâs event loop will not pass timeouts longer than one day
to epoll/select etc.

================================================================================

# Changelog - Library (Part 26)

: Fix several AttributeError in zipfile seek() methods. Patch by
MickaÃ«l Schoentgen.

: Fix performance regression in  when a DML
statement appeared in a different line than the rest of the SQL query.

: Deprecate passing non-ThreadPoolExecutor instances to
AbstractEventLoop.set_default_executor().

: Restore msilib.Win64 to preserve backwards compatibility
since itâs already used by â  command.

: Ignore errors caused by missing / non-writable homedir while
writing history during exit of an interactive session.  Patch by Anthony
Sottile.

: Enhanced math.hypot() to support more than two dimensions.

: tracemalloc: PYTHONTRACEMALLOC=0 environment variable and -X
tracemalloc=0 command line option are now allowed to disable explicitly
tracemalloc at startup.

: Use shutil.get_terminal_size() to calculate the terminal
width correctly in the argparse.HelpFormatter class.  Initial patch by
Zbyszek JÄdrzejewski-Szmek.

: Allow frozen dataclasses to have a field named âobjectâ.
Previously this conflicted with an internal use of âobjectâ.

================================================================================

# Changelog - Library (Part 27)

: sqlite3.Connection.create_aggregate(),
sqlite3.Connection.create_function(),
sqlite3.Connection.set_authorizer(),
sqlite3.Connection.set_progress_handler() methods raises TypeError
when unhashable objects are passed as callable. These methods now donât
pass such objects to SQLite API. Previous behavior could lead to
segfaults. Patch by Sergey Fedoseev.

: Attributes skipinitialspace, doublequote and  of
the  attribute of the  reader are now 
instances instead of integers 0 or 1.

: Errors other than  raised in methods
__adapt__() and __conform__() in the  module are now
propagated to the user.

: The  fixer now uses importlib.reload() instead
of deprecated imp.reload().

bpo-940286: pydocâs Helper.showtopic() method now prints the cross
references of a topic correctly.

: base64.b32decode() could raise UnboundLocalError or
OverflowError for incorrect padding.  Now it always raises
base64.Error in these cases.

: Fixed issues with arguments parsing in .

: ZipFile can zip files older than 1980-01-01 and newer than
2107-12-31 using a new strict_timestamps parameter at the cost of
setting the timestamp to the limit.

: Remove extraneous CR in 2to3 refactor.

================================================================================

# Changelog - Library (Part 28)

: Make sure to only check if the handle is a tty, when opening a
file with buffering=-1.

: Reverted . 2to3 rejects now a trailing comma in
generator expressions.

: functools.singledispatch now raises TypeError instead of
IndexError when no positional arguments are passed.

: Add the parameter deterministic to the
sqlite3.Connection.create_function() method. Patch by Sergey
Fedoseev.

: Ensure the loader shim created by imp.load_module always
returns bytes from its get_data() function. This fixes using
imp.load_module with  hash-based pycs.

: The multiprocessing module now uses the monotonic clock
time.monotonic() instead of the system clock time.time() to
implement timeout.

: Optimize tarfile uncompress performance about 15% when gzip is
used.

: subprocess.Popen now copies the startupinfo argument to
leave it unchanged: it will modify the copy, so that the same
STARTUPINFO object can be used multiple times.

: Fixed a performance regression for reading streams with
tarfile. The buffered read should use a list, instead of appending to a
bytes object.

: webbrowser: Correct the arguments passed to Opera Browser when
opening a new URL using the webbrowser module. Patch by Bumsik Kim.

================================================================================

# Changelog - Library (Part 29)

: csv.DictReader now creates dicts instead of OrderedDicts. Patch
by Michael Selik.

: Closed existing logging handlers before reconfiguration via
fileConfig and dictConfig. Patch by Karthikeyan Singaravelan.

: Make minor tweaks to turtledemo. The âwikipediaâ example is now
ârosetteâ, describing what it draws.  The âpenroseâ print output is
reduced. Theâ1024â output of âtreeâ is eliminated.

: Fixed passing lists and tuples of strings containing special
characters , , ,  and  as options to
 widgets.

: Fix getaddrinfo to resolve IPv6 addresses correctly.

: Improve random.choices() to handle subnormal input weights that
could occasionally trigger an IndexError.

: Fixed integer overflow in os.readv(), os.writev(),
os.preadv() and os.pwritev() and in os.sendfile() with
 or  arguments (on BSD-based OSes and macOS).

: Add copy.copy() and copy.deepcopy() support to zlib
compressors and decompressors.  Patch by Zackery Spytz.

================================================================================

# Changelog - Library (Part 30)

: multiprocessing: Fix a race condition in Popen of
multiprocessing.popen_spawn_win32. The child process now duplicates the
read end of pipe instead of âstealingâ it. Previously, the read end of
pipe was âstolenâ by the child process, but it leaked a handle if the
child process had been terminated before it could steal the handle from
the parent process.

: Tokenize module now implicitly emits a NEWLINE when provided
with input that does not have a trailing new line.  This behavior now
matches what the C tokenizer does internally.  Contributed by Ammar Askar.

: Added a âforceâ keyword argument to logging.basicConfig().

: shutil.copytree() uses os.scandir() function and
all copy functions depending from it use cached  values.
The speedup for copying a directory with 8000 files is around +9% on
Linux, +20% on Windows and + 30% on a Windows SMB share. Also the number
of  syscalls is reduced by 38% making
shutil.copytree() especially faster on network filesystems.
(Contributed by Giampaolo Rodolaâ in .)

: bz2 and lzma: When Decompressor.__init__() is called twice,
free the old lock to not leak memory.

: Make select.epoll() and its documentation consistent regarding
 and .

================================================================================

# Changelog - Library (Part 31)

: Fixed bug in asyncio where ProactorSocketTransport logs
AssertionError if force closed during write.

: Convert content length to string before putting to header.

:  functions that return a boolean result like
, , ,
, , and
, and pathlib.Path methods that return a
boolean result like ,
, ,
is_mount(), is_symlink(),
is_block_device(),
is_char_device(), ,
is_socket() now return  instead of raising
ValueError or its subclasses UnicodeEncodeError and
UnicodeDecodeError for paths that contain characters or bytes
unrepresentable at the OS level.

: Fixed implementation of platform.libc_ver(). It almost
always returned version â2.9â for glibc.

: Remove deprecated cgi.escape, cgi.parse_qs and
cgi.parse_qsl.

: Remove tarfile.filemode which is deprecated since Python
3.3.

: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
Steve Weber.

: Improve error message of dataclasses.replace() when an InitVar
is not specified

: Fix the call to os.chmod() for uu.decode() if a mode is
given or decoded. Patch by Timo Furrer.

: Datetime instance d with non-None tzinfo, but with
d.tzinfo.utcoffset(d) returning None is now treated as naive by the
astimezone() method.

================================================================================

# Changelog - Library (Part 32)

: In configparser, donât clear section when it is assigned to
itself.

: Make email module properly handle invalid-length base64
strings.

: Implement multibyte encoder/decoder state methods

: Avoid race condition with debug logging

: Fix _header_value_parser.py when address group is missing final
â;â. Contributed by Enrique Perez-Terron

: asyncio: Fix a race condition causing data loss on
pause_reading()/resume_reading() when using the ProactorEventLoop.

: Correct test for uuid_enc_be availability in
configure.ac. Patch by Michael Felt.

: Add asyncio.WindowsSelectorEventLoopPolicy and
asyncio.WindowsProactorEventLoopPolicy.

: W3C DOM Level 1 specifies return value of
Element.removeAttributeNode() as âThe Attr node that was removed.â
xml.dom.minidom now complies with this requirement.

: Update unicodedataâs database to Unicode version 11.0.0.

: Added a stacklevel parameter to logging calls to allow use of
wrapper/helper functions for logging APIs.

: improve base64 exception message for encoded inputs of invalid
length

: asyncio/start_tls: Fix error message; cancel callbacks in case
of an unhandled error; mark SSLTransport as closed if it is aborted.

================================================================================

# Changelog - Library (Part 33)

: The concatenation () and repetition () sequence
operations now raise  instead of SystemError when
performed on  objects.  Patch by Zackery Spytz.

: asyncio/ssl: Fix AttributeError, increase default handshake
timeout

: Fixed creating a controller for webbrowser when a user
specifies a path to an entry in the BROWSER environment variable.  Based
on patch by John Still.

: Add gettext.pgettext() and variants.

: Add description property for _ParameterKind

: When cancelling the task due to a timeout,
asyncio.wait_for() will now wait until the cancellation is complete.

: Fix gather to propagate cancellation of itself even with
return_exceptions.

: Support protocol type switching in SSLTransport.set_protocol().

: Pause the transport as early as possible to further reduce the
risk of data_received() being called before connection_made().

================================================================================

# Changelog - Library (Part 34)

: shutil.copyfile(), shutil.copy(),
shutil.copy2(), shutil.copytree() and shutil.move() use
platform-specific fast-copy syscalls on Linux and macOS in order to copy
the file more efficiently. On Windows shutil.copyfile() uses a
bigger default buffer size (1 MiB instead of 16 KiB) and a
memoryview()-based variant of shutil.copyfileobj() is used.
The speedup for copying a 512MiB file is about +26% on Linux, +50% on
macOS and +40% on Windows. Also, much less CPU cycles are consumed.
(Contributed by Giampaolo Rodolaâ in .)

: Fix a race condition in SSLProtocol.connection_made() of
asyncio.sslproto: start immediately the handshake instead of using
call_soon(). Previously, data_received() could be called before the
handshake started, causing the handshake to hang or fail.

: Fixed bug where calling write_eof() on a
_SelectorSocketTransport after itâs already closed raises AttributeError.

: Make asyncio.all_tasks() return only pending tasks.

: Avoid blocking on file IO in sendfile fallback code

: Fix RuntimeError after closing loop that used run_in_executor

: Fix Task.__repr__ crash with Cythonâs bogus coroutines

================================================================================

# Changelog - Library (Part 35)

: Fix transport.set_protocol() to support switching between
asyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to
work with asyncio.BufferedProtocols.

: Pickles of type variables and subscripted generics are now
future-proof and compatible with older Python versions.

: Fixed uuid.uuid1() on FreeBSD.

: Add InvalidStateError to concurrent.futures.
Future.set_result and Future.set_exception now raise
InvalidStateError if the futures are not pending or running. Patch by
Jason Haydaman.

: Finalize and document preliminary and experimental TLS 1.3
support with OpenSSL 1.1.1

: Release GIL on grp.getgrnam, grp.getgrgid,
pwd.getpwnam and pwd.getpwuid if reentrant variants of these
functions are available. Patch by William Grzybowski.

: Fix possible SIGSGV when asyncio.Future is created in __del__

: Use a better regex when breaking usage into wrappable parts.
Avoids bogus assertion errors from custom metavar strings.

: Fixed a bug in the Python implementation of the JSON decoder
that prevented the cache of parsed strings from clearing after finishing
the decoding. Based on patch by c-fos.

================================================================================

# Changelog - Library (Part 36)

: Remove HMAC default to md5 marked for removal in 3.8 (removal
originally planned in 3.6, bump to 3.8 in PR 7062).

: Emit a deprecation warning for inspect.formatargspec

: Add functools.cached_property decorator, for computed
properties cached for the life of the instance.

: Change TLS 1.3 cipher suite settings for compatibility with
OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers
enabled by default.

: Do not simplify arguments to typing.Union. Now
Union[Manager,  is not simplified to  at runtime.
Such simplification previously caused several bugs and limited
possibilities for introspection.

: tokenize.generate_tokens() is now documented as a public
API to tokenize unicode strings. It was previously present but
undocumented.

: Add a new block_on_close class attribute to
ForkingMixIn and ThreadingMixIn classes of socketserver.

: tempfile._candidate_tempdir_list should consider common TEMP
locations

: argparse subparsers are once again not required by default,
reverting the change in behavior introduced by  in 3.7.0a2.

: Remove unused private method _strptime.LocaleTime.__pad
(a.k.a. _LocaleTime__pad).

================================================================================

# Changelog - Library (Part 37)

: dataclasses.make_dataclass now checks for invalid field names
and duplicate fields. Also, added a check for invalid field
specifications.

: Prevent uuid.get_node from using a DUID instead of a MAC on
Windows. Patch by Zvi Effron

: Fix race condition with ReadTransport.resume_reading in
Windows proactor event loop.

Fix failure in typing.get_type_hints() when ClassVar was provided as a
string forward reference.

: unittest.mock.MagicMock now supports the 
magic method.

: Added support for Site Maps to urllibâs RobotFileParser as
RobotFileParser.site_maps(). Patch by Lady Red, based
on patch by Peter Wirtz.

: Remove platform.linux_distribution, which was deprecated since
3.5.

: Switch the default dictionary implementation for
configparser from collections.OrderedDict to the standard
 type.

: Optimize asyncio.ensure_future() by reordering if checks: 1.17x
faster.

: Add errors param to cgi.parse_multipart and make an encoding in
FieldStorage use the given errors (needed for Twisted).  Patch by Amber
Brown.

: The cProfile.Profile class can now be used as a
context manager. Patch by Scott Sanderson.

================================================================================

# Changelog - Library (Part 38)

: Change dataclasses.Fields repr to use the repr of each of its
members, instead of str.  This makes it more clear what each field
actually represents.  This is especially true for the âtypeâ member.

: Correct inspect.isdatadescriptor to look for  or
__delete__.  Patch by Aaron Hall.

: Removed the  method and the  parameter of
the constructor of .  The
 method defined in a subclass will no longer be called.
Deprecated methods getchildren() and getiterator() in the
ElementTree module emit now a DeprecationWarning
instead of PendingDeprecationWarning.

: Fix dataclasses to work if using literal string type
annotations or if using PEP 563 âPostponed Evaluation of Annotationsâ.
Only specific string prefixes are detected for both ClassVar (âClassVarâ
and âtyping.ClassVarâ) and InitVar (âInitVarâ and âdataclasses.InitVarâ).

: Minor fixes in typing module: add annotations to
NamedTuple.__new__, pass  and  in
Generic.__new__.  Original PRs by Paulius Å arka and Chad Dombrova.

: Print the header values besides the header keys instead just
the header keys if debuglevel is set to >0 in http.client. Patch
by Marco Strigl.

================================================================================

# Changelog - Library (Part 39)

: Updated alias mapping with glibc 2.27 supported locales.

: Fix trailing quotation marks getting deleted when looking up
byte/string literals on pydoc. Patch by AndrÃ©s Delfino.

: The function platform.linux_distribution and
platform.dist now trigger a DeprecationWarning and have been
marked for removal in Python 3.8

: Fix ctypes.util.find_library regression on macOS.

: Text and html output generated by cgitb does not display
parentheses if the current call is done directly in the module. Patch by
StÃ©phane Blondon.

: The file classes in  now accept an  parameter
that complements the already existing .  Patch by Stephan Hohe.

: unittest.mock.mock_open() now supports iteration over the
file contents. Patch by Tony Flury.

: Raise  when looking up non-Enum objects in Enum
classes and Enum members.

: Update error message when constructing invalid
inspect.Parameters Patch by Donghee Na.

: Fixed crash in the get() method of the  database
object when it is called with a single argument.

================================================================================

# Changelog - Library (Part 40)

: The warnings module now finds the Python file associated with a
warning from the code object, rather than the frameâs global namespace.
This is consistent with how tracebacks and pdb find filenames, and should
work better for dynamically executed code.

:  now allows  command in IMAP4.uid() (RFC
6851: IMAP MOVE Extension) and potentially as a name of supported method
of  object.

: Added  parameter to dis.stack_effect().

: Rename and deprecate undocumented functions in
urllib.parse().

: Add signal.valid_signals() to expose the POSIX sigfillset()
functionality.

: ConfigParser.items() was fixed so that key-value pairs
passed in via  are not included in the resulting output.

: Fix multiprocessing regression on newer glibcs

: dis.stack_effect() now supports all defined opcodes
including NOP and EXTENDED_ARG.

bpo-991266: Fix quoting of the  attribute of
http.cookies.SimpleCookie.

: Upgrade bundled version of pip to 10.0.1.

: Fixed a crash in the  module when converting an ST
object to a tree of tuples or lists with line_info=False and
col_info=True.

: lib2to3 now uses pickle protocol 4 for pre-computed grammars.

: lib2to3 now recognizes  strings.

================================================================================

# Changelog - Library (Part 41)

: Ensure line-endings are respected when using lib2to3.

: Have importlib.resources.contents() and
importlib.abc.ResourceReader.contents() return an 
instead of an .

: contextlib.ExitStack and contextlib.AsyncExitStack now
use a method instead of a wrapper function for exit callbacks.

: Fix FD leak in _SelectorSocketTransport  Patch by Vlad
Starostin.

: Fix display of  call in the html produced by
cgitb.html(). Patch by StÃ©phane Blondon.

: random.Random() and its subclassing mechanism got optimized
to check only once at class/subclass instantiation time whether its
getrandbits() method can be relied on by other methods, including
randrange(), for the generation of arbitrarily large random integers.
Patch by Wolfgang Maier.

: Fixed regression when running pydoc with the 
switch. (The regression was introduced in 3.7.0b3 by the resolution of
)

This fix also changed pydoc to add os.getcwd() to 
when necessary, rather than adding .

: Added support for the  cookie flag to the
http.cookies module.

: Delete entries of  in sys.path_importer_cache
when importlib.machinery.invalidate_caches() is called.

================================================================================

# Changelog - Library (Part 42)

: random.Random.choice() now raises IndexError for empty
sequences consistently even when called from subclasses without a
getrandbits() implementation.

: Update difflib.mdiff() for .  Convert an uncaught
StopIteration in a generator into a return-statement.

: End framing at the end of C implementation of
pickle.Pickler.dump().

: The urllib.robotparserâs  representation now
includes wildcard entries and the âCrawl-delayâ and âRequest-rateâ fields.
Also removes extra newlines that were being appended to the end of the
string. Patch by Michael Lazar.

: DEFAULT_PROTOCOL in  was bumped to 4. Protocol
4 is described in  and available since Python 3.4. It offers
better performance and smaller size compared to protocol 3 introduced in
Python 3.0.

: Improved error handling and fixed a reference leak in
os.posix_spawn().

: Deleting a key from a read-only dbm database raises module
specific error instead of KeyError.

: In dataclasses, Field.__set_name__ now looks up the
__set_name__ special method on the class, not the instance, of the default
value.

: Create functools.singledispatchmethod to support generic single
dispatch on descriptors and methods.

================================================================================

# Changelog - Library (Part 43)

: Have Field objects pass through __set_name__ to their default
values, if they have their own __set_name__.

: Allow ttk.Treeview.insert to insert iid that has a false
boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
Khatri.

: Treat type variables and special typing forms as immutable by
copy and pickle.  This fixes several minor issues and inconsistencies, and
improves backwards compatibility with Python 3.6.

: When computing dataclassâs __hash__, use the lookup table to
contain the function which returns the __hash__ value.  This is an
improvement over looking up a string, and then testing that string to see
what to do.

: The ssl module now compiles with LibreSSL 2.7.1.

: Raise TypeError if a member variable of a dataclass is of type
Field, but doesnât have a type annotation.

: Fix the failure on OSX caused by the tests relying on
sem_getvalue

: Add âFieldâ to dataclasses.__all__.

: Fix an error where subclassing a dataclass with a field that
uses a default_factory would generate an incorrect class.

: Dataclasses: If a field has a default value thatâs a
MemberDescriptorType, then itâs from that field being in __slots__, not an
actual default value.

================================================================================

# Changelog - Library (Part 44)

: If a non-dataclass inherits from a frozen dataclass, allow
attributes to be added to the derived class.  Only attributes from the
frozen dataclass cannot be assigned to.  Require all dataclasses in a
hierarchy to be either all frozen or all non-frozen.

: Raise RuntimeError when executor.submit is called during
interpreter shutdown.

: Modulo and floor division involving Fraction and float should
return float.

: Add missing  to  in typing.py

: Fix the size handling in multiprocessing.Queue when a pickling
error occurs.

: lib2to3 now properly supports trailing commas after 
and  in function signatures.

: FIX properly close leaking fds in
concurrent.futures.ProcessPoolExecutor.

: Release the GIL during fstat() calls, avoiding hang of all
threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
by Nir Soffer.

: Avoid failing in multiprocessing.Process if the standard
streams are closed or None at exit.

: Providing an explicit error message when casting the port
property to anything that is not an integer value using urlparse() and
urlsplit(). Patch by Matt Eaton.

: Improve struct.unpack_from() exception messages for problems
with the buffer size and offset.

================================================================================

# Changelog - Library (Part 45)

: Skip sending/receiving data after SSL transport closing.

: Fix a regression in  that result of
 is empty when the network is constructed by a tuple
containing an integer mask and only 1 bit left for addresses.

: Add the strsignal() function in the signal module that returns
the system description of the given signal, as returned by strsignal(3).

: Fix C implementation of ABC.__subclasscheck__(cls,
 crashed when  is not a type object.

: Fix inspect.signature() for single-parameter partialmethods.

: Expose several missing constants in zlib and fix corresponding
documentation.

: Improved exceptions raised for invalid number of channels and
sample width when read an audio file in modules , 
and .

: Improved disassembly of the MAKE_FUNCTION instruction.

: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
subprocess if another low descriptor is closed.

: For dataclasses, disallow inheriting frozen from non-frozen
classes, and also disallow inheriting non-frozen from frozen classes. This
restriction will be relaxed at a future date.

: Fixed tarfile.itn handling of out-of-bounds float values. Patch
by Joffrey Fuhrer.

================================================================================

# Changelog - Library (Part 46)

: The ssl module now contains OP_NO_RENEGOTIATION constant,
available with OpenSSL 1.1.0h or 1.1.1.

: Direct instantiation of SSLSocket and SSLObject objects is now
prohibited. The constructors were never documented, tested, or designed as
public constructors. Users were suppose to use ssl.wrap_socket() or
SSLContext.

: Remove the tri-state parameter âhashâ, and add the boolean
âunsafe_hashâ. If unsafe_hash is True, add a __hash__ function, but if a
__hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__
based on the values of eq= and frozen=.  The unsafe_hash=False behavior is
the same as the old hash=None behavior.  unsafe_hash=False is the default,
just as hash=None used to be.

: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3
for future compatibility with OpenSSL 1.1.1.

: Document the interaction between frozen executables and the
spawn and forkserver start methods in multiprocessing.

: The ssl module now detects missing NPN support in LibreSSL.

: dbm.open() now encodes filename with the filesystem encoding
rather than default encoding.

: Free unused arenas in multiprocessing.heap.

================================================================================

# Changelog - Library (Part 47)

: In , donât check every call whether the 
syscall exists or not.

: nt._getfinalpathname, nt._getvolumepathname and
nt._getdiskusage now correctly convert from bytes.

: Rewrite confusing message from setup.py upload from âNo dist
file created in earlier commandâ to the more helpful âMust create and
upload files in one commandâ.

: In , after_cancel(None) now raises a
ValueError instead of canceling the first scheduled function.
Patch by Cheryl Sabella.

: Make sure sys.argv remains as a list when running trace.

:  module is added.  It is a speedup module with C
implementations for various functions and methods in .  Creating an
ABC subclass and calling isinstance or issubclass with an ABC
subclass are up to 1.5x faster. In addition, this makes Python start-up up
to 10% faster.

Note that the new implementation hides internal registry and caches,
previously accessible via private attributes _abc_registry,
_abc_cache, and _abc_negative_cache.  There are three debugging
helper methods that can be used instead _dump_registry,
_abc_registry_clear, and _abc_caches_clear.

================================================================================

# Changelog - Library (Part 48)

: Fixed asyncio.Condition issue which silently ignored
cancellation after notifying and cancelling a conditional lock. Patch by
Bar Harel.

: ssl.match_hostname() has been simplified and no longer depends
on re and ipaddress module for wildcard and IP addresses. Error reporting
for invalid wildcards has been improved.

: multiprocessing.Pool no longer leaks processes if its
initialization fails.

: socket: Remove
TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version
Windows during run-time.

: Fixed refleaks of __init__() methods in various modules.
(Contributed by Oren Milman)

: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
only the last field is quoted.  Patch by Jake Davis.

: Added support of  escapes in regular expressions.
Based on patch by Jonathan Eunice.

: collections.ChainMap() preserves the order of the underlying
mappings.

================================================================================

# Changelog - Library (Part 49)

: fnmatch.translate() no longer produces patterns which
contain set operations. Sets starting with â[â or containing âââ, â&&â,
â~~â or â||â will be interpreted differently in regular expressions in
future versions. Currently they emit warnings. fnmatch.translate() now
avoids producing patterns containing such sets by accident.

: Implement native fast sendfile for Windows proactor event loop.

: Fix a rare but potential pre-exec child process deadlock in
subprocess on POSIX systems when marking file descriptors inheritable on
exec in the child process.  This bug appears to have been introduced in
3.4.

: The ctypes module used to depend on indirect linking for
dlopen. The shared extension is now explicitly linked against libdl on
platforms with dl.

: A  database opened with flags ârâ is now
read-only. dbm.dumb.open() with flags ârâ and âwâ no longer creates
a database if it does not exist.

: Implement asyncio.TimerHandle.when() method.

: Use mod_spec.parent when running modules with pdb

: Fixed asyncio.Lock() safety issue which allowed acquiring
and locking the same lock multiple times, without it being free. Patch by
Bar Harel.

================================================================================

# Changelog - Library (Part 50)

: Do not include name field in SMTP envelope from address. Patch
by StÃ©phane Wirtel

: Add TLSVersion constants and SSLContext.maximum_version /
minimum_version attributes. The new API wraps OpenSSL 1.1
https://web.archive.org/web/20180309043602/https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html
feature.

: Internal implementation details of ssl module were cleaned up.
The SSLSocket has one less layer of indirection. Owner and session
information are now handled by the SSLSocket and SSLObject constructor.
Channel binding implementation has been simplified.

: Fix the error handling in Aifc_read.initfp() when the SSND
chunk is not found. Patch by Zackery Spytz.

: Add Ttk spinbox widget to tkinter.ttk.  Patch by Alan D
Moore.

:  CLI accepts  module_name as an alternative
to script path.

: help() on a type now displays builtin subclasses. This is
intended primarily to help with notification of more specific exception
subclasses.

Patch by Sanyam Khurana.

: http.server now exposes a ThreadingHTTPServer class and uses it
when the module is run with  to cope with web browsers pre-opening
sockets.

================================================================================

# Changelog - Library (Part 51)

: compileall: import ProcessPoolExecutor only when needed,
preventing hangs on low resource platforms

: Various functions returning tuple containing IPv6 addresses now
omit  part since the same information is already encoded in
 tuple item. Especially this speeds up socket.recvfrom()
when it receives multicast packet since useless resolving of network
interface name is omitted.

: binascii.unhexlify() is now up to 2 times faster. Patch
by Sergey Fedoseev.

: The TarFile class now recurses directories in a reproducible
way.

: The ZipFile class now recurses directories in a reproducible
way.

: Added curses.ncurses_version.

: Fix output of cover files for  module command-line
tool. Previously emitted cover files only when  option was
used. Patch by Michael Selik.

: Raise a  instead of crashing if a
collections.deque subclass returns a non-deque from . Patch
by Oren Milman.

: Add support for sockets of the AF_QIPCRTR address family,
supported by the Linux kernel. This is used to communicate with services,
such as GPS or radio, running on Qualcomm devices. Patch by Bjorn
Andersson.

================================================================================

# Changelog - Library (Part 52)

: Implemented unpickling instances of
,  and
 pickled by Python 2. encoding='latin1' should
be used for successful decoding.

: sqlite3.Connection now exposes a
 method, if the underlying SQLite
library is at version 3.6.11 or higher.  Patch by Lele Gaifax.

: Support arrays >=2GiB in .  Patch by Segev Finer.

: Removed support of arguments in
tkinter.ttk.Treeview.selection. It was deprecated in 3.6.  Use
specialized methods like selection_set for changing the selection.

: Fix bugs in hangul normalization: u1176, u11a7 and u11c3

================================================================================

# Changelog - Documentation (Part 1)

List:
: Document http.client.parse_headers().
: Improve example of iter() with 2nd sentinel argument.
: Explicitly set master_doc variable in conf.py for compliance
with Sphinx 2.0
: Specified that profile.Profile class doesnât not support enable
or disable methods. Also, elaborated that Profile object as a context
manager is only supported in cProfile module.
: Enhance the gettext docs. Patch by Ãric Araujo
: Remove mention of  and . Their types
should be imported from  directly.
: Fix the documentation about an unexisting f_restricted
attribute in the frame object. Patch by StÃ©phane Wirtel
: Replace PEP XYZ by the pep role and allow to use the direct
links to the PEPs.
: Fix the documentation with the role  for the
appropriated exception. Patch by StÃ©phane Wirtel
: Rename documentation for email.utils to
email.utils.rst.
: Use app.add_object_type() instead of the deprecated Sphinx
function app.description_unit()
: Add documentation about the new command line interface of the
gzip module.
: chm document displays non-ASCII characters properly on some
MBCS Windows systems.
: Create availability directive for documentation.  Original
patch by Georg Brandl.
: Document how passing coroutines to asyncio.wait() can be
confusing.
: Make clear that  operator sometimes is equivalent to
. The , ,  and  operators are only defined
where they make sense.
: Fixed info in the stdtypes docs concerning the types that
support membership tests.
: Migrate datetime.date.fromtimestamp to Argument Clinic. Patch
by Tim Hoffmann.
: Fix wrongly written basicConfig documentation markup syntax
: replaced ellipsis with correct error codes in tutorial chapter
3.
: Add â@â operator entry to index.
: Clarified the relationship between âs
PYTHONCOERCECLOCALE and PEP 540âs PYTHONUTF8 mode.
: Add versionadded tag to the documentation of
ParameterKind.description
: Improve the C-API doc for PyTypeObject.  This includes adding
several quick-reference tables and a lot of missing slot/typedef entries.
The existing entries were also cleaned up with a slightly more consistent
format.
: Improve the documentation of asyncio.open_connection(),
asyncio.start_server() and their UNIX socket counterparts.
: Document that asyncio.wait() does not cancel its futures on
timeout.
: Document  changes to asyncio.
: Update HMAC md5 default to a DeprecationWarning, bump removal
to 3.8.
: Document getargspec, from_function and from_builtin
as deprecated in their respective docstring, and include version since
deprecation in DeprecationWarning message.
: Fix broken pypi link
: Add missing documentation for typing.AsyncContextManager.
: BZ2file now emit a DeprecationWarning when buffering=None is
passed, the deprecation message and documentation also now explicitly
state it is deprecated since 3.0.
: Add Korean language switcher for https://docs.python.org/3/
: Clarify that the  attribute on modules cannot be
just any value.
: Modernize documentation for writing C extension types.
: Deprecate Py_UNICODE usage in  document.
Py_UNICODE related APIs are deprecated since Python 3.3, but it is
missed in the document.
: Document PyBuffer_ToContiguous().
: Modify documentation for the  recipe to consume
initial values up to the start index.
: Update  documentation to describe how to make
standalone applications.
: Documentation changes for ipaddress.  Patch by Jon Foster and
Berker Peksag.
: Update documentation to clarify that WindowsRegistryFinder
implements MetaPathFinder. (Patch by Himanshu Lakhara)
: The ssl module function ssl.wrap_socket() has been
de-emphasized and deprecated in favor of the more secure and efficient
SSLContext.wrap_socket() method.
: Clarify docs for -O and -OO.  Patch by Terry Reedy.
: Add documentation for the contextvars module (PEP 567).
: Update link to w3c doc for xml default namespaces.
: Update test.support documentation.
: Update the faq/windows.html to use the py command from PEP 397
instead of python.
: Document __getattr__() behavior when property 
method raises AttributeError.
: Modify RE examples in documentation to use raw strings to
prevent DeprecationWarning and add text to REGEX HOWTO to highlight
the deprecation.
: Remove the paragraph where we explain that os.utime() does not
support a directory as path under Windows. Patch by Jan-Philip Gehrcke
: Remove the bad example in the tutorial of the Generator
Expression. Patch by StÃ©phane Wirtel
: Improve docstrings for pathlib.PurePath subclasses.
: Use the externalized python-docs-theme package when
building the documentation.
: Add a note about curses.addch and curses.addstr exception
behavior when writing outside a window, or pad.
: Update documentation related with  order.
: Document  in the  module.
: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
flags for ssl.SSLContext.verify_mode.

================================================================================

# Changelog - Documentation (Part 2)

: Document http.client.parse_headers().

: Improve example of iter() with 2nd sentinel argument.

: Explicitly set master_doc variable in conf.py for compliance
with Sphinx 2.0

: Specified that profile.Profile class doesnât not support enable
or disable methods. Also, elaborated that Profile object as a context
manager is only supported in cProfile module.

: Enhance the gettext docs. Patch by Ãric Araujo

: Remove mention of  and . Their types
should be imported from  directly.

: Fix the documentation about an unexisting f_restricted
attribute in the frame object. Patch by StÃ©phane Wirtel

: Replace PEP XYZ by the pep role and allow to use the direct
links to the PEPs.

: Fix the documentation with the role  for the
appropriated exception. Patch by StÃ©phane Wirtel

: Rename documentation for email.utils to
email.utils.rst.

: Use app.add_object_type() instead of the deprecated Sphinx
function app.description_unit()

: Add documentation about the new command line interface of the
gzip module.

: chm document displays non-ASCII characters properly on some
MBCS Windows systems.

: Create availability directive for documentation.  Original
patch by Georg Brandl.

================================================================================

# Changelog - Documentation (Part 3)

: Document how passing coroutines to asyncio.wait() can be
confusing.

: Make clear that  operator sometimes is equivalent to
. The , ,  and  operators are only defined
where they make sense.

: Fixed info in the stdtypes docs concerning the types that
support membership tests.

: Migrate datetime.date.fromtimestamp to Argument Clinic. Patch
by Tim Hoffmann.

: Fix wrongly written basicConfig documentation markup syntax

: replaced ellipsis with correct error codes in tutorial chapter
3.

: Add â@â operator entry to index.

: Clarified the relationship between âs
PYTHONCOERCECLOCALE and PEP 540âs PYTHONUTF8 mode.

: Add versionadded tag to the documentation of
ParameterKind.description

: Improve the C-API doc for PyTypeObject.  This includes adding
several quick-reference tables and a lot of missing slot/typedef entries.
The existing entries were also cleaned up with a slightly more consistent
format.

: Improve the documentation of asyncio.open_connection(),
asyncio.start_server() and their UNIX socket counterparts.

: Document that asyncio.wait() does not cancel its futures on
timeout.

: Document  changes to asyncio.

: Update HMAC md5 default to a DeprecationWarning, bump removal
to 3.8.

================================================================================

# Changelog - Documentation (Part 4)

: Document getargspec, from_function and from_builtin
as deprecated in their respective docstring, and include version since
deprecation in DeprecationWarning message.

: Fix broken pypi link

: Add missing documentation for typing.AsyncContextManager.

: BZ2file now emit a DeprecationWarning when buffering=None is
passed, the deprecation message and documentation also now explicitly
state it is deprecated since 3.0.

: Add Korean language switcher for https://docs.python.org/3/

: Clarify that the  attribute on modules cannot be
just any value.

: Modernize documentation for writing C extension types.

: Deprecate Py_UNICODE usage in  document.
Py_UNICODE related APIs are deprecated since Python 3.3, but it is
missed in the document.

: Document PyBuffer_ToContiguous().

: Modify documentation for the  recipe to consume
initial values up to the start index.

: Update  documentation to describe how to make
standalone applications.

: Documentation changes for ipaddress.  Patch by Jon Foster and
Berker Peksag.

: Update documentation to clarify that WindowsRegistryFinder
implements MetaPathFinder. (Patch by Himanshu Lakhara)

================================================================================

# Changelog - Documentation (Part 5)

: The ssl module function ssl.wrap_socket() has been
de-emphasized and deprecated in favor of the more secure and efficient
SSLContext.wrap_socket() method.

: Clarify docs for -O and -OO.  Patch by Terry Reedy.

: Add documentation for the contextvars module (PEP 567).

: Update link to w3c doc for xml default namespaces.

: Update test.support documentation.

: Update the faq/windows.html to use the py command from PEP 397
instead of python.

: Document __getattr__() behavior when property 
method raises AttributeError.

: Modify RE examples in documentation to use raw strings to
prevent DeprecationWarning and add text to REGEX HOWTO to highlight
the deprecation.

: Remove the paragraph where we explain that os.utime() does not
support a directory as path under Windows. Patch by Jan-Philip Gehrcke

: Remove the bad example in the tutorial of the Generator
Expression. Patch by StÃ©phane Wirtel

: Improve docstrings for pathlib.PurePath subclasses.

: Use the externalized python-docs-theme package when
building the documentation.

: Add a note about curses.addch and curses.addstr exception
behavior when writing outside a window, or pad.

: Update documentation related with  order.

: Document  in the  module.

================================================================================

# Changelog - Documentation (Part 6)

: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
flags for ssl.SSLContext.verify_mode.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix sparse file tests of test_tarfile on ppc64 with the tmpfs
filesystem. Fix the function testing if the filesystem supports sparse
files: create a file which contains data and âholesâ, instead of creating
a file which contains no data. tmpfs effective block size is a page size
(tmpfs lives in the page cache). RHEL uses 64 KiB pages on aarch64, ppc64,
ppc64le, only s390x and x86_64 use 4 KiB pages, whereas the test punch
holes of 4 KiB.
: Make ssl tests less strict and also accept TLSv1 as system
default. The changes unbreaks test_min_max_version on Fedora 29.
: test_asyncio/test_sendfile.py now resets the event loop
policy using tearDownModule() as done in other tests, to prevent a
warning when running tests on Windows.
: test.pythoninfo now logs information of all clocks, not only
time.time() and time.perf_counter().
: Add a test to pathlibâs Path.match() to verify it does not
support glob-style ** recursive pattern matching.
: Fix a race condition in check_interrupted_write() of
test_io: create directly the thread with SIGALRM signal blocked, rather
than blocking the signal later from the thread. Previously, it was
possible that the thread gets the signal before the signal is blocked.
: Fix test_multiprocessing_main_handling: use
multiprocessing.Pool with a context manager and then explicitly
join the pool.
: Rename test.bisect module to test.bisect_cmd to
avoid conflict with  module when running directly a test like
 Lib/test/test_xmlrpc.py.
: Replace time.time() with time.monotonic() in tests
to measure time delta.
: test.support.run_unittest() no longer raise
TestDidNotRun if the test result contains skipped tests. The
exception is now only raised if no test have been run and no test have
been skipped.
: Add testcase to test_future4: check unicode literal.
: Added test demonstrating double-patching of an instance method.
Patch by Anthony Sottile.
: test_multiprocessing_fork may crash on recent versions of
macOS.  Until the issue is resolved, skip the test on macOS.
: Modify test_asyncio to use the certificate set from the test
directory.
: Fix  overflow error in test_email: run
test_localtime_daylight_true_dst_true() and
test_localtime_daylight_false_dst_true() with a specific timezone.
: After several reports that test_gdb does not work properly on
macOS and since gdb is not shipped by default anymore, test_gdb is now
skipped on macOS when LLVM Clang has been used to compile Python. Patch by
Lysandros Nikolaou
: regrtest issue a warning when no tests have been executed in a
particular test file. Also, a new final result state is issued if no test
have been executed across all test files. Patch by Pablo Galindo.
: make docstest in Doc now passes., and is enforced in CI
: Use argparse for the command line of the gzip module. Patch by
Antony Lee
: Fix test_gdb.test_strings() when  and GDB was
compiled with Python 3.6 or earlier.
: test_socket: Remove RDSTest.testCongestion(). The test tries to
fill the receiverâs socket buffer and expects an error. But the RDS
protocol doesnât require that. Moreover, the Linux implementation of RDS
expects that the producer of the messages reduces its rate, itâs not the
role of the receiver to trigger an error. The test fails on Fedora 28 by
design, so just remove it.
: Fix test_shutil if unzip doesnât support -t.
: Fixed non-deterministic flakiness of test_pkg by not using the
scary test.support.module_cleanup() logic to save and restore sys.modules
contents between test cases.
: The experimental PEP 554 data channels now correctly pass
negative PyLong objects between subinterpreters on 32-bit systems. Patch
by Michael Felt.
: Fix usage of hardcoded  values in the tests.
: Fix test_embed for AIX Patch by Michael Felt
: Use 3072 RSA keys and SHA-256 signature for test certs and
keys.
: Remove special condition for AIX in
test_subprocess.test_undecodable_env
: Fix test_utf8_mode.test_cmd_line for AIX
: On AIX with AF_UNIX family sockets getsockname() does not
provide âsocknameâ, so skip calls to transport.get_extra_info(âsocknameâ)
: Fix ftplib test for TLS 1.3 by reading from data socket.
: Fix test_socket on AIX 6.1 and later IPv6 zone id supports
only supported by inet_pton6_zone(). Switch to runtime-based
platform.system() to establish current platform rather than build-time
based sys.platform()
: Update all RSA keys and DH params to use at least 2048 bits.
: Fix test_mktime and test_pthread_getcpuclickid tests
for AIX Add range checking for _PyTime_localtime for AIX Patch by
Michael Felt
: Skip the distutils test âtest_search_cppâ when using XLC as
compiler patch by aixtools (Michael Felt)
Improved an error message when mock assert_has_calls fails.
: Fix test_unittest when run in verbose mode.
: Fix test_dbm_gnu on macOS with gdbm 1.15: add a larger value to
make sure that the file size changes.
: Fix a bug in  that caused an extra test to run if
âhuntrleaks/-R was used. Exit with error in case that invalid parameters
are specified to âhuntrleaks/-R (at least one warmup run and one
repetition must be used).
: Check that a global asyncio event loop policy is not left
behind by any tests.
: Ignore test_posix_fallocate failures on BSD platforms that
might be due to running on ZFS.
: Fixed test_gdb when Python is compiled with flags -mcet
-fcf-protection -O0.
: Fix test_embed.test_pre_initialization_sys_options() when
the interpreter is built with --enable-shared.
: Avoid regrtest compatibility issue with namespace packages.
: Fix failing test_asyncio on macOS 10.12.2+ due to transport
of KqueueSelector loop was not being closed.
: Making sure the SMTPUTF8SimTests class of tests gets run in
test_smtplib.py.
: Test_C test case needs âsigned shortâ bitfields, but the IBM
XLC compiler (on AIX) does not support this Skip the code and test when
AIX and XLC are used
Applicable to Python2-2.7 and later

================================================================================

# Changelog - Tests (Part 2)

: Add test_bdb.py.
: Add tests to verify connection with secp ECDH curves.

: Fix sparse file tests of test_tarfile on ppc64 with the tmpfs
filesystem. Fix the function testing if the filesystem supports sparse
files: create a file which contains data and âholesâ, instead of creating
a file which contains no data. tmpfs effective block size is a page size
(tmpfs lives in the page cache). RHEL uses 64 KiB pages on aarch64, ppc64,
ppc64le, only s390x and x86_64 use 4 KiB pages, whereas the test punch
holes of 4 KiB.

: Make ssl tests less strict and also accept TLSv1 as system
default. The changes unbreaks test_min_max_version on Fedora 29.

: test_asyncio/test_sendfile.py now resets the event loop
policy using tearDownModule() as done in other tests, to prevent a
warning when running tests on Windows.

: test.pythoninfo now logs information of all clocks, not only
time.time() and time.perf_counter().

: Add a test to pathlibâs Path.match() to verify it does not
support glob-style ** recursive pattern matching.

================================================================================

# Changelog - Tests (Part 3)

: Fix a race condition in check_interrupted_write() of
test_io: create directly the thread with SIGALRM signal blocked, rather
than blocking the signal later from the thread. Previously, it was
possible that the thread gets the signal before the signal is blocked.

: Fix test_multiprocessing_main_handling: use
multiprocessing.Pool with a context manager and then explicitly
join the pool.

: Rename test.bisect module to test.bisect_cmd to
avoid conflict with  module when running directly a test like
 Lib/test/test_xmlrpc.py.

: Replace time.time() with time.monotonic() in tests
to measure time delta.

: test.support.run_unittest() no longer raise
TestDidNotRun if the test result contains skipped tests. The
exception is now only raised if no test have been run and no test have
been skipped.

: Add testcase to test_future4: check unicode literal.

: Added test demonstrating double-patching of an instance method.
Patch by Anthony Sottile.

: test_multiprocessing_fork may crash on recent versions of
macOS.  Until the issue is resolved, skip the test on macOS.

: Modify test_asyncio to use the certificate set from the test
directory.

================================================================================

# Changelog - Tests (Part 4)

: Fix  overflow error in test_email: run
test_localtime_daylight_true_dst_true() and
test_localtime_daylight_false_dst_true() with a specific timezone.

: After several reports that test_gdb does not work properly on
macOS and since gdb is not shipped by default anymore, test_gdb is now
skipped on macOS when LLVM Clang has been used to compile Python. Patch by
Lysandros Nikolaou

: regrtest issue a warning when no tests have been executed in a
particular test file. Also, a new final result state is issued if no test
have been executed across all test files. Patch by Pablo Galindo.

: make docstest in Doc now passes., and is enforced in CI

: Use argparse for the command line of the gzip module. Patch by
Antony Lee

: Fix test_gdb.test_strings() when  and GDB was
compiled with Python 3.6 or earlier.

: test_socket: Remove RDSTest.testCongestion(). The test tries to
fill the receiverâs socket buffer and expects an error. But the RDS
protocol doesnât require that. Moreover, the Linux implementation of RDS
expects that the producer of the messages reduces its rate, itâs not the
role of the receiver to trigger an error. The test fails on Fedora 28 by
design, so just remove it.

================================================================================

# Changelog - Tests (Part 5)

: Fix test_shutil if unzip doesnât support -t.

: Fixed non-deterministic flakiness of test_pkg by not using the
scary test.support.module_cleanup() logic to save and restore sys.modules
contents between test cases.

: The experimental PEP 554 data channels now correctly pass
negative PyLong objects between subinterpreters on 32-bit systems. Patch
by Michael Felt.

: Fix usage of hardcoded  values in the tests.

: Fix test_embed for AIX Patch by Michael Felt

: Use 3072 RSA keys and SHA-256 signature for test certs and
keys.

: Remove special condition for AIX in
test_subprocess.test_undecodable_env

: Fix test_utf8_mode.test_cmd_line for AIX

: On AIX with AF_UNIX family sockets getsockname() does not
provide âsocknameâ, so skip calls to transport.get_extra_info(âsocknameâ)

: Fix ftplib test for TLS 1.3 by reading from data socket.

: Fix test_socket on AIX 6.1 and later IPv6 zone id supports
only supported by inet_pton6_zone(). Switch to runtime-based
platform.system() to establish current platform rather than build-time
based sys.platform()

: Update all RSA keys and DH params to use at least 2048 bits.

================================================================================

# Changelog - Tests (Part 6)

: Fix test_mktime and test_pthread_getcpuclickid tests
for AIX Add range checking for _PyTime_localtime for AIX Patch by
Michael Felt

: Skip the distutils test âtest_search_cppâ when using XLC as
compiler patch by aixtools (Michael Felt)

Improved an error message when mock assert_has_calls fails.

: Fix test_unittest when run in verbose mode.

: Fix test_dbm_gnu on macOS with gdbm 1.15: add a larger value to
make sure that the file size changes.

: Fix a bug in  that caused an extra test to run if
âhuntrleaks/-R was used. Exit with error in case that invalid parameters
are specified to âhuntrleaks/-R (at least one warmup run and one
repetition must be used).

: Check that a global asyncio event loop policy is not left
behind by any tests.

: Ignore test_posix_fallocate failures on BSD platforms that
might be due to running on ZFS.

: Fixed test_gdb when Python is compiled with flags -mcet
-fcf-protection -O0.

: Fix test_embed.test_pre_initialization_sys_options() when
the interpreter is built with --enable-shared.

: Avoid regrtest compatibility issue with namespace packages.

: Fix failing test_asyncio on macOS 10.12.2+ due to transport
of KqueueSelector loop was not being closed.

================================================================================

# Changelog - Tests (Part 7)

: Making sure the SMTPUTF8SimTests class of tests gets run in
test_smtplib.py.

: Test_C test case needs âsigned shortâ bitfields, but the IBM
XLC compiler (on AIX) does not support this Skip the code and test when
AIX and XLC are used

Applicable to Python2-2.7 and later

: Add tests to verify connection with secp ECDH curves.

================================================================================

# Changelog - Build (Part 1)

List:
: The _contextvars module is now built into the core Python
library on Windows.
: Improved Azure Pipelines build steps and now verifying layouts
correctly
: Remove asynciomodule.c from pythoncore.vcxproj
: Fix incorrect Solaris #ifdef checks to look for __sun && __SVR4
instead of sun when compiling.
:  profile-opt no longer replaces CFLAGS_NODIST with
. It now adds profile-guided optimization (PGO) flags to
CFLAGS_NODIST: existing CFLAGS_NODIST flags are kept.
: Avoid leaking the linker flags from Link Time Optimizations
(LTO) into distutils when compiling C extensions.
: When building Python with clang and LTO, LTO flags are no
longer passed into CFLAGS to build third-party C extensions through
distutils.
: Fix a compiler error when statically linking  in
Modules/Setup.
: PCbuild: Set InlineFunctionExpansion to OnlyExplicitInline
(â/Ob1â option) in pyproject.props in Debug mode to expand functions
marked as inline. This change should make Python compiled in Debug mode a
little bit faster on Windows.
: Restores the use of pyexpatns.h to isolate our embedded copy of
the expat C library so that its symbols do not conflict at link or dynamic
loading time with an embedding application or other extension modules with
their own version of libexpat.
: Have âwith-lto works correctly with clang.
: Update the outdated install-sh file to the latest revision from
automake v1.16.1
: Check for floating-point byte order in configure.ac using
compilation tests instead of executing code, so that these checks work in
cross-compiled builds.
: Fixed SSL module build with OpenSSL & pedantic CFLAGS.
: Add JUnit XML output for regression tests and update Azure
DevOps builds.
: Make Sphinx warnings as errors in the Docs Makefile.
: Fix for case where it was not possible to have both
HAVE_LINUX_VM_SOCKETS_H and HAVE_SOCKADDR_ALG be undefined.
: Fix an undefined behaviour in the pthread implementation of
PyThread_start_new_thread(): add a function wrapper to always
return .
: The Python shared library is now installed with write
permission (mode 0755), which is the standard way of installing such
libraries.
: Fix detection of C11 atomic support on clang.
: Rename Modules/Setup.dist to Modules/Setup, and remove the
necessity to copy the former manually to the latter when updating the
local source tree.
: Add -g to LDFLAGS when compiling with LTO to get debug symbols.
: Move -Wstrict-prototypes option to CFLAGS_NODIST from
. This option emitted annoying warnings when building extension
modules written in C++.
: Ensures module definition files for the stable ABI on Windows
are correctly regenerated.
: The âwith-c-locale-warning configuration flag has been
removed. It has had no effect for about a year.
: Enable CI builds on Visual Studio Team Services at
https://python.visualstudio.com/cpython
: configureâs check for âlong doubleâ has been simplified
: C compiler is now correctly detected from the standard
environment variables. âwithout-gcc and âwith-icc options have been
removed.
: Enable the verbose build for extension modules, when GNU make
is passed macros on the command line.
: Update config.guess and config.sub files.
: Add new triplets for mips r6 and riscv variants (used in
extension suffixes).
: By default, modules configured in Modules/Setup are no
longer built with -DPy_BUILD_CORE. Instead, modules that specifically
need that preprocessor definition include it in their individual entries.
: The embedding tests can once again be built with clang 6.0
: Upgrade pip to 9.0.3 and setuptools to v39.0.1.
: gcc 8 has added a new warning heuristic to detect invalid
function casts and a stock python build seems to hit that warning quite
often.  The most common is the cast of a METH_NOARGS function (that uses
just one argument) to a PyCFunction. Fix this by adding a dummy argument
to all functions that implement METH_NOARGS.
: Fix the python debug build when using COUNT_ALLOCS.
: Replace optparse with argparse in setup.py

================================================================================

# Changelog - Build (Part 2)

: The _contextvars module is now built into the core Python
library on Windows.

: Improved Azure Pipelines build steps and now verifying layouts
correctly

: Remove asynciomodule.c from pythoncore.vcxproj

: Fix incorrect Solaris #ifdef checks to look for __sun && __SVR4
instead of sun when compiling.

:  profile-opt no longer replaces CFLAGS_NODIST with
. It now adds profile-guided optimization (PGO) flags to
CFLAGS_NODIST: existing CFLAGS_NODIST flags are kept.

: Avoid leaking the linker flags from Link Time Optimizations
(LTO) into distutils when compiling C extensions.

: When building Python with clang and LTO, LTO flags are no
longer passed into CFLAGS to build third-party C extensions through
distutils.

: Fix a compiler error when statically linking  in
Modules/Setup.

: PCbuild: Set InlineFunctionExpansion to OnlyExplicitInline
(â/Ob1â option) in pyproject.props in Debug mode to expand functions
marked as inline. This change should make Python compiled in Debug mode a
little bit faster on Windows.

================================================================================

# Changelog - Build (Part 3)

: Restores the use of pyexpatns.h to isolate our embedded copy of
the expat C library so that its symbols do not conflict at link or dynamic
loading time with an embedding application or other extension modules with
their own version of libexpat.

: Have âwith-lto works correctly with clang.

: Update the outdated install-sh file to the latest revision from
automake v1.16.1

: Check for floating-point byte order in configure.ac using
compilation tests instead of executing code, so that these checks work in
cross-compiled builds.

: Fixed SSL module build with OpenSSL & pedantic CFLAGS.

: Add JUnit XML output for regression tests and update Azure
DevOps builds.

: Make Sphinx warnings as errors in the Docs Makefile.

: Fix for case where it was not possible to have both
HAVE_LINUX_VM_SOCKETS_H and HAVE_SOCKADDR_ALG be undefined.

: Fix an undefined behaviour in the pthread implementation of
PyThread_start_new_thread(): add a function wrapper to always
return .

: The Python shared library is now installed with write
permission (mode 0755), which is the standard way of installing such
libraries.

: Fix detection of C11 atomic support on clang.

================================================================================

# Changelog - Build (Part 4)

: Rename Modules/Setup.dist to Modules/Setup, and remove the
necessity to copy the former manually to the latter when updating the
local source tree.

: Add -g to LDFLAGS when compiling with LTO to get debug symbols.

: Move -Wstrict-prototypes option to CFLAGS_NODIST from
. This option emitted annoying warnings when building extension
modules written in C++.

: Ensures module definition files for the stable ABI on Windows
are correctly regenerated.

: The âwith-c-locale-warning configuration flag has been
removed. It has had no effect for about a year.

: Enable CI builds on Visual Studio Team Services at
https://python.visualstudio.com/cpython

: configureâs check for âlong doubleâ has been simplified

: C compiler is now correctly detected from the standard
environment variables. âwithout-gcc and âwith-icc options have been
removed.

: Enable the verbose build for extension modules, when GNU make
is passed macros on the command line.

: Update config.guess and config.sub files.

: Add new triplets for mips r6 and riscv variants (used in
extension suffixes).

================================================================================

# Changelog - Build (Part 5)

: By default, modules configured in Modules/Setup are no
longer built with -DPy_BUILD_CORE. Instead, modules that specifically
need that preprocessor definition include it in their individual entries.

: The embedding tests can once again be built with clang 6.0

: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

: gcc 8 has added a new warning heuristic to detect invalid
function casts and a stock python build seems to hit that warning quite
often.  The most common is the cast of a METH_NOARGS function (that uses
just one argument) to a PyCFunction. Fix this by adding a dummy argument
to all functions that implement METH_NOARGS.

: Fix the python debug build when using COUNT_ALLOCS.

: Replace optparse with argparse in setup.py

================================================================================

# Changelog - Windows (Part 1)

List:
: Fix API calling consistency of GetVersionEx and wcstok.
: The  launcher now forwards its STARTUPINFO structure
to child processes.
: Fix EnvBuilder and âsymlinks in venv on Windows
: Avoid propagating venv settings when launching via py.exe
: Fix default executable used by the multiprocessing module
: Allow building on ARM with MSVC.
: Fix handle leaks in os.stat on Windows.
: Use unchecked PYCs for the embeddable distro to avoid zipimport
restrictions.
: Fix vcruntime140.dll being added to embeddable distro multiple
times.
: Update Windows build to use Tcl and Tk 8.6.9
: Updates Windows build to OpenSSL 1.1.0j
: venv on Windows will now use a python.exe redirector rather
than copying the actual binaries from the base environment.
: Adds support for building a Windows App Store package
: Remove _distutils_findvs module and use vswhere.exe instead.
: Allow shutil.disk_usage to take a file path on Windows
: Fix a possible null pointer dereference in pyshellext.cpp.
: Fix returning structs from functions produced by MSVC
: Guard MSVC-specific code in socketmodule.c with 
.
: Fixes exit code of list version arguments for py.exe.
: Fixed the ââlistâ and ââlist-pathsâ arguments for the py.exe
launcher
: Ensure INCLUDE and LIB directories do not end with a backslash.
: A suite of code has been changed which copied across DLLs and
init.tcl from the running Python location into a venv being created. These
copies are needed only when running from a Python source build, and the
copying code is now only run when that is the case, rather than whenever a
venv is created.
: Revert line length limit for Windows help docs. The line-length
limit is not needed because the pages appear in a separate app rather than
on a browser tab.  It can also interact badly with the DPI setting.
: Restore running PyOS_InputHook while waiting for user input at
the prompt. The restores integration of interactive GUI windows (such as
Matplotlib figures) with the prompt on Windows.
: Output error when ReadConsole is canceled by
CancelSynchronousIo instead of crashing.
: GIL is released while calling functions that acquire Windows
loader lock.
: Reduces maximum marshal recursion depth on release builds.
: Fix bug where datetime.fromtimestamp() erroneously throws
an  on Windows for values between 0 and 86400. Patch by
Ammar Askar.
: PyThread_release_lock always fails
: Update Windows installer to use OpenSSL 1.1.0h.
: Fix usage of GetLastError() instead of errno in os.execve() and
os.truncate().
: Fix potential use of uninitialized memory in
nt._getfinalpathname
: Fix a memory leak in os.chdir() on Windows if the current
directory is set to a UNC path.
: Update Tcl and Tk versions to 8.6.8
: Fixed WindowsConsoleIO.write() for writing empty data.
: Ensures activate.bat can handle Unicode contents.
: Improves handling of denormalized executable path when
launching Python.
: Use the correct encoding for ipconfig output in the uuid
module. Patch by Segev Finer.
: Fix os.readlink() on Windows, which was mistakenly
treating the PrintNameOffset field of the reparse data buffer as a
number of characters instead of bytes. Patch by Craig Holmquist and SSE4.
: Correctly handle string length in
msilib.SummaryInfo.GetProperty() to prevent it from truncating the
last character.

================================================================================

# Changelog - Windows (Part 2)

: Fix API calling consistency of GetVersionEx and wcstok.

: The  launcher now forwards its STARTUPINFO structure
to child processes.

: Fix EnvBuilder and âsymlinks in venv on Windows

: Avoid propagating venv settings when launching via py.exe

: Fix default executable used by the multiprocessing module

: Allow building on ARM with MSVC.

: Fix handle leaks in os.stat on Windows.

: Use unchecked PYCs for the embeddable distro to avoid zipimport
restrictions.

: Fix vcruntime140.dll being added to embeddable distro multiple
times.

: Update Windows build to use Tcl and Tk 8.6.9

: Updates Windows build to OpenSSL 1.1.0j

: venv on Windows will now use a python.exe redirector rather
than copying the actual binaries from the base environment.

: Adds support for building a Windows App Store package

: Remove _distutils_findvs module and use vswhere.exe instead.

: Allow shutil.disk_usage to take a file path on Windows

: Fix a possible null pointer dereference in pyshellext.cpp.

: Fix returning structs from functions produced by MSVC

: Guard MSVC-specific code in socketmodule.c with 
.

: Fixes exit code of list version arguments for py.exe.

================================================================================

# Changelog - Windows (Part 3)

: Fixed the ââlistâ and ââlist-pathsâ arguments for the py.exe
launcher

: Ensure INCLUDE and LIB directories do not end with a backslash.

: A suite of code has been changed which copied across DLLs and
init.tcl from the running Python location into a venv being created. These
copies are needed only when running from a Python source build, and the
copying code is now only run when that is the case, rather than whenever a
venv is created.

: Revert line length limit for Windows help docs. The line-length
limit is not needed because the pages appear in a separate app rather than
on a browser tab.  It can also interact badly with the DPI setting.

: Restore running PyOS_InputHook while waiting for user input at
the prompt. The restores integration of interactive GUI windows (such as
Matplotlib figures) with the prompt on Windows.

: Output error when ReadConsole is canceled by
CancelSynchronousIo instead of crashing.

: GIL is released while calling functions that acquire Windows
loader lock.

: Reduces maximum marshal recursion depth on release builds.

: Fix bug where datetime.fromtimestamp() erroneously throws
an  on Windows for values between 0 and 86400. Patch by
Ammar Askar.

================================================================================

# Changelog - Windows (Part 4)

: PyThread_release_lock always fails

: Update Windows installer to use OpenSSL 1.1.0h.

: Fix usage of GetLastError() instead of errno in os.execve() and
os.truncate().

: Fix potential use of uninitialized memory in
nt._getfinalpathname

: Fix a memory leak in os.chdir() on Windows if the current
directory is set to a UNC path.

: Update Tcl and Tk versions to 8.6.8

: Fixed WindowsConsoleIO.write() for writing empty data.

: Ensures activate.bat can handle Unicode contents.

: Improves handling of denormalized executable path when
launching Python.

: Use the correct encoding for ipconfig output in the uuid
module. Patch by Segev Finer.

: Fix os.readlink() on Windows, which was mistakenly
treating the PrintNameOffset field of the reparse data buffer as a
number of characters instead of bytes. Patch by Craig Holmquist and SSE4.

: Correctly handle string length in
msilib.SummaryInfo.GetProperty() to prevent it from truncating the
last character.

================================================================================

# Changelog - macOS (Part 1)

List:
: Update macOS installer to use OpenSSL 1.1.0j.
: Properly guard the use of the CLOCK_GETTIME et al. macros
in timemodule on macOS.
: On macOS, fix reading from and writing into a file with a size
larger than 2 GiB.
: Update to OpenSSL 1.1.0i for macOS installer builds.
: In macOS stat on some file descriptors (/dev/fd/3 f.e) will
result in bad file descriptor OSError. Guard against this exception was
added in is_dir, is_file and similar methods. DirEntry.is_dir can also
throw this exception so _RecursiveWildcardSelector._iterate_directories
was also extended with the same error ignoring pattern.
: The .editrc file in userâs home directory is now processed
correctly during the readline initialization through editline emulation on
macOS.
: Update macOS installer build to use OpenSSL 1.1.0h.
: Build and link with private copy of Tcl/Tk 8.6 for the macOS
10.6+ installer. The 10.9+ installer variant already does this.  This
means that the Python 3.7 provided by the python.org macOS installers no
longer need or use any external versions of Tcl/Tk, either system-provided
or user-installed, such as ActiveTcl.
: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.
: In , drop the GIL when calling into
SystemConfiguration to avoid deadlocks.

================================================================================

# Changelog - macOS (Part 2)

: Update macOS installer to use OpenSSL 1.1.0j.

: Properly guard the use of the CLOCK_GETTIME et al. macros
in timemodule on macOS.

: On macOS, fix reading from and writing into a file with a size
larger than 2 GiB.

: Update to OpenSSL 1.1.0i for macOS installer builds.

: In macOS stat on some file descriptors (/dev/fd/3 f.e) will
result in bad file descriptor OSError. Guard against this exception was
added in is_dir, is_file and similar methods. DirEntry.is_dir can also
throw this exception so _RecursiveWildcardSelector._iterate_directories
was also extended with the same error ignoring pattern.

: The .editrc file in userâs home directory is now processed
correctly during the readline initialization through editline emulation on
macOS.

: Update macOS installer build to use OpenSSL 1.1.0h.

: Build and link with private copy of Tcl/Tk 8.6 for the macOS
10.6+ installer. The 10.9+ installer variant already does this.  This
means that the Python 3.7 provided by the python.org macOS installers no
longer need or use any external versions of Tcl/Tk, either system-provided
or user-installed, such as ActiveTcl.

: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.

================================================================================

# Changelog - macOS (Part 3)

: In , drop the GIL when calling into
SystemConfiguration to avoid deadlocks.

================================================================================

# Changelog - IDLE (Part 1)

List:
: IDLE macosx deletes Options => Configure IDLE. It previously
deleted Window => Zoom Height by mistake. (Zoom Height is now on the
Options menu).  On Mac, the settings dialog is accessed via Preferences on
the IDLE menu.
: Change IDLEâs new file name from âUntitledâ to âuntitledâ
: Fix imports in idlelib.window.
: Proper format  when the function has no docstring.
: Use ttk Frame for ttk widgets.
: Fix erroneous âsmartâ indents and newlines in IDLE Shell.
: Find Selection now works when selection not found.
: Speed up squeezer line counting.
: Update config_key: use PEP 8 names and ttk widgets, make some
objects global, and add tests.
: Add Previous/Next History entries to Shell menu.
: Squeezer now properly counts wrapped lines before newlines.
: Gray out Code Context menu entry when itâs not applicable.
: Document the IDLE editor code context feature. Add some
internal references within the IDLE doc.
: The Code Context menu label now toggles between Show/Hide Code
Context. The Zoom Height menu now toggles between Zoom/Restore Height.
Zoom Height has moved from the Window menu to the Options menu.
: Where appropriate, use âmacOSâ in idlelib.
: On macOS, warn if the system preference âPrefer tabs when
opening documentsâ is set to âAlwaysâ.
: Document two IDLE on MacOS issues. The System Preferences Dock
âprefer tabs alwaysâ setting disables some IDLE features.  Menus are a bit
different than as described for Windows and Linux.
: Remove unused imports from lib/idlelib
: Document that IDLEâs shell has no line limit. A program that
runs indefinitely can overfill memory.
: Explain how IDLEâs Shell displays output.
: Improve the doc about IDLE running user code.   The section is
renamed from âIDLE â console differencesâ is renamed âRunning user codeâ.
It mostly covers the implications of using custom 
objects.
: Add IDLE doc subsection explaining editor windows. Topics
include opening, title and status bar, .py* extension, and running.
: Document the IDLE document viewer in the IDLE doc. Add a
paragraph in âHelp and preferencesâ, âHelp sourcesâ subsection.
: Update idlelib.help.copy_string docstring. We now use git and
backporting instead of hg and forward merging.
: Update idlelib help files for the current doc build. The main
change is the elimination of chapter-section numbers.
: Use configured color theme for read-only text views.
bpo-1529353: Enable âsqueezingâ of long outputs in the shell, to avoid
performance degradation and to clean up the history without losing it.
Squeezed outputs may be copied, viewed in a separate window, and
âunsqueezedâ.
: Fixed mousewheel scrolling direction on macOS.
: Make IDLE calltips always visible on Mac. Some MacOS-tk
combinations need .update_idletasks(). Patch by Kevin Walzer.
: Fix unresponsiveness after closing certain windows and dialogs.
: Avoid small type when running htests. Since part of the purpose
of human-viewed tests is to determine that widgets look right, it is
important that they look the same for testing as when running IDLE.
: Add test for idlelib.stackview.StackBrowser.
: Change mainmenu.menudefs key âwindowsâ to âwindowâ. Every other
menudef key is lowercase version of main menu entry.
: Rename idlelib.windows as window Match Window on the main menu
and remove last plural module name.
: Fix and document idlelib/idle_test/template.py. The revised
file compiles, runs, and tests OK.  idle_test/README.txt explains how to
use it to create new IDLE test files.
: IDLE: In rstrip, rename class RstripExtension as Rstrip
: For consistency and clarity, rename an IDLE module and classes.
Module calltips and its class CallTips are now calltip and Calltip. In
module calltip_w, class CallTip is now CalltipWindow.
: Add âhelpâ in the welcome message of IDLE
: IDLE: refactor ToolTip and CallTip and add documentation and
tests
: Minimally test all IDLE modules. Add missing files, import
module, instantiate classes, and check coverage. Check existing files.
: On Windows, add API call saying that tk scales for DPI. On
Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
unchanged, and a monitor resolution greater than 96 DPI, this should make
text and lines sharper.  It should otherwise have no effect.
: Clicking on a context line moves that line to the top of the
editor window.
: IDLE: Use read-only text widget for code context instead of
label widget.
: Scroll IDLE editor text by lines. Previously, the mouse wheel
and scrollbar slider moved text by a fixed number of pixels, resulting in
partial lines at the top of the editor box.  The change also applies to
the shell and grep output windows, but not to read-only text views.
: Enable theme-specific color configuration for Code Context. Use
the Highlights tab to see the setting for built-in themes or add settings
to custom themes.
: Display up to maxlines non-blank lines for Code Context. If
there is no current context, show a single blank line.
: IDLE: Cleanup codecontext.py and its test.
: IDLEâs code context now recognizes async as a block opener.
: Update word/identifier definition from ascii to unicode. In
text and entry boxes, this affects selection by double-click, movement
left/right by control-left/right, and deletion left/right by
control-BACKSPACE/DEL.
: IDLE: consistently color invalid string prefixes. A âuâ string
prefix cannot be paired with either ârâ or âfâ. Consistently color as much
of the prefix, starting at the right, as is valid. Revise and extend
colorizer test.
: Set  while running a startup file.  Like Python,
IDLE optionally runs one startup file in the Shell window before
presenting the first interactive input prompt.  For IDLE,  runs a
file named in environmental variable  IDLESTARTUP or
PYTHONSTARTUP;   runs .  Python sets
 to the startup file name before running the file and unsets
it before the first prompt.  IDLE now does the same when run normally,
without the  option.
: Simplify and rename StringTranslatePseudoMapping in pyparse.
: Change  to  in pyparse.
: Remove unused code in pyparse module.
: Add tests for pyparse.
: Using the system and place-dependent default encoding for
open() is a bad idea for IDLEâs system and location-independent files.
: Add âencoding=utf-8â to open() in IDLEâs test_help_about. GUI
test test_file_buttons() only looks at initial ascii-only lines, but
failed on systems where open() defaults to âasciiâ because readline()
internally reads and decodes far enough ahead to encounter a non-ascii
character in CREDITS.txt.
: Add docstrings and tests for codecontext.
: Update configdialog General tab docstring to add new widgets to
the widget list.

================================================================================

# Changelog - IDLE (Part 2)

: IDLE macosx deletes Options => Configure IDLE. It previously
deleted Window => Zoom Height by mistake. (Zoom Height is now on the
Options menu).  On Mac, the settings dialog is accessed via Preferences on
the IDLE menu.

: Change IDLEâs new file name from âUntitledâ to âuntitledâ

: Fix imports in idlelib.window.

: Proper format  when the function has no docstring.

: Use ttk Frame for ttk widgets.

: Fix erroneous âsmartâ indents and newlines in IDLE Shell.

: Find Selection now works when selection not found.

: Speed up squeezer line counting.

: Update config_key: use PEP 8 names and ttk widgets, make some
objects global, and add tests.

: Add Previous/Next History entries to Shell menu.

: Squeezer now properly counts wrapped lines before newlines.

: Gray out Code Context menu entry when itâs not applicable.

: Document the IDLE editor code context feature. Add some
internal references within the IDLE doc.

: The Code Context menu label now toggles between Show/Hide Code
Context. The Zoom Height menu now toggles between Zoom/Restore Height.
Zoom Height has moved from the Window menu to the Options menu.

: Where appropriate, use âmacOSâ in idlelib.

================================================================================

# Changelog - IDLE (Part 3)

: On macOS, warn if the system preference âPrefer tabs when
opening documentsâ is set to âAlwaysâ.

: Document two IDLE on MacOS issues. The System Preferences Dock
âprefer tabs alwaysâ setting disables some IDLE features.  Menus are a bit
different than as described for Windows and Linux.

: Remove unused imports from lib/idlelib

: Document that IDLEâs shell has no line limit. A program that
runs indefinitely can overfill memory.

: Explain how IDLEâs Shell displays output.

: Improve the doc about IDLE running user code.   The section is
renamed from âIDLE â console differencesâ is renamed âRunning user codeâ.
It mostly covers the implications of using custom 
objects.

: Add IDLE doc subsection explaining editor windows. Topics
include opening, title and status bar, .py* extension, and running.

: Document the IDLE document viewer in the IDLE doc. Add a
paragraph in âHelp and preferencesâ, âHelp sourcesâ subsection.

: Update idlelib.help.copy_string docstring. We now use git and
backporting instead of hg and forward merging.

: Update idlelib help files for the current doc build. The main
change is the elimination of chapter-section numbers.

================================================================================

# Changelog - IDLE (Part 4)

: Use configured color theme for read-only text views.

bpo-1529353: Enable âsqueezingâ of long outputs in the shell, to avoid
performance degradation and to clean up the history without losing it.
Squeezed outputs may be copied, viewed in a separate window, and
âunsqueezedâ.

: Fixed mousewheel scrolling direction on macOS.

: Make IDLE calltips always visible on Mac. Some MacOS-tk
combinations need .update_idletasks(). Patch by Kevin Walzer.

: Fix unresponsiveness after closing certain windows and dialogs.

: Avoid small type when running htests. Since part of the purpose
of human-viewed tests is to determine that widgets look right, it is
important that they look the same for testing as when running IDLE.

: Add test for idlelib.stackview.StackBrowser.

: Change mainmenu.menudefs key âwindowsâ to âwindowâ. Every other
menudef key is lowercase version of main menu entry.

: Rename idlelib.windows as window Match Window on the main menu
and remove last plural module name.

: Fix and document idlelib/idle_test/template.py. The revised
file compiles, runs, and tests OK.  idle_test/README.txt explains how to
use it to create new IDLE test files.

================================================================================

# Changelog - IDLE (Part 5)

: IDLE: In rstrip, rename class RstripExtension as Rstrip

: For consistency and clarity, rename an IDLE module and classes.
Module calltips and its class CallTips are now calltip and Calltip. In
module calltip_w, class CallTip is now CalltipWindow.

: Add âhelpâ in the welcome message of IDLE

: IDLE: refactor ToolTip and CallTip and add documentation and
tests

: Minimally test all IDLE modules. Add missing files, import
module, instantiate classes, and check coverage. Check existing files.

: On Windows, add API call saying that tk scales for DPI. On
Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
unchanged, and a monitor resolution greater than 96 DPI, this should make
text and lines sharper.  It should otherwise have no effect.

: Clicking on a context line moves that line to the top of the
editor window.

: IDLE: Use read-only text widget for code context instead of
label widget.

: Scroll IDLE editor text by lines. Previously, the mouse wheel
and scrollbar slider moved text by a fixed number of pixels, resulting in
partial lines at the top of the editor box.  The change also applies to
the shell and grep output windows, but not to read-only text views.

================================================================================

# Changelog - IDLE (Part 6)

: Enable theme-specific color configuration for Code Context. Use
the Highlights tab to see the setting for built-in themes or add settings
to custom themes.

: Display up to maxlines non-blank lines for Code Context. If
there is no current context, show a single blank line.

: IDLE: Cleanup codecontext.py and its test.

: IDLEâs code context now recognizes async as a block opener.

: Update word/identifier definition from ascii to unicode. In
text and entry boxes, this affects selection by double-click, movement
left/right by control-left/right, and deletion left/right by
control-BACKSPACE/DEL.

: IDLE: consistently color invalid string prefixes. A âuâ string
prefix cannot be paired with either ârâ or âfâ. Consistently color as much
of the prefix, starting at the right, as is valid. Revise and extend
colorizer test.

================================================================================

# Changelog - IDLE (Part 7)

: Set  while running a startup file.  Like Python,
IDLE optionally runs one startup file in the Shell window before
presenting the first interactive input prompt.  For IDLE,  runs a
file named in environmental variable  IDLESTARTUP or
PYTHONSTARTUP;   runs .  Python sets
 to the startup file name before running the file and unsets
it before the first prompt.  IDLE now does the same when run normally,
without the  option.

: Simplify and rename StringTranslatePseudoMapping in pyparse.

: Change  to  in pyparse.

: Remove unused code in pyparse module.

: Add tests for pyparse.

: Using the system and place-dependent default encoding for
open() is a bad idea for IDLEâs system and location-independent files.

: Add âencoding=utf-8â to open() in IDLEâs test_help_about. GUI
test test_file_buttons() only looks at initial ascii-only lines, but
failed on systems where open() defaults to âasciiâ because readline()
internally reads and decodes far enough ahead to encounter a non-ascii
character in CREDITS.txt.

: Add docstrings and tests for codecontext.

: Update configdialog General tab docstring to add new widgets to
the widget list.

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: Add a benchmark script for timing various ways to access
variables: Tools/scripts/var_access_benchmark.py.
: python-gdb.py now handles errors on computing the line number
of a Python frame.
: Argument Clinic now has non-bitwise unsigned int converters.
: python-gdb now catches UnicodeDecodeError exceptions when
calling .
: python-gdb now catches ValueError on read_var(): when Python
has no debug symbols for example.
: pygettext.py now recognizes only literal strings as
docstrings and translatable strings, and rejects bytes literals and
f-string expressions.
: Fixed handling directories as arguments in the 
script. Based on patch by Oleg Krasnikov.
: Fix pystackv and pystack gdbinit macros.
: Remove the pyvenv script in favor of    in
order to lower confusion as to what Python interpreter a virtual
environment will be created for.
: Add an  flag for Tools/scripts/pathfix.py to disable
automatic backup creation (files with  suffix).
: Fix pygettext not extracting docstrings for functions with type
annotated arguments. Patch by Toby Harradine.
: Fix 2to3 for using with âadd-suffix option but without
âoutput-dir option for relative path to files in current directory.

================================================================================

# Changelog - Tools/Demos (Part 2)

: Add a benchmark script for timing various ways to access
variables: Tools/scripts/var_access_benchmark.py.

: python-gdb.py now handles errors on computing the line number
of a Python frame.

: Argument Clinic now has non-bitwise unsigned int converters.

: python-gdb now catches UnicodeDecodeError exceptions when
calling .

: python-gdb now catches ValueError on read_var(): when Python
has no debug symbols for example.

: pygettext.py now recognizes only literal strings as
docstrings and translatable strings, and rejects bytes literals and
f-string expressions.

: Fixed handling directories as arguments in the 
script. Based on patch by Oleg Krasnikov.

: Fix pystackv and pystack gdbinit macros.

: Remove the pyvenv script in favor of    in
order to lower confusion as to what Python interpreter a virtual
environment will be created for.

: Add an  flag for Tools/scripts/pathfix.py to disable
automatic backup creation (files with  suffix).

: Fix pygettext not extracting docstrings for functions with type
annotated arguments. Patch by Toby Harradine.

: Fix 2to3 for using with âadd-suffix option but without
âoutput-dir option for relative path to files in current directory.

================================================================================

# Changelog - C API (Part 1)

List:
: The PyByteArray_Init() and PyByteArray_Fini()
functions have been removed. They did nothing since Python 2.7.4 and
Python 3.2.0, were excluded from the limited API (stable ABI), and were
not documented.
: Fixed _PyBytes_Resize() for empty bytes objects.
: Fix memory leak in PyUnicode_EncodeLocale() and
PyUnicode_EncodeFSDefault() on error handling.
: The following C macros have been converted to static inline
functions: Py_INCREF(), Py_DECREF(), Py_XINCREF(),
Py_XDECREF(), PyObject_INIT(),
PyObject_INIT_VAR().
:   now also installs the internal API:
Include/internal/*.h header files.
: Internal APIs surrounded by  Py_BUILD_CORE have been
moved from Include/*.h headers to new header files
Include/internal/pycore_*.h.
: Conditionally declare Py_FinalizeEx() (new in 3.6)
based on Py_LIMITED_API. Patch by Arthur Neufeld.
: The _PyObject_GC_TRACK() and
_PyObject_GC_UNTRACK() macros have been removed from the public C
API.
: Creation of a new Include/cpython/ subdirectory.
: Adds _Py_SetProgramFullPath so embedders may override
sys.executable
: Ensure that PyObject_Print() always returns  on
error.  Patch by Zackery Spytz.
: Py_DecodeLocale() and Py_EncodeLocale() now use the UTF-8
encoding on Windows if Py_LegacyWindowsFSEncodingFlag is zero.
: Fix pluralization in TypeError messages in getargs.c and
typeobject.c: â1 argumentâ instead of â1 argumentsâ and â1 elementâ
instead of â1 elementsâ.
: Return grammatically correct error message based on argument
count. Patch by Karthikeyan Singaravelan.
: Fixed SystemError in
PyArg_ParseTupleAndKeywords() when the  format unit is used
for optional parameter.
: Added PyCompile_OpcodeStackEffectWithJump().
: Py_Main() can again be called after Py_Initialize(), as in
Python 3.6.
: Fixed error messages for PySequence_Size(),
PySequence_GetItem(), PySequence_SetItem() and
PySequence_DelItem() called with a mapping and
PyMapping_Size() called with a sequence.
: PyExceptionClass_Name() will now return  
 instead of  .
: Embedding applications may once again call
PySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to
calling Py_Initialize.
: Document that m_traverse for multi-phase initialized modules
can be called with m_state=NULL, and add a sanity check
: PyUnicode_AsWideChar() and
PyUnicode_AsWideCharString() no longer cache the 
representation of string objects.

================================================================================

# Changelog - C API (Part 2)

: The PyByteArray_Init() and PyByteArray_Fini()
functions have been removed. They did nothing since Python 2.7.4 and
Python 3.2.0, were excluded from the limited API (stable ABI), and were
not documented.

: Fixed _PyBytes_Resize() for empty bytes objects.

: Fix memory leak in PyUnicode_EncodeLocale() and
PyUnicode_EncodeFSDefault() on error handling.

: The following C macros have been converted to static inline
functions: Py_INCREF(), Py_DECREF(), Py_XINCREF(),
Py_XDECREF(), PyObject_INIT(),
PyObject_INIT_VAR().

:   now also installs the internal API:
Include/internal/*.h header files.

: Internal APIs surrounded by  Py_BUILD_CORE have been
moved from Include/*.h headers to new header files
Include/internal/pycore_*.h.

: Conditionally declare Py_FinalizeEx() (new in 3.6)
based on Py_LIMITED_API. Patch by Arthur Neufeld.

: The _PyObject_GC_TRACK() and
_PyObject_GC_UNTRACK() macros have been removed from the public C
API.

: Creation of a new Include/cpython/ subdirectory.

: Adds _Py_SetProgramFullPath so embedders may override
sys.executable

: Ensure that PyObject_Print() always returns  on
error.  Patch by Zackery Spytz.

================================================================================

# Changelog - C API (Part 3)

: Py_DecodeLocale() and Py_EncodeLocale() now use the UTF-8
encoding on Windows if Py_LegacyWindowsFSEncodingFlag is zero.

: Fix pluralization in TypeError messages in getargs.c and
typeobject.c: â1 argumentâ instead of â1 argumentsâ and â1 elementâ
instead of â1 elementsâ.

: Return grammatically correct error message based on argument
count. Patch by Karthikeyan Singaravelan.

: Fixed SystemError in
PyArg_ParseTupleAndKeywords() when the  format unit is used
for optional parameter.

: Added PyCompile_OpcodeStackEffectWithJump().

: Py_Main() can again be called after Py_Initialize(), as in
Python 3.6.

: Fixed error messages for PySequence_Size(),
PySequence_GetItem(), PySequence_SetItem() and
PySequence_DelItem() called with a mapping and
PyMapping_Size() called with a sequence.

: PyExceptionClass_Name() will now return  
 instead of  .

: Embedding applications may once again call
PySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to
calling Py_Initialize.

: Document that m_traverse for multi-phase initialized modules
can be called with m_state=NULL, and add a sanity check

================================================================================

# Changelog - C API (Part 4)

: PyUnicode_AsWideChar() and
PyUnicode_AsWideCharString() no longer cache the 
representation of string objects.

================================================================================

# Changelog - Library

List:
: Fix ast.get_docstring() for a node that lacks a
docstring.

: Fix ast.get_docstring() for a node that lacks a
docstring.

================================================================================

# Changelog - C API

List:
: Calling Py_Initialize() twice does nothing, instead of failing
with a fatal error: restore the Python 3.6 behaviour.

: Calling Py_Initialize() twice does nothing, instead of failing
with a fatal error: restore the Python 3.6 behaviour.

================================================================================

# Changelog - Core and Builtins

List:
: Fix a crash in hamt.c caused by enabling GC tracking for an
object that hadnât all of its fields set to NULL.
: Fix a crash in Python initialization when parsing the command
line options. Thanks Christoph Gohlke for the bug report and the fix!
: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
shutdown even when there was a custom handler set previously. Patch by
Philipp Kerling.
: Fix signed/unsigned comparison warning in pyhash.c.

: Fix a crash in hamt.c caused by enabling GC tracking for an
object that hadnât all of its fields set to NULL.

: Fix a crash in Python initialization when parsing the command
line options. Thanks Christoph Gohlke for the bug report and the fix!

: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
shutdown even when there was a custom handler set previously. Patch by
Philipp Kerling.

: Fix signed/unsigned comparison warning in pyhash.c.

================================================================================

# Changelog - Library (Part 1)

List:
: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
Steve Weber.
: Datetime instance d with non-None tzinfo, but with
d.tzinfo.utcoffset(d) returning None is now treated as naive by the
astimezone() method.
: Avoid race condition with debug logging
: asyncio: Fix a race condition causing data loss on
pause_reading()/resume_reading() when using the ProactorEventLoop.
: Correct test for uuid_enc_be availability in
configure.ac. Patch by Michael Felt.
: Add asyncio.WindowsSelectorEventLoopPolicy and
asyncio.WindowsProactorEventLoopPolicy.
: Update unicodedataâs database to Unicode version 11.0.0.
: improve base64 exception message for encoded inputs of invalid
length
: asyncio/start_tls: Fix error message; cancel callbacks in case
of an unhandled error; mark SSLTransport as closed if it is aborted.
: The concatenation () and repetition () sequence
operations now raise  instead of SystemError when
performed on  objects.  Patch by Zackery Spytz.
: asyncio/ssl: Fix AttributeError, increase default handshake
timeout
: Use a better regex when breaking usage into wrappable parts.
Avoids bogus assertion errors from custom metavar strings.
: Emit a deprecation warning for inspect.formatargspec

================================================================================

# Changelog - Library (Part 2)

: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
Steve Weber.

: Datetime instance d with non-None tzinfo, but with
d.tzinfo.utcoffset(d) returning None is now treated as naive by the
astimezone() method.

: Avoid race condition with debug logging

: asyncio: Fix a race condition causing data loss on
pause_reading()/resume_reading() when using the ProactorEventLoop.

: Correct test for uuid_enc_be availability in
configure.ac. Patch by Michael Felt.

: Add asyncio.WindowsSelectorEventLoopPolicy and
asyncio.WindowsProactorEventLoopPolicy.

: Update unicodedataâs database to Unicode version 11.0.0.

: improve base64 exception message for encoded inputs of invalid
length

: asyncio/start_tls: Fix error message; cancel callbacks in case
of an unhandled error; mark SSLTransport as closed if it is aborted.

: The concatenation () and repetition () sequence
operations now raise  instead of SystemError when
performed on  objects.  Patch by Zackery Spytz.

: asyncio/ssl: Fix AttributeError, increase default handshake
timeout

: Use a better regex when breaking usage into wrappable parts.
Avoids bogus assertion errors from custom metavar strings.

================================================================================

# Changelog - Library (Part 3)

: Emit a deprecation warning for inspect.formatargspec

================================================================================

# Changelog - Documentation

List:
: Clarified the relationship between âs
PYTHONCOERCECLOCALE and PEP 540âs PYTHONUTF8 mode.
: Improve the documentation of asyncio.open_connection(),
asyncio.start_server() and their UNIX socket counterparts.
: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
flags for ssl.SSLContext.verify_mode.

: Clarified the relationship between âs
PYTHONCOERCECLOCALE and PEP 540âs PYTHONUTF8 mode.

: Improve the documentation of asyncio.open_connection(),
asyncio.start_server() and their UNIX socket counterparts.

: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
flags for ssl.SSLContext.verify_mode.

================================================================================

# Changelog - Build

List:
: Move -Wstrict-prototypes option to CFLAGS_NODIST from
. This option emitted annoying warnings when building extension
modules written in C++.

: Move -Wstrict-prototypes option to CFLAGS_NODIST from
. This option emitted annoying warnings when building extension
modules written in C++.

================================================================================

# Changelog - Windows

List:
: Reduces maximum marshal recursion depth on release builds.

: Reduces maximum marshal recursion depth on release builds.

================================================================================

# Changelog - IDLE (Part 1)

List:
: On Windows, add API call saying that tk scales for DPI. On
Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
unchanged, and a monitor resolution greater than 96 DPI, this should make
text and lines sharper.  It should otherwise have no effect.
: Clicking on a context line moves that line to the top of the
editor window.
: IDLE: Use read-only text widget for code context instead of
label widget.
: Scroll IDLE editor text by lines. Previously, the mouse wheel
and scrollbar slider moved text by a fixed number of pixels, resulting in
partial lines at the top of the editor box.  The change also applies to
the shell and grep output windows, but not to read-only text views.
: Enable theme-specific color configuration for Code Context. Use
the Highlights tab to see the setting for built-in themes or add settings
to custom themes.
: Display up to maxlines non-blank lines for Code Context. If
there is no current context, show a single blank line.

================================================================================

# Changelog - IDLE (Part 2)

: On Windows, add API call saying that tk scales for DPI. On
Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
unchanged, and a monitor resolution greater than 96 DPI, this should make
text and lines sharper.  It should otherwise have no effect.

: Clicking on a context line moves that line to the top of the
editor window.

: IDLE: Use read-only text widget for code context instead of
label widget.

: Scroll IDLE editor text by lines. Previously, the mouse wheel
and scrollbar slider moved text by a fixed number of pixels, resulting in
partial lines at the top of the editor box.  The change also applies to
the shell and grep output windows, but not to read-only text views.

: Enable theme-specific color configuration for Code Context. Use
the Highlights tab to see the setting for built-in themes or add settings
to custom themes.

: Display up to maxlines non-blank lines for Code Context. If
there is no current context, show a single blank line.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed a leak when the garbage collector fails to add an object
with the  method or referenced by it into the
gc.garbage list. PyGC_Collect() can now be called when an
exception is set and preserves it.
: Fix module_globals parameter of warnings.warn_explicit(): donât
crash if module_globals is not a dict.
: The new os.posix_spawn added in 3.7.0b1 was removed as we
are still working on what the API should look like.  Expect this in 3.8
instead.
: Fixed miscellaneous bugs in converting annotations to strings
and optimized parentheses in the string representation.
: Fix a leak in set_symmetric_difference().
: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.
: Due to unexpected compatibility issues discovered during
downstream beta testing, reverted .  field is
removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes
which was added in 3.7a1.  Docstring expression is restored as a first
statement in their body. Based on patch by Inada Naoki.
: Fix a crash in ctypes.cast() in case the type argument is a
ctypes structured data type. Patch by Eryk Sun and Oren Milman.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed a leak when the garbage collector fails to add an object
with the  method or referenced by it into the
gc.garbage list. PyGC_Collect() can now be called when an
exception is set and preserves it.

: Fix module_globals parameter of warnings.warn_explicit(): donât
crash if module_globals is not a dict.

: The new os.posix_spawn added in 3.7.0b1 was removed as we
are still working on what the API should look like.  Expect this in 3.8
instead.

: Fixed miscellaneous bugs in converting annotations to strings
and optimized parentheses in the string representation.

: Fix a leak in set_symmetric_difference().

: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.

: Due to unexpected compatibility issues discovered during
downstream beta testing, reverted .  field is
removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes
which was added in 3.7a1.  Docstring expression is restored as a first
statement in their body. Based on patch by Inada Naoki.

: Fix a crash in ctypes.cast() in case the type argument is a
ctypes structured data type. Patch by Eryk Sun and Oren Milman.

================================================================================

# Changelog - Library (Part 1)

List:
: When cancelling the task due to a timeout,
asyncio.wait_for() will now wait until the cancellation is complete.
: Fix gather to propagate cancellation of itself even with
return_exceptions.
: Support protocol type switching in SSLTransport.set_protocol().
: Pause the transport as early as possible to further reduce the
risk of data_received() being called before connection_made().
: Fix a race condition in SSLProtocol.connection_made() of
asyncio.sslproto: start immediately the handshake instead of using
call_soon(). Previously, data_received() could be called before the
handshake started, causing the handshake to hang or fail.
: Fixed bug where calling write_eof() on a
_SelectorSocketTransport after itâs already closed raises AttributeError.
: Make asyncio.all_tasks() return only pending tasks.
: Avoid blocking on file IO in sendfile fallback code
: Fix RuntimeError after closing loop that used run_in_executor
: Fix Task.__repr__ crash with Cythonâs bogus coroutines
: Fix transport.set_protocol() to support switching between
asyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to
work with asyncio.BufferedProtocols.
: Pickles of type variables and subscripted generics are now
future-proof and compatible with older Python versions.
: Fixed uuid.uuid1() on FreeBSD.
: Finalize and document preliminary and experimental TLS 1.3
support with OpenSSL 1.1.1
: Fix possible SIGSGV when asyncio.Future is created in __del__
: Fixed a bug in the Python implementation of the JSON decoder
that prevented the cache of parsed strings from clearing after finishing
the decoding. Based on patch by c-fos.
: Change TLS 1.3 cipher suite settings for compatibility with
OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers
enabled by default.
: Do not simplify arguments to typing.Union. Now
Union[Manager,  is not simplified to  at runtime.
Such simplification previously caused several bugs and limited
possibilities for introspection.
: Add a new block_on_close class attribute to
ForkingMixIn and ThreadingMixIn classes of socketserver.
: tempfile._candidate_tempdir_list should consider common TEMP
locations
: argparse subparsers are once again not required by default,
reverting the change in behavior introduced by  in 3.7.0a2.
: dataclasses.make_dataclass now checks for invalid field names
and duplicate fields. Also, added a check for invalid field
specifications.
: Prevent uuid.get_node from using a DUID instead of a MAC on
Windows. Patch by Zvi Effron
: Fix race condition with ReadTransport.resume_reading in
Windows proactor event loop.
Fix failure in typing.get_type_hints() when ClassVar was provided as a
string forward reference.
: Optimize asyncio.ensure_future() by reordering if checks: 1.17x
faster.
: Add errors param to cgi.parse_multipart and make an encoding in
FieldStorage use the given errors (needed for Twisted).  Patch by Amber
Brown.
: Change dataclasses.Fields repr to use the repr of each of its
members, instead of str.  This makes it more clear what each field
actually represents.  This is especially true for the âtypeâ member.
: Fix dataclasses to work if using literal string type
annotations or if using PEP 563 âPostponed Evaluation of Annotationsâ.
Only specific string prefixes are detected for both ClassVar (âClassVarâ
and âtyping.ClassVarâ) and InitVar (âInitVarâ and âdataclasses.InitVarâ).
: Minor fixes in typing module: add annotations to
NamedTuple.__new__, pass  and  in
Generic.__new__.  Original PRs by Paulius Å arka and Chad Dombrova.
: Updated alias mapping with glibc 2.27 supported locales.
: Fix trailing quotation marks getting deleted when looking up
byte/string literals on pydoc. Patch by AndrÃ©s Delfino.
: The function platform.linux_distribution and
platform.dist now trigger a DeprecationWarning and have been
marked for removal in Python 3.8
: Update error message when constructing invalid
inspect.Parameters Patch by Donghee Na.
: Fix FD leak in _SelectorSocketTransport  Patch by Vlad
Starostin.
: The urllib.robotparserâs  representation now
includes wildcard entries and the âCrawl-delayâ and âRequest-rateâ fields.
Patch by Michael Lazar.
: The ssl module now contains OP_NO_RENEGOTIATION constant,
available with OpenSSL 1.1.0h or 1.1.1.
: Support arrays >=2GiB in .  Patch by Segev Finer.

================================================================================

# Changelog - Library (Part 2)

: When cancelling the task due to a timeout,
asyncio.wait_for() will now wait until the cancellation is complete.

: Fix gather to propagate cancellation of itself even with
return_exceptions.

: Support protocol type switching in SSLTransport.set_protocol().

: Pause the transport as early as possible to further reduce the
risk of data_received() being called before connection_made().

: Fix a race condition in SSLProtocol.connection_made() of
asyncio.sslproto: start immediately the handshake instead of using
call_soon(). Previously, data_received() could be called before the
handshake started, causing the handshake to hang or fail.

: Fixed bug where calling write_eof() on a
_SelectorSocketTransport after itâs already closed raises AttributeError.

: Make asyncio.all_tasks() return only pending tasks.

: Avoid blocking on file IO in sendfile fallback code

: Fix RuntimeError after closing loop that used run_in_executor

: Fix Task.__repr__ crash with Cythonâs bogus coroutines

: Fix transport.set_protocol() to support switching between
asyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to
work with asyncio.BufferedProtocols.

================================================================================

# Changelog - Library (Part 3)

: Pickles of type variables and subscripted generics are now
future-proof and compatible with older Python versions.

: Fixed uuid.uuid1() on FreeBSD.

: Finalize and document preliminary and experimental TLS 1.3
support with OpenSSL 1.1.1

: Fix possible SIGSGV when asyncio.Future is created in __del__

: Fixed a bug in the Python implementation of the JSON decoder
that prevented the cache of parsed strings from clearing after finishing
the decoding. Based on patch by c-fos.

: Change TLS 1.3 cipher suite settings for compatibility with
OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers
enabled by default.

: Do not simplify arguments to typing.Union. Now
Union[Manager,  is not simplified to  at runtime.
Such simplification previously caused several bugs and limited
possibilities for introspection.

: Add a new block_on_close class attribute to
ForkingMixIn and ThreadingMixIn classes of socketserver.

: tempfile._candidate_tempdir_list should consider common TEMP
locations

: argparse subparsers are once again not required by default,
reverting the change in behavior introduced by  in 3.7.0a2.

================================================================================

# Changelog - Library (Part 4)

: dataclasses.make_dataclass now checks for invalid field names
and duplicate fields. Also, added a check for invalid field
specifications.

: Prevent uuid.get_node from using a DUID instead of a MAC on
Windows. Patch by Zvi Effron

: Fix race condition with ReadTransport.resume_reading in
Windows proactor event loop.

Fix failure in typing.get_type_hints() when ClassVar was provided as a
string forward reference.

: Optimize asyncio.ensure_future() by reordering if checks: 1.17x
faster.

: Add errors param to cgi.parse_multipart and make an encoding in
FieldStorage use the given errors (needed for Twisted).  Patch by Amber
Brown.

: Change dataclasses.Fields repr to use the repr of each of its
members, instead of str.  This makes it more clear what each field
actually represents.  This is especially true for the âtypeâ member.

: Fix dataclasses to work if using literal string type
annotations or if using PEP 563 âPostponed Evaluation of Annotationsâ.
Only specific string prefixes are detected for both ClassVar (âClassVarâ
and âtyping.ClassVarâ) and InitVar (âInitVarâ and âdataclasses.InitVarâ).

================================================================================

# Changelog - Library (Part 5)

: Minor fixes in typing module: add annotations to
NamedTuple.__new__, pass  and  in
Generic.__new__.  Original PRs by Paulius Å arka and Chad Dombrova.

: Updated alias mapping with glibc 2.27 supported locales.

: Fix trailing quotation marks getting deleted when looking up
byte/string literals on pydoc. Patch by AndrÃ©s Delfino.

: The function platform.linux_distribution and
platform.dist now trigger a DeprecationWarning and have been
marked for removal in Python 3.8

: Update error message when constructing invalid
inspect.Parameters Patch by Donghee Na.

: Fix FD leak in _SelectorSocketTransport  Patch by Vlad
Starostin.

: The urllib.robotparserâs  representation now
includes wildcard entries and the âCrawl-delayâ and âRequest-rateâ fields.
Patch by Michael Lazar.

: The ssl module now contains OP_NO_RENEGOTIATION constant,
available with OpenSSL 1.1.0h or 1.1.1.

: Support arrays >=2GiB in .  Patch by Segev Finer.

================================================================================

# Changelog - Documentation

List:
: Document that asyncio.wait() does not cancel its futures on
timeout.
: Document  changes to asyncio.
: Update HMAC md5 default to a DeprecationWarning, bump removal
to 3.8.
: Fix broken pypi link
: Add missing documentation for typing.AsyncContextManager.

: Document that asyncio.wait() does not cancel its futures on
timeout.

: Document  changes to asyncio.

: Update HMAC md5 default to a DeprecationWarning, bump removal
to 3.8.

: Fix broken pypi link

: Add missing documentation for typing.AsyncContextManager.

================================================================================

# Changelog - Tests

List:
: Ignore test_posix_fallocate failures on BSD platforms that
might be due to running on ZFS.
: Remove the _xxsubinterpreters module (meant for testing) and
associated helpers.  This module was originally added recently in 3.7b1.

: Ignore test_posix_fallocate failures on BSD platforms that
might be due to running on ZFS.

: Remove the _xxsubinterpreters module (meant for testing) and
associated helpers.  This module was originally added recently in 3.7b1.

================================================================================

# Changelog - Build

List:
: Ensures module definition files for the stable ABI on Windows
are correctly regenerated.
: Enable CI builds on Visual Studio Team Services at
https://python.visualstudio.com/cpython
: Add -Wno-cast-function-type for gcc 8 for silencing
warnings about function casts like casting to PyCFunction in method
definition lists.

: Ensures module definition files for the stable ABI on Windows
are correctly regenerated.

: Enable CI builds on Visual Studio Team Services at
https://python.visualstudio.com/cpython

: Add -Wno-cast-function-type for gcc 8 for silencing
warnings about function casts like casting to PyCFunction in method
definition lists.

================================================================================

# Changelog - macOS

List:
: The .editrc file in userâs home directory is now processed
correctly during the readline initialization through editline emulation on
macOS.

: The .editrc file in userâs home directory is now processed
correctly during the readline initialization through editline emulation on
macOS.

================================================================================

# Changelog - IDLE

List:
: IDLE: Cleanup codecontext.py and its test.
: IDLEâs code context now recognizes async as a block opener.
: Add docstrings and tests for codecontext.

: IDLE: Cleanup codecontext.py and its test.

: IDLEâs code context now recognizes async as a block opener.

: Add docstrings and tests for codecontext.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Raise a SyntaxError for   and  
statements outside of async functions.
: Fix a bug that causes PathFinder to appear twice on
sys.meta_path. Patch by Pablo Galindo Salgado.
: Fixed clang ubsan (undefined behavior sanitizer) warnings in
dictobject.c by adjusting how the internal struct _dictkeysobject shared
keys structure is declared.
: Fix potential memory leak in normalizestring().
: Change dict growth function from
round_up_to_power_2(used*2+hashtable_size/2) to
round_up_to_power_2(used*3).  Previously, dict is shrinked only when
  . Now dict has more chance to be shrinked.
: Improved error messages in âasync withâ when __aenter__()
or __aexit__() return non-awaitable object.
: Fix ma_version_tag in dict implementation is uninitialized
when copying from key-sharing dict.

: Raise a SyntaxError for   and  
statements outside of async functions.

: Fix a bug that causes PathFinder to appear twice on
sys.meta_path. Patch by Pablo Galindo Salgado.

: Fixed clang ubsan (undefined behavior sanitizer) warnings in
dictobject.c by adjusting how the internal struct _dictkeysobject shared
keys structure is declared.

: Fix potential memory leak in normalizestring().

================================================================================

# Changelog - Core and Builtins (Part 2)

: Change dict growth function from
round_up_to_power_2(used*2+hashtable_size/2) to
round_up_to_power_2(used*3).  Previously, dict is shrinked only when
  . Now dict has more chance to be shrinked.

: Improved error messages in âasync withâ when __aenter__()
or __aexit__() return non-awaitable object.

: Fix ma_version_tag in dict implementation is uninitialized
when copying from key-sharing dict.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix ctypes.util.find_library regression on macOS.
: Fixed crash in the get() method of the  database
object when it is called with a single argument.
: Fix multiprocessing regression on newer glibcs
bpo-991266: Fix quoting of the  attribute of
http.cookies.SimpleCookie.
: Upgrade bundled version of pip to 10.0.1.
: Fixed a crash in the  module when converting an ST
object to a tree of tuples or lists with line_info=False and
col_info=True.
: lib2to3 now recognizes  strings.
: Ensure line-endings are respected when using lib2to3.
: Have importlib.resources.contents() and
importlib.abc.ResourceReader.contents() return an 
instead of an .
: Fix display of  call in the html produced by
cgitb.html(). Patch by StÃ©phane Blondon.
: Fixed regression when running pydoc with the 
switch. (The regression was introduced in 3.7.0b3 by the resolution of
) This fix also changed pydoc to add os.getcwd() to
 when necessary, rather than adding .
: Delete entries of  in sys.path_importer_cache
when importlib.machinery.invalidate_caches() is called.
: Deprecate looking up non-Enum objects in Enum classes and Enum
members (will raise  in 3.8+).
: random.Random.choice() now raises IndexError for empty
sequences consistently even when called from subclasses without a
getrandbits() implementation.
: Update difflib.mdiff() for .  Convert an uncaught
StopIteration in a generator into a return-statement.
: End framing at the end of C implementation of
pickle.Pickler.dump().
: Improved error handling and fixed a reference leak in
os.posix_spawn().
: In dataclasses, Field.__set_name__ now looks up the
__set_name__ special method on the class, not the instance, of the default
value.
: Raise RuntimeError when executor.submit is called during
interpreter shutdown.
: Fix output of cover files for  module command-line
tool. Previously emitted cover files only when  option was
used. Patch by Michael Selik.

================================================================================

# Changelog - Library (Part 2)

: Fix ctypes.util.find_library regression on macOS.

: Fixed crash in the get() method of the  database
object when it is called with a single argument.

: Fix multiprocessing regression on newer glibcs

bpo-991266: Fix quoting of the  attribute of
http.cookies.SimpleCookie.

: Upgrade bundled version of pip to 10.0.1.

: Fixed a crash in the  module when converting an ST
object to a tree of tuples or lists with line_info=False and
col_info=True.

: lib2to3 now recognizes  strings.

: Ensure line-endings are respected when using lib2to3.

: Have importlib.resources.contents() and
importlib.abc.ResourceReader.contents() return an 
instead of an .

: Fix display of  call in the html produced by
cgitb.html(). Patch by StÃ©phane Blondon.

: Fixed regression when running pydoc with the 
switch. (The regression was introduced in 3.7.0b3 by the resolution of
) This fix also changed pydoc to add os.getcwd() to
 when necessary, rather than adding .

: Delete entries of  in sys.path_importer_cache
when importlib.machinery.invalidate_caches() is called.

: Deprecate looking up non-Enum objects in Enum classes and Enum
members (will raise  in 3.8+).

================================================================================

# Changelog - Library (Part 3)

: random.Random.choice() now raises IndexError for empty
sequences consistently even when called from subclasses without a
getrandbits() implementation.

: Update difflib.mdiff() for .  Convert an uncaught
StopIteration in a generator into a return-statement.

: End framing at the end of C implementation of
pickle.Pickler.dump().

: Improved error handling and fixed a reference leak in
os.posix_spawn().

: In dataclasses, Field.__set_name__ now looks up the
__set_name__ special method on the class, not the instance, of the default
value.

: Raise RuntimeError when executor.submit is called during
interpreter shutdown.

: Fix output of cover files for  module command-line
tool. Previously emitted cover files only when  option was
used. Patch by Michael Selik.

================================================================================

# Changelog - Documentation

List:
: Add Korean language switcher for https://docs.python.org/3/
: Clarify that the  attribute on modules cannot be
just any value.
: Modernize documentation for writing C extension types.
: Deprecate Py_UNICODE usage in  document.
Py_UNICODE related APIs are deprecated since Python 3.3, but it is
missed in the document.
: Add a note about curses.addch and curses.addstr exception
behavior when writing outside a window, or pad.
: Update documentation related with  order.

: Add Korean language switcher for https://docs.python.org/3/

: Clarify that the  attribute on modules cannot be
just any value.

: Modernize documentation for writing C extension types.

: Deprecate Py_UNICODE usage in  document.
Py_UNICODE related APIs are deprecated since Python 3.3, but it is
missed in the document.

: Add a note about curses.addch and curses.addstr exception
behavior when writing outside a window, or pad.

: Update documentation related with  order.

================================================================================

# Changelog - Tests

List:
: Fix test_embed.test_pre_initialization_sys_options() when
the interpreter is built with --enable-shared.

: Fix test_embed.test_pre_initialization_sys_options() when
the interpreter is built with --enable-shared.

================================================================================

# Changelog - Build

List:
: Enable the verbose build for extension modules, when GNU make
is passed macros on the command line.
: Update config.guess and config.sub files.
: Add new triplets for mips r6 and riscv variants (used in
extension suffixes).
: By default, modules configured in Modules/Setup are no
longer built with -DPy_BUILD_CORE. Instead, modules that specifically
need that preprocessor definition include it in their individual entries.
: The embedding tests can once again be built with clang 6.0

: Enable the verbose build for extension modules, when GNU make
is passed macros on the command line.

: Update config.guess and config.sub files.

: Add new triplets for mips r6 and riscv variants (used in
extension suffixes).

: By default, modules configured in Modules/Setup are no
longer built with -DPy_BUILD_CORE. Instead, modules that specifically
need that preprocessor definition include it in their individual entries.

: The embedding tests can once again be built with clang 6.0

================================================================================

# Changelog - Windows

List:
: Update Windows installer to use OpenSSL 1.1.0h.

: Update Windows installer to use OpenSSL 1.1.0h.

================================================================================

# Changelog - macOS

List:
: Update macOS installer build to use OpenSSL 1.1.0h.

: Update macOS installer build to use OpenSSL 1.1.0h.

================================================================================

# Changelog - IDLE

List:
: Update word/identifier definition from ascii to unicode. In
text and entry boxes, this affects selection by double-click, movement
left/right by control-left/right, and deletion left/right by
control-BACKSPACE/DEL.
: IDLE: consistently color invalid string prefixes. A âuâ string
prefix cannot be paired with either ârâ or âfâ. Consistently color as much
of the prefix, starting at the right, as is valid. Revise and extend
colorizer test.

: Update word/identifier definition from ascii to unicode. In
text and entry boxes, this affects selection by double-click, movement
left/right by control-left/right, and deletion left/right by
control-BACKSPACE/DEL.

: IDLE: consistently color invalid string prefixes. A âuâ string
prefix cannot be paired with either ârâ or âfâ. Consistently color as much
of the prefix, starting at the right, as is valid. Revise and extend
colorizer test.

================================================================================

# Changelog - Tools/Demos

List:
: pygettext.py now recognizes only literal strings as
docstrings and translatable strings, and rejects bytes literals and
f-string expressions.
: Fixed handling directories as arguments in the 
script. Based on patch by Oleg Krasnikov.
: Fix pystackv and pystack gdbinit macros.
: Fix 2to3 for using with âadd-suffix option but without
âoutput-dir option for relative path to files in current directory.

: pygettext.py now recognizes only literal strings as
docstrings and translatable strings, and rejects bytes literals and
f-string expressions.

: Fixed handling directories as arguments in the 
script. Based on patch by Oleg Krasnikov.

: Fix pystackv and pystack gdbinit macros.

: Fix 2to3 for using with âadd-suffix option but without
âoutput-dir option for relative path to files in current directory.

================================================================================

# Changelog - Security

List:
: Harden ssl module against LibreSSL CVE 2018-8970.
X509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new
test ensures that NULL bytes are not allowed.
: Minimal fix to prevent buffer overrun in os.symlink on Windows
: Regexes in difflib and poplib were vulnerable to catastrophic
backtracking. These regexes formed potential DOS vectors (REDOS). They
have been refactored. This resolves CVE 2018-1060 and CVE 2018-1061.
Patch by Jamie Davis.

: Harden ssl module against LibreSSL CVE 2018-8970.
X509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new
test ensures that NULL bytes are not allowed.

: Minimal fix to prevent buffer overrun in os.symlink on Windows

: Regexes in difflib and poplib were vulnerable to catastrophic
backtracking. These regexes formed potential DOS vectors (REDOS). They
have been refactored. This resolves CVE 2018-1060 and CVE 2018-1061.
Patch by Jamie Davis.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: When using the -m switch, sys.path[0] is now explicitly
expanded as the  working directory, rather than being left as
the empty path (which allows imports from the current working directory at
the time of the import)
: Improve consistency of errors raised by issubclass() when
called with a non-class and an abstract base class as the first and second
arguments, respectively. Patch by Josh Bronson.
: Fixed jumping when the function contains an   loop.
: Fixed jumping out of âwithâ block by setting f_lineno.
: Fix a crash on fork when using a custom memory allocator (ex:
using PYTHONMALLOC env var). _PyGILState_Reinit() and
_PyInterpreterState_Enable() now use the default RAW memory allocator to
allocate a new interpreters mutex on fork.
: Prevent jumps from âreturnâ and âexceptionâ trace events.
: Donât use temporary variables in cases of list/dict/set
comprehensions

: When using the -m switch, sys.path[0] is now explicitly
expanded as the  working directory, rather than being left as
the empty path (which allows imports from the current working directory at
the time of the import)

================================================================================

# Changelog - Core and Builtins (Part 2)

: Improve consistency of errors raised by issubclass() when
called with a non-class and an abstract base class as the first and second
arguments, respectively. Patch by Josh Bronson.

: Fixed jumping when the function contains an   loop.

: Fixed jumping out of âwithâ block by setting f_lineno.

: Fix a crash on fork when using a custom memory allocator (ex:
using PYTHONMALLOC env var). _PyGILState_Reinit() and
_PyInterpreterState_Enable() now use the default RAW memory allocator to
allocate a new interpreters mutex on fork.

: Prevent jumps from âreturnâ and âexceptionâ trace events.

: Donât use temporary variables in cases of list/dict/set
comprehensions

================================================================================

# Changelog - Library (Part 1)

List:
: Have Field objects pass through __set_name__ to their default
values, if they have their own __set_name__.
: Allow ttk.Treeview.insert to insert iid that has a false
boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
Khatri.
: Treat type variables and special typing forms as immutable by
copy and pickle.  This fixes several minor issues and inconsistencies, and
improves backwards compatibility with Python 3.6.
: When computing dataclassâs __hash__, use the lookup table to
contain the function which returns the __hash__ value.  This is an
improvement over looking up a string, and then testing that string to see
what to do.
: The ssl module now compiles with LibreSSL 2.7.1.
: Raise TypeError if a member variable of a dataclass is of type
Field, but doesnât have a type annotation.
: Fix the failure on OSX caused by the tests relying on
sem_getvalue
: Add âFieldâ to dataclasses.__all__.
: Fix an error where subclassing a dataclass with a field that
uses a default_factory would generate an incorrect class.
: Dataclasses: If a field has a default value thatâs a
MemberDescriptorType, then itâs from that field being in __slots__, not an
actual default value.
: If a non-dataclass inherits from a frozen dataclass, allow
attributes to be added to the derived class.  Only attributes from the
frozen dataclass cannot be assigned to.  Require all dataclasses in a
hierarchy to be either all frozen or all non-frozen.
: Add missing  to  in typing.py
: Fix the size handling in multiprocessing.Queue when a pickling
error occurs.
: lib2to3 now properly supports trailing commas after 
and  in function signatures.
: FIX properly close leaking fds in
concurrent.futures.ProcessPoolExecutor.
: Release the GIL during fstat() calls, avoiding hang of all
threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
by Nir Soffer.
: Avoid failing in multiprocessing.Process if the standard
streams are closed or None at exit.
: Skip sending/receiving data after SSL transport closing.
: Fix a regression in  that result of
 is empty when the network is constructed by a tuple
containing an integer mask and only 1 bit left for addresses.
: Fix C implementation of ABC.__subclasscheck__(cls,
 crashed when  is not a type object.
: Fix inspect.signature() for single-parameter partialmethods.
: Expose several missing constants in zlib and fix corresponding
documentation.
: Improved exceptions raised for invalid number of channels and
sample width when read an audio file in modules , 
and .
: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
subprocess if another low descriptor is closed.
: In , after_cancel(None) now raises a
ValueError instead of canceling the first scheduled function.
Patch by Cheryl Sabella.
: http.server now exposes a ThreadedHTTPServer class and uses it
when the module is run with  to cope with web browsers pre-opening
sockets.
: sqlite3.Connection now exposes a
 method, if the underlying SQLite
library is at version 3.6.11 or higher.  Patch by Lele Gaifax.

================================================================================

# Changelog - Library (Part 2)

: Have Field objects pass through __set_name__ to their default
values, if they have their own __set_name__.

: Allow ttk.Treeview.insert to insert iid that has a false
boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
Khatri.

: Treat type variables and special typing forms as immutable by
copy and pickle.  This fixes several minor issues and inconsistencies, and
improves backwards compatibility with Python 3.6.

: When computing dataclassâs __hash__, use the lookup table to
contain the function which returns the __hash__ value.  This is an
improvement over looking up a string, and then testing that string to see
what to do.

: The ssl module now compiles with LibreSSL 2.7.1.

: Raise TypeError if a member variable of a dataclass is of type
Field, but doesnât have a type annotation.

: Fix the failure on OSX caused by the tests relying on
sem_getvalue

: Add âFieldâ to dataclasses.__all__.

: Fix an error where subclassing a dataclass with a field that
uses a default_factory would generate an incorrect class.

: Dataclasses: If a field has a default value thatâs a
MemberDescriptorType, then itâs from that field being in __slots__, not an
actual default value.

================================================================================

# Changelog - Library (Part 3)

: If a non-dataclass inherits from a frozen dataclass, allow
attributes to be added to the derived class.  Only attributes from the
frozen dataclass cannot be assigned to.  Require all dataclasses in a
hierarchy to be either all frozen or all non-frozen.

: Add missing  to  in typing.py

: Fix the size handling in multiprocessing.Queue when a pickling
error occurs.

: lib2to3 now properly supports trailing commas after 
and  in function signatures.

: FIX properly close leaking fds in
concurrent.futures.ProcessPoolExecutor.

: Release the GIL during fstat() calls, avoiding hang of all
threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
by Nir Soffer.

: Avoid failing in multiprocessing.Process if the standard
streams are closed or None at exit.

: Skip sending/receiving data after SSL transport closing.

: Fix a regression in  that result of
 is empty when the network is constructed by a tuple
containing an integer mask and only 1 bit left for addresses.

: Fix C implementation of ABC.__subclasscheck__(cls,
 crashed when  is not a type object.

: Fix inspect.signature() for single-parameter partialmethods.

================================================================================

# Changelog - Library (Part 4)

: Expose several missing constants in zlib and fix corresponding
documentation.

: Improved exceptions raised for invalid number of channels and
sample width when read an audio file in modules , 
and .

: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
subprocess if another low descriptor is closed.

: In , after_cancel(None) now raises a
ValueError instead of canceling the first scheduled function.
Patch by Cheryl Sabella.

: http.server now exposes a ThreadedHTTPServer class and uses it
when the module is run with  to cope with web browsers pre-opening
sockets.

: sqlite3.Connection now exposes a
 method, if the underlying SQLite
library is at version 3.6.11 or higher.  Patch by Lele Gaifax.

================================================================================

# Changelog - Documentation

List:
: Document PyBuffer_ToContiguous().
: Modify documentation for the  recipe to consume
initial values up to the start index.
: Update  documentation to describe how to make
standalone applications.
: Documentation changes for ipaddress.  Patch by Jon Foster and
Berker Peksag.
: Update documentation to clarify that WindowsRegistryFinder
implements MetaPathFinder. (Patch by Himanshu Lakhara)

: Document PyBuffer_ToContiguous().

: Modify documentation for the  recipe to consume
initial values up to the start index.

: Update  documentation to describe how to make
standalone applications.

: Documentation changes for ipaddress.  Patch by Jon Foster and
Berker Peksag.

: Update documentation to clarify that WindowsRegistryFinder
implements MetaPathFinder. (Patch by Himanshu Lakhara)

================================================================================

# Changelog - Tests

List:
: Avoid regrtest compatibility issue with namespace packages.
: Fix failing test_asyncio on macOS 10.12.2+ due to transport
of KqueueSelector loop was not being closed.
: Add test_bdb.py.

: Avoid regrtest compatibility issue with namespace packages.

: Fix failing test_asyncio on macOS 10.12.2+ due to transport
of KqueueSelector loop was not being closed.

================================================================================

# Changelog - Build

List:
: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

================================================================================

# Changelog - Windows

List:
: Fix potential use of uninitialized memory in
nt._getfinalpathname
: Fix a memory leak in os.chdir() on Windows if the current
directory is set to a UNC path.

: Fix potential use of uninitialized memory in
nt._getfinalpathname

: Fix a memory leak in os.chdir() on Windows if the current
directory is set to a UNC path.

================================================================================

# Changelog - macOS

List:
: Build and link with private copy of Tcl/Tk 8.6 for the macOS
10.6+ installer. The 10.9+ installer variant already does this.  This
means that the Python 3.7 provided by the python.org macOS installers no
longer need or use any external versions of Tcl/Tk, either system-provided
or user-installed, such as ActiveTcl.

: Build and link with private copy of Tcl/Tk 8.6 for the macOS
10.6+ installer. The 10.9+ installer variant already does this.  This
means that the Python 3.7 provided by the python.org macOS installers no
longer need or use any external versions of Tcl/Tk, either system-provided
or user-installed, such as ActiveTcl.

================================================================================

# Changelog - IDLE

List:
: Set  while running a startup file.  Like Python,
IDLE optionally runs one startup file in the Shell window before
presenting the first interactive input prompt.  For IDLE,  runs a
file named in environmental variable  IDLESTARTUP or
PYTHONSTARTUP;   runs .  Python sets
 to the startup file name before running the file and unsets
it before the first prompt.  IDLE now does the same when run normally,
without the  option.
: Simplify and rename StringTranslatePseudoMapping in pyparse.

: Set  while running a startup file.  Like Python,
IDLE optionally runs one startup file in the Shell window before
presenting the first interactive input prompt.  For IDLE,  runs a
file named in environmental variable  IDLESTARTUP or
PYTHONSTARTUP;   runs .  Python sets
 to the startup file name before running the file and unsets
it before the first prompt.  IDLE now does the same when run normally,
without the  option.

: Simplify and rename StringTranslatePseudoMapping in pyparse.

================================================================================

# Changelog - Tools/Demos

List:
: Add an  flag for Tools/scripts/pathfix.py to disable
automatic backup creation (files with  suffix).

: Add an  flag for Tools/scripts/pathfix.py to disable
automatic backup creation (files with  suffix).

================================================================================

# Changelog - C API

List:
: Embedding applications may once again call
PySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to
calling Py_Initialize.
: Document that m_traverse for multi-phase initialized modules
can be called with m_state=NULL, and add a sanity check

: Embedding applications may once again call
PySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to
calling Py_Initialize.

: Document that m_traverse for multi-phase initialized modules
can be called with m_state=NULL, and add a sanity check

================================================================================

# Changelog - Security

List:
: The ssl module now allows users to perform their own IDN
en/decoding when using SNI.

: The ssl module now allows users to perform their own IDN
en/decoding when using SNI.

================================================================================

# Changelog - Core and Builtins

List:
: Update Valgrind suppression list to account for the rename of
Py_ADDRESS_IN_RANG to address_in_range.
: Remove the new API added in  (gc.ensure_disabled()
context manager).
: For namespace packages, ensure that both  and
__spec__.origin are set to None.
: Make sure __spec__.loader matches __loader__ for
namespace packages.
: Fix the warning messages for Python/ast_unparse.c. Patch by
StÃ©phane Wirtel
: Fix possible crashing in builtin Unicode decoders caused by
write out-of-bound errors when using customized decode error handlers.

: Update Valgrind suppression list to account for the rename of
Py_ADDRESS_IN_RANG to address_in_range.

: Remove the new API added in  (gc.ensure_disabled()
context manager).

: For namespace packages, ensure that both  and
__spec__.origin are set to None.

: Make sure __spec__.loader matches __loader__ for
namespace packages.

: Fix the warning messages for Python/ast_unparse.c. Patch by
StÃ©phane Wirtel

: Fix possible crashing in builtin Unicode decoders caused by
write out-of-bound errors when using customized decode error handlers.

================================================================================

# Changelog - Library (Part 1)

List:
: For dataclasses, disallow inheriting frozen from non-frozen
classes, and also disallow inheriting non-frozen from frozen classes. This
restriction will be relaxed at a future date.
: Fixed tarfile.itn handling of out-of-bounds float values. Patch
by Joffrey Fuhrer.
: Direct instantiation of SSLSocket and SSLObject objects is now
prohibited. The constructors were never documented, tested, or designed as
public constructors. Users were suppose to use ssl.wrap_socket() or
SSLContext.
: Remove the tri-state parameter âhashâ, and add the boolean
âunsafe_hashâ. If unsafe_hash is True, add a __hash__ function, but if a
__hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__
based on the values of eq= and frozen=.  The unsafe_hash=False behavior is
the same as the old hash=None behavior.  unsafe_hash=False is the default,
just as hash=None used to be.
: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3
for future compatibility with OpenSSL 1.1.1.
: The ssl module now detects missing NPN support in LibreSSL.
: dbm.open() now encodes filename with the filesystem encoding
rather than default encoding.
: In , donât check every call whether the 
syscall exists or not.
: nt._getfinalpathname, nt._getvolumepathname and
nt._getdiskusage now correctly convert from bytes.
: Emit a DeprecationWarning when using or importing an ABC
directly from collections rather than from collections.abc.
: Rewrite confusing message from setup.py upload from âNo dist
file created in earlier commandâ to the more helpful âMust create and
upload files in one commandâ.
: Make sure sys.argv remains as a list when running trace.
:  module is added.  It is a speedup module with C
implementations for various functions and methods in .  Creating an
ABC subclass and calling isinstance or issubclass with an ABC
subclass are up to 1.5x faster. In addition, this makes Python start-up up
to 10% faster. Note that the new implementation hides internal registry
and caches, previously accessible via private attributes
_abc_registry, _abc_cache, and _abc_negative_cache.  There are
three debugging helper methods that can be used instead
_dump_registry, _abc_registry_clear, and _abc_caches_clear.
: Fixed asyncio.Condition issue which silently ignored
cancellation after notifying and cancelling a conditional lock. Patch by
Bar Harel.
: ssl.match_hostname() has been simplified and no longer depends
on re and ipaddress module for wildcard and IP addresses. Error reporting
for invalid wildcards has been improved.
: socket: Remove
TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version
Windows during run-time.
: Fixed refleaks of __init__() methods in various modules.
(Contributed by Oren Milman)
: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
only the last field is quoted.  Patch by Jake Davis.
: collections.ChainMap() preserves the order of the underlying
mappings.
: fnmatch.translate() no longer produces patterns which
contain set operations. Sets starting with â[â or containing âââ, â&&â,
â~~â or â||â will be interpreted differently in regular expressions in
future versions. Currently they emit warnings. fnmatch.translate() now
avoids producing patterns containing such sets by accident.
: Implement native fast sendfile for Windows proactor event loop.
: Fix a rare but potential pre-exec child process deadlock in
subprocess on POSIX systems when marking file descriptors inheritable on
exec in the child process.  This bug appears to have been introduced in
3.4.
: The ctypes module used to depend on indirect linking for
dlopen. The shared extension is now explicitly linked against libdl on
platforms with dl.
: Implement asyncio.TimerHandle.when() method.
: Use mod_spec.parent when running modules with pdb
: Fixed asyncio.Lock() safety issue which allowed acquiring
and locking the same lock multiple times, without it being free. Patch by
Bar Harel.
: Do not include name field in SMTP envelope from address. Patch
by StÃ©phane Wirtel
: Add TLSVersion constants and SSLContext.maximum_version /
minimum_version attributes. The new API wraps OpenSSL 1.1
https://web.archive.org/web/20180309043602/https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html
feature.
: Internal implementation details of ssl module were cleaned up.
The SSLSocket has one less layer of indirection. Owner and session
information are now handled by the SSLSocket and SSLObject constructor.
Channel binding implementation has been simplified.
: Fix the error handling in Aifc_read.initfp() when the SSND
chunk is not found. Patch by Zackery Spytz.
: Add Ttk spinbox widget to tkinter.ttk.  Patch by Alan D
Moore.
: Various functions returning tuple containing IPv6 addresses now
omit  part since the same information is already encoded in
 tuple item. Especially this speeds up socket.recvfrom()
when it receives multicast packet since useless resolving of network
interface name is omitted.
: The TarFile class now recurses directories in a reproducible
way.
: The ZipFile class now recurses directories in a reproducible
way.

================================================================================

# Changelog - Library (Part 2)

: For dataclasses, disallow inheriting frozen from non-frozen
classes, and also disallow inheriting non-frozen from frozen classes. This
restriction will be relaxed at a future date.

: Fixed tarfile.itn handling of out-of-bounds float values. Patch
by Joffrey Fuhrer.

: Direct instantiation of SSLSocket and SSLObject objects is now
prohibited. The constructors were never documented, tested, or designed as
public constructors. Users were suppose to use ssl.wrap_socket() or
SSLContext.

: Remove the tri-state parameter âhashâ, and add the boolean
âunsafe_hashâ. If unsafe_hash is True, add a __hash__ function, but if a
__hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__
based on the values of eq= and frozen=.  The unsafe_hash=False behavior is
the same as the old hash=None behavior.  unsafe_hash=False is the default,
just as hash=None used to be.

: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3
for future compatibility with OpenSSL 1.1.1.

: The ssl module now detects missing NPN support in LibreSSL.

: dbm.open() now encodes filename with the filesystem encoding
rather than default encoding.

================================================================================

# Changelog - Library (Part 3)

: In , donât check every call whether the 
syscall exists or not.

: nt._getfinalpathname, nt._getvolumepathname and
nt._getdiskusage now correctly convert from bytes.

: Emit a DeprecationWarning when using or importing an ABC
directly from collections rather than from collections.abc.

: Rewrite confusing message from setup.py upload from âNo dist
file created in earlier commandâ to the more helpful âMust create and
upload files in one commandâ.

: Make sure sys.argv remains as a list when running trace.

:  module is added.  It is a speedup module with C
implementations for various functions and methods in .  Creating an
ABC subclass and calling isinstance or issubclass with an ABC
subclass are up to 1.5x faster. In addition, this makes Python start-up up
to 10% faster. Note that the new implementation hides internal registry
and caches, previously accessible via private attributes
_abc_registry, _abc_cache, and _abc_negative_cache.  There are
three debugging helper methods that can be used instead
_dump_registry, _abc_registry_clear, and _abc_caches_clear.

================================================================================

# Changelog - Library (Part 4)

: Fixed asyncio.Condition issue which silently ignored
cancellation after notifying and cancelling a conditional lock. Patch by
Bar Harel.

: ssl.match_hostname() has been simplified and no longer depends
on re and ipaddress module for wildcard and IP addresses. Error reporting
for invalid wildcards has been improved.

: socket: Remove
TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version
Windows during run-time.

: Fixed refleaks of __init__() methods in various modules.
(Contributed by Oren Milman)

: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
only the last field is quoted.  Patch by Jake Davis.

: collections.ChainMap() preserves the order of the underlying
mappings.

: fnmatch.translate() no longer produces patterns which
contain set operations. Sets starting with â[â or containing âââ, â&&â,
â~~â or â||â will be interpreted differently in regular expressions in
future versions. Currently they emit warnings. fnmatch.translate() now
avoids producing patterns containing such sets by accident.

: Implement native fast sendfile for Windows proactor event loop.

================================================================================

# Changelog - Library (Part 5)

: Fix a rare but potential pre-exec child process deadlock in
subprocess on POSIX systems when marking file descriptors inheritable on
exec in the child process.  This bug appears to have been introduced in
3.4.

: The ctypes module used to depend on indirect linking for
dlopen. The shared extension is now explicitly linked against libdl on
platforms with dl.

: Implement asyncio.TimerHandle.when() method.

: Use mod_spec.parent when running modules with pdb

: Fixed asyncio.Lock() safety issue which allowed acquiring
and locking the same lock multiple times, without it being free. Patch by
Bar Harel.

: Do not include name field in SMTP envelope from address. Patch
by StÃ©phane Wirtel

: Add TLSVersion constants and SSLContext.maximum_version /
minimum_version attributes. The new API wraps OpenSSL 1.1
https://web.archive.org/web/20180309043602/https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html
feature.

: Internal implementation details of ssl module were cleaned up.
The SSLSocket has one less layer of indirection. Owner and session
information are now handled by the SSLSocket and SSLObject constructor.
Channel binding implementation has been simplified.

================================================================================

# Changelog - Library (Part 6)

: Fix the error handling in Aifc_read.initfp() when the SSND
chunk is not found. Patch by Zackery Spytz.

: Add Ttk spinbox widget to tkinter.ttk.  Patch by Alan D
Moore.

: Various functions returning tuple containing IPv6 addresses now
omit  part since the same information is already encoded in
 tuple item. Especially this speeds up socket.recvfrom()
when it receives multicast packet since useless resolving of network
interface name is omitted.

: The TarFile class now recurses directories in a reproducible
way.

: The ZipFile class now recurses directories in a reproducible
way.

================================================================================

# Changelog - Documentation (Part 1)

List:
: The ssl module function ssl.wrap_socket() has been
de-emphasized and deprecated in favor of the more secure and efficient
SSLContext.wrap_socket() method.
: Clarify docs for -O and -OO.  Patch by Terry Reedy.
: Add documentation for the contextvars module (PEP 567).
: Update link to w3c doc for xml default namespaces.
: Update test.support documentation.
: Document __getattr__() behavior when property 
method raises AttributeError.
: Modify RE examples in documentation to use raw strings to
prevent DeprecationWarning and add text to REGEX HOWTO to highlight
the deprecation.
: Improve docstrings for pathlib.PurePath subclasses.

: The ssl module function ssl.wrap_socket() has been
de-emphasized and deprecated in favor of the more secure and efficient
SSLContext.wrap_socket() method.

: Clarify docs for -O and -OO.  Patch by Terry Reedy.

: Add documentation for the contextvars module (PEP 567).

: Update link to w3c doc for xml default namespaces.

: Update test.support documentation.

: Document __getattr__() behavior when property 
method raises AttributeError.

================================================================================

# Changelog - Documentation (Part 2)

: Modify RE examples in documentation to use raw strings to
prevent DeprecationWarning and add text to REGEX HOWTO to highlight
the deprecation.

: Improve docstrings for pathlib.PurePath subclasses.

================================================================================

# Changelog - Tests

List:
: Add tests to verify connection with secp ECDH curves.

: Add tests to verify connection with secp ECDH curves.

================================================================================

# Changelog - Build

List:
: Fix the python debug build when using COUNT_ALLOCS.

: Fix the python debug build when using COUNT_ALLOCS.

================================================================================

# Changelog - Windows

List:
: Update Tcl and Tk versions to 8.6.8
: Fixed WindowsConsoleIO.write() for writing empty data.
: Ensures activate.bat can handle Unicode contents.
: Improves handling of denormalized executable path when
launching Python.
: Use the correct encoding for ipconfig output in the uuid
module. Patch by Segev Finer.
: Fix os.readlink() on Windows, which was mistakenly
treating the PrintNameOffset field of the reparse data buffer as a
number of characters instead of bytes. Patch by Craig Holmquist and SSE4.

: Update Tcl and Tk versions to 8.6.8

: Fixed WindowsConsoleIO.write() for writing empty data.

: Ensures activate.bat can handle Unicode contents.

: Improves handling of denormalized executable path when
launching Python.

: Use the correct encoding for ipconfig output in the uuid
module. Patch by Segev Finer.

: Fix os.readlink() on Windows, which was mistakenly
treating the PrintNameOffset field of the reparse data buffer as a
number of characters instead of bytes. Patch by Craig Holmquist and SSE4.

================================================================================

# Changelog - macOS

List:
: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.

: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Change  to  in pyparse.
: Remove unused code in pyparse module.
: Add tests for pyparse.
: Using the system and place-dependent default encoding for
open() is a bad idea for IDLEâs system and location-independent files.
: Add âencoding=utf-8â to open() in IDLEâs test_help_about. GUI
test test_file_buttons() only looks at initial ascii-only lines, but
failed on systems where open() defaults to âasciiâ because readline()
internally reads and decodes far enough ahead to encounter a non-ascii
character in CREDITS.txt.
: Update configdialog General tab docstring to add new widgets to
the widget list.

: Change  to  in pyparse.

: Remove unused code in pyparse module.

: Add tests for pyparse.

: Using the system and place-dependent default encoding for
open() is a bad idea for IDLEâs system and location-independent files.

: Add âencoding=utf-8â to open() in IDLEâs test_help_about. GUI
test test_file_buttons() only looks at initial ascii-only lines, but
failed on systems where open() defaults to âasciiâ because readline()
internally reads and decodes far enough ahead to encounter a non-ascii
character in CREDITS.txt.

================================================================================

# Changelog - IDLE (Part 2)

: Update configdialog General tab docstring to add new widgets to
the widget list.

================================================================================

# Changelog - Tools/Demos

List:
: Fix pygettext not extracting docstrings for functions with type
annotated arguments. Patch by Toby Harradine.

: Fix pygettext not extracting docstrings for functions with type
annotated arguments. Patch by Toby Harradine.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix coroutineâs ResourceWarning when thereâs an active error
set when itâs being finalized.
: Pdb and other debuggers dependent on bdb.py will correctly step
over (next command) native coroutines. Patch by Pablo Galindo.
: Optimize list.sort() and sorted() by using type specialized
comparisons when possible.
: Improve suggestion when the Python 2 form of print statement is
either present on the same line as the header of a compound statement or
else terminated by a semi-colon instead of a newline. Patch by Nitish
Chandra.
: Python now explicitly preserves the definition order of
keyword-only parameters.  Itâs always preserved their order, but this
behavior was never guaranteed before; this behavior is now guaranteed and
tested.
: The locals() dictionary now displays in the lexical order that
variables were defined.  Previously, the order was reversed.
: Add .isascii() method to ,  and
. It can be used to test that string contains only ASCII
characters.
: Enforce  for all code. This means that manually
raising a StopIteration exception from a generator is prohibited for all
code, regardless of whether âfrom __future__ import generator_stopâ was
used or not.
: Added built-in support for tracking the origin of coroutine
objects; see sys.set_coroutine_origin_tracking_depth and
CoroutineType.cr_origin. This replaces the asyncio debug modeâs use of
coroutine wrapping for native coroutine objects.
: Expose preadv and pwritev system calls in the os module. Patch
by Pablo Galindo
: hasattr(obj,  and getattr(obj,   are
about 4 times faster than before when  is not found and 
doesnât override __getattr__ or __getattribute__.
: Improved frozenset() hash to create more distinct hash values
when faced with datasets containing many similar values.
: Remove the STORE_ANNOTATION bytecode.
: Expose posix_spawn as a low level API in the os module.
(removed before 3.7.0rc1)
: Fixed estimation of the code stack size.
: Implement  Context Variables.
:  on a dict containing its own  or
 no longer raises RecursionError; OrderedDict similarly.
Instead, use , as for other recursive structures.  Patch by Ben
North.
: Py_Initialize() now creates the GIL. The GIL is no longer
created âon demandâ to fix a race condition when PyGILState_Ensure() is
called in a non-Python thread.
: Leading whitespace is now correctly ignored when generating
suggestions for converting Py2 print statements to Py3 builtin print
function calls. Patch by Sanyam Khurana.
: Make dict.copy() up to 5.5 times faster.
: Get rid of recursion in the compiler for normal control flow.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix coroutineâs ResourceWarning when thereâs an active error
set when itâs being finalized.

: Pdb and other debuggers dependent on bdb.py will correctly step
over (next command) native coroutines. Patch by Pablo Galindo.

: Optimize list.sort() and sorted() by using type specialized
comparisons when possible.

: Improve suggestion when the Python 2 form of print statement is
either present on the same line as the header of a compound statement or
else terminated by a semi-colon instead of a newline. Patch by Nitish
Chandra.

: Python now explicitly preserves the definition order of
keyword-only parameters.  Itâs always preserved their order, but this
behavior was never guaranteed before; this behavior is now guaranteed and
tested.

: The locals() dictionary now displays in the lexical order that
variables were defined.  Previously, the order was reversed.

: Add .isascii() method to ,  and
. It can be used to test that string contains only ASCII
characters.

: Enforce  for all code. This means that manually
raising a StopIteration exception from a generator is prohibited for all
code, regardless of whether âfrom __future__ import generator_stopâ was
used or not.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Added built-in support for tracking the origin of coroutine
objects; see sys.set_coroutine_origin_tracking_depth and
CoroutineType.cr_origin. This replaces the asyncio debug modeâs use of
coroutine wrapping for native coroutine objects.

: Expose preadv and pwritev system calls in the os module. Patch
by Pablo Galindo

: hasattr(obj,  and getattr(obj,   are
about 4 times faster than before when  is not found and 
doesnât override __getattr__ or __getattribute__.

: Improved frozenset() hash to create more distinct hash values
when faced with datasets containing many similar values.

: Remove the STORE_ANNOTATION bytecode.

: Expose posix_spawn as a low level API in the os module.
(removed before 3.7.0rc1)

: Fixed estimation of the code stack size.

: Implement  Context Variables.

:  on a dict containing its own  or
 no longer raises RecursionError; OrderedDict similarly.
Instead, use , as for other recursive structures.  Patch by Ben
North.

: Py_Initialize() now creates the GIL. The GIL is no longer
created âon demandâ to fix a race condition when PyGILState_Ensure() is
called in a non-Python thread.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Leading whitespace is now correctly ignored when generating
suggestions for converting Py2 print statements to Py3 builtin print
function calls. Patch by Sanyam Khurana.

: Make dict.copy() up to 5.5 times faster.

: Get rid of recursion in the compiler for normal control flow.

================================================================================

# Changelog - Library (Part 1)

List:
: Deprecate exposing the contents of collections.abc in the
regular collections module.
: The default cipher suite selection of the ssl module now uses a
blacklist approach rather than a hard-coded whitelist. Python no longer
re-enables ciphers that have been blocked by OpenSSL security update.
Default cipher suite selection can be configured on compile time.
: contextlib.contextmanager now releases the arguments passed to
the underlying generator as soon as the context manager is entered.
Previously it would keep them alive for as long as the context manager was
alive, even when not being used as a function decorator. Patch by Martin
Teichmann.
: Added support for setting the compression level for
zipfile.ZipFile.
: Implement asyncio.BufferedProtocol (provisional API).
: In dataclasses, allow easier overriding of dunder methods
without specifying decorator parameters.
:  makes available , ,
,  and  also under Solaris/derivatives.
: Fix email address header parsing error when the username is an
empty quoted string. Patch by Xiang Zhang.
: Under Solaris and derivatives, os.stat_result provides
a st_fstype attribute.
: Implement Server.start_serving(), Server.serve_forever(), and
Server.is_serving() methods.  Add âstart_servingâ keyword parameter to
loop.create_server() and loop.create_unix_server().
: Implement asyncio.StreamWriter.wait_closed() and
asyncio.StreamWriter.is_closing() methods
: Make Task._step, Task._wakeup and Future._schedule_callbacks
methods private.
: Refactor decimal module to use contextvars to store decimal
context.
: Add asyncio.AbstractEventLoop.sendfile() method.
: distutilsâ upload command no longer corrupts tar files ending
with a CR byte, and no longer tries to convert CR to CRLF in any of the
upload text fields.
: uuid.uuid1 no longer raises an exception if a 64-bit hardware
address is encountered.
: concurrent.futures imports ThreadPoolExecutor and
ProcessPoolExecutor lazily (using ). It makes 
 about 15% faster because asyncio uses only
ThreadPoolExecutor by default.
: Add  to  so temporary variables can be used
during class construction without being turned into members.
: Use queue.SimpleQueue() in places where it can be invoked from
a weakref callback.
: Fix memory leak in asyncio.Queue, when the queue has limited
size and it is full, the cancelation of queue.put() can cause a memory
leak. Patch by: JosÃ© Melero.
: The nis module is now compatible with new libnsl and headers
location.
: collections.abc.ValuesView now inherits from
collections.abc.Collection.
: Improve ABCMeta._dump_registry() output readability
: New argument capture_output for subprocess.run
: glibc has removed Sun RPC. Use replacement libtirpc headers and
library in nis module.
: UUID module fixes build for FreeBSD/OpenBSD
: Pickling with protocol 4 no longer creates too small frames.
: Create enum for pstats sorting options
: Add close(fd) function to the socket module.
: The subprocess module is now more graceful when handling a
Ctrl-C KeyboardInterrupt during subprocess.call, subprocess.run, or a
Popen context manager.  It now waits a short amount of time for the child
(presumed to have also gotten the SIGINT) to exit, before continuing the
KeyboardInterrupt exception handling.  This still includes a SIGKILL in
the call() and run() APIs, but at least the child had a chance first.
: The hmac module now has hmac.digest(), which provides an
optimized HMAC digest.
: Sockets now auto-detect family, type and protocol from file
descriptor by default.
: Fix bug where datetime.datetime.fromtimestamp() did not
call __new__ in datetime.datetime subclasses.
: Improved speed of datetime.date and
datetime.datetime alternate constructors.
: Ensure that truncate() preserves the file position (as
reported by ) after writes longer than the buffer size.
: Implement loop.sock_sendfile for asyncio event loop.
: Added seek and tell to the ZipExtFile class. This only works if
the file object used to open the zipfile is seekable.
: Add socket.getblocking() method.
: Add importlib.resources and
importlib.abc.ResourceReader as the unified API for reading
resources contained within packages.  Loaders wishing to support resource
reading must implement the get_resource_reader() method.  File-based
and zipimport-based loaders both implement these APIs.
importlib.abc.ResourceLoader is deprecated in favor of these new
APIs.
: collections.namedtuple() now supports default values.
: Add contextlib.AsyncExitStack. Patch by Alexander Mohr and Ilya
Kulakov.
: Removed in Python 3.7.0b2. The  argument of
subprocess.Popen can now be a path-like object. If  is given
as a sequence, itâs first element can now be a path-like object as
well.
: The locale.localeconv() function now sets temporarily the
 locale to the LC_NUMERIC locale to decode
decimal_point and thousands_sep byte strings if they are non-ASCII
or longer than 1 byte, and the LC_NUMERIC locale is different than the
 locale. This temporary change affects other threads. Same
change for the str.format() method when formatting a number
(, ,  and subclasses) with the
 type (ex: '{:n}'.format(1234)).
: Use super().method instead of socket.method in SSLSocket.  They
were there most likely for legacy reasons.
: The ssl module now uses OpenSSLâs X509_VERIFY_PARAM_set1_host()
and X509_VERIFY_PARAM_set1_ip() API to verify hostname and IP addresses.
Subject common name fallback can be disabled with
SSLContext.hostname_checks_common_name.
: Add a queue.SimpleQueue class, an unbounded FIFO queue with a
reentrant C implementation of put().

================================================================================

# Changelog - Library (Part 2)

: Deprecate exposing the contents of collections.abc in the
regular collections module.

: The default cipher suite selection of the ssl module now uses a
blacklist approach rather than a hard-coded whitelist. Python no longer
re-enables ciphers that have been blocked by OpenSSL security update.
Default cipher suite selection can be configured on compile time.

: contextlib.contextmanager now releases the arguments passed to
the underlying generator as soon as the context manager is entered.
Previously it would keep them alive for as long as the context manager was
alive, even when not being used as a function decorator. Patch by Martin
Teichmann.

: Added support for setting the compression level for
zipfile.ZipFile.

: Implement asyncio.BufferedProtocol (provisional API).

: In dataclasses, allow easier overriding of dunder methods
without specifying decorator parameters.

:  makes available , ,
,  and  also under Solaris/derivatives.

: Fix email address header parsing error when the username is an
empty quoted string. Patch by Xiang Zhang.

: Under Solaris and derivatives, os.stat_result provides
a st_fstype attribute.

================================================================================

# Changelog - Library (Part 3)

: Implement Server.start_serving(), Server.serve_forever(), and
Server.is_serving() methods.  Add âstart_servingâ keyword parameter to
loop.create_server() and loop.create_unix_server().

: Implement asyncio.StreamWriter.wait_closed() and
asyncio.StreamWriter.is_closing() methods

: Make Task._step, Task._wakeup and Future._schedule_callbacks
methods private.

: Refactor decimal module to use contextvars to store decimal
context.

: Add asyncio.AbstractEventLoop.sendfile() method.

: distutilsâ upload command no longer corrupts tar files ending
with a CR byte, and no longer tries to convert CR to CRLF in any of the
upload text fields.

: uuid.uuid1 no longer raises an exception if a 64-bit hardware
address is encountered.

: concurrent.futures imports ThreadPoolExecutor and
ProcessPoolExecutor lazily (using ). It makes 
 about 15% faster because asyncio uses only
ThreadPoolExecutor by default.

: Add  to  so temporary variables can be used
during class construction without being turned into members.

: Use queue.SimpleQueue() in places where it can be invoked from
a weakref callback.

================================================================================

# Changelog - Library (Part 4)

: Fix memory leak in asyncio.Queue, when the queue has limited
size and it is full, the cancelation of queue.put() can cause a memory
leak. Patch by: JosÃ© Melero.

: The nis module is now compatible with new libnsl and headers
location.

: collections.abc.ValuesView now inherits from
collections.abc.Collection.

: Improve ABCMeta._dump_registry() output readability

: New argument capture_output for subprocess.run

: glibc has removed Sun RPC. Use replacement libtirpc headers and
library in nis module.

: UUID module fixes build for FreeBSD/OpenBSD

: Pickling with protocol 4 no longer creates too small frames.

: Create enum for pstats sorting options

: Add close(fd) function to the socket module.

: The subprocess module is now more graceful when handling a
Ctrl-C KeyboardInterrupt during subprocess.call, subprocess.run, or a
Popen context manager.  It now waits a short amount of time for the child
(presumed to have also gotten the SIGINT) to exit, before continuing the
KeyboardInterrupt exception handling.  This still includes a SIGKILL in
the call() and run() APIs, but at least the child had a chance first.

: The hmac module now has hmac.digest(), which provides an
optimized HMAC digest.

================================================================================

# Changelog - Library (Part 5)

: Sockets now auto-detect family, type and protocol from file
descriptor by default.

: Fix bug where datetime.datetime.fromtimestamp() did not
call __new__ in datetime.datetime subclasses.

: Improved speed of datetime.date and
datetime.datetime alternate constructors.

: Ensure that truncate() preserves the file position (as
reported by ) after writes longer than the buffer size.

: Implement loop.sock_sendfile for asyncio event loop.

: Added seek and tell to the ZipExtFile class. This only works if
the file object used to open the zipfile is seekable.

: Add socket.getblocking() method.

: Add importlib.resources and
importlib.abc.ResourceReader as the unified API for reading
resources contained within packages.  Loaders wishing to support resource
reading must implement the get_resource_reader() method.  File-based
and zipimport-based loaders both implement these APIs.
importlib.abc.ResourceLoader is deprecated in favor of these new
APIs.

: collections.namedtuple() now supports default values.

: Add contextlib.AsyncExitStack. Patch by Alexander Mohr and Ilya
Kulakov.

================================================================================

# Changelog - Library (Part 6)

: Removed in Python 3.7.0b2. The  argument of
subprocess.Popen can now be a path-like object. If  is given
as a sequence, itâs first element can now be a path-like object as
well.

: The locale.localeconv() function now sets temporarily the
 locale to the LC_NUMERIC locale to decode
decimal_point and thousands_sep byte strings if they are non-ASCII
or longer than 1 byte, and the LC_NUMERIC locale is different than the
 locale. This temporary change affects other threads. Same
change for the str.format() method when formatting a number
(, ,  and subclasses) with the
 type (ex: '{:n}'.format(1234)).

: Use super().method instead of socket.method in SSLSocket.  They
were there most likely for legacy reasons.

: The ssl module now uses OpenSSLâs X509_VERIFY_PARAM_set1_host()
and X509_VERIFY_PARAM_set1_ip() API to verify hostname and IP addresses.
Subject common name fallback can be disabled with
SSLContext.hostname_checks_common_name.

: Add a queue.SimpleQueue class, an unbounded FIFO queue with a
reentrant C implementation of put().

================================================================================

# Changelog - Documentation

List:
: Add references to some commands in the documentation of Pdb.
Patch by StÃ©phane Wirtel
: Complete the C API documentation, profiling and tracing part
with the newly added per-opcode events.
: Explain real behaviour of sys.settrace and sys.setprofile and
their C-API counterparts regarding which type of events are received in
each function. Patch by Pablo Galindo Salgado.

: Add references to some commands in the documentation of Pdb.
Patch by StÃ©phane Wirtel

: Complete the C API documentation, profiling and tracing part
with the newly added per-opcode events.

: Explain real behaviour of sys.settrace and sys.setprofile and
their C-API counterparts regarding which type of events are received in
each function. Patch by Pablo Galindo Salgado.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix test_hashlib to not fail if the _md5 module is not built.
: Add test cases for IDNA 2003 and 2008 host names. IDNA 2003
internationalized host names are working since  has landed. IDNA
2008 are still broken.
: Add a new â_xxsubinterpretersâ extension module that exposes
the existing subinterpreter C-API and a new cross-interpreter data sharing
mechanism. The module is primarily intended for more thorough testing of
the existing subinterpreter support. Note that the _xxsubinterpreters
module has been removed in 3.7.0rc1.
: Add test certs and test for ECDSA cert and EC/RSA dual mode.
: On Travis CI, Python now Compiles and uses a local copy of
OpenSSL 1.1.0g for testing.

: Fix test_hashlib to not fail if the _md5 module is not built.

: Add test cases for IDNA 2003 and 2008 host names. IDNA 2003
internationalized host names are working since  has landed. IDNA
2008 are still broken.

================================================================================

# Changelog - Tests (Part 2)

: Add a new â_xxsubinterpretersâ extension module that exposes
the existing subinterpreter C-API and a new cross-interpreter data sharing
mechanism. The module is primarily intended for more thorough testing of
the existing subinterpreter support. Note that the _xxsubinterpreters
module has been removed in 3.7.0rc1.

: Add test certs and test for ECDSA cert and EC/RSA dual mode.

: On Travis CI, Python now Compiles and uses a local copy of
OpenSSL 1.1.0g for testing.

================================================================================

# Changelog - Build

List:
: Fix segfault of the crypt module when libxcrypt is provided
instead of libcrypt at the system.
: Use autoconf to detect OpenSSL libs, headers and supported
features. The ax_check_openssl M4 macro uses pkg-config to locate OpenSSL
and falls back to manual search.
: Drop support of FreeBSD 9 and older.
: If the SOURCE_DATE_EPOCH environment variable is set,
py_compile will always create hash-based  files.

: Fix segfault of the crypt module when libxcrypt is provided
instead of libcrypt at the system.

: Use autoconf to detect OpenSSL libs, headers and supported
features. The ax_check_openssl M4 macro uses pkg-config to locate OpenSSL
and falls back to manual search.

: Drop support of FreeBSD 9 and older.

: If the SOURCE_DATE_EPOCH environment variable is set,
py_compile will always create hash-based  files.

================================================================================

# Changelog - Windows

List:
: Create standalone _distutils_findvs module and add missing
_queue module to installer.
: Ensure separate Modify and Uninstall buttons are displayed.
: Use app-local UCRT install rather than the proper update for
old versions of Windows.

: Create standalone _distutils_findvs module and add missing
_queue module to installer.

: Ensure separate Modify and Uninstall buttons are displayed.

: Use app-local UCRT install rather than the proper update for
old versions of Windows.

================================================================================

# Changelog - macOS

List:
: Provide an additional, more modern macOS installer variant that
supports macOS 10.9+ systems in 64-bit mode only.  Upgrade the supplied
third-party libraries to OpenSSL 1.1.0g and to SQLite 3.22.0.  The 10.9+
installer now links with and supplies its own copy of Tcl/Tk 8.6.
: No longer add /Library/Python/3.x/site-packages to sys.path for
macOS framework builds to avoid future conflicts.

: Provide an additional, more modern macOS installer variant that
supports macOS 10.9+ systems in 64-bit mode only.  Upgrade the supplied
third-party libraries to OpenSSL 1.1.0g and to SQLite 3.22.0.  The 10.9+
installer now links with and supplies its own copy of Tcl/Tk 8.6.

: No longer add /Library/Python/3.x/site-packages to sys.path for
macOS framework builds to avoid future conflicts.

================================================================================

# Changelog - C API

List:
: Fix uninitialized variable âresâ in the C implementation of
os.dup2. Patch by StÃ©phane Wirtel
: Add C API access to the datetime.timezone constructor and
datetime.timzone.UTC singleton.

: Fix uninitialized variable âresâ in the C implementation of
os.dup2. Patch by StÃ©phane Wirtel

: Add C API access to the datetime.timezone constructor and
datetime.timzone.UTC singleton.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: The default warning filter list now starts with a
âdefault::DeprecationWarning:__main__â entry, so deprecation warnings are
once again shown by default in single-file scripts and at the interactive
prompt.
: __class_getitem__ is now an automatic class method.
: Add AIX uuid library support for RFC4122 using uuid_create() in
libc.a
: Fix the compilation failure on AIX after the f_fsid field has
been added to the object returned by os.statvfs() (). Original
patch by Michael Felt.
: Make MRO computation faster when a class inherits from a single
base.
: The error message of a TypeError raised when unpack
non-iterable is now more specific.
: The  constant is now optimized out at compile
time. This fixes also .
: The  option now turns on hash randomization when
the PYTHONHASHSEED environment variable is set to .
Previously, the option was ignored. Moreover,
sys.flags.hash_randomization is now properly set to 0 when hash
randomization is turned off by PYTHONHASHSEED=0.
: The optimizer is now protected from spending much time doing
complex calculations and consuming much memory for creating large
constants in constant folding. Increased limits for constants that can be
produced in constant folding.
: Fix an unnecessary ifdef in the include of VersionHelpers.h in
socketmodule on Windows.
: Implement TracebackType.__new__ to allow Python-level creation
of traceback objects, and make TracebackType.tb_next mutable.
: Donât byte swap the input keys to the SipHash algorithm on
big-endian platforms. This should ensure siphash gives consistent results
across platforms.
: Improve the error message logic for object.__new__ and
object.__init__. Patch by Sanyam Khurana.
:  and  now inject 'default::BytesWarning' and
error::BytesWarning entries into sys.warnoptions, ensuring that
they take precedence over any other warning filters configured via the
 option or the PYTHONWARNINGS environment variable.
:   now injects a  entry into
sys.warnoptions, ensuring that it behaves identically to actually passing
 at the command line.
: Add a new UTF-8 mode: implementation of the .
: : Add support for __mro_entries__ and
__class_getitem__. Implemented by Ivan Levkivskyi.
: : Add support for module __getattr__ and
. Implemented by Ivan Levkivskyi.
: The  module now has its callback stored per
interpreter.
: Implement  (Deterministic pycs). Python now supports
invalidating bytecode cache files bashed on a source content hash rather
than source last-modified time.
: Move constant folding from bytecode layer to AST layer.
Original patch by Eugene Toder.

================================================================================

# Changelog - Core and Builtins (Part 2)

: The default warning filter list now starts with a
âdefault::DeprecationWarning:__main__â entry, so deprecation warnings are
once again shown by default in single-file scripts and at the interactive
prompt.

: __class_getitem__ is now an automatic class method.

: Add AIX uuid library support for RFC4122 using uuid_create() in
libc.a

: Fix the compilation failure on AIX after the f_fsid field has
been added to the object returned by os.statvfs() (). Original
patch by Michael Felt.

: Make MRO computation faster when a class inherits from a single
base.

: The error message of a TypeError raised when unpack
non-iterable is now more specific.

: The  constant is now optimized out at compile
time. This fixes also .

: The  option now turns on hash randomization when
the PYTHONHASHSEED environment variable is set to .
Previously, the option was ignored. Moreover,
sys.flags.hash_randomization is now properly set to 0 when hash
randomization is turned off by PYTHONHASHSEED=0.

================================================================================

# Changelog - Core and Builtins (Part 3)

: The optimizer is now protected from spending much time doing
complex calculations and consuming much memory for creating large
constants in constant folding. Increased limits for constants that can be
produced in constant folding.

: Fix an unnecessary ifdef in the include of VersionHelpers.h in
socketmodule on Windows.

: Implement TracebackType.__new__ to allow Python-level creation
of traceback objects, and make TracebackType.tb_next mutable.

: Donât byte swap the input keys to the SipHash algorithm on
big-endian platforms. This should ensure siphash gives consistent results
across platforms.

: Improve the error message logic for object.__new__ and
object.__init__. Patch by Sanyam Khurana.

:  and  now inject 'default::BytesWarning' and
error::BytesWarning entries into sys.warnoptions, ensuring that
they take precedence over any other warning filters configured via the
 option or the PYTHONWARNINGS environment variable.

:   now injects a  entry into
sys.warnoptions, ensuring that it behaves identically to actually passing
 at the command line.

: Add a new UTF-8 mode: implementation of the .

: : Add support for __mro_entries__ and
__class_getitem__. Implemented by Ivan Levkivskyi.

================================================================================

# Changelog - Core and Builtins (Part 4)

: : Add support for module __getattr__ and
. Implemented by Ivan Levkivskyi.

: The  module now has its callback stored per
interpreter.

: Implement  (Deterministic pycs). Python now supports
invalidating bytecode cache files bashed on a source content hash rather
than source last-modified time.

: Move constant folding from bytecode layer to AST layer.
Original patch by Eugene Toder.

================================================================================

# Changelog - Library (Part 1)

List:
: Now that dict is defined as keeping insertion order, drop
OrderedDict and just use plain dict.
: Add params to dataclasses.make_dataclasses(): init, repr, eq,
order, hash, and frozen.  Pass them through to dataclass().
: Make type information optional on dataclasses.make_dataclass().
If omitted, the string âtyping.Anyâ is used.
: Add dataclasses.is_dataclass(obj), which returns True if obj is
a dataclass or an instance of one.
: Improve frame repr() to mention filename, code name and current
line number.
: asyncio: Implement loop.start_tls()
: Return the new file descriptor (i.e., the second argument) from
. Previously,  was always returned.
: functools.lru_cache uses less memory (3 words for each
cached key) and takes about 1/3 time for cyclic GC.
: Prevent Python crash from happening when Future._log_traceback
is set to True manually.  Now it can only be set to False, or a ValueError
is raised.
: asyncio: Add Task.get_loop() and Future.get_loop()
: Donât unsubscribe signals in asyncio UNIX event loop on
interpreter shutdown.
: Make asyncio.Task.set_exception() and set_result() raise
NotImplementedError. Task._step() and Future.__await__() raise proper
exceptions when they are in an invalid state, instead of raising an
AssertionError.
: Optimize asyncio.iscoroutine() and loop.create_task() for
non-native coroutines (e.g. async/await compiled with Cython).
âloop.create_task(python_coroutine)â used to be 20% faster than
âloop.create_task(cython_coroutine)â.  Now, the latter is as fast.
: asyncio.transport.resume_reading() and pause_reading() are now
idempotent. New transport.is_reading() method is added.
: Optimize asyncio.gather(); now up to 15% faster.
: Use fastpath in asyncio.sleep if delay<0 (2x boost)
: Optimize asyncio.Future schedule/add/remove callback.  The
optimization shows 3-6% performance improvements of async/await code.
: Fix socket.settimeout() and socket.setblocking() to keep
socket.type as is. Fix socket.socket() constructor to reset any bit flags
applied to socketâs type.  This change only affects OSes that have
SOCK_NONBLOCK and/or SOCK_CLOEXEC.
: Add importlib.abc.ResourceReader as an ABC for loaders
to provide a unified API for reading resources contained within packages.
Also add importlib.resources as the port of
importlib_resources.
: Implement asyncio.create_task(coro) shortcut
: Convert asyncio functions that were documented as coroutines to
coroutines. Affected functions: loop.sock_sendall, loop.sock_recv,
loop.sock_accept, loop.getaddrinfo, loop.getnameinfo.
: urllib.parse.urlsplit() does not convert zone-id (scope)
to lower case for scoped IPv6 addresses in hostnames now.
: Fix bdist_wininst of distutils for CRT v142: it binary
compatible with CRT v140.
: Fix stop_serving in asyncio proactor loop kill all
listening servers
:  now replaces empty matches adjacent to a
previous non-empty match.
: Abort asyncio SSLProtocol connection if handshake not complete
within 10 seconds.
: Implement asyncio.run().
: Revert incorrect fix based on misunderstanding of
_Py_PyAtExit() semantics.
: Implement asyncio._get_running_loop() and get_event_loop() in
C. This makes them 4x faster.
: Implement asyncio.current_task() and
asyncio.all_tasks(). Add helpers intended to be used by alternative
task implementations: asyncio._register_task, asyncio._enter_task,
asyncio._leave_task and asyncio._unregister_task. Deprecate
asyncio.Task.current_task() and asyncio.Task.all_tasks().
: A single empty field is now always quoted when written into a
CSV file. This allows to distinguish an empty row from a row consisting of
a single empty field. Patch by Licht Takeuchi.
: Raise NotImplementedError instead of SystemError on
platforms where chmod(..., follow_symlinks=False) is not supported.
Patch by Anthony Sottile.
: New argument warn_on_full_buffer to signal.set_wakeup_fd lets
you control whether Python prints a warning on stderr when the wakeup fd
buffer overflows.
: The  library has been removed. It was never enabled
by default, never worked correctly on x86-64, and it changed the Python
ABI in ways that caused unexpected breakage of C extensions.
: Move asyncio.test_utils to test.test_asyncio.
: Remove asyncio.async() function.
: Add asyncio.get_running_loop() function.
: All class and static methods of builtin types now are correctly
classified by inspect.classify_class_attrs() and grouped in pydoc ouput.
Added types.ClassMethodDescriptorType for unbound class methods of builtin
types.
: Deprecate   ,  ,  
  and    for asyncio synchronization
primitives.
: Changed MIME type of .bmp from âimage/x-ms-bmpâ to âimage/bmpâ
: Convert asyncio to use async/await syntax. Old styled 
 is still supported too.
: Add support to run modules with pdb
: functools.singledispatch now supports registering
implementations using type annotations.
: Added new alternate constructors
datetime.datetime.fromisoformat(),
datetime.time.fromisoformat() and
datetime.date.fromisoformat() as the inverse operation of each
classesâs respective  methods.
: The getnode() ip getter now uses âip linkâ instead of âip link
listâ.
: os.statvfs() includes the f_fsid field from statvfs(2)
: Fix ctypes.util.find_library() for AIX by implementing
ctypes._aix.find_library() Patch by: Michael Felt
: The pickler now uses less memory when serializing large bytes
and str objects into a file.  Pickles created with protocol 4 will require
less memory for unpickling large bytes and str objects.
: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.
: ast.literal_eval() is now more strict. Addition and subtraction
of arbitrary numbers no longer allowed.
: Importing native path module (, ) now
works even if the  module still is not imported.
: Add contextlib.AbstractAsyncContextManager. Patch by Jelle
Zijlstra.
: Fix deadlocks in
concurrent.futures.ProcessPoolExecutor when task arguments or
results cause pickling or unpickling errors. This should make sure that
calls to the ProcessPoolExecutor API always eventually return.
: TextIOWrapper.reconfigure() supports changing ,
, and .

================================================================================

# Changelog - Library (Part 2)

: Now that dict is defined as keeping insertion order, drop
OrderedDict and just use plain dict.

: Add params to dataclasses.make_dataclasses(): init, repr, eq,
order, hash, and frozen.  Pass them through to dataclass().

: Make type information optional on dataclasses.make_dataclass().
If omitted, the string âtyping.Anyâ is used.

: Add dataclasses.is_dataclass(obj), which returns True if obj is
a dataclass or an instance of one.

: Improve frame repr() to mention filename, code name and current
line number.

: asyncio: Implement loop.start_tls()

: Return the new file descriptor (i.e., the second argument) from
. Previously,  was always returned.

: functools.lru_cache uses less memory (3 words for each
cached key) and takes about 1/3 time for cyclic GC.

: Prevent Python crash from happening when Future._log_traceback
is set to True manually.  Now it can only be set to False, or a ValueError
is raised.

: asyncio: Add Task.get_loop() and Future.get_loop()

: Donât unsubscribe signals in asyncio UNIX event loop on
interpreter shutdown.

================================================================================

# Changelog - Library (Part 3)

: Make asyncio.Task.set_exception() and set_result() raise
NotImplementedError. Task._step() and Future.__await__() raise proper
exceptions when they are in an invalid state, instead of raising an
AssertionError.

: Optimize asyncio.iscoroutine() and loop.create_task() for
non-native coroutines (e.g. async/await compiled with Cython).
âloop.create_task(python_coroutine)â used to be 20% faster than
âloop.create_task(cython_coroutine)â.  Now, the latter is as fast.

: asyncio.transport.resume_reading() and pause_reading() are now
idempotent. New transport.is_reading() method is added.

: Optimize asyncio.gather(); now up to 15% faster.

: Use fastpath in asyncio.sleep if delay<0 (2x boost)

: Optimize asyncio.Future schedule/add/remove callback.  The
optimization shows 3-6% performance improvements of async/await code.

: Fix socket.settimeout() and socket.setblocking() to keep
socket.type as is. Fix socket.socket() constructor to reset any bit flags
applied to socketâs type.  This change only affects OSes that have
SOCK_NONBLOCK and/or SOCK_CLOEXEC.

================================================================================

# Changelog - Library (Part 4)

: Add importlib.abc.ResourceReader as an ABC for loaders
to provide a unified API for reading resources contained within packages.
Also add importlib.resources as the port of
importlib_resources.

: Implement asyncio.create_task(coro) shortcut

: Convert asyncio functions that were documented as coroutines to
coroutines. Affected functions: loop.sock_sendall, loop.sock_recv,
loop.sock_accept, loop.getaddrinfo, loop.getnameinfo.

: urllib.parse.urlsplit() does not convert zone-id (scope)
to lower case for scoped IPv6 addresses in hostnames now.

: Fix bdist_wininst of distutils for CRT v142: it binary
compatible with CRT v140.

: Fix stop_serving in asyncio proactor loop kill all
listening servers

:  now replaces empty matches adjacent to a
previous non-empty match.

: Abort asyncio SSLProtocol connection if handshake not complete
within 10 seconds.

: Implement asyncio.run().

: Revert incorrect fix based on misunderstanding of
_Py_PyAtExit() semantics.

: Implement asyncio._get_running_loop() and get_event_loop() in
C. This makes them 4x faster.

================================================================================

# Changelog - Library (Part 5)

: Implement asyncio.current_task() and
asyncio.all_tasks(). Add helpers intended to be used by alternative
task implementations: asyncio._register_task, asyncio._enter_task,
asyncio._leave_task and asyncio._unregister_task. Deprecate
asyncio.Task.current_task() and asyncio.Task.all_tasks().

: A single empty field is now always quoted when written into a
CSV file. This allows to distinguish an empty row from a row consisting of
a single empty field. Patch by Licht Takeuchi.

: Raise NotImplementedError instead of SystemError on
platforms where chmod(..., follow_symlinks=False) is not supported.
Patch by Anthony Sottile.

: New argument warn_on_full_buffer to signal.set_wakeup_fd lets
you control whether Python prints a warning on stderr when the wakeup fd
buffer overflows.

: The  library has been removed. It was never enabled
by default, never worked correctly on x86-64, and it changed the Python
ABI in ways that caused unexpected breakage of C extensions.

: Move asyncio.test_utils to test.test_asyncio.

: Remove asyncio.async() function.

: Add asyncio.get_running_loop() function.

================================================================================

# Changelog - Library (Part 6)

: All class and static methods of builtin types now are correctly
classified by inspect.classify_class_attrs() and grouped in pydoc ouput.
Added types.ClassMethodDescriptorType for unbound class methods of builtin
types.

: Deprecate   ,  ,  
  and    for asyncio synchronization
primitives.

: Changed MIME type of .bmp from âimage/x-ms-bmpâ to âimage/bmpâ

: Convert asyncio to use async/await syntax. Old styled 
 is still supported too.

: Add support to run modules with pdb

: functools.singledispatch now supports registering
implementations using type annotations.

: Added new alternate constructors
datetime.datetime.fromisoformat(),
datetime.time.fromisoformat() and
datetime.date.fromisoformat() as the inverse operation of each
classesâs respective  methods.

: The getnode() ip getter now uses âip linkâ instead of âip link
listâ.

: os.statvfs() includes the f_fsid field from statvfs(2)

: Fix ctypes.util.find_library() for AIX by implementing
ctypes._aix.find_library() Patch by: Michael Felt

================================================================================

# Changelog - Library (Part 7)

: The pickler now uses less memory when serializing large bytes
and str objects into a file.  Pickles created with protocol 4 will require
less memory for unpickling large bytes and str objects.

: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.

: ast.literal_eval() is now more strict. Addition and subtraction
of arbitrary numbers no longer allowed.

: Importing native path module (, ) now
works even if the  module still is not imported.

: Add contextlib.AbstractAsyncContextManager. Patch by Jelle
Zijlstra.

: Fix deadlocks in
concurrent.futures.ProcessPoolExecutor when task arguments or
results cause pickling or unpickling errors. This should make sure that
calls to the ProcessPoolExecutor API always eventually return.

: TextIOWrapper.reconfigure() supports changing ,
, and .

================================================================================

# Changelog - Documentation

List:
: Add get_loop() method to Server and AbstractServer classes.

: Add get_loop() method to Server and AbstractServer classes.

================================================================================

# Changelog - Tests

List:
: Fix faulthandler_suppress_crash_report() used to prevent core
dump files when testing crashes. getrlimit() returns zero on success.
: Adjust C locale coercion testing for the empty locale and POSIX
locale cases to more readily adjust to platform dependent behaviour.

: Fix faulthandler_suppress_crash_report() used to prevent core
dump files when testing crashes. getrlimit() returns zero on success.

: Adjust C locale coercion testing for the empty locale and POSIX
locale cases to more readily adjust to platform dependent behaviour.

================================================================================

# Changelog - Windows

List:
: Implement support for subprocess.Popen(close_fds=True) on
Windows. Patch by Segev Finer.

: Implement support for subprocess.Popen(close_fds=True) on
Windows. Patch by Segev Finer.

================================================================================

# Changelog - Tools/Demos

List:
: 2to3 and lib2to3 can now read pickled grammar files using
pkgutil.get_data() rather than probing the filesystem. This lets 2to3 and
lib2to3 work when run from a zipfile.

: 2to3 and lib2to3 can now read pickled grammar files using
pkgutil.get_data() rather than probing the filesystem. This lets 2to3 and
lib2to3 work when run from a zipfile.

================================================================================

# Changelog - C API

List:
: Py_Initialize() doesnât reset the memory allocators to default
if the PYTHONMALLOC environment variable is not set.
: Undocumented C API for OrderedDict has been excluded from the
limited C API. It was added by mistake and actually never worked in the
limited C API.
: Moved the pygetopt.h header into internal/, since it has no
public APIs.
: Py_SetProgramName() and Py_SetPythonHome()
now take the    arguments instead of  .

: Py_Initialize() doesnât reset the memory allocators to default
if the PYTHONMALLOC environment variable is not set.

: Undocumented C API for OrderedDict has been excluded from the
limited C API. It was added by mistake and actually never worked in the
limited C API.

: Moved the pygetopt.h header into internal/, since it has no
public APIs.

: Py_SetProgramName() and Py_SetPythonHome()
now take the    arguments instead of  .

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: co_flags.CO_NOFREE is now always set correctly by the code
object constructor based on freevars and cellvars, rather than needing to
be set correctly by the caller. This ensures it will be cleared
automatically when additional cell references are injected into a modified
code object and function.
: Yield expressions are now deprecated in comprehensions and
generator expressions. They are still permitted in the definition of the
outermost iterable, as that is evaluated directly in the enclosing scope.
: The repr of deeply nested dict now raises a RecursionError
instead of crashing due to a stack overflow.
: Revert memory allocator changes in the C API: move structures
back from _PyRuntime to Objects/obmalloc.c. The memory allocators are once
again initialized statically, and so PyMem_RawMalloc() and
Py_DecodeLocale() can be called before _PyRuntime_Initialize().
: Add a new âdeveloper modeâ: new â-X devâ command line option to
enable debug checks at runtime.
: SyntaxError is now correctly raised when a generator expression
without parenthesis is used instead of an inheritance list in a class
definition. The duplication of the parentheses can be omitted only on
calls.
: SyntaxError is now correctly raised when a generator expression
without parenthesis is passed as an argument, but followed by a trailing
comma. A generator expression always needs to be directly inside a set of
parentheses and cannot have a comma on either side.
: A new internal _Py_SetLocaleFromEnv(category) helper
function has been added in order to improve the consistency of behaviour
across different  implementations (e.g. Android doesnât support
setting the locale from the environment by default).
: Fixed several issues in printing tracebacks
(PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now
suppresses printing tracebacks. Setting sys.tracebacklimit to None now
causes using the default limit. Setting sys.tracebacklimit to an integer
larger than LONG_MAX now means using the limit LONG_MAX rather than the
default limit. Fixed integer overflows in the case of more than 
traceback items on Windows. Fixed output errors handling.
: Fix the interactive interpreter looping endlessly when no
memory.
: Bytearray methods partition() and rpartition() now accept only
bytes-like objects as separator, as documented.  In particular they now
raise TypeError rather of returning a bogus result when an integer is
passed as a separator.
: BytesWarning no longer emitted when the  argument of
__import__() or the  attribute of the module contain bytes
instances.
: Environment variables are once more read correctly at
interpreter startup.
: Ensure that lexically first syntax error involving a parameter
and  or  is detected first at a given scope. Patch
by Ivan Levkivskyi.
: Fixed OverflowError in the âunicode-escapeâ codec and in
codecs.escape_decode() when decode an escaped non-ascii byte.
: The per-frame tracing logic added in 3.7a1 has been altered so
that frame->f_lineno is updated before either  or
 events are emitted. Previously, opcode events were emitted
first, and therefore would occasionally see stale line numbers on the
frame. The behavior of this feature has changed slightly as a result: when
both f_trace_lines and f_trace_opcodes are enabled, line events
now occur first.
: Print the full context/cause chain of exceptions on interpreter
exit, even if an exception in the chain is unhashable or compares equal to
later ones. Patch by Zane Bitter.
: Fix timeout rounding in the select module to round correctly
negative timeouts between -1.0 and 0.0. The functions now block waiting
for events as expected. Previously, the call was incorrectly non-blocking.
Patch by Pablo Galindo.
: Prevent crashes when calling methods of an uninitialized
zipimport.zipimporter object. Patch by Oren Milman.
: Standard repr() of BaseException with a single argument no
longer contains redundant trailing comma.
: Fixed a bug in debug memory allocator.  There was a write to
freed memory after shrinking a memory block.
: PyErr_PrintEx() clears now the ignored exception that may
be raised by _PySys_SetObjectId(), for example when no memory.

================================================================================

# Changelog - Core and Builtins (Part 2)

: co_flags.CO_NOFREE is now always set correctly by the code
object constructor based on freevars and cellvars, rather than needing to
be set correctly by the caller. This ensures it will be cleared
automatically when additional cell references are injected into a modified
code object and function.

: Yield expressions are now deprecated in comprehensions and
generator expressions. They are still permitted in the definition of the
outermost iterable, as that is evaluated directly in the enclosing scope.

: The repr of deeply nested dict now raises a RecursionError
instead of crashing due to a stack overflow.

: Revert memory allocator changes in the C API: move structures
back from _PyRuntime to Objects/obmalloc.c. The memory allocators are once
again initialized statically, and so PyMem_RawMalloc() and
Py_DecodeLocale() can be called before _PyRuntime_Initialize().

: Add a new âdeveloper modeâ: new â-X devâ command line option to
enable debug checks at runtime.

: SyntaxError is now correctly raised when a generator expression
without parenthesis is used instead of an inheritance list in a class
definition. The duplication of the parentheses can be omitted only on
calls.

================================================================================

# Changelog - Core and Builtins (Part 3)

: SyntaxError is now correctly raised when a generator expression
without parenthesis is passed as an argument, but followed by a trailing
comma. A generator expression always needs to be directly inside a set of
parentheses and cannot have a comma on either side.

: A new internal _Py_SetLocaleFromEnv(category) helper
function has been added in order to improve the consistency of behaviour
across different  implementations (e.g. Android doesnât support
setting the locale from the environment by default).

: Fixed several issues in printing tracebacks
(PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now
suppresses printing tracebacks. Setting sys.tracebacklimit to None now
causes using the default limit. Setting sys.tracebacklimit to an integer
larger than LONG_MAX now means using the limit LONG_MAX rather than the
default limit. Fixed integer overflows in the case of more than 
traceback items on Windows. Fixed output errors handling.

: Fix the interactive interpreter looping endlessly when no
memory.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Bytearray methods partition() and rpartition() now accept only
bytes-like objects as separator, as documented.  In particular they now
raise TypeError rather of returning a bogus result when an integer is
passed as a separator.

: BytesWarning no longer emitted when the  argument of
__import__() or the  attribute of the module contain bytes
instances.

: Environment variables are once more read correctly at
interpreter startup.

: Ensure that lexically first syntax error involving a parameter
and  or  is detected first at a given scope. Patch
by Ivan Levkivskyi.

: Fixed OverflowError in the âunicode-escapeâ codec and in
codecs.escape_decode() when decode an escaped non-ascii byte.

: The per-frame tracing logic added in 3.7a1 has been altered so
that frame->f_lineno is updated before either  or
 events are emitted. Previously, opcode events were emitted
first, and therefore would occasionally see stale line numbers on the
frame. The behavior of this feature has changed slightly as a result: when
both f_trace_lines and f_trace_opcodes are enabled, line events
now occur first.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Print the full context/cause chain of exceptions on interpreter
exit, even if an exception in the chain is unhashable or compares equal to
later ones. Patch by Zane Bitter.

: Fix timeout rounding in the select module to round correctly
negative timeouts between -1.0 and 0.0. The functions now block waiting
for events as expected. Previously, the call was incorrectly non-blocking.
Patch by Pablo Galindo.

: Prevent crashes when calling methods of an uninitialized
zipimport.zipimporter object. Patch by Oren Milman.

: Standard repr() of BaseException with a single argument no
longer contains redundant trailing comma.

: Fixed a bug in debug memory allocator.  There was a write to
freed memory after shrinking a memory block.

: PyErr_PrintEx() clears now the ignored exception that may
be raised by _PySys_SetObjectId(), for example when no memory.

================================================================================

# Changelog - Library (Part 1)

List:
: Two minor fixes for  module: allow shallow copying
instances of generic classes, improve interaction of __init_subclass__
with generics. Original PRs by Ivan Levkivskyi.
: PEP 557, Data Classes. Provides a decorator which adds
boilerplate methods to classes which use type annotations so specify
fields.
: The header folding algorithm for the new email policies has
been rewritten, which also fixes , , and .  In
particular, RFC2231 folding is now done correctly.
: io.FileIO.readall() and io.FileIO.read() now release the GIL
when getting the file size. Fixed hang of all threads with inaccessible
NFS server. Patch by Nir Soffer.
: Add sys.flags.dev_mode flag
: The asyncio.windows_utils.socketpair() function has been
removed: use directly socket.socketpair() which is available on all
platforms since Python 3.5 (before, it wasnât available on Windows).
asyncio.windows_utils.socketpair() was just an alias to
socket.socketpair on Python 3.5 and newer.
: warnings: In development (-X dev) and debug mode (pydebug
build), use the âdefaultâ action for ResourceWarning, rather than the
âalwaysâ action, in the default warnings filters.
: uuid.getnode() now preferentially returns universally
administered MAC addresses if available, over locally administered MAC
addresses.  This makes a better guarantee for global uniqueness of UUIDs
returned from uuid.uuid1().  If only locally administered MAC
addresses are available, the first such one found is returned.
: Wildcard is now supported in hostname when it is one and only
character in the left most segment of hostname in second argument of
ssl.match_hostname().  Patch by Mandeep Singh.
: Make msilib.SummaryInformation.GetProperty() return
 when the value of property is .  Initial patch by
Mark Mc Mahon.
: Use os.path.expanduser() to find the  file in
netrc.netrc.  If it does not exist, FileNotFoundError is
raised.  Patch by Dimitri Merejkowsky.
: Made tracemalloc.Traceback behave more like the traceback
module, sorting the frames from oldest to most recent.
Traceback.format() now accepts negative , truncating the result
to the abs(limit) oldest frames. To get the old behaviour, one can use
the new most_recent_first argument to Traceback.format(). (Patch by
Jesse Bakker.)
: Fix wrong usage of collections.namedtuple() in the
RobotFileParser.parse()
method. Initial patch by Robin Wellner.
: msilib.OpenDatabase() now raises a better exception
message when it couldnât open or create an MSI file.  Initial patch by
William TisÃ¤ter.
:  now warns about invalid types for some fields. The
distutils.dist.Distribution class now warns when classifiers,
 and  fields are not specified as a list or a
string.
: Added the  command-line option to   
to run only tests that match the given pattern(s).
: Added nullcontext no-op context manager to contextlib. This
provides a simpler and faster alternative to ExitStack() when handling
optional context managers.
: The new test.support.skip_unless_bind_unix_socket() decorator
is used here to skip asyncio tests that fail because the platform lacks a
functional bind() function for unix domain sockets (as it is the case for
non root users on the recent Android versions that run now SELinux in
enforcing mode).
: codecs.StreamReader.read(n) now returns not more than 
characters/bytes for non-negative . This makes it compatible with
 methods of other file-like objects.
: The warnings module doesnât leak memory anymore in the hidden
warnings registry for the âignoreâ action of warnings filters.
warn_explicit() function doesnât add the warning key to the registry
anymore for the âignoreâ action.
: warnings:  When Python is build is debug mode (),
DeprecationWarning, PendingDeprecationWarning and
ImportWarning warnings are now displayed by default.
bpo-1647489: Fixed searching regular expression patterns that could match
an empty string. Non-empty string can now be correctly found after
matching an empty string.
: Added support of splitting on a pattern that could match an
empty string.
: Fixed issues with binary plists: Fixed saving bytearrays.
Identical objects will be saved only once. Equal references will be load
as identical objects. Added support for saving and loading recursive data
structures.
: Drop legacy SSL transport from asyncio, ssl.MemoryBIO is always
used anyway.
: asyncio: Support pathlib.Path in create_unix_connection; sock
arg should be optional
: Updates 2to3 to convert from operator.isCallable(obj) to
callable(obj). Patch by Donghee Na.
: inspect.signature should follow , if the parameter has
an annotation and a default value. Patch by Donghee Na.
: Add time.thread_time() and time.thread_time_ns()
: Integers that fit in a signed 32-bit integer will be now
pickled with protocol 0 using the INT opcode.  This will decrease the size
of a pickle, speed up pickling and unpickling, and make these integers be
unpickled as int instances in Python 2.
: Make asyncio.IncompleteReadError and LimitOverrunError
pickleable.
: Fixed the looping of asyncio in the case of reconnection the
socket during waiting async read/write from/to the socket.
: Restored support of loading marshal files with the TYPE_INT64
code. These files can be produced in Python 2.7.
: Enhance add_reader/writer check that socket is not used by some
transport. Before, only cases when add_reader/writer were called with an
int FD were supported.  Now the check is implemented correctly for all
file-like objects.
: Fix race condition when flushing a file is slow, which can
cause a segfault if closing the file from another thread.
: Formally deprecated aifc.openfp, sunau.openfp, and wave.openfp.
Since change 7bc817d5ba917528e8bd07ec461c635291e7b06a in 1993, openfp in
each of the three modules had been pointing to that moduleâs open function
as a matter of backwards compatibility, though it had been both untested
and undocumented.
: cProfile command line now accepts  module_name as an
alternative to script path. Patch by Sanyam Khurana.
: Reduce performance overhead of asyncio debug mode.
:  argument of sqlite3.connect() now accepts a
path-like object, instead of just a string.
: Add Configurable  to HTTPConnection and
HTTPSConnection for improved upload throughput.  Patch by Nir Soffer.
: Add a cancelled() method to asyncio.Handle.  Patch
by Marat Sharafutdinov.
: Fixed determining the MAC address in the uuid module: Using
ifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and
OpenBSD. Based on patch by Takayuki Shimizukawa.
: Fix potential missed signal in signal.signal().
: Fix Blake2 params leaf_size and node_offset on big endian
platforms. Patch by Jack OâConnor.
: Add an initializer argument to {Process,Thread}PoolExecutor
: Fixed compilation of the socket module on NetBSD 8.  Fixed
assertion failure or reading arbitrary data when parse a AF_BLUETOOTH
address on NetBSD and DragonFly BSD.
: Fixed stack corruption in curses.box() and curses.ungetmouse()
when the size of types chtype or mmask_t is less than the size of C long.
curses.box() now accepts characters as arguments.  Based on patch by Steve
Fink.
: Add 3 new clock identifiers: time.CLOCK_BOOTTIME,
time.CLOCK_PROF and time.CLOCK_UPTIME.
: plistlib now catches more errors when read binary plists and
raises InvalidFileException instead of unexpected exceptions.
: Fix the method for checking pad state of curses WINDOW. Patch
by Masayuki Yamamoto.
: Fixed the layout of the kqueue_event structure on OpenBSD and
NetBSD. Fixed the comparison of the kqueue_event objects.
: Fixed building the curses module on NetBSD.
: added required constants to subprocess module for setting
priority on windows
: Remove year (1-9999) limits on the Calendar.weekday() function.
Patch by Mark Gollahon.
: crypt.mksalt() now allows to specify the number of rounds for
SHA-256 and SHA-512 hashing.
: inspect.getfile() no longer computes the repr of unknown
objects to display in an error message, to protect against badly behaved
custom reprs.
: Fix the pthread+semaphore implementation of
PyThread_acquire_lock_timed() when called with timeout > 0 and
intr_flag=0: recompute the timeout if sem_timedwait() is interrupted by a
signal (EINTR). See also the .
: Add mmap.ACCESS_DEFAULT constant.
: Use optimized code for BLAKE2 only with SSSE3+. The pure SSE2
implementation is slower than the pure C reference implementation.
: Calendar.itermonthdates() will now consistently raise an
exception when a date falls outside of the 0001-01-01 through 9999-12-31
range.  To support applications that cannot tolerate such exceptions, the
new methods itermonthdays3() and itermonthdays4() are added.  The new
methods return tuples and are not restricted by the range supported by
datetime.date.
: The shutil.rmtree() function has been sped up to 20â40%. This
was done using the os.scandir() function.
: Instances of pickle.Pickler subclass with the persistent_id()
method and pickle.Unpickler subclass with the persistent_load() method no
longer create reference cycles.
: Donât release the GIL if we can acquire a multiprocessing
semaphore immediately.
: Fix multiprocessing.Process when stdout and/or stderr is closed
or None.
: Add  and superset_of containment tests to
ipaddress.IPv6Network and ipaddress.IPv4Network. Patch
by Michel Albert and Cheryl Sabella.
: Remove the os.stat_float_times() function. It was introduced in
Python 2.3 for backward compatibility with Python 2.2, and was deprecated
since Python 3.1.
: Add a subprocess.Popen(text=False) keyword argument to
subprocess functions to be more explicit about when the library should
attempt to decode outputs into text. Patch by Andrew Clegg.
: Add AbstractEventLoop.sock_recv_into().
: If nested log adapters are used, the inner 
methods are no longer omitted.
: The  property on LoggerAdapter objects is now
properly settable.
: Fix timeout rounding in time.sleep(), threading.Lock.acquire()
and socket.socket.settimeout() to round correctly negative timeouts
between -1.0 and 0.0. The functions now block waiting for events as
expected. Previously, the call was incorrectly non-blocking. Patch by
Pablo Galindo.
: time.clock() and time.get_clock_info(âclockâ) now emit a
DeprecationWarning warning.
: Extended support for parsing UTC offsets. strptime â%zâ can now
parse the output generated by datetime.isoformat, including seconds and
microseconds.
: traceback: Fix a TypeError that occurred during printing of
exception tracebacks when either the current exception or an exception in
its context/cause chain is unhashable. Patch by Zane Bitter.
: Add new function to seal a mock and prevent the automatically
creation of child mocks. Patch by Mario Corchero.
: Implement the , add new 6 new functions with
nanosecond resolution to the  module:
clock_gettime_ns(), clock_settime_ns(),
monotonic_ns(), perf_counter_ns(),
process_time_ns(), .
: 2to3 now generates a code that uses abstract collection classes
from collections.abc rather than collections.
: Prevent a crash when calling the __init__() method of a
sqlite3.Cursor object more than once. Patch by Oren Milman.
: Prevent a crash in sqlite3.Cursor.close() in case the
 object is uninitialized. Patch by Oren Milman.
: Fix possible crash in timedelta constructor called with custom
integers.
: an empty asyncio.Queue now doesnât leak memory when queue.get
pollers timeout
: Allow the flags re.ASCII, re.LOCALE, and re.UNICODE to be used
as group flags for regular expressions.
: FutureWarning is now emitted if a regular expression contains
character set constructs that will change semantically in the future
(nested sets and set operations).
: Added support for the Blowfish hashing in the crypt module.
: Fix method set_protocol() of class _SSLProtocolTransport in
asyncio module. This method was previously modifying a wrong reference to
the protocol.
: Added a workaround for getkey() in curses for ncurses 5.7 and
earlier.
: Allow use of bytes objects for arguments to
configparser.ConfigParser.read(). Patch by Vincent Michel.
: Fix poll.poll([timeout]) in the  module for
arbitrary negative timeouts on all OSes where it can only be a
non-negative integer or -1. Patch by Riccardo Coccioli.
: multiprocessingâs semaphore tracker should be launched again if
crashed.
: Make multiprocessingâs forkserver process immune to Ctrl-C and
other user interruptions. If it crashes, restart it when necessary.
: Added support for AF_UNIX socket in asyncio
create_datagram_endpoint.
: Add HTTP/2 status code 421 (Misdirected Request) to
http.HTTPStatus. Patch by Vitor Pereira.

================================================================================

# Changelog - Library (Part 2)

: Two minor fixes for  module: allow shallow copying
instances of generic classes, improve interaction of __init_subclass__
with generics. Original PRs by Ivan Levkivskyi.

: PEP 557, Data Classes. Provides a decorator which adds
boilerplate methods to classes which use type annotations so specify
fields.

: The header folding algorithm for the new email policies has
been rewritten, which also fixes , , and .  In
particular, RFC2231 folding is now done correctly.

: io.FileIO.readall() and io.FileIO.read() now release the GIL
when getting the file size. Fixed hang of all threads with inaccessible
NFS server. Patch by Nir Soffer.

: Add sys.flags.dev_mode flag

: The asyncio.windows_utils.socketpair() function has been
removed: use directly socket.socketpair() which is available on all
platforms since Python 3.5 (before, it wasnât available on Windows).
asyncio.windows_utils.socketpair() was just an alias to
socket.socketpair on Python 3.5 and newer.

: warnings: In development (-X dev) and debug mode (pydebug
build), use the âdefaultâ action for ResourceWarning, rather than the
âalwaysâ action, in the default warnings filters.

================================================================================

# Changelog - Library (Part 3)

: uuid.getnode() now preferentially returns universally
administered MAC addresses if available, over locally administered MAC
addresses.  This makes a better guarantee for global uniqueness of UUIDs
returned from uuid.uuid1().  If only locally administered MAC
addresses are available, the first such one found is returned.

: Wildcard is now supported in hostname when it is one and only
character in the left most segment of hostname in second argument of
ssl.match_hostname().  Patch by Mandeep Singh.

: Make msilib.SummaryInformation.GetProperty() return
 when the value of property is .  Initial patch by
Mark Mc Mahon.

: Use os.path.expanduser() to find the  file in
netrc.netrc.  If it does not exist, FileNotFoundError is
raised.  Patch by Dimitri Merejkowsky.

: Made tracemalloc.Traceback behave more like the traceback
module, sorting the frames from oldest to most recent.
Traceback.format() now accepts negative , truncating the result
to the abs(limit) oldest frames. To get the old behaviour, one can use
the new most_recent_first argument to Traceback.format(). (Patch by
Jesse Bakker.)

================================================================================

# Changelog - Library (Part 4)

: Fix wrong usage of collections.namedtuple() in the
RobotFileParser.parse()
method. Initial patch by Robin Wellner.

: msilib.OpenDatabase() now raises a better exception
message when it couldnât open or create an MSI file.  Initial patch by
William TisÃ¤ter.

:  now warns about invalid types for some fields. The
distutils.dist.Distribution class now warns when classifiers,
 and  fields are not specified as a list or a
string.

: Added the  command-line option to   
to run only tests that match the given pattern(s).

: Added nullcontext no-op context manager to contextlib. This
provides a simpler and faster alternative to ExitStack() when handling
optional context managers.

: The new test.support.skip_unless_bind_unix_socket() decorator
is used here to skip asyncio tests that fail because the platform lacks a
functional bind() function for unix domain sockets (as it is the case for
non root users on the recent Android versions that run now SELinux in
enforcing mode).

: codecs.StreamReader.read(n) now returns not more than 
characters/bytes for non-negative . This makes it compatible with
 methods of other file-like objects.

================================================================================

# Changelog - Library (Part 5)

: The warnings module doesnât leak memory anymore in the hidden
warnings registry for the âignoreâ action of warnings filters.
warn_explicit() function doesnât add the warning key to the registry
anymore for the âignoreâ action.

: warnings:  When Python is build is debug mode (),
DeprecationWarning, PendingDeprecationWarning and
ImportWarning warnings are now displayed by default.

bpo-1647489: Fixed searching regular expression patterns that could match
an empty string. Non-empty string can now be correctly found after
matching an empty string.

: Added support of splitting on a pattern that could match an
empty string.

: Fixed issues with binary plists: Fixed saving bytearrays.
Identical objects will be saved only once. Equal references will be load
as identical objects. Added support for saving and loading recursive data
structures.

: Drop legacy SSL transport from asyncio, ssl.MemoryBIO is always
used anyway.

: asyncio: Support pathlib.Path in create_unix_connection; sock
arg should be optional

: Updates 2to3 to convert from operator.isCallable(obj) to
callable(obj). Patch by Donghee Na.

================================================================================

# Changelog - Library (Part 6)

: inspect.signature should follow , if the parameter has
an annotation and a default value. Patch by Donghee Na.

: Add time.thread_time() and time.thread_time_ns()

: Integers that fit in a signed 32-bit integer will be now
pickled with protocol 0 using the INT opcode.  This will decrease the size
of a pickle, speed up pickling and unpickling, and make these integers be
unpickled as int instances in Python 2.

: Make asyncio.IncompleteReadError and LimitOverrunError
pickleable.

: Fixed the looping of asyncio in the case of reconnection the
socket during waiting async read/write from/to the socket.

: Restored support of loading marshal files with the TYPE_INT64
code. These files can be produced in Python 2.7.

: Enhance add_reader/writer check that socket is not used by some
transport. Before, only cases when add_reader/writer were called with an
int FD were supported.  Now the check is implemented correctly for all
file-like objects.

: Fix race condition when flushing a file is slow, which can
cause a segfault if closing the file from another thread.

================================================================================

# Changelog - Library (Part 7)

: Formally deprecated aifc.openfp, sunau.openfp, and wave.openfp.
Since change 7bc817d5ba917528e8bd07ec461c635291e7b06a in 1993, openfp in
each of the three modules had been pointing to that moduleâs open function
as a matter of backwards compatibility, though it had been both untested
and undocumented.

: cProfile command line now accepts  module_name as an
alternative to script path. Patch by Sanyam Khurana.

: Reduce performance overhead of asyncio debug mode.

:  argument of sqlite3.connect() now accepts a
path-like object, instead of just a string.

: Add Configurable  to HTTPConnection and
HTTPSConnection for improved upload throughput.  Patch by Nir Soffer.

: Add a cancelled() method to asyncio.Handle.  Patch
by Marat Sharafutdinov.

: Fixed determining the MAC address in the uuid module: Using
ifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and
OpenBSD. Based on patch by Takayuki Shimizukawa.

: Fix potential missed signal in signal.signal().

: Fix Blake2 params leaf_size and node_offset on big endian
platforms. Patch by Jack OâConnor.

: Add an initializer argument to {Process,Thread}PoolExecutor

================================================================================

# Changelog - Library (Part 8)

: Fixed compilation of the socket module on NetBSD 8.  Fixed
assertion failure or reading arbitrary data when parse a AF_BLUETOOTH
address on NetBSD and DragonFly BSD.

: Fixed stack corruption in curses.box() and curses.ungetmouse()
when the size of types chtype or mmask_t is less than the size of C long.
curses.box() now accepts characters as arguments.  Based on patch by Steve
Fink.

: Add 3 new clock identifiers: time.CLOCK_BOOTTIME,
time.CLOCK_PROF and time.CLOCK_UPTIME.

: plistlib now catches more errors when read binary plists and
raises InvalidFileException instead of unexpected exceptions.

: Fix the method for checking pad state of curses WINDOW. Patch
by Masayuki Yamamoto.

: Fixed the layout of the kqueue_event structure on OpenBSD and
NetBSD. Fixed the comparison of the kqueue_event objects.

: Fixed building the curses module on NetBSD.

: added required constants to subprocess module for setting
priority on windows

: Remove year (1-9999) limits on the Calendar.weekday() function.
Patch by Mark Gollahon.

: crypt.mksalt() now allows to specify the number of rounds for
SHA-256 and SHA-512 hashing.

================================================================================

# Changelog - Library (Part 9)

: inspect.getfile() no longer computes the repr of unknown
objects to display in an error message, to protect against badly behaved
custom reprs.

: Fix the pthread+semaphore implementation of
PyThread_acquire_lock_timed() when called with timeout > 0 and
intr_flag=0: recompute the timeout if sem_timedwait() is interrupted by a
signal (EINTR). See also the .

: Add mmap.ACCESS_DEFAULT constant.

: Use optimized code for BLAKE2 only with SSSE3+. The pure SSE2
implementation is slower than the pure C reference implementation.

: Calendar.itermonthdates() will now consistently raise an
exception when a date falls outside of the 0001-01-01 through 9999-12-31
range.  To support applications that cannot tolerate such exceptions, the
new methods itermonthdays3() and itermonthdays4() are added.  The new
methods return tuples and are not restricted by the range supported by
datetime.date.

: The shutil.rmtree() function has been sped up to 20â40%. This
was done using the os.scandir() function.

: Instances of pickle.Pickler subclass with the persistent_id()
method and pickle.Unpickler subclass with the persistent_load() method no
longer create reference cycles.

================================================================================

# Changelog - Library (Part 10)

: Donât release the GIL if we can acquire a multiprocessing
semaphore immediately.

: Fix multiprocessing.Process when stdout and/or stderr is closed
or None.

: Add  and superset_of containment tests to
ipaddress.IPv6Network and ipaddress.IPv4Network. Patch
by Michel Albert and Cheryl Sabella.

: Remove the os.stat_float_times() function. It was introduced in
Python 2.3 for backward compatibility with Python 2.2, and was deprecated
since Python 3.1.

: Add a subprocess.Popen(text=False) keyword argument to
subprocess functions to be more explicit about when the library should
attempt to decode outputs into text. Patch by Andrew Clegg.

: Add AbstractEventLoop.sock_recv_into().

: If nested log adapters are used, the inner 
methods are no longer omitted.

: The  property on LoggerAdapter objects is now
properly settable.

: Fix timeout rounding in time.sleep(), threading.Lock.acquire()
and socket.socket.settimeout() to round correctly negative timeouts
between -1.0 and 0.0. The functions now block waiting for events as
expected. Previously, the call was incorrectly non-blocking. Patch by
Pablo Galindo.

: time.clock() and time.get_clock_info(âclockâ) now emit a
DeprecationWarning warning.

================================================================================

# Changelog - Library (Part 11)

: Extended support for parsing UTC offsets. strptime â%zâ can now
parse the output generated by datetime.isoformat, including seconds and
microseconds.

: traceback: Fix a TypeError that occurred during printing of
exception tracebacks when either the current exception or an exception in
its context/cause chain is unhashable. Patch by Zane Bitter.

: Add new function to seal a mock and prevent the automatically
creation of child mocks. Patch by Mario Corchero.

: Implement the , add new 6 new functions with
nanosecond resolution to the  module:
clock_gettime_ns(), clock_settime_ns(),
monotonic_ns(), perf_counter_ns(),
process_time_ns(), .

: 2to3 now generates a code that uses abstract collection classes
from collections.abc rather than collections.

: Prevent a crash when calling the __init__() method of a
sqlite3.Cursor object more than once. Patch by Oren Milman.

: Prevent a crash in sqlite3.Cursor.close() in case the
 object is uninitialized. Patch by Oren Milman.

: Fix possible crash in timedelta constructor called with custom
integers.

: an empty asyncio.Queue now doesnât leak memory when queue.get
pollers timeout

================================================================================

# Changelog - Library (Part 12)

: Allow the flags re.ASCII, re.LOCALE, and re.UNICODE to be used
as group flags for regular expressions.

: FutureWarning is now emitted if a regular expression contains
character set constructs that will change semantically in the future
(nested sets and set operations).

: Added support for the Blowfish hashing in the crypt module.

: Fix method set_protocol() of class _SSLProtocolTransport in
asyncio module. This method was previously modifying a wrong reference to
the protocol.

: Added a workaround for getkey() in curses for ncurses 5.7 and
earlier.

: Allow use of bytes objects for arguments to
configparser.ConfigParser.read(). Patch by Vincent Michel.

: Fix poll.poll([timeout]) in the  module for
arbitrary negative timeouts on all OSes where it can only be a
non-negative integer or -1. Patch by Riccardo Coccioli.

: multiprocessingâs semaphore tracker should be launched again if
crashed.

: Make multiprocessingâs forkserver process immune to Ctrl-C and
other user interruptions. If it crashes, restart it when necessary.

: Added support for AF_UNIX socket in asyncio
create_datagram_endpoint.

: Add HTTP/2 status code 421 (Misdirected Request) to
http.HTTPStatus. Patch by Vitor Pereira.

================================================================================

# Changelog - Documentation

List:
: Added asyncio.BaseEventLoop.connect_accepted_socket
versionadded marker.

: Added asyncio.BaseEventLoop.connect_accepted_socket
versionadded marker.

================================================================================

# Changelog - Tests (Part 1)

List:
: Skip test_httpservers test_undecodable_file on macOS: fails on
APFS.
: Skip test_socket.test_sha256() on Linux kernel older than 4.5.
The test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged
into the kernel 4.5.
: Skip on Android test_faulthandler tests that raise SIGSEGV and
remove the test.support.requires_android_level decorator.
: The runtime embedding tests have been split out from
Lib/test/test_capi.py into a new Lib/test/test_embed.py file.
: test.support.requires_multiprocessing_queue is removed. Skip
tests with test.support.import_module(âmultiprocessing.synchronizeâ)
instead when the semaphore implementation is broken or missing.
: Skip test_get_event_loop_new_process in
test.test_asyncio.test_events when sem_open() is not functional.
: Fix test_tools.test_unparse: DirectoryTestCase now stores the
names sample to always test the same files. It prevents false alarms when
hunting reference leaks.

: Skip test_httpservers test_undecodable_file on macOS: fails on
APFS.

: Skip test_socket.test_sha256() on Linux kernel older than 4.5.
The test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged
into the kernel 4.5.

================================================================================

# Changelog - Tests (Part 2)

: Skip on Android test_faulthandler tests that raise SIGSEGV and
remove the test.support.requires_android_level decorator.

: The runtime embedding tests have been split out from
Lib/test/test_capi.py into a new Lib/test/test_embed.py file.

: test.support.requires_multiprocessing_queue is removed. Skip
tests with test.support.import_module(âmultiprocessing.synchronizeâ)
instead when the semaphore implementation is broken or missing.

: Skip test_get_event_loop_new_process in
test.test_asyncio.test_events when sem_open() is not functional.

: Fix test_tools.test_unparse: DirectoryTestCase now stores the
names sample to always test the same files. It prevents false alarms when
hunting reference leaks.

================================================================================

# Changelog - Build (Part 1)

List:
: Revert the previous changes, the if_nameindex structure is
defined by Unified Headers.
: Revert the last commit, the F_LOCK macro is defined by Android
Unified Headers.
: Support building Android with Unified Headers. The first NDK
release to support Unified Headers is android-ndk-r14.
: detect_modules() in  now also searches the
sysroot paths when cross-compiling.
: Fixes Windows SDK version detection when building for Windows.
: Fixes quotes in PCbuild/clean.bat
: Abort the build when building out of a not clean source tree.
: Fixed Argument Clinic sometimes causing compilation errors when
there was more than one function and/or method in a .c file with the same
name.
: Update Windows builds to use SQLite 3.21.0.
: Update OS X installer to use SQLite 3.21.0.
: Record profile-opt build progress with stamp files.
: Finish removing support for AtheOS.

: Revert the previous changes, the if_nameindex structure is
defined by Unified Headers.

: Revert the last commit, the F_LOCK macro is defined by Android
Unified Headers.

: Support building Android with Unified Headers. The first NDK
release to support Unified Headers is android-ndk-r14.

================================================================================

# Changelog - Build (Part 2)

: detect_modules() in  now also searches the
sysroot paths when cross-compiling.

: Fixes Windows SDK version detection when building for Windows.

: Fixes quotes in PCbuild/clean.bat

: Abort the build when building out of a not clean source tree.

: Fixed Argument Clinic sometimes causing compilation errors when
there was more than one function and/or method in a .c file with the same
name.

: Update Windows builds to use SQLite 3.21.0.

: Update OS X installer to use SQLite 3.21.0.

: Record profile-opt build progress with stamp files.

: Finish removing support for AtheOS.

================================================================================

# Changelog - Windows

List:
: Return  when View.Fetch() returns
ERROR_NO_MORE_ITEMS instead of raising . Initial patch by
Anthony Tuininga.
: Fixes Modify button in Apps and Features dialog.
: Implement the Database.Close() method to help closing MSI
database objects.
: Make the behavior of USE_STACKCHECK deterministic in a
multi-threaded environment.

: Return  when View.Fetch() returns
ERROR_NO_MORE_ITEMS instead of raising . Initial patch by
Anthony Tuininga.

: Fixes Modify button in Apps and Features dialog.

: Implement the Database.Close() method to help closing MSI
database objects.

: Make the behavior of USE_STACKCHECK deterministic in a
multi-threaded environment.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to use OpenSSL 1.0.2m

: Update macOS installer to use OpenSSL 1.0.2m

================================================================================

# Changelog - IDLE (Part 1)

List:
: Improve tk event exception tracebacks in IDLE. When tk event
handling is driven by IDLEâs run loop, a confusing and distracting
queue.EMPTY traceback context is no longer added to tk event exception
tracebacks.  The traceback is now the same as when event handling is
driven by user code.  Patch based on a suggestion by Serhiy Storchaka.
: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet
in configdialog was replaced by ttk.Notebook.
: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch
mostly by Cheryl Sabella.
: IDLE â Restrict shell prompt manipulation to the shell. Editor
and output windows only see an empty last prompt line.  This simplifies
the code and fixes a minor bug when newline is inserted. Sys.ps1, if
present, is read on Shell start-up, but is not set or changed.
: The font sample in the IDLE configuration dialog is now
editable. Changes persist while IDLE remains open
: Test_code_module now passes if run after test_idle, which sets
ps1. The code module uses sys.ps1 if present or sets it to â>>> â if not.
Test_code_module now properly tests both behaviors.  Ditto for ps2.
: Fix a TypeError that caused a shell restart when printing a
traceback that includes an exception that is unhashable. Patch by Zane
Bitter.
: Use non-Latin characters in the IDLEâs Font settings sample.
Even if one selects a font that defines a limited subset of the unicode
Basic Multilingual Plane, tcl/tk will use other fonts that define a
character. The expanded example give users of non-Latin characters a
better idea of what they might see in IDLEâs shell and editors. To make
room for the expanded sample, frames on the Font tab are re-arranged.  The
Font/Tabs help explains a bit about the additions.

================================================================================

# Changelog - IDLE (Part 2)

: Improve tk event exception tracebacks in IDLE. When tk event
handling is driven by IDLEâs run loop, a confusing and distracting
queue.EMPTY traceback context is no longer added to tk event exception
tracebacks.  The traceback is now the same as when event handling is
driven by user code.  Patch based on a suggestion by Serhiy Storchaka.

: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet
in configdialog was replaced by ttk.Notebook.

: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch
mostly by Cheryl Sabella.

: IDLE â Restrict shell prompt manipulation to the shell. Editor
and output windows only see an empty last prompt line.  This simplifies
the code and fixes a minor bug when newline is inserted. Sys.ps1, if
present, is read on Shell start-up, but is not set or changed.

: The font sample in the IDLE configuration dialog is now
editable. Changes persist while IDLE remains open

: Test_code_module now passes if run after test_idle, which sets
ps1. The code module uses sys.ps1 if present or sets it to â>>> â if not.
Test_code_module now properly tests both behaviors.  Ditto for ps2.

================================================================================

# Changelog - IDLE (Part 3)

: Fix a TypeError that caused a shell restart when printing a
traceback that includes an exception that is unhashable. Patch by Zane
Bitter.

: Use non-Latin characters in the IDLEâs Font settings sample.
Even if one selects a font that defines a limited subset of the unicode
Basic Multilingual Plane, tcl/tk will use other fonts that define a
character. The expanded example give users of non-Latin characters a
better idea of what they might see in IDLEâs shell and editors. To make
room for the expanded sample, frames on the Font tab are re-arranged.  The
Font/Tabs help explains a bit about the additions.

================================================================================

# Changelog - Tools/Demos

List:
: Remove CVS and Subversion tools: remove svneol.py and
treesync.py scripts. CPython migrated from CVS to Subversion, to
Mercurial, and then to Git. CVS and Subversion are no longer used to
develop CPython.
: Make redemo work with Python 3.6 and newer versions. Also,
remove the  option since it doesnât work with string patterns in
Python 3. Patch by Christoph Sarnowski.

: Remove CVS and Subversion tools: remove svneol.py and
treesync.py scripts. CPython migrated from CVS to Subversion, to
Mercurial, and then to Git. CVS and Subversion are no longer used to
develop CPython.

: Make redemo work with Python 3.6 and newer versions. Also,
remove the  option since it doesnât work with string patterns in
Python 3. Patch by Christoph Sarnowski.

================================================================================

# Changelog - C API (Part 1)

List:
: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in
a non-Python thread before PyEval_InitThreads(), only call
PyEval_InitThreads() after calling PyThreadState_New() to fix a crash.
: The Py_UseClassExceptionsFlag flag has been removed. It was
deprecated and wasnât used anymore since Python 2.0.
: Move the current exception state from the frame object to the
co-routine. This simplifies the interpreter and fixes a couple of obscure
bugs caused by having swap exception state when entering or exiting a
generator.
: Add Py_RETURN_RICHCOMPARE macro to reduce boilerplate code in
rich comparison functions.
: The PyExc_RecursionErrorInst singleton is removed and
PyErr_NormalizeException() does not use it anymore. This singleton is
persistent and its members being never cleared may cause a segfault during
finalization of the interpreter. See also .

: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in
a non-Python thread before PyEval_InitThreads(), only call
PyEval_InitThreads() after calling PyThreadState_New() to fix a crash.

: The Py_UseClassExceptionsFlag flag has been removed. It was
deprecated and wasnât used anymore since Python 2.0.

================================================================================

# Changelog - C API (Part 2)

: Move the current exception state from the frame object to the
co-routine. This simplifies the interpreter and fixes a couple of obscure
bugs caused by having swap exception state when entering or exiting a
generator.

: Add Py_RETURN_RICHCOMPARE macro to reduce boilerplate code in
rich comparison functions.

: The PyExc_RecursionErrorInst singleton is removed and
PyErr_NormalizeException() does not use it anymore. This singleton is
persistent and its members being never cleared may cause a segfault during
finalization of the interpreter. See also .

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: gc.freeze() is a new API that allows for moving all objects
currently tracked by the garbage collector to a permanent generation,
effectively removing them from future collection events. This can be used
to protect those objects from having their PyGC_Head mutated. In effect,
this enables great copy-on-write stability at fork().
: Restored blocking âfrom package import moduleâ by setting
sys.modules[âpackage.moduleâ] to None.
: Allow use of asynchronous generator expressions in synchronous
functions.
: Drop support of asynchronous __aiter__.
: The -u option now makes the stdout and stderr streams
unbuffered rather than line-buffered.
: Fixed a ValueError when convert a string with large number of
underscores to integer with binary base.
: Fix an assertion failure in zipimporter.get_source() in
case of a bad zlib.decompress(). Patch by Oren Milman.
: Fixed an assertion failure in Python parser in case of a bad
unicodedata.normalize(). Patch by Oren Milman.
: Raise a  with a helpful error message when class
creation fails due to a metaclass with a bad __prepare__() method.
Patch by Oren Milman.
: Importlib was instrumented with two dtrace probes to profile
import timing.
: Fix an assertion failure in _warnings.warn() in case of a
bad  global. Patch by Oren Milman.
: Improved the error message logic for object.__new__ and
object.__init__.
: Fix an assertion failure in , in case
_json.make_encoder() received a bad  argument. Patch by
Oren Milman.
: Fix assertion failures in case of failing to import from a
module with a bad  attribute, and in case of failing to access
an attribute of such a module. Patch by Oren Milman.
: Fix an assertion failure in _random.Random.seed() in case
the argument has a bad  method. Patch by Oren Milman.
: Speed up class creation by 10-20% by reducing the overhead in
the necessary special method lookups.  Patch by Stefan Behnel.
: Add  importtime option to show how long each import
takes. It can be used to optimize applicationâs startup time.  Support the
PYTHONPROFILEIMPORTTIME as an equivalent way to enable this.
: Optimized calling wrapper and classmethod descriptors.
:  - Add a new built-in called breakpoint() which
calls sys.breakpointhook().  By default this imports  and calls
pdb.set_trace(), but users may override sys.breakpointhook() to
call whatever debugger they want.  The original value of the hook is saved
in sys.__breakpointhook__.
: Maintain a list of open buffered files, flush them before
exiting the interpreter.  Based on a patch from Armin Rigo.
: Fix an assertion failure in imp.create_dynamic(), when
spec.name is not a string. Patch by Oren Milman.
: Fix a crash in the __setstate__() method of
ctypes._CData, in case of a bad . Patch by Oren Milman.
: Fix crashes in true division and multiplication of a timedelta
object by a float with a bad as_integer_ratio() method. Patch by Oren
Milman.
: Fix an assertion failure in warnings.warn_explicit, when
the return value of the received loaderâs get_source() has a bad
splitlines() method. Patch by Oren Milman.
: Make  and  proper keywords, as specified in
.

================================================================================

# Changelog - Core and Builtins (Part 2)

: gc.freeze() is a new API that allows for moving all objects
currently tracked by the garbage collector to a permanent generation,
effectively removing them from future collection events. This can be used
to protect those objects from having their PyGC_Head mutated. In effect,
this enables great copy-on-write stability at fork().

: Restored blocking âfrom package import moduleâ by setting
sys.modules[âpackage.moduleâ] to None.

: Allow use of asynchronous generator expressions in synchronous
functions.

: Drop support of asynchronous __aiter__.

: The -u option now makes the stdout and stderr streams
unbuffered rather than line-buffered.

: Fixed a ValueError when convert a string with large number of
underscores to integer with binary base.

: Fix an assertion failure in zipimporter.get_source() in
case of a bad zlib.decompress(). Patch by Oren Milman.

: Fixed an assertion failure in Python parser in case of a bad
unicodedata.normalize(). Patch by Oren Milman.

: Raise a  with a helpful error message when class
creation fails due to a metaclass with a bad __prepare__() method.
Patch by Oren Milman.

: Importlib was instrumented with two dtrace probes to profile
import timing.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix an assertion failure in _warnings.warn() in case of a
bad  global. Patch by Oren Milman.

: Improved the error message logic for object.__new__ and
object.__init__.

: Fix an assertion failure in , in case
_json.make_encoder() received a bad  argument. Patch by
Oren Milman.

: Fix assertion failures in case of failing to import from a
module with a bad  attribute, and in case of failing to access
an attribute of such a module. Patch by Oren Milman.

: Fix an assertion failure in _random.Random.seed() in case
the argument has a bad  method. Patch by Oren Milman.

: Speed up class creation by 10-20% by reducing the overhead in
the necessary special method lookups.  Patch by Stefan Behnel.

: Add  importtime option to show how long each import
takes. It can be used to optimize applicationâs startup time.  Support the
PYTHONPROFILEIMPORTTIME as an equivalent way to enable this.

: Optimized calling wrapper and classmethod descriptors.

================================================================================

# Changelog - Core and Builtins (Part 4)

:  - Add a new built-in called breakpoint() which
calls sys.breakpointhook().  By default this imports  and calls
pdb.set_trace(), but users may override sys.breakpointhook() to
call whatever debugger they want.  The original value of the hook is saved
in sys.__breakpointhook__.

: Maintain a list of open buffered files, flush them before
exiting the interpreter.  Based on a patch from Armin Rigo.

: Fix an assertion failure in imp.create_dynamic(), when
spec.name is not a string. Patch by Oren Milman.

: Fix a crash in the __setstate__() method of
ctypes._CData, in case of a bad . Patch by Oren Milman.

: Fix crashes in true division and multiplication of a timedelta
object by a float with a bad as_integer_ratio() method. Patch by Oren
Milman.

: Fix an assertion failure in warnings.warn_explicit, when
the return value of the received loaderâs get_source() has a bad
splitlines() method. Patch by Oren Milman.

: Make  and  proper keywords, as specified in
.

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed buffer overflow in select.kqueue.control().
:  in string.Template matched some non-ASCII
characters. Now it uses  regular expression local flag to avoid
non-ASCII characters.
: On Windows, faulthandler.enable() now ignores MSC and COM
exceptions.
: Prevent crashes in _elementtree due to unsafe cleanup of
Element.text and Element.tail. Patch by Oren Milman.
: Now re.compile() converts passed RegexFlag to normal int
object before compiling. bm_regex_compile benchmark shows 14% performance
improvements.
: The types of compiled regular objects and match objects are now
exposed as re.Pattern and .  This adds information in
pydoc output for the  module.
: Fixed memory leaks in Tkinterâs methods splitlist() and split()
when pass a string larger than 2 GiB.
: Fixed typo in the name of Tkinterâs method adderrorinfo().
: Improvements to path predicates in ElementTree: Allow
whitespace around predicate parts, i.e. â[a = âtextâ]â instead of
requiring the less readable â[a=âtextâ]â. Add support for text comparison
of the current node, like â[.=âtextâ]â. Patch by Stefan Behnel.
: Fix the string representation of a netrc object.
: Add optional argument compressed to
zipapp.create_archive, and add option --compress to the command
line interface of .
: Avoid venv activate failures with undefined variables
: Avoid ctypes use (if possible) and improve import time for
uuid.
: The regular expression cache is no longer completely dumped
when it is full.
: Added pthread_getcpuclockid() to the time module
: Make 2to3 accept a trailing comma in generator expressions. For
example,      is now allowed.
: Stop crashes when concurrently iterate over itertools.groupby()
iterators.
: An iterator produced by itertools.groupby() iterator now
becomes exhausted after advancing the groupby iterator.
: Cancel asyncio.wait_for future faster if timeout <= 0
: Allow passing a context object in
concurrent.futures.ProcessPoolExecutor constructor. Also, free
job resources in concurrent.futures.ProcessPoolExecutor earlier
to improve memory usage when a worker waits for new jobs.
: threading.current_thread() should not return a dummy thread
at shutdown.
: In the sqlite module, require the sqlite3_prepare_v2 API. Thus,
the sqlite module now requires sqlite version at least 3.3.9.
: argparse subparsers are now required by default.  This matches
behaviour in Python 2. For optional subparsers, use the new parameter
add_subparsers(required=False). Patch by Anthony Sottile. (As of
3.7.0rc1, the default was changed to not required as had been the case
since Python 3.3.)
: Reprs of subclasses of some collection and iterator classes
(, array.array, collections.deque,
collections.defaultdict, itertools.count, itertools.repeat)
now contain actual type name instead of hardcoded names of the base class.
: python -m ensurepip now exits with non-zero exit code if pip
bootstrapping has failed.
: pdb.set_trace() now takes an optional keyword-only argument
. If given, this is printed to the console just before debugging
begins.

================================================================================

# Changelog - Library (Part 2)

: Fixed buffer overflow in select.kqueue.control().

:  in string.Template matched some non-ASCII
characters. Now it uses  regular expression local flag to avoid
non-ASCII characters.

: On Windows, faulthandler.enable() now ignores MSC and COM
exceptions.

: Prevent crashes in _elementtree due to unsafe cleanup of
Element.text and Element.tail. Patch by Oren Milman.

: Now re.compile() converts passed RegexFlag to normal int
object before compiling. bm_regex_compile benchmark shows 14% performance
improvements.

: The types of compiled regular objects and match objects are now
exposed as re.Pattern and .  This adds information in
pydoc output for the  module.

: Fixed memory leaks in Tkinterâs methods splitlist() and split()
when pass a string larger than 2 GiB.

: Fixed typo in the name of Tkinterâs method adderrorinfo().

: Improvements to path predicates in ElementTree: Allow
whitespace around predicate parts, i.e. â[a = âtextâ]â instead of
requiring the less readable â[a=âtextâ]â. Add support for text comparison
of the current node, like â[.=âtextâ]â. Patch by Stefan Behnel.

: Fix the string representation of a netrc object.

================================================================================

# Changelog - Library (Part 3)

: Add optional argument compressed to
zipapp.create_archive, and add option --compress to the command
line interface of .

: Avoid venv activate failures with undefined variables

: Avoid ctypes use (if possible) and improve import time for
uuid.

: The regular expression cache is no longer completely dumped
when it is full.

: Added pthread_getcpuclockid() to the time module

: Make 2to3 accept a trailing comma in generator expressions. For
example,      is now allowed.

: Stop crashes when concurrently iterate over itertools.groupby()
iterators.

: An iterator produced by itertools.groupby() iterator now
becomes exhausted after advancing the groupby iterator.

: Cancel asyncio.wait_for future faster if timeout <= 0

: Allow passing a context object in
concurrent.futures.ProcessPoolExecutor constructor. Also, free
job resources in concurrent.futures.ProcessPoolExecutor earlier
to improve memory usage when a worker waits for new jobs.

: threading.current_thread() should not return a dummy thread
at shutdown.

: In the sqlite module, require the sqlite3_prepare_v2 API. Thus,
the sqlite module now requires sqlite version at least 3.3.9.

================================================================================

# Changelog - Library (Part 4)

: argparse subparsers are now required by default.  This matches
behaviour in Python 2. For optional subparsers, use the new parameter
add_subparsers(required=False). Patch by Anthony Sottile. (As of
3.7.0rc1, the default was changed to not required as had been the case
since Python 3.3.)

: Reprs of subclasses of some collection and iterator classes
(, array.array, collections.deque,
collections.defaultdict, itertools.count, itertools.repeat)
now contain actual type name instead of hardcoded names of the base class.

: python -m ensurepip now exits with non-zero exit code if pip
bootstrapping has failed.

: pdb.set_trace() now takes an optional keyword-only argument
. If given, this is printed to the console just before debugging
begins.

================================================================================

# Changelog - Documentation

List:
: Fix incorrect usage of get_history_length in readline
documentation example code. Patch by Brad Smith.
: The operator functions without double underscores are preferred
for clarity. The one with underscores are only kept for
back-compatibility.

: Fix incorrect usage of get_history_length in readline
documentation example code. Patch by Brad Smith.

: The operator functions without double underscores are preferred
for clarity. The one with underscores are only kept for
back-compatibility.

================================================================================

# Changelog - Build

List:
: Improve compiler version information in sys.version
when Python is built with Clang.
: Stop using ranlib on static libraries. Instead, we assume ar
supports the âsâ flag.
: Remove support for BSD/OS.
: Prevent double substitution of prefix in python-config.sh.
: Correct PCBuild/ case to PCbuild/ in build scripts and
documentation.
: Avoid wholesale rebuild after   if nothing
changed.

: Improve compiler version information in sys.version
when Python is built with Clang.

: Stop using ranlib on static libraries. Instead, we assume ar
supports the âsâ flag.

: Remove support for BSD/OS.

: Prevent double substitution of prefix in python-config.sh.

: Correct PCBuild/ case to PCbuild/ in build scripts and
documentation.

: Avoid wholesale rebuild after   if nothing
changed.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Simplify the API of IDLEâs Module Browser. Passing a widget
instead of an flist with a root widget opens the option of creating a
browser frame that is only part of a window.  Passing a full file name
instead of pieces assumed to come from a .py file opens the possibility of
browsing python files that do not end in .py.
: IDLE - Make _htest, _utest parameters keyword only.
: Remove test order dependence in idle_test.test_browser.
: Rename IDLEâs module browser from Class Browser to Module
Browser. The original module-level class and method browser became a
module browser, with the addition of module-level functions, years ago.
Nested classes and functions were added yesterday.  For
back-compatibility, the virtual event <<open-class-browser>>, which
appears on the Keys tab of the Settings dialog, is not changed. Patch by
Cheryl Sabella.
: Default fonts now are scaled on HiDPI displays.
bpo-1612262: IDLE module browser now shows nested classes and functions.
Original patches for code and tests by Guilherme Polo and Cheryl Sabella,
respectively.

================================================================================

# Changelog - IDLE (Part 2)

: Simplify the API of IDLEâs Module Browser. Passing a widget
instead of an flist with a root widget opens the option of creating a
browser frame that is only part of a window.  Passing a full file name
instead of pieces assumed to come from a .py file opens the possibility of
browsing python files that do not end in .py.

: IDLE - Make _htest, _utest parameters keyword only.

: Remove test order dependence in idle_test.test_browser.

: Rename IDLEâs module browser from Class Browser to Module
Browser. The original module-level class and method browser became a
module browser, with the addition of module-level functions, years ago.
Nested classes and functions were added yesterday.  For
back-compatibility, the virtual event <<open-class-browser>>, which
appears on the Keys tab of the Settings dialog, is not changed. Patch by
Cheryl Sabella.

: Default fonts now are scaled on HiDPI displays.

bpo-1612262: IDLE module browser now shows nested classes and functions.
Original patches for code and tests by Guilherme Polo and Cheryl Sabella,
respectively.

================================================================================

# Changelog - C API

List:
: Make PyMapping_Keys(), PyMapping_Values() and
PyMapping_Items() always return a  (rather than a  or
a ). Patch by Oren Milman.
: Fix memory corruption due to allocator mix in getpath.c between
Py_GetPath() and Py_SetPath()
: Implement  for Thread Specific Storage (TSS) API: it
is a new Thread Local Storage (TLS) API to CPython which would supersede
use of the existing TLS API within the CPython interpreter, while
deprecating the existing API. PEP written by Erik M. Bray, patch by
Masayuki Yamamoto.

: Make PyMapping_Keys(), PyMapping_Values() and
PyMapping_Items() always return a  (rather than a  or
a ). Patch by Oren Milman.

: Fix memory corruption due to allocator mix in getpath.c between
Py_GetPath() and Py_SetPath()

: Implement  for Thread Specific Storage (TSS) API: it
is a new Thread Local Storage (TLS) API to CPython which would supersede
use of the existing TLS API within the CPython interpreter, while
deprecating the existing API. PEP written by Erik M. Bray, patch by
Masayuki Yamamoto.

================================================================================

# Changelog - Security (Part 1)

List:
: SSLObject.version() now correctly returns None when handshake
over BIO has not been performed yet.
: Add fuzz tests for float(str), int(str), unicode(str); for
oss-fuzz.
: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
get security fixes.
: Prevent environment variables injection in subprocess on
Windows.  Prevent passing other environment variables and command
arguments.
: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
security vulnerabilities including: CVE 2017-9233 (External entity
infinite loop DoS), CVE 2016-9063 (Integer overflow, re-fix),
CVE 2016-0718 (Fix regression bugs from 2.2.0âs fix to
CVE 2016-0718) and CVE 2012-0876 (Counter hash flooding with
SipHash). Note: the CVE 2016-5300 (Use os-specific entropy sources like
getrandom) doesnât impact Python, since Python already gets entropy from
the OS to set the expat secret using XML_SetHashSalt().
: Fix urllib.parse.splithost() to correctly parse fragments. For
example, splithost('//127.0.0.1#@evil.com/') now correctly returns the
 host, instead of treating  as the host in an
authentication (login@host).
: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
CVE 2016-0718 and CVE 2016-4472. See
https://sourceforge.net/p/expat/bugs/537/ for more information.

================================================================================

# Changelog - Security (Part 2)

: SSLObject.version() now correctly returns None when handshake
over BIO has not been performed yet.

: Add fuzz tests for float(str), int(str), unicode(str); for
oss-fuzz.

: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
get security fixes.

: Prevent environment variables injection in subprocess on
Windows.  Prevent passing other environment variables and command
arguments.

: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
security vulnerabilities including: CVE 2017-9233 (External entity
infinite loop DoS), CVE 2016-9063 (Integer overflow, re-fix),
CVE 2016-0718 (Fix regression bugs from 2.2.0âs fix to
CVE 2016-0718) and CVE 2012-0876 (Counter hash flooding with
SipHash). Note: the CVE 2016-5300 (Use os-specific entropy sources like
getrandom) doesnât impact Python, since Python already gets entropy from
the OS to set the expat secret using XML_SetHashSalt().

: Fix urllib.parse.splithost() to correctly parse fragments. For
example, splithost('//127.0.0.1#@evil.com/') now correctly returns the
 host, instead of treating  as the host in an
authentication (login@host).

================================================================================

# Changelog - Security (Part 3)

: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
CVE 2016-0718 and CVE 2016-4472. See
https://sourceforge.net/p/expat/bugs/537/ for more information.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix an assertion failure in  class definition, in
case the class has an attribute whose name is specified in _anonymous_
but not in . Patch by Oren Milman.
: Fix an assertion failure in subprocess.Popen() on Windows,
in case the env argument has a bad  method. Patch by Oren
Milman.
: Fix an assertion failure in PyErr_WriteUnraisable() in case
of an exception with a bad __module__ attribute. Patch by Oren Milman.
: Fix assertion failures in case of a bad warnings.filters or
warnings.defaultaction. Patch by Oren Milman.
: Change direct usage of PyInterpreterState.modules to
PyImport_GetModuleDict(). Also introduce more uniformity in other code
that deals with sys.modules. This helps reduce complications when working
on sys.modules.
: Switch to the abstract API when dealing with
PyInterpreterState.modules. This allows later support for all dict
subclasses and other Mapping implementations.  Also add a
PyImport_GetModule() function to reduce a bunch of duplicated code.
: Raise a TypeError instead of SystemError in case
warnings.onceregistry is not a dictionary. Patch by Oren Milman.
: For finer control of tracing behaviour when testing the
interpreter, two new frame attributes have been added to control the
emission of particular trace events: f_trace_lines ( by
default) to turn off per-line trace events; and f_trace_opcodes
( by default) to turn on per-opcode trace events.
: Fix several possible instances of undefined behavior due to
floating-point demotions.
: Location information ( and col_offset) in
f-strings is now (mostly) correct.  This fixes tools like flake8 from
showing warnings on the wrong line (typically the first line of the file).
: Consolidate CPythonâs global runtime state under a single
struct.  This improves discoverability of the runtime state.
: Fix possible undefined behavior in _PyObject_FastCall_Prepend.
: Include sys/sysmacros.h for major(), minor(), and makedev().
GNU C libray plans to remove the functions from sys/types.h.
: Fix an assertion failure in zipimport.zipimporter.get_data
on Windows, when the return value of pathname.replace('/','\\') isnât
a string. Patch by Oren Milman.
: Fix an assertion failure in the  method of
io.TextIOWrapper, when the encoder doesnât return a bytes object.
Patch by Oren Milman.
: Fix a crash in some methods of io.TextIOWrapper, when the
decoderâs state is invalid. Patch by Oren Milman.
:  now shows correct usage hint for using Python 2
redirection syntax.  Patch by Sanyam Khurana.
: Fix a race condition in importlib _get_module_lock().
: Add a non-dummy implementation of _Py_atomic_store and
_Py_atomic_load on MSVC.
: Fix potential crash during GC caused by tp_dealloc which
doesnât call PyObject_GC_UnTrack().
: Avoid masking original TypeError in call with * unpacking when
other arguments are passed.
: str.format_map() now passes key lookup exceptions through.
Previously any exception was replaced with a KeyError exception.
: Use _Py_atomic API for concurrency-sensitive signal state.
: Relative import from unloaded package now reimports the package
instead of failing with SystemError.  Relative import from non-package now
fails with ImportError rather than SystemError.
: Improve signal delivery. Avoid using Py_AddPendingCall from
signal handler, to avoid calling signal-unsafe functions. The tests Iâm
adding here fail without the rest of the patch, on Linux and OS X. This
means our signal delivery logic had defects (some signals could be lost).
: Avoid blocking in pthread_mutex_lock() when
PyThread_acquire_lock() is asked not to block.
: Make sure the âMissing parenthesesâ syntax error message is
only applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.
: Fixed a race condition when import a submodule from a package.
: The internal unicodedata database has been upgraded to Unicode
10.0.
: Move co_extra_freefuncs from per-thread to per-interpreter to
avoid crashes.
:  now shows expected input in custom error message when
used as a Python 2 statement. Patch by Sanyam Khurana.
: Removed a too-strict assertion that failed for certain
f-strings, such as eval(âfâ\nââ) and eval(âfâ\rââ).
: The compiler now produces more optimal code for complex
condition expressions in the âifâ, âwhileâ and âassertâ statement, the
âifâ expression, and generator expressions and comprehensions.
: Implement  (legacy C locale coercion). This means
that when a suitable coercion target locale is available, both the core
interpreter and locale-aware C extensions will assume the use of UTF-8 as
the default text encoding, rather than ASCII.
: Allows setting cell values for __closure__. Patch by Lisa
Roach.
: itertools.islice now accepts integer-like objects (having an
__index__ method) as start, stop, and slice arguments
: Tokens needed for parsing in Python moved to C. ,
 and . This way the tokens and tok_names in the token
module donât get changed when you import the tokenize module.
: Fixed parsing backslashes in f-strings.
: Fixed various segfaults with dict when input collections are
mutated during searching, inserting or comparing.  Based on patches by
Duane Griffin and Tim Mitchell.
: Fixed type.__setattr__() and type.__delattr__() for
non-interned attribute names.  Based on patch by Eryk Sun.
: If a KeyboardInterrupt happens when the interpreter is in the
middle of resuming a chain of nested âyield fromâ or âawaitâ calls, itâs
now correctly delivered to the innermost frame.
: object.__format__(x,  is now equivalent to 
rather than format(str(self), .
: Circular imports involving absolute imports with binding a
submodule to a name are now supported.
: sys.getsizeof() on a code object now returns the sizes which
includes the code struct and sizes of objects which it references. Patch
by Donghee Na.
: len() now raises ValueError rather than OverflowError if
__len__() returned a large negative integer.
: README.rst is now included in the list of distutils standard
READMEs and therefore included in source distributions.
: Fixed default implementations of __reduce__ and
__reduce_ex__(). object.__reduce__() no longer takes arguments,
object.__reduce_ex__() now requires one argument.
: Fix memory usage regression of set and frozenset object.
: Fixed error messages in the index() method of tuple, list and
deque when pass indices of wrong type.
: Shift operation now has less opportunity to raise
OverflowError. ValueError always is raised rather than OverflowError for
negative counts. Shifting zero with non-negative count always returns
zero.
: Fixed the slowing down to 25 times in the searching of some
unlucky Unicode characters.
: Add a unique ID to PyInterpreterState.  This makes it easier to
identify each subinterpreter.
: The deprecation warning is emitted if __complex__ returns an
instance of a strict subclass of complex.  In a future versions of Python
this can be an error.
: Show correct error messages when any of the pthread_* calls in
thread_pthread.h fails.
: Fix a memory leak when an ImportError is raised during from
import.
: Fix an oversight that %b format for bytes should support
objects follow the buffer protocol.
: The sys.path[0] initialization change for  caused
a regression by revealing an inconsistency in how sys.path is initialized
when executing  from a zipfile, directory, or other import
location. The interpreter now consistently avoids ever adding the import
locationâs parent directory to , and ensures no other
 entries are inadvertently modified when inserting the import
location named on the command line.
: Escaped percent â%%â in the format string for classic string
formatting no longer allows any characters between two percents.
: Fix a regression that bytes format may fail when containing
zero bytes inside.
: bool(), float(), list() and tuple() no longer take keyword
arguments. The first argument of int() can now be passes only as
positional argument.
: Set correct __cause__ for errors about invalid awaitables
returned from __aiter__ and __anext__.
: bool(range) works even if len(range) raises
OverflowError.
: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian
Coleman.
: Fix minor regression of PyEval_CallObjectWithKeywords. It
should raise TypeError when kwargs is not a dict.  But it might cause segv
when args=NULL and kwargs is not a dict.
: Support __rmod__ for subclasses of str being called before
str.__mod__. Patch by Martijn Pieters.
: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by
Matthieu Dartiailh.
: Fix incorrect handling of signed zeros in complex constructor
for complex subclasses and for inputs having a __complex__ method. Patch
by Serhiy Storchaka.
: Fixed possibly dereferencing undefined pointers when creating
weakref objects.
: Add  field to Module, ClassDef, FunctionDef, and
AsyncFunctionDef ast nodes.  docstring is not first stmt in their body
anymore.  It affects co_firstlineno and  of code object
for module and class. (Reverted in .)
: Fixed use-after-free problem in key sharing dict.
: Set the âpathâ and ânameâ attribute on ImportError for 
  .
: Improve from-import error message with location
: If max_line_length=None is specified while using the Compat32
policy, it is no longer ignored.  Patch by Mircea Cosbuc.
: Prevent RunMainFromImporter overwriting sys.path[0].
: Fixed possible BytesWarning when compare the code objects.
Warnings could be emitted at compile time.
: Fixed a crash when pass the iterable keyword argument to
sorted().
: Fix memory leak and use-after-free in os module
(path_converter).
: Fix regression in bytes(x) when x.__index__() raises Exception.
: Call _PyObject_GC_TRACK() lazily when calling Python function.
Calling function is up to 5% faster.
: bytes.fromhex() and bytearray.fromhex() now ignore all ASCII
whitespace, not only spaces.  Patch by Robert Xiao.
: Do not include <sys/random.h> if it does not exist.
: Correct the positioning of the syntax error caret for indented
blocks. Based on patch by Michael Layzell.
: Fixed bytes formatting of octals with zero padding in alternate
form.
: Python function can now have more than 255 parameters.
collections.namedtuple() now supports tuples with more than 255 elements.
: The preferred encoding is UTF-8 on Android. Patch written by
Chi Hsuan Yen.
: Clean up interpreter startup (see ).
: On Android, operating system data is now always encoded/decoded
to/from UTF-8, instead of the locale encoding to avoid inconsistencies
with os.fsencode() and os.fsdecode() which are already using UTF-8.
: functools.lru_cache() was susceptible to an obscure reentrancy
bug triggerable by a monkey-patched len() function.
: Fix a memory leak in split-table dictionaries: setattr() must
not convert combined table into split table. Patch written by INADA Naoki.
: f-string expressions are no longer accepted as docstrings and
by ast.literal_eval() even if they do not include expressions.
: Fixed setting the offset attribute of SyntaxError by
PyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().
: Fix the cross compilation of xxlimited when Python has been
built with Py_DEBUG defined.
: Rather than silently producing a class that doesnât support
zero-argument  in methods, failing to pass the new
__classcell__ namespace entry up to type.__new__ now results in a
DeprecationWarning and a class that supports zero-argument
.
: Modifying the class __dict__ inside the __set_name__ method of
a descriptor that is used inside that class no longer prevents calling the
__set_name__ method of other descriptors.
: Remove the PyEval_GetCallStats() function and deprecate the
untested and undocumented sys.callstats() function. Remove the
CALL_PROFILE special build: use the sys.setprofile() function,
 or  to profile function calls.
: More than 255 arguments can now be passed to a function.
: Fix a bug in the implementation   when checking if
the next instruction is YIELD_FROM. Regression introduced by WORDCODE
().
: Fix error position of the unicode error in ASCII and Latin1
encoders when a string returned by the error handler contains multiple
non-encodable characters (non-ASCII for the ASCII codec, characters out of
the U+0000-U+00FF range for Latin1).
: Optimize _PyDict_NewPresized() to create correct size dict.
Improve speed of dict literal with constant keys up to 30%.
: Show sys.version when -V option is supplied twice.
: The with-statement now checks for __enter__ before it checks
for __exit__. This gives less confusing error messages when both methods
are missing. Patch by Jonathan Ellington.
: Fix the set_inheritable() file descriptor method on platforms
that do not have the ioctl FIOCLEX and FIONCLEX commands.
: Fix not getting the localeâs charset upon initializing the
interpreter, on platforms that do not have langinfo.
: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
when decode astral characters.  Patch by Xiang Zhang.
: Improve speed of the STORE_DEREF opcode by 40%.
: Extra slash no longer added to sys.path components in case of
empty compile-time PYTHONPATH components.
: Sped up converting int to float by reusing faster bits counting
implementation.  Patch by Adrian Wielgosik.
: Optimize iterating split table values. Patch by Xiang Zhang.
: PyDict_SetDefault didnât combine split table when needed. Patch
by Xiang Zhang.
: Deprecation warning for invalid str and byte escape sequences
now prints better information about where the error occurs. Patch by
Serhiy Storchaka and Eric Smith.
: dict.update() no longer allocate unnecessary large memory.
: Fixed potential crash in PyUnicode_AsDecodedObject() in debug
build.
: Fixed of-by-one error in the peephole optimizer that caused
keeping unreachable code.
: Improved exception reporting for problematic __set_name__
attributes.
: Fixed possible memory leak in _PyTraceback_Add() and exception
loss in PyTraceBack_Here().
: Optimize and cleanup dict iteration.
: Added C implementation of asyncio.Future. Original patch by
Yury Selivanov.
: Added sanity checks and tests for PyUnicode_CopyCharacters().
Patch by Xiang Zhang.
: The type of long range iterator is now registered as Iterator.
Patch by Oren Milman.
: Creating instances of range_iterator by calling range_iterator
type now is disallowed.  Calling iter() on range instance is the only way.
Patch by Oren Milman.
: Resolving special methods of uninitialized type now causes
implicit initialization of the type instead of a fail.
: PyType_Ready() now checks that tp_name is not NULL. Original
patch by Niklas Koep.
: Fixed possible crash when AST is changed in process of
compiling it.
: Dict reduces possibility of 2nd conflict in hash table when
hashes have same lower bits.
: String constants with null character no longer interned.
: Fix crash when GC runs during weakref callbacks.
: String constants now interned recursively in tuples and
frozensets.
: ImportError.__init__ now resets not specified attributes.
: Fixed misleading error message when ImportError called with
invalid keyword args.
: Fix incorrect type in complex(1.0, {2:3}) error message. Patch
by Soumya Sharma.
: Single var-positional argument of tuple subtype was passed
unscathed to the C-defined function.  Now it is converted to exact tuple.
: Now __set_name__ is looked up on the class instead of the
instance.
: Fallback on reading /dev/urandom device when the getrandom()
syscall fails with EPERM, for example when blocked by SECCOMP.
: Donât import readline in isolated mode.
: Remove some redundant assignments to ob_size in longobject.c.
Thanks Oren Milman.
: Clean up redundant code in long_rshift function. Thanks Oren
Milman.
Upgrade internal unicode databases to Unicode version 9.0.0.
: Fix a regression in zipimportâs compile_source().  zipimport
should use the same optimization level as the interpreter.
: Replace Py_MEMCPY with memcpy(). Visual Studio can properly
optimize memcpy().
: Fix dict.pop() for splitted dictionary when trying to remove a
âpending keyâ (Not yet inserted in split-table). Patch by Xiang Zhang.
: Raise DeprecationWarning when async and await keywords are used
as variable/attribute/class/function name.
: Fix a refleak in code that raises DeprecationWarning.
: Fix asynchronous generators aclose() and athrow() to handle
StopAsyncIteration propagation properly.
: Speed-up method calls: add LOAD_METHOD and CALL_METHOD opcodes.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix an assertion failure in  class definition, in
case the class has an attribute whose name is specified in _anonymous_
but not in . Patch by Oren Milman.

: Fix an assertion failure in subprocess.Popen() on Windows,
in case the env argument has a bad  method. Patch by Oren
Milman.

: Fix an assertion failure in PyErr_WriteUnraisable() in case
of an exception with a bad __module__ attribute. Patch by Oren Milman.

: Fix assertion failures in case of a bad warnings.filters or
warnings.defaultaction. Patch by Oren Milman.

: Change direct usage of PyInterpreterState.modules to
PyImport_GetModuleDict(). Also introduce more uniformity in other code
that deals with sys.modules. This helps reduce complications when working
on sys.modules.

: Switch to the abstract API when dealing with
PyInterpreterState.modules. This allows later support for all dict
subclasses and other Mapping implementations.  Also add a
PyImport_GetModule() function to reduce a bunch of duplicated code.

: Raise a TypeError instead of SystemError in case
warnings.onceregistry is not a dictionary. Patch by Oren Milman.

================================================================================

# Changelog - Core and Builtins (Part 3)

: For finer control of tracing behaviour when testing the
interpreter, two new frame attributes have been added to control the
emission of particular trace events: f_trace_lines ( by
default) to turn off per-line trace events; and f_trace_opcodes
( by default) to turn on per-opcode trace events.

: Fix several possible instances of undefined behavior due to
floating-point demotions.

: Location information ( and col_offset) in
f-strings is now (mostly) correct.  This fixes tools like flake8 from
showing warnings on the wrong line (typically the first line of the file).

: Consolidate CPythonâs global runtime state under a single
struct.  This improves discoverability of the runtime state.

: Fix possible undefined behavior in _PyObject_FastCall_Prepend.

: Include sys/sysmacros.h for major(), minor(), and makedev().
GNU C libray plans to remove the functions from sys/types.h.

: Fix an assertion failure in zipimport.zipimporter.get_data
on Windows, when the return value of pathname.replace('/','\\') isnât
a string. Patch by Oren Milman.

: Fix an assertion failure in the  method of
io.TextIOWrapper, when the encoder doesnât return a bytes object.
Patch by Oren Milman.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Fix a crash in some methods of io.TextIOWrapper, when the
decoderâs state is invalid. Patch by Oren Milman.

:  now shows correct usage hint for using Python 2
redirection syntax.  Patch by Sanyam Khurana.

: Fix a race condition in importlib _get_module_lock().

: Add a non-dummy implementation of _Py_atomic_store and
_Py_atomic_load on MSVC.

: Fix potential crash during GC caused by tp_dealloc which
doesnât call PyObject_GC_UnTrack().

: Avoid masking original TypeError in call with * unpacking when
other arguments are passed.

: str.format_map() now passes key lookup exceptions through.
Previously any exception was replaced with a KeyError exception.

: Use _Py_atomic API for concurrency-sensitive signal state.

: Relative import from unloaded package now reimports the package
instead of failing with SystemError.  Relative import from non-package now
fails with ImportError rather than SystemError.

: Improve signal delivery. Avoid using Py_AddPendingCall from
signal handler, to avoid calling signal-unsafe functions. The tests Iâm
adding here fail without the rest of the patch, on Linux and OS X. This
means our signal delivery logic had defects (some signals could be lost).

================================================================================

# Changelog - Core and Builtins (Part 5)

: Avoid blocking in pthread_mutex_lock() when
PyThread_acquire_lock() is asked not to block.

: Make sure the âMissing parenthesesâ syntax error message is
only applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.

: Fixed a race condition when import a submodule from a package.

: The internal unicodedata database has been upgraded to Unicode
10.0.

: Move co_extra_freefuncs from per-thread to per-interpreter to
avoid crashes.

:  now shows expected input in custom error message when
used as a Python 2 statement. Patch by Sanyam Khurana.

: Removed a too-strict assertion that failed for certain
f-strings, such as eval(âfâ\nââ) and eval(âfâ\rââ).

: The compiler now produces more optimal code for complex
condition expressions in the âifâ, âwhileâ and âassertâ statement, the
âifâ expression, and generator expressions and comprehensions.

: Implement  (legacy C locale coercion). This means
that when a suitable coercion target locale is available, both the core
interpreter and locale-aware C extensions will assume the use of UTF-8 as
the default text encoding, rather than ASCII.

: Allows setting cell values for __closure__. Patch by Lisa
Roach.

================================================================================

# Changelog - Core and Builtins (Part 6)

: itertools.islice now accepts integer-like objects (having an
__index__ method) as start, stop, and slice arguments

: Tokens needed for parsing in Python moved to C. ,
 and . This way the tokens and tok_names in the token
module donât get changed when you import the tokenize module.

: Fixed parsing backslashes in f-strings.

: Fixed various segfaults with dict when input collections are
mutated during searching, inserting or comparing.  Based on patches by
Duane Griffin and Tim Mitchell.

: Fixed type.__setattr__() and type.__delattr__() for
non-interned attribute names.  Based on patch by Eryk Sun.

: If a KeyboardInterrupt happens when the interpreter is in the
middle of resuming a chain of nested âyield fromâ or âawaitâ calls, itâs
now correctly delivered to the innermost frame.

: object.__format__(x,  is now equivalent to 
rather than format(str(self), .

: Circular imports involving absolute imports with binding a
submodule to a name are now supported.

: sys.getsizeof() on a code object now returns the sizes which
includes the code struct and sizes of objects which it references. Patch
by Donghee Na.

================================================================================

# Changelog - Core and Builtins (Part 7)

: len() now raises ValueError rather than OverflowError if
__len__() returned a large negative integer.

: README.rst is now included in the list of distutils standard
READMEs and therefore included in source distributions.

: Fixed default implementations of __reduce__ and
__reduce_ex__(). object.__reduce__() no longer takes arguments,
object.__reduce_ex__() now requires one argument.

: Fix memory usage regression of set and frozenset object.

: Fixed error messages in the index() method of tuple, list and
deque when pass indices of wrong type.

: Shift operation now has less opportunity to raise
OverflowError. ValueError always is raised rather than OverflowError for
negative counts. Shifting zero with non-negative count always returns
zero.

: Fixed the slowing down to 25 times in the searching of some
unlucky Unicode characters.

: Add a unique ID to PyInterpreterState.  This makes it easier to
identify each subinterpreter.

: The deprecation warning is emitted if __complex__ returns an
instance of a strict subclass of complex.  In a future versions of Python
this can be an error.

: Show correct error messages when any of the pthread_* calls in
thread_pthread.h fails.

================================================================================

# Changelog - Core and Builtins (Part 8)

: Fix a memory leak when an ImportError is raised during from
import.

: Fix an oversight that %b format for bytes should support
objects follow the buffer protocol.

: The sys.path[0] initialization change for  caused
a regression by revealing an inconsistency in how sys.path is initialized
when executing  from a zipfile, directory, or other import
location. The interpreter now consistently avoids ever adding the import
locationâs parent directory to , and ensures no other
 entries are inadvertently modified when inserting the import
location named on the command line.

: Escaped percent â%%â in the format string for classic string
formatting no longer allows any characters between two percents.

: Fix a regression that bytes format may fail when containing
zero bytes inside.

: bool(), float(), list() and tuple() no longer take keyword
arguments. The first argument of int() can now be passes only as
positional argument.

: Set correct __cause__ for errors about invalid awaitables
returned from __aiter__ and __anext__.

: bool(range) works even if len(range) raises
OverflowError.

: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian
Coleman.

================================================================================

# Changelog - Core and Builtins (Part 9)

: Fix minor regression of PyEval_CallObjectWithKeywords. It
should raise TypeError when kwargs is not a dict.  But it might cause segv
when args=NULL and kwargs is not a dict.

: Support __rmod__ for subclasses of str being called before
str.__mod__. Patch by Martijn Pieters.

: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by
Matthieu Dartiailh.

: Fix incorrect handling of signed zeros in complex constructor
for complex subclasses and for inputs having a __complex__ method. Patch
by Serhiy Storchaka.

: Fixed possibly dereferencing undefined pointers when creating
weakref objects.

: Add  field to Module, ClassDef, FunctionDef, and
AsyncFunctionDef ast nodes.  docstring is not first stmt in their body
anymore.  It affects co_firstlineno and  of code object
for module and class. (Reverted in .)

: Fixed use-after-free problem in key sharing dict.

: Set the âpathâ and ânameâ attribute on ImportError for 
  .

: Improve from-import error message with location

: If max_line_length=None is specified while using the Compat32
policy, it is no longer ignored.  Patch by Mircea Cosbuc.

: Prevent RunMainFromImporter overwriting sys.path[0].

================================================================================

# Changelog - Core and Builtins (Part 10)

: Fixed possible BytesWarning when compare the code objects.
Warnings could be emitted at compile time.

: Fixed a crash when pass the iterable keyword argument to
sorted().

: Fix memory leak and use-after-free in os module
(path_converter).

: Fix regression in bytes(x) when x.__index__() raises Exception.

: Call _PyObject_GC_TRACK() lazily when calling Python function.
Calling function is up to 5% faster.

: bytes.fromhex() and bytearray.fromhex() now ignore all ASCII
whitespace, not only spaces.  Patch by Robert Xiao.

: Do not include <sys/random.h> if it does not exist.

: Correct the positioning of the syntax error caret for indented
blocks. Based on patch by Michael Layzell.

: Fixed bytes formatting of octals with zero padding in alternate
form.

: Python function can now have more than 255 parameters.
collections.namedtuple() now supports tuples with more than 255 elements.

: The preferred encoding is UTF-8 on Android. Patch written by
Chi Hsuan Yen.

: Clean up interpreter startup (see ).

: On Android, operating system data is now always encoded/decoded
to/from UTF-8, instead of the locale encoding to avoid inconsistencies
with os.fsencode() and os.fsdecode() which are already using UTF-8.

================================================================================

# Changelog - Core and Builtins (Part 11)

: functools.lru_cache() was susceptible to an obscure reentrancy
bug triggerable by a monkey-patched len() function.

: Fix a memory leak in split-table dictionaries: setattr() must
not convert combined table into split table. Patch written by INADA Naoki.

: f-string expressions are no longer accepted as docstrings and
by ast.literal_eval() even if they do not include expressions.

: Fixed setting the offset attribute of SyntaxError by
PyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().

: Fix the cross compilation of xxlimited when Python has been
built with Py_DEBUG defined.

: Rather than silently producing a class that doesnât support
zero-argument  in methods, failing to pass the new
__classcell__ namespace entry up to type.__new__ now results in a
DeprecationWarning and a class that supports zero-argument
.

: Modifying the class __dict__ inside the __set_name__ method of
a descriptor that is used inside that class no longer prevents calling the
__set_name__ method of other descriptors.

================================================================================

# Changelog - Core and Builtins (Part 12)

: Remove the PyEval_GetCallStats() function and deprecate the
untested and undocumented sys.callstats() function. Remove the
CALL_PROFILE special build: use the sys.setprofile() function,
 or  to profile function calls.

: More than 255 arguments can now be passed to a function.

: Fix a bug in the implementation   when checking if
the next instruction is YIELD_FROM. Regression introduced by WORDCODE
().

: Fix error position of the unicode error in ASCII and Latin1
encoders when a string returned by the error handler contains multiple
non-encodable characters (non-ASCII for the ASCII codec, characters out of
the U+0000-U+00FF range for Latin1).

: Optimize _PyDict_NewPresized() to create correct size dict.
Improve speed of dict literal with constant keys up to 30%.

: Show sys.version when -V option is supplied twice.

: The with-statement now checks for __enter__ before it checks
for __exit__. This gives less confusing error messages when both methods
are missing. Patch by Jonathan Ellington.

: Fix the set_inheritable() file descriptor method on platforms
that do not have the ioctl FIOCLEX and FIONCLEX commands.

================================================================================

# Changelog - Core and Builtins (Part 13)

: Fix not getting the localeâs charset upon initializing the
interpreter, on platforms that do not have langinfo.

: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
when decode astral characters.  Patch by Xiang Zhang.

: Improve speed of the STORE_DEREF opcode by 40%.

: Extra slash no longer added to sys.path components in case of
empty compile-time PYTHONPATH components.

: Sped up converting int to float by reusing faster bits counting
implementation.  Patch by Adrian Wielgosik.

: Optimize iterating split table values. Patch by Xiang Zhang.

: PyDict_SetDefault didnât combine split table when needed. Patch
by Xiang Zhang.

: Deprecation warning for invalid str and byte escape sequences
now prints better information about where the error occurs. Patch by
Serhiy Storchaka and Eric Smith.

: dict.update() no longer allocate unnecessary large memory.

: Fixed potential crash in PyUnicode_AsDecodedObject() in debug
build.

: Fixed of-by-one error in the peephole optimizer that caused
keeping unreachable code.

: Improved exception reporting for problematic __set_name__
attributes.

: Fixed possible memory leak in _PyTraceback_Add() and exception
loss in PyTraceBack_Here().

================================================================================

# Changelog - Core and Builtins (Part 14)

: Optimize and cleanup dict iteration.

: Added C implementation of asyncio.Future. Original patch by
Yury Selivanov.

: Added sanity checks and tests for PyUnicode_CopyCharacters().
Patch by Xiang Zhang.

: The type of long range iterator is now registered as Iterator.
Patch by Oren Milman.

: Creating instances of range_iterator by calling range_iterator
type now is disallowed.  Calling iter() on range instance is the only way.
Patch by Oren Milman.

: Resolving special methods of uninitialized type now causes
implicit initialization of the type instead of a fail.

: PyType_Ready() now checks that tp_name is not NULL. Original
patch by Niklas Koep.

: Fixed possible crash when AST is changed in process of
compiling it.

: Dict reduces possibility of 2nd conflict in hash table when
hashes have same lower bits.

: String constants with null character no longer interned.

: Fix crash when GC runs during weakref callbacks.

: String constants now interned recursively in tuples and
frozensets.

: ImportError.__init__ now resets not specified attributes.

: Fixed misleading error message when ImportError called with
invalid keyword args.

================================================================================

# Changelog - Core and Builtins (Part 15)

: Fix incorrect type in complex(1.0, {2:3}) error message. Patch
by Soumya Sharma.

: Single var-positional argument of tuple subtype was passed
unscathed to the C-defined function.  Now it is converted to exact tuple.

: Now __set_name__ is looked up on the class instead of the
instance.

: Fallback on reading /dev/urandom device when the getrandom()
syscall fails with EPERM, for example when blocked by SECCOMP.

: Donât import readline in isolated mode.

: Remove some redundant assignments to ob_size in longobject.c.
Thanks Oren Milman.

: Clean up redundant code in long_rshift function. Thanks Oren
Milman.

Upgrade internal unicode databases to Unicode version 9.0.0.

: Fix a regression in zipimportâs compile_source().  zipimport
should use the same optimization level as the interpreter.

: Replace Py_MEMCPY with memcpy(). Visual Studio can properly
optimize memcpy().

: Fix dict.pop() for splitted dictionary when trying to remove a
âpending keyâ (Not yet inserted in split-table). Patch by Xiang Zhang.

: Raise DeprecationWarning when async and await keywords are used
as variable/attribute/class/function name.

: Fix a refleak in code that raises DeprecationWarning.

================================================================================

# Changelog - Core and Builtins (Part 16)

: Fix asynchronous generators aclose() and athrow() to handle
StopAsyncIteration propagation properly.

: Speed-up method calls: add LOAD_METHOD and CALL_METHOD opcodes.

================================================================================

# Changelog - Library (Part 1)

List:
: xml.etree: Fix a crash when a parser is part of a reference
cycle.
: random.seed() now works with bytes in version=1
: typing.get_type_hints now finds the right globalns for classes
and modules by default (when no  was specified by the caller).
: Speed improvements to the  module.  Original PRs by
Ivan Levkivskyi and Mitar.
: The C accelerator module of ElementTree ignored exceptions
raised when looking up TreeBuilder target methods in XMLParser().
: socket.create_connection() now fixes manually a reference
cycle: clear the variable storing the last exception on success.
: LoggerAdapter objects can now be nested.
: SSLContext.check_hostname now automatically sets
SSLContext.verify_mode to ssl.CERT_REQUIRED instead of failing with a
ValueError.
: socketserver.ThreadingMixIn now keeps a list of non-daemonic
threads to wait until all these threads complete in server_close().
: Changed the implementation strategy for
collections.namedtuple() to substantially reduce the use of exec() in
favor of precomputed methods. As a result, the  parameter and
 attribute are no longer supported.  The benefits include 1)
having a smaller memory footprint for applications using multiple named
tuples, 2) faster creation of the named tuple class (approx 4x to 6x
depending on how it is measured), and 3) minor speed-ups for instance
creation using __new__, _make, and _replace.  (The primary patch
contributor is Jelle Zijlstra with further improvements by INADA Naoki,
Serhiy Storchaka, and Raymond Hettinger.)
: Improves SSL error handling to avoid losing error numbers.
: Make return types of SSLContext.wrap_bio() and
SSLContext.wrap_socket() customizable.
: ssl.SSLContext() now uses OpenSSL error information when a
context cannot be instantiated.
: The SSL module now raises SSLCertVerificationError when OpenSSL
fails to verify the peerâs certificate. The exception contains more
information about the error.
: SSLSocket.sendall() now uses memoryview to create slices of
data. This fixes support for all bytes-like object. It is also more
efficient and avoids costly copies.
: A new function
argparse.ArgumentParser.parse_intermixed_args provides the ability to
parse command lines where there user intermixes options and positional
arguments.
: Fix string concatenation bug in rare error path in the
subprocess module
: Micro-optimize asyncio._get_running_loop() to become up
to 10% faster.
: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
partial characters for UTF-8 input (libexpat bug 115):
https://github.com/libexpat/libexpat/issues/115
: Add TLS 1.3 cipher suites and OP_NO_TLSv1_3.
bpo-1198569: string.Template subclasses can optionally define
braceidpattern if they want to specify different placeholder patterns
inside and outside the braces.  If None (the default) it falls back to
.
: concurrent.futures.ProcessPoolExecutor.shutdown() now
explicitly closes the call queue. Moreover, shutdown(wait=True) now also
join the call queue thread, to prevent leaking a dangling thread.
: The  and as_completed() iterators in
concurrent.futures now avoid keeping a reference to yielded objects.
: Fix fileinput.FileInput(files, inplace=True) when 
contain pathlib.Path objects.
: Fix ctypes producing wrong  type codes for integer
types.
:  has been added to the socket interface which
allows communication between virtual machines and their host.
: The subprocess module now sets the filename when
FileNotFoundError is raised on POSIX systems due to the executable or cwd
not being found.
: Update some methods in the _pyio module to also accept integer
types. Patch by Oren Milman.
: concurrent.futures: WorkItem.run() used by ThreadPoolExecutor
now breaks a reference cycle between an exception object and the WorkItem
object.
: xmlrpc.server now explicitly breaks reference cycles when using
sys.exc_info() in code handling exceptions.
: configparser: reading defaults in the ConfigParser()
constructor is now using read_dict(), making its behavior consistent
with the rest of the parser.  Non-string keys and values in the defaults
dictionary are now being implicitly converted to strings.  Patch by James
Tocknell.
: pydoc: the stop() method of the private ServerThread class now
waits until DocServer.serve_until_quit() completes and then explicitly
sets its docserver attribute to None to break a reference cycle.
: Many asserts in multiprocessing are now more informative,
and some error types have been changed to more specific ones.
: Convert zipimport to use Argument Clinic.
: The ssl and hashlib modules now call
OPENSSL_add_all_algorithms_noconf() on OpenSSL < 1.1.0. The function
detects CPU features and enables optimizations on some CPU architectures
such as POWER8. Patch is based on research from Gustavo Serra Scalet.
: Non-daemonic threads created by a multiprocessing.Process are
now joined on child exit.
:  now works with asynchronous generator and coroutine
objects. Patch by George Collins based on diagnosis by Luciano Ramalho.
: There are a number of uninformative asserts in the
multiprocessing module, as noted in issue 5001. This change fixes two
of the most potentially problematic ones, since they are in
error-reporting code, in the multiprocessing.managers.convert_to_error
function. (It also makes more informative a ValueError message.) The only
potentially problematic change is that the AssertionError is now a
TypeError; however, this should also help distinguish it from an
AssertionError being  by the function/its caller (such as in
issue 31169). - Patch by Allen W. Smith (drallensmith on github).
: Fixed miscellaneous errors in asyncio speedup module.
: socketserver.ForkingMixIn.server_close() now waits until all
child processes completed to prevent leaking zombie processes.
: Add an include_file parameter to
zipapp.create_archive()
: Optimize array.array comparison. It is now from 10x up to 70x
faster when comparing arrays holding values of the same integer type.
: ttk: fix the destroy() method of LabeledScale and OptionMenu
classes. Call the parent destroy() method even if the used attribute
doesnât exist. The LabeledScale.destroy() method now also explicitly
clears label and scale attributes to help the garbage collector to destroy
all widgets.
: Fix copyreg._slotnames() mangled attribute calculation for
classes whose name begins with an underscore. Patch by Shane Harvey.
: Allow logging.config.fileConfig to accept kwargs and/or
args.
: pathlib.Path objects now include an is_mount() method
(only implemented on POSIX).  This is similar to os.path.ismount(p).
Patch by Cooper Ry Lees.
: Fixed a crash when using asyncio and threads.
: Added support for CAN ISO-TP protocol in the socket module.
: Added a  method to logging.StreamHandler to
allow the stream to be set after creation.
: Fix handling of long oids in ssl.  Based on patch by Christian
Heimes.
: Support tzinfo objects with sub-minute offsets.
: Fix shared memory performance regression in multiprocessing in
3.x. Shared memory used anonymous memory mappings in 2.x, while 3.x mmaps
actual files. Try to be careful to do as little disk I/O as possible.
: Fix too many fds in processes started with the âforkserverâ
method. A child process would inherit as many fds as the number of
still-running children.
: Fix unittest.mockâs autospec to not fail on method-bound
builtin functions.  Patch by Aaron Gallagher.
: Fix decrementing a borrowed reference in tracemalloc.
: Fix multiprocessing.sharedctypes to recognize typecodes 
and .
: Remove obsolete code in readline module for platforms where GNU
readline is older than 2.1 or where select() is not available.
: Change ttk.OptionMenu radiobuttons to be unique across
instances of OptionMenu.
: Fix multiprocessing.Queue.join_thread(): it now waits until the
thread completes, even if the thread was started by the same process which
created the queue.
: Fix segfault in readline when using readlineâs history-size
option.  Patch by Nir Soffer.
: Added multiprocessing.Process.kill method to terminate using
the SIGKILL signal on Unix.
: socket.close() now ignores ECONNRESET error.
: Fix out of bounds write in
asyncio.CFuture.remove_done_callback().
: Use keywords in the  of datetime.timedelta.
: signal.setitimer() may disable the timer when passed a tiny
value. Tiny values (such as 1e-6) are valid non-zero values for
setitimer(), which is specified as taking microsecond-resolution
intervals. However, on some platform, our conversion routine could convert
1e-6 into a zero interval, therefore disabling the timer instead of
(re-)scheduling it.
: Fix bug when modifying os.environ while iterating over it
: Avoid importing  from  to improve startup
speed. Python startup is about 5% faster on Linux and 30% faster on macOS.
: Add missing parameter ânâ on
multiprocessing.Condition.notify(). The doc claims
multiprocessing.Condition behaves like threading.Condition, but its
notify() method lacked the optional ânâ argument (to specify the number of
sleepers to wake up) that threading.Condition.notify() accepts.
: Fix email header value parser dropping folding white space in
certain cases.
: Add a  method to multiprocessing.Process.
: Fix a segmentation fault in _hashopenssl when standard hash
functions such as md5 are not available in the linked OpenSSL library.  As
in some special FIPS-140 build environments.
: Update zlib to 1.2.11.
: ftplib.FTP.putline() now throws ValueError on commands that
contains CR or LF. Patch by Donghee Na.
: os.listdir() and os.scandir() now emit bytes names when called
with bytes-like argument.
: Prohibited the â=â character in environment variable names in
os.putenv() and os.spawn*().
: The description of a unittest subtest now preserves the order
of keyword arguments of TestCase.subTest().
: struct.Struct.format type is now  instead of
.
: Fix concurrent.futures.thread.ThreadPoolExecutor threads to
have a non repr() based thread name by default when no thread_name_prefix
is supplied. They will now identify themselves as
âThreadPoolExecutor-y_nâ.
: Fixed the lgettext() family of functions in the gettext module.
They now always return bytes.
: Functional API of enum allows to create empty enums. Patched by
Donghee Na
: Fix race condition between signal delivery and wakeup file
descriptor. Patch by Nathaniel Smith.
: lib2to3 now recognizes  and  strings.
: pkgutil.walk_packages function now raises ValueError if 
is a string. Patch by Sanyam Khurana.
: Avoid race condition in multiprocessing cleanup.
: Fix multiprocessing.Process.exitcode to return the opposite of
the signal number when the process is killed by a signal (instead of 255)
when using the âforkserverâ method.
: The traceback no longer displayed for SystemExit raised in a
callback registered by atexit.
: Donât log exceptions if Task/Future âcancel()â method was
called.
: Fix path calculation in imp.load_package(), fixing it for
cases when a package is only shipped with bytecodes. Patch by Alexandru
Ardelean.
: The dis.dis() function now is able to disassemble nested code
objects.
: selectors does not take KeyboardInterrupt and SystemExit into
account, leaving a fd in a bad state in case of error. Patch by Giampaolo
Rodolaâ.
: multiprocessing.Queue.get() with a timeout now polls its reader
in non-blocking mode if it succeeded to acquire the lock but the acquire
took longer than the timeout.
: Updates to typing module: Add generic AsyncContextManager, add
support for ContextManager on all versions. Original PRs by Jelle Zijlstra
and Ivan Levkivskyi
: re.compile() no longer raises a BytesWarning when compiling a
bytes instance with misplaced inline modifier.  Patch by Roy Williams.
: Fix ssl sockets leaks when connection is aborted in asyncio/ssl
implementation. Patch by MichaÃ«l SghaÃ¯er.
: Closing transport during handshake process leaks open socket.
Patch by Nikolay Kim
: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu
Sornay.
: modify() method of poll(), epoll() and devpoll() based classes
of selectors module is around 10% faster.  Patch by Giampaolo Rodolaâ.
: On Windows, subprocess.Popen.communicate() now also ignore
EINVAL on stdin.write() if the child process is still running but closed
the pipe.
: Addded empty __slots__ to abc.ABC.  This allows subclassers to
deny __dict__ and __weakref__ creation.  Patch by Aaron Hall.
: Loggers are now pickleable.
: faulthandler now correctly filters and displays exception codes
on Windows
: Add TextIOWrapper.reconfigure() and a
TextIOWrapper.write_through attribute.
: Fix possible overflow when organize struct.pack_into error
message.  Patch by Yuan Liu.
: Fix the problem that logging.handlers.SysLogHandler cannot
handle IPv6 addresses.
: Allow registering at-fork handlers.
: Deprecate invalid ctypes call protection on Windows.  Patch by
Mariatta Wijaya.
: multiprocessing.Queue._feed background running thread do not
break from main loop on exception.
: Fix handling escape characters in HZ codec.  Based on patch by
Ma Lin.
: inspect.signature() now supports callables with
variable-argument parameters wrapped with partialmethod. Patch by Donghee
Na.
: importlib.find_spec() raises ModuleNotFoundError instead of
AttributeError if the specified parent module is not a package (i.e. lacks
a __path__ attribute).
: Fix AttributeError when using SimpleQueue.empty() under 
and forkserver start methods.
: Warnings emitted when compile a regular expression now always
point to the line in the user code.  Previously they could point into
inners of the re module if emitted from inside of groups or conditionals.
: imaplib and poplib now catch the Windows socket WSAEINVAL error
(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.
This error occurs sometimes on SSL connections.
: Removed previously deprecated in Python 2.4 classes Plist, Dict
and _InternalDict in the plistlib module.  Dict values in the result of
functions readPlist() and readPlistFromBytes() are now normal dicts.  You
no longer can use attribute access to access items of these dictionaries.
: The  is now deprecated and will be removed in
Python 3.8.
: Compiling regular expression in debug mode on CPython now
displays the compiled bytecode in human readable form.
: Fixed Task.cancel() can be ignored when the task is running
coroutine and the coroutine returned without any more .
: contextlib.AbstractContextManager now supports
anti-registration by setting __enter__ = None or __exit__ = None,
following the pattern introduced in . Patch by Jelle Zijlstra.
: Enhanced regular expressions optimization. This increased the
performance of matching some patterns up to 25 times.
: Weaken the condition of deprecation warnings for inline
modifiers. Now allowed several subsequential inline modifiers at the start
of the pattern (e.g. '(?i)(?s)...').  In verbose mode whitespaces and
comments now are allowed before and between inline modifiers (e.g. 
 ).
: Optimized case-insensitive matching and searching of regular
expressions.
: Fix range checking in GB18030 decoder.  Original patch by Ma
Lin.
: rewrite cgi.parse_multipart, reusing the FieldStorage class and
making its results consistent with those of FieldStorage for
multipart/form-data requests. Patch by Pierre Quentel.
: Removed the __init__ methods of _jsonâs scanner and encoder.
Misusing them could cause memory leaks or crashes.  Now scanner and
encoder objects are completely initialized in the __new__ methods.
: Compiled regular expression objects with the re.LOCALE flag no
longer depend on the locale at compile time.  Only the locale at matching
time affects the result of matching.
: Avoid KeyboardInterrupt tracebacks in forkserver helper process
when Ctrl-C is received.
: binascii.b2a_uu() and uu.encode() now support using  as
zero instead of space.
: Various updates to typing module: add typing.NoReturn type, use
WrapperDescriptorType, minor bug-fixes.  Original PRs by Jim
Fasarakis-Hilliard and Ivan Levkivskyi.
: Fix getsockname() for unbound AF_UNIX sockets on Linux.
: The seek() and tell() methods of io.FileIO now set the internal
seekable attribute to avoid one syscall on open() (in buffered or text
mode).
: unittestâs assertAlmostEqual and assertNotAlmostEqual provide a
better message in case of failure which includes the difference between
left and right arguments.  (patch by Giampaolo Rodolaâ)
: Add support for curses.A_ITALIC.
: inspect.isabstract() now works during __init_subclass__.  Patch
by Nate Soares.
: Preserve generator state when _random.Random.setstate() raises
an exception. Patch by Bryan Olson.
: Fixed leaks and crashes in errors handling in the parser
module.
: Column widths in the output of dis.dis() are now adjusted for
large line numbers and instruction offsets.
: Fixed crashes in IOBase methods __next__() and readlines() when
readline() or __next__() respectively return non-sizeable object. Fixed
possible other errors caused by not checking results of PyObject_Size(),
PySequence_Size(), or PyMapping_Size().
: Fix PathLike support for shutil.unpack_archive. Patch by Jelle
Zijlstra.
: Compiled regular expression and match objects in the re module
now support copy.copy() and copy.deepcopy() (they are considered atomic).
: _io._IOBase.readlines will check if itâs closed first when hint
is present.
: Fixed race condition in pathlib mkdir with flags parents=True.
Patch by Armin Rigo.
: Fixed arbitrary unchaining of RuntimeError exceptions in
contextlib.contextmanager.  Patch by Siddharth Velankar.
: Test that sqlite3 trace callback is not called multiple times
when schema is changing.  Indirectly fixed by switching to use
sqlite3_prepare_v2() in .  Patch by Aviv Palivoda.
: Allowed calling the close() method of the zip entry writer
object multiple times.  Writing to a closed writer now always produces a
ValueError.
: Pickling and copying ImportError now preserves name and path
attributes.
: re.escape() now escapes only regex special characters.
: Add math.remainder operation, implementing remainder as
specified in IEEE 754.
: Improve struct.pack_into() exception messages for problems with
the buffer size and offset.  Patch by Andrew Nester.
: Support If-Modified-Since HTTP header (browser cache).  Patch
by Pierre Quentel.
: Fixed comparison check for ipaddress.ip_interface objects.
Patch by Sanjay Sundaresan.
: Fixed memory leaks in the replace() method of datetime and time
objects when pass out of bound fold argument.
: Fix a crash in itertools.chain.from_iterable when encountering
long runs of empty iterables.
: Sped up reading encrypted ZIP files by 2 times.
: Element.getiterator() and the html parameter of XMLParser()
were deprecated only in the documentation (since Python 3.2 and 3.4
correspondingly). Now using them emits a deprecation warning.
: Fixed multiple crashes in ElementTree caused by race conditions
and wrong types.
: Added support of file descriptors in os.scandir() on Unix.
os.fwalk() is sped up by 2 times by using os.scandir().
: Fixed a bug in pools in multiprocessing.pool that raising an
exception at the very first of an iterable may swallow the exception or
make the program hang. Patch by Davin Potts and Xiang Zhang.
: unittest.TestCase.assertRaises() now manually breaks a
reference cycle to not keep objects alive longer than expected.
: The zipapp module now supports general path-like objects, not
just pathlib.Path.
: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when
the OS gives priority to errors such as EACCES over EEXIST.
: Release references to tasks, their arguments and their results
as soon as they are finished in multiprocessing.Pool.
: The mode argument of os.makedirs() no longer affects the file
permission bits of newly created intermediate-level directories.
: faulthandler: Restore the old sigaltstack during teardown.
Patch by Christophe Zeitouny.
: Fixed crashes in repr of recursive buffered file-like objects.
: Fix crashes in partial.__repr__ if the keys of partial.keywords
are not strings.  Patch by Michael Seifert.
: Fixed possible failing or crashing input() if attributes
âencodingâ or âerrorsâ of sys.stdin or sys.stdout are not set or are not
strings.
: Using non-integer value for selecting a plural form in gettext
is now deprecated.
: Use C library implementation for math functions erf() and
erfc().
: os.stat() and os.DirEntry.inode() now convert inode (st_ino)
using unsigned integers.
: Fix a bug that prevented array âQâ, âLâ and âIâ from accepting
big intables (objects that have __int__) as elements.
: Speed up importing the webbrowser module.
webbrowser.register() is now thread-safe.
: The zipfile module now accepts path-like objects for external
paths.
: index() and count() methods of collections.abc.Sequence now
check identity before checking equality when do comparisons.
: Added support for bytes paths in os.fwalk().
: Add new socket.TCP_NOTSENT_LOWAT (Linux 3.12)
constant. Patch by Nathaniel J. Smith.
: Allow use of path-like object as a single argument in
ConfigParser.read(). Patch by David Ellis.
: Migrate sqlite3 module to _v2 API.  Patch by Aviv Palivoda.
: Fix out of bound iteration in
asyncio.Future.remove_done_callback implemented in C.
: asyncio.subprocess.SubprocessStreamProtocol no longer closes
before all pipes are closed.
: Fix Task.current_task and Task.all_tasks implemented in C to
accept None argument as their pure Python implementation.
: Fix asyncio to support instantiation of new event loops in
child processes.
: SimpleXMLRPCDispatcher no longer chains KeyError (or any other
exception) to exception(s) raised in the dispatched methods. Patch by Petr
Motejlek.
: Method register_function() of
xmlrpc.server.SimpleXMLRPCDispatcher and its subclasses can now be used as
a decorator.
: Fix assertion error in threading._DummyThread.is_alive().
: Add a test that checks that cwd parameter of Popen() accepts
PathLike objects.  Patch by Sayan Chowdhury.
: Start a transaction implicitly before a DML statement. Patch by
Aviv Palivoda.
: get_extra_info() raises exception if get called on closed ssl
transport. Patch by Nikolay Kim.
: urllib.parse.quote is now based on RFC 3986 and hence includes
â~â in the set of characters that is not quoted by default. Patch by
Christian Theune and Ratnadeep Debnath.
: Altering a kwarg dictionary passed to functools.partial() no
longer affects a partial object after creation.
: Fix file object leak in aifc.open() when file is given as a
filesystem path and is not in valid AIFF format. Patch by Anthony Zhang.
: Add uuid.SafeUUID and uuid.UUID.is_safe to relay information
from the platform about whether generated UUIDs are generated with a
multiprocessing safe method.
: Improve some deprecations in importlib. Some deprecated methods
now emit DeprecationWarnings and have better descriptive messages.
: Fixed different behaviour of Decimal.from_float() for _decimal
and _pydecimal. Thanks Andrew Nester.
: locale.format_string now supports the âmonetaryâ keyword
argument, and locale.format is deprecated.
: importlib.reload() now raises ModuleNotFoundError if the module
lacks a spec.
: Various updates to typing module: typing.Counter,
typing.ChainMap, improved ABC caching, etc. Original PRs by Jelle
Zijlstra, Ivan Levkivskyi, Manuel Krebber, and Åukasz Langa.
: Fix datetime.fromtimestamp() regression introduced in Python
3.6.0: check minimum and maximum years.
: Prevent infinite loop in pathlib.Path.mkdir
: Fixed out-of-bounds buffer access in the group() method of the
match object. Based on patch by WGH.
: Add WrapperDescriptorType, MethodWrapperType, and
MethodDescriptorType built-in types to types module. Original patch by
Manuel Krebber.
: Unused install_misc command is now removed.  It has been
documented as unused since 2000.  Patch by Eric N. Vander Weele.
: The extend() method is now called instead of the append()
method when unpickle collections.deque and other list-like objects. This
can speed up unpickling to 2 times.
: The help of a builtin or extension class now includes the
constructor signature if __text_signature__ is provided for the class.
: Fix subprocess.Popen.wait() when the child process has exited
to a stopped instead of terminated state (ex: when under ptrace).
: Fix a regression in argparse that help messages would wrap at
non-breaking spaces.
: Fixed the comparison of mock.MagickMock with mock.ANY.
: Removed deprecated function ntpath.splitunc().
: Removed support of deprecated argument âexcludeâ in
tarfile.TarFile.add().
: Fixed infinite recursion in the repr of uninitialized
ctypes.CDLL instances.
: Removed deprecated features in the http.cookies module.
: A format string argument for string.Formatter.format() is now
positional-only.
: Removed support of deprecated undocumented keyword arguments in
methods of regular expression objects.
: Fixed race condition in C implementation of
functools.lru_cache. KeyError could be raised when cached function with
full cache was simultaneously called from different threads with the same
uncached arguments.
: The unittest.mock.sentinel attributes now preserve their
identity when they are copied or pickled.
: In urllib.request, suffixes in no_proxy environment variable
with leading dots could match related hostnames again (e.g. .b.c matches
a.b.c). Patch by Milan Oberkirch.
: Fix unittest.mock._Call helper: donât ignore the name parameter
anymore. Patch written by Jiajun Huang.
: inspect.getframeinfo() now correctly shows the first line of a
context. Patch by Sam Breese.
: Update authorizer constants in sqlite3 module. Patch by
Dingyuan Wang.
: Prevent infinite loop in pathlib.resolve() on Windows
: Fixed recursion errors in large or resized
curses.textpad.Textbox.  Based on patch by Tycho Andersen.
: curses.ascii predicates now work correctly with negative
integers.
: old keys should not remove new values from WeakValueDictionary
when collecting from another thread.
: Remove editor artifacts from Tix.py.
: Fixed a crash when deallocate deep ElementTree.
: Fix bugs in WeakValueDictionary.setdefault() and
WeakValueDictionary.pop() when a GC collection happens in another thread.
: Fixed a crash in resource.prlimit() when passing a sequence
that doesnât own its elements as limits.
: subprocess.Popen uses /system/bin/sh on Android as the shell,
instead of /bin/sh.
: multiprocessing.set_forkserver_preload() would crash the
forkserver process if a preloaded module instantiated some multiprocessing
objects such as locks.
: The chown() method of the tarfile.TarFile class does not fail
now when the grp module cannot be imported, as for example on Android
platforms.
: dbm.dumb now supports reading read-only files and no longer
writes the index file when it is not changed.  A deprecation warning is
now emitted if the index file is missed and recreated in the ârâ and âwâ
modes (will be an error in future Python releases).
: Unknown escapes consisting of  and an ASCII letter in
re.sub() replacement templates regular expressions now are errors.
: Fix a regression introduced in warnings.catch_warnings(): call
warnings.showwarning() if it was overridden inside the context manager.
: To assist with upgrades from 2.7, the previously documented
deprecation of inspect.getfullargspec() has been reversed. This
decision may be revisited again after the Python 2.7 branch is no longer
officially supported.
: Add sys.getandroidapilevel(): return the build time API version
of Android as an integer. Function only available on Android.
: Add new socket.TCP_CONGESTION (Linux 2.6.13) and
socket.TCP_USER_TIMEOUT (Linux 2.6.37) constants. Patch written
by Omar Sandoval.
: Restored the __reduce__() methods of datetime objects.
: Regular expression patterns, _sre.SRE_Pattern objects created
by re.compile(), become comparable (only x==y and x!=y operators). This
change should fix the : donât duplicate warning filters when
the warnings module is reloaded (thing usually only done in unit tests).
: Remove the subprocess.Popen.wait endtime parameter.  It was
deprecated in 3.4 and undocumented prior to that.
: In ctypes, prevent a crash calling the from_buffer() and
from_buffer_copy() methods on abstract classes like Array.
: In the âhttp.serverâ module, parse the protocol version if
possible, to avoid using HTTP 0.9 in some error responses.
: Makes Path.resolve() succeed on paths that do not exist. Patch
by Vajrasky Kok
: Fixed possible DoS and arbitrary code execution when handle
plural form selections in the gettext module.  The expression parser now
supports exact syntax supported by GNU gettext.
: Fixed possible crash in _io.TextIOWrapper deallocator when the
garbage collector is invoked in other thread.  Based on patch by Sebastian
Cufre.
: LZMA compressor and decompressor no longer raise exceptions if
given empty data twice.  Patch by Benjamin Fogle.
: Fixed segfault in cursesâs addch() with ncurses6.
: tarfile.open() with mode ârâ or âr:â now tries to open a tar
file with compression before trying to open it without compression.
Otherwise it had 50% chance failed with ignore_zeros=True.
: The webbrowser module now supports Firefox 36+ and derived
browsers.  Based on patch by Oleg Broytman.
: The webbrowser in an X environment now prefers using the
default browser directly. Also, the webbrowser register() function now has
a documented âpreferredâ argument, to specify browsers to be returned by
get() with no arguments. Patch by David Steele
: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused
by representing the scale as float value internally in Tk.  tkinter.IntVar
now works if float value is set to underlying Tk variable.
: calendar.TextCalendar.prweek() no longer prints a space after a
weeksâs calendar.  calendar.TextCalendar.pryear() no longer prints
redundant newline after a yearâs calendar.  Based on patch by Xiang Zhang.
: calendar.TextCalendar.prmonth() no longer prints a space at the
start of new line after printing a monthâs calendar.  Patch by Xiang
Zhang.
: The textwrap.TextWrapper class now honors non-breaking spaces.
Based on patch by Kaarle Ritvanen.
: os.fwalk() no longer fails on broken links.
: Fix iterator of C implemented asyncio.Future doesnât accept
non-None value is passed to it.send(val).
: Generated names for Tkinter widgets now start by the â!â prefix
for readability.
: Fixed HList.header_exists() in tkinter.tix module by addin a
workaround to Tix library bug.
: shutil.make_archive() no longer adds entry â./â to ZIP archive.
: re.sub() now raises an error for invalid numerical group
reference in replacement template even if the pattern is not found in the
string.  Error message for invalid group reference now includes the group
index and the position of the reference. Based on patch by SilentGhost.
: timeit now uses the sequence 1, 2, 5, 10, 20, 50,â¦ instead of
1, 10, 100,â¦ for autoranging.
: Command-line interface of the zipfile module now uses argparse.
Added support of long options.
: Optimize csv.DictWriter for large number of columns. Patch by
Mariatta Wijaya.
: Fix C implemented asyncio.Future didnât work on Windows.
: In the âioâ module, the argument to BufferedReader and
BytesIOâs read1() methods is now optional and can be -1, matching the
BufferedIOBase specification.
: Fix error building socket module when multithreading is
disabled.
: timeit: remove -c/--clock and  command line
options which were deprecated since Python 3.3.
: timeit now repeats the benchmarks 5 times instead of only 3 to
make benchmarks more reliable.
: timeit autorange now uses a single loop iteration if the
benchmark takes less than 10 seconds, instead of 10 iterations. âpython3
-m timeit -s âimport timeâ âtime.sleep(1)ââ now takes 4 seconds instead of
40 seconds.
Distutils.sdist now looks for README and setup.py files with case
sensitivity. This behavior matches that found in Setuptools 6.0 and later.
See setuptools 100 for
rationale.
: Make webbrowser support Chrome on Mac OS X. Patch by Ned
Batchelder.
: Fix references leaked by pdb in the handling of SIGINT
handlers.
: Fixed bytes path support in os.scandir() on Windows. Patch by
Eryk Sun.
: The disassembler now decodes FORMAT_VALUE argument.
: unittest.mock Mock autospec functions now properly support
assert_called, assert_not_called, and assert_called_once.
: lzma module now supports pathlib.
: Fixed writing non-BMP characters with binary format in
plistlib.
: bz2 module now supports pathlib.  Initial patch by Ethan
Furman.
: gzip now supports pathlib.  Patch by Ethan Furman.
: Deprecated silent truncations in socket.htons and socket.ntohs.
Original patch by Oren Milman.
: Optimized merging var-keyword arguments and improved error
message when passing a non-mapping as a var-keyword argument.
: Improved error message when passing a non-iterable as a
var-positional argument.  Added opcode BUILD_TUPLE_UNPACK_WITH_CALL.
: Fixed possible crashes when unpickle itertools objects from
incorrect pickle data.  Based on patch by John Leitch.
: imghdr now supports pathlib.
: compileall now supports pathlib.
: Fix function declaration (C flags) for the getiterator() method
of xml.etree.ElementTree.Element.
: Stop using localtime() and gmtime() in the time module.
Introduced platform independent _PyTime_localtime API that is similar to
POSIX localtime_r, but available on all platforms.  Patch by Ed Schouten.
: Fixed calendar functions for extreme months: 0001-01 and
9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so
that they donât call itermonthdates() which can cause datetime.date
under/overflow.
: Fixed possible use after free in the decompress() methods of
the LZMADecompressor and BZ2Decompressor classes. Original patch by John
Leitch.
: Fixed possible crash in sqlite3.Connection.create_collation()
if pass invalid string-like object as a name.  Patch by Xiang Zhang.
: random.choices() now has k as a keyword-only argument to
improve the readability of common cases and come into line with the
signature used in other languages.
: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.
Patch by Madison May.
: Fixed support of default root window in the tkinter.tix module.
Added the master parameter in the DisplayStyle constructor.
: In the traceback module, restore the formatting of exception
messages like âException: Noneâ.  This fixes a regression introduced in
3.5a2.
: Allow false values to be used for msg parameter of subTest().
: Fix a memory leak in os.getrandom() when the getrandom() is
interrupted by a signal and a signal handler raises a Python exception.
: Fix memory leak on Windows in the os module (fix
path_converter() function).
: RobotFileParser now correctly returns default values for
crawl_delay and request_rate.  Initial patch by Peter Wirtz.
: Prevent memory leak in win32_ver().
Fix UnboundLocalError in socket._sendfile_use_sendfile.
: Check for ERROR_ACCESS_DENIED in Windows implementation of
os.stat().  Patch by Eryk Sun.
: Warning message emitted by using inline flags in the middle of
regular expression now contains a (truncated) regex pattern. Patch by Tim
Graham.
: Prevent codecs.escape_encode() from raising SystemError when an
empty bytestring is passed.
: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.
: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by
Gergely Imreh and Markus Holtermann.
: Fix a crash in parse_envlist() when env contains byte strings.
Patch by Eryk Sun.
: Fixed buffer overrun in binascii.b2a_qp() and
binascii.a2b_qp().
: Fix socket accept exhaustion during high TCP traffic. Patch by
Kevin Conway.
: Handle when SO_REUSEPORT isnât properly supported. Patch by
Seth Michael Larson.
: Inspect functools.partial in asyncio.Handle.__repr__. Patch by
iceboy.
: Fix slow pipes IO in asyncio. Patch by INADA Naoki.
: Fix callbacks race in asyncio.SelectorLoop.sock_connect.
: Fix selectors incorrectly retain invalid file descriptors.
Patch by Mark Williams.
: Remove vestigial MacOS 9 macurl2path module and its tests.
: Refuse monitoring processes if the child watcher has no loop
attached. Patch by Vincent Michel.
: Raise RuntimeError when transportâs FD is used with add_reader,
add_writer, etc.
: Speedup asyncio.StreamReader.readexactly. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.
: Deprecate passing asyncio.Handles to run_in_executor.
: Fix asyncio to support formatting of non-python coroutines.
: Remove UNIX socket from FS before binding. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.
: Prohibit Tasks to await on themselves.
: Reading a corrupt config file left configparser in an invalid
state. Original patch by Florian HÃ¶ch.
: ABCMeta.__new__ now accepts , allowing abstract
base classes to use keyword parameters in __init_subclass__. Patch by Nate
Soares.
: inspect.unwrap() will now only try to unwrap an object
sys.getrecursionlimit() times, to protect against objects which create a
new object on every attribute access.
: path.resolve(strict=False) no longer cuts the path after the
first element not present in the filesystem.  Patch by Antoine Pietri.

================================================================================

# Changelog - Library (Part 2)

: xml.etree: Fix a crash when a parser is part of a reference
cycle.

: random.seed() now works with bytes in version=1

: typing.get_type_hints now finds the right globalns for classes
and modules by default (when no  was specified by the caller).

: Speed improvements to the  module.  Original PRs by
Ivan Levkivskyi and Mitar.

: The C accelerator module of ElementTree ignored exceptions
raised when looking up TreeBuilder target methods in XMLParser().

: socket.create_connection() now fixes manually a reference
cycle: clear the variable storing the last exception on success.

: LoggerAdapter objects can now be nested.

: SSLContext.check_hostname now automatically sets
SSLContext.verify_mode to ssl.CERT_REQUIRED instead of failing with a
ValueError.

: socketserver.ThreadingMixIn now keeps a list of non-daemonic
threads to wait until all these threads complete in server_close().

================================================================================

# Changelog - Library (Part 3)

: Changed the implementation strategy for
collections.namedtuple() to substantially reduce the use of exec() in
favor of precomputed methods. As a result, the  parameter and
 attribute are no longer supported.  The benefits include 1)
having a smaller memory footprint for applications using multiple named
tuples, 2) faster creation of the named tuple class (approx 4x to 6x
depending on how it is measured), and 3) minor speed-ups for instance
creation using __new__, _make, and _replace.  (The primary patch
contributor is Jelle Zijlstra with further improvements by INADA Naoki,
Serhiy Storchaka, and Raymond Hettinger.)

: Improves SSL error handling to avoid losing error numbers.

: Make return types of SSLContext.wrap_bio() and
SSLContext.wrap_socket() customizable.

: ssl.SSLContext() now uses OpenSSL error information when a
context cannot be instantiated.

: The SSL module now raises SSLCertVerificationError when OpenSSL
fails to verify the peerâs certificate. The exception contains more
information about the error.

: SSLSocket.sendall() now uses memoryview to create slices of
data. This fixes support for all bytes-like object. It is also more
efficient and avoids costly copies.

================================================================================

# Changelog - Library (Part 4)

: A new function
argparse.ArgumentParser.parse_intermixed_args provides the ability to
parse command lines where there user intermixes options and positional
arguments.

: Fix string concatenation bug in rare error path in the
subprocess module

: Micro-optimize asyncio._get_running_loop() to become up
to 10% faster.

: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
partial characters for UTF-8 input (libexpat bug 115):
https://github.com/libexpat/libexpat/issues/115

: Add TLS 1.3 cipher suites and OP_NO_TLSv1_3.

bpo-1198569: string.Template subclasses can optionally define
braceidpattern if they want to specify different placeholder patterns
inside and outside the braces.  If None (the default) it falls back to
.

: concurrent.futures.ProcessPoolExecutor.shutdown() now
explicitly closes the call queue. Moreover, shutdown(wait=True) now also
join the call queue thread, to prevent leaking a dangling thread.

: The  and as_completed() iterators in
concurrent.futures now avoid keeping a reference to yielded objects.

: Fix fileinput.FileInput(files, inplace=True) when 
contain pathlib.Path objects.

: Fix ctypes producing wrong  type codes for integer
types.

================================================================================

# Changelog - Library (Part 5)

:  has been added to the socket interface which
allows communication between virtual machines and their host.

: The subprocess module now sets the filename when
FileNotFoundError is raised on POSIX systems due to the executable or cwd
not being found.

: Update some methods in the _pyio module to also accept integer
types. Patch by Oren Milman.

: concurrent.futures: WorkItem.run() used by ThreadPoolExecutor
now breaks a reference cycle between an exception object and the WorkItem
object.

: xmlrpc.server now explicitly breaks reference cycles when using
sys.exc_info() in code handling exceptions.

: configparser: reading defaults in the ConfigParser()
constructor is now using read_dict(), making its behavior consistent
with the rest of the parser.  Non-string keys and values in the defaults
dictionary are now being implicitly converted to strings.  Patch by James
Tocknell.

: pydoc: the stop() method of the private ServerThread class now
waits until DocServer.serve_until_quit() completes and then explicitly
sets its docserver attribute to None to break a reference cycle.

: Many asserts in multiprocessing are now more informative,
and some error types have been changed to more specific ones.

================================================================================

# Changelog - Library (Part 6)

: Convert zipimport to use Argument Clinic.

: The ssl and hashlib modules now call
OPENSSL_add_all_algorithms_noconf() on OpenSSL < 1.1.0. The function
detects CPU features and enables optimizations on some CPU architectures
such as POWER8. Patch is based on research from Gustavo Serra Scalet.

: Non-daemonic threads created by a multiprocessing.Process are
now joined on child exit.

:  now works with asynchronous generator and coroutine
objects. Patch by George Collins based on diagnosis by Luciano Ramalho.

: There are a number of uninformative asserts in the
multiprocessing module, as noted in issue 5001. This change fixes two
of the most potentially problematic ones, since they are in
error-reporting code, in the multiprocessing.managers.convert_to_error
function. (It also makes more informative a ValueError message.) The only
potentially problematic change is that the AssertionError is now a
TypeError; however, this should also help distinguish it from an
AssertionError being  by the function/its caller (such as in
issue 31169). - Patch by Allen W. Smith (drallensmith on github).

: Fixed miscellaneous errors in asyncio speedup module.

================================================================================

# Changelog - Library (Part 7)

: socketserver.ForkingMixIn.server_close() now waits until all
child processes completed to prevent leaking zombie processes.

: Add an include_file parameter to
zipapp.create_archive()

: Optimize array.array comparison. It is now from 10x up to 70x
faster when comparing arrays holding values of the same integer type.

: ttk: fix the destroy() method of LabeledScale and OptionMenu
classes. Call the parent destroy() method even if the used attribute
doesnât exist. The LabeledScale.destroy() method now also explicitly
clears label and scale attributes to help the garbage collector to destroy
all widgets.

: Fix copyreg._slotnames() mangled attribute calculation for
classes whose name begins with an underscore. Patch by Shane Harvey.

: Allow logging.config.fileConfig to accept kwargs and/or
args.

: pathlib.Path objects now include an is_mount() method
(only implemented on POSIX).  This is similar to os.path.ismount(p).
Patch by Cooper Ry Lees.

: Fixed a crash when using asyncio and threads.

: Added support for CAN ISO-TP protocol in the socket module.

: Added a  method to logging.StreamHandler to
allow the stream to be set after creation.

================================================================================

# Changelog - Library (Part 8)

: Fix handling of long oids in ssl.  Based on patch by Christian
Heimes.

: Support tzinfo objects with sub-minute offsets.

: Fix shared memory performance regression in multiprocessing in
3.x. Shared memory used anonymous memory mappings in 2.x, while 3.x mmaps
actual files. Try to be careful to do as little disk I/O as possible.

: Fix too many fds in processes started with the âforkserverâ
method. A child process would inherit as many fds as the number of
still-running children.

: Fix unittest.mockâs autospec to not fail on method-bound
builtin functions.  Patch by Aaron Gallagher.

: Fix decrementing a borrowed reference in tracemalloc.

: Fix multiprocessing.sharedctypes to recognize typecodes 
and .

: Remove obsolete code in readline module for platforms where GNU
readline is older than 2.1 or where select() is not available.

: Change ttk.OptionMenu radiobuttons to be unique across
instances of OptionMenu.

: Fix multiprocessing.Queue.join_thread(): it now waits until the
thread completes, even if the thread was started by the same process which
created the queue.

: Fix segfault in readline when using readlineâs history-size
option.  Patch by Nir Soffer.

================================================================================

# Changelog - Library (Part 9)

: Added multiprocessing.Process.kill method to terminate using
the SIGKILL signal on Unix.

: socket.close() now ignores ECONNRESET error.

: Fix out of bounds write in
asyncio.CFuture.remove_done_callback().

: Use keywords in the  of datetime.timedelta.

: signal.setitimer() may disable the timer when passed a tiny
value. Tiny values (such as 1e-6) are valid non-zero values for
setitimer(), which is specified as taking microsecond-resolution
intervals. However, on some platform, our conversion routine could convert
1e-6 into a zero interval, therefore disabling the timer instead of
(re-)scheduling it.

: Fix bug when modifying os.environ while iterating over it

: Avoid importing  from  to improve startup
speed. Python startup is about 5% faster on Linux and 30% faster on macOS.

: Add missing parameter ânâ on
multiprocessing.Condition.notify(). The doc claims
multiprocessing.Condition behaves like threading.Condition, but its
notify() method lacked the optional ânâ argument (to specify the number of
sleepers to wake up) that threading.Condition.notify() accepts.

: Fix email header value parser dropping folding white space in
certain cases.

: Add a  method to multiprocessing.Process.

================================================================================

# Changelog - Library (Part 10)

: Fix a segmentation fault in _hashopenssl when standard hash
functions such as md5 are not available in the linked OpenSSL library.  As
in some special FIPS-140 build environments.

: Update zlib to 1.2.11.

: ftplib.FTP.putline() now throws ValueError on commands that
contains CR or LF. Patch by Donghee Na.

: os.listdir() and os.scandir() now emit bytes names when called
with bytes-like argument.

: Prohibited the â=â character in environment variable names in
os.putenv() and os.spawn*().

: The description of a unittest subtest now preserves the order
of keyword arguments of TestCase.subTest().

: struct.Struct.format type is now  instead of
.

: Fix concurrent.futures.thread.ThreadPoolExecutor threads to
have a non repr() based thread name by default when no thread_name_prefix
is supplied. They will now identify themselves as
âThreadPoolExecutor-y_nâ.

: Fixed the lgettext() family of functions in the gettext module.
They now always return bytes.

: Functional API of enum allows to create empty enums. Patched by
Donghee Na

: Fix race condition between signal delivery and wakeup file
descriptor. Patch by Nathaniel Smith.

: lib2to3 now recognizes  and  strings.

================================================================================

# Changelog - Library (Part 11)

: pkgutil.walk_packages function now raises ValueError if 
is a string. Patch by Sanyam Khurana.

: Avoid race condition in multiprocessing cleanup.

: Fix multiprocessing.Process.exitcode to return the opposite of
the signal number when the process is killed by a signal (instead of 255)
when using the âforkserverâ method.

: The traceback no longer displayed for SystemExit raised in a
callback registered by atexit.

: Donât log exceptions if Task/Future âcancel()â method was
called.

: Fix path calculation in imp.load_package(), fixing it for
cases when a package is only shipped with bytecodes. Patch by Alexandru
Ardelean.

: The dis.dis() function now is able to disassemble nested code
objects.

: selectors does not take KeyboardInterrupt and SystemExit into
account, leaving a fd in a bad state in case of error. Patch by Giampaolo
Rodolaâ.

: multiprocessing.Queue.get() with a timeout now polls its reader
in non-blocking mode if it succeeded to acquire the lock but the acquire
took longer than the timeout.

: Updates to typing module: Add generic AsyncContextManager, add
support for ContextManager on all versions. Original PRs by Jelle Zijlstra
and Ivan Levkivskyi

================================================================================

# Changelog - Library (Part 12)

: re.compile() no longer raises a BytesWarning when compiling a
bytes instance with misplaced inline modifier.  Patch by Roy Williams.

: Fix ssl sockets leaks when connection is aborted in asyncio/ssl
implementation. Patch by MichaÃ«l SghaÃ¯er.

: Closing transport during handshake process leaks open socket.
Patch by Nikolay Kim

: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu
Sornay.

: modify() method of poll(), epoll() and devpoll() based classes
of selectors module is around 10% faster.  Patch by Giampaolo Rodolaâ.

: On Windows, subprocess.Popen.communicate() now also ignore
EINVAL on stdin.write() if the child process is still running but closed
the pipe.

: Addded empty __slots__ to abc.ABC.  This allows subclassers to
deny __dict__ and __weakref__ creation.  Patch by Aaron Hall.

: Loggers are now pickleable.

: faulthandler now correctly filters and displays exception codes
on Windows

: Add TextIOWrapper.reconfigure() and a
TextIOWrapper.write_through attribute.

: Fix possible overflow when organize struct.pack_into error
message.  Patch by Yuan Liu.

: Fix the problem that logging.handlers.SysLogHandler cannot
handle IPv6 addresses.

: Allow registering at-fork handlers.

================================================================================

# Changelog - Library (Part 13)

: Deprecate invalid ctypes call protection on Windows.  Patch by
Mariatta Wijaya.

: multiprocessing.Queue._feed background running thread do not
break from main loop on exception.

: Fix handling escape characters in HZ codec.  Based on patch by
Ma Lin.

: inspect.signature() now supports callables with
variable-argument parameters wrapped with partialmethod. Patch by Donghee
Na.

: importlib.find_spec() raises ModuleNotFoundError instead of
AttributeError if the specified parent module is not a package (i.e. lacks
a __path__ attribute).

: Fix AttributeError when using SimpleQueue.empty() under 
and forkserver start methods.

: Warnings emitted when compile a regular expression now always
point to the line in the user code.  Previously they could point into
inners of the re module if emitted from inside of groups or conditionals.

: imaplib and poplib now catch the Windows socket WSAEINVAL error
(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.
This error occurs sometimes on SSL connections.

================================================================================

# Changelog - Library (Part 14)

: Removed previously deprecated in Python 2.4 classes Plist, Dict
and _InternalDict in the plistlib module.  Dict values in the result of
functions readPlist() and readPlistFromBytes() are now normal dicts.  You
no longer can use attribute access to access items of these dictionaries.

: The  is now deprecated and will be removed in
Python 3.8.

: Compiling regular expression in debug mode on CPython now
displays the compiled bytecode in human readable form.

: Fixed Task.cancel() can be ignored when the task is running
coroutine and the coroutine returned without any more .

: contextlib.AbstractContextManager now supports
anti-registration by setting __enter__ = None or __exit__ = None,
following the pattern introduced in . Patch by Jelle Zijlstra.

: Enhanced regular expressions optimization. This increased the
performance of matching some patterns up to 25 times.

: Weaken the condition of deprecation warnings for inline
modifiers. Now allowed several subsequential inline modifiers at the start
of the pattern (e.g. '(?i)(?s)...').  In verbose mode whitespaces and
comments now are allowed before and between inline modifiers (e.g. 
 ).

================================================================================

# Changelog - Library (Part 15)

: Optimized case-insensitive matching and searching of regular
expressions.

: Fix range checking in GB18030 decoder.  Original patch by Ma
Lin.

: rewrite cgi.parse_multipart, reusing the FieldStorage class and
making its results consistent with those of FieldStorage for
multipart/form-data requests. Patch by Pierre Quentel.

: Removed the __init__ methods of _jsonâs scanner and encoder.
Misusing them could cause memory leaks or crashes.  Now scanner and
encoder objects are completely initialized in the __new__ methods.

: Compiled regular expression objects with the re.LOCALE flag no
longer depend on the locale at compile time.  Only the locale at matching
time affects the result of matching.

: Avoid KeyboardInterrupt tracebacks in forkserver helper process
when Ctrl-C is received.

: binascii.b2a_uu() and uu.encode() now support using  as
zero instead of space.

: Various updates to typing module: add typing.NoReturn type, use
WrapperDescriptorType, minor bug-fixes.  Original PRs by Jim
Fasarakis-Hilliard and Ivan Levkivskyi.

: Fix getsockname() for unbound AF_UNIX sockets on Linux.

================================================================================

# Changelog - Library (Part 16)

: The seek() and tell() methods of io.FileIO now set the internal
seekable attribute to avoid one syscall on open() (in buffered or text
mode).

: unittestâs assertAlmostEqual and assertNotAlmostEqual provide a
better message in case of failure which includes the difference between
left and right arguments.  (patch by Giampaolo Rodolaâ)

: Add support for curses.A_ITALIC.

: inspect.isabstract() now works during __init_subclass__.  Patch
by Nate Soares.

: Preserve generator state when _random.Random.setstate() raises
an exception. Patch by Bryan Olson.

: Fixed leaks and crashes in errors handling in the parser
module.

: Column widths in the output of dis.dis() are now adjusted for
large line numbers and instruction offsets.

: Fixed crashes in IOBase methods __next__() and readlines() when
readline() or __next__() respectively return non-sizeable object. Fixed
possible other errors caused by not checking results of PyObject_Size(),
PySequence_Size(), or PyMapping_Size().

: Fix PathLike support for shutil.unpack_archive. Patch by Jelle
Zijlstra.

: Compiled regular expression and match objects in the re module
now support copy.copy() and copy.deepcopy() (they are considered atomic).

================================================================================

# Changelog - Library (Part 17)

: _io._IOBase.readlines will check if itâs closed first when hint
is present.

: Fixed race condition in pathlib mkdir with flags parents=True.
Patch by Armin Rigo.

: Fixed arbitrary unchaining of RuntimeError exceptions in
contextlib.contextmanager.  Patch by Siddharth Velankar.

: Test that sqlite3 trace callback is not called multiple times
when schema is changing.  Indirectly fixed by switching to use
sqlite3_prepare_v2() in .  Patch by Aviv Palivoda.

: Allowed calling the close() method of the zip entry writer
object multiple times.  Writing to a closed writer now always produces a
ValueError.

: Pickling and copying ImportError now preserves name and path
attributes.

: re.escape() now escapes only regex special characters.

: Add math.remainder operation, implementing remainder as
specified in IEEE 754.

: Improve struct.pack_into() exception messages for problems with
the buffer size and offset.  Patch by Andrew Nester.

: Support If-Modified-Since HTTP header (browser cache).  Patch
by Pierre Quentel.

: Fixed comparison check for ipaddress.ip_interface objects.
Patch by Sanjay Sundaresan.

================================================================================

# Changelog - Library (Part 18)

: Fixed memory leaks in the replace() method of datetime and time
objects when pass out of bound fold argument.

: Fix a crash in itertools.chain.from_iterable when encountering
long runs of empty iterables.

: Sped up reading encrypted ZIP files by 2 times.

: Element.getiterator() and the html parameter of XMLParser()
were deprecated only in the documentation (since Python 3.2 and 3.4
correspondingly). Now using them emits a deprecation warning.

: Fixed multiple crashes in ElementTree caused by race conditions
and wrong types.

: Added support of file descriptors in os.scandir() on Unix.
os.fwalk() is sped up by 2 times by using os.scandir().

: Fixed a bug in pools in multiprocessing.pool that raising an
exception at the very first of an iterable may swallow the exception or
make the program hang. Patch by Davin Potts and Xiang Zhang.

: unittest.TestCase.assertRaises() now manually breaks a
reference cycle to not keep objects alive longer than expected.

: The zipapp module now supports general path-like objects, not
just pathlib.Path.

: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when
the OS gives priority to errors such as EACCES over EEXIST.

================================================================================

# Changelog - Library (Part 19)

: Release references to tasks, their arguments and their results
as soon as they are finished in multiprocessing.Pool.

: The mode argument of os.makedirs() no longer affects the file
permission bits of newly created intermediate-level directories.

: faulthandler: Restore the old sigaltstack during teardown.
Patch by Christophe Zeitouny.

: Fixed crashes in repr of recursive buffered file-like objects.

: Fix crashes in partial.__repr__ if the keys of partial.keywords
are not strings.  Patch by Michael Seifert.

: Fixed possible failing or crashing input() if attributes
âencodingâ or âerrorsâ of sys.stdin or sys.stdout are not set or are not
strings.

: Using non-integer value for selecting a plural form in gettext
is now deprecated.

: Use C library implementation for math functions erf() and
erfc().

: os.stat() and os.DirEntry.inode() now convert inode (st_ino)
using unsigned integers.

: Fix a bug that prevented array âQâ, âLâ and âIâ from accepting
big intables (objects that have __int__) as elements.

: Speed up importing the webbrowser module.
webbrowser.register() is now thread-safe.

: The zipfile module now accepts path-like objects for external
paths.

================================================================================

# Changelog - Library (Part 20)

: index() and count() methods of collections.abc.Sequence now
check identity before checking equality when do comparisons.

: Added support for bytes paths in os.fwalk().

: Add new socket.TCP_NOTSENT_LOWAT (Linux 3.12)
constant. Patch by Nathaniel J. Smith.

: Allow use of path-like object as a single argument in
ConfigParser.read(). Patch by David Ellis.

: Migrate sqlite3 module to _v2 API.  Patch by Aviv Palivoda.

: Fix out of bound iteration in
asyncio.Future.remove_done_callback implemented in C.

: asyncio.subprocess.SubprocessStreamProtocol no longer closes
before all pipes are closed.

: Fix Task.current_task and Task.all_tasks implemented in C to
accept None argument as their pure Python implementation.

: Fix asyncio to support instantiation of new event loops in
child processes.

: SimpleXMLRPCDispatcher no longer chains KeyError (or any other
exception) to exception(s) raised in the dispatched methods. Patch by Petr
Motejlek.

: Method register_function() of
xmlrpc.server.SimpleXMLRPCDispatcher and its subclasses can now be used as
a decorator.

: Fix assertion error in threading._DummyThread.is_alive().

================================================================================

# Changelog - Library (Part 21)

: Add a test that checks that cwd parameter of Popen() accepts
PathLike objects.  Patch by Sayan Chowdhury.

: Start a transaction implicitly before a DML statement. Patch by
Aviv Palivoda.

: get_extra_info() raises exception if get called on closed ssl
transport. Patch by Nikolay Kim.

: urllib.parse.quote is now based on RFC 3986 and hence includes
â~â in the set of characters that is not quoted by default. Patch by
Christian Theune and Ratnadeep Debnath.

: Altering a kwarg dictionary passed to functools.partial() no
longer affects a partial object after creation.

: Fix file object leak in aifc.open() when file is given as a
filesystem path and is not in valid AIFF format. Patch by Anthony Zhang.

: Add uuid.SafeUUID and uuid.UUID.is_safe to relay information
from the platform about whether generated UUIDs are generated with a
multiprocessing safe method.

: Improve some deprecations in importlib. Some deprecated methods
now emit DeprecationWarnings and have better descriptive messages.

: Fixed different behaviour of Decimal.from_float() for _decimal
and _pydecimal. Thanks Andrew Nester.

================================================================================

# Changelog - Library (Part 22)

: locale.format_string now supports the âmonetaryâ keyword
argument, and locale.format is deprecated.

: importlib.reload() now raises ModuleNotFoundError if the module
lacks a spec.

: Various updates to typing module: typing.Counter,
typing.ChainMap, improved ABC caching, etc. Original PRs by Jelle
Zijlstra, Ivan Levkivskyi, Manuel Krebber, and Åukasz Langa.

: Fix datetime.fromtimestamp() regression introduced in Python
3.6.0: check minimum and maximum years.

: Prevent infinite loop in pathlib.Path.mkdir

: Fixed out-of-bounds buffer access in the group() method of the
match object. Based on patch by WGH.

: Add WrapperDescriptorType, MethodWrapperType, and
MethodDescriptorType built-in types to types module. Original patch by
Manuel Krebber.

: Unused install_misc command is now removed.  It has been
documented as unused since 2000.  Patch by Eric N. Vander Weele.

: The extend() method is now called instead of the append()
method when unpickle collections.deque and other list-like objects. This
can speed up unpickling to 2 times.

: The help of a builtin or extension class now includes the
constructor signature if __text_signature__ is provided for the class.

================================================================================

# Changelog - Library (Part 23)

: Fix subprocess.Popen.wait() when the child process has exited
to a stopped instead of terminated state (ex: when under ptrace).

: Fix a regression in argparse that help messages would wrap at
non-breaking spaces.

: Fixed the comparison of mock.MagickMock with mock.ANY.

: Removed deprecated function ntpath.splitunc().

: Removed support of deprecated argument âexcludeâ in
tarfile.TarFile.add().

: Fixed infinite recursion in the repr of uninitialized
ctypes.CDLL instances.

: Removed deprecated features in the http.cookies module.

: A format string argument for string.Formatter.format() is now
positional-only.

: Removed support of deprecated undocumented keyword arguments in
methods of regular expression objects.

: Fixed race condition in C implementation of
functools.lru_cache. KeyError could be raised when cached function with
full cache was simultaneously called from different threads with the same
uncached arguments.

: The unittest.mock.sentinel attributes now preserve their
identity when they are copied or pickled.

: In urllib.request, suffixes in no_proxy environment variable
with leading dots could match related hostnames again (e.g. .b.c matches
a.b.c). Patch by Milan Oberkirch.

================================================================================

# Changelog - Library (Part 24)

: Fix unittest.mock._Call helper: donât ignore the name parameter
anymore. Patch written by Jiajun Huang.

: inspect.getframeinfo() now correctly shows the first line of a
context. Patch by Sam Breese.

: Update authorizer constants in sqlite3 module. Patch by
Dingyuan Wang.

: Prevent infinite loop in pathlib.resolve() on Windows

: Fixed recursion errors in large or resized
curses.textpad.Textbox.  Based on patch by Tycho Andersen.

: curses.ascii predicates now work correctly with negative
integers.

: old keys should not remove new values from WeakValueDictionary
when collecting from another thread.

: Remove editor artifacts from Tix.py.

: Fixed a crash when deallocate deep ElementTree.

: Fix bugs in WeakValueDictionary.setdefault() and
WeakValueDictionary.pop() when a GC collection happens in another thread.

: Fixed a crash in resource.prlimit() when passing a sequence
that doesnât own its elements as limits.

: subprocess.Popen uses /system/bin/sh on Android as the shell,
instead of /bin/sh.

: multiprocessing.set_forkserver_preload() would crash the
forkserver process if a preloaded module instantiated some multiprocessing
objects such as locks.

================================================================================

# Changelog - Library (Part 25)

: The chown() method of the tarfile.TarFile class does not fail
now when the grp module cannot be imported, as for example on Android
platforms.

: dbm.dumb now supports reading read-only files and no longer
writes the index file when it is not changed.  A deprecation warning is
now emitted if the index file is missed and recreated in the ârâ and âwâ
modes (will be an error in future Python releases).

: Unknown escapes consisting of  and an ASCII letter in
re.sub() replacement templates regular expressions now are errors.

: Fix a regression introduced in warnings.catch_warnings(): call
warnings.showwarning() if it was overridden inside the context manager.

: To assist with upgrades from 2.7, the previously documented
deprecation of inspect.getfullargspec() has been reversed. This
decision may be revisited again after the Python 2.7 branch is no longer
officially supported.

: Add sys.getandroidapilevel(): return the build time API version
of Android as an integer. Function only available on Android.

: Add new socket.TCP_CONGESTION (Linux 2.6.13) and
socket.TCP_USER_TIMEOUT (Linux 2.6.37) constants. Patch written
by Omar Sandoval.

================================================================================

# Changelog - Library (Part 26)

: Restored the __reduce__() methods of datetime objects.

: Regular expression patterns, _sre.SRE_Pattern objects created
by re.compile(), become comparable (only x==y and x!=y operators). This
change should fix the : donât duplicate warning filters when
the warnings module is reloaded (thing usually only done in unit tests).

: Remove the subprocess.Popen.wait endtime parameter.  It was
deprecated in 3.4 and undocumented prior to that.

: In ctypes, prevent a crash calling the from_buffer() and
from_buffer_copy() methods on abstract classes like Array.

: In the âhttp.serverâ module, parse the protocol version if
possible, to avoid using HTTP 0.9 in some error responses.

: Makes Path.resolve() succeed on paths that do not exist. Patch
by Vajrasky Kok

: Fixed possible DoS and arbitrary code execution when handle
plural form selections in the gettext module.  The expression parser now
supports exact syntax supported by GNU gettext.

: Fixed possible crash in _io.TextIOWrapper deallocator when the
garbage collector is invoked in other thread.  Based on patch by Sebastian
Cufre.

: LZMA compressor and decompressor no longer raise exceptions if
given empty data twice.  Patch by Benjamin Fogle.

================================================================================

# Changelog - Library (Part 27)

: Fixed segfault in cursesâs addch() with ncurses6.

: tarfile.open() with mode ârâ or âr:â now tries to open a tar
file with compression before trying to open it without compression.
Otherwise it had 50% chance failed with ignore_zeros=True.

: The webbrowser module now supports Firefox 36+ and derived
browsers.  Based on patch by Oleg Broytman.

: The webbrowser in an X environment now prefers using the
default browser directly. Also, the webbrowser register() function now has
a documented âpreferredâ argument, to specify browsers to be returned by
get() with no arguments. Patch by David Steele

: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused
by representing the scale as float value internally in Tk.  tkinter.IntVar
now works if float value is set to underlying Tk variable.

: calendar.TextCalendar.prweek() no longer prints a space after a
weeksâs calendar.  calendar.TextCalendar.pryear() no longer prints
redundant newline after a yearâs calendar.  Based on patch by Xiang Zhang.

: calendar.TextCalendar.prmonth() no longer prints a space at the
start of new line after printing a monthâs calendar.  Patch by Xiang
Zhang.

================================================================================

# Changelog - Library (Part 28)

: The textwrap.TextWrapper class now honors non-breaking spaces.
Based on patch by Kaarle Ritvanen.

: os.fwalk() no longer fails on broken links.

: Fix iterator of C implemented asyncio.Future doesnât accept
non-None value is passed to it.send(val).

: Generated names for Tkinter widgets now start by the â!â prefix
for readability.

: Fixed HList.header_exists() in tkinter.tix module by addin a
workaround to Tix library bug.

: shutil.make_archive() no longer adds entry â./â to ZIP archive.

: re.sub() now raises an error for invalid numerical group
reference in replacement template even if the pattern is not found in the
string.  Error message for invalid group reference now includes the group
index and the position of the reference. Based on patch by SilentGhost.

: timeit now uses the sequence 1, 2, 5, 10, 20, 50,â¦ instead of
1, 10, 100,â¦ for autoranging.

: Command-line interface of the zipfile module now uses argparse.
Added support of long options.

: Optimize csv.DictWriter for large number of columns. Patch by
Mariatta Wijaya.

: Fix C implemented asyncio.Future didnât work on Windows.

================================================================================

# Changelog - Library (Part 29)

: In the âioâ module, the argument to BufferedReader and
BytesIOâs read1() methods is now optional and can be -1, matching the
BufferedIOBase specification.

: Fix error building socket module when multithreading is
disabled.

: timeit: remove -c/--clock and  command line
options which were deprecated since Python 3.3.

: timeit now repeats the benchmarks 5 times instead of only 3 to
make benchmarks more reliable.

: timeit autorange now uses a single loop iteration if the
benchmark takes less than 10 seconds, instead of 10 iterations. âpython3
-m timeit -s âimport timeâ âtime.sleep(1)ââ now takes 4 seconds instead of
40 seconds.

Distutils.sdist now looks for README and setup.py files with case
sensitivity. This behavior matches that found in Setuptools 6.0 and later.
See setuptools 100 for
rationale.

: Make webbrowser support Chrome on Mac OS X. Patch by Ned
Batchelder.

: Fix references leaked by pdb in the handling of SIGINT
handlers.

: Fixed bytes path support in os.scandir() on Windows. Patch by
Eryk Sun.

: The disassembler now decodes FORMAT_VALUE argument.

================================================================================

# Changelog - Library (Part 30)

: unittest.mock Mock autospec functions now properly support
assert_called, assert_not_called, and assert_called_once.

: lzma module now supports pathlib.

: Fixed writing non-BMP characters with binary format in
plistlib.

: bz2 module now supports pathlib.  Initial patch by Ethan
Furman.

: gzip now supports pathlib.  Patch by Ethan Furman.

: Deprecated silent truncations in socket.htons and socket.ntohs.
Original patch by Oren Milman.

: Optimized merging var-keyword arguments and improved error
message when passing a non-mapping as a var-keyword argument.

: Improved error message when passing a non-iterable as a
var-positional argument.  Added opcode BUILD_TUPLE_UNPACK_WITH_CALL.

: Fixed possible crashes when unpickle itertools objects from
incorrect pickle data.  Based on patch by John Leitch.

: imghdr now supports pathlib.

: compileall now supports pathlib.

: Fix function declaration (C flags) for the getiterator() method
of xml.etree.ElementTree.Element.

: Stop using localtime() and gmtime() in the time module.
Introduced platform independent _PyTime_localtime API that is similar to
POSIX localtime_r, but available on all platforms.  Patch by Ed Schouten.

================================================================================

# Changelog - Library (Part 31)

: Fixed calendar functions for extreme months: 0001-01 and
9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so
that they donât call itermonthdates() which can cause datetime.date
under/overflow.

: Fixed possible use after free in the decompress() methods of
the LZMADecompressor and BZ2Decompressor classes. Original patch by John
Leitch.

: Fixed possible crash in sqlite3.Connection.create_collation()
if pass invalid string-like object as a name.  Patch by Xiang Zhang.

: random.choices() now has k as a keyword-only argument to
improve the readability of common cases and come into line with the
signature used in other languages.

: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.
Patch by Madison May.

: Fixed support of default root window in the tkinter.tix module.
Added the master parameter in the DisplayStyle constructor.

: In the traceback module, restore the formatting of exception
messages like âException: Noneâ.  This fixes a regression introduced in
3.5a2.

: Allow false values to be used for msg parameter of subTest().

================================================================================

# Changelog - Library (Part 32)

: Fix a memory leak in os.getrandom() when the getrandom() is
interrupted by a signal and a signal handler raises a Python exception.

: Fix memory leak on Windows in the os module (fix
path_converter() function).

: RobotFileParser now correctly returns default values for
crawl_delay and request_rate.  Initial patch by Peter Wirtz.

: Prevent memory leak in win32_ver().

Fix UnboundLocalError in socket._sendfile_use_sendfile.

: Check for ERROR_ACCESS_DENIED in Windows implementation of
os.stat().  Patch by Eryk Sun.

: Warning message emitted by using inline flags in the middle of
regular expression now contains a (truncated) regex pattern. Patch by Tim
Graham.

: Prevent codecs.escape_encode() from raising SystemError when an
empty bytestring is passed.

: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.

: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by
Gergely Imreh and Markus Holtermann.

: Fix a crash in parse_envlist() when env contains byte strings.
Patch by Eryk Sun.

: Fixed buffer overrun in binascii.b2a_qp() and
binascii.a2b_qp().

: Fix socket accept exhaustion during high TCP traffic. Patch by
Kevin Conway.

================================================================================

# Changelog - Library (Part 33)

: Handle when SO_REUSEPORT isnât properly supported. Patch by
Seth Michael Larson.

: Inspect functools.partial in asyncio.Handle.__repr__. Patch by
iceboy.

: Fix slow pipes IO in asyncio. Patch by INADA Naoki.

: Fix callbacks race in asyncio.SelectorLoop.sock_connect.

: Fix selectors incorrectly retain invalid file descriptors.
Patch by Mark Williams.

: Remove vestigial MacOS 9 macurl2path module and its tests.

: Refuse monitoring processes if the child watcher has no loop
attached. Patch by Vincent Michel.

: Raise RuntimeError when transportâs FD is used with add_reader,
add_writer, etc.

: Speedup asyncio.StreamReader.readexactly. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.

: Deprecate passing asyncio.Handles to run_in_executor.

: Fix asyncio to support formatting of non-python coroutines.

: Remove UNIX socket from FS before binding. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.

: Prohibit Tasks to await on themselves.

: Reading a corrupt config file left configparser in an invalid
state. Original patch by Florian HÃ¶ch.

: ABCMeta.__new__ now accepts , allowing abstract
base classes to use keyword parameters in __init_subclass__. Patch by Nate
Soares.

================================================================================

# Changelog - Library (Part 34)

: inspect.unwrap() will now only try to unwrap an object
sys.getrecursionlimit() times, to protect against objects which create a
new object on every attribute access.

: path.resolve(strict=False) no longer cuts the path after the
first element not present in the filesystem.  Patch by Antoine Pietri.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Fix incomplete code snippet in the ZeroMQSocketListener and
ZeroMQSocketHandler examples and adapt them to Python 3.
: Add RFC 7525 and Mozilla server side TLS links to SSL
documentation.
: Allow the pydoc server to bind to arbitrary hostnames.
: Clarify doc on truth value testing. Original patch by Peter
Thomassen.
: Add missing attribute related constants in curses
documentation.
: the link targets for  and bytearray() are
now their respective type definitions, rather than the corresponding
builtin function entries. Use  and
 to reference the latter. In order to
ensure this and future cross-reference updates are applied automatically,
the daily documentation builds now disable the default output caching
features in Sphinx.
: Add missing info of code object in inspect documentation.
: Improve the documentation for, and links to, template strings
by emphasizing their utility for internationalization, and by clarifying
some usage constraints. (See also: , )
: Link the documentation to its source file on GitHub.
: Document smtpd.py as effectively deprecated and add a pointer
to aiosmtpd, a third-party asyncio-based replacement.
: Add canonical header link on each page to corresponding major
version of the documentation. Patch by Matthias Bussonnier.
: Fix Python 2 syntax in code for building the documentation.
: The data model reference and the porting section in the 3.6
Whatâs New guide now cover the additional __classcell__ handling
needed for custom metaclasses to fully support  and
zero-argument .
: Documented command-line interface of zipfile.

================================================================================

# Changelog - Documentation (Part 2)

: Fix incomplete code snippet in the ZeroMQSocketListener and
ZeroMQSocketHandler examples and adapt them to Python 3.

: Add RFC 7525 and Mozilla server side TLS links to SSL
documentation.

: Allow the pydoc server to bind to arbitrary hostnames.

: Clarify doc on truth value testing. Original patch by Peter
Thomassen.

: Add missing attribute related constants in curses
documentation.

: the link targets for  and bytearray() are
now their respective type definitions, rather than the corresponding
builtin function entries. Use  and
 to reference the latter. In order to
ensure this and future cross-reference updates are applied automatically,
the daily documentation builds now disable the default output caching
features in Sphinx.

: Add missing info of code object in inspect documentation.

: Improve the documentation for, and links to, template strings
by emphasizing their utility for internationalization, and by clarifying
some usage constraints. (See also: , )

: Link the documentation to its source file on GitHub.

: Document smtpd.py as effectively deprecated and add a pointer
to aiosmtpd, a third-party asyncio-based replacement.

================================================================================

# Changelog - Documentation (Part 3)

: Add canonical header link on each page to corresponding major
version of the documentation. Patch by Matthias Bussonnier.

: Fix Python 2 syntax in code for building the documentation.

: The data model reference and the porting section in the 3.6
Whatâs New guide now cover the additional __classcell__ handling
needed for custom metaclasses to fully support  and
zero-argument .

: Documented command-line interface of zipfile.

================================================================================

# Changelog - Tests (Part 1)

List:
: test.support.HOST is now âlocalhostâ, a new HOSTv4 constant has
been added for your  needs, similar to the existing HOSTv6
constant.
: Silence traceback in test_ssl
: Prefer PROTOCOL_TLS_CLIENT and PROTOCOL_TLS_SERVER protocols
for SSLContext.
: Remove sha256.tbs-internet.com ssl test
: Address ALPN callback changes for OpenSSL 1.1.0f. The latest
version behaves like OpenSSL 1.0.2 and no longer aborts handshake.
: regrtest: Exclude tzdata from regrtest âall. When running the
test suite using âuse=all / -u all, exclude tzdata since it makes
test_datetime too slow (15-20 min on some buildbots) which then times out
on some buildbots. Fix also regrtest command line parser to allow passing
-u extralargefile to run test_zipfile64.
: Add the set_nomemory(start,  and
remove_mem_hooks() functions to the  module.
: test_thread: setUp() now uses support.threading_setup() and
support.threading_cleanup() to wait until threads complete to avoid random
side effects on following tests. Initial patch written by Grzegorz
Grzywacz.
: Enhanced functions swap_attr() and swap_item() in the
test.support module. They now work when delete replaced attribute or item
inside the with statement.  The old value of the attribute or item (or
None if it doesnât exist) now will be assigned to the target of the âasâ
clause, if there is one.
: Use proper command line parsing in _testembed
: Disallow -j0 to be combined with -T/-l in regrtest command line
arguments.
: Fix the tests that bind() a unix socket and raise
PermissionError on Android for a non-root user.
: Fix the test_socket failures on Android - getservbyname(),
getservbyport() and getaddrinfo() are broken on some Android API levels.
: Now test.support.rmtree is able to remove unwritable or
unreadable directories.
: Various caches now are cleared before running every test file.
: Fix test_posix for Android where âid -Gâ is entirely wrong or
missing the effective gid.
: regrtest: fix the parser of command line arguments.
: Adds _testconsole module to test console input.
: Add the support.setswitchinterval() function to fix
test_functools hanging on the Android armv7 qemu emulator.

================================================================================

# Changelog - Tests (Part 2)

: test.support.HOST is now âlocalhostâ, a new HOSTv4 constant has
been added for your  needs, similar to the existing HOSTv6
constant.

: Silence traceback in test_ssl

: Prefer PROTOCOL_TLS_CLIENT and PROTOCOL_TLS_SERVER protocols
for SSLContext.

: Remove sha256.tbs-internet.com ssl test

: Address ALPN callback changes for OpenSSL 1.1.0f. The latest
version behaves like OpenSSL 1.0.2 and no longer aborts handshake.

: regrtest: Exclude tzdata from regrtest âall. When running the
test suite using âuse=all / -u all, exclude tzdata since it makes
test_datetime too slow (15-20 min on some buildbots) which then times out
on some buildbots. Fix also regrtest command line parser to allow passing
-u extralargefile to run test_zipfile64.

: Add the set_nomemory(start,  and
remove_mem_hooks() functions to the  module.

: test_thread: setUp() now uses support.threading_setup() and
support.threading_cleanup() to wait until threads complete to avoid random
side effects on following tests. Initial patch written by Grzegorz
Grzywacz.

================================================================================

# Changelog - Tests (Part 3)

: Enhanced functions swap_attr() and swap_item() in the
test.support module. They now work when delete replaced attribute or item
inside the with statement.  The old value of the attribute or item (or
None if it doesnât exist) now will be assigned to the target of the âasâ
clause, if there is one.

: Use proper command line parsing in _testembed

: Disallow -j0 to be combined with -T/-l in regrtest command line
arguments.

: Fix the tests that bind() a unix socket and raise
PermissionError on Android for a non-root user.

: Fix the test_socket failures on Android - getservbyname(),
getservbyport() and getaddrinfo() are broken on some Android API levels.

: Now test.support.rmtree is able to remove unwritable or
unreadable directories.

: Various caches now are cleared before running every test file.

: Fix test_posix for Android where âid -Gâ is entirely wrong or
missing the effective gid.

: regrtest: fix the parser of command line arguments.

: Adds _testconsole module to test console input.

: Add the support.setswitchinterval() function to fix
test_functools hanging on the Android armv7 qemu emulator.

================================================================================

# Changelog - Build (Part 1)

List:
: Allow --with-lto to be used on all builds, not just 
profile-opt.
: Remove support for building âwithout-threads. This option is
not really useful anymore in the 21st century. Removing lots of
conditional paths allows us to simplify the code base, including in
difficult to maintain low-level internal code.
: Per , support for the IRIX operating system was
removed.
: Fix compile error when compiling âwithout-threads. Patch by
Masayuki Yamamoto.
: Locate msbuild.exe on Windows when building rather than
vcvarsall.bat
: Support the  marker in Setup files. Extension modules
listed after this marker are not built at all, neither by the Makefile nor
by setup.py.
: Add --with-assertions configure flag to explicitly enable C
 checks. Defaults to off. --with-pydebug implies
--with-assertions.
: Fix out-of-tree builds of Python when configured with
--with--dtrace.
: Prevent unnecessary rebuilding of Python during  ,
  and some other make targets when configured with
--enable-optimizations.
: Donât regenerate generated files based on file modification
time anymore: the action is now explicit. Replace   with
 .
: Fix --enable-optimization didnât work.
: sys.version and the platform module python_build(),
python_branch(), and python_revision() functions now use git information
rather than hg when building from a repo.
: Update Windows build and OS X installers to use OpenSSL 1.0.2k.
: Prohibit implicit C function declarations: use
-Werror=implicit-function-declaration when possible (GCC and Clang,
but it depends on the compiler version). Patch written by Chi Hsuan Yen.
: Remove old Be OS helper scripts.
: Set Android compilation and link flags.
: Fix implicit declaration of function _setmode. Patch by
Masayuki Yamamoto
: Removes hard dependency on hg.exe from PCBuild/build.bat
: Added missed names to PC/python3.def.
: lockf() is available on Android API level 24, but the F_LOCK
macro is not defined in android-ndk-r13.
: Fix the compilation error that occurs because if_nameindex() is
available on Android API level 24, but the if_nameindex structure is not
defined.
: Do not add the directory for installing C header files and the
directory for installing object code libraries to the cross compilation
search paths. Original patch by Thomas Petazzoni.
: Do not define sys.implementation._multiarch on Android.
: Fix out-of-tree building on AIX.  Patch by Tristan Carel and
Michael Haubenwallner.
: Rename âwith-optimiations to âenable-optimizations.
: Fix missing extensions modules when cross compiling.
: Update Windows build and OS X installers to use SQLite 3.14.2.
: Update Windows build and OS X installers to use OpenSSL 1.0.2j.
: Fix building the _struct module on Cygwin by passing 
instead of &PyType_Type to PyVarObject_HEAD_INIT.  Patch by Masayuki
Yamamoto.
: Fix building extensions modules on Cygwin.  Patch by Roumen
Petrov, based on original patch by Jason Tishler.
: Add configure check for siginfo_t.si_band, which Cygwin does
not provide. Patch by Masayuki Yamamoto with review and rebase by Erik
Bray.
: Fixed build with Estonian locale (python-config and distclean
targets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.
: setup.py now detects system libffi with multiarch wrapper.
: A full copy of libffi is no longer bundled for use when
building _ctypes on non-OSX UNIX platforms.  An installed copy of libffi
is now required when building _ctypes on such platforms.
: Remove redundant include search directory option for building
outside the source tree.
: Prevent missing âgetentropyâ declaration warning on macOS.
Patch by Gareth Rees.

================================================================================

# Changelog - Build (Part 2)

: Allow --with-lto to be used on all builds, not just 
profile-opt.

: Remove support for building âwithout-threads. This option is
not really useful anymore in the 21st century. Removing lots of
conditional paths allows us to simplify the code base, including in
difficult to maintain low-level internal code.

: Per , support for the IRIX operating system was
removed.

: Fix compile error when compiling âwithout-threads. Patch by
Masayuki Yamamoto.

: Locate msbuild.exe on Windows when building rather than
vcvarsall.bat

: Support the  marker in Setup files. Extension modules
listed after this marker are not built at all, neither by the Makefile nor
by setup.py.

: Add --with-assertions configure flag to explicitly enable C
 checks. Defaults to off. --with-pydebug implies
--with-assertions.

: Fix out-of-tree builds of Python when configured with
--with--dtrace.

: Prevent unnecessary rebuilding of Python during  ,
  and some other make targets when configured with
--enable-optimizations.

: Donât regenerate generated files based on file modification
time anymore: the action is now explicit. Replace   with
 .

: Fix --enable-optimization didnât work.

================================================================================

# Changelog - Build (Part 3)

: sys.version and the platform module python_build(),
python_branch(), and python_revision() functions now use git information
rather than hg when building from a repo.

: Update Windows build and OS X installers to use OpenSSL 1.0.2k.

: Prohibit implicit C function declarations: use
-Werror=implicit-function-declaration when possible (GCC and Clang,
but it depends on the compiler version). Patch written by Chi Hsuan Yen.

: Remove old Be OS helper scripts.

: Set Android compilation and link flags.

: Fix implicit declaration of function _setmode. Patch by
Masayuki Yamamoto

: Removes hard dependency on hg.exe from PCBuild/build.bat

: Added missed names to PC/python3.def.

: lockf() is available on Android API level 24, but the F_LOCK
macro is not defined in android-ndk-r13.

: Fix the compilation error that occurs because if_nameindex() is
available on Android API level 24, but the if_nameindex structure is not
defined.

: Do not add the directory for installing C header files and the
directory for installing object code libraries to the cross compilation
search paths. Original patch by Thomas Petazzoni.

: Do not define sys.implementation._multiarch on Android.

================================================================================

# Changelog - Build (Part 4)

: Fix out-of-tree building on AIX.  Patch by Tristan Carel and
Michael Haubenwallner.

: Rename âwith-optimiations to âenable-optimizations.

: Fix missing extensions modules when cross compiling.

: Update Windows build and OS X installers to use SQLite 3.14.2.

: Update Windows build and OS X installers to use OpenSSL 1.0.2j.

: Fix building the _struct module on Cygwin by passing 
instead of &PyType_Type to PyVarObject_HEAD_INIT.  Patch by Masayuki
Yamamoto.

: Fix building extensions modules on Cygwin.  Patch by Roumen
Petrov, based on original patch by Jason Tishler.

: Add configure check for siginfo_t.si_band, which Cygwin does
not provide. Patch by Masayuki Yamamoto with review and rebase by Erik
Bray.

: Fixed build with Estonian locale (python-config and distclean
targets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.

: setup.py now detects system libffi with multiarch wrapper.

: A full copy of libffi is no longer bundled for use when
building _ctypes on non-OSX UNIX platforms.  An installed copy of libffi
is now required when building _ctypes on such platforms.

: Remove redundant include search directory option for building
outside the source tree.

================================================================================

# Changelog - Build (Part 5)

: Prevent missing âgetentropyâ declaration warning on macOS.
Patch by Gareth Rees.

================================================================================

# Changelog - Windows (Part 1)

List:
: Update Windows build to use OpenSSL 1.1.0f
: Adds detection of Visual Studio 2017 to distutils on Windows.
: zlib is no longer bundled in the CPython source, instead it is
downloaded on demand just like bz2, lzma, OpenSSL, Tcl/Tk, and SQLite.
: Change to building with MSVC v141 (included with Visual Studio
2017)
: os.cpu_count() now returns the correct number of processors on
Windows when the number of logical processors is greater than 64.
: Pre-build OpenSSL, Tcl and Tk and include the binaries in the
build.
: Add a missing xmlns to python.manifest so that it matches the
schema.
: Allow requiring 64-bit interpreters from py.exe using -64
suffix. Contributed by Steve (Gadget) Barnes.
: Adds list options (-0, -0p) to py.exe launcher. Contributed by
Steve Barnes.
: Fix socket deprecation warnings in socketmodule.c. Patch by
Segev Finer.
: The build process on Windows no longer depends on Subversion,
instead pulling external code from GitHub via a Python script.  If Python
3.6 is not found on the system (via  ), NuGet is used to
download a copy of 32-bit Python.
: Removes readme.txt from the installer.
: winreg does not truncate string correctly (Patch by Eryk Sun)
: Deprecate WindowsRegistryFinder and disable it by default
: Fixes mishandled buffer reallocation in getpathp.c
: Adds signed catalog files for stdlib on Windows.
: Enables Unicode for ps1/ps2 and input() prompts. (Patch by Eryk
Sun)
: Improvements to help manuals on Windows.
: launcher.msi has different product codes between 32-bit and
64-bit
: Opening CON for write access fails
: WindowsConsoleIO readall() fails if first line starts with
Ctrl+Z
: WindowsConsoleIO fileno() passes wrong flags to _open_osfhandle
: _PyIO_get_console_type fails for various paths
: Renames Windows path file to ._pth
: Windows ._pth file should allow import site

================================================================================

# Changelog - Windows (Part 2)

: Update Windows build to use OpenSSL 1.1.0f

: Adds detection of Visual Studio 2017 to distutils on Windows.

: zlib is no longer bundled in the CPython source, instead it is
downloaded on demand just like bz2, lzma, OpenSSL, Tcl/Tk, and SQLite.

: Change to building with MSVC v141 (included with Visual Studio
2017)

: os.cpu_count() now returns the correct number of processors on
Windows when the number of logical processors is greater than 64.

: Pre-build OpenSSL, Tcl and Tk and include the binaries in the
build.

: Add a missing xmlns to python.manifest so that it matches the
schema.

: Allow requiring 64-bit interpreters from py.exe using -64
suffix. Contributed by Steve (Gadget) Barnes.

: Adds list options (-0, -0p) to py.exe launcher. Contributed by
Steve Barnes.

: Fix socket deprecation warnings in socketmodule.c. Patch by
Segev Finer.

: The build process on Windows no longer depends on Subversion,
instead pulling external code from GitHub via a Python script.  If Python
3.6 is not found on the system (via  ), NuGet is used to
download a copy of 32-bit Python.

: Removes readme.txt from the installer.

: winreg does not truncate string correctly (Patch by Eryk Sun)

================================================================================

# Changelog - Windows (Part 3)

: Deprecate WindowsRegistryFinder and disable it by default

: Fixes mishandled buffer reallocation in getpathp.c

: Adds signed catalog files for stdlib on Windows.

: Enables Unicode for ps1/ps2 and input() prompts. (Patch by Eryk
Sun)

: Improvements to help manuals on Windows.

: launcher.msi has different product codes between 32-bit and
64-bit

: Opening CON for write access fails

: WindowsConsoleIO readall() fails if first line starts with
Ctrl+Z

: WindowsConsoleIO fileno() passes wrong flags to _open_osfhandle

: _PyIO_get_console_type fails for various paths

: Renames Windows path file to ._pth

: Windows ._pth file should allow import site

================================================================================

# Changelog - IDLE (Part 1)

List:
: IDLE code context â fix code update and font update timers.
Canceling timers prevents a warning message when test_idle completes.
: IDLE - Update non-key options in former extension classes. When
applying configdialog changes, call .reload for each feature class. Change
ParenMatch so updated options affect existing instances attached to
existing editor windows.
: IDLE - Improve rstrip entry in doc. Strip trailing whitespace
strips more than blank spaces.  Multiline string literals are not skipped.
: IDLE - make tests pass with zzdummy extension disabled by
default.
: Document how IDLE runs tkinter programs. IDLE calls tcl/tk
update in the background in order to make live interaction and
experimentation with tkinter applications much easier.
: IDLE â fix tk entry box tests by deleting first. Adding to an
int entry is not the same as deleting and inserting because int(ââ) will
fail.
: Rearrange IDLE configdialog GenPage into Window, Editor, and
Help sections.
: IDLE - Add docstrings and tests for outwin subclass of editor.
Move some data and functions from the class to module level. Patch by
Cheryl Sabella.
: IDLE - Do not modify tkinter.message in test_configdialog.
: Convert IDLEâs built-in âextensionsâ to regular features. About
10 IDLE features were implemented as supposedly optional extensions. Their
different behavior could be confusing or worse for users and not good for
maintenance. Hence the conversion. The main difference for users is that
user configurable key bindings for builtin features are now handled
uniformly. Now, editing a binding in a keyset only affects its value in
the keyset. All bindings are defined together in the system-specific
default keysets in config-extensions.def. All custom keysets are saved as
a whole in config-extension.cfg.  All take effect as soon as one clicks
Apply or Ok. The affected events are â<<force-open-completions>>â,
â<<expand-word>>â, â<<force-open-calltip>>â, â<<flash-paren>>â,
â<<format-paragraph>>â, â<<run-module>>â, â<<check-module>>â, and
â<<zoom-height>>â.  Any (global) customizations made before 3.6.3 will not
affect their keyset-specific customization after 3.6.3. and vice versa.
Initial patch by Charles Wohlganger.
: IDLE: Factor HighPage(Frame) class from ConfigDialog. Patch by
Cheryl Sabella.
: Add tests for configdialog highlight tab.  Patch by Cheryl
Sabella.
: IDLE: Factor KeysPage(Frame) class from ConfigDialog.  The
slightly modified tests continue to pass.  Patch by Cheryl Sabella.
: IDLE â stop leaks in test_configdialog. Initial patch by
Victor Stinner.
: Add tests for configdialog keys tab. Patch by Cheryl Sabella.
: IDLE: Calltips use inspect.signature instead of
inspect.getfullargspec. This improves calltips for builtins converted
to use Argument Clinic. Patch by Louie Lu.
: IDLE - Add an outline of a TabPage class in configdialog.
Update existing classes to match outline. Initial patch by Cheryl Sabella.
: Factor GenPage(Frame) class from ConfigDialog. The slightly
modified tests continue to pass. Patch by Cheryl Sabella.
: IDLE - Factor FontPage(Frame) class from ConfigDialog. Slightly
modified tests continue to pass. Fix General tests. Patch mostly by Cheryl
Sabella.
: IDLE - Use ttk widgets in ConfigDialog. Patches by Terry Jan
Reedy and Cheryl Sabella.
: IDLE - Finish rearranging methods of ConfigDialog Grouping
methods pertaining to each tab and the buttons will aid writing tests and
improving the tabs and will enable splitting the groups into classes.
: IDLE â Factor a VarTrace class out of ConfigDialog. Instance
tracers manages pairs consisting of a tk variable and a callback function.
When tracing is turned on, setting the variable calls the function.  Test
coverage for the new class is 100%.
: IDLE: Add more tests for General tab.
: IDLE - Improve configdialog font page and tests. In
configdialog: Document causal pathways in create_font_tab docstring.
Simplify some attribute names. Move set_samples calls to var_changed_font
(idea from Cheryl Sabella).  Move related functions to positions after the
create widgets function. In test_configdialog: Fix test_font_set so not
order dependent.  Fix renamed test_indent_scale so it tests the widget.
Adjust tests for movement of set_samples call.  Add tests for load
functions.  Put all font tests in one class and tab indent tests in
another.  Except for two lines, these tests completely cover the related
functions.
: IDLE â Add more configdialog font page tests.
: IDLE: replace âcolourâ with âcolorâ in configdialog.
: Add tests for idlelib.config.IdleConf. Increase coverage from
46% to 96%. Patch by Louie Lu.
: Document coverage details for idlelib tests. Add section to
idlelib/idle-test/README.txt. Include check that branches are taken both
ways. Exclude IDLE-specific code that does not run during unit tests.
: IDLE: Document ConfigDialog tk Vars, methods, and widgets in
docstrings This will facilitate improving the dialog and splitting up the
class. Original patch by Cheryl Sabella.
: IDLE: Add tests for ConfigParser subclasses in config. Patch by
Louie Lu.
: IDLE: Add docstrings to browser.py. Patch by Cheryl Sabella.
: IDLE: Remove unused variables in configdialog.  One is a
duplicate, one is set but cannot be altered by users. Patch by Cheryl
Sabella.
: IDLE: In Settings dialog, select font with Up, Down keys as
well as mouse. Initial patch by Louie Lu.
: IDLE: call config.IdleConf.GetUserCfgDir only once.
: IDLE: Factor ConfigChanges class from configdialog, put in
config; test. * In config, put dump test code in a function; run it and
unittest in   âif __name__ == â__main__â. * Add class config.ConfigChanges
based on changes_class_v4.py on bpo issue. * Add class
test_config.ChangesTest, partly using configdialog_tests_v1.py. * Revise
configdialog to use ConfigChanges; see tracker msg297804. * Revise
test_configdialog to match configdialog changes. * Remove configdialog
functions unused or moved to ConfigChanges. Cheryl Sabella contributed
parts of the patch.
: IDLE: configdialog - Add docstrings and fix comments. Patch by
Cheryl Sabella.
: IDLE: Improve textview with docstrings, PEP8 names, and more
tests. Patch by Cheryl Sabella.
: IDLE: Make several improvements to parenmatch. Add âparensâ
style to highlight both opener and closer. Make âdefaultâ style, which is
not default, a synonym for âopenerâ. Make time-delay work the same with
all styles. Add help for config dialog extensions tab, including help for
parenmatch. Add new tests.  Original patch by Charles Wohlganger.
: IDLE: add docstrings to grep module. Patch by Cheryl Sabella
: IDLEâs basic custom key entry dialog now detects duplicates
properly. Original patch by Saimadhav Heblikar.
: IDLE no longer deletes a character after commenting out a
region by a key shortcut.  Add   for this and other
potential conflicts between IDLE and default key bindings.
: Review and change idlelib.configdialog names. Lowercase method
and attribute names. Replace âcolourâ with âcolorâ, expand overly cryptic
names, delete unneeded underscores. Replace   with specific
imports. Patches by Cheryl Sabella.
: IDLE: Verify user-entered key sequences by trying to bind them
with tk. Add tests for all 3 validation functions. Original patch by G
Polo.  Tests added by Cheryl Sabella.
: Fix several problems with IDLEâs autocompletion box. The
following should now work: clicking on selection box items; using the
scrollbar; selecting an item by hitting Return. Hangs on MacOSX should no
longer happen. Patch by Louie Lu.
: Add doc subsubsection about IDLE failure to start. Popup
no-connection message directs users to this section.
: Fix reference leaks in IDLE tests. Patches by Louie Lu and
Terry Jan Reedy.
: Add docstrings for textview.py and use PEP8 names. Patches by
Cheryl Sabella and Terry Jan Reedy.
: Help-about: use pep8 names and add tests. Increase coverage to
100%. Patches by Louie Lu, Cheryl Sabella, and Terry Jan Reedy.
: Add _utest option to textview; add new tests. Increase coverage
to 100%. Patches by Louie Lu and Terry Jan Reedy.
: IDLE colors f-string prefixes (but not invalid ur prefixes).
: Add 10% to coverage of IDLEâs test_configdialog. Update and
augment description of the configuration system.

================================================================================

# Changelog - IDLE (Part 2)

: IDLE code context â fix code update and font update timers.
Canceling timers prevents a warning message when test_idle completes.

: IDLE - Update non-key options in former extension classes. When
applying configdialog changes, call .reload for each feature class. Change
ParenMatch so updated options affect existing instances attached to
existing editor windows.

: IDLE - Improve rstrip entry in doc. Strip trailing whitespace
strips more than blank spaces.  Multiline string literals are not skipped.

: IDLE - make tests pass with zzdummy extension disabled by
default.

: Document how IDLE runs tkinter programs. IDLE calls tcl/tk
update in the background in order to make live interaction and
experimentation with tkinter applications much easier.

: IDLE â fix tk entry box tests by deleting first. Adding to an
int entry is not the same as deleting and inserting because int(ââ) will
fail.

: Rearrange IDLE configdialog GenPage into Window, Editor, and
Help sections.

: IDLE - Add docstrings and tests for outwin subclass of editor.
Move some data and functions from the class to module level. Patch by
Cheryl Sabella.

: IDLE - Do not modify tkinter.message in test_configdialog.

================================================================================

# Changelog - IDLE (Part 3)

: Convert IDLEâs built-in âextensionsâ to regular features. About
10 IDLE features were implemented as supposedly optional extensions. Their
different behavior could be confusing or worse for users and not good for
maintenance. Hence the conversion. The main difference for users is that
user configurable key bindings for builtin features are now handled
uniformly. Now, editing a binding in a keyset only affects its value in
the keyset. All bindings are defined together in the system-specific
default keysets in config-extensions.def. All custom keysets are saved as
a whole in config-extension.cfg.  All take effect as soon as one clicks
Apply or Ok. The affected events are â<<force-open-completions>>â,
â<<expand-word>>â, â<<force-open-calltip>>â, â<<flash-paren>>â,
â<<format-paragraph>>â, â<<run-module>>â, â<<check-module>>â, and
â<<zoom-height>>â.  Any (global) customizations made before 3.6.3 will not
affect their keyset-specific customization after 3.6.3. and vice versa.
Initial patch by Charles Wohlganger.

: IDLE: Factor HighPage(Frame) class from ConfigDialog. Patch by
Cheryl Sabella.

================================================================================

# Changelog - IDLE (Part 4)

: Add tests for configdialog highlight tab.  Patch by Cheryl
Sabella.

: IDLE: Factor KeysPage(Frame) class from ConfigDialog.  The
slightly modified tests continue to pass.  Patch by Cheryl Sabella.

: IDLE â stop leaks in test_configdialog. Initial patch by
Victor Stinner.

: Add tests for configdialog keys tab. Patch by Cheryl Sabella.

: IDLE: Calltips use inspect.signature instead of
inspect.getfullargspec. This improves calltips for builtins converted
to use Argument Clinic. Patch by Louie Lu.

: IDLE - Add an outline of a TabPage class in configdialog.
Update existing classes to match outline. Initial patch by Cheryl Sabella.

: Factor GenPage(Frame) class from ConfigDialog. The slightly
modified tests continue to pass. Patch by Cheryl Sabella.

: IDLE - Factor FontPage(Frame) class from ConfigDialog. Slightly
modified tests continue to pass. Fix General tests. Patch mostly by Cheryl
Sabella.

: IDLE - Use ttk widgets in ConfigDialog. Patches by Terry Jan
Reedy and Cheryl Sabella.

: IDLE - Finish rearranging methods of ConfigDialog Grouping
methods pertaining to each tab and the buttons will aid writing tests and
improving the tabs and will enable splitting the groups into classes.

================================================================================

# Changelog - IDLE (Part 5)

: IDLE â Factor a VarTrace class out of ConfigDialog. Instance
tracers manages pairs consisting of a tk variable and a callback function.
When tracing is turned on, setting the variable calls the function.  Test
coverage for the new class is 100%.

: IDLE: Add more tests for General tab.

: IDLE - Improve configdialog font page and tests. In
configdialog: Document causal pathways in create_font_tab docstring.
Simplify some attribute names. Move set_samples calls to var_changed_font
(idea from Cheryl Sabella).  Move related functions to positions after the
create widgets function. In test_configdialog: Fix test_font_set so not
order dependent.  Fix renamed test_indent_scale so it tests the widget.
Adjust tests for movement of set_samples call.  Add tests for load
functions.  Put all font tests in one class and tab indent tests in
another.  Except for two lines, these tests completely cover the related
functions.

: IDLE â Add more configdialog font page tests.

: IDLE: replace âcolourâ with âcolorâ in configdialog.

: Add tests for idlelib.config.IdleConf. Increase coverage from
46% to 96%. Patch by Louie Lu.

================================================================================

# Changelog - IDLE (Part 6)

: Document coverage details for idlelib tests. Add section to
idlelib/idle-test/README.txt. Include check that branches are taken both
ways. Exclude IDLE-specific code that does not run during unit tests.

: IDLE: Document ConfigDialog tk Vars, methods, and widgets in
docstrings This will facilitate improving the dialog and splitting up the
class. Original patch by Cheryl Sabella.

: IDLE: Add tests for ConfigParser subclasses in config. Patch by
Louie Lu.

: IDLE: Add docstrings to browser.py. Patch by Cheryl Sabella.

: IDLE: Remove unused variables in configdialog.  One is a
duplicate, one is set but cannot be altered by users. Patch by Cheryl
Sabella.

: IDLE: In Settings dialog, select font with Up, Down keys as
well as mouse. Initial patch by Louie Lu.

: IDLE: call config.IdleConf.GetUserCfgDir only once.

================================================================================

# Changelog - IDLE (Part 7)

: IDLE: Factor ConfigChanges class from configdialog, put in
config; test. * In config, put dump test code in a function; run it and
unittest in   âif __name__ == â__main__â. * Add class config.ConfigChanges
based on changes_class_v4.py on bpo issue. * Add class
test_config.ChangesTest, partly using configdialog_tests_v1.py. * Revise
configdialog to use ConfigChanges; see tracker msg297804. * Revise
test_configdialog to match configdialog changes. * Remove configdialog
functions unused or moved to ConfigChanges. Cheryl Sabella contributed
parts of the patch.

: IDLE: configdialog - Add docstrings and fix comments. Patch by
Cheryl Sabella.

: IDLE: Improve textview with docstrings, PEP8 names, and more
tests. Patch by Cheryl Sabella.

: IDLE: Make several improvements to parenmatch. Add âparensâ
style to highlight both opener and closer. Make âdefaultâ style, which is
not default, a synonym for âopenerâ. Make time-delay work the same with
all styles. Add help for config dialog extensions tab, including help for
parenmatch. Add new tests.  Original patch by Charles Wohlganger.

: IDLE: add docstrings to grep module. Patch by Cheryl Sabella

================================================================================

# Changelog - IDLE (Part 8)

: IDLEâs basic custom key entry dialog now detects duplicates
properly. Original patch by Saimadhav Heblikar.

: IDLE no longer deletes a character after commenting out a
region by a key shortcut.  Add   for this and other
potential conflicts between IDLE and default key bindings.

: Review and change idlelib.configdialog names. Lowercase method
and attribute names. Replace âcolourâ with âcolorâ, expand overly cryptic
names, delete unneeded underscores. Replace   with specific
imports. Patches by Cheryl Sabella.

: IDLE: Verify user-entered key sequences by trying to bind them
with tk. Add tests for all 3 validation functions. Original patch by G
Polo.  Tests added by Cheryl Sabella.

: Fix several problems with IDLEâs autocompletion box. The
following should now work: clicking on selection box items; using the
scrollbar; selecting an item by hitting Return. Hangs on MacOSX should no
longer happen. Patch by Louie Lu.

: Add doc subsubsection about IDLE failure to start. Popup
no-connection message directs users to this section.

: Fix reference leaks in IDLE tests. Patches by Louie Lu and
Terry Jan Reedy.

================================================================================

# Changelog - IDLE (Part 9)

: Add docstrings for textview.py and use PEP8 names. Patches by
Cheryl Sabella and Terry Jan Reedy.

: Help-about: use pep8 names and add tests. Increase coverage to
100%. Patches by Louie Lu, Cheryl Sabella, and Terry Jan Reedy.

: Add _utest option to textview; add new tests. Increase coverage
to 100%. Patches by Louie Lu and Terry Jan Reedy.

: IDLE colors f-string prefixes (but not invalid ur prefixes).

: Add 10% to coverage of IDLEâs test_configdialog. Update and
augment description of the configuration system.

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: gdb integration commands (py-bt, etc.) work on optimized shared
builds now, too.   introduced _PyEval_EvalFrameDefault which
inlines PyEval_EvalFrameEx on non-debug shared builds.  This broke the
ability to use py-bt, py-up, and a few other Python-specific gdb
integrations. The problem is fixed by only looking for
_PyEval_EvalFrameDefault frames in python-gdb.py.  Original patch by Bruno
âPolacoâ Penteado.
: Added the slice index converter in Argument Clinic.
: Argument Clinic now uses the converter bool(accept={int})
rather than  for semantical booleans.  This avoids repeating the
default value for Python and C and will help in converting to  in
future.
: python-gdb.py now supports also method-wrapper
(wrapperobject) objects.
: Fix python-gdb.py didnât support new dict implementation.
: The pybench and pystone microbenchmark have been removed from
Tools. Please use the new Python benchmark suite
https://github.com/python/pyperformance which is more reliable and
includes a portable version of pybench working on Python 2 and Python 3.
: The zipfile module CLI now prints usage to stderr. Patch by
Stephen J. Turnbull.

================================================================================

# Changelog - Tools/Demos (Part 2)

: gdb integration commands (py-bt, etc.) work on optimized shared
builds now, too.   introduced _PyEval_EvalFrameDefault which
inlines PyEval_EvalFrameEx on non-debug shared builds.  This broke the
ability to use py-bt, py-up, and a few other Python-specific gdb
integrations. The problem is fixed by only looking for
_PyEval_EvalFrameDefault frames in python-gdb.py.  Original patch by Bruno
âPolacoâ Penteado.

: Added the slice index converter in Argument Clinic.

: Argument Clinic now uses the converter bool(accept={int})
rather than  for semantical booleans.  This avoids repeating the
default value for Python and C and will help in converting to  in
future.

: python-gdb.py now supports also method-wrapper
(wrapperobject) objects.

: Fix python-gdb.py didnât support new dict implementation.

: The pybench and pystone microbenchmark have been removed from
Tools. Please use the new Python benchmark suite
https://github.com/python/pyperformance which is more reliable and
includes a portable version of pybench working on Python 2 and Python 3.

: The zipfile module CLI now prints usage to stderr. Patch by
Stephen J. Turnbull.

================================================================================

# Changelog - C API (Part 1)

List:
: Added the Py_UNREACHABLE() macro for code paths which are
never expected to be reached.  This and a few other useful macros are now
documented in the C API manual.
: Remove own implementation for thread-local storage. CPython has
provided the own implementation for thread-local storage (TLS) on
Python/thread.c, itâs used in the case which a platform has not supplied
native TLS.  However, currently all supported platforms (Windows and
pthreads) have provided native TLS and defined the Py_HAVE_NATIVE_TLS
macro with unconditional in any case.
: PyUnicode_AsWideCharString() now raises a ValueError if the
second argument is NULL and the wchar_t* string contains null characters.
: Deprecate PyOS_AfterFork() and add PyOS_BeforeFork(),
PyOS_AfterFork_Parent() and PyOS_AfterFork_Child().
: The type of results of PyThread_start_new_thread() and
PyThread_get_thread_ident(), and the id parameter of
PyThreadState_SetAsyncExc() changed from âlongâ to âunsigned longâ.
: Function PySlice_GetIndicesEx() is deprecated and replaced with
a macro if Py_LIMITED_API is not set or set to the value between
0x03050400 and 0x03060000 (not including) or 0x03060100 or higher.  Added
functions PySlice_Unpack() and PySlice_AdjustIndices().
: Fixed the declaration of some public API functions.
PyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in
limited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and
Py_BuildValue() were not available in limited API of version < 3.3 when
PY_SSIZE_T_CLEAN is defined.
: The result of PyUnicode_AsUTF8AndSize() and PyUnicode_AsUTF8()
is now of type    rather of  .
: All stable API extensions added after Python 3.2 are now
available only when Py_LIMITED_API is set to the PY_VERSION_HEX value of
the minimum Python version supporting this API.
: The index parameters  and  of PyUnicode_FindChar()
are now adjusted to behave like str[start:end].
: PyUnicode_CompareWithASCIIString() now never raises exceptions.
: The fields name and doc of structures PyMemberDef, PyGetSetDef,
PyStructSequence_Field, PyStructSequence_Desc, and wrapperbase are now of
type    rather of  .
: Private variable _Py_PackageContext is now of type  
 rather of  .
: Compiler warnings are now emitted if use most of deprecated
functions.
: Deprecated undocumented functions PyUnicode_AsEncodedObject(),
PyUnicode_AsDecodedObject(), PyUnicode_AsDecodedUnicode() and
PyUnicode_AsEncodedUnicode().

================================================================================

# Changelog - C API (Part 2)

: Added the Py_UNREACHABLE() macro for code paths which are
never expected to be reached.  This and a few other useful macros are now
documented in the C API manual.

: Remove own implementation for thread-local storage. CPython has
provided the own implementation for thread-local storage (TLS) on
Python/thread.c, itâs used in the case which a platform has not supplied
native TLS.  However, currently all supported platforms (Windows and
pthreads) have provided native TLS and defined the Py_HAVE_NATIVE_TLS
macro with unconditional in any case.

: PyUnicode_AsWideCharString() now raises a ValueError if the
second argument is NULL and the wchar_t* string contains null characters.

: Deprecate PyOS_AfterFork() and add PyOS_BeforeFork(),
PyOS_AfterFork_Parent() and PyOS_AfterFork_Child().

: The type of results of PyThread_start_new_thread() and
PyThread_get_thread_ident(), and the id parameter of
PyThreadState_SetAsyncExc() changed from âlongâ to âunsigned longâ.

================================================================================

# Changelog - C API (Part 3)

: Function PySlice_GetIndicesEx() is deprecated and replaced with
a macro if Py_LIMITED_API is not set or set to the value between
0x03050400 and 0x03060000 (not including) or 0x03060100 or higher.  Added
functions PySlice_Unpack() and PySlice_AdjustIndices().

: Fixed the declaration of some public API functions.
PyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in
limited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and
Py_BuildValue() were not available in limited API of version < 3.3 when
PY_SSIZE_T_CLEAN is defined.

: The result of PyUnicode_AsUTF8AndSize() and PyUnicode_AsUTF8()
is now of type    rather of  .

: All stable API extensions added after Python 3.2 are now
available only when Py_LIMITED_API is set to the PY_VERSION_HEX value of
the minimum Python version supporting this API.

: The index parameters  and  of PyUnicode_FindChar()
are now adjusted to behave like str[start:end].

: PyUnicode_CompareWithASCIIString() now never raises exceptions.

: The fields name and doc of structures PyMemberDef, PyGetSetDef,
PyStructSequence_Field, PyStructSequence_Desc, and wrapperbase are now of
type    rather of  .

================================================================================

# Changelog - C API (Part 4)

: Private variable _Py_PackageContext is now of type  
 rather of  .

: Compiler warnings are now emitted if use most of deprecated
functions.

: Deprecated undocumented functions PyUnicode_AsEncodedObject(),
PyUnicode_AsDecodedObject(), PyUnicode_AsDecodedUnicode() and
PyUnicode_AsEncodedUnicode().

================================================================================

# Changelog - Python 3.6.6 final

Release date: 2018-06-27

There were no new changes in version 3.6.6.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix asynchronous generators to handle GeneratorExit in athrow()
correctly
: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
shutdown even when there was a custom handler set previously. Patch by
Philipp Kerling.
: Fixed a leak when the garbage collector fails to add an object
with the  method or referenced by it into the
gc.garbage list. PyGC_Collect() can now be called when an
exception is set and preserves it.
: Fix signed/unsigned comparison warning in pyhash.c.
: Fix a leak in set_symmetric_difference().
: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.
: Fix potential memory leak in normalizestring().
: Improved error messages in âasync withâ when __aenter__()
or __aexit__() return non-awaitable object.
: Fix ma_version_tag in dict implementation is uninitialized
when copying from key-sharing dict.
: Fixed jumping when the function contains an   loop.
: Fix an unnecessary ifdef in the include of VersionHelpers.h in
socketmodule on Windows.
: Fix a crash in ctypes.cast() in case the type argument is a
ctypes structured data type. Patch by Eryk Sun and Oren Milman.

: Fix asynchronous generators to handle GeneratorExit in athrow()
correctly

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
shutdown even when there was a custom handler set previously. Patch by
Philipp Kerling.

: Fixed a leak when the garbage collector fails to add an object
with the  method or referenced by it into the
gc.garbage list. PyGC_Collect() can now be called when an
exception is set and preserves it.

: Fix signed/unsigned comparison warning in pyhash.c.

: Fix a leak in set_symmetric_difference().

: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.

: Fix potential memory leak in normalizestring().

: Improved error messages in âasync withâ when __aenter__()
or __aexit__() return non-awaitable object.

: Fix ma_version_tag in dict implementation is uninitialized
when copying from key-sharing dict.

: Fixed jumping when the function contains an   loop.

: Fix an unnecessary ifdef in the include of VersionHelpers.h in
socketmodule on Windows.

: Fix a crash in ctypes.cast() in case the type argument is a
ctypes structured data type. Patch by Eryk Sun and Oren Milman.

================================================================================

# Changelog - Library (Part 1)

List:
: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
Steve Weber.
: Datetime instance d with non-None tzinfo, but with
d.tzinfo.utcoffset(d) returning None is now treated as naive by the
astimezone() method.
: Avoid race condition with debug logging
: The concatenation () and repetition () sequence
operations now raise  instead of SystemError when
performed on  objects.  Patch by Zackery Spytz.
: Fix gather to propagate cancellation of itself even with
return_exceptions.
: Fix a race condition in SSLProtocol.connection_made() of
asyncio.sslproto: start immediately the handshake instead of using
call_soon(). Previously, data_received() could be called before the
handshake started, causing the handshake to hang or fail.
: Fixed bug where calling write_eof() on a
_SelectorSocketTransport after itâs already closed raises AttributeError.
: Fix Task.__repr__ crash with Cythonâs bogus coroutines
: Fix RuntimeError after closing loop that used run_in_executor
: Use a better regex when breaking usage into wrappable parts.
Avoids bogus assertion errors from custom metavar strings.
: Fixed a bug in the Python implementation of the JSON decoder
that prevented the cache of parsed strings from clearing after finishing
the decoding. Based on patch by c-fos.
: tempfile._candidate_tempdir_list should consider common TEMP
locations
: Prevent uuid.get_node from using a DUID instead of a MAC on
Windows. Patch by Zvi Effron
: Fix race condition with ReadTransport.resume_reading in
Windows proactor event loop.
: Minor fixes in typing module: add annotations to
NamedTuple.__new__, pass  and  in
Generic.__new__.  Original PRs by Paulius Å arka and Chad Dombrova.
: Updated alias mapping with glibc 2.27 supported locales.
: Fix trailing quotation marks getting deleted when looking up
byte/string literals on pydoc. Patch by AndrÃ©s Delfino.
: Update error message when constructing invalid
inspect.Parameters Patch by Donghee Na.
: Fixed crash in the get() method of the  database
object when it is called with a single argument.
: Fix multiprocessing regression on newer glibcs
bpo-991266: Fix quoting of the  attribute of
http.cookies.SimpleCookie.
: Upgrade bundled version of pip to 10.0.1.
: Fixed a crash in the  module when converting an ST
object to a tree of tuples or lists with line_info=False and
col_info=True.
: Fix FD leak in _SelectorSocketTransport  Patch by Vlad
Starostin.
: Fix display of  call in the html produced by
cgitb.html(). Patch by StÃ©phane Blondon.
: random.Random.choice() now raises IndexError for empty
sequences consistently even when called from subclasses without a
getrandbits() implementation.
: Update difflib.mdiff() for .  Convert an uncaught
StopIteration in a generator into a return-statement.
: End framing at the end of C implementation of
pickle.Pickler.dump().
: The urllib.robotparserâs  representation now
includes wildcard entries and the âCrawl-delayâ and âRequest-rateâ fields.
Patch by Michael Lazar.
: Allow ttk.Treeview.insert to insert iid that has a false
boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
Khatri.
: The ssl module now compiles with LibreSSL 2.7.1.
: Release the GIL during fstat() calls, avoiding hang of all
threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
by Nir Soffer.
: Fix a regression in  that result of
 is empty when the network is constructed by a tuple
containing an integer mask and only 1 bit left for addresses.
: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
subprocess if another low descriptor is closed.
: Fix output of cover files for  module command-line
tool. Previously emitted cover files only when  option was
used. Patch by Michael Selik.
: If nested log adapters are used, the inner 
methods are no longer omitted.
: Support arrays >=2GiB in .  Patch by Segev Finer.
: pydoc: the stop() method of the private ServerThread class now
waits until DocServer.serve_until_quit() completes and then explicitly
sets its docserver attribute to None to break a reference cycle.

================================================================================

# Changelog - Library (Part 2)

: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
Steve Weber.

: Datetime instance d with non-None tzinfo, but with
d.tzinfo.utcoffset(d) returning None is now treated as naive by the
astimezone() method.

: Avoid race condition with debug logging

: The concatenation () and repetition () sequence
operations now raise  instead of SystemError when
performed on  objects.  Patch by Zackery Spytz.

: Fix gather to propagate cancellation of itself even with
return_exceptions.

: Fix a race condition in SSLProtocol.connection_made() of
asyncio.sslproto: start immediately the handshake instead of using
call_soon(). Previously, data_received() could be called before the
handshake started, causing the handshake to hang or fail.

: Fixed bug where calling write_eof() on a
_SelectorSocketTransport after itâs already closed raises AttributeError.

: Fix Task.__repr__ crash with Cythonâs bogus coroutines

: Fix RuntimeError after closing loop that used run_in_executor

: Use a better regex when breaking usage into wrappable parts.
Avoids bogus assertion errors from custom metavar strings.

================================================================================

# Changelog - Library (Part 3)

: Fixed a bug in the Python implementation of the JSON decoder
that prevented the cache of parsed strings from clearing after finishing
the decoding. Based on patch by c-fos.

: tempfile._candidate_tempdir_list should consider common TEMP
locations

: Prevent uuid.get_node from using a DUID instead of a MAC on
Windows. Patch by Zvi Effron

: Fix race condition with ReadTransport.resume_reading in
Windows proactor event loop.

: Minor fixes in typing module: add annotations to
NamedTuple.__new__, pass  and  in
Generic.__new__.  Original PRs by Paulius Å arka and Chad Dombrova.

: Updated alias mapping with glibc 2.27 supported locales.

: Fix trailing quotation marks getting deleted when looking up
byte/string literals on pydoc. Patch by AndrÃ©s Delfino.

: Update error message when constructing invalid
inspect.Parameters Patch by Donghee Na.

: Fixed crash in the get() method of the  database
object when it is called with a single argument.

: Fix multiprocessing regression on newer glibcs

bpo-991266: Fix quoting of the  attribute of
http.cookies.SimpleCookie.

: Upgrade bundled version of pip to 10.0.1.

================================================================================

# Changelog - Library (Part 4)

: Fixed a crash in the  module when converting an ST
object to a tree of tuples or lists with line_info=False and
col_info=True.

: Fix FD leak in _SelectorSocketTransport  Patch by Vlad
Starostin.

: Fix display of  call in the html produced by
cgitb.html(). Patch by StÃ©phane Blondon.

: random.Random.choice() now raises IndexError for empty
sequences consistently even when called from subclasses without a
getrandbits() implementation.

: Update difflib.mdiff() for .  Convert an uncaught
StopIteration in a generator into a return-statement.

: End framing at the end of C implementation of
pickle.Pickler.dump().

: The urllib.robotparserâs  representation now
includes wildcard entries and the âCrawl-delayâ and âRequest-rateâ fields.
Patch by Michael Lazar.

: Allow ttk.Treeview.insert to insert iid that has a false
boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
Khatri.

: The ssl module now compiles with LibreSSL 2.7.1.

: Release the GIL during fstat() calls, avoiding hang of all
threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
by Nir Soffer.

================================================================================

# Changelog - Library (Part 5)

: Fix a regression in  that result of
 is empty when the network is constructed by a tuple
containing an integer mask and only 1 bit left for addresses.

: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
subprocess if another low descriptor is closed.

: Fix output of cover files for  module command-line
tool. Previously emitted cover files only when  option was
used. Patch by Michael Selik.

: If nested log adapters are used, the inner 
methods are no longer omitted.

: Support arrays >=2GiB in .  Patch by Segev Finer.

: pydoc: the stop() method of the private ServerThread class now
waits until DocServer.serve_until_quit() completes and then explicitly
sets its docserver attribute to None to break a reference cycle.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Fix broken pypi link
: Add missing documentation for typing.AsyncContextManager.
: Add Korean language switcher for https://docs.python.org/3/
: Clarify that the  attribute on modules cannot be
just any value.
: Modernize documentation for writing C extension types.
: Deprecate Py_UNICODE usage in  document.
Py_UNICODE related APIs are deprecated since Python 3.3, but it is
missed in the document.
: Document PyBuffer_ToContiguous().
: Modify documentation for the  recipe to consume
initial values up to the start index.
: Update  documentation to describe how to make
standalone applications.
: Documentation changes for ipaddress.  Patch by Jon Foster and
Berker Peksag.
: Update documentation to clarify that WindowsRegistryFinder
implements MetaPathFinder. (Patch by Himanshu Lakhara)
: Add a note about curses.addch and curses.addstr exception
behavior when writing outside a window, or pad.
: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
flags for ssl.SSLContext.verify_mode.

: Fix broken pypi link

: Add missing documentation for typing.AsyncContextManager.

: Add Korean language switcher for https://docs.python.org/3/

================================================================================

# Changelog - Documentation (Part 2)

: Clarify that the  attribute on modules cannot be
just any value.

: Modernize documentation for writing C extension types.

: Deprecate Py_UNICODE usage in  document.
Py_UNICODE related APIs are deprecated since Python 3.3, but it is
missed in the document.

: Document PyBuffer_ToContiguous().

: Modify documentation for the  recipe to consume
initial values up to the start index.

: Update  documentation to describe how to make
standalone applications.

: Documentation changes for ipaddress.  Patch by Jon Foster and
Berker Peksag.

: Update documentation to clarify that WindowsRegistryFinder
implements MetaPathFinder. (Patch by Himanshu Lakhara)

: Add a note about curses.addch and curses.addstr exception
behavior when writing outside a window, or pad.

: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
flags for ssl.SSLContext.verify_mode.

================================================================================

# Changelog - Tests

List:
: Ignore test_posix_fallocate failures on BSD platforms that
might be due to running on ZFS.
: Add test_bdb.py.

: Ignore test_posix_fallocate failures on BSD platforms that
might be due to running on ZFS.

================================================================================

# Changelog - Build

List:
: Move -Wstrict-prototypes option to CFLAGS_NODIST from
. This option emitted annoying warnings when building extension
modules written in C++.
: Ensures module definition files for the stable ABI on Windows
are correctly regenerated.
: Enable CI builds on Visual Studio Team Services at
https://python.visualstudio.com/cpython
: Add -Wno-cast-function-type for gcc 8 for silencing
warnings about function casts like casting to PyCFunction in method
definition lists.
: Enable the verbose build for extension modules, when GNU make
is passed macros on the command line.

: Move -Wstrict-prototypes option to CFLAGS_NODIST from
. This option emitted annoying warnings when building extension
modules written in C++.

: Ensures module definition files for the stable ABI on Windows
are correctly regenerated.

: Enable CI builds on Visual Studio Team Services at
https://python.visualstudio.com/cpython

: Add -Wno-cast-function-type for gcc 8 for silencing
warnings about function casts like casting to PyCFunction in method
definition lists.

: Enable the verbose build for extension modules, when GNU make
is passed macros on the command line.

================================================================================

# Changelog - Windows

List:
: Update Windows installer to OpenSSL 1.0.2o.

: Update Windows installer to OpenSSL 1.0.2o.

================================================================================

# Changelog - macOS

List:
: Update macOS installer build to use OpenSSL 1.0.2o.

: Update macOS installer build to use OpenSSL 1.0.2o.

================================================================================

# Changelog - IDLE (Part 1)

List:
: On Windows, add API call saying that tk scales for DPI. On
Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
unchanged, and a monitor resolution greater than 96 DPI, this should make
text and lines sharper.  It should otherwise have no effect.
: Clicking on a context line moves that line to the top of the
editor window.
: IDLE: Use read-only text widget for code context instead of
label widget.
: Scroll IDLE editor text by lines. Previously, the mouse wheel
and scrollbar slider moved text by a fixed number of pixels, resulting in
partial lines at the top of the editor box.  The change also applies to
the shell and grep output windows, but not to read-only text views.
: Enable theme-specific color configuration for Code Context. Use
the Highlights tab to see the setting for built-in themes or add settings
to custom themes.
: Display up to maxlines non-blank lines for Code Context. If
there is no current context, show a single blank line.
: IDLE: Cleanup codecontext.py and its test.
: IDLEâs code context now recognizes async as a block opener.
: IDLE now colors async and await as keywords in 3.6. They become
full keywords in 3.7.
: Update word/identifier definition from ascii to unicode. In
text and entry boxes, this affects selection by double-click, movement
left/right by control-left/right, and deletion left/right by
control-BACKSPACE/DEL.
: IDLE: consistently color invalid string prefixes. A âuâ string
prefix cannot be paired with either ârâ or âfâ. Consistently color as much
of the prefix, starting at the right, as is valid. Revise and extend
colorizer test.
: Add docstrings and tests for codecontext.

================================================================================

# Changelog - IDLE (Part 2)

: On Windows, add API call saying that tk scales for DPI. On
Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
unchanged, and a monitor resolution greater than 96 DPI, this should make
text and lines sharper.  It should otherwise have no effect.

: Clicking on a context line moves that line to the top of the
editor window.

: IDLE: Use read-only text widget for code context instead of
label widget.

: Scroll IDLE editor text by lines. Previously, the mouse wheel
and scrollbar slider moved text by a fixed number of pixels, resulting in
partial lines at the top of the editor box.  The change also applies to
the shell and grep output windows, but not to read-only text views.

: Enable theme-specific color configuration for Code Context. Use
the Highlights tab to see the setting for built-in themes or add settings
to custom themes.

: Display up to maxlines non-blank lines for Code Context. If
there is no current context, show a single blank line.

: IDLE: Cleanup codecontext.py and its test.

: IDLEâs code context now recognizes async as a block opener.

: IDLE now colors async and await as keywords in 3.6. They become
full keywords in 3.7.

================================================================================

# Changelog - IDLE (Part 3)

: Update word/identifier definition from ascii to unicode. In
text and entry boxes, this affects selection by double-click, movement
left/right by control-left/right, and deletion left/right by
control-BACKSPACE/DEL.

: IDLE: consistently color invalid string prefixes. A âuâ string
prefix cannot be paired with either ârâ or âfâ. Consistently color as much
of the prefix, starting at the right, as is valid. Revise and extend
colorizer test.

: Add docstrings and tests for codecontext.

================================================================================

# Changelog - Tools/Demos

List:
: pygettext.py now recognizes only literal strings as
docstrings and translatable strings, and rejects bytes literals and
f-string expressions.
: Fixed handling directories as arguments in the 
script. Based on patch by Oleg Krasnikov.
: Fix pystackv and pystack gdbinit macros.
: Add an  flag for Tools/scripts/pathfix.py to disable
automatic backup creation (files with  suffix).
: Fix 2to3 for using with âadd-suffix option but without
âoutput-dir option for relative path to files in current directory.

: pygettext.py now recognizes only literal strings as
docstrings and translatable strings, and rejects bytes literals and
f-string expressions.

: Fixed handling directories as arguments in the 
script. Based on patch by Oleg Krasnikov.

: Fix pystackv and pystack gdbinit macros.

: Add an  flag for Tools/scripts/pathfix.py to disable
automatic backup creation (files with  suffix).

: Fix 2to3 for using with âadd-suffix option but without
âoutput-dir option for relative path to files in current directory.

================================================================================

# Changelog - C API

List:
: Document that m_traverse for multi-phase initialized modules
can be called with m_state=NULL, and add a sanity check

: Document that m_traverse for multi-phase initialized modules
can be called with m_state=NULL, and add a sanity check

================================================================================

# Changelog - Tests

List:
: Avoid regrtest compatibility issue with namespace packages.

: Avoid regrtest compatibility issue with namespace packages.

================================================================================

# Changelog - Build

List:
: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

================================================================================

# Changelog - Security

List:
: Minimal fix to prevent buffer overrun in os.symlink on Windows
: Regexes in difflib and poplib were vulnerable to catastrophic
backtracking. These regexes formed potential DOS vectors (REDOS). They
have been refactored. This resolves CVE 2018-1060 and CVE 2018-1061.
Patch by Jamie Davis.

: Minimal fix to prevent buffer overrun in os.symlink on Windows

: Regexes in difflib and poplib were vulnerable to catastrophic
backtracking. These regexes formed potential DOS vectors (REDOS). They
have been refactored. This resolves CVE 2018-1060 and CVE 2018-1061.
Patch by Jamie Davis.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed jumping out of âwithâ block by setting f_lineno.
: Prevent jumps from âreturnâ and âexceptionâ trace events.
: Update Valgrind suppression list to account for the rename of
Py_ADDRESS_IN_RANG to address_in_range.
: Pdb and other debuggers dependent on bdb.py will correctly step
over (next command) native coroutines. Patch by Pablo Galindo.
: Improve suggestion when the Python 2 form of print statement is
either present on the same line as the header of a compound statement or
else terminated by a semi-colon instead of a newline. Patch by Nitish
Chandra.
: Fix possible crashing in builtin Unicode decoders caused by
write out-of-bound errors when using customized decode error handlers.
: Improved frozenset() hash to create more distinct hash values
when faced with datasets containing many similar values.
: The  constant is now optimized out at compile
time. This fixes also .
: sys.flags.hash_randomization is now properly set to 0 when
hash randomization is turned off by PYTHONHASHSEED=0.
: The optimizer is now protected from spending much time doing
complex calculations and consuming much memory for creating large
constants in constant folding.
:  on a dict containing its own  or
 no longer raises RecursionError; OrderedDict similarly.
Instead, use , as for other recursive structures.  Patch by Ben
North.
: Leading whitespace is now correctly ignored when generating
suggestions for converting Py2 print statements to Py3 builtin print
function calls. Patch by Sanyam Khurana.
: The repr of deeply nested dict now raises a RecursionError
instead of crashing due to a stack overflow.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed jumping out of âwithâ block by setting f_lineno.

: Prevent jumps from âreturnâ and âexceptionâ trace events.

: Update Valgrind suppression list to account for the rename of
Py_ADDRESS_IN_RANG to address_in_range.

: Pdb and other debuggers dependent on bdb.py will correctly step
over (next command) native coroutines. Patch by Pablo Galindo.

: Improve suggestion when the Python 2 form of print statement is
either present on the same line as the header of a compound statement or
else terminated by a semi-colon instead of a newline. Patch by Nitish
Chandra.

: Fix possible crashing in builtin Unicode decoders caused by
write out-of-bound errors when using customized decode error handlers.

: Improved frozenset() hash to create more distinct hash values
when faced with datasets containing many similar values.

: The  constant is now optimized out at compile
time. This fixes also .

: sys.flags.hash_randomization is now properly set to 0 when
hash randomization is turned off by PYTHONHASHSEED=0.

: The optimizer is now protected from spending much time doing
complex calculations and consuming much memory for creating large
constants in constant folding.

================================================================================

# Changelog - Core and Builtins (Part 3)

:  on a dict containing its own  or
 no longer raises RecursionError; OrderedDict similarly.
Instead, use , as for other recursive structures.  Patch by Ben
North.

: Leading whitespace is now correctly ignored when generating
suggestions for converting Py2 print statements to Py3 builtin print
function calls. Patch by Sanyam Khurana.

: The repr of deeply nested dict now raises a RecursionError
instead of crashing due to a stack overflow.

================================================================================

# Changelog - Library (Part 1)

List:
: lib2to3 now properly supports trailing commas after 
and  in function signatures.
: Avoid failing in multiprocessing.Process if the standard
streams are closed or None at exit.
: Skip sending/receiving data after SSL transport closing.
: Fix ctypes pass-by-value for structs on 64-bit Cygwin/MinGW.
: Fix inspect.signature() for single-parameter partialmethods.
: Expose several missing constants in zlib and fix corresponding
documentation.
: Fixed tarfile.itn handling of out-of-bounds float values. Patch
by Joffrey Fuhrer.
: The ssl module now detects missing NPN support in LibreSSL.
: dbm.open() now encodes filename with the filesystem encoding
rather than default encoding.
: In , donât check every call whether the 
syscall exists or not.
: Rewrite confusing message from setup.py upload from âNo dist
file created in earlier commandâ to the more helpful âMust create and
upload files in one commandâ.
: In , after_cancel(None) now raises a
ValueError instead of canceling the first scheduled function.
Patch by Cheryl Sabella.
: Make sure sys.argv remains as a list when running trace.
: Fixed asyncio.Condition issue which silently ignored
cancellation after notifying and cancelling a conditional lock. Patch by
Bar Harel.
: Fixed refleaks of __init__() methods in various modules.
(Contributed by Oren Milman)
: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
only the last field is quoted.  Patch by Jake Davis.
: socket: Remove TCP_FASTOPEN, TCP_KEEPCNT flags on older version
Windows during run-time.
: Fix a rare but potential pre-exec child process deadlock in
subprocess on POSIX systems when marking file descriptors inheritable on
exec in the child process.  This bug appears to have been introduced in
3.4.
: The ctypes module used to depend on indirect linking for
dlopen. The shared extension is now explicitly linked against libdl on
platforms with dl.
: Fixed asyncio.Lock() safety issue which allowed acquiring
and locking the same lock multiple times, without it being free. Patch by
Bar Harel.
: Do not include name field in SMTP envelope from address. Patch
by StÃ©phane Wirtel
: Fix email address header parsing error when the username is an
empty quoted string. Patch by Xiang Zhang.
: distutilsâ upload command no longer corrupts tar files ending
with a CR byte, and no longer tries to convert CR to CRLF in any of the
upload text fields.
: uuid.uuid1 no longer raises an exception if a 64-bit hardware
address is encountered.
: Fix the error handling in Aifc_read.initfp() when the SSND
chunk is not found. Patch by Zackery Spytz.
: On FreeBSD and Solaris, os.strerror() now always decode the
byte string from the current locale encoding, rather than using
ASCII/surrogateescape in some cases.
: The nis module is now compatible with new libnsl and headers
location.
: Improve ABCMeta._dump_registry() output readability
: glibc has removed Sun RPC. Use replacement libtirpc headers and
library in nis module.
: Ensure that truncate() preserves the file position (as
reported by ) after writes longer than the buffer size.
: Donât unsubscribe signals in asyncio UNIX event loop on
interpreter shutdown.
: The SSL module no longer sends IP addresses in SNI TLS
extension on platforms with OpenSSL 1.0.2+ or inet_pton.
: urllib.parse.urlsplit() does not convert zone-id (scope)
to lower case for scoped IPv6 addresses in hostnames now.
: Fix bdist_wininst of distutils for CRT v142: it binary
compatible with CRT v140.
: A single empty field is now always quoted when written into a
CSV file. This allows to distinguish an empty row from a row consisting of
a single empty field. Patch by Licht Takeuchi.
: Raise NotImplementedError instead of SystemError on
platforms where chmod(..., follow_symlinks=False) is not supported.
Patch by Anthony Sottile.
: The getnode() ip getter now uses âip linkâ instead of âip link
listâ.
: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.
: The locale.localeconv() function now sets temporarily the
 locale to the LC_NUMERIC locale to decode
decimal_point and thousands_sep byte strings if they are non-ASCII
or longer than 1 byte, and the LC_NUMERIC locale is different than the
 locale. This temporary change affects other threads. Same
change for the str.format() method when formatting a number
(, ,  and subclasses) with the
 type (ex: '{:n}'.format(1234)).
: Importing native path module (, ) now
works even if the  module still is not imported.

================================================================================

# Changelog - Library (Part 2)

: lib2to3 now properly supports trailing commas after 
and  in function signatures.

: Avoid failing in multiprocessing.Process if the standard
streams are closed or None at exit.

: Skip sending/receiving data after SSL transport closing.

: Fix ctypes pass-by-value for structs on 64-bit Cygwin/MinGW.

: Fix inspect.signature() for single-parameter partialmethods.

: Expose several missing constants in zlib and fix corresponding
documentation.

: Fixed tarfile.itn handling of out-of-bounds float values. Patch
by Joffrey Fuhrer.

: The ssl module now detects missing NPN support in LibreSSL.

: dbm.open() now encodes filename with the filesystem encoding
rather than default encoding.

: In , donât check every call whether the 
syscall exists or not.

: Rewrite confusing message from setup.py upload from âNo dist
file created in earlier commandâ to the more helpful âMust create and
upload files in one commandâ.

: In , after_cancel(None) now raises a
ValueError instead of canceling the first scheduled function.
Patch by Cheryl Sabella.

: Make sure sys.argv remains as a list when running trace.

================================================================================

# Changelog - Library (Part 3)

: Fixed asyncio.Condition issue which silently ignored
cancellation after notifying and cancelling a conditional lock. Patch by
Bar Harel.

: Fixed refleaks of __init__() methods in various modules.
(Contributed by Oren Milman)

: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
only the last field is quoted.  Patch by Jake Davis.

: socket: Remove TCP_FASTOPEN, TCP_KEEPCNT flags on older version
Windows during run-time.

: Fix a rare but potential pre-exec child process deadlock in
subprocess on POSIX systems when marking file descriptors inheritable on
exec in the child process.  This bug appears to have been introduced in
3.4.

: The ctypes module used to depend on indirect linking for
dlopen. The shared extension is now explicitly linked against libdl on
platforms with dl.

: Fixed asyncio.Lock() safety issue which allowed acquiring
and locking the same lock multiple times, without it being free. Patch by
Bar Harel.

: Do not include name field in SMTP envelope from address. Patch
by StÃ©phane Wirtel

: Fix email address header parsing error when the username is an
empty quoted string. Patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 4)

: distutilsâ upload command no longer corrupts tar files ending
with a CR byte, and no longer tries to convert CR to CRLF in any of the
upload text fields.

: uuid.uuid1 no longer raises an exception if a 64-bit hardware
address is encountered.

: Fix the error handling in Aifc_read.initfp() when the SSND
chunk is not found. Patch by Zackery Spytz.

: On FreeBSD and Solaris, os.strerror() now always decode the
byte string from the current locale encoding, rather than using
ASCII/surrogateescape in some cases.

: The nis module is now compatible with new libnsl and headers
location.

: Improve ABCMeta._dump_registry() output readability

: glibc has removed Sun RPC. Use replacement libtirpc headers and
library in nis module.

: Ensure that truncate() preserves the file position (as
reported by ) after writes longer than the buffer size.

: Donât unsubscribe signals in asyncio UNIX event loop on
interpreter shutdown.

: The SSL module no longer sends IP addresses in SNI TLS
extension on platforms with OpenSSL 1.0.2+ or inet_pton.

: urllib.parse.urlsplit() does not convert zone-id (scope)
to lower case for scoped IPv6 addresses in hostnames now.

================================================================================

# Changelog - Library (Part 5)

: Fix bdist_wininst of distutils for CRT v142: it binary
compatible with CRT v140.

: A single empty field is now always quoted when written into a
CSV file. This allows to distinguish an empty row from a row consisting of
a single empty field. Patch by Licht Takeuchi.

: Raise NotImplementedError instead of SystemError on
platforms where chmod(..., follow_symlinks=False) is not supported.
Patch by Anthony Sottile.

: The getnode() ip getter now uses âip linkâ instead of âip link
listâ.

: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.

: The locale.localeconv() function now sets temporarily the
 locale to the LC_NUMERIC locale to decode
decimal_point and thousands_sep byte strings if they are non-ASCII
or longer than 1 byte, and the LC_NUMERIC locale is different than the
 locale. This temporary change affects other threads. Same
change for the str.format() method when formatting a number
(, ,  and subclasses) with the
 type (ex: '{:n}'.format(1234)).

: Importing native path module (, ) now
works even if the  module still is not imported.

================================================================================

# Changelog - Documentation

List:
: Clarify docs for -O and -OO.  Patch by Terry Reedy.
: Update link to w3c doc for xml default namespaces.
: Document __getattr__() behavior when property 
method raises AttributeError.
: Modify RE examples in documentation to use raw strings to
prevent DeprecationWarning and add text to REGEX HOWTO to highlight
the deprecation.
: Improve docstrings for pathlib.PurePath subclasses.
: Explain real behaviour of sys.settrace and sys.setprofile and
their C-API counterparts regarding which type of events are received in
each function. Patch by Pablo Galindo Salgado.

: Clarify docs for -O and -OO.  Patch by Terry Reedy.

: Update link to w3c doc for xml default namespaces.

: Document __getattr__() behavior when property 
method raises AttributeError.

: Modify RE examples in documentation to use raw strings to
prevent DeprecationWarning and add text to REGEX HOWTO to highlight
the deprecation.

: Improve docstrings for pathlib.PurePath subclasses.

: Explain real behaviour of sys.settrace and sys.setprofile and
their C-API counterparts regarding which type of events are received in
each function. Patch by Pablo Galindo Salgado.

================================================================================

# Changelog - Tests

List:
: Fix failing test_asyncio on macOS 10.12.2+ due to transport
of KqueueSelector loop was not being closed.
: Fix test_hashlib to not fail if the _md5 module is not built.
: Fix faulthandler_suppress_crash_report() used to prevent core
dump files when testing crashes. getrlimit() returns zero on success.
: Debian Unstable has disabled TLS 1.0 and 1.1 for
SSLv23_METHOD(). Change TLS/SSL protocol of some tests to PROTOCOL_TLS or
PROTOCOL_TLSv1_2 to make them pass on Debian.

: Fix failing test_asyncio on macOS 10.12.2+ due to transport
of KqueueSelector loop was not being closed.

: Fix test_hashlib to not fail if the _md5 module is not built.

: Fix faulthandler_suppress_crash_report() used to prevent core
dump files when testing crashes. getrlimit() returns zero on success.

: Debian Unstable has disabled TLS 1.0 and 1.1 for
SSLv23_METHOD(). Change TLS/SSL protocol of some tests to PROTOCOL_TLS or
PROTOCOL_TLSv1_2 to make them pass on Debian.

================================================================================

# Changelog - Build

List:
: Fix segfault of the crypt module when libxcrypt is provided
instead of libcrypt at the system.

: Fix segfault of the crypt module when libxcrypt is provided
instead of libcrypt at the system.

================================================================================

# Changelog - Windows (Part 1)

List:
: Fix potential use of uninitialized memory in
nt._getfinalpathname
: Fix a memory leak in os.chdir() on Windows if the current
directory is set to a UNC path.
: Fixed WindowsConsoleIO.write() for writing empty data.
: Ensures activate.bat can handle Unicode contents.
: Improves handling of denormalized executable path when
launching Python.
: Use the correct encoding for ipconfig output in the uuid
module. Patch by Segev Finer.
: Fix os.readlink() on Windows, which was mistakenly
treating the PrintNameOffset field of the reparse data buffer as a
number of characters instead of bytes. Patch by Craig Holmquist and SSE4.
: Create standalone _distutils_findvs module.

: Fix potential use of uninitialized memory in
nt._getfinalpathname

: Fix a memory leak in os.chdir() on Windows if the current
directory is set to a UNC path.

: Fixed WindowsConsoleIO.write() for writing empty data.

: Ensures activate.bat can handle Unicode contents.

: Improves handling of denormalized executable path when
launching Python.

: Use the correct encoding for ipconfig output in the uuid
module. Patch by Segev Finer.

================================================================================

# Changelog - Windows (Part 2)

: Fix os.readlink() on Windows, which was mistakenly
treating the PrintNameOffset field of the reparse data buffer as a
number of characters instead of bytes. Patch by Craig Holmquist and SSE4.

: Create standalone _distutils_findvs module.

================================================================================

# Changelog - macOS

List:
: Provide an additional, more modern macOS installer variant that
supports macOS 10.9+ systems in 64-bit mode only. Upgrade the supplied
third-party libraries to OpenSSL 1.0.2n, XZ 5.2.3, and SQLite 3.22.0. The
10.9+ installer now links with and supplies its own copy of Tcl/Tk 8.6.8.

: Provide an additional, more modern macOS installer variant that
supports macOS 10.9+ systems in 64-bit mode only. Upgrade the supplied
third-party libraries to OpenSSL 1.0.2n, XZ 5.2.3, and SQLite 3.22.0. The
10.9+ installer now links with and supplies its own copy of Tcl/Tk 8.6.8.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Set  while running a startup file.  Like Python,
IDLE optionally runs one startup file in the Shell window before
presenting the first interactive input prompt.  For IDLE,  runs a
file named in environmental variable  IDLESTARTUP or
PYTHONSTARTUP;   runs .  Python sets
 to the startup file name before running the file and unsets
it before the first prompt.  IDLE now does the same when run normally,
without the  option.
: Simplify and rename StringTranslatePseudoMapping in pyparse.
: Change  to  in pyparse.
: Remove unused code in pyparse module.
: Add tests for pyparse.
: Using the system and place-dependent default encoding for
open() is a bad idea for IDLEâs system and location-independent files.
: Add âencoding=utf-8â to open() in IDLEâs test_help_about. GUI
test test_file_buttons() only looks at initial ascii-only lines, but
failed on systems where open() defaults to âasciiâ because readline()
internally reads and decodes far enough ahead to encounter a non-ascii
character in CREDITS.txt.
: Update configdialog General tab docstring to add new widgets to
the widget list.

================================================================================

# Changelog - IDLE (Part 2)

: Set  while running a startup file.  Like Python,
IDLE optionally runs one startup file in the Shell window before
presenting the first interactive input prompt.  For IDLE,  runs a
file named in environmental variable  IDLESTARTUP or
PYTHONSTARTUP;   runs .  Python sets
 to the startup file name before running the file and unsets
it before the first prompt.  IDLE now does the same when run normally,
without the  option.

: Simplify and rename StringTranslatePseudoMapping in pyparse.

: Change  to  in pyparse.

: Remove unused code in pyparse module.

: Add tests for pyparse.

: Using the system and place-dependent default encoding for
open() is a bad idea for IDLEâs system and location-independent files.

: Add âencoding=utf-8â to open() in IDLEâs test_help_about. GUI
test test_file_buttons() only looks at initial ascii-only lines, but
failed on systems where open() defaults to âasciiâ because readline()
internally reads and decodes far enough ahead to encounter a non-ascii
character in CREDITS.txt.

: Update configdialog General tab docstring to add new widgets to
the widget list.

================================================================================

# Changelog - Tools/Demos

List:
: 2to3 and lib2to3 can now read pickled grammar files using
pkgutil.get_data() rather than probing the filesystem. This lets 2to3 and
lib2to3 work when run from a zipfile.
: Fix pygettext not extracting docstrings for functions with type
annotated arguments. Patch by Toby Harradine.

: 2to3 and lib2to3 can now read pickled grammar files using
pkgutil.get_data() rather than probing the filesystem. This lets 2to3 and
lib2to3 work when run from a zipfile.

: Fix pygettext not extracting docstrings for functions with type
annotated arguments. Patch by Toby Harradine.

================================================================================

# Changelog - C API

List:
: Undocumented C API for OrderedDict has been excluded from the
limited C API. It was added by mistake and actually never worked in the
limited C API.

: Undocumented C API for OrderedDict has been excluded from the
limited C API. It was added by mistake and actually never worked in the
limited C API.

================================================================================

# Changelog - Python 3.6.4 final

Release date: 2017-12-18

There were no new code changes in version 3.6.4 since v3.6.4rc1.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: co_flags.CO_NOFREE is now always set correctly by the code
object constructor based on freevars and cellvars, rather than needing to
be set correctly by the caller. This ensures it will be cleared
automatically when additional cell references are injected into a modified
code object and function.
: Fixed several issues in printing tracebacks
(PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now
suppresses printing tracebacks. Setting sys.tracebacklimit to None now
causes using the default limit. Setting sys.tracebacklimit to an integer
larger than LONG_MAX now means using the limit LONG_MAX rather than the
default limit. Fixed integer overflows in the case of more than 
traceback items on Windows. Fixed output errors handling.
: Fix the interactive interpreter looping endlessly when no
memory.
: Bytearray methods partition() and rpartition() now accept only
bytes-like objects as separator, as documented.  In particular they now
raise TypeError rather of returning a bogus result when an integer is
passed as a separator.
: Fix a segmentation fault caused by a combination of the async
soft keyword and continuation lines.
: BytesWarning no longer emitted when the  argument of
__import__() or the  attribute of the module contain bytes
instances.
: Fixed OverflowError in the âunicode-escapeâ codec and in
codecs.escape_decode() when decode an escaped non-ascii byte.
: Print the full context/cause chain of exceptions on interpreter
exit, even if an exception in the chain is unhashable or compares equal to
later ones. Patch by Zane Bitter.
: Fix timeout rounding in the select module to round correctly
negative timeouts between -1.0 and 0.0. The functions now block waiting
for events as expected. Previously, the call was incorrectly non-blocking.
Patch by Pablo Galindo.
: Restored blocking âfrom package import moduleâ by setting
sys.modules[âpackage.moduleâ] to None.
: Fixed a bug in debug memory allocator.  There was a write to
freed memory after shrinking a memory block.
: Fixed a ValueError when convert a string with large number of
underscores to integer with binary base.
: Fixed an assertion failure in Python parser in case of a bad
unicodedata.normalize(). Patch by Oren Milman.
: Raise a  with a helpful error message when class
creation fails due to a metaclass with a bad __prepare__() method.
Patch by Oren Milman.
: Fix an assertion failure in _warnings.warn() in case of a
bad  global. Patch by Oren Milman.
: Fix an assertion failure in , in case
_json.make_encoder() received a bad  argument. Patch by
Oren Milman.
: Fix assertion failures in case of failing to import from a
module with a bad  attribute, and in case of failing to access
an attribute of such a module. Patch by Oren Milman.
: Fix an assertion failure in  class definition, in
case the class has an attribute whose name is specified in _anonymous_
but not in . Patch by Oren Milman.
: Fix an assertion failure in _random.Random.seed() in case
the argument has a bad  method. Patch by Oren Milman.
: Fix an assertion failure in imp.create_dynamic(), when
spec.name is not a string. Patch by Oren Milman.
: Fix a crash in the __setstate__() method of
ctypes._CData, in case of a bad . Patch by Oren Milman.
: Fix crashes in true division and multiplication of a timedelta
object by a float with a bad as_integer_ratio() method. Patch by Oren
Milman.
: Fix an assertion failure in warnings.warn_explicit, when
the return value of the received loaderâs get_source() has a bad
splitlines() method. Patch by Oren Milman.
: PyErr_PrintEx() clears now the ignored exception that may
be raised by _PySys_SetObjectId(), for example when no memory.

================================================================================

# Changelog - Core and Builtins (Part 2)

: co_flags.CO_NOFREE is now always set correctly by the code
object constructor based on freevars and cellvars, rather than needing to
be set correctly by the caller. This ensures it will be cleared
automatically when additional cell references are injected into a modified
code object and function.

: Fixed several issues in printing tracebacks
(PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now
suppresses printing tracebacks. Setting sys.tracebacklimit to None now
causes using the default limit. Setting sys.tracebacklimit to an integer
larger than LONG_MAX now means using the limit LONG_MAX rather than the
default limit. Fixed integer overflows in the case of more than 
traceback items on Windows. Fixed output errors handling.

: Fix the interactive interpreter looping endlessly when no
memory.

: Bytearray methods partition() and rpartition() now accept only
bytes-like objects as separator, as documented.  In particular they now
raise TypeError rather of returning a bogus result when an integer is
passed as a separator.

: Fix a segmentation fault caused by a combination of the async
soft keyword and continuation lines.

================================================================================

# Changelog - Core and Builtins (Part 3)

: BytesWarning no longer emitted when the  argument of
__import__() or the  attribute of the module contain bytes
instances.

: Fixed OverflowError in the âunicode-escapeâ codec and in
codecs.escape_decode() when decode an escaped non-ascii byte.

: Print the full context/cause chain of exceptions on interpreter
exit, even if an exception in the chain is unhashable or compares equal to
later ones. Patch by Zane Bitter.

: Fix timeout rounding in the select module to round correctly
negative timeouts between -1.0 and 0.0. The functions now block waiting
for events as expected. Previously, the call was incorrectly non-blocking.
Patch by Pablo Galindo.

: Restored blocking âfrom package import moduleâ by setting
sys.modules[âpackage.moduleâ] to None.

: Fixed a bug in debug memory allocator.  There was a write to
freed memory after shrinking a memory block.

: Fixed a ValueError when convert a string with large number of
underscores to integer with binary base.

: Fixed an assertion failure in Python parser in case of a bad
unicodedata.normalize(). Patch by Oren Milman.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Raise a  with a helpful error message when class
creation fails due to a metaclass with a bad __prepare__() method.
Patch by Oren Milman.

: Fix an assertion failure in _warnings.warn() in case of a
bad  global. Patch by Oren Milman.

: Fix an assertion failure in , in case
_json.make_encoder() received a bad  argument. Patch by
Oren Milman.

: Fix assertion failures in case of failing to import from a
module with a bad  attribute, and in case of failing to access
an attribute of such a module. Patch by Oren Milman.

: Fix an assertion failure in  class definition, in
case the class has an attribute whose name is specified in _anonymous_
but not in . Patch by Oren Milman.

: Fix an assertion failure in _random.Random.seed() in case
the argument has a bad  method. Patch by Oren Milman.

: Fix an assertion failure in imp.create_dynamic(), when
spec.name is not a string. Patch by Oren Milman.

: Fix a crash in the __setstate__() method of
ctypes._CData, in case of a bad . Patch by Oren Milman.

: Fix crashes in true division and multiplication of a timedelta
object by a float with a bad as_integer_ratio() method. Patch by Oren
Milman.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Fix an assertion failure in warnings.warn_explicit, when
the return value of the received loaderâs get_source() has a bad
splitlines() method. Patch by Oren Milman.

: PyErr_PrintEx() clears now the ignored exception that may
be raised by _PySys_SetObjectId(), for example when no memory.

================================================================================

# Changelog - Library (Part 1)

List:
: Two minor fixes for  module: allow shallow copying
instances of generic classes, improve interaction of __init_subclass__
with generics. Original PRs by Ivan Levkivskyi.
: The header folding algorithm for the new email policies has
been rewritten, which also fixes , , and .  In
particular, RFC2231 folding is now done correctly.
: io.FileIO.readall() and io.FileIO.read() now release the GIL
when getting the file size. Fixed hang of all threads with inaccessible
NFS server. Patch by Nir Soffer.
: Make msilib.SummaryInformation.GetProperty() return
 when the value of property is .  Initial patch by
Mark Mc Mahon.
: Fix wrong usage of collections.namedtuple() in the
RobotFileParser.parse()
method. Initial patch by Robin Wellner.
: msilib.OpenDatabase() now raises a better exception
message when it couldnât open or create an MSI file.  Initial patch by
William TisÃ¤ter.
: codecs.StreamReader.read(n) now returns not more than 
characters/bytes for non-negative . This makes it compatible with
 methods of other file-like objects.
: Fixed issues with binary plists: Fixed saving bytearrays.
Identical objects will be saved only once. Equal references will be load
as identical objects. Added support for saving and loading recursive data
structures.
: Make asyncio.IncompleteReadError and LimitOverrunError
pickleable.
: Fixed the looping of asyncio in the case of reconnection the
socket during waiting async read/write from/to the socket.
: Restored support of loading marshal files with the TYPE_INT64
code. These files can be produced in Python 2.7.
: Reduce performance overhead of asyncio debug mode.
: Fixed determining the MAC address in the uuid module: Using
ifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and
OpenBSD. Based on patch by Takayuki Shimizukawa.
: Fix potential missed signal in signal.signal().
: Fix Blake2 params leaf_size and node_offset on big endian
platforms. Patch by Jack OâConnor.
: Fixed compilation of the socket module on NetBSD 8.  Fixed
assertion failure or reading arbitrary data when parse a AF_BLUETOOTH
address on NetBSD and DragonFly BSD.
: Fixed stack corruption in curses.box() and curses.ungetmouse()
when the size of types chtype or mmask_t is less than the size of C long.
curses.box() now accepts characters as arguments.  Based on patch by Steve
Fink.
: plistlib now catches more errors when read binary plists and
raises InvalidFileException instead of unexpected exceptions.
: Fix the method for checking pad state of curses WINDOW. Patch
by Masayuki Yamamoto.
: Fixed the layout of the kqueue_event structure on OpenBSD and
NetBSD. Fixed the comparison of the kqueue_event objects.
: Fixed building the curses module on NetBSD.
: Instances of pickle.Pickler subclass with the persistent_id()
method and pickle.Unpickler subclass with the persistent_load() method no
longer create reference cycles.
: Fix multiprocessing.Process when stdout and/or stderr is closed
or None.
: If nested log adapters are used, the inner 
methods are no longer omitted.
: The  property on LoggerAdapter objects is now
properly settable.
: Fix timeout rounding in time.sleep(), threading.Lock.acquire()
and socket.socket.settimeout() to round correctly negative timeouts
between -1.0 and 0.0. The functions now block waiting for events as
expected. Previously, the call was incorrectly non-blocking. Patch by
Pablo Galindo.
: traceback: Fix a TypeError that occurred during printing of
exception tracebacks when either the current exception or an exception in
its context/cause chain is unhashable. Patch by Zane Bitter.
: Fixed buffer overflow in select.kqueue.control().
: Prevent a crash when calling the __init__() method of a
sqlite3.Cursor object more than once. Patch by Oren Milman.
:  in string.Template matched some non-ASCII
characters. Now it uses  regular expression local flag to avoid
non-ASCII characters.
: Prevent a crash in sqlite3.Cursor.close() in case the
 object is uninitialized. Patch by Oren Milman.
: Fix possible crash in timedelta constructor called with custom
integers.
: On Windows, faulthandler.enable() now ignores MSC and COM
exceptions.
: Prevent crashes in _elementtree due to unsafe cleanup of
Element.text and Element.tail. Patch by Oren Milman.
: an empty asyncio.Queue now doesnât leak memory when queue.get
pollers timeout
: Fix method set_protocol() of class _SSLProtocolTransport in
asyncio module. This method was previously modifying a wrong reference to
the protocol.
: Fixed memory leaks in Tkinterâs methods splitlist() and split()
when pass a string larger than 2 GiB.
: Fixed typo in the name of Tkinterâs method adderrorinfo().
: Fix the string representation of a netrc object.
: Added a workaround for getkey() in curses for ncurses 5.7 and
earlier.
: Avoid venv activate failures with undefined variables
: inspect.unwrap() will now only try to unwrap an object
sys.getrecursionlimit() times, to protect against objects which create a
new object on every attribute access.
: Stop crashes when concurrently iterate over itertools.groupby()
iterators.
: threading.current_thread() should not return a dummy thread
at shutdown.
: python -m ensurepip now exits with non-zero exit code if pip
bootstrapping has failed.
: random.seed() now works with bytes in version=1
: Fix poll.poll([timeout]) in the  module for
arbitrary negative timeouts on all OSes where it can only be a
non-negative integer or -1. Patch by Riccardo Coccioli.
: multiprocessingâs semaphore tracker should be launched again if
crashed.
: Make multiprocessingâs forkserver process immune to Ctrl-C and
other user interruptions. If it crashes, restart it when necessary.

================================================================================

# Changelog - Library (Part 2)

: Two minor fixes for  module: allow shallow copying
instances of generic classes, improve interaction of __init_subclass__
with generics. Original PRs by Ivan Levkivskyi.

: The header folding algorithm for the new email policies has
been rewritten, which also fixes , , and .  In
particular, RFC2231 folding is now done correctly.

: io.FileIO.readall() and io.FileIO.read() now release the GIL
when getting the file size. Fixed hang of all threads with inaccessible
NFS server. Patch by Nir Soffer.

: Make msilib.SummaryInformation.GetProperty() return
 when the value of property is .  Initial patch by
Mark Mc Mahon.

: Fix wrong usage of collections.namedtuple() in the
RobotFileParser.parse()
method. Initial patch by Robin Wellner.

: msilib.OpenDatabase() now raises a better exception
message when it couldnât open or create an MSI file.  Initial patch by
William TisÃ¤ter.

: codecs.StreamReader.read(n) now returns not more than 
characters/bytes for non-negative . This makes it compatible with
 methods of other file-like objects.

================================================================================

# Changelog - Library (Part 3)

: Fixed issues with binary plists: Fixed saving bytearrays.
Identical objects will be saved only once. Equal references will be load
as identical objects. Added support for saving and loading recursive data
structures.

: Make asyncio.IncompleteReadError and LimitOverrunError
pickleable.

: Fixed the looping of asyncio in the case of reconnection the
socket during waiting async read/write from/to the socket.

: Restored support of loading marshal files with the TYPE_INT64
code. These files can be produced in Python 2.7.

: Reduce performance overhead of asyncio debug mode.

: Fixed determining the MAC address in the uuid module: Using
ifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and
OpenBSD. Based on patch by Takayuki Shimizukawa.

: Fix potential missed signal in signal.signal().

: Fix Blake2 params leaf_size and node_offset on big endian
platforms. Patch by Jack OâConnor.

: Fixed compilation of the socket module on NetBSD 8.  Fixed
assertion failure or reading arbitrary data when parse a AF_BLUETOOTH
address on NetBSD and DragonFly BSD.

================================================================================

# Changelog - Library (Part 4)

: Fixed stack corruption in curses.box() and curses.ungetmouse()
when the size of types chtype or mmask_t is less than the size of C long.
curses.box() now accepts characters as arguments.  Based on patch by Steve
Fink.

: plistlib now catches more errors when read binary plists and
raises InvalidFileException instead of unexpected exceptions.

: Fix the method for checking pad state of curses WINDOW. Patch
by Masayuki Yamamoto.

: Fixed the layout of the kqueue_event structure on OpenBSD and
NetBSD. Fixed the comparison of the kqueue_event objects.

: Fixed building the curses module on NetBSD.

: Instances of pickle.Pickler subclass with the persistent_id()
method and pickle.Unpickler subclass with the persistent_load() method no
longer create reference cycles.

: Fix multiprocessing.Process when stdout and/or stderr is closed
or None.

: If nested log adapters are used, the inner 
methods are no longer omitted.

: The  property on LoggerAdapter objects is now
properly settable.

================================================================================

# Changelog - Library (Part 5)

: Fix timeout rounding in time.sleep(), threading.Lock.acquire()
and socket.socket.settimeout() to round correctly negative timeouts
between -1.0 and 0.0. The functions now block waiting for events as
expected. Previously, the call was incorrectly non-blocking. Patch by
Pablo Galindo.

: traceback: Fix a TypeError that occurred during printing of
exception tracebacks when either the current exception or an exception in
its context/cause chain is unhashable. Patch by Zane Bitter.

: Fixed buffer overflow in select.kqueue.control().

: Prevent a crash when calling the __init__() method of a
sqlite3.Cursor object more than once. Patch by Oren Milman.

:  in string.Template matched some non-ASCII
characters. Now it uses  regular expression local flag to avoid
non-ASCII characters.

: Prevent a crash in sqlite3.Cursor.close() in case the
 object is uninitialized. Patch by Oren Milman.

: Fix possible crash in timedelta constructor called with custom
integers.

: On Windows, faulthandler.enable() now ignores MSC and COM
exceptions.

: Prevent crashes in _elementtree due to unsafe cleanup of
Element.text and Element.tail. Patch by Oren Milman.

================================================================================

# Changelog - Library (Part 6)

: an empty asyncio.Queue now doesnât leak memory when queue.get
pollers timeout

: Fix method set_protocol() of class _SSLProtocolTransport in
asyncio module. This method was previously modifying a wrong reference to
the protocol.

: Fixed memory leaks in Tkinterâs methods splitlist() and split()
when pass a string larger than 2 GiB.

: Fixed typo in the name of Tkinterâs method adderrorinfo().

: Fix the string representation of a netrc object.

: Added a workaround for getkey() in curses for ncurses 5.7 and
earlier.

: Avoid venv activate failures with undefined variables

: inspect.unwrap() will now only try to unwrap an object
sys.getrecursionlimit() times, to protect against objects which create a
new object on every attribute access.

: Stop crashes when concurrently iterate over itertools.groupby()
iterators.

: threading.current_thread() should not return a dummy thread
at shutdown.

: python -m ensurepip now exits with non-zero exit code if pip
bootstrapping has failed.

: random.seed() now works with bytes in version=1

: Fix poll.poll([timeout]) in the  module for
arbitrary negative timeouts on all OSes where it can only be a
non-negative integer or -1. Patch by Riccardo Coccioli.

================================================================================

# Changelog - Library (Part 7)

: multiprocessingâs semaphore tracker should be launched again if
crashed.

: Make multiprocessingâs forkserver process immune to Ctrl-C and
other user interruptions. If it crashes, restart it when necessary.

================================================================================

# Changelog - Documentation

List:
: Added asyncio.BaseEventLoop.connect_accepted_socket
versionadded marker.
: Fix incorrect usage of get_history_length in readline
documentation example code. Patch by Brad Smith.
: The operator functions without double underscores are preferred
for clarity. The one with underscores are only kept for
back-compatibility.

: Added asyncio.BaseEventLoop.connect_accepted_socket
versionadded marker.

: Fix incorrect usage of get_history_length in readline
documentation example code. Patch by Brad Smith.

: The operator functions without double underscores are preferred
for clarity. The one with underscores are only kept for
back-compatibility.

================================================================================

# Changelog - Tests

List:
: Skip test_httpservers test_undecodable_file on macOS: fails on
APFS.
: Skip test_socket.test_sha256() on Linux kernel older than 4.5.
The test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged
into the kernel 4.5.
: Fix test_tools.test_unparse: DirectoryTestCase now stores the
names sample to always test the same files. It prevents false alarms when
hunting reference leaks.
: Add the set_nomemory(start,  and
remove_mem_hooks() functions to the  module.

: Skip test_httpservers test_undecodable_file on macOS: fails on
APFS.

: Skip test_socket.test_sha256() on Linux kernel older than 4.5.
The test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged
into the kernel 4.5.

: Fix test_tools.test_unparse: DirectoryTestCase now stores the
names sample to always test the same files. It prevents false alarms when
hunting reference leaks.

: Add the set_nomemory(start,  and
remove_mem_hooks() functions to the  module.

================================================================================

# Changelog - Build

List:
: detect_modules() in  now also searches the
sysroot paths when cross-compiling.
: Fixes Windows SDK version detection when building for Windows.
: Fixes quotes in PCbuild/clean.bat
: Abort the build when building out of a not clean source tree.
: Fixed Argument Clinic sometimes causing compilation errors when
there was more than one function and/or method in a .c file with the same
name.
: Update Windows builds to use SQLite 3.21.0.
: Update OS X installer to use SQLite 3.21.0.
: Prevent double substitution of prefix in python-config.sh.
: Avoid wholesale rebuild after   if nothing
changed.

: detect_modules() in  now also searches the
sysroot paths when cross-compiling.

: Fixes Windows SDK version detection when building for Windows.

: Fixes quotes in PCbuild/clean.bat

: Abort the build when building out of a not clean source tree.

: Fixed Argument Clinic sometimes causing compilation errors when
there was more than one function and/or method in a .c file with the same
name.

: Update Windows builds to use SQLite 3.21.0.

: Update OS X installer to use SQLite 3.21.0.

: Prevent double substitution of prefix in python-config.sh.

: Avoid wholesale rebuild after   if nothing
changed.

================================================================================

# Changelog - Windows

List:
: Return  when View.Fetch() returns
ERROR_NO_MORE_ITEMS instead of raising . Initial patch by
Anthony Tuininga.
: Fixes Modify button in Apps and Features dialog.

: Return  when View.Fetch() returns
ERROR_NO_MORE_ITEMS instead of raising . Initial patch by
Anthony Tuininga.

: Fixes Modify button in Apps and Features dialog.

================================================================================

# Changelog - macOS

List:
: Update macOS installer to use OpenSSL 1.0.2m

: Update macOS installer to use OpenSSL 1.0.2m

================================================================================

# Changelog - IDLE (Part 1)

List:
: Improve tk event exception tracebacks in IDLE. When tk event
handling is driven by IDLEâs run loop, a confusing and distracting
queue.EMPTY traceback context is no longer added to tk event exception
tracebacks.  The traceback is now the same as when event handling is
driven by user code.  Patch based on a suggestion by Serhiy Storchaka.
: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet
in configdialog was replaced by ttk.Notebook.
: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch
mostly by Cheryl Sabella.
: IDLE â Restrict shell prompt manipulation to the shell. Editor
and output windows only see an empty last prompt line.  This simplifies
the code and fixes a minor bug when newline is inserted. Sys.ps1, if
present, is read on Shell start-up, but is not set or changed.
: The font sample in the IDLE configuration dialog is now
editable. Changes persist while IDLE remains open
: Test_code_module now passes if run after test_idle, which sets
ps1. The code module uses sys.ps1 if present or sets it to â>>> â if not.
Test_code_module now properly tests both behaviors.  Ditto for ps2.
: Fix a TypeError that caused a shell restart when printing a
traceback that includes an exception that is unhashable. Patch by Zane
Bitter.
: Use non-Latin characters in the IDLEâs Font settings sample.
Even if one selects a font that defines a limited subset of the unicode
Basic Multilingual Plane, tcl/tk will use other fonts that define a
character. The expanded example give users of non-Latin characters a
better idea of what they might see in IDLEâs shell and editors. To make
room for the expanded sample, frames on the Font tab are re-arranged. The
Font/Tabs help explains a bit about the additions.
: Simplify the API of IDLEâs Module Browser. Passing a widget
instead of an flist with a root widget opens the option of creating a
browser frame that is only part of a window.  Passing a full file name
instead of pieces assumed to come from a .py file opens the possibility of
browsing python files that do not end in .py.
: IDLE - Make _htest, _utest parameters keyword only.
: Remove test order dependence in idle_test.test_browser.
: Rename IDLEâs module browser from Class Browser to Module
Browser. The original module-level class and method browser became a
module browser, with the addition of module-level functions, years ago.
Nested classes and functions were added yesterday.  For
back-compatibility, the virtual event <<open-class-browser>>, which
appears on the Keys tab of the Settings dialog, is not changed. Patch by
Cheryl Sabella.
: Default fonts now are scaled on HiDPI displays.
bpo-1612262: IDLE module browser now shows nested classes and functions.
Original patches for code and tests by Guilherme Polo and Cheryl Sabella,
respectively.

================================================================================

# Changelog - IDLE (Part 2)

: Improve tk event exception tracebacks in IDLE. When tk event
handling is driven by IDLEâs run loop, a confusing and distracting
queue.EMPTY traceback context is no longer added to tk event exception
tracebacks.  The traceback is now the same as when event handling is
driven by user code.  Patch based on a suggestion by Serhiy Storchaka.

: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet
in configdialog was replaced by ttk.Notebook.

: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch
mostly by Cheryl Sabella.

: IDLE â Restrict shell prompt manipulation to the shell. Editor
and output windows only see an empty last prompt line.  This simplifies
the code and fixes a minor bug when newline is inserted. Sys.ps1, if
present, is read on Shell start-up, but is not set or changed.

: The font sample in the IDLE configuration dialog is now
editable. Changes persist while IDLE remains open

: Test_code_module now passes if run after test_idle, which sets
ps1. The code module uses sys.ps1 if present or sets it to â>>> â if not.
Test_code_module now properly tests both behaviors.  Ditto for ps2.

================================================================================

# Changelog - IDLE (Part 3)

: Fix a TypeError that caused a shell restart when printing a
traceback that includes an exception that is unhashable. Patch by Zane
Bitter.

: Use non-Latin characters in the IDLEâs Font settings sample.
Even if one selects a font that defines a limited subset of the unicode
Basic Multilingual Plane, tcl/tk will use other fonts that define a
character. The expanded example give users of non-Latin characters a
better idea of what they might see in IDLEâs shell and editors. To make
room for the expanded sample, frames on the Font tab are re-arranged. The
Font/Tabs help explains a bit about the additions.

: Simplify the API of IDLEâs Module Browser. Passing a widget
instead of an flist with a root widget opens the option of creating a
browser frame that is only part of a window.  Passing a full file name
instead of pieces assumed to come from a .py file opens the possibility of
browsing python files that do not end in .py.

: IDLE - Make _htest, _utest parameters keyword only.

: Remove test order dependence in idle_test.test_browser.

================================================================================

# Changelog - IDLE (Part 4)

: Rename IDLEâs module browser from Class Browser to Module
Browser. The original module-level class and method browser became a
module browser, with the addition of module-level functions, years ago.
Nested classes and functions were added yesterday.  For
back-compatibility, the virtual event <<open-class-browser>>, which
appears on the Keys tab of the Settings dialog, is not changed. Patch by
Cheryl Sabella.

: Default fonts now are scaled on HiDPI displays.

bpo-1612262: IDLE module browser now shows nested classes and functions.
Original patches for code and tests by Guilherme Polo and Cheryl Sabella,
respectively.

================================================================================

# Changelog - Tools/Demos

List:
: Make redemo work with Python 3.6 and newer versions. Also,
remove the  option since it doesnât work with string patterns in
Python 3. Patch by Christoph Sarnowski.

: Make redemo work with Python 3.6 and newer versions. Also,
remove the  option since it doesnât work with string patterns in
Python 3. Patch by Christoph Sarnowski.

================================================================================

# Changelog - C API

List:
: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in
a non-Python thread before PyEval_InitThreads(), only call
PyEval_InitThreads() after calling PyThreadState_New() to fix a crash.
: Fix memory corruption due to allocator mix in getpath.c between
Py_GetPath() and Py_SetPath()
: The PyExc_RecursionErrorInst singleton is removed and
PyErr_NormalizeException() does not use it anymore. This singleton is
persistent and its members being never cleared may cause a segfault during
finalization of the interpreter. See also .

: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in
a non-Python thread before PyEval_InitThreads(), only call
PyEval_InitThreads() after calling PyThreadState_New() to fix a crash.

: Fix memory corruption due to allocator mix in getpath.c between
Py_GetPath() and Py_SetPath()

: The PyExc_RecursionErrorInst singleton is removed and
PyErr_NormalizeException() does not use it anymore. This singleton is
persistent and its members being never cleared may cause a segfault during
finalization of the interpreter. See also .

================================================================================

# Changelog - Library

List:
: Re-allow arbitrary iterables in
concurrent.futures.as_completed(). Fixes regression in 3.6.3rc1.

: Re-allow arbitrary iterables in
concurrent.futures.as_completed(). Fixes regression in 3.6.3rc1.

================================================================================

# Changelog - Build

List:
: Fix typos in Windows uploadrelease.bat script. Fix Windows
Doc build issues in Doc/make.bat.
: Fix building the PDF documentation with newer versions of
Sphinx.

: Fix typos in Windows uploadrelease.bat script. Fix Windows
Doc build issues in Doc/make.bat.

: Fix building the PDF documentation with newer versions of
Sphinx.

================================================================================

# Changelog - Security

List:
: SSLObject.version() now correctly returns None when handshake
over BIO has not been performed yet.
: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
get security fixes.

: SSLObject.version() now correctly returns None when handshake
over BIO has not been performed yet.

: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
get security fixes.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix an assertion failure in subprocess.Popen() on Windows,
in case the env argument has a bad  method. Patch by Oren
Milman.
: Fix an assertion failure in PyErr_WriteUnraisable() in case
of an exception with a bad __module__ attribute. Patch by Oren Milman.
: Fix assertion failures in case of a bad warnings.filters or
warnings.defaultaction. Patch by Oren Milman.
: Raise a TypeError instead of SystemError in case
warnings.onceregistry is not a dictionary. Patch by Oren Milman.
: Fix several possible instances of undefined behavior due to
floating-point demotions.
: Location information ( and col_offset) in
f-strings is now (mostly) correct.  This fixes tools like flake8 from
showing warnings on the wrong line (typically the first line of the file).
: Include sys/sysmacros.h for major(), minor(), and makedev().
GNU C libray plans to remove the functions from sys/types.h.
: Fix an assertion failure in zipimport.zipimporter.get_data
on Windows, when the return value of pathname.replace('/','\\') isnât
a string. Patch by Oren Milman.
: Fix an assertion failure in the  method of
io.TextIOWrapper, when the encoder doesnât return a bytes object.
Patch by Oren Milman.
: Fix a crash in some methods of io.TextIOWrapper, when the
decoderâs state is invalid. Patch by Oren Milman.
:  now shows correct usage hint for using Python 2
redirection syntax.  Patch by Sanyam Khurana.
: Fix a race condition in importlib _get_module_lock().
: Fix potential crash during GC caused by tp_dealloc which
doesnât call PyObject_GC_UnTrack().
: Avoid masking original TypeError in call with * unpacking when
other arguments are passed.
: str.format_map() now passes key lookup exceptions through.
Previously any exception was replaced with a KeyError exception.
: Use _Py_atomic API for concurrency-sensitive signal state.
: Relative import from unloaded package now reimports the package
instead of failing with SystemError.  Relative import from non-package now
fails with ImportError rather than SystemError.
: Improve signal delivery. Avoid using Py_AddPendingCall from
signal handler, to avoid calling signal-unsafe functions. The tests Iâm
adding here fail without the rest of the patch, on Linux and OS X. This
means our signal delivery logic had defects (some signals could be lost).
: Avoid blocking in pthread_mutex_lock() when
PyThread_acquire_lock() is asked not to block.
: Make sure the âMissing parenthesesâ syntax error message is
only applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.
: Fixed a race condition when import a submodule from a package.
:  now shows expected input in custom error message when
used as a Python 2 statement. Patch by Sanyam Khurana.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix an assertion failure in subprocess.Popen() on Windows,
in case the env argument has a bad  method. Patch by Oren
Milman.

: Fix an assertion failure in PyErr_WriteUnraisable() in case
of an exception with a bad __module__ attribute. Patch by Oren Milman.

: Fix assertion failures in case of a bad warnings.filters or
warnings.defaultaction. Patch by Oren Milman.

: Raise a TypeError instead of SystemError in case
warnings.onceregistry is not a dictionary. Patch by Oren Milman.

: Fix several possible instances of undefined behavior due to
floating-point demotions.

: Location information ( and col_offset) in
f-strings is now (mostly) correct.  This fixes tools like flake8 from
showing warnings on the wrong line (typically the first line of the file).

: Include sys/sysmacros.h for major(), minor(), and makedev().
GNU C libray plans to remove the functions from sys/types.h.

: Fix an assertion failure in zipimport.zipimporter.get_data
on Windows, when the return value of pathname.replace('/','\\') isnât
a string. Patch by Oren Milman.

: Fix an assertion failure in the  method of
io.TextIOWrapper, when the encoder doesnât return a bytes object.
Patch by Oren Milman.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix a crash in some methods of io.TextIOWrapper, when the
decoderâs state is invalid. Patch by Oren Milman.

:  now shows correct usage hint for using Python 2
redirection syntax.  Patch by Sanyam Khurana.

: Fix a race condition in importlib _get_module_lock().

: Fix potential crash during GC caused by tp_dealloc which
doesnât call PyObject_GC_UnTrack().

: Avoid masking original TypeError in call with * unpacking when
other arguments are passed.

: str.format_map() now passes key lookup exceptions through.
Previously any exception was replaced with a KeyError exception.

: Use _Py_atomic API for concurrency-sensitive signal state.

: Relative import from unloaded package now reimports the package
instead of failing with SystemError.  Relative import from non-package now
fails with ImportError rather than SystemError.

: Improve signal delivery. Avoid using Py_AddPendingCall from
signal handler, to avoid calling signal-unsafe functions. The tests Iâm
adding here fail without the rest of the patch, on Linux and OS X. This
means our signal delivery logic had defects (some signals could be lost).

: Avoid blocking in pthread_mutex_lock() when
PyThread_acquire_lock() is asked not to block.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Make sure the âMissing parenthesesâ syntax error message is
only applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.

: Fixed a race condition when import a submodule from a package.

:  now shows expected input in custom error message when
used as a Python 2 statement. Patch by Sanyam Khurana.

================================================================================

# Changelog - Library (Part 1)

List:
: xml.etree: Fix a crash when a parser is part of a reference
cycle.
: typing.get_type_hints now finds the right globalns for classes
and modules by default (when no  was specified by the caller).
: Speed improvements to the  module.  Original PRs by
Ivan Levkivskyi and Mitar.
: The C accelerator module of ElementTree ignored exceptions
raised when looking up TreeBuilder target methods in XMLParser().
: socket.create_connection() now fixes manually a reference
cycle: clear the variable storing the last exception on success.
: LoggerAdapter objects can now be nested.
: Improves SSL error handling to avoid losing error numbers.
: ssl.SSLContext() now uses OpenSSL error information when a
context cannot be instantiated.
: SSLSocket.sendall() now uses memoryview to create slices of
data. This fixes support for all bytes-like object. It is also more
efficient and avoids costly copies.
: Fix string concatenation bug in rare error path in the
subprocess module
: Micro-optimize asyncio._get_running_loop() to become up
to 10% faster.
: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
partial characters for UTF-8 input (libexpat bug 115):
https://github.com/libexpat/libexpat/issues/115
: Add TLS 1.3 cipher suites and OP_NO_TLSv1_3.
: Fix concurrent.futures.thread.ThreadPoolExecutor threads to
have a non repr() based thread name by default when no thread_name_prefix
is supplied. They will now identify themselves as
âThreadPoolExecutor-y_nâ.
: Fix a segmentation fault in _hashopenssl when standard hash
functions such as md5 are not available in the linked OpenSSL library.  As
in some special FIPS-140 build environments.
: The  and as_completed() iterators in
concurrent.futures now avoid keeping a reference to yielded objects.
: Fix ctypes producing wrong  type codes for integer
types.
: The subprocess module now sets the filename when
FileNotFoundError is raised on POSIX systems due to the executable or cwd
not being found.
: concurrent.futures: WorkItem.run() used by ThreadPoolExecutor
now breaks a reference cycle between an exception object and the WorkItem
object.
: xmlrpc.server now explicitly breaks reference cycles when using
sys.exc_info() in code handling exceptions.
: The ssl and hashlib modules now call
OPENSSL_add_all_algorithms_noconf() on OpenSSL < 1.1.0. The function
detects CPU features and enables optimizations on some CPU architectures
such as POWER8. Patch is based on research from Gustavo Serra Scalet.
: Fixed miscellaneous errors in asyncio speedup module.
: ttk: fix the destroy() method of LabeledScale and OptionMenu
classes. Call the parent destroy() method even if the used attribute
doesnât exist. The LabeledScale.destroy() method now also explicitly
clears label and scale attributes to help the garbage collector to destroy
all widgets.
: Fix copyreg._slotnames() mangled attribute calculation for
classes whose name begins with an underscore. Patch by Shane Harvey.
: Fixed a crash when using asyncio and threads.
: Fix handling of long oids in ssl.  Based on patch by Christian
Heimes.
: ftplib.FTP.putline() now throws ValueError on commands that
contains CR or LF. Patch by Donghee Na.
: multiprocessing.Queue.get() with a timeout now polls its reader
in non-blocking mode if it succeeded to acquire the lock but the acquire
took longer than the timeout.
: Fix unittest.mockâs autospec to not fail on method-bound
builtin functions.  Patch by Aaron Gallagher.
: Fix decrementing a borrowed reference in tracemalloc.
: Change ttk.OptionMenu radiobuttons to be unique across
instances of OptionMenu.
: Fix multiprocessing.Queue.join_thread(): it now waits until the
thread completes, even if the thread was started by the same process which
created the queue.
: Fix segfault in readline when using readlineâs history-size
option.  Patch by Nir Soffer.
: socket.close() now ignores ECONNRESET error.
: Fix out of bounds write in
asyncio.CFuture.remove_done_callback().
: signal.setitimer() may disable the timer when passed a tiny
value. Tiny values (such as 1e-6) are valid non-zero values for
setitimer(), which is specified as taking microsecond-resolution
intervals. However, on some platform, our conversion routine could convert
1e-6 into a zero interval, therefore disabling the timer instead of
(re-)scheduling it.
: Fix bug when modifying os.environ while iterating over it
: Fix email header value parser dropping folding white space in
certain cases.
: os.listdir() and os.scandir() now emit bytes names when called
with bytes-like argument.
: Prohibited the â=â character in environment variable names in
os.putenv() and os.spawn*().
: Fixed the lgettext() family of functions in the gettext module.
They now always return bytes.

================================================================================

# Changelog - Library (Part 2)

: xml.etree: Fix a crash when a parser is part of a reference
cycle.

: typing.get_type_hints now finds the right globalns for classes
and modules by default (when no  was specified by the caller).

: Speed improvements to the  module.  Original PRs by
Ivan Levkivskyi and Mitar.

: The C accelerator module of ElementTree ignored exceptions
raised when looking up TreeBuilder target methods in XMLParser().

: socket.create_connection() now fixes manually a reference
cycle: clear the variable storing the last exception on success.

: LoggerAdapter objects can now be nested.

: Improves SSL error handling to avoid losing error numbers.

: ssl.SSLContext() now uses OpenSSL error information when a
context cannot be instantiated.

: SSLSocket.sendall() now uses memoryview to create slices of
data. This fixes support for all bytes-like object. It is also more
efficient and avoids costly copies.

: Fix string concatenation bug in rare error path in the
subprocess module

: Micro-optimize asyncio._get_running_loop() to become up
to 10% faster.

: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
partial characters for UTF-8 input (libexpat bug 115):
https://github.com/libexpat/libexpat/issues/115

================================================================================

# Changelog - Library (Part 3)

: Add TLS 1.3 cipher suites and OP_NO_TLSv1_3.

: Fix concurrent.futures.thread.ThreadPoolExecutor threads to
have a non repr() based thread name by default when no thread_name_prefix
is supplied. They will now identify themselves as
âThreadPoolExecutor-y_nâ.

: Fix a segmentation fault in _hashopenssl when standard hash
functions such as md5 are not available in the linked OpenSSL library.  As
in some special FIPS-140 build environments.

: The  and as_completed() iterators in
concurrent.futures now avoid keeping a reference to yielded objects.

: Fix ctypes producing wrong  type codes for integer
types.

: The subprocess module now sets the filename when
FileNotFoundError is raised on POSIX systems due to the executable or cwd
not being found.

: concurrent.futures: WorkItem.run() used by ThreadPoolExecutor
now breaks a reference cycle between an exception object and the WorkItem
object.

: xmlrpc.server now explicitly breaks reference cycles when using
sys.exc_info() in code handling exceptions.

================================================================================

# Changelog - Library (Part 4)

: The ssl and hashlib modules now call
OPENSSL_add_all_algorithms_noconf() on OpenSSL < 1.1.0. The function
detects CPU features and enables optimizations on some CPU architectures
such as POWER8. Patch is based on research from Gustavo Serra Scalet.

: Fixed miscellaneous errors in asyncio speedup module.

: ttk: fix the destroy() method of LabeledScale and OptionMenu
classes. Call the parent destroy() method even if the used attribute
doesnât exist. The LabeledScale.destroy() method now also explicitly
clears label and scale attributes to help the garbage collector to destroy
all widgets.

: Fix copyreg._slotnames() mangled attribute calculation for
classes whose name begins with an underscore. Patch by Shane Harvey.

: Fixed a crash when using asyncio and threads.

: Fix handling of long oids in ssl.  Based on patch by Christian
Heimes.

: ftplib.FTP.putline() now throws ValueError on commands that
contains CR or LF. Patch by Donghee Na.

: multiprocessing.Queue.get() with a timeout now polls its reader
in non-blocking mode if it succeeded to acquire the lock but the acquire
took longer than the timeout.

================================================================================

# Changelog - Library (Part 5)

: Fix unittest.mockâs autospec to not fail on method-bound
builtin functions.  Patch by Aaron Gallagher.

: Fix decrementing a borrowed reference in tracemalloc.

: Change ttk.OptionMenu radiobuttons to be unique across
instances of OptionMenu.

: Fix multiprocessing.Queue.join_thread(): it now waits until the
thread completes, even if the thread was started by the same process which
created the queue.

: Fix segfault in readline when using readlineâs history-size
option.  Patch by Nir Soffer.

: socket.close() now ignores ECONNRESET error.

: Fix out of bounds write in
asyncio.CFuture.remove_done_callback().

: signal.setitimer() may disable the timer when passed a tiny
value. Tiny values (such as 1e-6) are valid non-zero values for
setitimer(), which is specified as taking microsecond-resolution
intervals. However, on some platform, our conversion routine could convert
1e-6 into a zero interval, therefore disabling the timer instead of
(re-)scheduling it.

: Fix bug when modifying os.environ while iterating over it

: Fix email header value parser dropping folding white space in
certain cases.

: os.listdir() and os.scandir() now emit bytes names when called
with bytes-like argument.

================================================================================

# Changelog - Library (Part 6)

: Prohibited the â=â character in environment variable names in
os.putenv() and os.spawn*().

: Fixed the lgettext() family of functions in the gettext module.
They now always return bytes.

================================================================================

# Changelog - Documentation

List:
: Fix incomplete code snippet in the ZeroMQSocketListener and
ZeroMQSocketHandler examples and adapt them to Python 3.
: Add RFC 7525 and Mozilla server side TLS links to SSL
documentation.
: Clarify doc on truth value testing. Original patch by Peter
Thomassen.

: Fix incomplete code snippet in the ZeroMQSocketListener and
ZeroMQSocketHandler examples and adapt them to Python 3.

: Add RFC 7525 and Mozilla server side TLS links to SSL
documentation.

: Clarify doc on truth value testing. Original patch by Peter
Thomassen.

================================================================================

# Changelog - Tests

List:
: Silence traceback in test_ssl
: Remove sha256.tbs-internet.com ssl test
: Address ALPN callback changes for OpenSSL 1.1.0f. The latest
version behaves like OpenSSL 1.0.2 and no longer aborts handshake.
: regrtest: Exclude tzdata from regrtest âall. When running the
test suite using âuse=all / -u all, exclude tzdata since it makes
test_datetime too slow (15-20 min on some buildbots) which then times out
on some buildbots. Fix also regrtest command line parser to allow passing
-u extralargefile to run test_zipfile64.

: Silence traceback in test_ssl

: Remove sha256.tbs-internet.com ssl test

: Address ALPN callback changes for OpenSSL 1.1.0f. The latest
version behaves like OpenSSL 1.0.2 and no longer aborts handshake.

: regrtest: Exclude tzdata from regrtest âall. When running the
test suite using âuse=all / -u all, exclude tzdata since it makes
test_datetime too slow (15-20 min on some buildbots) which then times out
on some buildbots. Fix also regrtest command line parser to allow passing
-u extralargefile to run test_zipfile64.

================================================================================

# Changelog - Build

List:
: Fix compile error when compiling âwithout-threads. Patch by
Masayuki Yamamoto.

: Fix compile error when compiling âwithout-threads. Patch by
Masayuki Yamamoto.

================================================================================

# Changelog - Windows

List:
: Adds detection of Visual Studio 2017 to distutils on Windows.
: Change to building with MSVC v141 (included with Visual Studio
2017)
: os.cpu_count() now returns the correct number of processors on
Windows when the number of logical processors is greater than 64.
: Add a missing xmlns to python.manifest so that it matches the
schema.

: Adds detection of Visual Studio 2017 to distutils on Windows.

: Change to building with MSVC v141 (included with Visual Studio
2017)

: os.cpu_count() now returns the correct number of processors on
Windows when the number of logical processors is greater than 64.

: Add a missing xmlns to python.manifest so that it matches the
schema.

================================================================================

# Changelog - IDLE (Part 1)

List:
: IDLE code context â fix code update and font update timers.
Canceling timers prevents a warning message when test_idle completes.
: IDLE - Update non-key options in former extension classes. When
applying configdialog changes, call .reload for each feature class. Change
ParenMatch so updated options affect existing instances attached to
existing editor windows.
: IDLE - Improve rstrip entry in doc. Strip trailing whitespace
strips more than blank spaces.  Multiline string literals are not skipped.
: IDLE - make tests pass with zzdummy extension disabled by
default.
: Document how IDLE runs tkinter programs. IDLE calls tcl/tk
update in the background in order to make live interaction and
experimentation with tkinter applications much easier.
: IDLE â fix tk entry box tests by deleting first. Adding to an
int entry is not the same as deleting and inserting because int(ââ) will
fail.
: Rearrange IDLE configdialog GenPage into Window, Editor, and
Help sections.
: IDLE - Add docstrings and tests for outwin subclass of editor.
Move some data and functions from the class to module level. Patch by
Cheryl Sabella.
: IDLE - Do not modify tkinter.message in test_configdialog.
: Convert IDLEâs built-in âextensionsâ to regular features. About
10 IDLE features were implemented as supposedly optional extensions. Their
different behavior could be confusing or worse for users and not good for
maintenance. Hence the conversion. The main difference for users is that
user configurable key bindings for builtin features are now handled
uniformly. Now, editing a binding in a keyset only affects its value in
the keyset. All bindings are defined together in the system-specific
default keysets in config-extensions.def. All custom keysets are saved as
a whole in config-extension.cfg.  All take effect as soon as one clicks
Apply or Ok. The affected events are â<<force-open-completions>>â,
â<<expand-word>>â, â<<force-open-calltip>>â, â<<flash-paren>>â,
â<<format-paragraph>>â, â<<run-module>>â, â<<check-module>>â, and
â<<zoom-height>>â.  Any (global) customizations made before 3.6.3 will not
affect their keyset-specific customization after 3.6.3. and vice versa.
Initial patch by Charles Wohlganger.
: IDLE: Factor HighPage(Frame) class from ConfigDialog. Patch by
Cheryl Sabella.
: Add tests for configdialog highlight tab.  Patch by Cheryl
Sabella.
: IDLE: Factor KeysPage(Frame) class from ConfigDialog.  The
slightly modified tests continue to pass.  Patch by Cheryl Sabella.
: IDLE â stop leaks in test_configdialog. Initial patch by
Victor Stinner.
: Add tests for configdialog keys tab. Patch by Cheryl Sabella.
: IDLE: Calltips use inspect.signature instead of
inspect.getfullargspec. This improves calltips for builtins converted
to use Argument Clinic. Patch by Louie Lu.
: IDLE - Add an outline of a TabPage class in configdialog.
Update existing classes to match outline. Initial patch by Cheryl Sabella.
: Factor GenPage(Frame) class from ConfigDialog. The slightly
modified tests continue to pass. Patch by Cheryl Sabella.
: IDLE - Factor FontPage(Frame) class from ConfigDialog. Slightly
modified tests continue to pass. Fix General tests. Patch mostly by Cheryl
Sabella.
: IDLE - Use ttk widgets in ConfigDialog. Patches by Terry Jan
Reedy and Cheryl Sabella.
: IDLE - Finish rearranging methods of ConfigDialog Grouping
methods pertaining to each tab and the buttons will aid writing tests and
improving the tabs and will enable splitting the groups into classes.
: IDLE â Factor a VarTrace class out of ConfigDialog. Instance
tracers manages pairs consisting of a tk variable and a callback function.
When tracing is turned on, setting the variable calls the function.  Test
coverage for the new class is 100%.
: IDLE: Add more tests for General tab.
: IDLE - Improve configdialog font page and tests. In
configdialog: Document causal pathways in create_font_tab docstring.
Simplify some attribute names. Move set_samples calls to var_changed_font
(idea from Cheryl Sabella).  Move related functions to positions after the
create widgets function. In test_configdialog: Fix test_font_set so not
order dependent.  Fix renamed test_indent_scale so it tests the widget.
Adjust tests for movement of set_samples call.  Add tests for load
functions.  Put all font tests in one class and tab indent tests in
another.  Except for two lines, these tests completely cover the related
functions.
: IDLE â Add more configdialog font page tests.
: IDLE: replace âcolourâ with âcolorâ in configdialog.
: Add tests for idlelib.config.IdleConf. Increase coverage from
46% to 96%. Patch by Louie Lu.
: Document coverage details for idlelib tests. Add section to
idlelib/idle-test/README.txt. Include check that branches are taken both
ways. Exclude IDLE-specific code that does not run during unit tests.
: IDLE: Document ConfigDialog tk Vars, methods, and widgets in
docstrings This will facilitate improving the dialog and splitting up the
class. Original patch by Cheryl Sabella.
: IDLE: Add tests for ConfigParser subclasses in config. Patch by
Louie Lu.
: IDLE: Add docstrings to browser.py. Patch by Cheryl Sabella.
: IDLE: Remove unused variables in configdialog.  One is a
duplicate, one is set but cannot be altered by users. Patch by Cheryl
Sabella.
: IDLE: In Settings dialog, select font with Up, Down keys as
well as mouse. Initial patch by Louie Lu.
: IDLE: call config.IdleConf.GetUserCfgDir only once.
: IDLE: Factor ConfigChanges class from configdialog, put in
config; test. * In config, put dump test code in a function; run it and
unittest in   âif __name__ == â__main__â. * Add class config.ConfigChanges
based on changes_class_v4.py on bpo issue. * Add class
test_config.ChangesTest, partly using configdialog_tests_v1.py. * Revise
configdialog to use ConfigChanges; see tracker msg297804. * Revise
test_configdialog to match configdialog changes. * Remove configdialog
functions unused or moved to ConfigChanges. Cheryl Sabella contributed
parts of the patch.
: IDLE: configdialog - Add docstrings and fix comments. Patch by
Cheryl Sabella.
: IDLE: Improve textview with docstrings, PEP8 names, and more
tests. Patch by Cheryl Sabella.
: IDLE: Make several improvements to parenmatch. Add âparensâ
style to highlight both opener and closer. Make âdefaultâ style, which is
not default, a synonym for âopenerâ. Make time-delay work the same with
all styles. Add help for config dialog extensions tab, including help for
parenmatch. Add new tests.  Original patch by Charles Wohlganger.
: IDLE: add docstrings to grep module. Patch by Cheryl Sabella
: IDLEâs basic custom key entry dialog now detects duplicates
properly. Original patch by Saimadhav Heblikar.
: IDLE no longer deletes a character after commenting out a
region by a key shortcut.  Add   for this and other
potential conflicts between IDLE and default key bindings.
: Review and change idlelib.configdialog names. Lowercase method
and attribute names. Replace âcolourâ with âcolorâ, expand overly cryptic
names, delete unneeded underscores. Replace   with specific
imports. Patches by Cheryl Sabella.
: IDLE: Verify user-entered key sequences by trying to bind them
with tk. Add tests for all 3 validation functions. Original patch by G
Polo.  Tests added by Cheryl Sabella.

================================================================================

# Changelog - IDLE (Part 2)

: IDLE code context â fix code update and font update timers.
Canceling timers prevents a warning message when test_idle completes.

: IDLE - Update non-key options in former extension classes. When
applying configdialog changes, call .reload for each feature class. Change
ParenMatch so updated options affect existing instances attached to
existing editor windows.

: IDLE - Improve rstrip entry in doc. Strip trailing whitespace
strips more than blank spaces.  Multiline string literals are not skipped.

: IDLE - make tests pass with zzdummy extension disabled by
default.

: Document how IDLE runs tkinter programs. IDLE calls tcl/tk
update in the background in order to make live interaction and
experimentation with tkinter applications much easier.

: IDLE â fix tk entry box tests by deleting first. Adding to an
int entry is not the same as deleting and inserting because int(ââ) will
fail.

: Rearrange IDLE configdialog GenPage into Window, Editor, and
Help sections.

: IDLE - Add docstrings and tests for outwin subclass of editor.
Move some data and functions from the class to module level. Patch by
Cheryl Sabella.

: IDLE - Do not modify tkinter.message in test_configdialog.

================================================================================

# Changelog - IDLE (Part 3)

: Convert IDLEâs built-in âextensionsâ to regular features. About
10 IDLE features were implemented as supposedly optional extensions. Their
different behavior could be confusing or worse for users and not good for
maintenance. Hence the conversion. The main difference for users is that
user configurable key bindings for builtin features are now handled
uniformly. Now, editing a binding in a keyset only affects its value in
the keyset. All bindings are defined together in the system-specific
default keysets in config-extensions.def. All custom keysets are saved as
a whole in config-extension.cfg.  All take effect as soon as one clicks
Apply or Ok. The affected events are â<<force-open-completions>>â,
â<<expand-word>>â, â<<force-open-calltip>>â, â<<flash-paren>>â,
â<<format-paragraph>>â, â<<run-module>>â, â<<check-module>>â, and
â<<zoom-height>>â.  Any (global) customizations made before 3.6.3 will not
affect their keyset-specific customization after 3.6.3. and vice versa.
Initial patch by Charles Wohlganger.

: IDLE: Factor HighPage(Frame) class from ConfigDialog. Patch by
Cheryl Sabella.

================================================================================

# Changelog - IDLE (Part 4)

: Add tests for configdialog highlight tab.  Patch by Cheryl
Sabella.

: IDLE: Factor KeysPage(Frame) class from ConfigDialog.  The
slightly modified tests continue to pass.  Patch by Cheryl Sabella.

: IDLE â stop leaks in test_configdialog. Initial patch by
Victor Stinner.

: Add tests for configdialog keys tab. Patch by Cheryl Sabella.

: IDLE: Calltips use inspect.signature instead of
inspect.getfullargspec. This improves calltips for builtins converted
to use Argument Clinic. Patch by Louie Lu.

: IDLE - Add an outline of a TabPage class in configdialog.
Update existing classes to match outline. Initial patch by Cheryl Sabella.

: Factor GenPage(Frame) class from ConfigDialog. The slightly
modified tests continue to pass. Patch by Cheryl Sabella.

: IDLE - Factor FontPage(Frame) class from ConfigDialog. Slightly
modified tests continue to pass. Fix General tests. Patch mostly by Cheryl
Sabella.

: IDLE - Use ttk widgets in ConfigDialog. Patches by Terry Jan
Reedy and Cheryl Sabella.

: IDLE - Finish rearranging methods of ConfigDialog Grouping
methods pertaining to each tab and the buttons will aid writing tests and
improving the tabs and will enable splitting the groups into classes.

================================================================================

# Changelog - IDLE (Part 5)

: IDLE â Factor a VarTrace class out of ConfigDialog. Instance
tracers manages pairs consisting of a tk variable and a callback function.
When tracing is turned on, setting the variable calls the function.  Test
coverage for the new class is 100%.

: IDLE: Add more tests for General tab.

: IDLE - Improve configdialog font page and tests. In
configdialog: Document causal pathways in create_font_tab docstring.
Simplify some attribute names. Move set_samples calls to var_changed_font
(idea from Cheryl Sabella).  Move related functions to positions after the
create widgets function. In test_configdialog: Fix test_font_set so not
order dependent.  Fix renamed test_indent_scale so it tests the widget.
Adjust tests for movement of set_samples call.  Add tests for load
functions.  Put all font tests in one class and tab indent tests in
another.  Except for two lines, these tests completely cover the related
functions.

: IDLE â Add more configdialog font page tests.

: IDLE: replace âcolourâ with âcolorâ in configdialog.

: Add tests for idlelib.config.IdleConf. Increase coverage from
46% to 96%. Patch by Louie Lu.

================================================================================

# Changelog - IDLE (Part 6)

: Document coverage details for idlelib tests. Add section to
idlelib/idle-test/README.txt. Include check that branches are taken both
ways. Exclude IDLE-specific code that does not run during unit tests.

: IDLE: Document ConfigDialog tk Vars, methods, and widgets in
docstrings This will facilitate improving the dialog and splitting up the
class. Original patch by Cheryl Sabella.

: IDLE: Add tests for ConfigParser subclasses in config. Patch by
Louie Lu.

: IDLE: Add docstrings to browser.py. Patch by Cheryl Sabella.

: IDLE: Remove unused variables in configdialog.  One is a
duplicate, one is set but cannot be altered by users. Patch by Cheryl
Sabella.

: IDLE: In Settings dialog, select font with Up, Down keys as
well as mouse. Initial patch by Louie Lu.

: IDLE: call config.IdleConf.GetUserCfgDir only once.

================================================================================

# Changelog - IDLE (Part 7)

: IDLE: Factor ConfigChanges class from configdialog, put in
config; test. * In config, put dump test code in a function; run it and
unittest in   âif __name__ == â__main__â. * Add class config.ConfigChanges
based on changes_class_v4.py on bpo issue. * Add class
test_config.ChangesTest, partly using configdialog_tests_v1.py. * Revise
configdialog to use ConfigChanges; see tracker msg297804. * Revise
test_configdialog to match configdialog changes. * Remove configdialog
functions unused or moved to ConfigChanges. Cheryl Sabella contributed
parts of the patch.

: IDLE: configdialog - Add docstrings and fix comments. Patch by
Cheryl Sabella.

: IDLE: Improve textview with docstrings, PEP8 names, and more
tests. Patch by Cheryl Sabella.

: IDLE: Make several improvements to parenmatch. Add âparensâ
style to highlight both opener and closer. Make âdefaultâ style, which is
not default, a synonym for âopenerâ. Make time-delay work the same with
all styles. Add help for config dialog extensions tab, including help for
parenmatch. Add new tests.  Original patch by Charles Wohlganger.

: IDLE: add docstrings to grep module. Patch by Cheryl Sabella

================================================================================

# Changelog - IDLE (Part 8)

: IDLEâs basic custom key entry dialog now detects duplicates
properly. Original patch by Saimadhav Heblikar.

: IDLE no longer deletes a character after commenting out a
region by a key shortcut.  Add   for this and other
potential conflicts between IDLE and default key bindings.

: Review and change idlelib.configdialog names. Lowercase method
and attribute names. Replace âcolourâ with âcolorâ, expand overly cryptic
names, delete unneeded underscores. Replace   with specific
imports. Patches by Cheryl Sabella.

: IDLE: Verify user-entered key sequences by trying to bind them
with tk. Add tests for all 3 validation functions. Original patch by G
Polo.  Tests added by Cheryl Sabella.

================================================================================

# Changelog - Tools/Demos

List:
: gdb integration commands (py-bt, etc.) work on optimized shared
builds now, too.   introduced _PyEval_EvalFrameDefault which
inlines PyEval_EvalFrameEx on non-debug shared builds.  This broke the
ability to use py-bt, py-up, and a few other Python-specific gdb
integrations. The problem is fixed by only looking for
_PyEval_EvalFrameDefault frames in python-gdb.py.  Original patch by Bruno
âPolacoâ Penteado.

: gdb integration commands (py-bt, etc.) work on optimized shared
builds now, too.   introduced _PyEval_EvalFrameDefault which
inlines PyEval_EvalFrameEx on non-debug shared builds.  This broke the
ability to use py-bt, py-up, and a few other Python-specific gdb
integrations. The problem is fixed by only looking for
_PyEval_EvalFrameDefault frames in python-gdb.py.  Original patch by Bruno
âPolacoâ Penteado.

================================================================================

# Changelog - Python 3.6.2 final

Release date: 2017-07-17

No changes since release candidate 2

================================================================================

# Changelog - Security (Part 1)

List:
: Prevent environment variables injection in subprocess on
Windows.  Prevent passing other environment variables and command
arguments.
: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
security vulnerabilities including: CVE 2017-9233 (External entity
infinite loop DoS), CVE 2016-9063 (Integer overflow, re-fix),
CVE 2016-0718 (Fix regression bugs from 2.2.0âs fix to
CVE 2016-0718) and CVE 2012-0876 (Counter hash flooding with
SipHash). Note: the CVE 2016-5300 (Use os-specific entropy sources like
getrandom) doesnât impact Python, since Python already gets entropy from
the OS to set the expat secret using XML_SetHashSalt().
: Fix urllib.parse.splithost() to correctly parse fragments. For
example, splithost('//127.0.0.1#@evil.com/') now correctly returns the
 host, instead of treating  as the host in an
authentication (login@host).

: Prevent environment variables injection in subprocess on
Windows.  Prevent passing other environment variables and command
arguments.

================================================================================

# Changelog - Security (Part 2)

: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
security vulnerabilities including: CVE 2017-9233 (External entity
infinite loop DoS), CVE 2016-9063 (Integer overflow, re-fix),
CVE 2016-0718 (Fix regression bugs from 2.2.0âs fix to
CVE 2016-0718) and CVE 2012-0876 (Counter hash flooding with
SipHash). Note: the CVE 2016-5300 (Use os-specific entropy sources like
getrandom) doesnât impact Python, since Python already gets entropy from
the OS to set the expat secret using XML_SetHashSalt().

: Fix urllib.parse.splithost() to correctly parse fragments. For
example, splithost('//127.0.0.1#@evil.com/') now correctly returns the
 host, instead of treating  as the host in an
authentication (login@host).

================================================================================

# Changelog - Security

List:
: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
CVE 2016-0718 and CVE 2016-4472. See
https://sourceforge.net/p/expat/bugs/537/ for more information.

: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
CVE 2016-0718 and CVE 2016-4472. See
https://sourceforge.net/p/expat/bugs/537/ for more information.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Removed a too-strict assertion that failed for certain
f-strings, such as eval(âfâ\nââ) and eval(âfâ\rââ).
: Move co_extra_freefuncs to not be per-thread to avoid crashes
: Fixed parsing backslashes in f-strings.
: Fixed various segfaults with dict when input collections are
mutated during searching, inserting or comparing.  Based on patches by
Duane Griffin and Tim Mitchell.
: Fixed type.__setattr__() and type.__delattr__() for
non-interned attribute names.  Based on patch by Eryk Sun.
: If a KeyboardInterrupt happens when the interpreter is in the
middle of resuming a chain of nested âyield fromâ or âawaitâ calls, itâs
now correctly delivered to the innermost frame.
: sys.getsizeof() on a code object now returns the sizes which
includes the code struct and sizes of objects which it references. Patch
by Donghee Na.
: Fix memory usage regression of set and frozenset object.
: Fixed error messages in the index() method of tuple, list and
deque when pass indices of wrong type.
: Show correct error messages when any of the pthread_* calls in
thread_pthread.h fails.
: bool(range) works even if len(range) raises
OverflowError.
: Fix wrapping coroutine return values in StopIteration.
: Fix an oversight that %b format for bytes should support
objects follow the buffer protocol.
: Fix a regression that bytes format may fail when containing
zero bytes inside.
: If max_line_length=None is specified while using the Compat32
policy, it is no longer ignored.  Patch by Mircea Cosbuc.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Removed a too-strict assertion that failed for certain
f-strings, such as eval(âfâ\nââ) and eval(âfâ\rââ).

: Move co_extra_freefuncs to not be per-thread to avoid crashes

: Fixed parsing backslashes in f-strings.

: Fixed various segfaults with dict when input collections are
mutated during searching, inserting or comparing.  Based on patches by
Duane Griffin and Tim Mitchell.

: Fixed type.__setattr__() and type.__delattr__() for
non-interned attribute names.  Based on patch by Eryk Sun.

: If a KeyboardInterrupt happens when the interpreter is in the
middle of resuming a chain of nested âyield fromâ or âawaitâ calls, itâs
now correctly delivered to the innermost frame.

: sys.getsizeof() on a code object now returns the sizes which
includes the code struct and sizes of objects which it references. Patch
by Donghee Na.

: Fix memory usage regression of set and frozenset object.

: Fixed error messages in the index() method of tuple, list and
deque when pass indices of wrong type.

: Show correct error messages when any of the pthread_* calls in
thread_pthread.h fails.

: bool(range) works even if len(range) raises
OverflowError.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix wrapping coroutine return values in StopIteration.

: Fix an oversight that %b format for bytes should support
objects follow the buffer protocol.

: Fix a regression that bytes format may fail when containing
zero bytes inside.

: If max_line_length=None is specified while using the Compat32
policy, it is no longer ignored.  Patch by Mircea Cosbuc.

================================================================================

# Changelog - Library (Part 1)

List:
: Functional API of enum allows to create empty enums. Patched by
Donghee Na
: Fix race condition between signal delivery and wakeup file
descriptor. Patch by Nathaniel Smith.
: lib2to3 now recognizes  and  strings.
: unittest.TestCase.assertRaises() now manually breaks a
reference cycle to not keep objects alive longer than expected.
: inspect.signature() now supports callables with
variable-argument parameters wrapped with partialmethod. Patch by Donghee
Na.
: Fix path calculation in imp.load_package(), fixing it for cases
when a package is only shipped with bytecodes. Patch by Alexandru
Ardelean.
: Fixed comparison check for ipaddress.ip_interface objects.
Patch by Sanjay Sundaresan.
: re.compile() no longer raises a BytesWarning when compiling a
bytes instance with misplaced inline modifier.  Patch by Roy Williams.
: Avoid race condition in multiprocessing cleanup (#2159)
: The traceback no longer displayed for SystemExit raised in a
callback registered by atexit.
: Donât log exceptions if Task/Future âcancel()â method was
called.
: Updates to typing module: Add generic AsyncContextManager, add
support for ContextManager on all versions. Original PRs by Jelle Zijlstra
and Ivan Levkivskyi
: Fix ssl sockets leaks when connection is aborted in asyncio/ssl
implementation. Patch by MichaÃ«l SghaÃ¯er.
: Closing transport during handshake process leaks open socket.
Patch by Nikolay Kim
: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu
Sornay.
: On Windows, subprocess.Popen.communicate() now also ignore
EINVAL on stdin.write() if the child process is still running but closed
the pipe.
: inspect.isabstract() now works during __init_subclass__.  Patch
by Nate Soares.
: ABCMeta.__new__ now accepts , allowing abstract
base classes to use keyword parameters in __init_subclass__. Patch by Nate
Soares.
: faulthandler now correctly filters and displays exception codes
on Windows
: Fix the problem that logging.handlers.SysLogHandler cannot
handle IPv6 addresses.
: Preserve generator state when _random.Random.setstate() raises
an exception. Patch by Bryan Olson.
: multiprocessing.Queue._feed background running thread do not
break from main loop on exception.
: Fix handling escape characters in HZ codec.  Based on patch by
Ma Lin.
: Fix AttributeError when using SimpleQueue.empty() under 
and forkserver start methods.
: imaplib and poplib now catch the Windows socket WSAEINVAL error
(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.
This error occurs sometimes on SSL connections.
: Warnings emitted when compile a regular expression now always
point to the line in the user code.  Previously they could point into
inners of the re module if emitted from inside of groups or conditionals.
: Fixed Task.cancel() can be ignored when the task is running
coroutine and the coroutine returned without any more .
: contextlib.AbstractContextManager now supports
anti-registration by setting __enter__ = None or __exit__ = None,
following the pattern introduced in . Patch by Jelle Zijlstra.
: Weaken the condition of deprecation warnings for inline
modifiers. Now allowed several subsequential inline modifiers at the start
of the pattern (e.g. '(?i)(?s)...').  In verbose mode whitespaces and
comments now are allowed before and between inline modifiers (e.g. 
 ).
: Fix range checking in GB18030 decoder.  Original patch by Ma
Lin.
: Change resulted because of zipfile breakage. (See also:
)
: Removed the __init__ methods of _jsonâs scanner and encoder.
Misusing them could cause memory leaks or crashes.  Now scanner and
encoder objects are completely initialized in the __new__ methods.
: Avoid KeyboardInterrupt tracebacks in forkserver helper process
when Ctrl-C is received.
: Various updates to typing module: add typing.NoReturn type, use
WrapperDescriptorType, minor bug-fixes.  Original PRs by Jim
Fasarakis-Hilliard and Ivan Levkivskyi.
: Fix getsockname() for unbound AF_UNIX sockets on Linux.
: Fixed leaks and crashes in errors handling in the parser
module.
: Fixed crashes in IOBase methods __next__() and readlines() when
readline() or __next__() respectively return non-sizeable object. Fixed
possible other errors caused by not checking results of PyObject_Size(),
PySequence_Size(), or PyMapping_Size().
: Allowed calling the close() method of the zip entry writer
object multiple times.  Writing to a closed writer now always produces a
ValueError.
: _io._IOBase.readlines will check if itâs closed first when hint
is present.
: Fixed race condition in pathlib mkdir with flags parents=True.
Patch by Armin Rigo.
: Fixed arbitrary unchaining of RuntimeError exceptions in
contextlib.contextmanager.  Patch by Siddharth Velankar.
: Pickling and copying ImportError now preserves name and path
attributes.
: Fixed memory leaks in the replace() method of datetime and time
objects when pass out of bound fold argument.
: Fix a crash in itertools.chain.from_iterable when encountering
long runs of empty iterables.
: Fixed multiple crashes in ElementTree caused by race conditions
and wrong types.
: Fixed a bug in pools in multiprocessing.pool that raising an
exception at the very first of an iterable may swallow the exception or
make the program hang. Patch by Davin Potts and Xiang Zhang.
: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when
the OS gives priority to errors such as EACCES over EEXIST.
: Release references to tasks, their arguments and their results
as soon as they are finished in multiprocessing.Pool.
: faulthandler: Restore the old sigaltstack during teardown.
Patch by Christophe Zeitouny.
: Fixed crashes in repr of recursive buffered file-like objects.
: Fix crashes in partial.__repr__ if the keys of partial.keywords
are not strings.  Patch by Michael Seifert.
: get_extra_info() raises exception if get called on closed ssl
transport. Patch by Nikolay Kim.
: Fixed possible failing or crashing input() if attributes
âencodingâ or âerrorsâ of sys.stdin or sys.stdout are not set or are not
strings.
: Fix a bug that prevented array âQâ, âLâ and âIâ from accepting
big intables (objects that have __int__) as elements.  Patch by Oren
Milman.
: The zipfile module now accepts path-like objects for external
paths.
: index() and count() methods of collections.abc.Sequence now
check identity before checking equality when do comparisons.
: SimpleXMLRPCDispatcher no longer chains KeyError (or any other
exception) to exception(s) raised in the dispatched methods. Patch by Petr
Motejlek.
: path.resolve(strict=False) no longer cuts the path after the
first element not present in the filesystem.  Patch by Antoine Pietri.

================================================================================

# Changelog - Library (Part 2)

: Functional API of enum allows to create empty enums. Patched by
Donghee Na

: Fix race condition between signal delivery and wakeup file
descriptor. Patch by Nathaniel Smith.

: lib2to3 now recognizes  and  strings.

: unittest.TestCase.assertRaises() now manually breaks a
reference cycle to not keep objects alive longer than expected.

: inspect.signature() now supports callables with
variable-argument parameters wrapped with partialmethod. Patch by Donghee
Na.

: Fix path calculation in imp.load_package(), fixing it for cases
when a package is only shipped with bytecodes. Patch by Alexandru
Ardelean.

: Fixed comparison check for ipaddress.ip_interface objects.
Patch by Sanjay Sundaresan.

: re.compile() no longer raises a BytesWarning when compiling a
bytes instance with misplaced inline modifier.  Patch by Roy Williams.

: Avoid race condition in multiprocessing cleanup (#2159)

: The traceback no longer displayed for SystemExit raised in a
callback registered by atexit.

: Donât log exceptions if Task/Future âcancel()â method was
called.

================================================================================

# Changelog - Library (Part 3)

: Updates to typing module: Add generic AsyncContextManager, add
support for ContextManager on all versions. Original PRs by Jelle Zijlstra
and Ivan Levkivskyi

: Fix ssl sockets leaks when connection is aborted in asyncio/ssl
implementation. Patch by MichaÃ«l SghaÃ¯er.

: Closing transport during handshake process leaks open socket.
Patch by Nikolay Kim

: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu
Sornay.

: On Windows, subprocess.Popen.communicate() now also ignore
EINVAL on stdin.write() if the child process is still running but closed
the pipe.

: inspect.isabstract() now works during __init_subclass__.  Patch
by Nate Soares.

: ABCMeta.__new__ now accepts , allowing abstract
base classes to use keyword parameters in __init_subclass__. Patch by Nate
Soares.

: faulthandler now correctly filters and displays exception codes
on Windows

: Fix the problem that logging.handlers.SysLogHandler cannot
handle IPv6 addresses.

: Preserve generator state when _random.Random.setstate() raises
an exception. Patch by Bryan Olson.

: multiprocessing.Queue._feed background running thread do not
break from main loop on exception.

================================================================================

# Changelog - Library (Part 4)

: Fix handling escape characters in HZ codec.  Based on patch by
Ma Lin.

: Fix AttributeError when using SimpleQueue.empty() under 
and forkserver start methods.

: imaplib and poplib now catch the Windows socket WSAEINVAL error
(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.
This error occurs sometimes on SSL connections.

: Warnings emitted when compile a regular expression now always
point to the line in the user code.  Previously they could point into
inners of the re module if emitted from inside of groups or conditionals.

: Fixed Task.cancel() can be ignored when the task is running
coroutine and the coroutine returned without any more .

: contextlib.AbstractContextManager now supports
anti-registration by setting __enter__ = None or __exit__ = None,
following the pattern introduced in . Patch by Jelle Zijlstra.

: Weaken the condition of deprecation warnings for inline
modifiers. Now allowed several subsequential inline modifiers at the start
of the pattern (e.g. '(?i)(?s)...').  In verbose mode whitespaces and
comments now are allowed before and between inline modifiers (e.g. 
 ).

: Fix range checking in GB18030 decoder.  Original patch by Ma
Lin.

================================================================================

# Changelog - Library (Part 5)

: Change resulted because of zipfile breakage. (See also:
)

: Removed the __init__ methods of _jsonâs scanner and encoder.
Misusing them could cause memory leaks or crashes.  Now scanner and
encoder objects are completely initialized in the __new__ methods.

: Avoid KeyboardInterrupt tracebacks in forkserver helper process
when Ctrl-C is received.

: Various updates to typing module: add typing.NoReturn type, use
WrapperDescriptorType, minor bug-fixes.  Original PRs by Jim
Fasarakis-Hilliard and Ivan Levkivskyi.

: Fix getsockname() for unbound AF_UNIX sockets on Linux.

: Fixed leaks and crashes in errors handling in the parser
module.

: Fixed crashes in IOBase methods __next__() and readlines() when
readline() or __next__() respectively return non-sizeable object. Fixed
possible other errors caused by not checking results of PyObject_Size(),
PySequence_Size(), or PyMapping_Size().

: Allowed calling the close() method of the zip entry writer
object multiple times.  Writing to a closed writer now always produces a
ValueError.

: _io._IOBase.readlines will check if itâs closed first when hint
is present.

: Fixed race condition in pathlib mkdir with flags parents=True.
Patch by Armin Rigo.

================================================================================

# Changelog - Library (Part 6)

: Fixed arbitrary unchaining of RuntimeError exceptions in
contextlib.contextmanager.  Patch by Siddharth Velankar.

: Pickling and copying ImportError now preserves name and path
attributes.

: Fixed memory leaks in the replace() method of datetime and time
objects when pass out of bound fold argument.

: Fix a crash in itertools.chain.from_iterable when encountering
long runs of empty iterables.

: Fixed multiple crashes in ElementTree caused by race conditions
and wrong types.

: Fixed a bug in pools in multiprocessing.pool that raising an
exception at the very first of an iterable may swallow the exception or
make the program hang. Patch by Davin Potts and Xiang Zhang.

: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when
the OS gives priority to errors such as EACCES over EEXIST.

: Release references to tasks, their arguments and their results
as soon as they are finished in multiprocessing.Pool.

: faulthandler: Restore the old sigaltstack during teardown.
Patch by Christophe Zeitouny.

: Fixed crashes in repr of recursive buffered file-like objects.

: Fix crashes in partial.__repr__ if the keys of partial.keywords
are not strings.  Patch by Michael Seifert.

================================================================================

# Changelog - Library (Part 7)

: get_extra_info() raises exception if get called on closed ssl
transport. Patch by Nikolay Kim.

: Fixed possible failing or crashing input() if attributes
âencodingâ or âerrorsâ of sys.stdin or sys.stdout are not set or are not
strings.

: Fix a bug that prevented array âQâ, âLâ and âIâ from accepting
big intables (objects that have __int__) as elements.  Patch by Oren
Milman.

: The zipfile module now accepts path-like objects for external
paths.

: index() and count() methods of collections.abc.Sequence now
check identity before checking equality when do comparisons.

: SimpleXMLRPCDispatcher no longer chains KeyError (or any other
exception) to exception(s) raised in the dispatched methods. Patch by Petr
Motejlek.

: path.resolve(strict=False) no longer cuts the path after the
first element not present in the filesystem.  Patch by Antoine Pietri.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Fix several problems with IDLEâs autocompletion box. The
following should now work: clicking on selection box items; using the
scrollbar; selecting an item by hitting Return. Hangs on MacOSX should no
longer happen. Patch by Louie Lu.
: Add doc subsubsection about IDLE failure to start. Popup
no-connection message directs users to this section.
: Fix reference leaks in IDLE tests. Patches by Louie Lu and
Terry Jan Reedy.
: Add docstrings for textview.py and use PEP8 names. Patches by
Cheryl Sabella and Terry Jan Reedy.
: Help-about: use pep8 names and add tests. Increase coverage to
100%. Patches by Louie Lu, Cheryl Sabella, and Terry Jan Reedy.
: Add _utest option to textview; add new tests. Increase coverage
to 100%. Patches by Louie Lu and Terry Jan Reedy.

: Fix several problems with IDLEâs autocompletion box. The
following should now work: clicking on selection box items; using the
scrollbar; selecting an item by hitting Return. Hangs on MacOSX should no
longer happen. Patch by Louie Lu.

: Add doc subsubsection about IDLE failure to start. Popup
no-connection message directs users to this section.

================================================================================

# Changelog - IDLE (Part 2)

: Fix reference leaks in IDLE tests. Patches by Louie Lu and
Terry Jan Reedy.

: Add docstrings for textview.py and use PEP8 names. Patches by
Cheryl Sabella and Terry Jan Reedy.

: Help-about: use pep8 names and add tests. Increase coverage to
100%. Patches by Louie Lu, Cheryl Sabella, and Terry Jan Reedy.

: Add _utest option to textview; add new tests. Increase coverage
to 100%. Patches by Louie Lu and Terry Jan Reedy.

================================================================================

# Changelog - C API

List:
: Function PySlice_GetIndicesEx() no longer replaced with a macro
if Py_LIMITED_API is not set.

: Function PySlice_GetIndicesEx() no longer replaced with a macro
if Py_LIMITED_API is not set.

================================================================================

# Changelog - Build

List:
: Add --with-assertions configure flag to explicitly enable C
 checks. Defaults to off. --with-pydebug implies
--with-assertions.
: Fix out-of-tree builds of Python when configured with
--with--dtrace.
: Prevent unnecessary rebuilding of Python during  ,
  and some other make targets when configured with
--enable-optimizations.
: Donât regenerate generated files based on file modification
time anymore: the action is now explicit. Replace   with
 .
: Fix --enable-optimization didnât work.

: Add --with-assertions configure flag to explicitly enable C
 checks. Defaults to off. --with-pydebug implies
--with-assertions.

: Fix out-of-tree builds of Python when configured with
--with--dtrace.

: Prevent unnecessary rebuilding of Python during  ,
  and some other make targets when configured with
--enable-optimizations.

: Donât regenerate generated files based on file modification
time anymore: the action is now explicit. Replace   with
 .

: Fix --enable-optimization didnât work.

================================================================================

# Changelog - Documentation

List:
: Add missing attribute related constants in curses
documentation.
: the link targets for  and bytearray() are
now their respective type definitions, rather than the corresponding
builtin function entries. Use  and
 to reference the latter. In order to
ensure this and future cross-reference updates are applied automatically,
the daily documentation builds now disable the default output caching
features in Sphinx.
: Add missing info of code object in inspect documentation.

: Add missing attribute related constants in curses
documentation.

: the link targets for  and bytearray() are
now their respective type definitions, rather than the corresponding
builtin function entries. Use  and
 to reference the latter. In order to
ensure this and future cross-reference updates are applied automatically,
the daily documentation builds now disable the default output caching
features in Sphinx.

: Add missing info of code object in inspect documentation.

================================================================================

# Changelog - Tools/Demos

List:
: python-gdb.py now supports also method-wrapper
(wrapperobject) objects.

: python-gdb.py now supports also method-wrapper
(wrapperobject) objects.

================================================================================

# Changelog - Tests

List:
: test_thread: setUp() now uses support.threading_setup() and
support.threading_cleanup() to wait until threads complete to avoid random
side effects on following tests. Initial patch written by Grzegorz
Grzywacz.
: Enhanced functions swap_attr() and swap_item() in the
test.support module. They now work when delete replaced attribute or item
inside the with statement.  The old value of the attribute or item (or
None if it doesnât exist) now will be assigned to the target of the âasâ
clause, if there is one.

: test_thread: setUp() now uses support.threading_setup() and
support.threading_cleanup() to wait until threads complete to avoid random
side effects on following tests. Initial patch written by Grzegorz
Grzywacz.

: Enhanced functions swap_attr() and swap_item() in the
test.support module. They now work when delete replaced attribute or item
inside the with statement.  The old value of the attribute or item (or
None if it doesnât exist) now will be assigned to the target of the âasâ
clause, if there is one.

================================================================================

# Changelog - Windows

List:
: Locate msbuild.exe on Windows when building rather than
vcvarsall.bat
: The build process on Windows no longer depends on Subversion,
instead pulling external code from GitHub via a Python script.  If Python
3.6 is not found on the system (via  ), NuGet is used to
download a copy of 32-bit Python.

: Locate msbuild.exe on Windows when building rather than
vcvarsall.bat

: The build process on Windows no longer depends on Subversion,
instead pulling external code from GitHub via a Python script.  If Python
3.6 is not found on the system (via  ), NuGet is used to
download a copy of 32-bit Python.

================================================================================

# Changelog - Core and Builtins

List:
: The sys.path[0] initialization change for  caused
a regression by revealing an inconsistency in how sys.path is initialized
when executing  from a zipfile, directory, or other import
location. The interpreter now consistently avoids ever adding the import
locationâs parent directory to , and ensures no other
 entries are inadvertently modified when inserting the import
location named on the command line.

: The sys.path[0] initialization change for  caused
a regression by revealing an inconsistency in how sys.path is initialized
when executing  from a zipfile, directory, or other import
location. The interpreter now consistently avoids ever adding the import
locationâs parent directory to , and ensures no other
 entries are inadvertently modified when inserting the import
location named on the command line.

================================================================================

# Changelog - Build

List:
: fix format of git information used in sys.version
Fix incompatible comment in python.h

: fix format of git information used in sys.version

Fix incompatible comment in python.h

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Set correct __cause__ for errors about invalid awaitables
returned from __aiter__ and __anext__.
: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian
Coleman.
: Fix minor regression of PyEval_CallObjectWithKeywords. It
should raise TypeError when kwargs is not a dict.  But it might cause segv
when args=NULL and kwargs is not a dict.
: Support __rmod__ for subclasses of str being called before
str.__mod__. Patch by Martijn Pieters.
: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by
Matthieu Dartiailh.
: Fix incorrect handling of signed zeros in complex constructor
for complex subclasses and for inputs having a __complex__ method. Patch
by Serhiy Storchaka.
: Fixed possibly dereferencing undefined pointers when creating
weakref objects.
: Fixed use-after-free problem in key sharing dict.
: Prevent RunMainFromImporter overwriting sys.path[0].
: Fixed possible BytesWarning when compare the code objects.
Warnings could be emitted at compile time.
: Fixed a crash when pass the iterable keyword argument to
sorted().
: Fix memory leak and use-after-free in os module
(path_converter).
: Fix regression in bytes(x) when x.__index__() raises Exception.
: Do not include <sys/random.h> if it does not exist.
: Correct the positioning of the syntax error caret for indented
blocks. Based on patch by Michael Layzell.
: Fixed bytes formatting of octals with zero padding in alternate
form.
: On Android, operating system data is now always encoded/decoded
to/from UTF-8, instead of the locale encoding to avoid inconsistencies
with os.fsencode() and os.fsdecode() which are already using UTF-8.
: functools.lru_cache() was susceptible to an obscure reentrancy
bug triggerable by a monkey-patched len() function.
: f-string expressions are no longer accepted as docstrings and
by ast.literal_eval() even if they do not include expressions.
: Fixed setting the offset attribute of SyntaxError by
PyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().
: Fix the cross compilation of xxlimited when Python has been
built with Py_DEBUG defined.
: Optimize _PyDict_NewPresized() to create correct size dict.
Improve speed of dict literal with constant keys up to 30%.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Set correct __cause__ for errors about invalid awaitables
returned from __aiter__ and __anext__.

: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian
Coleman.

: Fix minor regression of PyEval_CallObjectWithKeywords. It
should raise TypeError when kwargs is not a dict.  But it might cause segv
when args=NULL and kwargs is not a dict.

: Support __rmod__ for subclasses of str being called before
str.__mod__. Patch by Martijn Pieters.

: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by
Matthieu Dartiailh.

: Fix incorrect handling of signed zeros in complex constructor
for complex subclasses and for inputs having a __complex__ method. Patch
by Serhiy Storchaka.

: Fixed possibly dereferencing undefined pointers when creating
weakref objects.

: Fixed use-after-free problem in key sharing dict.

: Prevent RunMainFromImporter overwriting sys.path[0].

: Fixed possible BytesWarning when compare the code objects.
Warnings could be emitted at compile time.

: Fixed a crash when pass the iterable keyword argument to
sorted().

: Fix memory leak and use-after-free in os module
(path_converter).

: Fix regression in bytes(x) when x.__index__() raises Exception.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Do not include <sys/random.h> if it does not exist.

: Correct the positioning of the syntax error caret for indented
blocks. Based on patch by Michael Layzell.

: Fixed bytes formatting of octals with zero padding in alternate
form.

: On Android, operating system data is now always encoded/decoded
to/from UTF-8, instead of the locale encoding to avoid inconsistencies
with os.fsencode() and os.fsdecode() which are already using UTF-8.

: functools.lru_cache() was susceptible to an obscure reentrancy
bug triggerable by a monkey-patched len() function.

: f-string expressions are no longer accepted as docstrings and
by ast.literal_eval() even if they do not include expressions.

: Fixed setting the offset attribute of SyntaxError by
PyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().

: Fix the cross compilation of xxlimited when Python has been
built with Py_DEBUG defined.

: Optimize _PyDict_NewPresized() to create correct size dict.
Improve speed of dict literal with constant keys up to 30%.

================================================================================

# Changelog - Library (Part 1)

List:
: Update zlib to 1.2.11.
: Allow use of path-like object as a single argument in
ConfigParser.read(). Patch by David Ellis.
: Fix out of bound iteration in
asyncio.Future.remove_done_callback implemented in C.
: asyncio.subprocess.SubprocessStreamProtocol no longer closes
before all pipes are closed.
: Fix Task.current_task and Task.all_tasks implemented in C to
accept None argument as their pure Python implementation.
: Fix asyncio to support instantiation of new event loops in
child processes.
: Fix assertion error in threading._DummyThread.is_alive().
: Add a test that checks that cwd parameter of Popen() accepts
PathLike objects.  Patch by Sayan Chowdhury.
: Start a transaction implicitly before a DML statement. Patch by
Aviv Palivoda.
: Altering a kwarg dictionary passed to functools.partial() no
longer affects a partial object after creation.
: Fix file object leak in aifc.open() when file is given as a
filesystem path and is not in valid AIFF format. Patch by Anthony Zhang.
: Various updates to typing module: typing.Counter,
typing.ChainMap, improved ABC caching, etc. Original PRs by Jelle
Zijlstra, Ivan Levkivskyi, Manuel Krebber, and Åukasz Langa.
: Fix datetime.fromtimestamp() regression introduced in Python
3.6.0: check minimum and maximum years.
: Fix weakref spewing exceptions during interpreter shutdown when
used with a rare combination of multiprocessing and custom codecs.
: Prevent infinite loop in pathlib.Path.mkdir
: Fixed out-of-bounds buffer access in the group() method of the
match object. Based on patch by WGH.
: Fix subprocess.Popen.wait() when the child process has exited
to a stopped instead of terminated state (ex: when under ptrace).
: Fix a regression in argparse that help messages would wrap at
non-breaking spaces.
: Fixed the comparison of mock.MagickMock with mock.ANY.
: Restore the provisional status of typing module, add
corresponding note to documentation. Patch by Ivan L.
: Fixed infinite recursion in the repr of uninitialized
ctypes.CDLL instances.
: Fix an important omission by adding Deque to the typing module.
: Fixed race condition in C implementation of
functools.lru_cache. KeyError could be raised when cached function with
full cache was simultaneously called from different threads with the same
uncached arguments.
: In urllib.request, suffixes in no_proxy environment variable
with leading dots could match related hostnames again (e.g. .b.c matches
a.b.c). Patch by Milan Oberkirch.
: Fix unittest.mock._Call helper: donât ignore the name parameter
anymore. Patch written by Jiajun Huang.
: functools.lru_cache() now respects  and preserves the
order of keyword arguments.  f(a=1, b=2) is now cached separately from
f(b=2, a=1) since both calls could potentially give different results.
: inspect.getframeinfo() now correctly shows the first line of a
context. Patch by Sam Breese.
: Offsets in a ZIP file created with extern file object and modes
âwâ and âxâ now are relative to the start of the file.
: Allow random.Random.seed() to use high quality OS randomness
rather than the pid and time.
: Fixed bug in secrets.randbelow() which would hang when given a
negative input.  Patch by Brendan Donegan.
: Prevent infinite loop in pathlib.resolve() on Windows
: Fixed recursion errors in large or resized
curses.textpad.Textbox.  Based on patch by Tycho Andersen.
: Fix weakrefs in the pure python version of
collections.OrderedDict move_to_end() method. Contributed by Andra
Bogildea.
: curses.ascii predicates now work correctly with negative
integers.
: old keys should not remove new values from WeakValueDictionary
when collecting from another thread.
: Remove editor artifacts from Tix.py.
: Neaten-up empty population error on random.choice() by
suppressing the upstream exception.
: Fixed a crash when deallocate deep ElementTree.
: Fix bugs in WeakValueDictionary.setdefault() and
WeakValueDictionary.pop() when a GC collection happens in another thread.
: Fixed a crash in resource.prlimit() when passing a sequence
that doesnât own its elements as limits.
: multiprocessing.set_forkserver_preload() would crash the
forkserver process if a preloaded module instantiated some multiprocessing
objects such as locks.
: dbm.dumb now supports reading read-only files and no longer
writes the index file when it is not changed.
: The chown() method of the tarfile.TarFile class does not fail
now when the grp module cannot be imported, as for example on Android
platforms.

================================================================================

# Changelog - Library (Part 2)

: Update zlib to 1.2.11.

: Allow use of path-like object as a single argument in
ConfigParser.read(). Patch by David Ellis.

: Fix out of bound iteration in
asyncio.Future.remove_done_callback implemented in C.

: asyncio.subprocess.SubprocessStreamProtocol no longer closes
before all pipes are closed.

: Fix Task.current_task and Task.all_tasks implemented in C to
accept None argument as their pure Python implementation.

: Fix asyncio to support instantiation of new event loops in
child processes.

: Fix assertion error in threading._DummyThread.is_alive().

: Add a test that checks that cwd parameter of Popen() accepts
PathLike objects.  Patch by Sayan Chowdhury.

: Start a transaction implicitly before a DML statement. Patch by
Aviv Palivoda.

: Altering a kwarg dictionary passed to functools.partial() no
longer affects a partial object after creation.

: Fix file object leak in aifc.open() when file is given as a
filesystem path and is not in valid AIFF format. Patch by Anthony Zhang.

: Various updates to typing module: typing.Counter,
typing.ChainMap, improved ABC caching, etc. Original PRs by Jelle
Zijlstra, Ivan Levkivskyi, Manuel Krebber, and Åukasz Langa.

================================================================================

# Changelog - Library (Part 3)

: Fix datetime.fromtimestamp() regression introduced in Python
3.6.0: check minimum and maximum years.

: Fix weakref spewing exceptions during interpreter shutdown when
used with a rare combination of multiprocessing and custom codecs.

: Prevent infinite loop in pathlib.Path.mkdir

: Fixed out-of-bounds buffer access in the group() method of the
match object. Based on patch by WGH.

: Fix subprocess.Popen.wait() when the child process has exited
to a stopped instead of terminated state (ex: when under ptrace).

: Fix a regression in argparse that help messages would wrap at
non-breaking spaces.

: Fixed the comparison of mock.MagickMock with mock.ANY.

: Restore the provisional status of typing module, add
corresponding note to documentation. Patch by Ivan L.

: Fixed infinite recursion in the repr of uninitialized
ctypes.CDLL instances.

: Fix an important omission by adding Deque to the typing module.

: Fixed race condition in C implementation of
functools.lru_cache. KeyError could be raised when cached function with
full cache was simultaneously called from different threads with the same
uncached arguments.

================================================================================

# Changelog - Library (Part 4)

: In urllib.request, suffixes in no_proxy environment variable
with leading dots could match related hostnames again (e.g. .b.c matches
a.b.c). Patch by Milan Oberkirch.

: Fix unittest.mock._Call helper: donât ignore the name parameter
anymore. Patch written by Jiajun Huang.

: functools.lru_cache() now respects  and preserves the
order of keyword arguments.  f(a=1, b=2) is now cached separately from
f(b=2, a=1) since both calls could potentially give different results.

: inspect.getframeinfo() now correctly shows the first line of a
context. Patch by Sam Breese.

: Offsets in a ZIP file created with extern file object and modes
âwâ and âxâ now are relative to the start of the file.

: Allow random.Random.seed() to use high quality OS randomness
rather than the pid and time.

: Fixed bug in secrets.randbelow() which would hang when given a
negative input.  Patch by Brendan Donegan.

: Prevent infinite loop in pathlib.resolve() on Windows

: Fixed recursion errors in large or resized
curses.textpad.Textbox.  Based on patch by Tycho Andersen.

: Fix weakrefs in the pure python version of
collections.OrderedDict move_to_end() method. Contributed by Andra
Bogildea.

================================================================================

# Changelog - Library (Part 5)

: curses.ascii predicates now work correctly with negative
integers.

: old keys should not remove new values from WeakValueDictionary
when collecting from another thread.

: Remove editor artifacts from Tix.py.

: Neaten-up empty population error on random.choice() by
suppressing the upstream exception.

: Fixed a crash when deallocate deep ElementTree.

: Fix bugs in WeakValueDictionary.setdefault() and
WeakValueDictionary.pop() when a GC collection happens in another thread.

: Fixed a crash in resource.prlimit() when passing a sequence
that doesnât own its elements as limits.

: multiprocessing.set_forkserver_preload() would crash the
forkserver process if a preloaded module instantiated some multiprocessing
objects such as locks.

: dbm.dumb now supports reading read-only files and no longer
writes the index file when it is not changed.

: The chown() method of the tarfile.TarFile class does not fail
now when the grp module cannot be imported, as for example on Android
platforms.

================================================================================

# Changelog - IDLE

List:
: IDLE colors f-string prefixes (but not invalid ur prefixes).
: Add 10% to coverage of IDLEâs test_configdialog. Update and
augment description of the configuration system.

: IDLE colors f-string prefixes (but not invalid ur prefixes).

: Add 10% to coverage of IDLEâs test_configdialog. Update and
augment description of the configuration system.

================================================================================

# Changelog - Windows

List:
: Removes readme.txt from the installer
: Ignores blank lines in ._pth files (Patch by Alexey Izbyshev)
: Correctly handle special console filenames (patch by Eryk Sun)
: Implement  for io.FileIO (Patch by Eryk Sun)
: Prevent crash when passing invalid arguments into msvcrt
module.
: winreg does not truncate string correctly (Patch by Eryk Sun)
: Deprecate WindowsRegistryFinder and disable it by default.

: Removes readme.txt from the installer

: Ignores blank lines in ._pth files (Patch by Alexey Izbyshev)

: Correctly handle special console filenames (patch by Eryk Sun)

: Implement  for io.FileIO (Patch by Eryk Sun)

: Prevent crash when passing invalid arguments into msvcrt
module.

: winreg does not truncate string correctly (Patch by Eryk Sun)

: Deprecate WindowsRegistryFinder and disable it by default.

================================================================================

# Changelog - C API (Part 1)

List:
: Function PySlice_GetIndicesEx() is replaced with a macro if
Py_LIMITED_API is not set or set to the value between 0x03050400 and
0x03060000 (not including) or 0x03060100 or higher.
: Fixed the declaration of some public API functions.
PyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in
limited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and
Py_BuildValue() were not available in limited API of version < 3.3 when
PY_SSIZE_T_CLEAN is defined.
: All stable API extensions added after Python 3.2 are now
available only when Py_LIMITED_API is set to the PY_VERSION_HEX value of
the minimum Python version supporting this API.

: Function PySlice_GetIndicesEx() is replaced with a macro if
Py_LIMITED_API is not set or set to the value between 0x03050400 and
0x03060000 (not including) or 0x03060100 or higher.

: Fixed the declaration of some public API functions.
PyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in
limited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and
Py_BuildValue() were not available in limited API of version < 3.3 when
PY_SSIZE_T_CLEAN is defined.

================================================================================

# Changelog - C API (Part 2)

: All stable API extensions added after Python 3.2 are now
available only when Py_LIMITED_API is set to the PY_VERSION_HEX value of
the minimum Python version supporting this API.

================================================================================

# Changelog - Documentation

List:
: Link the documentation to its source file on GitHub.
: Document smtpd.py as effectively deprecated and add a pointer
to aiosmtpd, a third-party asyncio-based replacement.
: Add canonical header link on each page to corresponding major
version of the documentation. Patch by Matthias Bussonnier.
: Fix Python 2 syntax in code for building the documentation.

: Link the documentation to its source file on GitHub.

: Document smtpd.py as effectively deprecated and add a pointer
to aiosmtpd, a third-party asyncio-based replacement.

: Add canonical header link on each page to corresponding major
version of the documentation. Patch by Matthias Bussonnier.

: Fix Python 2 syntax in code for building the documentation.

================================================================================

# Changelog - Tests (Part 1)

List:
: Skip test_asyncore and test_eintr poll failures on macOS. Skip
some tests of select.poll when running on macOS due to unresolved issues
with the underlying system poll function on some macOS versions.
: to match the behaviour of the  flag,
test_re.test_locale_flag now uses locale.getpreferredencoding(False)
to determine the candidate encoding for the test regex (allowing it to
correctly skip the test when the default locale encoding is a multi-byte
encoding)
: Disallow -j0 to be combined with -T/-l in regrtest command line
arguments.
: Fix the tests that bind() a unix socket and raise
PermissionError on Android for a non-root user.
: Add the support.setswitchinterval() function to fix
test_functools hanging on the Android armv7 qemu emulator.

: Skip test_asyncore and test_eintr poll failures on macOS. Skip
some tests of select.poll when running on macOS due to unresolved issues
with the underlying system poll function on some macOS versions.

================================================================================

# Changelog - Tests (Part 2)

: to match the behaviour of the  flag,
test_re.test_locale_flag now uses locale.getpreferredencoding(False)
to determine the candidate encoding for the test regex (allowing it to
correctly skip the test when the default locale encoding is a multi-byte
encoding)

: Disallow -j0 to be combined with -T/-l in regrtest command line
arguments.

: Fix the tests that bind() a unix socket and raise
PermissionError on Android for a non-root user.

: Add the support.setswitchinterval() function to fix
test_functools hanging on the Android armv7 qemu emulator.

================================================================================

# Changelog - Build (Part 1)

List:
: sys.version and the platform module python_build(),
python_branch(), and python_revision() functions now use git information
rather than hg when building from a repo.
: Update Windows build and OS X installers to use OpenSSL 1.0.2k.
: Set Android compilation and link flags.
: Fix implicit declaration of function _setmode. Patch by
Masayuki Yamamoto
: Removes hard dependency on hg.exe from PCBuild/build.bat
: Added missed names to PC/python3.def.
: lockf() is available on Android API level 24, but the F_LOCK
macro is not defined in android-ndk-r13.
: Fix the compilation error that occurs because if_nameindex() is
available on Android API level 24, but the if_nameindex structure is not
defined.
: Do not add the directory for installing C header files and the
directory for installing object code libraries to the cross compilation
search paths. Original patch by Thomas Petazzoni.
: Do not define sys.implementation._multiarch on Android.

: sys.version and the platform module python_build(),
python_branch(), and python_revision() functions now use git information
rather than hg when building from a repo.

: Update Windows build and OS X installers to use OpenSSL 1.0.2k.

================================================================================

# Changelog - Build (Part 2)

: Set Android compilation and link flags.

: Fix implicit declaration of function _setmode. Patch by
Masayuki Yamamoto

: Removes hard dependency on hg.exe from PCBuild/build.bat

: Added missed names to PC/python3.def.

: lockf() is available on Android API level 24, but the F_LOCK
macro is not defined in android-ndk-r13.

: Fix the compilation error that occurs because if_nameindex() is
available on Android API level 24, but the if_nameindex structure is not
defined.

: Do not add the directory for installing C header files and the
directory for installing object code libraries to the cross compilation
search paths. Original patch by Thomas Petazzoni.

: Do not define sys.implementation._multiarch on Android.

================================================================================

# Changelog - Python 3.6.0 final

Release date: 2016-12-23

No changes since release candidate 2

================================================================================

# Changelog - Core and Builtins

List:
: Fix a memory leak in split-table dictionaries: setattr() must
not convert combined table into split table. Patch written by INADA Naoki.
: Fix asyncio SSL hanging if connection is closed before
handshake is completed. (Patch by HoHo-Ho)

: Fix a memory leak in split-table dictionaries: setattr() must
not convert combined table into split table. Patch written by INADA Naoki.

: Fix asyncio SSL hanging if connection is closed before
handshake is completed. (Patch by HoHo-Ho)

================================================================================

# Changelog - Tools/Demos

List:
: Fix python-gdb.py for fastcalls.

: Fix python-gdb.py for fastcalls.

================================================================================

# Changelog - Windows

List:
: Deprecate WindowsRegistryFinder.

: Deprecate WindowsRegistryFinder.

================================================================================

# Changelog - Build

List:
: Prevent gdb build errors due to HAVE_LONG_LONG redefinition.

: Prevent gdb build errors due to HAVE_LONG_LONG redefinition.

================================================================================

# Changelog - Core and Builtins

List:
: Rather than silently producing a class that doesnât support
zero-argument  in methods, failing to pass the new
__classcell__ namespace entry up to type.__new__ now results in a
DeprecationWarning and a class that supports zero-argument
.
: Modifying the class __dict__ inside the __set_name__ method of
a descriptor that is used inside that class no longer prevents calling the
__set_name__ method of other descriptors.
: Fix a bug in the implementation   when checking if
the next instruction is YIELD_FROM. Regression introduced by WORDCODE
().

: Rather than silently producing a class that doesnât support
zero-argument  in methods, failing to pass the new
__classcell__ namespace entry up to type.__new__ now results in a
DeprecationWarning and a class that supports zero-argument
.

: Modifying the class __dict__ inside the __set_name__ method of
a descriptor that is used inside that class no longer prevents calling the
__set_name__ method of other descriptors.

: Fix a bug in the implementation   when checking if
the next instruction is YIELD_FROM. Regression introduced by WORDCODE
().

================================================================================

# Changelog - Library (Part 1)

List:
: Unknown escapes in re.sub() replacement template are allowed
again.  But they still are deprecated and will be disabled in 3.7.
: Fix a regression introduced in warnings.catch_warnings(): call
warnings.showwarning() if it was overridden inside the context manager.
: To assist with upgrades from 2.7, the previously documented
deprecation of inspect.getfullargspec() has been reversed. This
decision may be revisited again after the Python 2.7 branch is no longer
officially supported.
: Add new socket.TCP_CONGESTION (Linux 2.6.13) and
socket.TCP_USER_TIMEOUT (Linux 2.6.37) constants. Patch written
by Omar Sandoval.
: Reading a corrupt config file left configparser in an invalid
state. Original patch by Florian HÃ¶ch.
: Fix asyncio C Task to handle exceptions __traceback__.

: Unknown escapes in re.sub() replacement template are allowed
again.  But they still are deprecated and will be disabled in 3.7.

: Fix a regression introduced in warnings.catch_warnings(): call
warnings.showwarning() if it was overridden inside the context manager.

================================================================================

# Changelog - Library (Part 2)

: To assist with upgrades from 2.7, the previously documented
deprecation of inspect.getfullargspec() has been reversed. This
decision may be revisited again after the Python 2.7 branch is no longer
officially supported.

: Add new socket.TCP_CONGESTION (Linux 2.6.13) and
socket.TCP_USER_TIMEOUT (Linux 2.6.37) constants. Patch written
by Omar Sandoval.

: Reading a corrupt config file left configparser in an invalid
state. Original patch by Florian HÃ¶ch.

: Fix asyncio C Task to handle exceptions __traceback__.

================================================================================

# Changelog - C API

List:
: PyUnicode_CompareWithASCIIString() now never raises exceptions.

: PyUnicode_CompareWithASCIIString() now never raises exceptions.

================================================================================

# Changelog - Documentation

List:
: The data model reference and the porting section in the Whatâs
New guide now cover the additional __classcell__ handling needed for
custom metaclasses to fully support  and zero-argument
.

: The data model reference and the porting section in the Whatâs
New guide now cover the additional __classcell__ handling needed for
custom metaclasses to fully support  and zero-argument
.

================================================================================

# Changelog - Tools/Demos

List:
: Fix python-gdb.py didnât support new dict implementation.

: Fix python-gdb.py didnât support new dict implementation.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Show sys.version when -V option is supplied twice.
: The with-statement now checks for __enter__ before it checks
for __exit__. This gives less confusing error messages when both methods
are missing. Patch by Jonathan Ellington.
: Fix the set_inheritable() file descriptor method on platforms
that do not have the ioctl FIOCLEX and FIONCLEX commands.
: Fix not getting the localeâs charset upon initializing the
interpreter, on platforms that do not have langinfo.
: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
when decode astral characters.  Patch by Xiang Zhang.
: Extra slash no longer added to sys.path components in case of
empty compile-time PYTHONPATH components.
: Improve speed of the STORE_DEREF opcode by 40%.
: PyDict_SetDefault didnât combine split table when needed. Patch
by Xiang Zhang.
: Change PendingDeprecationWarning -> DeprecationWarning. As it
was agreed in the issue, __aiter__ returning an awaitable should result in
PendingDeprecationWarning in 3.5 and in DeprecationWarning in 3.6.
: Fix a refleak in code that raises DeprecationWarning.
: Fix asynchronous generators aclose() and athrow() to handle
StopAsyncIteration propagation properly.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Show sys.version when -V option is supplied twice.

: The with-statement now checks for __enter__ before it checks
for __exit__. This gives less confusing error messages when both methods
are missing. Patch by Jonathan Ellington.

: Fix the set_inheritable() file descriptor method on platforms
that do not have the ioctl FIOCLEX and FIONCLEX commands.

: Fix not getting the localeâs charset upon initializing the
interpreter, on platforms that do not have langinfo.

: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
when decode astral characters.  Patch by Xiang Zhang.

: Extra slash no longer added to sys.path components in case of
empty compile-time PYTHONPATH components.

: Improve speed of the STORE_DEREF opcode by 40%.

: PyDict_SetDefault didnât combine split table when needed. Patch
by Xiang Zhang.

: Change PendingDeprecationWarning -> DeprecationWarning. As it
was agreed in the issue, __aiter__ returning an awaitable should result in
PendingDeprecationWarning in 3.5 and in DeprecationWarning in 3.6.

: Fix a refleak in code that raises DeprecationWarning.

: Fix asynchronous generators aclose() and athrow() to handle
StopAsyncIteration propagation properly.

================================================================================

# Changelog - Library (Part 1)

List:
: Restored the __reduce__() methods of datetime objects.
: Regular expression patterns, _sre.SRE_Pattern objects created
by re.compile(), become comparable (only x==y and x!=y operators). This
change should fix the : donât duplicate warning filters when
the warnings module is reloaded (thing usually only done in unit tests).
: The subprocess.Popen.wait methodâs undocumented endtime
parameter now raises a DeprecationWarning.
: In ctypes, prevent a crash calling the from_buffer() and
from_buffer_copy() methods on abstract classes like Array.
: Makes Path.resolve() succeed on paths that do not exist. Patch
by Vajrasky Kok
: Fixed possible DoS and arbitrary code execution when handle
plural form selections in the gettext module.  The expression parser now
supports exact syntax supported by GNU gettext.
: Fixed possible crash in _io.TextIOWrapper deallocator when the
garbage collector is invoked in other thread.  Based on patch by Sebastian
Cufre.
: Optimize loop.call_soon.
: Fix get_event_loop() return the current loop if called from
coroutines/callbacks.
: Fix asyncio.isfuture() to support unittest.Mock.
: Fix refleak in _asyncio.Future.__iter__().throw.
: Fix inspect.isawaitable to always return bool Patch by Justin
Mayfield.
: Make loop methods reject socket kinds they do not support.
: Fix a refleak in functools.lru_cache.
: Fix asyncio.iscoroutinefunction to handle Mock objects.
: Fix create_unix_server to support Path-like objects (PEP 519).
: Add collections.abc.AsyncGenerator.

================================================================================

# Changelog - Library (Part 2)

: Restored the __reduce__() methods of datetime objects.

: Regular expression patterns, _sre.SRE_Pattern objects created
by re.compile(), become comparable (only x==y and x!=y operators). This
change should fix the : donât duplicate warning filters when
the warnings module is reloaded (thing usually only done in unit tests).

: The subprocess.Popen.wait methodâs undocumented endtime
parameter now raises a DeprecationWarning.

: In ctypes, prevent a crash calling the from_buffer() and
from_buffer_copy() methods on abstract classes like Array.

: Makes Path.resolve() succeed on paths that do not exist. Patch
by Vajrasky Kok

: Fixed possible DoS and arbitrary code execution when handle
plural form selections in the gettext module.  The expression parser now
supports exact syntax supported by GNU gettext.

: Fixed possible crash in _io.TextIOWrapper deallocator when the
garbage collector is invoked in other thread.  Based on patch by Sebastian
Cufre.

: Optimize loop.call_soon.

: Fix get_event_loop() return the current loop if called from
coroutines/callbacks.

: Fix asyncio.isfuture() to support unittest.Mock.

: Fix refleak in _asyncio.Future.__iter__().throw.

================================================================================

# Changelog - Library (Part 3)

: Fix inspect.isawaitable to always return bool Patch by Justin
Mayfield.

: Make loop methods reject socket kinds they do not support.

: Fix a refleak in functools.lru_cache.

: Fix asyncio.iscoroutinefunction to handle Mock objects.

: Fix create_unix_server to support Path-like objects (PEP 519).

: Add collections.abc.AsyncGenerator.

================================================================================

# Changelog - Documentation

List:
: Documented command-line interface of zipfile.

: Documented command-line interface of zipfile.

================================================================================

# Changelog - Tests

List:
: Now test.support.rmtree is able to remove unwritable or
unreadable directories.
: Various caches now are cleared before running every test file.

: Now test.support.rmtree is able to remove unwritable or
unreadable directories.

: Various caches now are cleared before running every test file.

================================================================================

# Changelog - Build

List:
: Fix out-of-tree building on AIX.  Patch by Tristan Carel and
Michael Haubenwallner.
: Rename âwith-optimiations to âenable-optimizations.
: Prevent missing âgetentropyâ declaration warning on macOS.
Patch by Gareth Rees.

: Fix out-of-tree building on AIX.  Patch by Tristan Carel and
Michael Haubenwallner.

: Rename âwith-optimiations to âenable-optimizations.

: Prevent missing âgetentropyâ declaration warning on macOS.
Patch by Gareth Rees.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Deprecation warning for invalid str and byte escape sequences
now prints better information about where the error occurs. Patch by
Serhiy Storchaka and Eric Smith.
: dict.update() no longer allocate unnecessary large memory.
: Fixed potential crash in PyUnicode_AsDecodedObject() in debug
build.
: Fixed of-by-one error in the peephole optimizer that caused
keeping unreachable code.
: Improved exception reporting for problematic __set_name__
attributes.
: Fixed possible memory leak in _PyTraceback_Add() and exception
loss in PyTraceBack_Here().
: Fix âPython memory allocator called without holding the GILâ
crash in socket.setblocking.

: Deprecation warning for invalid str and byte escape sequences
now prints better information about where the error occurs. Patch by
Serhiy Storchaka and Eric Smith.

: dict.update() no longer allocate unnecessary large memory.

: Fixed potential crash in PyUnicode_AsDecodedObject() in debug
build.

: Fixed of-by-one error in the peephole optimizer that caused
keeping unreachable code.

: Improved exception reporting for problematic __set_name__
attributes.

: Fixed possible memory leak in _PyTraceback_Add() and exception
loss in PyTraceBack_Here().

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix âPython memory allocator called without holding the GILâ
crash in socket.setblocking.

================================================================================

# Changelog - Library (Part 1)

List:
: LZMA compressor and decompressor no longer raise exceptions if
given empty data twice.  Patch by Benjamin Fogle.
: Fixed segfault in cursesâs addch() with ncurses6.
: tarfile.open() with mode ârâ or âr:â now tries to open a tar
file with compression before trying to open it without compression.
Otherwise it had 50% chance failed with ignore_zeros=True.
: The webbrowser module now supports Firefox 36+ and derived
browsers.  Based on patch by Oleg Broytman.
: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused
by representing the scale as float value internally in Tk.  tkinter.IntVar
now works if float value is set to underlying Tk variable.
: The various ways of specifying weights for random.choices() now
produce the same result sequences.
: calendar.TextCalendar().prmonth() no longer prints a space at
the start of new line after printing a monthâs calendar.  Patch by Xiang
Zhang.
: The textwrap.TextWrapper class now honors non-breaking spaces.
Based on patch by Kaarle Ritvanen.
: os.fwalk() no longer fails on broken links.
: Fix iterator of C implemented asyncio.Future doesnât accept
non-None value is passed to it.send(val).
: Generated names for Tkinter widgets now start by the â!â prefix
for readability.
: Fixed HList.header_exists() in tkinter.tix module by addin a
workaround to Tix library bug.
: shutil.make_archive() no longer adds entry â./â to ZIP archive.
: re.sub() now raises an error for invalid numerical group
reference in replacement template even if the pattern is not found in the
string.  Error message for invalid group reference now includes the group
index and the position of the reference. Based on patch by SilentGhost.
: Optimize csv.DictWriter for large number of columns. Patch by
Mariatta Wijaya.
: Fix C implemented asyncio.Future didnât work on Windows.
: Fix error building socket module when multithreading is
disabled.
: Make webbrowser support Chrome on Mac OS X.
: Fix references leaked by pdb in the handling of SIGINT
handlers.
: Fix how StopIteration exception is raised in _asyncio.Future.
: Fix asyncio to handle async gens GC from another thread.
: Fix asyncio.Gather to refuse being cancelled once all children
are done. Patch by Johannes Ebke.
: Donât configure the number of workers for default threadpool
executor. Initial patch by Hans Lawrenz.
: Implement asyncio.Task in C.

================================================================================

# Changelog - Library (Part 2)

: LZMA compressor and decompressor no longer raise exceptions if
given empty data twice.  Patch by Benjamin Fogle.

: Fixed segfault in cursesâs addch() with ncurses6.

: tarfile.open() with mode ârâ or âr:â now tries to open a tar
file with compression before trying to open it without compression.
Otherwise it had 50% chance failed with ignore_zeros=True.

: The webbrowser module now supports Firefox 36+ and derived
browsers.  Based on patch by Oleg Broytman.

: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused
by representing the scale as float value internally in Tk.  tkinter.IntVar
now works if float value is set to underlying Tk variable.

: The various ways of specifying weights for random.choices() now
produce the same result sequences.

: calendar.TextCalendar().prmonth() no longer prints a space at
the start of new line after printing a monthâs calendar.  Patch by Xiang
Zhang.

: The textwrap.TextWrapper class now honors non-breaking spaces.
Based on patch by Kaarle Ritvanen.

: os.fwalk() no longer fails on broken links.

: Fix iterator of C implemented asyncio.Future doesnât accept
non-None value is passed to it.send(val).

================================================================================

# Changelog - Library (Part 3)

: Generated names for Tkinter widgets now start by the â!â prefix
for readability.

: Fixed HList.header_exists() in tkinter.tix module by addin a
workaround to Tix library bug.

: shutil.make_archive() no longer adds entry â./â to ZIP archive.

: re.sub() now raises an error for invalid numerical group
reference in replacement template even if the pattern is not found in the
string.  Error message for invalid group reference now includes the group
index and the position of the reference. Based on patch by SilentGhost.

: Optimize csv.DictWriter for large number of columns. Patch by
Mariatta Wijaya.

: Fix C implemented asyncio.Future didnât work on Windows.

: Fix error building socket module when multithreading is
disabled.

: Make webbrowser support Chrome on Mac OS X.

: Fix references leaked by pdb in the handling of SIGINT
handlers.

: Fix how StopIteration exception is raised in _asyncio.Future.

: Fix asyncio to handle async gens GC from another thread.

: Fix asyncio.Gather to refuse being cancelled once all children
are done. Patch by Johannes Ebke.

: Donât configure the number of workers for default threadpool
executor. Initial patch by Hans Lawrenz.

: Implement asyncio.Task in C.

================================================================================

# Changelog - Windows

List:
: Fixes mishandled buffer reallocation in getpathp.c

: Fixes mishandled buffer reallocation in getpathp.c

================================================================================

# Changelog - Build

List:
: Fix missing extensions modules when cross compiling.
: Update Windows build and OS X installers to use SQLite 3.14.2.
: Update Windows build and OS X installers to use OpenSSL 1.0.2j.

: Fix missing extensions modules when cross compiling.

: Update Windows build and OS X installers to use SQLite 3.14.2.

: Update Windows build and OS X installers to use OpenSSL 1.0.2j.

================================================================================

# Changelog - Tests

List:
: Fix test_posix for Android where âid -Gâ is entirely wrong or
missing the effective gid.
: regrtest: fix the parser of command line arguments.

: Fix test_posix for Android where âid -Gâ is entirely wrong or
missing the effective gid.

: regrtest: fix the parser of command line arguments.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Optimize and cleanup dict iteration.
: Added C implementation of asyncio.Future. Original patch by
Yury Selivanov.
: Added sanity checks and tests for PyUnicode_CopyCharacters().
Patch by Xiang Zhang.
: The type of long range iterator is now registered as Iterator.
Patch by Oren Milman.
: Creating instances of range_iterator by calling range_iterator
type now is deprecated.  Patch by Oren Milman.
: The constructor of range_iterator now checks that step is not
0. Patch by Oren Milman.
: Resolving special methods of uninitialized type now causes
implicit initialization of the type instead of a fail.
: PyType_Ready() now checks that tp_name is not NULL. Original
patch by Niklas Koep.
: Fixed possible crash when AST is changed in process of
compiling it.
: Dict reduces possibility of 2nd conflict in hash table when
hashes have same lower bits.
: String constants with null character no longer interned.
: Fix crash when GC runs during weakref callbacks.
: String constants now interned recursively in tuples and
frozensets.
: Fixed misleading error message when ImportError called with
invalid keyword args.
: Fix incorrect type in complex(1.0, {2:3}) error message. Patch
by Soumya Sharma.
: Single var-positional argument of tuple subtype was passed
unscathed to the C-defined function.  Now it is converted to exact tuple.
: Now __set_name__ is looked up on the class instead of the
instance.
: Fallback on reading /dev/urandom device when the getrandom()
syscall fails with EPERM, for example when blocked by SECCOMP.
: Donât import readline in isolated mode.
Upgrade internal unicode databases to Unicode version 9.0.0.
: Fix a regression in zipimportâs compile_source().  zipimport
should use the same optimization level as the interpreter.
: Replace Py_MEMCPY with memcpy(). Visual Studio can properly
optimize memcpy().
: Fix dict.pop() for splitted dictionary when trying to remove a
âpending keyâ (Not yet inserted in split-table). Patch by Xiang Zhang.
: Raise DeprecationWarning when async and await keywords are used
as variable/attribute/class/function name.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Optimize and cleanup dict iteration.

: Added C implementation of asyncio.Future. Original patch by
Yury Selivanov.

: Added sanity checks and tests for PyUnicode_CopyCharacters().
Patch by Xiang Zhang.

: The type of long range iterator is now registered as Iterator.
Patch by Oren Milman.

: Creating instances of range_iterator by calling range_iterator
type now is deprecated.  Patch by Oren Milman.

: The constructor of range_iterator now checks that step is not
0. Patch by Oren Milman.

: Resolving special methods of uninitialized type now causes
implicit initialization of the type instead of a fail.

: PyType_Ready() now checks that tp_name is not NULL. Original
patch by Niklas Koep.

: Fixed possible crash when AST is changed in process of
compiling it.

: Dict reduces possibility of 2nd conflict in hash table when
hashes have same lower bits.

: String constants with null character no longer interned.

: Fix crash when GC runs during weakref callbacks.

: String constants now interned recursively in tuples and
frozensets.

: Fixed misleading error message when ImportError called with
invalid keyword args.

: Fix incorrect type in complex(1.0, {2:3}) error message. Patch
by Soumya Sharma.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Single var-positional argument of tuple subtype was passed
unscathed to the C-defined function.  Now it is converted to exact tuple.

: Now __set_name__ is looked up on the class instead of the
instance.

: Fallback on reading /dev/urandom device when the getrandom()
syscall fails with EPERM, for example when blocked by SECCOMP.

: Donât import readline in isolated mode.

Upgrade internal unicode databases to Unicode version 9.0.0.

: Fix a regression in zipimportâs compile_source().  zipimport
should use the same optimization level as the interpreter.

: Replace Py_MEMCPY with memcpy(). Visual Studio can properly
optimize memcpy().

: Fix dict.pop() for splitted dictionary when trying to remove a
âpending keyâ (Not yet inserted in split-table). Patch by Xiang Zhang.

: Raise DeprecationWarning when async and await keywords are used
as variable/attribute/class/function name.

================================================================================

# Changelog - Library (Part 1)

List:
: Fixed bytes path support in os.scandir() on Windows. Patch by
Eryk Sun.
: The disassembler now decodes FORMAT_VALUE argument.
: Fixed writing ZIP files that starts not from the start of the
file.  Offsets in ZIP file now are relative to the start of the archive in
conforming to the specification.
: unittest.mock Mock autospec functions now properly support
assert_called, assert_not_called, and assert_called_once.
: remove statistics.geometric_mean and defer until 3.7.
: lzma module now supports pathlib.
: Fixed writing non-BMP characters with binary format in
plistlib.
: bz2 module now supports pathlib.  Initial patch by Ethan
Furman.
: gzip now supports pathlib.  Patch by Ethan Furman.
: Optimized merging var-keyword arguments and improved error
message when passing a non-mapping as a var-keyword argument.
: Improved error message when passing a non-iterable as a
var-positional argument.  Added opcode BUILD_TUPLE_UNPACK_WITH_CALL.
: Fixed possible crashes when unpickle itertools objects from
incorrect pickle data.  Based on patch by John Leitch.
: imghdr now supports pathlib.
: compileall now supports pathlib.
: Fix function declaration (C flags) for the getiterator() method
of xml.etree.ElementTree.Element.
: Stop using localtime() and gmtime() in the time module.
Introduced platform independent _PyTime_localtime API that is similar to
POSIX localtime_r, but available on all platforms.  Patch by Ed Schouten.
: Fixed calendar functions for extreme months: 0001-01 and
9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so
that they donât call itermonthdates() which can cause datetime.date
under/overflow.
: Fixed possible use after free in the decompress() methods of
the LZMADecompressor and BZ2Decompressor classes. Original patch by John
Leitch.
: Fixed possible crash in sqlite3.Connection.create_collation()
if pass invalid string-like object as a name.  Patch by Xiang Zhang.
: random.choices() now has k as a keyword-only argument to
improve the readability of common cases and come into line with the
signature used in other languages.
: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.
Patch by Madison May.
: Fixed support of default root window in the tkinter.tix module.
Added the master parameter in the DisplayStyle constructor.
: In the traceback module, restore the formatting of exception
messages like âException: Noneâ.  This fixes a regression introduced in
3.5a2.
: Allow false values to be used for msg parameter of subTest().
: Fix a memory leak in os.getrandom() when the getrandom() is
interrupted by a signal and a signal handler raises a Python exception.
: Fix memory leak on Windows in the os module (fix
path_converter() function).
: RobotFileParser now correctly returns default values for
crawl_delay and request_rate.  Initial patch by Peter Wirtz.
: Prevent memory leak in win32_ver().
Fix UnboundLocalError in socket._sendfile_use_sendfile.
: Check for ERROR_ACCESS_DENIED in Windows implementation of
os.stat().  Patch by Eryk Sun.
: Warning message emitted by using inline flags in the middle of
regular expression now contains a (truncated) regex pattern. Patch by Tim
Graham.
: Prevent codecs.escape_encode() from raising SystemError when an
empty bytestring is passed.
: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.
: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by
Gergely Imreh and Markus Holtermann.
: Fix a crash in parse_envlist() when env contains byte strings.
Patch by Eryk Sun.
: Fixed buffer overrun in binascii.b2a_qp() and
binascii.a2b_qp().
: Fix socket accept exhaustion during high TCP traffic. Patch by
Kevin Conway.
: Handle when SO_REUSEPORT isnât properly supported. Patch by
Seth Michael Larson.
: Inspect functools.partial in asyncio.Handle.__repr__. Patch by
iceboy.
: Fix slow pipes IO in asyncio. Patch by INADA Naoki.
: Fix callbacks race in asyncio.SelectorLoop.sock_connect.
: Fix selectors incorrectly retain invalid file descriptors.
Patch by Mark Williams.
: Refuse monitoring processes if the child watcher has no loop
attached. Patch by Vincent Michel.
: Raise RuntimeError when transportâs FD is used with add_reader,
add_writer, etc.
: Speedup asyncio.StreamReader.readexactly. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.
: Deprecate passing asyncio.Handles to run_in_executor.
: Fix asyncio to support formatting of non-python coroutines.
: Remove UNIX socket from FS before binding. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.
: Prohibit Tasks to await on themselves.

================================================================================

# Changelog - Library (Part 2)

: Fixed bytes path support in os.scandir() on Windows. Patch by
Eryk Sun.

: The disassembler now decodes FORMAT_VALUE argument.

: Fixed writing ZIP files that starts not from the start of the
file.  Offsets in ZIP file now are relative to the start of the archive in
conforming to the specification.

: unittest.mock Mock autospec functions now properly support
assert_called, assert_not_called, and assert_called_once.

: remove statistics.geometric_mean and defer until 3.7.

: lzma module now supports pathlib.

: Fixed writing non-BMP characters with binary format in
plistlib.

: bz2 module now supports pathlib.  Initial patch by Ethan
Furman.

: gzip now supports pathlib.  Patch by Ethan Furman.

: Optimized merging var-keyword arguments and improved error
message when passing a non-mapping as a var-keyword argument.

: Improved error message when passing a non-iterable as a
var-positional argument.  Added opcode BUILD_TUPLE_UNPACK_WITH_CALL.

: Fixed possible crashes when unpickle itertools objects from
incorrect pickle data.  Based on patch by John Leitch.

: imghdr now supports pathlib.

: compileall now supports pathlib.

================================================================================

# Changelog - Library (Part 3)

: Fix function declaration (C flags) for the getiterator() method
of xml.etree.ElementTree.Element.

: Stop using localtime() and gmtime() in the time module.
Introduced platform independent _PyTime_localtime API that is similar to
POSIX localtime_r, but available on all platforms.  Patch by Ed Schouten.

: Fixed calendar functions for extreme months: 0001-01 and
9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so
that they donât call itermonthdates() which can cause datetime.date
under/overflow.

: Fixed possible use after free in the decompress() methods of
the LZMADecompressor and BZ2Decompressor classes. Original patch by John
Leitch.

: Fixed possible crash in sqlite3.Connection.create_collation()
if pass invalid string-like object as a name.  Patch by Xiang Zhang.

: random.choices() now has k as a keyword-only argument to
improve the readability of common cases and come into line with the
signature used in other languages.

: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.
Patch by Madison May.

: Fixed support of default root window in the tkinter.tix module.
Added the master parameter in the DisplayStyle constructor.

================================================================================

# Changelog - Library (Part 4)

: In the traceback module, restore the formatting of exception
messages like âException: Noneâ.  This fixes a regression introduced in
3.5a2.

: Allow false values to be used for msg parameter of subTest().

: Fix a memory leak in os.getrandom() when the getrandom() is
interrupted by a signal and a signal handler raises a Python exception.

: Fix memory leak on Windows in the os module (fix
path_converter() function).

: RobotFileParser now correctly returns default values for
crawl_delay and request_rate.  Initial patch by Peter Wirtz.

: Prevent memory leak in win32_ver().

Fix UnboundLocalError in socket._sendfile_use_sendfile.

: Check for ERROR_ACCESS_DENIED in Windows implementation of
os.stat().  Patch by Eryk Sun.

: Warning message emitted by using inline flags in the middle of
regular expression now contains a (truncated) regex pattern. Patch by Tim
Graham.

: Prevent codecs.escape_encode() from raising SystemError when an
empty bytestring is passed.

: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.

: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by
Gergely Imreh and Markus Holtermann.

: Fix a crash in parse_envlist() when env contains byte strings.
Patch by Eryk Sun.

================================================================================

# Changelog - Library (Part 5)

: Fixed buffer overrun in binascii.b2a_qp() and
binascii.a2b_qp().

: Fix socket accept exhaustion during high TCP traffic. Patch by
Kevin Conway.

: Handle when SO_REUSEPORT isnât properly supported. Patch by
Seth Michael Larson.

: Inspect functools.partial in asyncio.Handle.__repr__. Patch by
iceboy.

: Fix slow pipes IO in asyncio. Patch by INADA Naoki.

: Fix callbacks race in asyncio.SelectorLoop.sock_connect.

: Fix selectors incorrectly retain invalid file descriptors.
Patch by Mark Williams.

: Refuse monitoring processes if the child watcher has no loop
attached. Patch by Vincent Michel.

: Raise RuntimeError when transportâs FD is used with add_reader,
add_writer, etc.

: Speedup asyncio.StreamReader.readexactly. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.

: Deprecate passing asyncio.Handles to run_in_executor.

: Fix asyncio to support formatting of non-python coroutines.

: Remove UNIX socket from FS before binding. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.

: Prohibit Tasks to await on themselves.

================================================================================

# Changelog - Windows

List:
: Adds signed catalog files for stdlib on Windows.
: Enables Unicode for ps1/ps2 and input() prompts. (Patch by Eryk
Sun)
: Improvements to help manuals on Windows.
: launcher.msi has different product codes between 32-bit and
64-bit
: Opening CON for write access fails
: WindowsConsoleIO readall() fails if first line starts with
Ctrl+Z
: WindowsConsoleIO fileno() passes wrong flags to _open_osfhandle
: _PyIO_get_console_type fails for various paths
: Renames Windows path file to ._pth
: Windows ._pth file should allow import site

: Adds signed catalog files for stdlib on Windows.

: Enables Unicode for ps1/ps2 and input() prompts. (Patch by Eryk
Sun)

: Improvements to help manuals on Windows.

: launcher.msi has different product codes between 32-bit and
64-bit

: Opening CON for write access fails

: WindowsConsoleIO readall() fails if first line starts with
Ctrl+Z

: WindowsConsoleIO fileno() passes wrong flags to _open_osfhandle

: _PyIO_get_console_type fails for various paths

: Renames Windows path file to ._pth

: Windows ._pth file should allow import site

================================================================================

# Changelog - C API

List:
: Deprecated undocumented functions PyUnicode_AsEncodedObject(),
PyUnicode_AsDecodedObject(), PyUnicode_AsDecodedUnicode() and
PyUnicode_AsEncodedUnicode().

: Deprecated undocumented functions PyUnicode_AsEncodedObject(),
PyUnicode_AsDecodedObject(), PyUnicode_AsDecodedUnicode() and
PyUnicode_AsEncodedUnicode().

================================================================================

# Changelog - Build

List:
: Fixed build with Estonian locale (python-config and distclean
targets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.
: setup.py now detects system libffi with multiarch wrapper.
: Remove redundant include search directory option for building
outside the source tree.

: Fixed build with Estonian locale (python-config and distclean
targets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.

: setup.py now detects system libffi with multiarch wrapper.

: Remove redundant include search directory option for building
outside the source tree.

================================================================================

# Changelog - Tests

List:
: Adds _testconsole module to test console input.

: Adds _testconsole module to test console input.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: The __class__ cell used by zero-argument super() is now
initialized from type.__new__ rather than __build_class__, so class
methods relying on that will now work correctly when called from metaclass
methods during class creation. Patch by Martin Teichmann.
: Fix corrupted result from PyLong_FromLong(0) when Python is
compiled with NSMALLPOSINTS = 0.
: Implement formatting support for .  Initial patch by
Chris Angelico.
: In tarfile, expose copyfileobj bufsize to improve throughput.
Patch by Jason Fried.
: In f-strings, only allow backslashes inside the braces (where
the expressions are).  This is a breaking change from the 3.6 alpha
releases, where backslashes are allowed anywhere in an f-string.  Also,
require that expressions inside f-strings be enclosed within literal
braces, and not escapes like f'\x7b"hi"\x7d'.
: Remove platform-specific directories from sys.path.
: Add early-out for differencing from an empty set.
: Prevents zipimport from unnecessarily encoding a filename
(patch by Eryk Sun)
: The __module__ attribute of extension classes and functions now
is interned. This leads to more compact pickle data with protocol 4.
: Rework CALL_FUNCTION* opcodes to produce shorter and more
efficient bytecode. Patch by Demur Rumed, design by Serhiy Storchaka,
reviewed by Serhiy Storchaka and Victor Stinner.
: Implement tokenizing support for . Patch by Georg
Brandl.
: Make âglobal after useâ a SyntaxError, and ditto for nonlocal.
Patch by Ivan Levkivskyi.
: Implement  â Asynchronous Generators.
: Implement  â Syntax for Variable Annotations. Patch
by Ivan Levkivskyi.
: Add a new private version to the builtin dict type, incremented
at each dictionary creation and at each dictionary change. Implementation
of the PEP 509.
: A backslash-character pair that is not a valid escape sequence
now generates a DeprecationWarning.  Patch by Emanuel Barry.
:  implementation is changed like PyPy. It is more
compact and preserves insertion order. (Concept developed by Raymond
Hettinger and patch by Inada Naoki.)
: Remove unnecessary error checks in
exec_builtin_or_dynamic().
: Added BUILD_STRING opcode.  Optimized f-strings evaluation.
: Python now requires systems with inttypes.h and stdint.h
: Require platforms to support  . Python hasnât
compiled without   for years, so this is basically a
formality.
: Removed support for Windows CE.  It was never finished, and
Windows CE is no longer a relevant platform for Python.
Implement .
: A left shift of zero by a large integer no longer attempts to
allocate large amounts of memory.
: In int-to-decimal-string conversion, improve the estimate of
the intermediate memory required, and remove an unnecessarily strict
overflow check. Patch by Serhiy Storchaka.
: In long_invert, be more careful about modifying object returned
by long_add, and remove an unnecessary check for small longs. Thanks Oren
Milman for analysis and patch.
: Support passing the bytes/bytearray.translate() âdeleteâ
argument by keyword.
: Properly clear out a generatorâs frameâs backreference to the
generator to prevent crashes in frame.clear().
: Fix a crash when a coroutine that has not been awaited is
finalized with warnings-as-errors enabled.
: Fix another issue found by PVS-Studio: Null pointer check after
use of âdefâ in _PyState_AddModule(). Initial patch by Christian Heimes.
: The modulo operation applied to  and other 
subclasses now always returns an . Previously the return type
depended on the input values. Patch by Xiang Zhang.
: int() now always returns an instance of exact int.
: Fix a minor bug in integer true division; this bug could
potentially have caused off-by-one-ulp results on platforms with
unreliable ldexp implementations.
: Make class definition namespace ordered by default.
: Fix an overflow check in : the original code was
checking against Py_SIZE_MAX instead of the correct upper bound of
Py_SSIZE_T_MAX. Patch by Xiang Zhang.
: Multi-phase extension module import now correctly allows the
 field to be used to add module level functions to instances
of non-module types returned from Py_create_mod. Patch by Xiang Zhang.
: The round() function accepted a second None argument for some
types but not for others.  Fixed the inconsistency by accepting None for
all numeric types.
: Warn if a submodule argument to âpython -mâ or
runpy.run_module() is found in sys.modules after parent packages are
imported, but before the submodule is executed.
: Make only type() itself accept the one-argument form. Patch by
Eryk Sun and Emanuel Barry.
: Fix a SystemError in the implementation of âraiseâ statement.
In a brand new thread, raise a RuntimeError since there is no active
exception to reraise. Patch written by Xiang Zhang.
: Implement  â asynchronous comprehensions.
: Fix memory leak in codeobject.c

================================================================================

# Changelog - Core and Builtins (Part 2)

: The __class__ cell used by zero-argument super() is now
initialized from type.__new__ rather than __build_class__, so class
methods relying on that will now work correctly when called from metaclass
methods during class creation. Patch by Martin Teichmann.

: Fix corrupted result from PyLong_FromLong(0) when Python is
compiled with NSMALLPOSINTS = 0.

: Implement formatting support for .  Initial patch by
Chris Angelico.

: In tarfile, expose copyfileobj bufsize to improve throughput.
Patch by Jason Fried.

: In f-strings, only allow backslashes inside the braces (where
the expressions are).  This is a breaking change from the 3.6 alpha
releases, where backslashes are allowed anywhere in an f-string.  Also,
require that expressions inside f-strings be enclosed within literal
braces, and not escapes like f'\x7b"hi"\x7d'.

: Remove platform-specific directories from sys.path.

: Add early-out for differencing from an empty set.

: Prevents zipimport from unnecessarily encoding a filename
(patch by Eryk Sun)

: The __module__ attribute of extension classes and functions now
is interned. This leads to more compact pickle data with protocol 4.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Rework CALL_FUNCTION* opcodes to produce shorter and more
efficient bytecode. Patch by Demur Rumed, design by Serhiy Storchaka,
reviewed by Serhiy Storchaka and Victor Stinner.

: Implement tokenizing support for . Patch by Georg
Brandl.

: Make âglobal after useâ a SyntaxError, and ditto for nonlocal.
Patch by Ivan Levkivskyi.

: Implement  â Asynchronous Generators.

: Implement  â Syntax for Variable Annotations. Patch
by Ivan Levkivskyi.

: Add a new private version to the builtin dict type, incremented
at each dictionary creation and at each dictionary change. Implementation
of the PEP 509.

: A backslash-character pair that is not a valid escape sequence
now generates a DeprecationWarning.  Patch by Emanuel Barry.

:  implementation is changed like PyPy. It is more
compact and preserves insertion order. (Concept developed by Raymond
Hettinger and patch by Inada Naoki.)

: Remove unnecessary error checks in
exec_builtin_or_dynamic().

: Added BUILD_STRING opcode.  Optimized f-strings evaluation.

: Python now requires systems with inttypes.h and stdint.h

: Require platforms to support  . Python hasnât
compiled without   for years, so this is basically a
formality.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Removed support for Windows CE.  It was never finished, and
Windows CE is no longer a relevant platform for Python.

: A left shift of zero by a large integer no longer attempts to
allocate large amounts of memory.

: In int-to-decimal-string conversion, improve the estimate of
the intermediate memory required, and remove an unnecessarily strict
overflow check. Patch by Serhiy Storchaka.

: In long_invert, be more careful about modifying object returned
by long_add, and remove an unnecessary check for small longs. Thanks Oren
Milman for analysis and patch.

: Support passing the bytes/bytearray.translate() âdeleteâ
argument by keyword.

: Properly clear out a generatorâs frameâs backreference to the
generator to prevent crashes in frame.clear().

: Fix a crash when a coroutine that has not been awaited is
finalized with warnings-as-errors enabled.

: Fix another issue found by PVS-Studio: Null pointer check after
use of âdefâ in _PyState_AddModule(). Initial patch by Christian Heimes.

: The modulo operation applied to  and other 
subclasses now always returns an . Previously the return type
depended on the input values. Patch by Xiang Zhang.

================================================================================

# Changelog - Core and Builtins (Part 5)

: int() now always returns an instance of exact int.

: Fix a minor bug in integer true division; this bug could
potentially have caused off-by-one-ulp results on platforms with
unreliable ldexp implementations.

: Make class definition namespace ordered by default.

: Fix an overflow check in : the original code was
checking against Py_SIZE_MAX instead of the correct upper bound of
Py_SSIZE_T_MAX. Patch by Xiang Zhang.

: Multi-phase extension module import now correctly allows the
 field to be used to add module level functions to instances
of non-module types returned from Py_create_mod. Patch by Xiang Zhang.

: The round() function accepted a second None argument for some
types but not for others.  Fixed the inconsistency by accepting None for
all numeric types.

: Warn if a submodule argument to âpython -mâ or
runpy.run_module() is found in sys.modules after parent packages are
imported, but before the submodule is executed.

: Make only type() itself accept the one-argument form. Patch by
Eryk Sun and Emanuel Barry.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Fix a SystemError in the implementation of âraiseâ statement.
In a brand new thread, raise a RuntimeError since there is no active
exception to reraise. Patch written by Xiang Zhang.

: Implement  â asynchronous comprehensions.

: Fix memory leak in codeobject.c

================================================================================

# Changelog - Library (Part 1)

List:
: Fix crash in os.spawnv() with no elements in args
: Always raise ValueError for negative
compileall.compile_dir(workers=â¦) parameter, even when multithreading is
unavailable.
: Use sqlite3_get_autocommit() instead of setting
Connection->inTransaction manually.
: Attributes tm_gmtoff and tm_zone are now available on all
platforms in the return values of time.localtime() and time.gmtime().
: Regular expression match object groups are now accessible using
__getitem__. âmo[x]â is equivalent to âmo.group(x)â.
: sqlite3 no longer implicitly commit an open transaction before
DDL statements.
: Add a  parameter to collections.namedtuple().
: Inline flags now should be used only at the start of the
regular expression. Deprecation warning is emitted if uses them in the
middle of the regular expression.
: xmlrpc now supports unmarshalling additional data types used by
Apache XML-RPC implementation for numerics and None.
: Fixed parsing inline verbose flag in regular expressions.
: Add client-side SSL session resumption to the ssl module.
: Deprecate ssl-related arguments in favor of SSLContext. The
deprecation include manual creation of SSLSocket and certfile/keyfile (or
similar) in ftplib, httplib, imaplib, smtplib, poplib and urllib.
: SSLContext has improved default settings: OP_NO_SSLv2,
OP_NO_SSLv3, OP_NO_COMPRESSION, OP_CIPHER_SERVER_PREFERENCE,
OP_SINGLE_DH_USE, OP_SINGLE_ECDH_USE and HIGH ciphers without MD5.
: Changed some RuntimeErrorâs in the zipfile module to more
appropriate types. Improved some error messages and debugging output.
:  and json.loads now support binary input
encoded as UTF-8, UTF-16 or UTF-32. Patch by Serhiy Storchaka.
: the pure Python fallback implementation of
functools.partial now matches the behaviour of its accelerated C
counterpart for subclassing, pickling and text representation purposes.
Patch by Emanuel Barry and Serhiy Storchaka.
Fix possible integer overflows and crashes in the mmap module with unusual
usage patterns.
bpo-1703178: Fix the ability to pass the âlink-objects option to the
distutils build_ext command.
: itertools.count() no longer rounds non-integer step in range
between 1.0 and 2.0 to 1.
: Pdb now supports the âreadrcâ keyword argument to control
whether .pdbrc files should be read.  Patch by Martin Matusiak and Sam
Kimbrel.
: Update the lib2to3 grammar to handle the unpacking
generalizations added in 3.5.
: mailcap now respects the order of the lines in the mailcap
files (âfirst matchâ), as required by RFC 1542.  Patch by Michael Lazar.
: Convert re flag constants to IntFlag.
: Convert all ssl module constants to IntEnum and IntFlags.
SSLContext properties now return flags and enums.
: Add Flag, IntFlag, and auto() to enum module.
bpo-433028: Added support of modifier spans in regular expressions.
: Validates persist parameter when opening MSI database
: xml.etree.ElementTree nows preserves whitespaces in attributes
(Patch by Duane Griffin.  Reviewed and approved by Stefan Behnel.)
: Fixed calculation of line length used for the base64 CTE in the
new email policies.
: Fix call order in OrderedDict.__init__().
email.generator.DecodedGenerator now supports the policy keyword.
: Remove undocumented modules from Lib/plat-*: IN, CDROM,
DLFCN, TYPES, CDIO, and STROPTS.
: Donât pass str(_charset) to MIMEText.set_payload(). Patch by
Claude Paroz.
: The new email API is no longer provisional, and the docs have
been reorganized and rewritten to emphasize the new API.
: urllib now includes an   header among the default
headers. This makes the results of REST API requests more consistent and
predictable especially when proxy servers are involved.
lib2to3.pgen3.driver.load_grammar() now creates a stable cache file
between runs given the same Grammar.txt input regardless of the hash
randomization setting.
: Allow ImportErrors in encoding implementation to propagate.
: Support path-like objects in importlib.util.
: Avoid zero-length memcpy() etc calls with null source pointers
in the âctypesâ and âarrayâ modules.
: Break email header lines  on the RFC specified CR and LF
characters, not on arbitrary unicode line breaks.  This also fixes a bug
in HTTP header parsing.
: The email.mime classes now all accept an optional policy
keyword.
: Fix email iter_attachments incorrect mutation of payload list.
: Add SHA-3 and SHAKE support to hashlib module.
Eliminate a tautological-pointer-compare warning in _scproxy.c.
: The os.urandom() function does now block on Linux 3.17
and newer until the system urandom entropy pool is initialized to increase
the security. This change is part of the .
: Expose the Linux getrandom() syscall as a new
os.getrandom() function. This change is part of the .
: Fix ssl moduleâs parsing of GEN_RID subject alternative name
fields in X.509 certs.
: Add random.choices().
: Improved error reporting about truncated pickle data in C
implementation of unpickler.  UnpicklingError is now raised instead of
AttributeError and ValueError in some cases.
: Add BLAKE2 (blake2b and blake2s) to hashlib.
: Optimized globbing in pathlib by using os.scandir(); it is now
about 1.5â4 times faster.
: Optimized glob() and iglob() functions in the glob module; they
are now about 3â6 times faster.
: Add scrypt (password-based key derivation function) to hashlib
module (requires OpenSSL 1.1.0).
: Remove 3DES from ssl moduleâs default cipher list to counter
measure sweet32 attack (CVE 2016-2183).
: Add ChaCha20 Poly1305 to ssl moduleâs default cipher list.
(Required OpenSSL 1.1.0 or LibreSSL).
: Check return value of winsound.MessageBeep.
: Add SSLContext.get_ciphers() method to get a list of all
enabled ciphers.
: Add AF_ALG (Linux Kernel crypto) to socket module.
: Port ssl and hashlib module to OpenSSL 1.1.0.
: Fix support for SND_MEMORY in winsound.PlaySound.  Based on a
patch by Tim Lesher.
: Add support for IEEE 754 half-precision floats to the struct
module. Based on a patch by Eli Stevens.
: Deprecated extra_path distribution option in distutils
packaging.
: Add new  constants:  and  to
match  and , and also cmath.infj and
cmath.nanj to match the format used by complex repr.
: The csv.DictReader now returns rows of type OrderedDict.
(Contributed by Steve Holden.)
Remove support for passing a file descriptor to os.access. It never worked
but previously didnât raise.
: Fix error when distutils encounters symlink.
: Fixed possible bugs when setting
sqlite3.Connection.isolation_level. Based on patch by Xiang Zhang.
: Fixed a crash in sqlite3.Connection.cursor() when a factory
creates not a cursor.  Patch by Xiang Zhang.
: Avoid spurious output on OS X with Gnu Readline.
: Restore deterministic behavior of random.Random().seed() for
string seeds using seeding version 1.  Allows sequences of calls to
random() to exactly match those obtained in Python 2. Patch by Nofar
Schnider.
: Fix a regression in Connection.commit().  Statements should not
be reset after a commit.
: Chunked transfer encoding support added to
http.client.HTTPConnection requests.  The
urllib.request.AbstractHTTPHandler class does not enforce a Content-Length
header any more.  If a HTTP request has a file or iterable body, but no
Content-Length header, the library now falls back to use chunked
transfer-encoding.
A new version of typing.py from https://github.com/python/typing: -
Collection (only for 3.6) () - Add FrozenSet to __all__
(upstream #261) - fix crash in _get_type_vars() (upstream #259) - Remove
the dict constraint in ForwardRef._eval_type (upstream #252)
: Make _normalize parameter to  constructor
keyword-only, so that Fraction(2,   now raises .
: Fix unnormalised Fraction.__pow__ result in the case of
negative exponent and negative base.
: cursor.description is now available for queries using CTEs.
: In distutils sdists, simply produce the âgztarâ (gzipped tar
format) distributions on all platforms unless âformatsâ is supplied.
: posixpath.ismount now correctly recognizes mount points which
the user does not have permission to access.
: On Linux, ctypes.util.find_library now looks in LD_LIBRARY_PATH
for shared libraries.
: exit message for code.interact is now configurable.
: Improved behaviour of logging.handlers.QueueListener. Thanks to
Paulo Andrade and Petr Viktorin for the analysis and patch.
: Distributed reference counting added to multiprocessing to
support nesting of shared values / proxy objects.
: Improves readability of multiprocessing error message.  Thanks
to Wojciech Walczak for patch.
asyncio: Add set_protocol / get_protocol to Transports.
: asyncio: Set TCP_NODELAY by default.

================================================================================

# Changelog - Library (Part 2)

: Fix crash in os.spawnv() with no elements in args

: Always raise ValueError for negative
compileall.compile_dir(workers=â¦) parameter, even when multithreading is
unavailable.

: Use sqlite3_get_autocommit() instead of setting
Connection->inTransaction manually.

: Attributes tm_gmtoff and tm_zone are now available on all
platforms in the return values of time.localtime() and time.gmtime().

: Regular expression match object groups are now accessible using
__getitem__. âmo[x]â is equivalent to âmo.group(x)â.

: sqlite3 no longer implicitly commit an open transaction before
DDL statements.

: Add a  parameter to collections.namedtuple().

: Inline flags now should be used only at the start of the
regular expression. Deprecation warning is emitted if uses them in the
middle of the regular expression.

: xmlrpc now supports unmarshalling additional data types used by
Apache XML-RPC implementation for numerics and None.

: Fixed parsing inline verbose flag in regular expressions.

: Add client-side SSL session resumption to the ssl module.

================================================================================

# Changelog - Library (Part 3)

: Deprecate ssl-related arguments in favor of SSLContext. The
deprecation include manual creation of SSLSocket and certfile/keyfile (or
similar) in ftplib, httplib, imaplib, smtplib, poplib and urllib.

: SSLContext has improved default settings: OP_NO_SSLv2,
OP_NO_SSLv3, OP_NO_COMPRESSION, OP_CIPHER_SERVER_PREFERENCE,
OP_SINGLE_DH_USE, OP_SINGLE_ECDH_USE and HIGH ciphers without MD5.

: Changed some RuntimeErrorâs in the zipfile module to more
appropriate types. Improved some error messages and debugging output.

:  and json.loads now support binary input
encoded as UTF-8, UTF-16 or UTF-32. Patch by Serhiy Storchaka.

: the pure Python fallback implementation of
functools.partial now matches the behaviour of its accelerated C
counterpart for subclassing, pickling and text representation purposes.
Patch by Emanuel Barry and Serhiy Storchaka.

Fix possible integer overflows and crashes in the mmap module with unusual
usage patterns.

bpo-1703178: Fix the ability to pass the âlink-objects option to the
distutils build_ext command.

: itertools.count() no longer rounds non-integer step in range
between 1.0 and 2.0 to 1.

================================================================================

# Changelog - Library (Part 4)

: Pdb now supports the âreadrcâ keyword argument to control
whether .pdbrc files should be read.  Patch by Martin Matusiak and Sam
Kimbrel.

: Update the lib2to3 grammar to handle the unpacking
generalizations added in 3.5.

: mailcap now respects the order of the lines in the mailcap
files (âfirst matchâ), as required by RFC 1542.  Patch by Michael Lazar.

: Convert re flag constants to IntFlag.

: Convert all ssl module constants to IntEnum and IntFlags.
SSLContext properties now return flags and enums.

: Add Flag, IntFlag, and auto() to enum module.

bpo-433028: Added support of modifier spans in regular expressions.

: Validates persist parameter when opening MSI database

: xml.etree.ElementTree nows preserves whitespaces in attributes
(Patch by Duane Griffin.  Reviewed and approved by Stefan Behnel.)

: Fixed calculation of line length used for the base64 CTE in the
new email policies.

: Fix call order in OrderedDict.__init__().

email.generator.DecodedGenerator now supports the policy keyword.

: Remove undocumented modules from Lib/plat-*: IN, CDROM,
DLFCN, TYPES, CDIO, and STROPTS.

: Donât pass str(_charset) to MIMEText.set_payload(). Patch by
Claude Paroz.

================================================================================

# Changelog - Library (Part 5)

: The new email API is no longer provisional, and the docs have
been reorganized and rewritten to emphasize the new API.

: urllib now includes an   header among the default
headers. This makes the results of REST API requests more consistent and
predictable especially when proxy servers are involved.

lib2to3.pgen3.driver.load_grammar() now creates a stable cache file
between runs given the same Grammar.txt input regardless of the hash
randomization setting.

: Allow ImportErrors in encoding implementation to propagate.

: Support path-like objects in importlib.util.

: Avoid zero-length memcpy() etc calls with null source pointers
in the âctypesâ and âarrayâ modules.

: Break email header lines  on the RFC specified CR and LF
characters, not on arbitrary unicode line breaks.  This also fixes a bug
in HTTP header parsing.

: The email.mime classes now all accept an optional policy
keyword.

: Fix email iter_attachments incorrect mutation of payload list.

: Add SHA-3 and SHAKE support to hashlib module.

Eliminate a tautological-pointer-compare warning in _scproxy.c.

================================================================================

# Changelog - Library (Part 6)

: The os.urandom() function does now block on Linux 3.17
and newer until the system urandom entropy pool is initialized to increase
the security. This change is part of the .

: Expose the Linux getrandom() syscall as a new
os.getrandom() function. This change is part of the .

: Fix ssl moduleâs parsing of GEN_RID subject alternative name
fields in X.509 certs.

: Add random.choices().

: Improved error reporting about truncated pickle data in C
implementation of unpickler.  UnpicklingError is now raised instead of
AttributeError and ValueError in some cases.

: Add BLAKE2 (blake2b and blake2s) to hashlib.

: Optimized globbing in pathlib by using os.scandir(); it is now
about 1.5â4 times faster.

: Optimized glob() and iglob() functions in the glob module; they
are now about 3â6 times faster.

: Add scrypt (password-based key derivation function) to hashlib
module (requires OpenSSL 1.1.0).

: Remove 3DES from ssl moduleâs default cipher list to counter
measure sweet32 attack (CVE 2016-2183).

: Add ChaCha20 Poly1305 to ssl moduleâs default cipher list.
(Required OpenSSL 1.1.0 or LibreSSL).

: Check return value of winsound.MessageBeep.

================================================================================

# Changelog - Library (Part 7)

: Add SSLContext.get_ciphers() method to get a list of all
enabled ciphers.

: Add AF_ALG (Linux Kernel crypto) to socket module.

: Port ssl and hashlib module to OpenSSL 1.1.0.

: Fix support for SND_MEMORY in winsound.PlaySound.  Based on a
patch by Tim Lesher.

: Add support for IEEE 754 half-precision floats to the struct
module. Based on a patch by Eli Stevens.

: Deprecated extra_path distribution option in distutils
packaging.

: Add new  constants:  and  to
match  and , and also cmath.infj and
cmath.nanj to match the format used by complex repr.

: The csv.DictReader now returns rows of type OrderedDict.
(Contributed by Steve Holden.)

Remove support for passing a file descriptor to os.access. It never worked
but previously didnât raise.

: Fix error when distutils encounters symlink.

: Fixed possible bugs when setting
sqlite3.Connection.isolation_level. Based on patch by Xiang Zhang.

: Fixed a crash in sqlite3.Connection.cursor() when a factory
creates not a cursor.  Patch by Xiang Zhang.

: Avoid spurious output on OS X with Gnu Readline.

================================================================================

# Changelog - Library (Part 8)

: Restore deterministic behavior of random.Random().seed() for
string seeds using seeding version 1.  Allows sequences of calls to
random() to exactly match those obtained in Python 2. Patch by Nofar
Schnider.

: Fix a regression in Connection.commit().  Statements should not
be reset after a commit.

: Chunked transfer encoding support added to
http.client.HTTPConnection requests.  The
urllib.request.AbstractHTTPHandler class does not enforce a Content-Length
header any more.  If a HTTP request has a file or iterable body, but no
Content-Length header, the library now falls back to use chunked
transfer-encoding.

A new version of typing.py from https://github.com/python/typing: -
Collection (only for 3.6) () - Add FrozenSet to __all__
(upstream #261) - fix crash in _get_type_vars() (upstream #259) - Remove
the dict constraint in ForwardRef._eval_type (upstream #252)

: Make _normalize parameter to  constructor
keyword-only, so that Fraction(2,   now raises .

: Fix unnormalised Fraction.__pow__ result in the case of
negative exponent and negative base.

: cursor.description is now available for queries using CTEs.

================================================================================

# Changelog - Library (Part 9)

: In distutils sdists, simply produce the âgztarâ (gzipped tar
format) distributions on all platforms unless âformatsâ is supplied.

: posixpath.ismount now correctly recognizes mount points which
the user does not have permission to access.

: On Linux, ctypes.util.find_library now looks in LD_LIBRARY_PATH
for shared libraries.

: exit message for code.interact is now configurable.

: Improved behaviour of logging.handlers.QueueListener. Thanks to
Paulo Andrade and Petr Viktorin for the analysis and patch.

: Distributed reference counting added to multiprocessing to
support nesting of shared values / proxy objects.

: Improves readability of multiprocessing error message.  Thanks
to Wojciech Walczak for patch.

asyncio: Add set_protocol / get_protocol to Transports.

: asyncio: Set TCP_NODELAY by default.

================================================================================

# Changelog - IDLE

List:
: Add âinterrupt executionâ (^C) to Shell menu. Patch by Roger
Serwy, updated by Bayard Randel.
: Stop IDLE tests from âflashingâ gui widgets on the screen.
: Consistently group and sort imports within idlelib modules.
: add larger font sizes for classroom projection.
Add version to title of IDLE help window.
: In section on IDLE â console differences, mention that using
exec means that __builtins__ is defined for each statement.
: Fix 3.6.0a3 regression that prevented custom key sets from
being selected when no custom theme was defined.

: Add âinterrupt executionâ (^C) to Shell menu. Patch by Roger
Serwy, updated by Bayard Randel.

: Stop IDLE tests from âflashingâ gui widgets on the screen.

: Consistently group and sort imports within idlelib modules.

: add larger font sizes for classroom projection.

Add version to title of IDLE help window.

: In section on IDLE â console differences, mention that using
exec means that __builtins__ is defined for each statement.

: Fix 3.6.0a3 regression that prevented custom key sets from
being selected when no custom theme was defined.

================================================================================

# Changelog - C API

List:
: Excluded underscored names and other private API from limited
API.
: Add support for path-like objects in PyUnicode_FSConverter() &
PyUnicode_FSDecoder().

: Excluded underscored names and other private API from limited
API.

: Add support for path-like objects in PyUnicode_FSConverter() &
PyUnicode_FSDecoder().

================================================================================

# Changelog - Tests

List:
: Additional tests for the math module. Patch by Francisco Couzo.
: Skip math and cmath tests that fail on OS X 10.4 due to a poor
libm implementation of tan.
: Improve test_math and test_cmath coverage and rigour. Patch by
Jeff Allen.
: Call gc.collect() before checking each test for âdangling
threadsâ, since the dangling threads are weak references.

: Additional tests for the math module. Patch by Francisco Couzo.

: Skip math and cmath tests that fail on OS X 10.4 due to a poor
libm implementation of tan.

: Improve test_math and test_cmath coverage and rigour. Patch by
Jeff Allen.

: Call gc.collect() before checking each test for âdangling
threadsâ, since the dangling threads are weak references.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix clean target in freeze makefile (patch by Lisa Roach)
: Update message in validate_ucrtbase.py
: Deprecate building _ctypes with the bundled copy of libffi on
non-OSX UNIX platforms.
: Cause lack of llvm-profdata tool when using clang as required
for PGO linking to be a configure time error rather than make time when
--with-optimizations is enabled.  Also improve our ability to find the
llvm-profdata tool on MacOS and some Linuxes.
: Support for DTrace and SystemTap probes.
: The profile-opt build now applies PGO to the built-in modules.
: Add the âwith-optimizations flag to turn on LTO and PGO build
support when available.
: Set platform triplets for Android builds.
: Update references to the $(LIBPL) installation path on AIX.
This path was changed in 3.2a4.
Update OS X installer to use SQLite 3.14.1 and XZ 5.2.2.
: Fix LTO builds on OS X.
: Build OS X installer with a private copy of OpenSSL. Also
provide a sample Install Certificates command script to install a set of
root certificates from the third-party certifi module.

: Fix clean target in freeze makefile (patch by Lisa Roach)

: Update message in validate_ucrtbase.py

================================================================================

# Changelog - Build (Part 2)

: Deprecate building _ctypes with the bundled copy of libffi on
non-OSX UNIX platforms.

: Cause lack of llvm-profdata tool when using clang as required
for PGO linking to be a configure time error rather than make time when
--with-optimizations is enabled.  Also improve our ability to find the
llvm-profdata tool on MacOS and some Linuxes.

: Support for DTrace and SystemTap probes.

: The profile-opt build now applies PGO to the built-in modules.

: Add the âwith-optimizations flag to turn on LTO and PGO build
support when available.

: Set platform triplets for Android builds.

: Update references to the $(LIBPL) installation path on AIX.
This path was changed in 3.2a4.

Update OS X installer to use SQLite 3.14.1 and XZ 5.2.2.

: Fix LTO builds on OS X.

: Build OS X installer with a private copy of OpenSSL. Also
provide a sample Install Certificates command script to install a set of
root certificates from the third-party certifi module.

================================================================================

# Changelog - Tools/Demos

List:
: Get Tools/scripts/fixcid.py working with Python 3 and the
current âreâ module, avoid invalid Python backslash escapes, and fix a bug
parsing escaped C quote signs.

: Get Tools/scripts/fixcid.py working with Python 3 and the
current âreâ module, avoid invalid Python backslash escapes, and fix a bug
parsing escaped C quote signs.

================================================================================

# Changelog - Windows (Part 1)

List:
: Update xz dependency to 5.2.2 and build it from source.
: Ensures TargetDir is set before continuing with custom install.
: Windows console doesnât input or print Unicode (PEP 528)
: Change file system encoding on Windows to UTF-8 (PEP 529)
: Opt-out of MAX_PATH on Windows 10
: Adds encoding and errors parameters to subprocess.
: Adds oem encoding, alias ansi to mbcs, move aliasmbcs to codec
lookup.
: The functions of the winsound module now accept keyword
arguments.
: Build full text search support into SQLite on Windows.
: Adds new icons for Python files and processes on Windows.
Designs by Cherry Wang.
: Update sqlite to 3.14.1.0 on Windows.

: Update xz dependency to 5.2.2 and build it from source.

: Ensures TargetDir is set before continuing with custom install.

: Windows console doesnât input or print Unicode (PEP 528)

: Change file system encoding on Windows to UTF-8 (PEP 529)

: Opt-out of MAX_PATH on Windows 10

: Adds encoding and errors parameters to subprocess.

: Adds oem encoding, alias ansi to mbcs, move aliasmbcs to codec
lookup.

: The functions of the winsound module now accept keyword
arguments.

: Build full text search support into SQLite on Windows.

================================================================================

# Changelog - Windows (Part 2)

: Adds new icons for Python files and processes on Windows.
Designs by Cherry Wang.

: Update sqlite to 3.14.1.0 on Windows.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Optimized creating bytes and bytearray from byte-like objects
and iterables. Speed up to 3 times for short objects.  Original patch by
Naoki Inada.
: Large sections of repeated lines in tracebacks are now
abbreviated as â[Previous line repeated {count} more times]â by the
builtin traceback rendering. Patch by Emanuel Barry.
: Decreased an overhead of parsing keyword arguments in functions
implemented with using Argument Clinic.
: Now importing already imported modules is up to 2.5 times
faster.
: Include <wincrypt.h> to help with Min GW building.
: On Windows, rename the privately defined REPARSE_DATA_BUFFER
structure to avoid conflicting with the definition from Min GW.
: Add integer overflow check in bytearray.extend().  Patch by
Xiang Zhang.
: Donât rely on wrapping for overflow check in
PySequence_Tuple().  Patch by Xiang Zhang.
: Avoid signed integer overflow in list and tuple operations.
Patch by Xiang Zhang.
: Standard __import__() no longer look up â__import__â in globals
or builtins for importing submodules or âfrom importâ.  Fixed a crash if
raise a warning about unabling to resolve package from __spec__ or
__package__.
: Respect the PYTHONCASEOK environment variable under Windows.
: Make having too many statically nested blocks a SyntaxError
instead of SystemError.
: Implemented  (Simpler customization of class
creation). Upon subclassing, the __init_subclass__ classmethod is called
on the base class. Descriptors are initialized with __set_name__ after
class creation.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Optimized creating bytes and bytearray from byte-like objects
and iterables. Speed up to 3 times for short objects.  Original patch by
Naoki Inada.

: Large sections of repeated lines in tracebacks are now
abbreviated as â[Previous line repeated {count} more times]â by the
builtin traceback rendering. Patch by Emanuel Barry.

: Decreased an overhead of parsing keyword arguments in functions
implemented with using Argument Clinic.

: Now importing already imported modules is up to 2.5 times
faster.

: Include <wincrypt.h> to help with Min GW building.

: On Windows, rename the privately defined REPARSE_DATA_BUFFER
structure to avoid conflicting with the definition from Min GW.

: Add integer overflow check in bytearray.extend().  Patch by
Xiang Zhang.

: Donât rely on wrapping for overflow check in
PySequence_Tuple().  Patch by Xiang Zhang.

: Avoid signed integer overflow in list and tuple operations.
Patch by Xiang Zhang.

: Standard __import__() no longer look up â__import__â in globals
or builtins for importing submodules or âfrom importâ.  Fixed a crash if
raise a warning about unabling to resolve package from __spec__ or
__package__.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Respect the PYTHONCASEOK environment variable under Windows.

: Make having too many statically nested blocks a SyntaxError
instead of SystemError.

: Implemented  (Simpler customization of class
creation). Upon subclassing, the __init_subclass__ classmethod is called
on the base class. Descriptors are initialized with __set_name__ after
class creation.

================================================================================

# Changelog - Library (Part 1)

List:
: Add /__fspath__() support to the os and os.path
modules. Includes code from Jelle Zijlstra. (See also: )
: Add Collections to collections.abc. Patch by Ivan Levkivskyi,
docs by Neil Girdhar.
: Support âanti-registrationâ of special methods from various
ABCs, like __hash__, __iter__ or __len__.  All these (and several more)
can be set to None in an implementation class and the behavior will be as
if the method is not defined at all. (Previously, this mechanism existed
only for __hash__, to make mutable classes unhashable.)  Code contributed
by Andrew Barnert and Ivan Levkivskyi.
: Support keyword arguments to zlib.decompress().  Patch by Xiang
Zhang.
: Prevent segfault after interpreter re-initialization due to ref
count problem introduced in code for  in 3.6.0a3. Patch by
Xiang Zhang.
: The  and  parameters for
collections.namedtuple are now keyword-only.
: Add mathematical constant tau to math and cmath. See also
.
: traceback.StackSummary.format now abbreviates large sections of
repeated lines as â[Previous line repeated {count} more times]â (this
change then further affects other traceback display operations in the
module). Patch by Emanuel Barry.
: Add to concurrent.futures.thread.ThreadPoolExecutor() the
ability to specify a thread name prefix.
: Add geometric_mean and harmonic_mean to statistics module.
: code.interact now prints an message when exiting.
: Add autorange method to timeit.Timer objects.
: Correct some memory management errors server_hostname in
_ssl.wrap_socket().
: unittest.mock.create_autospec() now works properly for
subclasses of property() and other data descriptors.  Removes the never
publicly used, never documented unittest.mock.DescriptorTypes tuple.
: Undocumented support of general bytes-like objects as path in
compile() and similar functions is now deprecated.
: Undocumented support of general bytes-like objects as paths in
os functions is now deprecated.
: Add _order_ compatibility shim to enum.Enum for Python 2/3 code
bases.
: Added tzinfo keyword argument to datetime.combine.
In the curses module, raise an error if window.getstr() or window.instr()
is passed a negative value.
: Fix possible usage of uninitialized memory in
operator.methodcaller.
: Fix possible Py_DECREF on unowned object in _sre.
: Fix possible integer overflow in binascii.b2a_qp.
: Fix possible integer overflow in the _csv module for large
record lengths.
: Prevent HTTPoxy attack (CVE 2016-1000110). Ignore the
HTTP_PROXY variable when REQUEST_METHOD environment is set, which
indicates that the script is in CGI mode.
: Remove dead code from the âarrayâ moduleâs slice handling. Patch
by Chuck.
: Do not assume sched.h defines any SCHED_* constants.
: In the âzlibâ module, fix handling of large buffers (typically
4 GiB) when compressing and decompressing.  Previously, inputs were
limited to 4 GiB, and compression and decompression operations did not
properly handle results of 4 GiB.
: Implemented  (Local Time Disambiguation).
Expose the EPOLLEXCLUSIVE constant (when it is defined) in the select
module.
: Expose the EPOLLRDHUP and POLLRDHUP constants in the select
module.
: Avoid signed int negation overflow in the âaudioopâ module.
: Release GIL in nt._isdir
: Fixed unpickling by the persistent ID with protocol 0. Original
patch by Alexandre Vassalotti.
: Avoid an unintentional reference cycle in email.feedparser.
: Fix a segfault when os.fspath() called an __fspath__() method
that raised an exception. Patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 2)

: Add /__fspath__() support to the os and os.path
modules. Includes code from Jelle Zijlstra. (See also: )

: Add Collections to collections.abc. Patch by Ivan Levkivskyi,
docs by Neil Girdhar.

: Support âanti-registrationâ of special methods from various
ABCs, like __hash__, __iter__ or __len__.  All these (and several more)
can be set to None in an implementation class and the behavior will be as
if the method is not defined at all. (Previously, this mechanism existed
only for __hash__, to make mutable classes unhashable.)  Code contributed
by Andrew Barnert and Ivan Levkivskyi.

: Support keyword arguments to zlib.decompress().  Patch by Xiang
Zhang.

: Prevent segfault after interpreter re-initialization due to ref
count problem introduced in code for  in 3.6.0a3. Patch by
Xiang Zhang.

: The  and  parameters for
collections.namedtuple are now keyword-only.

: Add mathematical constant tau to math and cmath. See also
.

: traceback.StackSummary.format now abbreviates large sections of
repeated lines as â[Previous line repeated {count} more times]â (this
change then further affects other traceback display operations in the
module). Patch by Emanuel Barry.

================================================================================

# Changelog - Library (Part 3)

: Add to concurrent.futures.thread.ThreadPoolExecutor() the
ability to specify a thread name prefix.

: Add geometric_mean and harmonic_mean to statistics module.

: code.interact now prints an message when exiting.

: Add autorange method to timeit.Timer objects.

: Correct some memory management errors server_hostname in
_ssl.wrap_socket().

: unittest.mock.create_autospec() now works properly for
subclasses of property() and other data descriptors.  Removes the never
publicly used, never documented unittest.mock.DescriptorTypes tuple.

: Undocumented support of general bytes-like objects as path in
compile() and similar functions is now deprecated.

: Undocumented support of general bytes-like objects as paths in
os functions is now deprecated.

: Add _order_ compatibility shim to enum.Enum for Python 2/3 code
bases.

: Added tzinfo keyword argument to datetime.combine.

In the curses module, raise an error if window.getstr() or window.instr()
is passed a negative value.

: Fix possible usage of uninitialized memory in
operator.methodcaller.

: Fix possible Py_DECREF on unowned object in _sre.

: Fix possible integer overflow in binascii.b2a_qp.

================================================================================

# Changelog - Library (Part 4)

: Fix possible integer overflow in the _csv module for large
record lengths.

: Prevent HTTPoxy attack (CVE 2016-1000110). Ignore the
HTTP_PROXY variable when REQUEST_METHOD environment is set, which
indicates that the script is in CGI mode.

: Remove dead code from the âarrayâ moduleâs slice handling. Patch
by Chuck.

: Do not assume sched.h defines any SCHED_* constants.

: In the âzlibâ module, fix handling of large buffers (typically
4 GiB) when compressing and decompressing.  Previously, inputs were
limited to 4 GiB, and compression and decompression operations did not
properly handle results of 4 GiB.

: Implemented  (Local Time Disambiguation).

Expose the EPOLLEXCLUSIVE constant (when it is defined) in the select
module.

: Expose the EPOLLRDHUP and POLLRDHUP constants in the select
module.

: Avoid signed int negation overflow in the âaudioopâ module.

: Release GIL in nt._isdir

: Fixed unpickling by the persistent ID with protocol 0. Original
patch by Alexandre Vassalotti.

: Avoid an unintentional reference cycle in email.feedparser.

: Fix a segfault when os.fspath() called an __fspath__() method
that raised an exception. Patch by Xiang Zhang.

================================================================================

# Changelog - IDLE (Part 1)

List:
: text_textview and test_autocomplete now pass when re-run in the
same process.  This occurs when test_idle fails when run with the -w
option but without -jn.  Fix warning from test_config.
: Put query response validation error messages in the query box
itself instead of in a separate messagebox.  Redo tests to match. Add Mac
OSX refinements. Original patch by Mark Roseman.
: Escape key now closes Query box as cancelled.
: IDLE: tab after initial whitespace should tab, not
autocomplete. This fixes problem with writing docstrings at least twice
indented.
: Explicitly return None when there are also non-None returns. In
a few cases, reverse a condition and eliminate a return.
: IDLE no longer runs buggy code because of its tkinter imports.
Users must include the same imports required to run directly in Python.
: Add âIDLE Modern Unixâ to the built-in key sets. Make the
default key set depend on the platform. Add tests for the changes to the
config module.
: add line counter and crc to IDLE configHandler test dump.

================================================================================

# Changelog - IDLE (Part 2)

: text_textview and test_autocomplete now pass when re-run in the
same process.  This occurs when test_idle fails when run with the -w
option but without -jn.  Fix warning from test_config.

: Put query response validation error messages in the query box
itself instead of in a separate messagebox.  Redo tests to match. Add Mac
OSX refinements. Original patch by Mark Roseman.

: Escape key now closes Query box as cancelled.

: IDLE: tab after initial whitespace should tab, not
autocomplete. This fixes problem with writing docstrings at least twice
indented.

: Explicitly return None when there are also non-None returns. In
a few cases, reverse a condition and eliminate a return.

: IDLE no longer runs buggy code because of its tkinter imports.
Users must include the same imports required to run directly in Python.

: Add âIDLE Modern Unixâ to the built-in key sets. Make the
default key set depend on the platform. Add tests for the changes to the
config module.

: add line counter and crc to IDLE configHandler test dump.

================================================================================

# Changelog - Tests

List:
: Skip a test in test_pkgutil as needed that doesnât work when
  . Patch by SilentGhost.
: Add test.support.unix_shell as the path to the default shell.
: In test_pyexpat, avoid testing an error message detail that
changed in Expat 2.2.0.
: Prevent assertion error when running test_ast with coverage
enabled: ensure code object has a valid first line number. Patch suggested
by Ivan Levkivskyi.

: Skip a test in test_pkgutil as needed that doesnât work when
  . Patch by SilentGhost.

: Add test.support.unix_shell as the path to the default shell.

: In test_pyexpat, avoid testing an error message detail that
changed in Expat 2.2.0.

: Prevent assertion error when running test_ast with coverage
enabled: ensure code object has a valid first line number. Patch suggested
by Ivan Levkivskyi.

================================================================================

# Changelog - Windows

List:
: Update bundled Tcl/Tk to 8.6.6.
: Adds  metadata to Windows installer
: Adds a shell extension to the launcher so that drag and drop
works correctly.
: Enables proper Windows styles in python[w].exe manifest.

: Update bundled Tcl/Tk to 8.6.6.

: Adds  metadata to Windows installer

: Adds a shell extension to the launcher so that drag and drop
works correctly.

: Enables proper Windows styles in python[w].exe manifest.

================================================================================

# Changelog - Build (Part 1)

List:
: Suppress spurious build warnings when updating importlibâs
bootstrap files. Patch by Xiang Zhang
: Correct the references to Modules/python.exp, which is required
on AIX.  The references were accidentally changed in 3.5.0a1.
: CPP invocation in configure must use CPPFLAGS. Patch by Chi
Hsuan Yen.
: The configure script now inserts comments into the makefile to
prevent the pgen and _freeze_importlib executables from being
cross-compiled.
: Set PYTHON_FOR_GEN in configure as the Python program to be
used for file generation during the build.
: Avoid C++ compilation errors on FreeBSD and OS X. Also update
FreedBSD version checks for the original ctype UTF-8 workaround.

: Suppress spurious build warnings when updating importlibâs
bootstrap files. Patch by Xiang Zhang

: Correct the references to Modules/python.exp, which is required
on AIX.  The references were accidentally changed in 3.5.0a1.

: CPP invocation in configure must use CPPFLAGS. Patch by Chi
Hsuan Yen.

: The configure script now inserts comments into the makefile to
prevent the pgen and _freeze_importlib executables from being
cross-compiled.

================================================================================

# Changelog - Build (Part 2)

: Set PYTHON_FOR_GEN in configure as the Python program to be
used for file generation during the build.

: Avoid C++ compilation errors on FreeBSD and OS X. Also update
FreedBSD version checks for the original ctype UTF-8 workaround.

================================================================================

# Changelog - Security

List:
: Fix os.urandom() implementation using getrandom() on Linux.
Truncate size to INT_MAX and loop until we collected enough random bytes,
instead of casting a directly Py_ssize_t to int.
: Avoid shell injection problems with ctypes.util.find_library().

: Fix os.urandom() implementation using getrandom() on Linux.
Truncate size to INT_MAX and loop until we collected enough random bytes,
instead of casting a directly Py_ssize_t to int.

: Avoid shell injection problems with ctypes.util.find_library().

================================================================================

# Changelog - Core and Builtins

List:
: Fixed possible integer overflow in bytes and bytearray
concatenations. Patch by Xiang Zhang.
: The output of a special Python build with defined COUNT_ALLOCS,
SHOW_ALLOC_COUNT or SHOW_TRACK_COUNT macros is now off by  default.  It
can be re-enabled using the â-X showalloccountâ option.  It now outputs to
stderr instead of stdout.
: __length_hint__() of bytearray iterators no longer return a
negative integer for a resized bytearray.
: The fromhex() class methods of bytes and bytearray subclasses
now return an instance of corresponding subclass.

: Fixed possible integer overflow in bytes and bytearray
concatenations. Patch by Xiang Zhang.

: The output of a special Python build with defined COUNT_ALLOCS,
SHOW_ALLOC_COUNT or SHOW_TRACK_COUNT macros is now off by  default.  It
can be re-enabled using the â-X showalloccountâ option.  It now outputs to
stderr instead of stdout.

: __length_hint__() of bytearray iterators no longer return a
negative integer for a resized bytearray.

: The fromhex() class methods of bytes and bytearray subclasses
now return an instance of corresponding subclass.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix error message for imp.find_module() to refer to âpathâ
instead of ânameâ. Patch by Lev Maximov.
: Fix SSL zero-length recv() calls to not block and not raise an
error about unclean EOF.
: Change time format returned by http.cookie.time2netscape,
confirming the netscape cookie format and making it consistent with
documentation.
: Deprecated dbm.dumb behavior that differs from common dbm
behavior: creating a database in ârâ and âwâ modes and modifying a
database in ârâ mode.
: Change the socketserver.StreamRequestHandler.wfile attribute to
implement BufferedIOBase. In particular, the write() method no longer does
partial writes.
: Added methods trace_add, trace_remove and trace_info in the
tkinter.Variable class.  They replace old methods trace_variable, trace,
trace_vdelete and trace_vinfo that use obsolete Tcl commands and might not
work in future versions of Tcl.  Fixed old tracing methods:
trace_vdelete() with wrong mode no longer break tracing, trace_vinfo() now
always returns a list of pairs of strings, tracing in the âuâ mode now
works.
: Only the level argument to zlib.compress() is keyword argument
now.  The first argument is positional-only.
: Expose the DirEntry type as os.DirEntry. Code patch by Jelle
Zijlstra.
: Update os.fspath()/PyOS_FSPath() to check the return value of
__fspath__() to be either str or bytes.
: All optional parameters of the dump(), dumps(), load() and
loads() functions and JSONEncoder and JSONDecoder class constructors in
the json module are now keyword-only.
: Methods selection_set(), selection_add(), selection_remove()
and selection_toggle() of ttk.TreeView now allow passing multiple items as
multiple arguments instead of passing them as a tuple.  Deprecated
undocumented ability of calling the selection() method with arguments.
: Fixed curses.ascii functions isblank(), iscntrl() and
ispunct().
: Numerical state in the repr for Tkinter event objects is now
represented as a combination of known flags.
: Match objects in the re module now support index-like objects
as group indices.  Based on patches by Jeroen Demeyer and Xiang Zhang.
: Some functions (compile() etc) accepted a filename argument
encoded as an iterable of integers. Now only strings and byte-like objects
are accepted.
: socket.ioctl now supports SIO_LOOPBACK_FAST_PATH. Patch by
Daniel Stokes.
: Prevents distutils failing on Windows when environment
variables contain non-ASCII characters
: Fixed possible leaks in the ctypes module.
: Got rid of bare excepts in the turtle module.  Original patch
by Jelle Zijlstra.
: When an exception is raised within the context being managed by
a contextlib.ExitStack() and one of the exit stack generators catches and
raises it in a chain, do not re-raise the original exception when exiting,
let the new chained one through.  This avoids the  bug described
in issue25782.
: sqlite3.Cursor.lastrowid now supports REPLACE statement.
Initial patch by Alex LordThorsen.
: Fixed ttk.TreeView selection operations with item idâs
containing spaces.
: Honor a pager set by the env var MANPAGER (in preference to one
set by the env var PAGER).
: Fix various functions in the âreadlineâ module to use the
locale encoding, and fix get_begidx() and get_endidx() to return code
point indexes.
: Add loop.connect_accepted_socket(). Patch by Jim Fulton.

================================================================================

# Changelog - Library (Part 2)

: Fix error message for imp.find_module() to refer to âpathâ
instead of ânameâ. Patch by Lev Maximov.

: Fix SSL zero-length recv() calls to not block and not raise an
error about unclean EOF.

: Change time format returned by http.cookie.time2netscape,
confirming the netscape cookie format and making it consistent with
documentation.

: Deprecated dbm.dumb behavior that differs from common dbm
behavior: creating a database in ârâ and âwâ modes and modifying a
database in ârâ mode.

: Change the socketserver.StreamRequestHandler.wfile attribute to
implement BufferedIOBase. In particular, the write() method no longer does
partial writes.

: Added methods trace_add, trace_remove and trace_info in the
tkinter.Variable class.  They replace old methods trace_variable, trace,
trace_vdelete and trace_vinfo that use obsolete Tcl commands and might not
work in future versions of Tcl.  Fixed old tracing methods:
trace_vdelete() with wrong mode no longer break tracing, trace_vinfo() now
always returns a list of pairs of strings, tracing in the âuâ mode now
works.

: Only the level argument to zlib.compress() is keyword argument
now.  The first argument is positional-only.

================================================================================

# Changelog - Library (Part 3)

: Expose the DirEntry type as os.DirEntry. Code patch by Jelle
Zijlstra.

: Update os.fspath()/PyOS_FSPath() to check the return value of
__fspath__() to be either str or bytes.

: All optional parameters of the dump(), dumps(), load() and
loads() functions and JSONEncoder and JSONDecoder class constructors in
the json module are now keyword-only.

: Methods selection_set(), selection_add(), selection_remove()
and selection_toggle() of ttk.TreeView now allow passing multiple items as
multiple arguments instead of passing them as a tuple.  Deprecated
undocumented ability of calling the selection() method with arguments.

: Fixed curses.ascii functions isblank(), iscntrl() and
ispunct().

: Numerical state in the repr for Tkinter event objects is now
represented as a combination of known flags.

: Match objects in the re module now support index-like objects
as group indices.  Based on patches by Jeroen Demeyer and Xiang Zhang.

: Some functions (compile() etc) accepted a filename argument
encoded as an iterable of integers. Now only strings and byte-like objects
are accepted.

: socket.ioctl now supports SIO_LOOPBACK_FAST_PATH. Patch by
Daniel Stokes.

================================================================================

# Changelog - Library (Part 4)

: Prevents distutils failing on Windows when environment
variables contain non-ASCII characters

: Fixed possible leaks in the ctypes module.

: Got rid of bare excepts in the turtle module.  Original patch
by Jelle Zijlstra.

: When an exception is raised within the context being managed by
a contextlib.ExitStack() and one of the exit stack generators catches and
raises it in a chain, do not re-raise the original exception when exiting,
let the new chained one through.  This avoids the  bug described
in issue25782.

: sqlite3.Cursor.lastrowid now supports REPLACE statement.
Initial patch by Alex LordThorsen.

: Fixed ttk.TreeView selection operations with item idâs
containing spaces.

: Honor a pager set by the env var MANPAGER (in preference to one
set by the env var PAGER).

: Fix various functions in the âreadlineâ module to use the
locale encoding, and fix get_begidx() and get_endidx() to return code
point indexes.

: Add loop.connect_accepted_socket(). Patch by Jim Fulton.

================================================================================

# Changelog - IDLE (Part 1)

List:
: IDLE search dialogs now use ttk widgets.
: Add âIDLE Modern Unixâ to the built-in key sets. Make the
default key set depend on the platform. Add tests for the changes to the
config module.
: make command line âidle-test> python test_help.pyâ work.
__file__ is relative when python is started in the fileâs directory.
: add line counter and crc to IDLE configHandler test dump.
: IDLE: add query.py with base Query dialog and ttk widgets.
Module had subclasses SectionName, ModuleName, and HelpSource, which are
used to get information from users by configdialog and file =>Load Module.
Each subclass has itw own validity checks.  Using ModuleName allows users
to edit bad module names instead of starting over. Add tests and delete
the two files combined into the new one.
: Test_idle no longer changes the locale.
: Allow non-ascii chars in IDLE NEWS.txt, for contributor names.
: IDLE: Cleanly delete custom themes and key bindings.
Previously, when IDLE was started from a console or by import, a cascade
of warnings was emitted. Patch by Serhiy Storchaka.
: Run IDLE, test_idle, and htest with tkinter default root
disabled.  Fix code and tests that fail with this restriction.  Fix htests
to not create a second and redundant root and mainloop.
: Fix IDLE.app failure to launch on OS X due to vestigial import.

================================================================================

# Changelog - IDLE (Part 2)

: IDLE search dialogs now use ttk widgets.

: Add âIDLE Modern Unixâ to the built-in key sets. Make the
default key set depend on the platform. Add tests for the changes to the
config module.

: make command line âidle-test> python test_help.pyâ work.
__file__ is relative when python is started in the fileâs directory.

: add line counter and crc to IDLE configHandler test dump.

: IDLE: add query.py with base Query dialog and ttk widgets.
Module had subclasses SectionName, ModuleName, and HelpSource, which are
used to get information from users by configdialog and file =>Load Module.
Each subclass has itw own validity checks.  Using ModuleName allows users
to edit bad module names instead of starting over. Add tests and delete
the two files combined into the new one.

: Test_idle no longer changes the locale.

: Allow non-ascii chars in IDLE NEWS.txt, for contributor names.

: IDLE: Cleanly delete custom themes and key bindings.
Previously, when IDLE was started from a console or by import, a cascade
of warnings was emitted. Patch by Serhiy Storchaka.

================================================================================

# Changelog - IDLE (Part 3)

: Run IDLE, test_idle, and htest with tkinter default root
disabled.  Fix code and tests that fail with this restriction.  Fix htests
to not create a second and redundant root and mainloop.

: Fix IDLE.app failure to launch on OS X due to vestigial import.

================================================================================

# Changelog - C API

List:
: PyUnicode_FSDecoder() accepted a filename argument encoded as
an iterable of integers. Now only strings and byte-like objects are
accepted.

: PyUnicode_FSDecoder() accepted a filename argument encoded as
an iterable of integers. Now only strings and byte-like objects are
accepted.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix the logic that searches build directories for generated
include files when building outside the source tree.
: Expose the Android API level that python was built against, in
sysconfig.get_config_vars() as âANDROID_API_LEVELâ.
: The interpreter that runs the cross-build, found in PATH, must
now be of the same feature version (e.g. 3.6) as the source being built.
: Update Windows builds to use OpenSSL 1.0.2h.
: Rename the platform directory from plat-$(MACHDEP) to
plat-$(PLATFORM_TRIPLET). Rename the config directory (LIBPL) from
config-$(LDVERSION) to config-$(LDVERSION)-$(PLATFORM_TRIPLET). Install
the platform specific _sysconfigdata module into the platform directory
and rename it to include the ABIFLAGS.
Donât use largefile support for GNU/Hurd.

: Fix the logic that searches build directories for generated
include files when building outside the source tree.

: Expose the Android API level that python was built against, in
sysconfig.get_config_vars() as âANDROID_API_LEVELâ.

: The interpreter that runs the cross-build, found in PATH, must
now be of the same feature version (e.g. 3.6) as the source being built.

: Update Windows builds to use OpenSSL 1.0.2h.

================================================================================

# Changelog - Build (Part 2)

: Rename the platform directory from plat-$(MACHDEP) to
plat-$(PLATFORM_TRIPLET). Rename the config directory (LIBPL) from
config-$(LDVERSION) to config-$(LDVERSION)-$(PLATFORM_TRIPLET). Install
the platform specific _sysconfigdata module into the platform directory
and rename it to include the ABIFLAGS.

Donât use largefile support for GNU/Hurd.

================================================================================

# Changelog - Tools/Demos

List:
: Fixed the type of the first argument of module-level functions
generated by Argument Clinic.  Patch by Petr Viktorin.
: Fixed Tools/importbench/importbench.py.

: Fixed the type of the first argument of module-level functions
generated by Argument Clinic.  Patch by Petr Viktorin.

: Fixed Tools/importbench/importbench.py.

================================================================================

# Changelog - Documentation

List:
: Moved the search box from the sidebar to the header and footer
of each page. Patch by Ammar Askar.
: Update documentation to reflect the deprecation of 
and normalize on the term âvirtual environmentâ. Patch by Steve Piercy.

: Moved the search box from the sidebar to the header and footer
of each page. Patch by Ammar Askar.

: Update documentation to reflect the deprecation of 
and normalize on the term âvirtual environmentâ. Patch by Steve Piercy.

================================================================================

# Changelog - Tests

List:
: Added test.support.is_android that is True when this is an
Android build.

: Added test.support.is_android that is True when this is an
Android build.

================================================================================

# Changelog - Security

List:
: Update expat to 2.1.1, fixes CVE 2015-1283.
Fix TLS stripping vulnerability in smtplib, CVE 2016-0772. Reported by
Team Oststrom.
: On Linux, os.urandom() now calls getrandom() with
GRND_NONBLOCK to fall back on reading /dev/urandom if the urandom
entropy pool is not initialized yet. Patch written by Colm Buckley.

: Update expat to 2.1.1, fixes CVE 2015-1283.

Fix TLS stripping vulnerability in smtplib, CVE 2016-0772. Reported by
Team Oststrom.

: On Linux, os.urandom() now calls getrandom() with
GRND_NONBLOCK to fall back on reading /dev/urandom if the urandom
entropy pool is not initialized yet. Patch written by Colm Buckley.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Simplified MAKE_FUNCTION and removed MAKE_CLOSURE opcodes.
Patch by Demur Rumed.
: Raise NotSupportedError if sqlite3 is older than 3.3.1. Patch
by Dave Sawyer.
: Fixed compiling BUILD_MAP_UNPACK_WITH_CALL opcode.  Calling
function with generalized unpacking (PEP 448) and conflicting keyword
names could cause undefined behavior.
: Added BUILD_CONST_KEY_MAP opcode.
: Add support for os.PathLike objects to open() (part of
).
: Fixed SystemError if a custom opener (for open()) returns a
negative number without setting an exception.
: float() now always return an instance of exact float. The
deprecation warning is emitted if __float__ returns an instance of a
strict subclass of float.  In a future versions of Python this can be an
error.
: Python interpreter is now about 7% faster due to optimized
instruction decoding.  Based on patch by Demur Rumed.
: Python interpreter now uses 16-bit wordcode instead of
bytecode. Patch by Demur Rumed.
: Allow assigning to an empty target list in round brackets: () =
iterable.
: Update the __aiter__ protocol: instead of returning an
awaitable that resolves to an asynchronous iterator, the asynchronous
iterator should be returned directly.  Doing the former will trigger a
PendingDeprecationWarning.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Simplified MAKE_FUNCTION and removed MAKE_CLOSURE opcodes.
Patch by Demur Rumed.

: Raise NotSupportedError if sqlite3 is older than 3.3.1. Patch
by Dave Sawyer.

: Fixed compiling BUILD_MAP_UNPACK_WITH_CALL opcode.  Calling
function with generalized unpacking (PEP 448) and conflicting keyword
names could cause undefined behavior.

: Added BUILD_CONST_KEY_MAP opcode.

: Add support for os.PathLike objects to open() (part of
).

: Fixed SystemError if a custom opener (for open()) returns a
negative number without setting an exception.

: float() now always return an instance of exact float. The
deprecation warning is emitted if __float__ returns an instance of a
strict subclass of float.  In a future versions of Python this can be an
error.

: Python interpreter is now about 7% faster due to optimized
instruction decoding.  Based on patch by Demur Rumed.

: Python interpreter now uses 16-bit wordcode instead of
bytecode. Patch by Demur Rumed.

: Allow assigning to an empty target list in round brackets: () =
iterable.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Update the __aiter__ protocol: instead of returning an
awaitable that resolves to an asynchronous iterator, the asynchronous
iterator should be returned directly.  Doing the former will trigger a
PendingDeprecationWarning.

================================================================================

# Changelog - Library (Part 1)

List:
Comment out socket (SO_REUSEPORT) and posix (O_SHLOCK, O_EXLOCK) constants
exposed on the API which are not implemented on GNU/Hurd. They would not
work at runtime anyway.
: Generated names for Tkinter widgets are now more meaningful and
recognizable.
: Fixed crashes in repr of recursive ElementTree.Element and
functools.partial objects.
: Improved repr for Tkinter event objects.
: Improve exception message of IPv{4,6}Network.__getitem__. Patch
by Gareth Rees.
: Implement missing IPv4Address.is_global property.  It was
documented since 07a5610bae9d.  Initial patch by Roger Luethi.
: Removed deprecated support of universal newlines mode from
ZipFile.open().
: Unknown escapes consisting of  and an ASCII letter in
regular expressions now are errors.  The re.LOCALE flag now can be used
only with bytes patterns.
: Add os.PathLike support to DirEntry (part of ).
Initial patch by Jelle Zijlstra.
: distutils register command now decodes HTTP responses
correctly.  Initial patch by ingrid.
: Add os.PathLike support to pathlib, removing its provisional
status (part of PEP 519). Initial patch by Dusty Phillips.
: Add support for os.PathLike objects to os.fsencode() and
os.fsdecode() (part of ).
: Introduce os.PathLike and os.fspath() (part of ).
A new version of typing.py provides several new classes and features:
@overload outside stubs, Reversible, DefaultDict, Text, ContextManager,
Type[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some
of the new features are not yet implemented in mypy or other static
analyzers). Also classes for  (Awaitable, AsyncIterable,
AsyncIterator) have been added (in fact they made it into 3.5.1 but were
never mentioned).
: Stop http.server.BaseHTTPRequestHandler.send_error() from
sending a message body for 205 Reset Content.  Also, donât send Content
header fields in responses that donât have a body.  Patch by Susumu
Koshiba.
: Fix the âplatformâ module to tolerate when sys.version contains
truncated build information.
: Added missing APIs to __all__ to match the documented APIs for
the following modules: cgi, mailbox, mimetypes, plistlib and smtpd.
Patches by Jacek KoÅodziej.
: In the zlib module, allow decompressing raw Deflate streams
with a predefined zdict.  Based on patch by Xiang Zhang.
: Fix wsgiref.simple_server.WSGIRequestHandler to completely
write data to the client.  Previously it could do partial writes and
truncate data.  Also, wsgiref.handler.ServerHandler can now handle stdout
doing partial writes, but this is deprecated.
: Use _sysconfigdata.py to initialize distutils.sysconfig.
:  now reports the implicit  parameters
generated by the compiler for comprehension and generator expression
scopes as if they were positional-only parameters called .
Patch by Jelle Zijlstra.
: Add  to .  Patch by Emanuel Barry.
: subprocess.Popen.communicate now correctly ignores
BrokenPipeError when the child process dies before .communicate() is
called in more/all circumstances.
signal, socket, and ssl module IntEnum constant name lookups now return a
consistent name for values having multiple names.  Ex: signal.Signals(6)
now refers to itself as signal.SIGALRM rather than flipping between that
and signal.SIGIOT based on the interpreterâs hash randomization seed.
: Clarify the subprocess.CalledProcessError error message text
when the child process died due to a signal.
: Donât define socketserver.Forking* names on platforms such as
Windows that do not support os.fork().
: distutils.upload now correctly handles HTTPError. Initial patch
by Claudiu Popa.
: Replace custom parse tree validation in the parser module with
a simple DFA validator.
: Fix SSLContext._load_windows_store_certs fails with
PermissionError
: Avoid creating duplicate filters when using filterwarnings and
simplefilter. Based on patch by Alex Shkop.
: winreg.QueryValueEx() now return an integer for REG_QWORD type.
: subprocess.Popen destructor now emits a ResourceWarning warning
if the child process is still running.
: Optimize pickle.load() and pickle.loads(), up to 10% faster to
deserialize a lot of small objects.
: New keyword only parameters in reset_mock call.

================================================================================

# Changelog - Library (Part 2)

Comment out socket (SO_REUSEPORT) and posix (O_SHLOCK, O_EXLOCK) constants
exposed on the API which are not implemented on GNU/Hurd. They would not
work at runtime anyway.

: Generated names for Tkinter widgets are now more meaningful and
recognizable.

: Fixed crashes in repr of recursive ElementTree.Element and
functools.partial objects.

: Improved repr for Tkinter event objects.

: Improve exception message of IPv{4,6}Network.__getitem__. Patch
by Gareth Rees.

: Implement missing IPv4Address.is_global property.  It was
documented since 07a5610bae9d.  Initial patch by Roger Luethi.

: Removed deprecated support of universal newlines mode from
ZipFile.open().

: Unknown escapes consisting of  and an ASCII letter in
regular expressions now are errors.  The re.LOCALE flag now can be used
only with bytes patterns.

: Add os.PathLike support to DirEntry (part of ).
Initial patch by Jelle Zijlstra.

: distutils register command now decodes HTTP responses
correctly.  Initial patch by ingrid.

: Add os.PathLike support to pathlib, removing its provisional
status (part of PEP 519). Initial patch by Dusty Phillips.

: Add support for os.PathLike objects to os.fsencode() and
os.fsdecode() (part of ).

================================================================================

# Changelog - Library (Part 3)

: Introduce os.PathLike and os.fspath() (part of ).

A new version of typing.py provides several new classes and features:
@overload outside stubs, Reversible, DefaultDict, Text, ContextManager,
Type[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some
of the new features are not yet implemented in mypy or other static
analyzers). Also classes for  (Awaitable, AsyncIterable,
AsyncIterator) have been added (in fact they made it into 3.5.1 but were
never mentioned).

: Stop http.server.BaseHTTPRequestHandler.send_error() from
sending a message body for 205 Reset Content.  Also, donât send Content
header fields in responses that donât have a body.  Patch by Susumu
Koshiba.

: Fix the âplatformâ module to tolerate when sys.version contains
truncated build information.

: Added missing APIs to __all__ to match the documented APIs for
the following modules: cgi, mailbox, mimetypes, plistlib and smtpd.
Patches by Jacek KoÅodziej.

: In the zlib module, allow decompressing raw Deflate streams
with a predefined zdict.  Based on patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 4)

: Fix wsgiref.simple_server.WSGIRequestHandler to completely
write data to the client.  Previously it could do partial writes and
truncate data.  Also, wsgiref.handler.ServerHandler can now handle stdout
doing partial writes, but this is deprecated.

: Use _sysconfigdata.py to initialize distutils.sysconfig.

:  now reports the implicit  parameters
generated by the compiler for comprehension and generator expression
scopes as if they were positional-only parameters called .
Patch by Jelle Zijlstra.

: Add  to .  Patch by Emanuel Barry.

: subprocess.Popen.communicate now correctly ignores
BrokenPipeError when the child process dies before .communicate() is
called in more/all circumstances.

signal, socket, and ssl module IntEnum constant name lookups now return a
consistent name for values having multiple names.  Ex: signal.Signals(6)
now refers to itself as signal.SIGALRM rather than flipping between that
and signal.SIGIOT based on the interpreterâs hash randomization seed.

: Clarify the subprocess.CalledProcessError error message text
when the child process died due to a signal.

: Donât define socketserver.Forking* names on platforms such as
Windows that do not support os.fork().

================================================================================

# Changelog - Library (Part 5)

: distutils.upload now correctly handles HTTPError. Initial patch
by Claudiu Popa.

: Replace custom parse tree validation in the parser module with
a simple DFA validator.

: Fix SSLContext._load_windows_store_certs fails with
PermissionError

: Avoid creating duplicate filters when using filterwarnings and
simplefilter. Based on patch by Alex Shkop.

: winreg.QueryValueEx() now return an integer for REG_QWORD type.

: subprocess.Popen destructor now emits a ResourceWarning warning
if the child process is still running.

: Optimize pickle.load() and pickle.loads(), up to 10% faster to
deserialize a lot of small objects.

: New keyword only parameters in reset_mock call.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Paste with text selected now replaces the selection on X11. This
matches how paste works on Windows, Mac, most modern Linux apps, and ttk
widgets. Original patch by Serhiy Storchaka.
: Switch all scrollbars in IDLE to ttk versions. Where needed,
minimal tests are added to cover changes.
: IDLE requires tk 8.5 and availability ttk widgets. Delete now
unneeded tk version tests and code for older versions. Add test for IDLE
syntax colorizer.
: idlelib.macosx.isXyzTk functions initialize as needed.
: move Aqua unbinding code, which enable context menus, to
macosx.
: Make clear in idlelib.idle_test.__init__ that the directory is
a private implementation of test.test_idle and tool for maintainers.
: Stop âThemeChangedâ warnings when running IDLE tests. These
persisted after other warnings were suppressed in #20567. Apply Serhiy
Storchakaâs update_idletasks solution to four test files. Record this
additional advice in idle_test/README.txt
: Revise idle_test/README.txt with advice about avoiding tk
warning messages from tests.  Apply advice to several IDLE tests.
: Update idlelib/README.txt with new file names and event
handlers.
: Remove obsolete code not used by IDLE.
: Make colorizer htest and turtledemo work with dark themes. Move
code for configuring text widget colors to a new function.
: Rename many idlelib/*.py and idle_test/test_*.py files.
Edit files to replace old names with new names when the old name referred
to the module rather than the class it contained. See the issue and IDLE
section in Whatâs New in 3.6 for more.
: When tk reports font size as 0, change to size 10. Such fonts
on Linux prevented the configuration dialog from opening.
: Add test for IDLEâs percolator. Original patch by Saimadhav
Heblikar.
: Add test for IDLEâs replace dialog. Original patch by Saimadhav
Heblikar.
: Add test for IDLEâs search dialog. Original patch by Westley
MartÃ­nez.
: Add test for undo delegator.  Patch mostly by Saimadhav
Heblikar .
: Add ConfigDialog.remove_var_callbacks to stop memory leaks.
: Add more asserts to test_delegator.

================================================================================

# Changelog - IDLE (Part 2)

: Paste with text selected now replaces the selection on X11. This
matches how paste works on Windows, Mac, most modern Linux apps, and ttk
widgets. Original patch by Serhiy Storchaka.

: Switch all scrollbars in IDLE to ttk versions. Where needed,
minimal tests are added to cover changes.

: IDLE requires tk 8.5 and availability ttk widgets. Delete now
unneeded tk version tests and code for older versions. Add test for IDLE
syntax colorizer.

: idlelib.macosx.isXyzTk functions initialize as needed.

: move Aqua unbinding code, which enable context menus, to
macosx.

: Make clear in idlelib.idle_test.__init__ that the directory is
a private implementation of test.test_idle and tool for maintainers.

: Stop âThemeChangedâ warnings when running IDLE tests. These
persisted after other warnings were suppressed in #20567. Apply Serhiy
Storchakaâs update_idletasks solution to four test files. Record this
additional advice in idle_test/README.txt

: Revise idle_test/README.txt with advice about avoiding tk
warning messages from tests.  Apply advice to several IDLE tests.

: Update idlelib/README.txt with new file names and event
handlers.

: Remove obsolete code not used by IDLE.

================================================================================

# Changelog - IDLE (Part 3)

: Make colorizer htest and turtledemo work with dark themes. Move
code for configuring text widget colors to a new function.

: Rename many idlelib/*.py and idle_test/test_*.py files.
Edit files to replace old names with new names when the old name referred
to the module rather than the class it contained. See the issue and IDLE
section in Whatâs New in 3.6 for more.

: When tk reports font size as 0, change to size 10. Such fonts
on Linux prevented the configuration dialog from opening.

: Add test for IDLEâs percolator. Original patch by Saimadhav
Heblikar.

: Add test for IDLEâs replace dialog. Original patch by Saimadhav
Heblikar.

: Add test for IDLEâs search dialog. Original patch by Westley
MartÃ­nez.

: Add test for undo delegator.  Patch mostly by Saimadhav
Heblikar .

: Add ConfigDialog.remove_var_callbacks to stop memory leaks.

: Add more asserts to test_delegator.

================================================================================

# Changelog - Documentation

List:
: Change the default PYTHONDOCS URL to âhttps:â, and fix the
resulting links to use lowercase.  Patch by Sean Rodman, test by Kaushik
Nadikuditi.
: Document the new  unpacking syntax of 3.5.
: Add remaining doc links to source code for Python-coded
modules. Patch by Yoni Lavi.

: Change the default PYTHONDOCS URL to âhttps:â, and fix the
resulting links to use lowercase.  Patch by Sean Rodman, test by Kaushik
Nadikuditi.

: Document the new  unpacking syntax of 3.5.

: Add remaining doc links to source code for Python-coded
modules. Patch by Yoni Lavi.

================================================================================

# Changelog - Tests

List:
: regrtest now uses subprocesses when the -j1 command line option
is used: each test file runs in a fresh child process. Before, the -j1
option was ignored.
: Tools/buildbot/test.bat script now uses -j1 by default to run
each test file in fresh child process.

: regrtest now uses subprocesses when the -j1 command line option
is used: each test file runs in a fresh child process. Before, the -j1
option was ignored.

: Tools/buildbot/test.bat script now uses -j1 by default to run
each test file in fresh child process.

================================================================================

# Changelog - Windows

List:
: The py.exe launcher now defaults to Python 3. The Windows
launcher  no longer prefers an installed Python 2 version over
Python 3 by default when used interactively.
: Remove unused and outdated icons. (See also:
https://github.com/python/pythondotorg/issues/945)

: The py.exe launcher now defaults to Python 3. The Windows
launcher  no longer prefers an installed Python 2 version over
Python 3 by default when used interactively.

: Remove unused and outdated icons. (See also:
https://github.com/python/pythondotorg/issues/945)

================================================================================

# Changelog - Build

List:
: Fix the cross-compiling pgen rule for in-tree builds.  Patch by
Xavier de Gaye.
: Update OS X 10.5+ 32-bit-only installer to build and link with
OpenSSL 1.0.2h.

: Fix the cross-compiling pgen rule for in-tree builds.  Patch by
Xavier de Gaye.

: Update OS X 10.5+ 32-bit-only installer to build and link with
OpenSSL 1.0.2h.

================================================================================

# Changelog - C API

List:
: Add the PyOS_FSPath() function (part of ).
: PyArg_ParseTupleAndKeywords() now supports positional-only
parameters.

: Add the PyOS_FSPath() function (part of ).

: PyArg_ParseTupleAndKeywords() now supports positional-only
parameters.

================================================================================

# Changelog - Tools/Demos

List:
: Argument Clinic now supports positional-only and keyword
parameters in the same function.

: Argument Clinic now supports positional-only and keyword
parameters in the same function.

================================================================================

# Changelog - Security

List:
: Fix directory traversal vulnerability with http.server on
Windows.  This fixes a regression that was introduced in 3.3.4rc1 and
3.4.0rc1.  Based on patch by Philipp Hagemeister.
: ssl.py _load_windows_store_certs fails if windows cert store is
empty. Patch by Baji.
: On Windows open the cert store readonly in
ssl.enum_certificates.

: Fix directory traversal vulnerability with http.server on
Windows.  This fixes a regression that was introduced in 3.3.4rc1 and
3.4.0rc1.  Based on patch by Philipp Hagemeister.

: ssl.py _load_windows_store_certs fails if windows cert store is
empty. Patch by Baji.

: On Windows open the cert store readonly in
ssl.enum_certificates.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed TypeError when frame.f_trace is set to None. Patch by
Xavier de Gaye.
: Fixed possible refleaks in failing Py_BuildValue() with the âNâ
format unit.
: Fix possible refleak when creating a function with annotations.
: Fixed bytearray.remove() for values greater than 127.  Based on
patch by Joe Jevnik.
: int.from_bytes() no longer bypasses constructors for
subclasses.
: Optimized the float.fromhex() class method for exact float. It
is now 2 times faster.
: Single var-keyword argument of dict subtype was passed
unscathed to the C-defined function.  Now it is converted to exact dict.
: gc.get_objects() no longer contains a broken tuple with NULL
pointer.
: Use RawConfigParser for .pypirc parsing, removing support for
interpolation unintentionally added with move to Python 3. Behavior no
longer does any interpolation in .pypirc files, matching behavior in
Python 2.7 and Setuptools 19.0.
: Memory functions of the PyMem_Malloc() domain
(PYMEM_DOMAIN_MEM) now use the pymalloc allocator rather than system . Applications calling
PyMem_Malloc() without holding the GIL can now crash: use
PYTHONMALLOC=debug environment variable to validate the usage of
memory allocators in your application.
: Optimize function calls only using unpacking like
func(*tuple) (no other positional argument, no keyword): avoid copying
the tuple. Patch written by Joe Jevnik.
: Make the builtin slice type support cycle collection.
: super.__init__ no longer leaks memory if called multiple times.
NOTE: A direct call of super.__init__ is not endorsed!
: Fix the doc comment for FileFinder.find_spec().
: Mention  in the importlib docs.
: PYTHONIOENCODING now has priority over locale in setting the
error handler for stdin and stdout.
: Fixed crash on iterating exhausting iterators. Affected classes
are generic sequence iterators, iterators of str, bytes, bytearray, list,
tuple, set, frozenset, dict, OrderedDict, corresponding views and
os.scandir() iterator.
: Optimize bytes.replace(b'',  and
bytearray.replace(b'', . Patch written by Josh Snider.
: If coding cookie is specified multiple times on a line in
Python source code file, only the first one is taken to account.
: Add tests for reloading namespace packages.
: Switch applicable importlib tests to use  API.
: Debug hooks on Python memory allocators now raise a fatal error
if functions of the PyMem_Malloc() family are called without
holding the GIL.
: On error, the debug hooks on Python memory allocators now use
the tracemalloc module to get the traceback where a memory block
was allocated.
: The debug hooks on Python memory allocator
PyObject_Malloc() now detect when functions are called without
holding the GIL.
: Add PYTHONMALLOC environment variable to set the
Python memory allocators and/or install debug hooks.
: The PyMem_SetupDebugHooks() function can now also be
used on Python compiled in release mode.
: The PYTHONMALLOCSTATS environment variable can now
also be used on Python compiled in release mode. It now has no effect if
set to an empty string.
: In debug mode, debug hooks are now also installed on Python
memory allocators when Python is configured without pymalloc.
: Fix str.translate() when string is ASCII and first replacements
removes character, but next replacement uses a non-ASCII character or a
string longer than 1 character. Regression introduced in Python 3.5.0.
: Ensure exception reports from PyErr_Display() and
PyErr_WriteUnraisable() are sensible even when formatting them produces
secondary errors.  This affects the reports produced by
sys.__excepthook__() and when __del__() raises an exception.
: Correct behavior to reject comma as a legal character for
cookie names.
: Upgrade the warning when a generator raises StopIteration from
PendingDeprecationWarning to DeprecationWarning.  Patch by Anish Shah.
: The compiler now ignores all constant statements: bytes, str,
int, float, complex, name constants (None, False, True), Ellipsis and
ast.Constant; not only str and int. For example,  is now ignored in
  .
: Avoid masking the original TypeError exception when using star
() unpacking in function calls.  Based on patch by Hagen FÃ¼rstenau
and Daniel Urban.
: Add a new kind of AST node: ast.Constant. It can be used by
external AST optimizers, but the compiler does not emit directly such
node.
: Sped-up allocation of dict key objects by using Pythonâs small
object allocator.  (Contributed by Julian Taylor.)
: Import raises ImportError instead of SystemError if a relative
import is attempted without a known parent package.
: When compiling code, donât merge constants if they are equal
but have a different types. For example,      
 is now correctly compiled to two different functions: 
returns  () and  returns  (), even if
 and  are equal.
: The format of the  attribute of code objects
changes to support negative line number delta.
: Add a new private _PyThreadState_UncheckedGet() function to get
the current Python thread state, but donât issue a fatal error if it is
NULL. This new function must be used instead of accessing directly the
_PyThreadState_Current variable.  The variable is no more exposed since
Python 3.5.1 to hide the exact implementation of atomic C types, to avoid
compiler issues.
: If __package__ != __spec__.parent or if neither __package__ or
__spec__ are defined then ImportWarning is raised.
: [UPDATE] Comment out the one of the pickleability tests in
_PyObject_GetState() due to regressions observed in Cython-based projects.
: Disallowed null characters in the type name.
: Fix segfault when an invalid nonlocal statement binds a name
starting with two underscores.
: Instances of extension types with a state that arenât
subclasses of list or dict and havenât implemented any pickle-related
methods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or
__getstate__), can no longer be pickled.  Including memoryview.
: Massive replacing unsafe attribute setting code with special
macro Py_SETREF.
: Special method __bytes__() now works in str subclasses.
: __sizeof__ methods of builtin types now use dynamic basic size.
This allows sys.getsize() to work correctly with their subclasses with
__slots__ defined.
: Fixed problem with in-place string concatenation and utf-8
cache.
: New Py_FinalizeEx() API allowing Python to set an exit status of
120 on failure to flush buffered streams.
: telnetlib.Telnet is now a context manager.
: Fixed crash in object.__reduce__() if slot name is freed inside
__getattr__.
: Fixed crash on converting objects with special methods
__bytes__, __trunc__, and __float__ returning instances of subclasses of
bytes, int, and float to subclasses of bytes, int, and float
correspondingly.
: Fix a possible segfault during argument parsing in functions
that accept filesystem paths.
: Fixed a partially broken sanity check in the _posixsubprocess
internals regarding how fds_to_pass were passed to the child.  The bug had
no actual impact as subprocess.py already avoided it.
: Fixed tokenizer crash when processing undecodable source code
with a null byte.
: The hash of the key now is calculated only once in most
operations in C implementation of OrderedDict.
: Default implementation of __reduce__ and __reduce_ex__ now
rejects builtin types with not defined __new__.
: Avoid buffer overreads when int(), float(), compile(), exec()
and eval() are passed bytes-like objects.  These objects are not
necessarily terminated by a null byte, but the functions assumed they
were.
: Fix parser and AST: fill lineno and col_offset of âargâ node
when compiling AST from Python objects.
: Fixed a crash and leaking NULL in repr() of OrderedDict that
was mutated by direct calls of dict methods.
: Iterating OrderedDict with keys with unstable hash now raises
KeyError in C implementations as well as in Python implementation.
: Fixed crash when highly nested OrderedDict structures were
garbage collected.
: Optimize bytes.fromhex() and bytearray.fromhex(): they are now
between 2x and 3.5x faster.
: Optimize bytearray % args using the new private _PyBytesWriter
API. Formatting is now between 2.5 and 5 times faster.
: sys.setrecursionlimit() now raises a RecursionError if the new
recursion limit is too low depending at the current recursion depth.
Modify also the âlower-water markâ formula to make it monotonic. This mark
is used to decide when the overflowed flag of the thread state is reset.
: Fix input() to prompt to the redirected stdout when
sys.stdout.fileno() fails.
: Optimize bytes % args using the new private _PyBytesWriter API.
Formatting is now up to 2 times faster.
: Prevent builtin types that are not allowed to be subclassed
from being subclassed through multiple inheritance.
: The UTF-8 decoder is now up to 15 times as fast for error
handlers: ,  and surrogateescape.
: Fixed a number of bugs in UTF-7 decoding of misformed data.
: The UTF-8 encoder is now up to 75 times as fast for error
handlers: , , surrogateescape, surrogatepass.
Patch co-written with Serhiy Storchaka.
: Import trace messages emitted in verbose (-v) mode are no
longer formatted twice.
: Optimize ASCII and latin1 encoders with the surrogateescape
error handler: the encoders are now up to 3 times as fast. Initial patch
written by Serhiy Storchaka.
: On Solaris 11.3 or newer, os.urandom() now uses the getrandom()
function instead of the getentropy() function. The getentropy() function
is blocking to generate very good quality entropy, os.urandom() doesnât
need such high-quality entropy.
: Modify Pythonâs grammar to allow trailing commas in the argument
list of a function declaration.  For example, âdef f(*, a = 3,): passâ is
now legal. Patch from Mark Dickinson.
: Implement  âLiteral String Interpolationâ. This
allows you to embed expressions inside f-strings, which are converted to
normal strings at run time. Given x=3, then fâvalue={x}â == âvalue=3â.
Patch by Eric V. Smith.
: Fix semantic bugs when using binary operators with dictionary
views and tuples.
: Fix possible integer overflow and heap corruption in
zipimporter.get_data().
: Fix TAB key behaviour in REPL with readline.
: Optimize PyLong_AsDouble.
: Optimize floor and modulo division for single-digit longs.
Microbenchmarks show 2-2.5x improvement.  Built-in âdivmodâ function is
now also ~10% faster. (See also: )
: Raise a RuntimeError when a coroutine object is awaited more
than once.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed TypeError when frame.f_trace is set to None. Patch by
Xavier de Gaye.

: Fixed possible refleaks in failing Py_BuildValue() with the âNâ
format unit.

: Fix possible refleak when creating a function with annotations.

: Fixed bytearray.remove() for values greater than 127.  Based on
patch by Joe Jevnik.

: int.from_bytes() no longer bypasses constructors for
subclasses.

: Optimized the float.fromhex() class method for exact float. It
is now 2 times faster.

: Single var-keyword argument of dict subtype was passed
unscathed to the C-defined function.  Now it is converted to exact dict.

: gc.get_objects() no longer contains a broken tuple with NULL
pointer.

: Use RawConfigParser for .pypirc parsing, removing support for
interpolation unintentionally added with move to Python 3. Behavior no
longer does any interpolation in .pypirc files, matching behavior in
Python 2.7 and Setuptools 19.0.

: Memory functions of the PyMem_Malloc() domain
(PYMEM_DOMAIN_MEM) now use the pymalloc allocator rather than system . Applications calling
PyMem_Malloc() without holding the GIL can now crash: use
PYTHONMALLOC=debug environment variable to validate the usage of
memory allocators in your application.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Optimize function calls only using unpacking like
func(*tuple) (no other positional argument, no keyword): avoid copying
the tuple. Patch written by Joe Jevnik.

: Make the builtin slice type support cycle collection.

: super.__init__ no longer leaks memory if called multiple times.
NOTE: A direct call of super.__init__ is not endorsed!

: Fix the doc comment for FileFinder.find_spec().

: Mention  in the importlib docs.

: PYTHONIOENCODING now has priority over locale in setting the
error handler for stdin and stdout.

: Fixed crash on iterating exhausting iterators. Affected classes
are generic sequence iterators, iterators of str, bytes, bytearray, list,
tuple, set, frozenset, dict, OrderedDict, corresponding views and
os.scandir() iterator.

: Optimize bytes.replace(b'',  and
bytearray.replace(b'', . Patch written by Josh Snider.

: If coding cookie is specified multiple times on a line in
Python source code file, only the first one is taken to account.

: Add tests for reloading namespace packages.

: Switch applicable importlib tests to use  API.

: Debug hooks on Python memory allocators now raise a fatal error
if functions of the PyMem_Malloc() family are called without
holding the GIL.

================================================================================

# Changelog - Core and Builtins (Part 4)

: On error, the debug hooks on Python memory allocators now use
the tracemalloc module to get the traceback where a memory block
was allocated.

: The debug hooks on Python memory allocator
PyObject_Malloc() now detect when functions are called without
holding the GIL.

: Add PYTHONMALLOC environment variable to set the
Python memory allocators and/or install debug hooks.

: The PyMem_SetupDebugHooks() function can now also be
used on Python compiled in release mode.

: The PYTHONMALLOCSTATS environment variable can now
also be used on Python compiled in release mode. It now has no effect if
set to an empty string.

: In debug mode, debug hooks are now also installed on Python
memory allocators when Python is configured without pymalloc.

: Fix str.translate() when string is ASCII and first replacements
removes character, but next replacement uses a non-ASCII character or a
string longer than 1 character. Regression introduced in Python 3.5.0.

: Ensure exception reports from PyErr_Display() and
PyErr_WriteUnraisable() are sensible even when formatting them produces
secondary errors.  This affects the reports produced by
sys.__excepthook__() and when __del__() raises an exception.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Correct behavior to reject comma as a legal character for
cookie names.

: Upgrade the warning when a generator raises StopIteration from
PendingDeprecationWarning to DeprecationWarning.  Patch by Anish Shah.

: The compiler now ignores all constant statements: bytes, str,
int, float, complex, name constants (None, False, True), Ellipsis and
ast.Constant; not only str and int. For example,  is now ignored in
  .

: Avoid masking the original TypeError exception when using star
() unpacking in function calls.  Based on patch by Hagen FÃ¼rstenau
and Daniel Urban.

: Add a new kind of AST node: ast.Constant. It can be used by
external AST optimizers, but the compiler does not emit directly such
node.

: Sped-up allocation of dict key objects by using Pythonâs small
object allocator.  (Contributed by Julian Taylor.)

: Import raises ImportError instead of SystemError if a relative
import is attempted without a known parent package.

: When compiling code, donât merge constants if they are equal
but have a different types. For example,      
 is now correctly compiled to two different functions: 
returns  () and  returns  (), even if
 and  are equal.

================================================================================

# Changelog - Core and Builtins (Part 6)

: The format of the  attribute of code objects
changes to support negative line number delta.

: Add a new private _PyThreadState_UncheckedGet() function to get
the current Python thread state, but donât issue a fatal error if it is
NULL. This new function must be used instead of accessing directly the
_PyThreadState_Current variable.  The variable is no more exposed since
Python 3.5.1 to hide the exact implementation of atomic C types, to avoid
compiler issues.

: If __package__ != __spec__.parent or if neither __package__ or
__spec__ are defined then ImportWarning is raised.

: [UPDATE] Comment out the one of the pickleability tests in
_PyObject_GetState() due to regressions observed in Cython-based projects.

: Disallowed null characters in the type name.

: Fix segfault when an invalid nonlocal statement binds a name
starting with two underscores.

: Instances of extension types with a state that arenât
subclasses of list or dict and havenât implemented any pickle-related
methods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or
__getstate__), can no longer be pickled.  Including memoryview.

================================================================================

# Changelog - Core and Builtins (Part 7)

: Massive replacing unsafe attribute setting code with special
macro Py_SETREF.

: Special method __bytes__() now works in str subclasses.

: __sizeof__ methods of builtin types now use dynamic basic size.
This allows sys.getsize() to work correctly with their subclasses with
__slots__ defined.

: Fixed problem with in-place string concatenation and utf-8
cache.

: New Py_FinalizeEx() API allowing Python to set an exit status of
120 on failure to flush buffered streams.

: telnetlib.Telnet is now a context manager.

: Fixed crash in object.__reduce__() if slot name is freed inside
__getattr__.

: Fixed crash on converting objects with special methods
__bytes__, __trunc__, and __float__ returning instances of subclasses of
bytes, int, and float to subclasses of bytes, int, and float
correspondingly.

: Fix a possible segfault during argument parsing in functions
that accept filesystem paths.

: Fixed a partially broken sanity check in the _posixsubprocess
internals regarding how fds_to_pass were passed to the child.  The bug had
no actual impact as subprocess.py already avoided it.

: Fixed tokenizer crash when processing undecodable source code
with a null byte.

================================================================================

# Changelog - Core and Builtins (Part 8)

: The hash of the key now is calculated only once in most
operations in C implementation of OrderedDict.

: Default implementation of __reduce__ and __reduce_ex__ now
rejects builtin types with not defined __new__.

: Avoid buffer overreads when int(), float(), compile(), exec()
and eval() are passed bytes-like objects.  These objects are not
necessarily terminated by a null byte, but the functions assumed they
were.

: Fix parser and AST: fill lineno and col_offset of âargâ node
when compiling AST from Python objects.

: Fixed a crash and leaking NULL in repr() of OrderedDict that
was mutated by direct calls of dict methods.

: Iterating OrderedDict with keys with unstable hash now raises
KeyError in C implementations as well as in Python implementation.

: Fixed crash when highly nested OrderedDict structures were
garbage collected.

: Optimize bytes.fromhex() and bytearray.fromhex(): they are now
between 2x and 3.5x faster.

: Optimize bytearray % args using the new private _PyBytesWriter
API. Formatting is now between 2.5 and 5 times faster.

================================================================================

# Changelog - Core and Builtins (Part 9)

: sys.setrecursionlimit() now raises a RecursionError if the new
recursion limit is too low depending at the current recursion depth.
Modify also the âlower-water markâ formula to make it monotonic. This mark
is used to decide when the overflowed flag of the thread state is reset.

: Fix input() to prompt to the redirected stdout when
sys.stdout.fileno() fails.

: Optimize bytes % args using the new private _PyBytesWriter API.
Formatting is now up to 2 times faster.

: Prevent builtin types that are not allowed to be subclassed
from being subclassed through multiple inheritance.

: The UTF-8 decoder is now up to 15 times as fast for error
handlers: ,  and surrogateescape.

: Fixed a number of bugs in UTF-7 decoding of misformed data.

: The UTF-8 encoder is now up to 75 times as fast for error
handlers: , , surrogateescape, surrogatepass.
Patch co-written with Serhiy Storchaka.

: Import trace messages emitted in verbose (-v) mode are no
longer formatted twice.

: Optimize ASCII and latin1 encoders with the surrogateescape
error handler: the encoders are now up to 3 times as fast. Initial patch
written by Serhiy Storchaka.

================================================================================

# Changelog - Core and Builtins (Part 10)

: On Solaris 11.3 or newer, os.urandom() now uses the getrandom()
function instead of the getentropy() function. The getentropy() function
is blocking to generate very good quality entropy, os.urandom() doesnât
need such high-quality entropy.

: Modify Pythonâs grammar to allow trailing commas in the argument
list of a function declaration.  For example, âdef f(*, a = 3,): passâ is
now legal. Patch from Mark Dickinson.

: Implement  âLiteral String Interpolationâ. This
allows you to embed expressions inside f-strings, which are converted to
normal strings at run time. Given x=3, then fâvalue={x}â == âvalue=3â.
Patch by Eric V. Smith.

: Fix semantic bugs when using binary operators with dictionary
views and tuples.

: Fix possible integer overflow and heap corruption in
zipimporter.get_data().

: Fix TAB key behaviour in REPL with readline.

: Optimize PyLong_AsDouble.

: Optimize floor and modulo division for single-digit longs.
Microbenchmarks show 2-2.5x improvement.  Built-in âdivmodâ function is
now also ~10% faster. (See also: )

: Raise a RuntimeError when a coroutine object is awaited more
than once.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix os.set_inheritable() on Android, ioctl() is blocked by
SELinux and fails with EACCESS. The function now falls back to fcntl().
Patch written by MichaÅ Bednarski.
: Fix infinite recursion using typing.py.  Thanks to Kalle Tuure!
: Removed dummy methods in Tkinter widget classes: tk_menuBar()
and tk_bindForTraversal().
: Fix urllib.request redirect handling when the target only has a
query string.  Original fix by JÃ¡n Janech.
: The âurllib.requestâ module now percent-encodes non-ASCII bytes
found in redirect target URLs.  Some servers send Location header fields
with non-ASCII bytes, but âhttp.clientâ requires the request target to be
ASCII-encodable, otherwise a UnicodeEncodeError is raised.  Based on patch
by Christian Heimes.
: The default value of the decode_data parameter for
smtpd.SMTPChannel and smtpd.SMTPServer constructors is changed to False.
: Removed deprecated class asynchat.fifo.
: Added readline.set_auto_history(), which can stop entries being
automatically added to the history list.  Based on patch by Tyler
Crompton.
: zipfile.ZipFile.open() can now be used to write data into a ZIP
file, as well as for extracting data.  Patch by Thomas Kluyver.
: Honor debuglevel flag in urllib.request.HTTPHandler. Patch
contributed by Chi Hsuan Yen.
: In the subprocess module, allow stderr to be redirected to
stdout even when stdout is not redirected.  Patch by Akira Li.
: mock_open âfilesâ no longer error on readline at end of file.
Patch from Yolanda Robla.
: Fixed leaking a userptr in curses panel destructor.
: Removed unnecessary, and ignored, call to sum of squares helper
in statistics.pvariance.
: Use bisect in statistics.median instead of a linear search.
Patch by Upendra Kuma.
: Make use of new Decimal.as_integer_ratio() method in statistics
module. Patch by Stefan Krah.
: Add secrets module as described in .
: The modulefinder module now supports extended opcode arguments.
: Fixed crashes related to directly created instances of types in
_tkinter and curses.panel modules.
: weakref.ref() no longer silently ignores keyword arguments.
Patch by Georg Brandl.
: xmlrpc now raises ResponseError on unsupported type tags
instead of silently return incorrect result.
: The __contains__ methods in the collections ABCs now check for
identity before checking equality.  This better matches the behavior of
the concrete classes, allows sensible handling of NaNs, and makes it
easier to reason about container invariants.
: Fixed the comparison of plistlib.Data with other types.
: Fix an uninitialized variable in ctypes.util. The bug only
occurs on SunOS when the ctypes implementation searches for the 
program. Patch by Xiang Zhang.  Tested on SunOS by Kees Bos.
: In urllib.request, change the proxy bypass host checking
against no_proxy to be case-insensitive, and to not match unrelated host
names that happen to have a bypassed hostname as a suffix.  Patch by Xiang
Zhang.
: Print server URL on http.server startup.  Initial patch by
Felix Kaiser.
: fileinput.hook_encoded() now supports an âerrorsâ argument for
passing to open.  Original patch by Joseph Hackman.
: recursive_repr() now sets __qualname__ of wrapper.  Patch by
Xiang Zhang.
: urllib.request will prefer lower_case proxy environment
variables over UPPER_CASE or Mixed_Case ones. Patch contributed by
Hans-Peter Jansen.
: assertSequenceEqual() now correctly outputs non-stringified
differing items (like bytes in the -b mode).  This affects
assertListEqual() and assertTupleEqual().
: Remove âwill be removed in Python 3.7â from deprecation
messages of platform.dist() and platform.linux_distribution(). Patch by
Kumaripaba Miyurusara Athukorala.
: itemgetter, attrgetter and methodcaller objects no longer
silently ignore keyword arguments.
: Disassembling a class now disassembles class and static
methods. Patch by Xiang Zhang.
: Fix error handling in shutil.get_terminal_size(), catch
AttributeError instead of . Patch written by
Emanuel Barry.
: tarfileâs ustar and gnu formats now correctly calculate name
and link field limits for multibyte character encodings like utf-8.
: Stop encoding Latin-1-ized WSGI paths with UTF-8.  Patch by
Anthony Sottile.
: Add STARTUPINFO to subprocess.__all__ on Windows.
: Add context manager to socketserver.  Patch by Aviv Palivoda.
: Fix os.urandom() on Solaris 11.3 and newer when reading
more than 1,024 bytes: call getrandom() multiple times with a limit of
1024 bytes per call.
: Eliminate http.server._quote_html() and use
html.escape(quote=False).  Patch by Xiang Zhang.
: Raise OSError if closing a socket fails.
: Add .webm to mimetypes.types_map.  Patch by Giampaolo Rodolaâ.
: Add .csv to mimetypes.types_map.  Patch by Geoff Wilson.
: the site module now allows .pth files to specify files to be
added to sys.path (e.g. zip files).
: Introduce contextlib.AbstractContextManager and
typing.ContextManager.
: Fixed Y2038 problem in loading binary PLists.
: Handle terminal resizing with Readline 6.3+ by installing our
own SIGWINCH handler.  Patch by Eric Price.
: Change SSLSocket.sendall() to return None, as explicitly
documented for plain socket objects.  Patch by Aviv Palivoda.
: In http.server, respond with â413 Request header fields too
largeâ if there are too many header fields to parse, rather than killing
the connection and raising an unhandled exception.  Patch by Xiang Zhang.
: Added missing XMLPullParser to ElementTree.__all__.
: Change BufferedReader.writable() and BufferedWriter.readable()
to always return False.
: Exhausted iterator of array.array now conforms with the
behavior of iterators of other mutable sequences: it lefts exhausted even
if iterated array is extended.
: doctest.DocFileTest and doctest.testfile() now support packages
(module splitted into multiple directories) for the package parameter.
: Fix a regression in mock.MagicMock. _Call is a subclass of
tuple (changeset 3603bae63c13 only works for classes) so we need to
implement __ne__ ourselves.  Patch by Andrew Plummer.
: Raise ValueError rather than SystemError when a negative length
is passed to SSLSocket.recv() or read().
: Fix SSL recv(0) and read(0) methods to return zero bytes
instead of up to 1024.
: Fixed a bug in datetime.astimezone() method.
: The  module now emits an ImportError
rather than a  if __import__() is tried during the
Python shutdown process but  is already cleared (set to
).
: warnings.formatwarning() now catches exceptions when
calling linecache.getline() and
tracemalloc.get_object_traceback() to be able to log
ResourceWarning emitted late during the Python shutdown process.
: On Windows, faulthandler.enable() now also installs an
exception handler to dump the traceback of all Python threads on any
Windows exception, not only on UNIX signals (SIGSEGV, SIGFPE, SIGABRT).
: Add C functions _PyTraceMalloc_Track() and
_PyTraceMalloc_Untrack() to track memory blocks using the
tracemalloc module. Add _PyTraceMalloc_GetTraceback() to
get the traceback of an object.
: The _tracemalloc now supports tracing memory allocations of
multiple address spaces (domains).
: Ctrl+C during Readline history search now cancels the search
mode when compiled with Readline 7.
: Implement a safe finalizer for the _socket.socket type. It now
releases the GIL to close the socket.
: spwd.getspnam() now raises a PermissionError if the user
doesnât have privileges.
: Avoid potential ValueError in BaseHandler.start_response.
Initial patch by Peter Inglesby.
: Add a new function PyErr_ResourceWarning() function to
pass the destroyed object. Add a  attribute to
warnings.WarningMessage. Add warnings._showwarnmsg() which uses
tracemalloc to get the traceback where source object was allocated.
: Fix pyclbr.readmodule() and pyclbr.readmodule_ex()
to support importing packages.
: Account for remaining Content-Length in HTTPResponse.readline()
and read1(). Based on patch by Silent Ghost. Also document that
HTTPResponse now supports these methods.
: Handle sockets in directories unittest discovery is scanning.
Patch from Victor van den Elzen.
: cookiejar.http2time() now returns None if year is higher than
datetime.MAXYEAR.
: Fixes platform module detection of Windows Server
: Fixed parsing time in week 0 before Jan 1.  Original patch by
TamÃ¡s Bence Gedai.
: Add Mock.assert_called() and Mock.assert_called_once() methods
to unittest.mock. Patch written by Amit Saha.
: Invoking Path.owner() and Path.group() on Windows now raise
NotImplementedError instead of ImportError.
: Fixed the keys() method for Canvas and Scrollbar widgets.
: Got rid of excessive buffering in fileinput. The bufsize
parameter is now deprecated and ignored.
: Added an optional argument timespec to the datetime isoformat()
method to choose the precision of the time component.
: Fix UnboundLocalError in
AbstractDigestAuthHandler.get_algorithm_impls. Initial patch by Mathieu
Dupuy.
: Minimized overhead in copy.copy() and copy.deepcopy().
Optimized copying and deepcopying bytearrays, NotImplemented, slices,
short lists, tuples, dicts, sets.
: Fixed pickling and copying the accumulate() iterator with total
is None.
: Fixed debugging output for regular expressions with the (?x)
flag.
: Allowed pickling recursive dequeues.
: Make mmap.write() return the number of bytes written like other
write methods.  Patch by Jakub Stasiak.
: Fixed the subnets() methods in IP network classes for the case
when resulting prefix length is equal to maximal prefix length. Based on
patch by Xiang Zhang.
: Remove the file if the internal open() call in
NamedTemporaryFile() fails. Patch by Silent Ghost.
: Fix XML-RPC client to retry when the server shuts down a
persistent connection.  This was a regression related to the new
http.client.RemoteDisconnected exception in 3.5.0a4.
: Leading  is optional now in base64.a85decode() with
adobe=True.  Patch by Swati Jaiswal.
: Remove an invalid type check in importlib.util.LazyLoader.
: importlib.__import__() raises ImportError like
builtins.__import__() when  is specified but without an
accompanying package specified.
: In the âsocketserverâ module, shut down the request (closing
the connected socket) when verify_request() returns false.  Patch by Aviv
Palivoda.
: Change the socketserver module to only catch exceptions raised
from a request handler that are derived from Exception (instead of
BaseException). Therefore SystemExit and KeyboardInterrupt no longer
trigger the handle_error() method, and will now to stop a single-threaded
server.
: os.walk() no longer uses FDs proportional to the tree depth.
: Added the close() method and the support of the context manager
protocol for the os.scandir() iterator.
: multiprocessing: make MapResult not fail-fast upon exception.
: Support keyword arguments to zlib.compress().  Patch by Aviv
Palivoda.
: The os.scandir() iterator now closes file descriptor not only
when the iteration is finished, but when it was failed with error.
: __dict__ for an OrderedDict instance is now created only when
needed.
: Restored support of bytes paths in os.walk() on Windows.
: Add UTF-8 suggestion to error message when posting a
non-Latin-1 string with http.client.
: Added zipfile.ZipInfo.from_file() and zipinfo.ZipInfo.is_dir().
Patch by Thomas Kluyver.
: Reset FancyURLopenerâs redirect counter even if there is an
exception. Based on patches by Brian Brazil and Daniel Rocco.
: Fixed a crash when unpickle the functools.partial object with
wrong state. Fixed a leak in failed functools.partial constructor. âargsâ
and âkeywordsâ attributes of functools.partial have now always types tuple
and dict correspondingly.
: copy.deepcopy() now correctly copies range() objects with
non-atomic attributes.
: Path.glob() now raises a ValueError if itâs called with an
invalid pattern. Patch by Thomas Nyberg.
: Fixed possible integer overflows in zipimport.
: On Windows, getnameinfo(), gethostbyaddr() and
gethostbyname_ex() functions of the socket module now decode the hostname
from the ANSI code page rather than UTF-8.
: The site module now writes an error into stderr if
sitecustomize module can be imported but executing the module raise an
ImportError. Same change for usercustomize.
: xmlrpc now works with strings not encodable with used non-UTF-8
encoding.
: Garbage collector now breaks reference loops with OrderedDict.
: Fixed AttributeError in msilib.Directory.glob().
: Added compatibility with broken protocol 2 pickles created in
old Python 3 versions (3.4.3 and lower).
: Deprecated accepting non-integers in grp.getgrgid().
: Use cross-compilation by default for 64-bit Windows.
: Add docstrings to the fields of urllib.parse results. Patch
contributed by Swati Jaiswal.
: Convert trace module option parsing mechanism to argparse.
Patch contributed by SilentGhost.
: Fix sysconfig._parse_makefile not expanding ${} vars appearing
before $() vars.
: Remove the deprecated apis in the trace module.
: Fix mock.patch behavior when patching descriptors. Restore
original values after patching. Patch contributed by Sean McCully.
: In the ssl module, enable the SSL_MODE_RELEASE_BUFFERS mode
option if it is safe to do so.
: Donât traverse into symlinks for  pattern in
pathlib.Path.[r]glob().
: Ignore PermissionError when traversing a tree with
pathlib.Path.[r]glob(). Patch by Ulrich Petri.
: Accept ] characters in the data portion of imap responses, in
order to handle the flags with square brackets accepted and produced by
servers such as gmail.
: fileinput now uses sys.stdin as-is if it does not have a buffer
attribute (restores backward compatibility).
: Optimized creating Fractions from floats by 2 times and from
Decimals by 3 times.
: Document as deprecated the remaining implementations of
importlib.abc.Loader.load_module().
: Add Decimal.as_integer_ratio().
: Copying the lru_cache() wrapper object now always works,
independently from the type of the wrapped object (by returning the
original object unchanged).
: Have the functions in compileall return booleans instead of
ints and add proper documentation and tests for the return values.
: Fixed possible use after free in ElementTree.XMLPullParser.
: os.fwalk() no longer skips remaining directories when error
occurs. Original patch by Samson Lee.
: Fixed and simplified OrderedDict.__sizeof__.
: Optimized deepcopying ElementTree; it is now 20 times faster.
: Optimized iterating ElementTree.  Iterating elements
Element.iter() is now 40% faster, iterating text Element.itertext() is now
up to 2.5 times faster.
: Fixed various refcount issues in ElementTree iteration.
: The TarFile iterator is reimplemented using generator. This
implementation is simpler that using class.
: Optimized ElementTree.iterparse(); it is now 2x faster.
Optimized ElementTree parsing; it is now 10% faster.
: Improved detecting errors in broken pickle data.
: Restore the previous behaviour of tolerating most fstat()
errors when opening files.  This was a regression in 3.5a1, and stopped
anonymous temporary files from working in special cases.
: Fix regression in number of arguments compileall accepts when
â-dâ is specified.  The check on the number of arguments has been dropped
completely as it never worked correctly anyway.
: In the subprocess module, preserve any exception caused by
fork() failure when preexec_fn is used.
: Tweak the exception message for importlib.util.resolve_name()
when âpackageâ isnât specified but necessary.
: _strptimeâs regexp cache now is reset after changing timezone
with time.tzset().
: When executing a package with the âpython -m packageâ option,
and package initialization fails, a proper traceback is now reported.  The
ârunpyâ module now lets exceptions from package initialization pass back
to the caller, rather than raising ImportError.
: Also in runpy and the â-mâ option, omit the irrelevant message
ââ¦ is a package and cannot be directly executedâ if the package could
not even be initialized (e.g. due to a bad  file).
: Fixed problem with the mean of very small and very large
numbers. As a side effect, statistics.mean and statistics.variance should
be significantly faster.
: Fixed copying object with state with boolean value is false.
: Fixed deep copying of minidom documents.  Based on patch by
Marian Ganisin.
: dir() on ElementTree.Element now lists properties: âtagâ,
âtextâ, âtailâ and âattribâ.  Original patch by Santoso Wijaya.
: Fixed a reference leak in pickle.loads() when unpickling
invalid data including tuple instructions.
: In the Readline completer, avoid listing duplicate global
names, and search the global namespace before searching builtins.
: Fixed file leak in ElementTree.iterparse() raising an error.
: Fixed SystemError raised by unpickler on broken pickle data.
: Fixed crash on deleting ElementTree.Element attributes.
: ZipFile now always writes a ZIP_STORED header for directory
entries.  Patch by Dingyuan Wang.
: Change three zlib functions to accept sizes that fit in
Py_ssize_t, but internally cap those sizes to UINT_MAX.  This resolves a
regression in 3.5 where GzipFile.read() failed to read chunks larger than
2 or 4 GiB.  The change affects the zlib.Decompress.decompress()
max_length parameter, the zlib.decompress() bufsize parameter, and the
zlib.Decompress.flush() length parameter.
: Avoid incorrect errors raised by os.makedirs(exist_ok=True)
when the OS gives priority to errors such as EACCES over EEXIST.
: Change semantics of EventLoop.stop() in asyncio.
: When we know a subprocess.Popen process has died, do not allow
the send_signal(), terminate(), or kill() methods to do anything as they
could potentially signal a different process.
: Added missing APIs to __all__ to match the documented APIs for
the following modules: calendar, csv, enum, fileinput, ftplib, logging,
optparse, tarfile, threading and wave.  Also added a
test.support.check__all__() helper. Patches by Jacek KoÅodziej, Mauro S.
M. Rodrigues and Joel Taddei.
: In the Readline completer, only call getattr() once per
attribute.  Also complete names of attributes such as properties and slots
which are listed by dir() but not yet created on an instance.
: Fix a crash when garbage-collecting ctypes objects created by
wrapping a memoryview.  This was a regression made in 3.5a1.  Based on
patch by Eryksun.
: Added âescapeâ to the __all__ list in the glob module.
: Fixed recursive glob() with patterns starting with .
: Fix regression in smtplibâs AUTH LOGIN support.
: Fix the pydoc web serverâs module search function to handle
exceptions from importing packages.
: Got rid of circular references in regular expression parsing.
: Command-line interface of the calendar module now uses argparse
instead of optparse.
: fileinput.FileInput.readline() now returns bââ instead of ââ at
the end if the FileInput was opened with binary mode. Patch by Ryosuke
Ito.
: Fixed inspect.getdoc() for inherited docstrings of properties.
Original patch by John Mark Vandenberg.
: Always use os.urandom as a source of randomness in uuid.uuid4.
: Fixed textwrap.dedent() for the case when largest common
whitespace is a substring of smallest leading whitespace. Based on patch
by Robert Li.
: The lru_cache() wrapper objects now can be copied and pickled
(by returning the original object unchanged).
: typing: Donât crash on Union[str, Pattern].
: asyncio: Raise error from drain() when socket is closed.
: Cleaned up and fixed minor bugs in C implementation of
OrderedDict.
: Improved Unicode support in SMTPHandler through better use of
the email package. Thanks to user simon04 for the patch.
Move the imp module from a PendingDeprecationWarning to
DeprecationWarning.
: Remove mentions of the formatter module being removed in Python
3.6.
: Fixed a bug in C implementation of OrderedDict.move_to_end()
that caused segmentation fault or hang in iterating after moving several
items to the start of ordered dict.
: pickletools.dis() now outputs implicit memo index for the
MEMOIZE opcode.
: Add an optional newline parameter to binascii.b2a_base64().
base64.b64encode() uses it to avoid a memory copy.
: Objects that need calling  with keyword arguments,
can now be pickled using pickle protocols older than protocol version 4.
: zipfile now works in threads disabled builds.
: smtpdâs SMTPChannel now correctly raises a ValueError if both
decode_data and enable_SMTPUTF8 are set to true.
: RobotFileParser now supports Crawl-delay and Request-rate
extensions.  Patch by Nikolay Bogoychev.
: distutils raises OSError instead of DistutilsPlatformError when
MSVC is not installed.
: Fixed protocol for the STACK_GLOBAL opcode in
pickletools.opcodes.
: Updates asyncio datagram create method allowing reuseport and
reuseaddr socket options to be set prior to binding the socket. Mirroring
the existing asyncio create_server method the reuseaddr option for
datagram sockets defaults to True if the O/S is âposixâ (except if the
platform is Cygwin). Patch by Chris Laws.
: Add asyncio.run_coroutine_threadsafe().  This lets you submit a
coroutine to a loop from another thread, returning a
concurrent.futures.Future.  By Vincent Michel.
: Fix CGIRequestHandler to split the query from the URL at the
first question mark (?) rather than the last. Patch from Xiang Zhang.
: Prevent CGIRequestHandler from collapsing slashes in the query
part of the URL as if it were a path. Patch from Xiang Zhang.
: Donât add crypt.METHOD_CRYPT to crypt.methods if itâs not
supported. Check if it is supported, it may not be supported on OpenBSD
for example.
: Default implementation of tzinfo.fromutc() was returning wrong
results in some cases.
: Failed readline.set_completer_delims() no longer left the
module in inconsistent state.
: rlcompleter now omits private and special attribute names
unless the prefix starts with underscores.
: rlcompleter now can add a space or a colon after completed
keyword.
: timezone.utc name is now plain âUTCâ, not âUTC-00:00â.
: fromtimestamp() and utcfromtimestamp() methods of
datetime.datetime now round microseconds to nearest with ties going to
nearest even integer (ROUND_HALF_EVEN), as round(float), instead of
rounding towards -Infinity (ROUND_FLOOR).
: Timeit now warns when there is substantial (4x) variance
between best and worst times. Patch from Serhiy Storchaka.
: site-packages/README -> README.txt.
: help() and pydoc can now list named tuple fields in the order
they were defined rather than alphabetically.  The ordering is determined
by the _fields attribute if present.
: Improve speed of itertools.cycle() and make its pickle more
compact.
Fix crash in itertools.cycle.__setstate__() when the first argument wasnât
a list.
: urllib.parse raises ValueError on all invalid ports. Patch by
Martin Panter.
: Improve __repr__ of argparse.Namespace() for invalid
identifiers.  Patch by Matthias Bussonnier.
: run_setup was broken in distutils. Patch from Alexander
Belopolsky.
: 2to3 converts StringTypes to a tuple. Patch from Mark Hammond.
: open() accepted a âUâ mode string containing â+â, but âUâ can
only be used with ârâ. Patch from Jeff Balogh and John OâConnor.
: improved tests for zipimporter2. Patch from Mark Lawrence.
: unittest.mock.mock_open().reset_mock would recurse infinitely.
Patch from Nicola Palumbo and Laurent De Buyst.
: Fast searching optimization in regular expressions now works
for patterns that starts with capturing groups.  Fast searching
optimization now canât be disabled at compile time.
: unittest.mock side_effects can now be exceptions again. This
was a regression vs Python 3.4. Patch from Ignacio Rossi
: Remove deprecated inspect.getmoduleinfo function.
: Fix (another) memory leak in SSLSocket.getpeercer().
: Disable the vulnerable SSLv3 protocol by default when creating
ssl.SSLContext.
: Fix memory leak in SSLSocket.getpeercert().
: Sockets returned from accept() shouldnât appear to be
nonblocking.
: When threading.Event is reinitialized, the underlying condition
should use a regular lock rather than a recursive lock.
Skip getaddrinfo if host is already resolved. Patch by A. Jesse Jiryu
Davis.
: Add asyncio.StreamReader.readuntil() method. Patch by ÐÐ°ÑÐº
ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³.
: Avoid unnecessary serialization of getaddrinfo(3) calls on OS X
versions 10.5 or higher.  Original patch by A. Jesse Jiryu Davis.
: Avoid unnecessary serialization of getaddrinfo(3) calls on
current versions of OpenBSD and NetBSD.  Patch by A. Jesse Jiryu Davis.
: Fix asyncio/subprocess.communicate() to handle empty input.
Patch by Jack OâConnor.
: Add loop.get_exception_handler method
: asyncio: Add loop.create_future method

================================================================================

# Changelog - Library (Part 2)

: Fix os.set_inheritable() on Android, ioctl() is blocked by
SELinux and fails with EACCESS. The function now falls back to fcntl().
Patch written by MichaÅ Bednarski.

: Fix infinite recursion using typing.py.  Thanks to Kalle Tuure!

: Removed dummy methods in Tkinter widget classes: tk_menuBar()
and tk_bindForTraversal().

: Fix urllib.request redirect handling when the target only has a
query string.  Original fix by JÃ¡n Janech.

: The âurllib.requestâ module now percent-encodes non-ASCII bytes
found in redirect target URLs.  Some servers send Location header fields
with non-ASCII bytes, but âhttp.clientâ requires the request target to be
ASCII-encodable, otherwise a UnicodeEncodeError is raised.  Based on patch
by Christian Heimes.

: The default value of the decode_data parameter for
smtpd.SMTPChannel and smtpd.SMTPServer constructors is changed to False.

: Removed deprecated class asynchat.fifo.

: Added readline.set_auto_history(), which can stop entries being
automatically added to the history list.  Based on patch by Tyler
Crompton.

: zipfile.ZipFile.open() can now be used to write data into a ZIP
file, as well as for extracting data.  Patch by Thomas Kluyver.

================================================================================

# Changelog - Library (Part 3)

: Honor debuglevel flag in urllib.request.HTTPHandler. Patch
contributed by Chi Hsuan Yen.

: In the subprocess module, allow stderr to be redirected to
stdout even when stdout is not redirected.  Patch by Akira Li.

: mock_open âfilesâ no longer error on readline at end of file.
Patch from Yolanda Robla.

: Fixed leaking a userptr in curses panel destructor.

: Removed unnecessary, and ignored, call to sum of squares helper
in statistics.pvariance.

: Use bisect in statistics.median instead of a linear search.
Patch by Upendra Kuma.

: Make use of new Decimal.as_integer_ratio() method in statistics
module. Patch by Stefan Krah.

: Add secrets module as described in .

: The modulefinder module now supports extended opcode arguments.

: Fixed crashes related to directly created instances of types in
_tkinter and curses.panel modules.

: weakref.ref() no longer silently ignores keyword arguments.
Patch by Georg Brandl.

: xmlrpc now raises ResponseError on unsupported type tags
instead of silently return incorrect result.

================================================================================

# Changelog - Library (Part 4)

: The __contains__ methods in the collections ABCs now check for
identity before checking equality.  This better matches the behavior of
the concrete classes, allows sensible handling of NaNs, and makes it
easier to reason about container invariants.

: Fixed the comparison of plistlib.Data with other types.

: Fix an uninitialized variable in ctypes.util. The bug only
occurs on SunOS when the ctypes implementation searches for the 
program. Patch by Xiang Zhang.  Tested on SunOS by Kees Bos.

: In urllib.request, change the proxy bypass host checking
against no_proxy to be case-insensitive, and to not match unrelated host
names that happen to have a bypassed hostname as a suffix.  Patch by Xiang
Zhang.

: Print server URL on http.server startup.  Initial patch by
Felix Kaiser.

: fileinput.hook_encoded() now supports an âerrorsâ argument for
passing to open.  Original patch by Joseph Hackman.

: recursive_repr() now sets __qualname__ of wrapper.  Patch by
Xiang Zhang.

: urllib.request will prefer lower_case proxy environment
variables over UPPER_CASE or Mixed_Case ones. Patch contributed by
Hans-Peter Jansen.

================================================================================

# Changelog - Library (Part 5)

: assertSequenceEqual() now correctly outputs non-stringified
differing items (like bytes in the -b mode).  This affects
assertListEqual() and assertTupleEqual().

: Remove âwill be removed in Python 3.7â from deprecation
messages of platform.dist() and platform.linux_distribution(). Patch by
Kumaripaba Miyurusara Athukorala.

: itemgetter, attrgetter and methodcaller objects no longer
silently ignore keyword arguments.

: Disassembling a class now disassembles class and static
methods. Patch by Xiang Zhang.

: Fix error handling in shutil.get_terminal_size(), catch
AttributeError instead of . Patch written by
Emanuel Barry.

: tarfileâs ustar and gnu formats now correctly calculate name
and link field limits for multibyte character encodings like utf-8.

: Stop encoding Latin-1-ized WSGI paths with UTF-8.  Patch by
Anthony Sottile.

: Add STARTUPINFO to subprocess.__all__ on Windows.

: Add context manager to socketserver.  Patch by Aviv Palivoda.

: Fix os.urandom() on Solaris 11.3 and newer when reading
more than 1,024 bytes: call getrandom() multiple times with a limit of
1024 bytes per call.

: Eliminate http.server._quote_html() and use
html.escape(quote=False).  Patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 6)

: Raise OSError if closing a socket fails.

: Add .webm to mimetypes.types_map.  Patch by Giampaolo Rodolaâ.

: Add .csv to mimetypes.types_map.  Patch by Geoff Wilson.

: the site module now allows .pth files to specify files to be
added to sys.path (e.g. zip files).

: Introduce contextlib.AbstractContextManager and
typing.ContextManager.

: Fixed Y2038 problem in loading binary PLists.

: Handle terminal resizing with Readline 6.3+ by installing our
own SIGWINCH handler.  Patch by Eric Price.

: Change SSLSocket.sendall() to return None, as explicitly
documented for plain socket objects.  Patch by Aviv Palivoda.

: In http.server, respond with â413 Request header fields too
largeâ if there are too many header fields to parse, rather than killing
the connection and raising an unhandled exception.  Patch by Xiang Zhang.

: Added missing XMLPullParser to ElementTree.__all__.

: Change BufferedReader.writable() and BufferedWriter.readable()
to always return False.

: Exhausted iterator of array.array now conforms with the
behavior of iterators of other mutable sequences: it lefts exhausted even
if iterated array is extended.

================================================================================

# Changelog - Library (Part 7)

: doctest.DocFileTest and doctest.testfile() now support packages
(module splitted into multiple directories) for the package parameter.

: Fix a regression in mock.MagicMock. _Call is a subclass of
tuple (changeset 3603bae63c13 only works for classes) so we need to
implement __ne__ ourselves.  Patch by Andrew Plummer.

: Raise ValueError rather than SystemError when a negative length
is passed to SSLSocket.recv() or read().

: Fix SSL recv(0) and read(0) methods to return zero bytes
instead of up to 1024.

: Fixed a bug in datetime.astimezone() method.

: The  module now emits an ImportError
rather than a  if __import__() is tried during the
Python shutdown process but  is already cleared (set to
).

: warnings.formatwarning() now catches exceptions when
calling linecache.getline() and
tracemalloc.get_object_traceback() to be able to log
ResourceWarning emitted late during the Python shutdown process.

: On Windows, faulthandler.enable() now also installs an
exception handler to dump the traceback of all Python threads on any
Windows exception, not only on UNIX signals (SIGSEGV, SIGFPE, SIGABRT).

================================================================================

# Changelog - Library (Part 8)

: Add C functions _PyTraceMalloc_Track() and
_PyTraceMalloc_Untrack() to track memory blocks using the
tracemalloc module. Add _PyTraceMalloc_GetTraceback() to
get the traceback of an object.

: The _tracemalloc now supports tracing memory allocations of
multiple address spaces (domains).

: Ctrl+C during Readline history search now cancels the search
mode when compiled with Readline 7.

: Implement a safe finalizer for the _socket.socket type. It now
releases the GIL to close the socket.

: spwd.getspnam() now raises a PermissionError if the user
doesnât have privileges.

: Avoid potential ValueError in BaseHandler.start_response.
Initial patch by Peter Inglesby.

: Add a new function PyErr_ResourceWarning() function to
pass the destroyed object. Add a  attribute to
warnings.WarningMessage. Add warnings._showwarnmsg() which uses
tracemalloc to get the traceback where source object was allocated.

: Fix pyclbr.readmodule() and pyclbr.readmodule_ex()
to support importing packages.

: Account for remaining Content-Length in HTTPResponse.readline()
and read1(). Based on patch by Silent Ghost. Also document that
HTTPResponse now supports these methods.

================================================================================

# Changelog - Library (Part 9)

: Handle sockets in directories unittest discovery is scanning.
Patch from Victor van den Elzen.

: cookiejar.http2time() now returns None if year is higher than
datetime.MAXYEAR.

: Fixes platform module detection of Windows Server

: Fixed parsing time in week 0 before Jan 1.  Original patch by
TamÃ¡s Bence Gedai.

: Add Mock.assert_called() and Mock.assert_called_once() methods
to unittest.mock. Patch written by Amit Saha.

: Invoking Path.owner() and Path.group() on Windows now raise
NotImplementedError instead of ImportError.

: Fixed the keys() method for Canvas and Scrollbar widgets.

: Got rid of excessive buffering in fileinput. The bufsize
parameter is now deprecated and ignored.

: Added an optional argument timespec to the datetime isoformat()
method to choose the precision of the time component.

: Fix UnboundLocalError in
AbstractDigestAuthHandler.get_algorithm_impls. Initial patch by Mathieu
Dupuy.

: Minimized overhead in copy.copy() and copy.deepcopy().
Optimized copying and deepcopying bytearrays, NotImplemented, slices,
short lists, tuples, dicts, sets.

: Fixed pickling and copying the accumulate() iterator with total
is None.

================================================================================

# Changelog - Library (Part 10)

: Fixed debugging output for regular expressions with the (?x)
flag.

: Allowed pickling recursive dequeues.

: Make mmap.write() return the number of bytes written like other
write methods.  Patch by Jakub Stasiak.

: Fixed the subnets() methods in IP network classes for the case
when resulting prefix length is equal to maximal prefix length. Based on
patch by Xiang Zhang.

: Remove the file if the internal open() call in
NamedTemporaryFile() fails. Patch by Silent Ghost.

: Fix XML-RPC client to retry when the server shuts down a
persistent connection.  This was a regression related to the new
http.client.RemoteDisconnected exception in 3.5.0a4.

: Leading  is optional now in base64.a85decode() with
adobe=True.  Patch by Swati Jaiswal.

: Remove an invalid type check in importlib.util.LazyLoader.

: importlib.__import__() raises ImportError like
builtins.__import__() when  is specified but without an
accompanying package specified.

: In the âsocketserverâ module, shut down the request (closing
the connected socket) when verify_request() returns false.  Patch by Aviv
Palivoda.

================================================================================

# Changelog - Library (Part 11)

: Change the socketserver module to only catch exceptions raised
from a request handler that are derived from Exception (instead of
BaseException). Therefore SystemExit and KeyboardInterrupt no longer
trigger the handle_error() method, and will now to stop a single-threaded
server.

: os.walk() no longer uses FDs proportional to the tree depth.

: Added the close() method and the support of the context manager
protocol for the os.scandir() iterator.

: multiprocessing: make MapResult not fail-fast upon exception.

: Support keyword arguments to zlib.compress().  Patch by Aviv
Palivoda.

: The os.scandir() iterator now closes file descriptor not only
when the iteration is finished, but when it was failed with error.

: __dict__ for an OrderedDict instance is now created only when
needed.

: Restored support of bytes paths in os.walk() on Windows.

: Add UTF-8 suggestion to error message when posting a
non-Latin-1 string with http.client.

: Added zipfile.ZipInfo.from_file() and zipinfo.ZipInfo.is_dir().
Patch by Thomas Kluyver.

: Reset FancyURLopenerâs redirect counter even if there is an
exception. Based on patches by Brian Brazil and Daniel Rocco.

================================================================================

# Changelog - Library (Part 12)

: Fixed a crash when unpickle the functools.partial object with
wrong state. Fixed a leak in failed functools.partial constructor. âargsâ
and âkeywordsâ attributes of functools.partial have now always types tuple
and dict correspondingly.

: copy.deepcopy() now correctly copies range() objects with
non-atomic attributes.

: Path.glob() now raises a ValueError if itâs called with an
invalid pattern. Patch by Thomas Nyberg.

: Fixed possible integer overflows in zipimport.

: On Windows, getnameinfo(), gethostbyaddr() and
gethostbyname_ex() functions of the socket module now decode the hostname
from the ANSI code page rather than UTF-8.

: The site module now writes an error into stderr if
sitecustomize module can be imported but executing the module raise an
ImportError. Same change for usercustomize.

: xmlrpc now works with strings not encodable with used non-UTF-8
encoding.

: Garbage collector now breaks reference loops with OrderedDict.

: Fixed AttributeError in msilib.Directory.glob().

: Added compatibility with broken protocol 2 pickles created in
old Python 3 versions (3.4.3 and lower).

: Deprecated accepting non-integers in grp.getgrgid().

================================================================================

# Changelog - Library (Part 13)

: Use cross-compilation by default for 64-bit Windows.

: Add docstrings to the fields of urllib.parse results. Patch
contributed by Swati Jaiswal.

: Convert trace module option parsing mechanism to argparse.
Patch contributed by SilentGhost.

: Fix sysconfig._parse_makefile not expanding ${} vars appearing
before $() vars.

: Remove the deprecated apis in the trace module.

: Fix mock.patch behavior when patching descriptors. Restore
original values after patching. Patch contributed by Sean McCully.

: In the ssl module, enable the SSL_MODE_RELEASE_BUFFERS mode
option if it is safe to do so.

: Donât traverse into symlinks for  pattern in
pathlib.Path.[r]glob().

: Ignore PermissionError when traversing a tree with
pathlib.Path.[r]glob(). Patch by Ulrich Petri.

: Accept ] characters in the data portion of imap responses, in
order to handle the flags with square brackets accepted and produced by
servers such as gmail.

: fileinput now uses sys.stdin as-is if it does not have a buffer
attribute (restores backward compatibility).

: Optimized creating Fractions from floats by 2 times and from
Decimals by 3 times.

================================================================================

# Changelog - Library (Part 14)

: Document as deprecated the remaining implementations of
importlib.abc.Loader.load_module().

: Add Decimal.as_integer_ratio().

: Copying the lru_cache() wrapper object now always works,
independently from the type of the wrapped object (by returning the
original object unchanged).

: Have the functions in compileall return booleans instead of
ints and add proper documentation and tests for the return values.

: Fixed possible use after free in ElementTree.XMLPullParser.

: os.fwalk() no longer skips remaining directories when error
occurs. Original patch by Samson Lee.

: Fixed and simplified OrderedDict.__sizeof__.

: Optimized deepcopying ElementTree; it is now 20 times faster.

: Optimized iterating ElementTree.  Iterating elements
Element.iter() is now 40% faster, iterating text Element.itertext() is now
up to 2.5 times faster.

: Fixed various refcount issues in ElementTree iteration.

: The TarFile iterator is reimplemented using generator. This
implementation is simpler that using class.

: Optimized ElementTree.iterparse(); it is now 2x faster.
Optimized ElementTree parsing; it is now 10% faster.

: Improved detecting errors in broken pickle data.

================================================================================

# Changelog - Library (Part 15)

: Restore the previous behaviour of tolerating most fstat()
errors when opening files.  This was a regression in 3.5a1, and stopped
anonymous temporary files from working in special cases.

: Fix regression in number of arguments compileall accepts when
â-dâ is specified.  The check on the number of arguments has been dropped
completely as it never worked correctly anyway.

: In the subprocess module, preserve any exception caused by
fork() failure when preexec_fn is used.

: Tweak the exception message for importlib.util.resolve_name()
when âpackageâ isnât specified but necessary.

: _strptimeâs regexp cache now is reset after changing timezone
with time.tzset().

: When executing a package with the âpython -m packageâ option,
and package initialization fails, a proper traceback is now reported.  The
ârunpyâ module now lets exceptions from package initialization pass back
to the caller, rather than raising ImportError.

: Also in runpy and the â-mâ option, omit the irrelevant message
ââ¦ is a package and cannot be directly executedâ if the package could
not even be initialized (e.g. due to a bad  file).

================================================================================

# Changelog - Library (Part 16)

: Fixed problem with the mean of very small and very large
numbers. As a side effect, statistics.mean and statistics.variance should
be significantly faster.

: Fixed copying object with state with boolean value is false.

: Fixed deep copying of minidom documents.  Based on patch by
Marian Ganisin.

: dir() on ElementTree.Element now lists properties: âtagâ,
âtextâ, âtailâ and âattribâ.  Original patch by Santoso Wijaya.

: Fixed a reference leak in pickle.loads() when unpickling
invalid data including tuple instructions.

: In the Readline completer, avoid listing duplicate global
names, and search the global namespace before searching builtins.

: Fixed file leak in ElementTree.iterparse() raising an error.

: Fixed SystemError raised by unpickler on broken pickle data.

: Fixed crash on deleting ElementTree.Element attributes.

: ZipFile now always writes a ZIP_STORED header for directory
entries.  Patch by Dingyuan Wang.

================================================================================

# Changelog - Library (Part 17)

: Change three zlib functions to accept sizes that fit in
Py_ssize_t, but internally cap those sizes to UINT_MAX.  This resolves a
regression in 3.5 where GzipFile.read() failed to read chunks larger than
2 or 4 GiB.  The change affects the zlib.Decompress.decompress()
max_length parameter, the zlib.decompress() bufsize parameter, and the
zlib.Decompress.flush() length parameter.

: Avoid incorrect errors raised by os.makedirs(exist_ok=True)
when the OS gives priority to errors such as EACCES over EEXIST.

: Change semantics of EventLoop.stop() in asyncio.

: When we know a subprocess.Popen process has died, do not allow
the send_signal(), terminate(), or kill() methods to do anything as they
could potentially signal a different process.

: Added missing APIs to __all__ to match the documented APIs for
the following modules: calendar, csv, enum, fileinput, ftplib, logging,
optparse, tarfile, threading and wave.  Also added a
test.support.check__all__() helper. Patches by Jacek KoÅodziej, Mauro S.
M. Rodrigues and Joel Taddei.

================================================================================

# Changelog - Library (Part 18)

: In the Readline completer, only call getattr() once per
attribute.  Also complete names of attributes such as properties and slots
which are listed by dir() but not yet created on an instance.

: Fix a crash when garbage-collecting ctypes objects created by
wrapping a memoryview.  This was a regression made in 3.5a1.  Based on
patch by Eryksun.

: Added âescapeâ to the __all__ list in the glob module.

: Fixed recursive glob() with patterns starting with .

: Fix regression in smtplibâs AUTH LOGIN support.

: Fix the pydoc web serverâs module search function to handle
exceptions from importing packages.

: Got rid of circular references in regular expression parsing.

: Command-line interface of the calendar module now uses argparse
instead of optparse.

: fileinput.FileInput.readline() now returns bââ instead of ââ at
the end if the FileInput was opened with binary mode. Patch by Ryosuke
Ito.

: Fixed inspect.getdoc() for inherited docstrings of properties.
Original patch by John Mark Vandenberg.

: Always use os.urandom as a source of randomness in uuid.uuid4.

================================================================================

# Changelog - Library (Part 19)

: Fixed textwrap.dedent() for the case when largest common
whitespace is a substring of smallest leading whitespace. Based on patch
by Robert Li.

: The lru_cache() wrapper objects now can be copied and pickled
(by returning the original object unchanged).

: typing: Donât crash on Union[str, Pattern].

: asyncio: Raise error from drain() when socket is closed.

: Cleaned up and fixed minor bugs in C implementation of
OrderedDict.

: Improved Unicode support in SMTPHandler through better use of
the email package. Thanks to user simon04 for the patch.

Move the imp module from a PendingDeprecationWarning to
DeprecationWarning.

: Remove mentions of the formatter module being removed in Python
3.6.

: Fixed a bug in C implementation of OrderedDict.move_to_end()
that caused segmentation fault or hang in iterating after moving several
items to the start of ordered dict.

: pickletools.dis() now outputs implicit memo index for the
MEMOIZE opcode.

: Add an optional newline parameter to binascii.b2a_base64().
base64.b64encode() uses it to avoid a memory copy.

: Objects that need calling  with keyword arguments,
can now be pickled using pickle protocols older than protocol version 4.

================================================================================

# Changelog - Library (Part 20)

: zipfile now works in threads disabled builds.

: smtpdâs SMTPChannel now correctly raises a ValueError if both
decode_data and enable_SMTPUTF8 are set to true.

: RobotFileParser now supports Crawl-delay and Request-rate
extensions.  Patch by Nikolay Bogoychev.

: distutils raises OSError instead of DistutilsPlatformError when
MSVC is not installed.

: Fixed protocol for the STACK_GLOBAL opcode in
pickletools.opcodes.

: Updates asyncio datagram create method allowing reuseport and
reuseaddr socket options to be set prior to binding the socket. Mirroring
the existing asyncio create_server method the reuseaddr option for
datagram sockets defaults to True if the O/S is âposixâ (except if the
platform is Cygwin). Patch by Chris Laws.

: Add asyncio.run_coroutine_threadsafe().  This lets you submit a
coroutine to a loop from another thread, returning a
concurrent.futures.Future.  By Vincent Michel.

: Fix CGIRequestHandler to split the query from the URL at the
first question mark (?) rather than the last. Patch from Xiang Zhang.

: Prevent CGIRequestHandler from collapsing slashes in the query
part of the URL as if it were a path. Patch from Xiang Zhang.

================================================================================

# Changelog - Library (Part 21)

: Donât add crypt.METHOD_CRYPT to crypt.methods if itâs not
supported. Check if it is supported, it may not be supported on OpenBSD
for example.

: Default implementation of tzinfo.fromutc() was returning wrong
results in some cases.

: Failed readline.set_completer_delims() no longer left the
module in inconsistent state.

: rlcompleter now omits private and special attribute names
unless the prefix starts with underscores.

: rlcompleter now can add a space or a colon after completed
keyword.

: timezone.utc name is now plain âUTCâ, not âUTC-00:00â.

: fromtimestamp() and utcfromtimestamp() methods of
datetime.datetime now round microseconds to nearest with ties going to
nearest even integer (ROUND_HALF_EVEN), as round(float), instead of
rounding towards -Infinity (ROUND_FLOOR).

: Timeit now warns when there is substantial (4x) variance
between best and worst times. Patch from Serhiy Storchaka.

: site-packages/README -> README.txt.

: help() and pydoc can now list named tuple fields in the order
they were defined rather than alphabetically.  The ordering is determined
by the _fields attribute if present.

: Improve speed of itertools.cycle() and make its pickle more
compact.

================================================================================

# Changelog - Library (Part 22)

Fix crash in itertools.cycle.__setstate__() when the first argument wasnât
a list.

: urllib.parse raises ValueError on all invalid ports. Patch by
Martin Panter.

: Improve __repr__ of argparse.Namespace() for invalid
identifiers.  Patch by Matthias Bussonnier.

: run_setup was broken in distutils. Patch from Alexander
Belopolsky.

: 2to3 converts StringTypes to a tuple. Patch from Mark Hammond.

: open() accepted a âUâ mode string containing â+â, but âUâ can
only be used with ârâ. Patch from Jeff Balogh and John OâConnor.

: improved tests for zipimporter2. Patch from Mark Lawrence.

: unittest.mock.mock_open().reset_mock would recurse infinitely.
Patch from Nicola Palumbo and Laurent De Buyst.

: Fast searching optimization in regular expressions now works
for patterns that starts with capturing groups.  Fast searching
optimization now canât be disabled at compile time.

: unittest.mock side_effects can now be exceptions again. This
was a regression vs Python 3.4. Patch from Ignacio Rossi

: Remove deprecated inspect.getmoduleinfo function.

: Fix (another) memory leak in SSLSocket.getpeercer().

: Disable the vulnerable SSLv3 protocol by default when creating
ssl.SSLContext.

================================================================================

# Changelog - Library (Part 23)

: Fix memory leak in SSLSocket.getpeercert().

: Sockets returned from accept() shouldnât appear to be
nonblocking.

: When threading.Event is reinitialized, the underlying condition
should use a regular lock rather than a recursive lock.

Skip getaddrinfo if host is already resolved. Patch by A. Jesse Jiryu
Davis.

: Add asyncio.StreamReader.readuntil() method. Patch by ÐÐ°ÑÐº
ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³.

: Avoid unnecessary serialization of getaddrinfo(3) calls on OS X
versions 10.5 or higher.  Original patch by A. Jesse Jiryu Davis.

: Avoid unnecessary serialization of getaddrinfo(3) calls on
current versions of OpenBSD and NetBSD.  Patch by A. Jesse Jiryu Davis.

: Fix asyncio/subprocess.communicate() to handle empty input.
Patch by Jack OâConnor.

: Add loop.get_exception_handler method

: asyncio: Add loop.create_future method

================================================================================

# Changelog - IDLE (Part 1)

List:
: Add tests for idlelib.configHelpSourceEdit. Patch by Saimadhav
Heblikar.
In the âIDLE-console differencesâ section of the IDLE doc, clarify how
running with IDLE affects sys.modules and the standard streams.
: fix incorrect change in IOBinding that prevented printing.
Augment IOBinding htest to include all major IOBinding functions.
: Revert unwanted conversion of â to â RIGHT SINGLE QUOTATION
MARK in README.txt and open this and NEWS.txt with âasciiâ. Re-encode
CREDITS.txt to utf-8 and open it with âutf-8â.
: Stop the debugger engine (normally in a user process) before
closing the debugger window (running in the IDLE process). This prevents
the RuntimeErrors that were being caught and ignored.
: Prevent IDLE from hanging when a) closing the shell while the
debugger is active (15347); b) closing the debugger with the [X] button
(15348); and c) activating the debugger when already active (24455). The
patch by Mark Roseman does this by making two changes. 1. Suspend and
resume the gui.interaction method with the tcl vwait mechanism intended
for this purpose (instead of root.mainloop & .quit). 2. In gui.run, allow
any existing interaction to terminate first.
Change âThe programâ to âYour programâ in an IDLE âkill program?â message
to make it clearer that the program referred to is the currently running
user program, not IDLE itself.
: Improve the appearance of the IDLE editor window status bar.
Patch by Mark Roseman.
: Change the handling of new built-in text color themes to better
address the compatibility problem introduced by the addition of IDLE Dark.
Consistently use the revised idleConf.CurrentTheme everywhere in idlelib.
: Extension configuration is now a tab in the IDLE Preferences
dialog rather than a separate dialog.  The former tabs are now a sorted
list.  Patch by Mark Roseman.
: Re-activate the config dialog help button with some content
about the other buttons and the new IDLE Dark theme.
: IDLE now has an âIDLE Darkâ built-in text color theme. It is
more or less IDLE Classic inverted, with a cobalt blue background.
Strings, comments, keywords, â¦ are still green, red, orange, â¦ . To
use it with IDLEs released before November 2015, hit the âSave as New
Custom Themeâ button and enter a new name, such as âCustom Darkâ.  The
custom theme will work with any IDLE release, and can be modified.
: README.txt is now an idlelib index for IDLE developers and
curious users. The previous user content is now in the IDLE doc chapter.
âIDLEâ now means âIntegrated Development and Learning Environmentâ.
: Users can now set breakpoint colors in Settings -> Custom
Highlighting. Original patch by Mark Roseman.
: Inactive selection background now matches active selection
background, as configured by users, on all systems.  Found items are now
always highlighted on Windows.  Initial patch by Mark Roseman.
: Idle: make calltip and completion boxes appear on Macs affected
by a tk regression.  Initial patch by Mark Roseman.
: Idle ScrolledList context menus (used in debugger) now work on
Mac Aqua. Patch by Mark Roseman.
: Make right-click for context menu work on Mac Aqua. Patch by
Mark Roseman.
: Associate tkinter messageboxes with a specific widget. For Mac
OSX, make them a âsheetâ.  Patch by Mark Roseman.
: Enhance the initial html viewer now used for Idle Help.
Properly indent fixed-pitch text (patch by Mark Roseman). Give code
snippet a very Sphinx-like light blueish-gray background. Re-use initial
width and height set by users for shell and editor. When the Table of
Contents (TOC) menu is used, put the section header at the top of the
screen.
: Condense and rewrite Idle doc section on text colors.
: Explain some differences between IDLE and console Python.
: Explain need for  when running file from Idle editor.
: Doc: augment Idle feature list and no-subprocess section.
: Update doc for Idle command line options. Some were missing and
notes were not correct.
: Most of idlelib is private and subject to change. Use
idleib.idle.* to start Idle. See idlelib.__init__.__doc__.
: Idle: add synchronization comments for future maintainers.
: Replace help.txt with help.html for Idle doc display. The new
idlelib/help.html is rstripped Doc/build/html/library/idle.html. It looks
better than help.txt and will better document Idle as released. The
tkinter html viewer that works for this file was written by Rose Roseman.
The now unused EditorWindow.HelpDialog class and helt.txt file are
deprecated.
: Deprecate unused idlelib.idlever with possible removal in 3.6.
: Remove extraneous code (which also create 2 & 3 conflicts).

================================================================================

# Changelog - IDLE (Part 2)

: Add tests for idlelib.configHelpSourceEdit. Patch by Saimadhav
Heblikar.

In the âIDLE-console differencesâ section of the IDLE doc, clarify how
running with IDLE affects sys.modules and the standard streams.

: fix incorrect change in IOBinding that prevented printing.
Augment IOBinding htest to include all major IOBinding functions.

: Revert unwanted conversion of â to â RIGHT SINGLE QUOTATION
MARK in README.txt and open this and NEWS.txt with âasciiâ. Re-encode
CREDITS.txt to utf-8 and open it with âutf-8â.

: Stop the debugger engine (normally in a user process) before
closing the debugger window (running in the IDLE process). This prevents
the RuntimeErrors that were being caught and ignored.

: Prevent IDLE from hanging when a) closing the shell while the
debugger is active (15347); b) closing the debugger with the [X] button
(15348); and c) activating the debugger when already active (24455). The
patch by Mark Roseman does this by making two changes. 1. Suspend and
resume the gui.interaction method with the tcl vwait mechanism intended
for this purpose (instead of root.mainloop & .quit). 2. In gui.run, allow
any existing interaction to terminate first.

================================================================================

# Changelog - IDLE (Part 3)

Change âThe programâ to âYour programâ in an IDLE âkill program?â message
to make it clearer that the program referred to is the currently running
user program, not IDLE itself.

: Improve the appearance of the IDLE editor window status bar.
Patch by Mark Roseman.

: Change the handling of new built-in text color themes to better
address the compatibility problem introduced by the addition of IDLE Dark.
Consistently use the revised idleConf.CurrentTheme everywhere in idlelib.

: Extension configuration is now a tab in the IDLE Preferences
dialog rather than a separate dialog.  The former tabs are now a sorted
list.  Patch by Mark Roseman.

: Re-activate the config dialog help button with some content
about the other buttons and the new IDLE Dark theme.

: IDLE now has an âIDLE Darkâ built-in text color theme. It is
more or less IDLE Classic inverted, with a cobalt blue background.
Strings, comments, keywords, â¦ are still green, red, orange, â¦ . To
use it with IDLEs released before November 2015, hit the âSave as New
Custom Themeâ button and enter a new name, such as âCustom Darkâ.  The
custom theme will work with any IDLE release, and can be modified.

================================================================================

# Changelog - IDLE (Part 4)

: README.txt is now an idlelib index for IDLE developers and
curious users. The previous user content is now in the IDLE doc chapter.
âIDLEâ now means âIntegrated Development and Learning Environmentâ.

: Users can now set breakpoint colors in Settings -> Custom
Highlighting. Original patch by Mark Roseman.

: Inactive selection background now matches active selection
background, as configured by users, on all systems.  Found items are now
always highlighted on Windows.  Initial patch by Mark Roseman.

: Idle: make calltip and completion boxes appear on Macs affected
by a tk regression.  Initial patch by Mark Roseman.

: Idle ScrolledList context menus (used in debugger) now work on
Mac Aqua. Patch by Mark Roseman.

: Make right-click for context menu work on Mac Aqua. Patch by
Mark Roseman.

: Associate tkinter messageboxes with a specific widget. For Mac
OSX, make them a âsheetâ.  Patch by Mark Roseman.

================================================================================

# Changelog - IDLE (Part 5)

: Enhance the initial html viewer now used for Idle Help.
Properly indent fixed-pitch text (patch by Mark Roseman). Give code
snippet a very Sphinx-like light blueish-gray background. Re-use initial
width and height set by users for shell and editor. When the Table of
Contents (TOC) menu is used, put the section header at the top of the
screen.

: Condense and rewrite Idle doc section on text colors.

: Explain some differences between IDLE and console Python.

: Explain need for  when running file from Idle editor.

: Doc: augment Idle feature list and no-subprocess section.

: Update doc for Idle command line options. Some were missing and
notes were not correct.

: Most of idlelib is private and subject to change. Use
idleib.idle.* to start Idle. See idlelib.__init__.__doc__.

: Idle: add synchronization comments for future maintainers.

: Replace help.txt with help.html for Idle doc display. The new
idlelib/help.html is rstripped Doc/build/html/library/idle.html. It looks
better than help.txt and will better document Idle as released. The
tkinter html viewer that works for this file was written by Rose Roseman.
The now unused EditorWindow.HelpDialog class and helt.txt file are
deprecated.

================================================================================

# Changelog - IDLE (Part 6)

: Deprecate unused idlelib.idlever with possible removal in 3.6.

: Remove extraneous code (which also create 2 & 3 conflicts).

================================================================================

# Changelog - Documentation

List:
: Used HTTPS for external links in the documentation if possible.
: Rework the Readline module documentation to group related
functions together, and add more details such as what underlying Readline
functions and variables are accessed.
: Adds note to ctypes documentation regarding cdll.msvcrt.
: Clarify the default size argument of stack_size() in the
âthreadingâ and â_threadâ modules. Patch from Mattip.
: Update 3.x packaging documentation: * âSee alsoâ links to the
new docs are now provided in the legacy pages * links to setuptools
documentation have been updated

: Used HTTPS for external links in the documentation if possible.

: Rework the Readline module documentation to group related
functions together, and add more details such as what underlying Readline
functions and variables are accessed.

: Adds note to ctypes documentation regarding cdll.msvcrt.

: Clarify the default size argument of stack_size() in the
âthreadingâ and â_threadâ modules. Patch from Mattip.

: Update 3.x packaging documentation: * âSee alsoâ links to the
new docs are now provided in the legacy pages * links to setuptools
documentation have been updated

================================================================================

# Changelog - Tests (Part 1)

List:
: Added tests for the turtle module.  Patch by ingrid, Gregory
Loyse and Jelle Zijlstra.
: When using âpython3 -m test âtestdir=TESTDIRâ, regrtest
doesnât add âtest.â prefix to test module names.
: The multiprocessing thread pool (multiprocessing.dummy.Pool)
was untested.
: Added new tests for pickling iterators of mutable sequences.
: Added test.support.check_no_resource_warning() to check that no
ResourceWarning is emitted.
: Changed test_ssl to use its internal local server more.  This
avoids relying on svn.python.org, which recently changed root certificate.
: Tests for OrderedDict are extracted from test_collections into
separate file test_ordered_dict.
: Added tests for OrderedDict subclasses.
: Add -P/âpgo to test.regrtest to suppress error output when
running the test suite for the purposes of a PGO build. Initial patch by
Alecsandru Patrascu.
: Add    --list-tests command to list tests.
:    --huntrleaks  now also checks for leak of
file descriptors. Patch written by Richard Oudkerk.
: Fix    --coverage on Windows. Remove the list
of ignored directories.
PCbuild\rt.bat now accepts an unlimited number of arguments to pass
along to regrtest.py.  Previously there was a limit of 9.
: Skip test_timestamp_overflow in test_import if bytecode files
cannot be written.

================================================================================

# Changelog - Tests (Part 2)

: Added tests for the turtle module.  Patch by ingrid, Gregory
Loyse and Jelle Zijlstra.

: When using âpython3 -m test âtestdir=TESTDIRâ, regrtest
doesnât add âtest.â prefix to test module names.

: The multiprocessing thread pool (multiprocessing.dummy.Pool)
was untested.

: Added new tests for pickling iterators of mutable sequences.

: Added test.support.check_no_resource_warning() to check that no
ResourceWarning is emitted.

: Changed test_ssl to use its internal local server more.  This
avoids relying on svn.python.org, which recently changed root certificate.

: Tests for OrderedDict are extracted from test_collections into
separate file test_ordered_dict.

: Added tests for OrderedDict subclasses.

: Add -P/âpgo to test.regrtest to suppress error output when
running the test suite for the purposes of a PGO build. Initial patch by
Alecsandru Patrascu.

: Add    --list-tests command to list tests.

:    --huntrleaks  now also checks for leak of
file descriptors. Patch written by Richard Oudkerk.

: Fix    --coverage on Windows. Remove the list
of ignored directories.

================================================================================

# Changelog - Tests (Part 3)

PCbuild\rt.bat now accepts an unlimited number of arguments to pass
along to regrtest.py.  Previously there was a limit of 9.

: Skip test_timestamp_overflow in test_import if bytecode files
cannot be written.

================================================================================

# Changelog - Build (Part 1)

List:
: Donât try to link _ctypes with a ffi_convenience library.
: Fix linking extension modules for cross builds. Patch by Xavier
de Gaye.
: Fixed support of RTLD_* constants defined as enum values, not
via macros (in particular on Android).  Patch by Chi Hsuan Yen.
: Disable the rules for running _freeze_importlib and pgen when
cross-compiling.  The output of these programs is normally saved with the
source code anyway, and is still regenerated when doing a native build.
Patch by Xavier de Gaye.
: Link audioop, _datetime, _ctypes_test modules to libm, except
on Mac OS X. Patch written by Chi Hsuan Yen.
: A âwith-lto configure option has been added that will enable
link time optimizations at build time during a make profile-opt. Some
compilers and toolchains are known to not produce stable code when using
LTO, be sure to test things thoroughly before relying on it. It can
provide a few % speed up over profile-opt alone.
: Adds validation of ucrtbase[d].dll version with warning for old
versions.
: Avoid error about nonexistent fileblocks.o file by using a
lower-level check for st_blocks in struct stat.
: Fixing the build output folder for tix-8.4.3.6. Patch by Bjoern
Thiel.
: Update Windows builds to use OpenSSL 1.0.2g.
: Added  and  arguments to
PCbuild\build.bat for building with Profile-Guided Optimization.  The
old PCbuild\build_pgo.bat script is removed.
: Add support for building with ICC to , including a
new --with-icc flag.
: Fix installation of Python on UNIX with make -j9.
: It is now possible to build Python on Windows without errors
when external libraries are not available.
: Compile Modules/_math.c once, before building extensions.
Previously it could fail to compile properly if the math and cmath builds
were concurrent.
: Update OS X 10.5+ 32-bit-only installer to build and link with
OpenSSL 1.0.2g.
: Update Windows builds to use OpenSSL 1.0.2f.
: Support Apple Xcode 7âs new textual SDK stub libraries.
: Do not enable unreachable code warnings when using gcc as the
option does not work correctly in older versions of gcc and has been
silently removed as of gcc-4.5.

================================================================================

# Changelog - Build (Part 2)

: Donât try to link _ctypes with a ffi_convenience library.

: Fix linking extension modules for cross builds. Patch by Xavier
de Gaye.

: Fixed support of RTLD_* constants defined as enum values, not
via macros (in particular on Android).  Patch by Chi Hsuan Yen.

: Disable the rules for running _freeze_importlib and pgen when
cross-compiling.  The output of these programs is normally saved with the
source code anyway, and is still regenerated when doing a native build.
Patch by Xavier de Gaye.

: Link audioop, _datetime, _ctypes_test modules to libm, except
on Mac OS X. Patch written by Chi Hsuan Yen.

: A âwith-lto configure option has been added that will enable
link time optimizations at build time during a make profile-opt. Some
compilers and toolchains are known to not produce stable code when using
LTO, be sure to test things thoroughly before relying on it. It can
provide a few % speed up over profile-opt alone.

: Adds validation of ucrtbase[d].dll version with warning for old
versions.

: Avoid error about nonexistent fileblocks.o file by using a
lower-level check for st_blocks in struct stat.

: Fixing the build output folder for tix-8.4.3.6. Patch by Bjoern
Thiel.

================================================================================

# Changelog - Build (Part 3)

: Update Windows builds to use OpenSSL 1.0.2g.

: Added  and  arguments to
PCbuild\build.bat for building with Profile-Guided Optimization.  The
old PCbuild\build_pgo.bat script is removed.

: Add support for building with ICC to , including a
new --with-icc flag.

: Fix installation of Python on UNIX with make -j9.

: It is now possible to build Python on Windows without errors
when external libraries are not available.

: Compile Modules/_math.c once, before building extensions.
Previously it could fail to compile properly if the math and cmath builds
were concurrent.

: Update OS X 10.5+ 32-bit-only installer to build and link with
OpenSSL 1.0.2g.

: Update Windows builds to use OpenSSL 1.0.2f.

: Support Apple Xcode 7âs new textual SDK stub libraries.

: Do not enable unreachable code warnings when using gcc as the
option does not work correctly in older versions of gcc and has been
silently removed as of gcc-4.5.

================================================================================

# Changelog - Windows

List:
: Updates make_zip.py to correctly generate library ZIP file.
: Update the prepare_ssl.py script to handle OpenSSL releases
that donât include the contents of the include directory (that is, 1.0.2e
and later).
: bdist_wininst created binaries fail to start and find 32bit
Python
: Update the list of magic numbers in launcher
: Excludes venv from library when generating embeddable distro.
: Removed very outdated PC/example_nt/ directory.

: Updates make_zip.py to correctly generate library ZIP file.

: Update the prepare_ssl.py script to handle OpenSSL releases
that donât include the contents of the include directory (that is, 1.0.2e
and later).

: bdist_wininst created binaries fail to start and find 32bit
Python

: Update the list of magic numbers in launcher

: Excludes venv from library when generating embeddable distro.

: Removed very outdated PC/example_nt/ directory.

================================================================================

# Changelog - Tools/Demos

List:
: Fix python-gdb.py: donât get C types once when the Python code
is loaded, but get C types on demand. The C types can change if
python-gdb.py is loaded before the Python executable. Patch written by
Thomas Ilsche.
: Fix the Freeze tool to properly use flags passed through
configure. Patch by Daniel Shaulov.
: Add dictionary unpacking support to Tools/parser/unparse.py.
Patch by Guo Ci Teo.
: Fix variable name typo in Argument Clinic.
: Fix output of python-config âextension-suffix.
: The pyvenv script has been deprecated in favour of  
.

: Fix python-gdb.py: donât get C types once when the Python code
is loaded, but get C types on demand. The C types can change if
python-gdb.py is loaded before the Python executable. Patch written by
Thomas Ilsche.

: Fix the Freeze tool to properly use flags passed through
configure. Patch by Daniel Shaulov.

: Add dictionary unpacking support to Tools/parser/unparse.py.
Patch by Guo Ci Teo.

: Fix variable name typo in Argument Clinic.

: Fix output of python-config âextension-suffix.

: The pyvenv script has been deprecated in favour of  
.

================================================================================

# Changelog - C API

List:
: SystemError is now raised in all programming bugs with using
PyArg_ParseTupleAndKeywords().  RuntimeError did raised before in some
programming bugs.
: ValueError is now raised instead of TypeError on buffer
overflow in parsing âes#â and âet#â format units.  SystemError is now
raised instead of TypeError on programmatical error in parsing format
string.

: SystemError is now raised in all programming bugs with using
PyArg_ParseTupleAndKeywords().  RuntimeError did raised before in some
programming bugs.

: ValueError is now raised instead of TypeError on buffer
overflow in parsing âes#â and âet#â format units.  SystemError is now
raised instead of TypeError on programmatical error in parsing format
string.

================================================================================

# Changelog - Python 3.5.5 final

Release date: 2018-02-04

There were no new changes in version 3.5.5.

================================================================================

# Changelog - Security (Part 1)

List:
: The sys.path[0] initialization change for  caused
a regression by revealing an inconsistency in how sys.path is initialized
when executing  from a zipfile, directory, or other import
location. This is considered a potential security issue, as it may lead to
privileged processes unexpectedly loading code from user controlled
directories in situations where that was not previously the case. The
interpreter now consistently avoids ever adding the import locationâs
parent directory to , and ensures no other 
entries are inadvertently modified when inserting the import location
named on the command line. (Originally reported as  against
Python 3.6rc1, but it was missed at the time that the then upcoming Python
3.5.4 release would also be affected)
: Fixed possible integer overflow in PyBytes_DecodeEscape,
CVE 2017-1000158. Original patch by Jay Bosamiya; rebased to Python 3
by Miro HronÄok.
: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
get security fixes.

================================================================================

# Changelog - Security (Part 2)

: The sys.path[0] initialization change for  caused
a regression by revealing an inconsistency in how sys.path is initialized
when executing  from a zipfile, directory, or other import
location. This is considered a potential security issue, as it may lead to
privileged processes unexpectedly loading code from user controlled
directories in situations where that was not previously the case. The
interpreter now consistently avoids ever adding the import locationâs
parent directory to , and ensures no other 
entries are inadvertently modified when inserting the import location
named on the command line. (Originally reported as  against
Python 3.6rc1, but it was missed at the time that the then upcoming Python
3.5.4 release would also be affected)

: Fixed possible integer overflow in PyBytes_DecodeEscape,
CVE 2017-1000158. Original patch by Jay Bosamiya; rebased to Python 3
by Miro HronÄok.

: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
get security fixes.

================================================================================

# Changelog - Core and Builtins

List:
: Fix potential crash during GC caused by tp_dealloc which
doesnât call PyObject_GC_UnTrack().

: Fix potential crash during GC caused by tp_dealloc which
doesnât call PyObject_GC_UnTrack().

================================================================================

# Changelog - Library

List:
: Fixed issues with binary plists: Fixed saving bytearrays.
Identical objects will be saved only once. Equal references will be load
as identical objects. Added support for saving and loading recursive data
structures.
: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
partial characters for UTF-8 input (libexpat bug 115):
https://github.com/libexpat/libexpat/issues/115

: Fixed issues with binary plists: Fixed saving bytearrays.
Identical objects will be saved only once. Equal references will be load
as identical objects. Added support for saving and loading recursive data
structures.

: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
partial characters for UTF-8 input (libexpat bug 115):
https://github.com/libexpat/libexpat/issues/115

================================================================================

# Changelog - Library

List:
: ftplib.FTP.putline() now throws ValueError on commands that
contains CR or LF. Patch by Donghee Na.

: ftplib.FTP.putline() now throws ValueError on commands that
contains CR or LF. Patch by Donghee Na.

================================================================================

# Changelog - Security (Part 1)

List:
: Prevent environment variables injection in subprocess on
Windows.  Prevent passing other environment variables and command
arguments.
: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
security vulnerabilities including: CVE 2017-9233 (External entity
infinite loop DoS), CVE 2016-9063 (Integer overflow, re-fix),
CVE 2016-0718 (Fix regression bugs from 2.2.0âs fix to
CVE 2016-0718) and CVE 2012-0876 (Counter hash flooding with
SipHash). Note: the CVE 2016-5300 (Use os-specific entropy sources like
getrandom) doesnât impact Python, since Python already gets entropy from
the OS to set the expat secret using XML_SetHashSalt().
: Fix urllib.parse.splithost() to correctly parse fragments. For
example, splithost('//127.0.0.1#@evil.com/') now correctly returns the
 host, instead of treating  as the host in an
authentication (login@host).
: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
CVE 2016-0718 and CVE 2016-4472. See
https://sourceforge.net/p/expat/bugs/537/ for more information.

: Prevent environment variables injection in subprocess on
Windows.  Prevent passing other environment variables and command
arguments.

================================================================================

# Changelog - Security (Part 2)

: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
security vulnerabilities including: CVE 2017-9233 (External entity
infinite loop DoS), CVE 2016-9063 (Integer overflow, re-fix),
CVE 2016-0718 (Fix regression bugs from 2.2.0âs fix to
CVE 2016-0718) and CVE 2012-0876 (Counter hash flooding with
SipHash). Note: the CVE 2016-5300 (Use os-specific entropy sources like
getrandom) doesnât impact Python, since Python already gets entropy from
the OS to set the expat secret using XML_SetHashSalt().

: Fix urllib.parse.splithost() to correctly parse fragments. For
example, splithost('//127.0.0.1#@evil.com/') now correctly returns the
 host, instead of treating  as the host in an
authentication (login@host).

: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
CVE 2016-0718 and CVE 2016-4472. See
https://sourceforge.net/p/expat/bugs/537/ for more information.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Relative import from unloaded package now reimports the package
instead of failing with SystemError.  Relative import from non-package now
fails with ImportError rather than SystemError.
: Avoid blocking in pthread_mutex_lock() when
PyThread_acquire_lock() is asked not to block.
: Fixed various segfaults with dict when input collections are
mutated during searching, inserting or comparing.  Based on patches by
Duane Griffin and Tim Mitchell.
: Fixed type.__setattr__() and type.__delattr__() for
non-interned attribute names.  Based on patch by Eryk Sun.
: Fixed error messages in the index() method of tuple, list and
deque when pass indices of wrong type.
: bool(range) works even if len(range) raises
OverflowError.
: Fix wrapping coroutine return values in StopIteration.
: Restore runtime compatibility with bytecode files generated by
CPython 3.5.0 to 3.5.2, and adjust the eval loop to avoid the problems
that could be caused by the malformed variant of the
BUILD_MAP_UNPACK_WITH_CALL opcode that they may contain. Patch by Petr
Viktorin, Serhiy Storchaka, and Nick Coghlan.
: Support __rmod__ for subclasses of str being called before
str.__mod__. Patch by Martijn Pieters.
: Fix incorrect handling of signed zeros in complex constructor
for complex subclasses and for inputs having a __complex__ method. Patch
by Serhiy Storchaka.
: Fixed possibly dereferencing undefined pointers when creating
weakref objects.
: Fixed use-after-free problem in key sharing dict.
: Prevent RunMainFromImporter overwriting sys.path[0].
: Fixed possible BytesWarning when compare the code objects.
Warnings could be emitted at compile time.
: If max_line_length=None is specified while using the Compat32
policy, it is no longer ignored.  Patch by Mircea Cosbuc.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Relative import from unloaded package now reimports the package
instead of failing with SystemError.  Relative import from non-package now
fails with ImportError rather than SystemError.

: Avoid blocking in pthread_mutex_lock() when
PyThread_acquire_lock() is asked not to block.

: Fixed various segfaults with dict when input collections are
mutated during searching, inserting or comparing.  Based on patches by
Duane Griffin and Tim Mitchell.

: Fixed type.__setattr__() and type.__delattr__() for
non-interned attribute names.  Based on patch by Eryk Sun.

: Fixed error messages in the index() method of tuple, list and
deque when pass indices of wrong type.

: bool(range) works even if len(range) raises
OverflowError.

: Fix wrapping coroutine return values in StopIteration.

: Restore runtime compatibility with bytecode files generated by
CPython 3.5.0 to 3.5.2, and adjust the eval loop to avoid the problems
that could be caused by the malformed variant of the
BUILD_MAP_UNPACK_WITH_CALL opcode that they may contain. Patch by Petr
Viktorin, Serhiy Storchaka, and Nick Coghlan.

: Support __rmod__ for subclasses of str being called before
str.__mod__. Patch by Martijn Pieters.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fix incorrect handling of signed zeros in complex constructor
for complex subclasses and for inputs having a __complex__ method. Patch
by Serhiy Storchaka.

: Fixed possibly dereferencing undefined pointers when creating
weakref objects.

: Fixed use-after-free problem in key sharing dict.

: Prevent RunMainFromImporter overwriting sys.path[0].

: Fixed possible BytesWarning when compare the code objects.
Warnings could be emitted at compile time.

: If max_line_length=None is specified while using the Compat32
policy, it is no longer ignored.  Patch by Mircea Cosbuc.

================================================================================

# Changelog - Library (Part 1)

List:
: Fix unittest.mockâs autospec to not fail on method-bound
builtin functions.  Patch by Aaron Gallagher.
: Fix decrementing a borrowed reference in tracemalloc.
: Fix multiprocessing.Queue.join_thread(): it now waits until the
thread completes, even if the thread was started by the same process which
created the queue.
: Fix segfault in readline when using readlineâs history-size
option.  Patch by Nir Soffer.
: signal.setitimer() may disable the timer when passed a tiny
value. Tiny values (such as 1e-6) are valid non-zero values for
setitimer(), which is specified as taking microsecond-resolution
intervals. However, on some platform, our conversion routine could convert
1e-6 into a zero interval, therefore disabling the timer instead of
(re-)scheduling it.
: Fix bug when modifying os.environ while iterating over it
: Fix email header value parser dropping folding white space in
certain cases.
: Update zlib to 1.2.11.
: os.listdir() and os.scandir() now emit bytes names when called
with bytes-like argument.
: Prohibited the â=â character in environment variable names in
os.putenv() and os.spawn*().
: Fixed the lgettext() family of functions in the gettext module.
They now always return bytes.
: Fix path calculation in imp.load_package(), fixing it for cases
when a package is only shipped with bytecodes. Patch by Alexandru
Ardelean.
: unittest.TestCase.assertRaises() now manually breaks a
reference cycle to not keep objects alive longer than expected.
: inspect.signature() now supports callables with
variable-argument parameters wrapped with partialmethod. Patch by Donghee
Na.
: Fixed comparison check for ipaddress.ip_interface objects.
Patch by Sanjay Sundaresan.
: Avoid race condition in multiprocessing cleanup.
: The traceback no longer displayed for SystemExit raised in a
callback registered by atexit.
: Donât log exceptions if Task/Future âcancel()â method was
called.
: Updates to typing module: Add generic AsyncContextManager, add
support for ContextManager on all versions. Original PRs by Jelle Zijlstra
and Ivan Levkivskyi
: Fix ssl sockets leaks when connection is aborted in asyncio/ssl
implementation. Patch by MichaÃ«l SghaÃ¯er.
: Closing transport during handshake process leaks open socket.
Patch by Nikolay Kim
: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu
Sornay.
: On Windows, subprocess.Popen.communicate() now also ignore
EINVAL on stdin.write() if the child process is still running but closed
the pipe.
: Fix the problem that logging.handlers.SysLogHandler cannot
handle IPv6 addresses.
: Preserve generator state when _random.Random.setstate() raises
an exception. Patch by Bryan Olson.
: multiprocessing.Queue._feed background running thread do not
break from main loop on exception.
: Fix handling escape characters in HZ codec.  Based on patch by
Ma Lin.
: Fix AttributeError when using SimpleQueue.empty() under 
and forkserver start methods.
: imaplib and poplib now catch the Windows socket WSAEINVAL error
(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.
This error occurs sometimes on SSL connections.
: Warnings emitted when compile a regular expression now always
point to the line in the user code.  Previously they could point into
inners of the re module if emitted from inside of groups or conditionals.
: Fixed Task.cancel() can be ignored when the task is running
coroutine and the coroutine returned without any more .
: Fix range checking in GB18030 decoder.  Original patch by Ma
Lin.
: Change resulted because of zipfile breakage. (See also:
)
: Removed the __init__ methods of _jsonâs scanner and encoder.
Misusing them could cause memory leaks or crashes.  Now scanner and
encoder objects are completely initialized in the __new__ methods.
: Avoid KeyboardInterrupt tracebacks in forkserver helper process
when Ctrl-C is received.
: Various updates to typing module: add typing.NoReturn type, use
WrapperDescriptorType, minor bug-fixes.  Original PRs by Jim
Fasarakis-Hilliard and Ivan Levkivskyi.
: Fix getsockname() for unbound AF_UNIX sockets on Linux.
: Fixed leaks and crashes in errors handling in the parser
module.
: Fixed crashes in IOBase methods __next__() and readlines() when
readline() or __next__() respectively return non-sizeable object. Fixed
possible other errors caused by not checking results of PyObject_Size(),
PySequence_Size(), or PyMapping_Size().
: _io._IOBase.readlines will check if itâs closed first when hint
is present.
: Fixed race condition in pathlib mkdir with flags parents=True.
Patch by Armin Rigo.
: Fixed arbitrary unchaining of RuntimeError exceptions in
contextlib.contextmanager.  Patch by Siddharth Velankar.
: Pickling and copying ImportError now preserves name and path
attributes.
: Fix a crash in itertools.chain.from_iterable when encountering
long runs of empty iterables.
: Fixed multiple crashes in ElementTree caused by race conditions
and wrong types.
: Fixed a bug in pools in multiprocessing.pool that raising an
exception at the very first of an iterable may swallow the exception or
make the program hang. Patch by Davin Potts and Xiang Zhang.
: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when
the OS gives priority to errors such as EACCES over EEXIST.
: Release references to tasks, their arguments and their results
as soon as they are finished in multiprocessing.Pool.
: faulthandler: Restore the old sigaltstack during teardown.
Patch by Christophe Zeitouny.
: Fixed crashes in repr of recursive buffered file-like objects.
: Fix crashes in partial.__repr__ if the keys of partial.keywords
are not strings.  Patch by Michael Seifert.
: get_extra_info() raises exception if get called on closed ssl
transport. Patch by Nikolay Kim.
: Fixed possible failing or crashing input() if attributes
âencodingâ or âerrorsâ of sys.stdin or sys.stdout are not set or are not
strings.
: Fix a bug that prevented array âQâ, âLâ and âIâ from accepting
big intables (objects that have __int__) as elements.  Patch by Oren
Milman.
: SimpleXMLRPCDispatcher no longer chains KeyError (or any other
exception) to exception(s) raised in the dispatched methods. Patch by Petr
Motejlek.
: asyncio.subprocess.SubprocessStreamProtocol no longer closes
before all pipes are closed.
: Fix asyncio to support instantiation of new event loops in
child processes.
: Fix assertion error in threading._DummyThread.is_alive().
: Fix file object leak in aifc.open() when file is given as a
filesystem path and is not in valid AIFF format. Patch by Anthony Zhang.
: Fix unittest.mock._Call helper: donât ignore the name parameter
anymore. Patch written by Jiajun Huang.
: Altering a kwarg dictionary passed to functools.partial() no
longer affects a partial object after creation.
: Various updates to typing module: typing.Counter,
typing.ChainMap, improved ABC caching, etc. Original PRs by Jelle
Zijlstra, Ivan Levkivskyi, Manuel Krebber, and Åukasz Langa.
: Fix datetime.fromtimestamp() regression introduced in Python
3.6.0: check minimum and maximum years.
: Fix weakref spewing exceptions during interpreter shutdown when
used with a rare combination of multiprocessing and custom codecs.
: Prevent infinite loop in pathlib.Path.mkdir
: Fixed out-of-bounds buffer access in the group() method of the
match object. Based on patch by WGH.
: Fix subprocess.Popen.wait() when the child process has exited
to a stopped instead of terminated state (ex: when under ptrace).
: Fix a regression in argparse that help messages would wrap at
non-breaking spaces.
: Fixed the comparison of mock.MagickMock with mock.ANY.
: Fix an important omission by adding Deque to the typing module.
: Fixed infinite recursion in the repr of uninitialized
ctypes.CDLL instances.
: Fixed race condition in C implementation of
functools.lru_cache. KeyError could be raised when cached function with
full cache was simultaneously called from different threads with the same
uncached arguments.
: In urllib.request, suffixes in no_proxy environment variable
with leading dots could match related hostnames again (e.g. .b.c matches
a.b.c). Patch by Milan Oberkirch.

================================================================================

# Changelog - Library (Part 2)

: Fix unittest.mockâs autospec to not fail on method-bound
builtin functions.  Patch by Aaron Gallagher.

: Fix decrementing a borrowed reference in tracemalloc.

: Fix multiprocessing.Queue.join_thread(): it now waits until the
thread completes, even if the thread was started by the same process which
created the queue.

: Fix segfault in readline when using readlineâs history-size
option.  Patch by Nir Soffer.

: signal.setitimer() may disable the timer when passed a tiny
value. Tiny values (such as 1e-6) are valid non-zero values for
setitimer(), which is specified as taking microsecond-resolution
intervals. However, on some platform, our conversion routine could convert
1e-6 into a zero interval, therefore disabling the timer instead of
(re-)scheduling it.

: Fix bug when modifying os.environ while iterating over it

: Fix email header value parser dropping folding white space in
certain cases.

: Update zlib to 1.2.11.

: os.listdir() and os.scandir() now emit bytes names when called
with bytes-like argument.

: Prohibited the â=â character in environment variable names in
os.putenv() and os.spawn*().

================================================================================

# Changelog - Library (Part 3)

: Fixed the lgettext() family of functions in the gettext module.
They now always return bytes.

: Fix path calculation in imp.load_package(), fixing it for cases
when a package is only shipped with bytecodes. Patch by Alexandru
Ardelean.

: unittest.TestCase.assertRaises() now manually breaks a
reference cycle to not keep objects alive longer than expected.

: inspect.signature() now supports callables with
variable-argument parameters wrapped with partialmethod. Patch by Donghee
Na.

: Fixed comparison check for ipaddress.ip_interface objects.
Patch by Sanjay Sundaresan.

: Avoid race condition in multiprocessing cleanup.

: The traceback no longer displayed for SystemExit raised in a
callback registered by atexit.

: Donât log exceptions if Task/Future âcancel()â method was
called.

: Updates to typing module: Add generic AsyncContextManager, add
support for ContextManager on all versions. Original PRs by Jelle Zijlstra
and Ivan Levkivskyi

: Fix ssl sockets leaks when connection is aborted in asyncio/ssl
implementation. Patch by MichaÃ«l SghaÃ¯er.

: Closing transport during handshake process leaks open socket.
Patch by Nikolay Kim

================================================================================

# Changelog - Library (Part 4)

: Fix waiter cancellation in asyncio.Lock. Patch by Mathieu
Sornay.

: On Windows, subprocess.Popen.communicate() now also ignore
EINVAL on stdin.write() if the child process is still running but closed
the pipe.

: Fix the problem that logging.handlers.SysLogHandler cannot
handle IPv6 addresses.

: Preserve generator state when _random.Random.setstate() raises
an exception. Patch by Bryan Olson.

: multiprocessing.Queue._feed background running thread do not
break from main loop on exception.

: Fix handling escape characters in HZ codec.  Based on patch by
Ma Lin.

: Fix AttributeError when using SimpleQueue.empty() under 
and forkserver start methods.

: imaplib and poplib now catch the Windows socket WSAEINVAL error
(code 10022) on shutdown(SHUT_RDWR): An invalid operation was attempted.
This error occurs sometimes on SSL connections.

: Warnings emitted when compile a regular expression now always
point to the line in the user code.  Previously they could point into
inners of the re module if emitted from inside of groups or conditionals.

: Fixed Task.cancel() can be ignored when the task is running
coroutine and the coroutine returned without any more .

================================================================================

# Changelog - Library (Part 5)

: Fix range checking in GB18030 decoder.  Original patch by Ma
Lin.

: Change resulted because of zipfile breakage. (See also:
)

: Removed the __init__ methods of _jsonâs scanner and encoder.
Misusing them could cause memory leaks or crashes.  Now scanner and
encoder objects are completely initialized in the __new__ methods.

: Avoid KeyboardInterrupt tracebacks in forkserver helper process
when Ctrl-C is received.

: Various updates to typing module: add typing.NoReturn type, use
WrapperDescriptorType, minor bug-fixes.  Original PRs by Jim
Fasarakis-Hilliard and Ivan Levkivskyi.

: Fix getsockname() for unbound AF_UNIX sockets on Linux.

: Fixed leaks and crashes in errors handling in the parser
module.

: Fixed crashes in IOBase methods __next__() and readlines() when
readline() or __next__() respectively return non-sizeable object. Fixed
possible other errors caused by not checking results of PyObject_Size(),
PySequence_Size(), or PyMapping_Size().

: _io._IOBase.readlines will check if itâs closed first when hint
is present.

: Fixed race condition in pathlib mkdir with flags parents=True.
Patch by Armin Rigo.

================================================================================

# Changelog - Library (Part 6)

: Fixed arbitrary unchaining of RuntimeError exceptions in
contextlib.contextmanager.  Patch by Siddharth Velankar.

: Pickling and copying ImportError now preserves name and path
attributes.

: Fix a crash in itertools.chain.from_iterable when encountering
long runs of empty iterables.

: Fixed multiple crashes in ElementTree caused by race conditions
and wrong types.

: Fixed a bug in pools in multiprocessing.pool that raising an
exception at the very first of an iterable may swallow the exception or
make the program hang. Patch by Davin Potts and Xiang Zhang.

: Avoid incorrect errors raised by Path.mkdir(exist_ok=True) when
the OS gives priority to errors such as EACCES over EEXIST.

: Release references to tasks, their arguments and their results
as soon as they are finished in multiprocessing.Pool.

: faulthandler: Restore the old sigaltstack during teardown.
Patch by Christophe Zeitouny.

: Fixed crashes in repr of recursive buffered file-like objects.

: Fix crashes in partial.__repr__ if the keys of partial.keywords
are not strings.  Patch by Michael Seifert.

: get_extra_info() raises exception if get called on closed ssl
transport. Patch by Nikolay Kim.

================================================================================

# Changelog - Library (Part 7)

: Fixed possible failing or crashing input() if attributes
âencodingâ or âerrorsâ of sys.stdin or sys.stdout are not set or are not
strings.

: Fix a bug that prevented array âQâ, âLâ and âIâ from accepting
big intables (objects that have __int__) as elements.  Patch by Oren
Milman.

: SimpleXMLRPCDispatcher no longer chains KeyError (or any other
exception) to exception(s) raised in the dispatched methods. Patch by Petr
Motejlek.

: asyncio.subprocess.SubprocessStreamProtocol no longer closes
before all pipes are closed.

: Fix asyncio to support instantiation of new event loops in
child processes.

: Fix assertion error in threading._DummyThread.is_alive().

: Fix file object leak in aifc.open() when file is given as a
filesystem path and is not in valid AIFF format. Patch by Anthony Zhang.

: Fix unittest.mock._Call helper: donât ignore the name parameter
anymore. Patch written by Jiajun Huang.

: Altering a kwarg dictionary passed to functools.partial() no
longer affects a partial object after creation.

================================================================================

# Changelog - Library (Part 8)

: Various updates to typing module: typing.Counter,
typing.ChainMap, improved ABC caching, etc. Original PRs by Jelle
Zijlstra, Ivan Levkivskyi, Manuel Krebber, and Åukasz Langa.

: Fix datetime.fromtimestamp() regression introduced in Python
3.6.0: check minimum and maximum years.

: Fix weakref spewing exceptions during interpreter shutdown when
used with a rare combination of multiprocessing and custom codecs.

: Prevent infinite loop in pathlib.Path.mkdir

: Fixed out-of-bounds buffer access in the group() method of the
match object. Based on patch by WGH.

: Fix subprocess.Popen.wait() when the child process has exited
to a stopped instead of terminated state (ex: when under ptrace).

: Fix a regression in argparse that help messages would wrap at
non-breaking spaces.

: Fixed the comparison of mock.MagickMock with mock.ANY.

: Fix an important omission by adding Deque to the typing module.

: Fixed infinite recursion in the repr of uninitialized
ctypes.CDLL instances.

: Fixed race condition in C implementation of
functools.lru_cache. KeyError could be raised when cached function with
full cache was simultaneously called from different threads with the same
uncached arguments.

================================================================================

# Changelog - Library (Part 9)

: In urllib.request, suffixes in no_proxy environment variable
with leading dots could match related hostnames again (e.g. .b.c matches
a.b.c). Patch by Milan Oberkirch.

================================================================================

# Changelog - Documentation

List:
: Add missing attribute related constants in curses
documentation.
: Add missing info of code object in inspect documentation.
: Link the documentation to its source file on GitHub.
: Document smtpd.py as effectively deprecated and add a pointer
to aiosmtpd, a third-party asyncio-based replacement.
: Add canonical header link on each page to corresponding major
version of the documentation. Patch by Matthias Bussonnier.
: Fix Python 2 syntax in code for building the documentation.

: Add missing attribute related constants in curses
documentation.

: Add missing info of code object in inspect documentation.

: Link the documentation to its source file on GitHub.

: Document smtpd.py as effectively deprecated and add a pointer
to aiosmtpd, a third-party asyncio-based replacement.

: Add canonical header link on each page to corresponding major
version of the documentation. Patch by Matthias Bussonnier.

: Fix Python 2 syntax in code for building the documentation.

================================================================================

# Changelog - Tests (Part 1)

List:
: Fix regrtest command line parser to allow passing -u
extralargefile to run test_zipfile64.
: regrtest: Enhance regrtest and backport features from the
master branch. Add options: âcoverage, âtestdir, âlist-tests (list test
files, donât run them), âlist-cases (list test identifiers, donât run
them, ), âmatchfile (load a list of test filters from a
text file, ), âslowest (alias to âslow). Enhance output:
add timestamp, test result, currently running tests, âTests result: xxxâ
summary with total duration, etc. Fix reference leak hunting in regrtest,
âhuntrleaks: regrtest now warms up caches, create explicitly all internal
singletons which are created on demand to prevent false positives when
checking for reference leaks. ().
: test_thread: setUp() now uses support.threading_setup() and
support.threading_cleanup() to wait until threads complete to avoid random
side effects on following tests. Initial patch written by Grzegorz
Grzywacz.
: Skip test_asyncore and test_eintr poll failures on macOS. Skip
some tests of select.poll when running on macOS due to unresolved issues
with the underlying system poll function on some macOS versions.
: Enhanced functions swap_attr() and swap_item() in the
test.support module. They now work when delete replaced attribute or item
inside the with statement.  The old value of the attribute or item (or
None if it doesnât exist) now will be assigned to the target of the âasâ
clause, if there is one.
: to match the behaviour of the  flag,
test_re.test_locale_flag now uses locale.getpreferredencoding(False)
to determine the candidate encoding for the test regex (allowing it to
correctly skip the test when the default locale encoding is a multi-byte
encoding)

================================================================================

# Changelog - Tests (Part 2)

: Fix regrtest command line parser to allow passing -u
extralargefile to run test_zipfile64.

: regrtest: Enhance regrtest and backport features from the
master branch. Add options: âcoverage, âtestdir, âlist-tests (list test
files, donât run them), âlist-cases (list test identifiers, donât run
them, ), âmatchfile (load a list of test filters from a
text file, ), âslowest (alias to âslow). Enhance output:
add timestamp, test result, currently running tests, âTests result: xxxâ
summary with total duration, etc. Fix reference leak hunting in regrtest,
âhuntrleaks: regrtest now warms up caches, create explicitly all internal
singletons which are created on demand to prevent false positives when
checking for reference leaks. ().

: test_thread: setUp() now uses support.threading_setup() and
support.threading_cleanup() to wait until threads complete to avoid random
side effects on following tests. Initial patch written by Grzegorz
Grzywacz.

: Skip test_asyncore and test_eintr poll failures on macOS. Skip
some tests of select.poll when running on macOS due to unresolved issues
with the underlying system poll function on some macOS versions.

================================================================================

# Changelog - Tests (Part 3)

: Enhanced functions swap_attr() and swap_item() in the
test.support module. They now work when delete replaced attribute or item
inside the with statement.  The old value of the attribute or item (or
None if it doesnât exist) now will be assigned to the target of the âasâ
clause, if there is one.

: to match the behaviour of the  flag,
test_re.test_locale_flag now uses locale.getpreferredencoding(False)
to determine the candidate encoding for the test regex (allowing it to
correctly skip the test when the default locale encoding is a multi-byte
encoding)

================================================================================

# Changelog - Build

List:
: Prevent unnecessary rebuilding of Python during  ,
  and some other make targets when configured with
--enable-optimizations.
: Donât regenerate generated files based on file modification
time anymore: the action is now explicit. Replace   with
 .
: Fix --enable-optimization didnât work.

: Prevent unnecessary rebuilding of Python during  ,
  and some other make targets when configured with
--enable-optimizations.

: Donât regenerate generated files based on file modification
time anymore: the action is now explicit. Replace   with
 .

: Fix --enable-optimization didnât work.

================================================================================

# Changelog - Windows

List:
: Locate msbuild.exe on Windows when building rather than
vcvarsall.bat
: Prevent crash when passing invalid arguments into msvcrt
module.

: Locate msbuild.exe on Windows when building rather than
vcvarsall.bat

: Prevent crash when passing invalid arguments into msvcrt
module.

================================================================================

# Changelog - C API

List:
: Function PySlice_GetIndicesEx() is replaced with a macro if
Py_LIMITED_API is set to the value between 0x03050400 and 0x03060000 (not
including) or 0x03060100 or higher.
: Fixed the declaration of some public API functions.
PyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in
limited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and
Py_BuildValue() were not available in limited API of version < 3.3 when
PY_SSIZE_T_CLEAN is defined.

: Function PySlice_GetIndicesEx() is replaced with a macro if
Py_LIMITED_API is set to the value between 0x03050400 and 0x03060000 (not
including) or 0x03060100 or higher.

: Fixed the declaration of some public API functions.
PyArg_VaParse() and PyArg_VaParseTupleAndKeywords() were not available in
limited API. PyArg_ValidateKeywordArguments(), PyArg_UnpackTuple() and
Py_BuildValue() were not available in limited API of version < 3.3 when
PY_SSIZE_T_CLEAN is defined.

================================================================================

# Changelog - Python 3.5.3 final

Release date: 2017-01-17

There were no code changes between 3.5.3rc1 and 3.5.3 final.

================================================================================

# Changelog - Security

List:
: Fix os.urandom() implementation using getrandom() on Linux.
Truncate size to INT_MAX and loop until we collected enough random bytes,
instead of casting a directly Py_ssize_t to int.
: Avoid shell injection problems with ctypes.util.find_library().

: Fix os.urandom() implementation using getrandom() on Linux.
Truncate size to INT_MAX and loop until we collected enough random bytes,
instead of casting a directly Py_ssize_t to int.

: Avoid shell injection problems with ctypes.util.find_library().

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: bytearray formatting no longer truncates on first null byte.
: Do not include <sys/random.h> if it does not exist.
: Fix a memory leak in split-table dictionaries: setattr() must
not convert combined table into split table.
: Correct the positioning of the syntax error caret for indented
blocks. Based on patch by Michael Layzell.
: Fixed bytes formatting of octals with zero padding in alternate
form.
: Fixed setting the offset attribute of SyntaxError by
PyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().
: functools.lru_cache() was susceptible to an obscure reentrancy
bug caused by a monkey-patched len() function.
: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
when decode astral characters.  Patch by Xiang Zhang.
: Extra slash no longer added to sys.path components in case of
empty compile-time PYTHONPATH components.
: Fixed potential crash in PyUnicode_AsDecodedObject() in debug
build.
: Fixed possible memory leak in _PyTraceback_Add() and exception
loss in PyTraceBack_Here().
: Added sanity checks and tests for PyUnicode_CopyCharacters().
Patch by Xiang Zhang.
: The type of long range iterator is now registered as Iterator.
Patch by Oren Milman.
: The constructor of range_iterator now checks that step is not
0. Patch by Oren Milman.
: Resolving special methods of uninitialized type now causes
implicit initialization of the type instead of a fail.
: PyType_Ready() now checks that tp_name is not NULL. Original
patch by Niklas Koep.
: Fixed possible crash when AST is changed in process of
compiling it.
: String constants with null character no longer interned.
: Fix crash when GC runs during weakref callbacks.
: String constants now interned recursively in tuples and
frozensets.
: Fixed misleading error message when ImportError called with
invalid keyword args.
: Fix incorrect type in error message from complex(1.0,
. Patch by Soumya Sharma.
: Fallback on reading /dev/urandom device when the getrandom()
syscall fails with EPERM, for example when blocked by SECCOMP.
: Fix a regression in zipimportâs compile_source().  zipimport
should use the same optimization level as the interpreter.
: Fix corrupted result from PyLong_FromLong(0) when Python is
compiled with NSMALLPOSINTS = 0.
: Prevents zipimport from unnecessarily encoding a filename
(patch by Eryk Sun)
: dictitems_contains no longer swallows compare errors. (Patch by
Xiang Zhang)
: Properly clear out a generatorâs frameâs backreference to the
generator to prevent crashes in frame.clear().
: Fix a crash when a coroutine that has not been awaited is
finalized with warnings-as-errors enabled.
: Fix another issue found by PVS-Studio: Null pointer check after
use of âdefâ in _PyState_AddModule(). Initial patch by Christian Heimes.
: set literal evaluation order did not match documented
behaviour.
: Multi-phase extension module import now correctly allows the
 field to be used to add module level functions to instances
of non-module types returned from Py_create_mod. Patch by Xiang Zhang.
: The round() function accepted a second None argument for some
types but not for others.  Fixed the inconsistency by accepting None for
all numeric types.
: Warn if a submodule argument to âpython -mâ or
runpy.run_module() is found in sys.modules after parent packages are
imported, but before the submodule is executed.
: Fix a SystemError in the implementation of âraiseâ statement.
In a brand new thread, raise a RuntimeError since there is no active
exception to reraise. Patch written by Xiang Zhang.
: Standard __import__() no longer look up â__import__â in globals
or builtins for importing submodules or âfrom importâ.  Fixed handling an
error of non-string package name.
: Respect the PYTHONCASEOK environment variable under Windows.
: Make having too many statically nested blocks a SyntaxError
instead of SystemError.
: Fixed possible integer overflow in bytes and bytearray
concatenations. Patch by Xiang Zhang.
: Add integer overflow check in bytearray.extend().  Patch by
Xiang Zhang.
: Donât rely on wrapping for overflow check in
PySequence_Tuple().  Patch by Xiang Zhang.
: __length_hint__() of bytearray iterators no longer return a
negative integer for a resized bytearray.
: Fix memory leak in codeobject.c

================================================================================

# Changelog - Core and Builtins (Part 2)

: bytearray formatting no longer truncates on first null byte.

: Do not include <sys/random.h> if it does not exist.

: Fix a memory leak in split-table dictionaries: setattr() must
not convert combined table into split table.

: Correct the positioning of the syntax error caret for indented
blocks. Based on patch by Michael Layzell.

: Fixed bytes formatting of octals with zero padding in alternate
form.

: Fixed setting the offset attribute of SyntaxError by
PyErr_SyntaxLocationEx() and PyErr_SyntaxLocationObject().

: functools.lru_cache() was susceptible to an obscure reentrancy
bug caused by a monkey-patched len() function.

: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
when decode astral characters.  Patch by Xiang Zhang.

: Extra slash no longer added to sys.path components in case of
empty compile-time PYTHONPATH components.

: Fixed potential crash in PyUnicode_AsDecodedObject() in debug
build.

: Fixed possible memory leak in _PyTraceback_Add() and exception
loss in PyTraceBack_Here().

: Added sanity checks and tests for PyUnicode_CopyCharacters().
Patch by Xiang Zhang.

: The type of long range iterator is now registered as Iterator.
Patch by Oren Milman.

================================================================================

# Changelog - Core and Builtins (Part 3)

: The constructor of range_iterator now checks that step is not
0. Patch by Oren Milman.

: Resolving special methods of uninitialized type now causes
implicit initialization of the type instead of a fail.

: PyType_Ready() now checks that tp_name is not NULL. Original
patch by Niklas Koep.

: Fixed possible crash when AST is changed in process of
compiling it.

: String constants with null character no longer interned.

: Fix crash when GC runs during weakref callbacks.

: String constants now interned recursively in tuples and
frozensets.

: Fixed misleading error message when ImportError called with
invalid keyword args.

: Fix incorrect type in error message from complex(1.0,
. Patch by Soumya Sharma.

: Fallback on reading /dev/urandom device when the getrandom()
syscall fails with EPERM, for example when blocked by SECCOMP.

: Fix a regression in zipimportâs compile_source().  zipimport
should use the same optimization level as the interpreter.

: Fix corrupted result from PyLong_FromLong(0) when Python is
compiled with NSMALLPOSINTS = 0.

: Prevents zipimport from unnecessarily encoding a filename
(patch by Eryk Sun)

: dictitems_contains no longer swallows compare errors. (Patch by
Xiang Zhang)

================================================================================

# Changelog - Core and Builtins (Part 4)

: Properly clear out a generatorâs frameâs backreference to the
generator to prevent crashes in frame.clear().

: Fix a crash when a coroutine that has not been awaited is
finalized with warnings-as-errors enabled.

: Fix another issue found by PVS-Studio: Null pointer check after
use of âdefâ in _PyState_AddModule(). Initial patch by Christian Heimes.

: set literal evaluation order did not match documented
behaviour.

: Multi-phase extension module import now correctly allows the
 field to be used to add module level functions to instances
of non-module types returned from Py_create_mod. Patch by Xiang Zhang.

: The round() function accepted a second None argument for some
types but not for others.  Fixed the inconsistency by accepting None for
all numeric types.

: Warn if a submodule argument to âpython -mâ or
runpy.run_module() is found in sys.modules after parent packages are
imported, but before the submodule is executed.

: Fix a SystemError in the implementation of âraiseâ statement.
In a brand new thread, raise a RuntimeError since there is no active
exception to reraise. Patch written by Xiang Zhang.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Standard __import__() no longer look up â__import__â in globals
or builtins for importing submodules or âfrom importâ.  Fixed handling an
error of non-string package name.

: Respect the PYTHONCASEOK environment variable under Windows.

: Make having too many statically nested blocks a SyntaxError
instead of SystemError.

: Fixed possible integer overflow in bytes and bytearray
concatenations. Patch by Xiang Zhang.

: Add integer overflow check in bytearray.extend().  Patch by
Xiang Zhang.

: Donât rely on wrapping for overflow check in
PySequence_Tuple().  Patch by Xiang Zhang.

: __length_hint__() of bytearray iterators no longer return a
negative integer for a resized bytearray.

: Fix memory leak in codeobject.c

================================================================================

# Changelog - Library (Part 1)

List:
: inspect.getframeinfo() now correctly shows the first line of a
context. Patch by Sam Breese.
: Offsets in a ZIP file created with extern file object and modes
âwâ and âxâ now are relative to the start of the file.
: Fixed recursion errors in large or resized
curses.textpad.Textbox.  Based on patch by Tycho Andersen.
: Fix weakrefs in the pure python version of
collections.OrderedDict move_to_end() method. Contributed by Andra
Bogildea.
: curses.ascii predicates now work correctly with negative
integers.
: old keys should not remove new values from WeakValueDictionary
when collecting from another thread.
: Remove editor artifacts from Tix.py.
: Fixed a crash when deallocate deep ElementTree.
: Fix bugs in WeakValueDictionary.setdefault() and
WeakValueDictionary.pop() when a GC collection happens in another thread.
: Fixed a crash in resource.prlimit() when pass a sequence that
doesnât own its elements as limits.
: multiprocessing.set_forkserver_preload() would crash the
forkserver process if a preloaded module instantiated some multiprocessing
objects such as locks.
: dbm.dumb now supports reading read-only files and no longer
writes the index file when it is not changed.
: In ctypes, prevent a crash calling the from_buffer() and
from_buffer_copy() methods on abstract classes like Array.
: Fix crash in os.spawnv() with no elements in args
: Always raise ValueError for negative
compileall.compile_dir(workers=â¦) parameter, even when multithreading is
unavailable.
: Fixed possible crash in _io.TextIOWrapper deallocator when the
garbage collector is invoked in other thread.  Based on patch by Sebastian
Cufre.
: LZMA compressor and decompressor no longer raise exceptions if
given empty data twice.  Patch by Benjamin Fogle.
: Fixed segfault in cursesâs addch() with ncurses6.
: tarfile.open() with mode ârâ or âr:â now tries to open a tar
file with compression before trying to open it without compression.
Otherwise it had 50% chance failed with ignore_zeros=True.
: The webbrowser module now supports Firefox 36+ and derived
browsers.  Based on patch by Oleg Broytman.
: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused
by representing the scale as float value internally in Tk.  tkinter.IntVar
now works if float value is set to underlying Tk variable.
: calendar.TextCalendar().prmonth() no longer prints a space at
the start of new line after printing a monthâs calendar.  Patch by Xiang
Zhang.
: The textwrap.TextWrapper class now honors non-breaking spaces.
Based on patch by Kaarle Ritvanen.
: os.fwalk() no longer fails on broken links.
: Fixed HList.header_exists() in tkinter.tix module by addin a
workaround to Tix library bug.
: shutil.make_archive() no longer add entry â./â to ZIP archive.
: Make webbrowser support Chrome on Mac OS X.
: Fix references leaked by pdb in the handling of SIGINT
handlers.
: Fixed writing ZIP files that starts not from the start of the
file.  Offsets in ZIP file now are relative to the start of the archive in
conforming to the specification.
: Fixed writing non-BMP characters with binary format in
plistlib.
: Fixed possible crashes when unpickle itertools objects from
incorrect pickle data.  Based on patch by John Leitch.
Fix possible integer overflows and crashes in the mmap module with unusual
usage patterns.
bpo-1703178: Fix the ability to pass the âlink-objects option to the
distutils build_ext command.
: Fixed calendar functions for extreme months: 0001-01 and
9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so
that they donât call itermonthdates() which can cause datetime.date
under/overflow.
: Fixed possible use after free in the decompress() methods of
the LZMADecompressor and BZ2Decompressor classes. Original patch by John
Leitch.
: Fixed possible crash in sqlite3.Connection.create_collation()
if pass invalid string-like object as a name.  Patch by Xiang Zhang.
: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.
Patch by Madison May.
: Fixed support of default root window in the tkinter.tix module.
: In the traceback module, restore the formatting of exception
messages like âException: Noneâ.  This fixes a regression introduced in
3.5a2.
: Allow false values to be used for msg parameter of subTest().
: Prevent memory leak in win32_ver().
Fix UnboundLocalError in socket._sendfile_use_sendfile.
: Check for ERROR_ACCESS_DENIED in Windows implementation of
os.stat().  Patch by Eryk Sun.
: Prevent codecs.escape_encode() from raising SystemError when an
empty bytestring is passed.
: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.
: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by
Gergely Imreh and Markus Holtermann.
: Fixed buffer overrun in binascii.b2a_qp() and
binascii.a2b_qp().
: m email.generator now replaces only  and/or  line
endings, per the RFC, instead of all unicode line endings.
: itertools.count() no longer rounds non-integer step in range
between 1.0 and 2.0 to 1.
: Update the lib2to3 grammar to handle the unpacking
generalizations added in 3.5.
: mailcap now respects the order of the lines in the mailcap
files (âfirst matchâ), as required by RFC 1542.  Patch by Michael Lazar.
: Validates persist parameter when opening MSI database
: xml.etree.ElementTree nows preserves whitespaces in attributes
(Patch by Duane Griffin.  Reviewed and approved by Stefan Behnel.)
: Fixed calculation of line length used for the base64 CTE in the
new email policies.
: Donât pass str(_charset) to MIMEText.set_payload(). Patch by
Claude Paroz.
: urllib now includes an   header among the default
headers. This makes the results of REST API requests more consistent and
predictable especially when proxy servers are involved.
lib2to3.pgen3.driver.load_grammar() now creates a stable cache file
between runs given the same Grammar.txt input regardless of the hash
randomization setting.
: Avoid zero-length memcpy() etc calls with null source pointers
in the âctypesâ and âarrayâ modules.
: Break email header lines  on the RFC specified CR and LF
characters, not on arbitrary unicode line breaks.  This also fixes a bug
in HTTP header parsing.
: Fix email iter_attachments incorrect mutation of payload list.
: Fix ssl moduleâs parsing of GEN_RID subject alternative name
fields in X.509 certs.
: Remove 3DES from ssl moduleâs default cipher list to counter
measure sweet32 attack (CVE 2016-2183).
: Add ChaCha20 Poly1305 to ssl moduleâs default cipher list.
(Required OpenSSL 1.1.0 or LibreSSL).
: Port ssl and hashlib module to OpenSSL 1.1.0.
Remove support for passing a file descriptor to os.access. It never worked
but previously didnât raise.
: Fix error when distutils encounters symlink.
: Fixed possible bugs when setting
sqlite3.Connection.isolation_level. Based on patch by Xiang Zhang.
: Fixed a crash in sqlite3.Connection.cursor() when a factory
creates not a cursor.  Patch by Xiang Zhang.
: Avoid spurious output on OS X with Gnu Readline.
: Restore deterministic behavior of random.Random().seed() for
string seeds using seeding version 1.  Allows sequences of calls to
random() to exactly match those obtained in Python 2. Patch by Nofar
Schnider.
: Fix a regression in Connection.commit().  Statements should not
be reset after a commit.
A new version of typing.py from https://github.com/python/typing:
Collection (only for 3.6) (). Add FrozenSet to __all__
(upstream #261). Fix crash in _get_type_vars() (upstream #259). Remove the
dict constraint in ForwardRef._eval_type (upstream #252).
: Fix unnormalised Fraction.__pow__ result in the case of
negative exponent and negative base.
: cursor.description is now available for queries using CTEs.
: posixpath.ismount now correctly recognizes mount points which
the user does not have permission to access.
: Correct some memory management errors server_hostname in
_ssl.wrap_socket().
: unittest.mock.create_autospec() now works properly for
subclasses of property() and other data descriptors.
In the curses module, raise an error if window.getstr() or window.instr()
is passed a negative value.
: Fix possible usage of uninitialized memory in
operator.methodcaller.
: Fix possible Py_DECREF on unowned object in _sre.
: Fix possible integer overflow in binascii.b2a_qp.
: Fix possible integer overflow in the _csv module for large
record lengths.
: Prevent HTTPoxy attack (CVE 2016-1000110). Ignore the
HTTP_PROXY variable when REQUEST_METHOD environment is set, which
indicates that the script is in CGI mode.
: Do not assume sched.h defines any SCHED_* constants.
: In the âzlibâ module, fix handling of large buffers (typically
4 GiB) when compressing and decompressing.  Previously, inputs were
limited to 4 GiB, and compression and decompression operations did not
properly handle results of 4 GiB.
: Release GIL in nt._isdir
: Fixed unpickling by the persistent ID with protocol 0. Original
patch by Alexandre Vassalotti.
: Avoid an unintentional reference cycle in email.feedparser.
: Fix error message for imp.find_module() to refer to âpathâ
instead of ânameâ. Patch by Lev Maximov.
: Fix SSL zero-length recv() calls to not block and not raise an
error about unclean EOF.
: Change time format returned by http.cookie.time2netscape,
confirming the netscape cookie format and making it consistent with
documentation.
: Fix activate.fish by removing mis-use of .
: Fixed tracing Tkinter variables: trace_vdelete() with wrong
mode no longer break tracing, trace_vinfo() now always returns a list of
pairs of strings, tracing in the âuâ mode now works.
Fix a scoping issue in importlib.util.LazyLoader which triggered an
UnboundLocalError when lazy-loading a module that was already put into
sys.modules.
: Fixed curses.ascii functions isblank(), iscntrl() and
ispunct().
: Some functions (compile() etc) accepted a filename argument
encoded as an iterable of integers. Now only strings and byte-like objects
are accepted.
: Prevents distutils failing on Windows when environment
variables contain non-ASCII characters
: Fixed possible leaks in the ctypes module.
: Got rid of bare excepts in the turtle module.  Original patch
by Jelle Zijlstra.
: When an exception is raised within the context being managed by
a contextlib.ExitStack() and one of the exit stack generators catches and
raises it in a chain, do not re-raise the original exception when exiting,
let the new chained one through.  This avoids the  bug described
in issue25782.
: Fixed ttk.TreeView selection operations with item idâs
containing spaces.
: Fix various functions in the âreadlineâ module to use the
locale encoding, and fix get_begidx() and get_endidx() to return code
point indexes.
: Add loop.connect_accepted_socket(). Patch by Jim Fulton.
: Improved behaviour of logging.handlers.QueueListener. Thanks to
Paulo Andrade and Petr Viktorin for the analysis and patch.
: Improves readability of multiprocessing error message.  Thanks
to Wojciech Walczak for patch.
: asyncio: Set TCP_NODELAY by default.
: Fix socket accept exhaustion during high TCP traffic. Patch by
Kevin Conway.
: Handle when SO_REUSEPORT isnât properly supported. Patch by
Seth Michael Larson.
: Inspect functools.partial in asyncio.Handle.__repr__. Patch by
iceboy.
: Fix slow pipes IO in asyncio. Patch by INADA Naoki.
: Fix callbacks race in asyncio.SelectorLoop.sock_connect.
: Fix selectors incorrectly retain invalid file descriptors.
Patch by Mark Williams.
: Refuse monitoring processes if the child watcher has no loop
attached. Patch by Vincent Michel.
: Raise RuntimeError when transportâs FD is used with add_reader,
add_writer, etc.
: Speedup asyncio.StreamReader.readexactly. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.
: Deprecate passing asyncio.Handles to run_in_executor.
: Fix asyncio to support formatting of non-python coroutines.
: Remove UNIX socket from FS before binding. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.
: Prohibit Tasks to await on themselves.
: Fix asyncio.Gather to refuse being cancelled once all children
are done. Patch by Johannes Ebke.
: Donât configure the number of workers for default threadpool
executor. Initial patch by Hans Lawrenz.
: Optimize loop.call_soon().
: Fix get_event_loop() return the current loop if called from
coroutines/callbacks.
: Fix inspect.isawaitable to always return bool Patch by Justin
Mayfield.
: Make loop methods reject socket kinds they do not support.
: Fix a refleak in functools.lru_cache.
: Fix asyncio.iscoroutinefunction to handle Mock objects.
: Reading a corrupt config file left the parser in an invalid
state.  Original patch by Florian HÃ¶ch.
: Fix SSL hanging if connection is closed before handshake
completed. (Patch by HoHo-Ho)

================================================================================

# Changelog - Library (Part 2)

: inspect.getframeinfo() now correctly shows the first line of a
context. Patch by Sam Breese.

: Offsets in a ZIP file created with extern file object and modes
âwâ and âxâ now are relative to the start of the file.

: Fixed recursion errors in large or resized
curses.textpad.Textbox.  Based on patch by Tycho Andersen.

: Fix weakrefs in the pure python version of
collections.OrderedDict move_to_end() method. Contributed by Andra
Bogildea.

: curses.ascii predicates now work correctly with negative
integers.

: old keys should not remove new values from WeakValueDictionary
when collecting from another thread.

: Remove editor artifacts from Tix.py.

: Fixed a crash when deallocate deep ElementTree.

: Fix bugs in WeakValueDictionary.setdefault() and
WeakValueDictionary.pop() when a GC collection happens in another thread.

: Fixed a crash in resource.prlimit() when pass a sequence that
doesnât own its elements as limits.

: multiprocessing.set_forkserver_preload() would crash the
forkserver process if a preloaded module instantiated some multiprocessing
objects such as locks.

: dbm.dumb now supports reading read-only files and no longer
writes the index file when it is not changed.

================================================================================

# Changelog - Library (Part 3)

: In ctypes, prevent a crash calling the from_buffer() and
from_buffer_copy() methods on abstract classes like Array.

: Fix crash in os.spawnv() with no elements in args

: Always raise ValueError for negative
compileall.compile_dir(workers=â¦) parameter, even when multithreading is
unavailable.

: Fixed possible crash in _io.TextIOWrapper deallocator when the
garbage collector is invoked in other thread.  Based on patch by Sebastian
Cufre.

: LZMA compressor and decompressor no longer raise exceptions if
given empty data twice.  Patch by Benjamin Fogle.

: Fixed segfault in cursesâs addch() with ncurses6.

: tarfile.open() with mode ârâ or âr:â now tries to open a tar
file with compression before trying to open it without compression.
Otherwise it had 50% chance failed with ignore_zeros=True.

: The webbrowser module now supports Firefox 36+ and derived
browsers.  Based on patch by Oleg Broytman.

: Fixed bugs in tkinter.ttk.LabeledScale and tkinter.Scale caused
by representing the scale as float value internally in Tk.  tkinter.IntVar
now works if float value is set to underlying Tk variable.

================================================================================

# Changelog - Library (Part 4)

: calendar.TextCalendar().prmonth() no longer prints a space at
the start of new line after printing a monthâs calendar.  Patch by Xiang
Zhang.

: The textwrap.TextWrapper class now honors non-breaking spaces.
Based on patch by Kaarle Ritvanen.

: os.fwalk() no longer fails on broken links.

: Fixed HList.header_exists() in tkinter.tix module by addin a
workaround to Tix library bug.

: shutil.make_archive() no longer add entry â./â to ZIP archive.

: Make webbrowser support Chrome on Mac OS X.

: Fix references leaked by pdb in the handling of SIGINT
handlers.

: Fixed writing ZIP files that starts not from the start of the
file.  Offsets in ZIP file now are relative to the start of the archive in
conforming to the specification.

: Fixed writing non-BMP characters with binary format in
plistlib.

: Fixed possible crashes when unpickle itertools objects from
incorrect pickle data.  Based on patch by John Leitch.

Fix possible integer overflows and crashes in the mmap module with unusual
usage patterns.

bpo-1703178: Fix the ability to pass the âlink-objects option to the
distutils build_ext command.

================================================================================

# Changelog - Library (Part 5)

: Fixed calendar functions for extreme months: 0001-01 and
9999-12. Methods itermonthdays() and itermonthdays2() are reimplemented so
that they donât call itermonthdates() which can cause datetime.date
under/overflow.

: Fixed possible use after free in the decompress() methods of
the LZMADecompressor and BZ2Decompressor classes. Original patch by John
Leitch.

: Fixed possible crash in sqlite3.Connection.create_collation()
if pass invalid string-like object as a name.  Patch by Xiang Zhang.

: Fix invalid exception handling in Lib/ctypes/macholib/dyld.py.
Patch by Madison May.

: Fixed support of default root window in the tkinter.tix module.

: In the traceback module, restore the formatting of exception
messages like âException: Noneâ.  This fixes a regression introduced in
3.5a2.

: Allow false values to be used for msg parameter of subTest().

: Prevent memory leak in win32_ver().

Fix UnboundLocalError in socket._sendfile_use_sendfile.

: Check for ERROR_ACCESS_DENIED in Windows implementation of
os.stat().  Patch by Eryk Sun.

: Prevent codecs.escape_encode() from raising SystemError when an
empty bytestring is passed.

: Get antigravity over HTTPS. Patch by Kaartic Sivaraam.

================================================================================

# Changelog - Library (Part 6)

: Enable WebSocket URL schemes in urllib.parse.urljoin. Patch by
Gergely Imreh and Markus Holtermann.

: Fixed buffer overrun in binascii.b2a_qp() and
binascii.a2b_qp().

: m email.generator now replaces only  and/or  line
endings, per the RFC, instead of all unicode line endings.

: itertools.count() no longer rounds non-integer step in range
between 1.0 and 2.0 to 1.

: Update the lib2to3 grammar to handle the unpacking
generalizations added in 3.5.

: mailcap now respects the order of the lines in the mailcap
files (âfirst matchâ), as required by RFC 1542.  Patch by Michael Lazar.

: Validates persist parameter when opening MSI database

: xml.etree.ElementTree nows preserves whitespaces in attributes
(Patch by Duane Griffin.  Reviewed and approved by Stefan Behnel.)

: Fixed calculation of line length used for the base64 CTE in the
new email policies.

: Donât pass str(_charset) to MIMEText.set_payload(). Patch by
Claude Paroz.

: urllib now includes an   header among the default
headers. This makes the results of REST API requests more consistent and
predictable especially when proxy servers are involved.

================================================================================

# Changelog - Library (Part 7)

lib2to3.pgen3.driver.load_grammar() now creates a stable cache file
between runs given the same Grammar.txt input regardless of the hash
randomization setting.

: Avoid zero-length memcpy() etc calls with null source pointers
in the âctypesâ and âarrayâ modules.

: Break email header lines  on the RFC specified CR and LF
characters, not on arbitrary unicode line breaks.  This also fixes a bug
in HTTP header parsing.

: Fix email iter_attachments incorrect mutation of payload list.

: Fix ssl moduleâs parsing of GEN_RID subject alternative name
fields in X.509 certs.

: Remove 3DES from ssl moduleâs default cipher list to counter
measure sweet32 attack (CVE 2016-2183).

: Add ChaCha20 Poly1305 to ssl moduleâs default cipher list.
(Required OpenSSL 1.1.0 or LibreSSL).

: Port ssl and hashlib module to OpenSSL 1.1.0.

Remove support for passing a file descriptor to os.access. It never worked
but previously didnât raise.

: Fix error when distutils encounters symlink.

: Fixed possible bugs when setting
sqlite3.Connection.isolation_level. Based on patch by Xiang Zhang.

: Fixed a crash in sqlite3.Connection.cursor() when a factory
creates not a cursor.  Patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 8)

: Avoid spurious output on OS X with Gnu Readline.

: Restore deterministic behavior of random.Random().seed() for
string seeds using seeding version 1.  Allows sequences of calls to
random() to exactly match those obtained in Python 2. Patch by Nofar
Schnider.

: Fix a regression in Connection.commit().  Statements should not
be reset after a commit.

A new version of typing.py from https://github.com/python/typing:
Collection (only for 3.6) (). Add FrozenSet to __all__
(upstream #261). Fix crash in _get_type_vars() (upstream #259). Remove the
dict constraint in ForwardRef._eval_type (upstream #252).

: Fix unnormalised Fraction.__pow__ result in the case of
negative exponent and negative base.

: cursor.description is now available for queries using CTEs.

: posixpath.ismount now correctly recognizes mount points which
the user does not have permission to access.

: Correct some memory management errors server_hostname in
_ssl.wrap_socket().

: unittest.mock.create_autospec() now works properly for
subclasses of property() and other data descriptors.

In the curses module, raise an error if window.getstr() or window.instr()
is passed a negative value.

================================================================================

# Changelog - Library (Part 9)

: Fix possible usage of uninitialized memory in
operator.methodcaller.

: Fix possible Py_DECREF on unowned object in _sre.

: Fix possible integer overflow in binascii.b2a_qp.

: Fix possible integer overflow in the _csv module for large
record lengths.

: Prevent HTTPoxy attack (CVE 2016-1000110). Ignore the
HTTP_PROXY variable when REQUEST_METHOD environment is set, which
indicates that the script is in CGI mode.

: Do not assume sched.h defines any SCHED_* constants.

: In the âzlibâ module, fix handling of large buffers (typically
4 GiB) when compressing and decompressing.  Previously, inputs were
limited to 4 GiB, and compression and decompression operations did not
properly handle results of 4 GiB.

: Release GIL in nt._isdir

: Fixed unpickling by the persistent ID with protocol 0. Original
patch by Alexandre Vassalotti.

: Avoid an unintentional reference cycle in email.feedparser.

: Fix error message for imp.find_module() to refer to âpathâ
instead of ânameâ. Patch by Lev Maximov.

: Fix SSL zero-length recv() calls to not block and not raise an
error about unclean EOF.

================================================================================

# Changelog - Library (Part 10)

: Change time format returned by http.cookie.time2netscape,
confirming the netscape cookie format and making it consistent with
documentation.

: Fix activate.fish by removing mis-use of .

: Fixed tracing Tkinter variables: trace_vdelete() with wrong
mode no longer break tracing, trace_vinfo() now always returns a list of
pairs of strings, tracing in the âuâ mode now works.

Fix a scoping issue in importlib.util.LazyLoader which triggered an
UnboundLocalError when lazy-loading a module that was already put into
sys.modules.

: Fixed curses.ascii functions isblank(), iscntrl() and
ispunct().

: Some functions (compile() etc) accepted a filename argument
encoded as an iterable of integers. Now only strings and byte-like objects
are accepted.

: Prevents distutils failing on Windows when environment
variables contain non-ASCII characters

: Fixed possible leaks in the ctypes module.

: Got rid of bare excepts in the turtle module.  Original patch
by Jelle Zijlstra.

================================================================================

# Changelog - Library (Part 11)

: When an exception is raised within the context being managed by
a contextlib.ExitStack() and one of the exit stack generators catches and
raises it in a chain, do not re-raise the original exception when exiting,
let the new chained one through.  This avoids the  bug described
in issue25782.

: Fixed ttk.TreeView selection operations with item idâs
containing spaces.

: Fix various functions in the âreadlineâ module to use the
locale encoding, and fix get_begidx() and get_endidx() to return code
point indexes.

: Add loop.connect_accepted_socket(). Patch by Jim Fulton.

: Improved behaviour of logging.handlers.QueueListener. Thanks to
Paulo Andrade and Petr Viktorin for the analysis and patch.

: Improves readability of multiprocessing error message.  Thanks
to Wojciech Walczak for patch.

: asyncio: Set TCP_NODELAY by default.

: Fix socket accept exhaustion during high TCP traffic. Patch by
Kevin Conway.

: Handle when SO_REUSEPORT isnât properly supported. Patch by
Seth Michael Larson.

: Inspect functools.partial in asyncio.Handle.__repr__. Patch by
iceboy.

: Fix slow pipes IO in asyncio. Patch by INADA Naoki.

: Fix callbacks race in asyncio.SelectorLoop.sock_connect.

================================================================================

# Changelog - Library (Part 12)

: Fix selectors incorrectly retain invalid file descriptors.
Patch by Mark Williams.

: Refuse monitoring processes if the child watcher has no loop
attached. Patch by Vincent Michel.

: Raise RuntimeError when transportâs FD is used with add_reader,
add_writer, etc.

: Speedup asyncio.StreamReader.readexactly. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.

: Deprecate passing asyncio.Handles to run_in_executor.

: Fix asyncio to support formatting of non-python coroutines.

: Remove UNIX socket from FS before binding. Patch by ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³
ÐÐ°ÑÐº.

: Prohibit Tasks to await on themselves.

: Fix asyncio.Gather to refuse being cancelled once all children
are done. Patch by Johannes Ebke.

: Donât configure the number of workers for default threadpool
executor. Initial patch by Hans Lawrenz.

: Optimize loop.call_soon().

: Fix get_event_loop() return the current loop if called from
coroutines/callbacks.

: Fix inspect.isawaitable to always return bool Patch by Justin
Mayfield.

: Make loop methods reject socket kinds they do not support.

: Fix a refleak in functools.lru_cache.

: Fix asyncio.iscoroutinefunction to handle Mock objects.

================================================================================

# Changelog - Library (Part 13)

: Reading a corrupt config file left the parser in an invalid
state.  Original patch by Florian HÃ¶ch.

: Fix SSL hanging if connection is closed before handshake
completed. (Patch by HoHo-Ho)

================================================================================

# Changelog - IDLE (Part 1)

List:
: Add âinterrupt executionâ (^C) to Shell menu. Patch by Roger
Serwy, updated by Bayard Randel.
: Stop IDLE tests from âflashingâ gui widgets on the screen.
Add version to title of IDLE help window.
: In section on IDLE â console differences, mention that using
exec means that __builtins__ is defined for each statement.
: text_textview and test_autocomplete now pass when re-run in the
same process.  This occurs when test_idle fails when run with the -w
option but without -jn.  Fix warning from test_config.
: IDLE no longer runs buggy code because of its tkinter imports.
Users must include the same imports required to run directly in Python.
: add line counter and crc to IDLE configHandler test dump.
: Allow non-ascii chars in IDLE NEWS.txt, for contributor names.
: IDLE: Cleanly delete custom themes and key bindings.
Previously, when IDLE was started from a console or by import, a cascade
of warnings was emitted. Patch by Serhiy Storchaka.

: Add âinterrupt executionâ (^C) to Shell menu. Patch by Roger
Serwy, updated by Bayard Randel.

: Stop IDLE tests from âflashingâ gui widgets on the screen.

Add version to title of IDLE help window.

================================================================================

# Changelog - IDLE (Part 2)

: In section on IDLE â console differences, mention that using
exec means that __builtins__ is defined for each statement.

: text_textview and test_autocomplete now pass when re-run in the
same process.  This occurs when test_idle fails when run with the -w
option but without -jn.  Fix warning from test_config.

: IDLE no longer runs buggy code because of its tkinter imports.
Users must include the same imports required to run directly in Python.

: add line counter and crc to IDLE configHandler test dump.

: Allow non-ascii chars in IDLE NEWS.txt, for contributor names.

: IDLE: Cleanly delete custom themes and key bindings.
Previously, when IDLE was started from a console or by import, a cascade
of warnings was emitted. Patch by Serhiy Storchaka.

================================================================================

# Changelog - C API

List:
: PyUnicode_CompareWithASCIIString() now never raises exceptions.
: PyUnicode_FSDecoder() accepted a filename argument encoded as
an iterable of integers. Now only strings and bytes-like objects are
accepted.

: PyUnicode_CompareWithASCIIString() now never raises exceptions.

: PyUnicode_FSDecoder() accepted a filename argument encoded as
an iterable of integers. Now only strings and bytes-like objects are
accepted.

================================================================================

# Changelog - Documentation

List:
: Documented command-line interface of zipfile.

: Documented command-line interface of zipfile.

================================================================================

# Changelog - Tests

List:
: Disallow -j0 to be combined with -T/-l/-M in regrtest command
line arguments.
: Now test.support.rmtree is able to remove unwritable or
unreadable directories.
: Various caches now are cleared before running every test file.
: regrtest: fix the parser of command line arguments.
: Call gc.collect() before checking each test for âdangling
threadsâ, since the dangling threads are weak references.
: In test_pyexpat, avoid testing an error message detail that
changed in Expat 2.2.0.

: Disallow -j0 to be combined with -T/-l/-M in regrtest command
line arguments.

: Now test.support.rmtree is able to remove unwritable or
unreadable directories.

: Various caches now are cleared before running every test file.

: regrtest: fix the parser of command line arguments.

: Call gc.collect() before checking each test for âdangling
threadsâ, since the dangling threads are weak references.

: In test_pyexpat, avoid testing an error message detail that
changed in Expat 2.2.0.

================================================================================

# Changelog - Tools/Demos

List:
: Get Tools/scripts/fixcid.py working with Python 3 and the
current âreâ module, avoid invalid Python backslash escapes, and fix a bug
parsing escaped C quote signs.
: Fixed the type of the first argument of module-level functions
generated by Argument Clinic.  Patch by Petr Viktorin.
: Fixed Tools/importbench/importbench.py.

: Get Tools/scripts/fixcid.py working with Python 3 and the
current âreâ module, avoid invalid Python backslash escapes, and fix a bug
parsing escaped C quote signs.

: Fixed the type of the first argument of module-level functions
generated by Argument Clinic.  Patch by Petr Viktorin.

: Fixed Tools/importbench/importbench.py.

================================================================================

# Changelog - Windows

List:
: Improvements to help manuals on Windows.
: launcher.msi has different product codes between 32-bit and
64-bit
: Ensures TargetDir is set before continuing with custom install.
: Adds a shell extension to the launcher so that drag and drop
works correctly.
: Enabled proper Windows styles in python[w].exe manifest.

: Improvements to help manuals on Windows.

: launcher.msi has different product codes between 32-bit and
64-bit

: Ensures TargetDir is set before continuing with custom install.

: Adds a shell extension to the launcher so that drag and drop
works correctly.

: Enabled proper Windows styles in python[w].exe manifest.

================================================================================

# Changelog - Build (Part 1)

List:
: Removes hard dependency on hg.exe from PCBuild/build.bat
: Added missed names to PC/python3.def.
: Fix out-of-tree building on AIX.  Patch by Tristan Carel and
Michael Haubenwallner.
: Rename âwith-optimiations to âenable-optimizations.
: Fix missing extensions modules when cross compiling.
: Update Windows build and OS X installers to use OpenSSL 1.0.2j.
: Fixed build with Estonian locale (python-config and distclean
targets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.
: setup.py now detects system libffi with multiarch wrapper.
: Fix the logic that searches build directories for generated
include files when building outside the source tree.
: Remove redundant include search directory option for building
outside the source tree.
: Fix clean target in freeze makefile (patch by Lisa Roach)
: Update message in validate_ucrtbase.py
: Cause lack of llvm-profdata tool when using clang as required
for PGO linking to be a configure time error rather than make time when
âwith-optimizations is enabled.  Also improve our ability to find the
llvm-profdata tool on MacOS and some Linuxes.
: The profile-opt build now applies PGO to the built-in modules.
: Add the âwith-optimizations configure flag.
: Suppress spurious build warnings when updating importlibâs
bootstrap files. Patch by Xiang Zhang
: Correct the references to Modules/python.exp and ld_so_aix,
which are required on AIX.  This updates references to an installation
path that was changed in 3.2a4, and undoes changed references to the build
tree that were made in 3.5.0a1.
: CPP invocation in configure must use CPPFLAGS. Patch by Chi
Hsuan Yen.
: The configure script now inserts comments into the makefile to
prevent the pgen and _freeze_importlib executables from being
cross-compiled.
: Set PYTHON_FOR_GEN in configure as the Python program to be
used for file generation during the build.
: Avoid C++ compilation errors on FreeBSD and OS X. Also update
FreedBSD version checks for the original ctype UTF-8 workaround.
: Prevent missing âgetentropyâ declaration warning on macOS.
Patch by Gareth Rees.

================================================================================

# Changelog - Build (Part 2)

: Removes hard dependency on hg.exe from PCBuild/build.bat

: Added missed names to PC/python3.def.

: Fix out-of-tree building on AIX.  Patch by Tristan Carel and
Michael Haubenwallner.

: Rename âwith-optimiations to âenable-optimizations.

: Fix missing extensions modules when cross compiling.

: Update Windows build and OS X installers to use OpenSSL 1.0.2j.

: Fixed build with Estonian locale (python-config and distclean
targets in Makefile).  Patch by Arfrever Frehtes Taifersar Arahesis.

: setup.py now detects system libffi with multiarch wrapper.

: Fix the logic that searches build directories for generated
include files when building outside the source tree.

: Remove redundant include search directory option for building
outside the source tree.

: Fix clean target in freeze makefile (patch by Lisa Roach)

: Update message in validate_ucrtbase.py

: Cause lack of llvm-profdata tool when using clang as required
for PGO linking to be a configure time error rather than make time when
âwith-optimizations is enabled.  Also improve our ability to find the
llvm-profdata tool on MacOS and some Linuxes.

: The profile-opt build now applies PGO to the built-in modules.

================================================================================

# Changelog - Build (Part 3)

: Add the âwith-optimizations configure flag.

: Suppress spurious build warnings when updating importlibâs
bootstrap files. Patch by Xiang Zhang

: Correct the references to Modules/python.exp and ld_so_aix,
which are required on AIX.  This updates references to an installation
path that was changed in 3.2a4, and undoes changed references to the build
tree that were made in 3.5.0a1.

: CPP invocation in configure must use CPPFLAGS. Patch by Chi
Hsuan Yen.

: The configure script now inserts comments into the makefile to
prevent the pgen and _freeze_importlib executables from being
cross-compiled.

: Set PYTHON_FOR_GEN in configure as the Python program to be
used for file generation during the build.

: Avoid C++ compilation errors on FreeBSD and OS X. Also update
FreedBSD version checks for the original ctype UTF-8 workaround.

: Prevent missing âgetentropyâ declaration warning on macOS.
Patch by Gareth Rees.

================================================================================

# Changelog - Core and Builtins

List:
: Update Windows builds to use OpenSSL 1.0.2h.

: Update Windows builds to use OpenSSL 1.0.2h.

================================================================================

# Changelog - Tests

List:
: Ubuntuâs openssl OP_NO_SSLv3 is forced on by default; fix test.

: Ubuntuâs openssl OP_NO_SSLv3 is forced on by default; fix test.

================================================================================

# Changelog - IDLE

List:
: Allow non-ascii in idlelib/NEWS.txt - minimal part for 3.5.2.

: Allow non-ascii in idlelib/NEWS.txt - minimal part for 3.5.2.

================================================================================

# Changelog - Security (Part 1)

List:
: Update expat to 2.1.1, fixes CVE 2015-1283.
Fix TLS stripping vulnerability in smtplib, CVE 2016-0772. Reported by
Team Oststrom.
: On Linux, os.urandom() now calls getrandom() with
GRND_NONBLOCK to fall back on reading /dev/urandom if the urandom
entropy pool is not initialized yet. Patch written by Colm Buckley.
: Fix directory traversal vulnerability with http.server on
Windows.  This fixes a regression that was introduced in 3.3.4rc1 and
3.4.0rc1.  Based on patch by Philipp Hagemeister.
: ssl.py _load_windows_store_certs fails if windows cert store is
empty. Patch by Baji.
: On Windows open the cert store readonly in
ssl.enum_certificates.

: Update expat to 2.1.1, fixes CVE 2015-1283.

Fix TLS stripping vulnerability in smtplib, CVE 2016-0772. Reported by
Team Oststrom.

: On Linux, os.urandom() now calls getrandom() with
GRND_NONBLOCK to fall back on reading /dev/urandom if the urandom
entropy pool is not initialized yet. Patch written by Colm Buckley.

: Fix directory traversal vulnerability with http.server on
Windows.  This fixes a regression that was introduced in 3.3.4rc1 and
3.4.0rc1.  Based on patch by Philipp Hagemeister.

================================================================================

# Changelog - Security (Part 2)

: ssl.py _load_windows_store_certs fails if windows cert store is
empty. Patch by Baji.

: On Windows open the cert store readonly in
ssl.enum_certificates.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed SystemError if a custom opener (for open()) returns a
negative number without setting an exception.
: Fixed TypeError when frame.f_trace is set to None. Patch by
Xavier de Gaye.
: Fixed possible refleaks in failing Py_BuildValue() with the âNâ
format unit.
: Fix possible refleak when creating a function with annotations.
: Fixed bytearray.remove() for values greater than 127.  Patch by
Joe Jevnik.
: int.from_bytes() no longer bypasses constructors for
subclasses.
: gc.get_objects() no longer contains a broken tuple with NULL
pointer.
: Use RawConfigParser for .pypirc parsing, removing support for
interpolation unintentionally added with move to Python 3. Behavior no
longer does any interpolation in .pypirc files, matching behavior in
Python 2.7 and Setuptools 19.0.
: Make the builtin slice type support cycle collection.
: super.__init__ no longer leaks memory if called multiple times.
NOTE: A direct call of super.__init__ is not endorsed!
: PYTHONIOENCODING now has priority over locale in setting the
error handler for stdin and stdout.
: Fixed crash on iterating exhausting iterators. Affected classes
are generic sequence iterators, iterators of str, bytes, bytearray, list,
tuple, set, frozenset, dict, OrderedDict, corresponding views and
os.scandir() iterator.
: If coding cookie is specified multiple times on a line in
Python source code file, only the first one is taken to account.
: Fix str.translate() when string is ASCII and first replacements
removes character, but next replacement uses a non-ASCII character or a
string longer than 1 character. Regression introduced in Python 3.5.0.
: Ensure exception reports from PyErr_Display() and
PyErr_WriteUnraisable() are sensible even when formatting them produces
secondary errors.  This affects the reports produced by
sys.__excepthook__() and when __del__() raises an exception.
: Correct behavior to reject comma as a legal character for
cookie names.
: Avoid masking the original TypeError exception when using star
() unpacking in function calls.  Based on patch by Hagen FÃ¼rstenau
and Daniel Urban.
: Fix the doc comment for FileFinder.find_spec().
: Add a new private _PyThreadState_UncheckedGet() function to get
the current Python thread state, but donât issue a fatal error if it is
NULL. This new function must be used instead of accessing directly the
_PyThreadState_Current variable.  The variable is no more exposed since
Python 3.5.1 to hide the exact implementation of atomic C types, to avoid
compiler issues.
: Deque.insert() gave odd results for bounded deques that had
reached their maximum size.  Now an IndexError will be raised when
attempting to insert into a full deque.
: When compiling code, donât merge constants if they are equal
but have a different types. For example,      
 is now correctly compiled to two different functions: 
returns  () and  returns  (), even if
 and  are equal.
: [UPDATE] Comment out the one of the pickleability tests in
_PyObject_GetState() due to regressions observed in Cython-based projects.
: Disallowed null characters in the type name.
: Fix segfault when an invalid nonlocal statement binds a name
starting with two underscores.
: Instances of extension types with a state that arenât
subclasses of list or dict and havenât implemented any pickle-related
methods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or
__getstate__), can no longer be pickled.  Including memoryview.
: Massive replacing unsafe attribute setting code with special
macro Py_SETREF.
: Special method __bytes__() now works in str subclasses.
: __sizeof__ methods of builtin types now use dynamic basic size.
This allows sys.getsize() to work correctly with their subclasses with
__slots__ defined.
: Fixed problem with in-place string concatenation and utf-8
cache.
: Mention  in the importlib docs.
: Fixed crash in object.__reduce__() if slot name is freed inside
__getattr__.
: Fixed crash on converting objects with special methods
__bytes__, __trunc__, and __float__ returning instances of subclasses of
bytes, int, and float to subclasses of bytes, int, and float
correspondingly.
: Fix semantic bugs when using binary operators with dictionary
views and tuples.
: Fix possible integer overflow and heap corruption in
zipimporter.get_data().
: Fix TAB key behaviour in REPL with readline.
: Raise a RuntimeError when a coroutine object is awaited more
than once.
: Update the __aiter__ protocol: instead of returning an
awaitable that resolves to an asynchronous iterator, the asynchronous
iterator should be returned directly.  Doing the former will trigger a
PendingDeprecationWarning.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed SystemError if a custom opener (for open()) returns a
negative number without setting an exception.

: Fixed TypeError when frame.f_trace is set to None. Patch by
Xavier de Gaye.

: Fixed possible refleaks in failing Py_BuildValue() with the âNâ
format unit.

: Fix possible refleak when creating a function with annotations.

: Fixed bytearray.remove() for values greater than 127.  Patch by
Joe Jevnik.

: int.from_bytes() no longer bypasses constructors for
subclasses.

: gc.get_objects() no longer contains a broken tuple with NULL
pointer.

: Use RawConfigParser for .pypirc parsing, removing support for
interpolation unintentionally added with move to Python 3. Behavior no
longer does any interpolation in .pypirc files, matching behavior in
Python 2.7 and Setuptools 19.0.

: Make the builtin slice type support cycle collection.

: super.__init__ no longer leaks memory if called multiple times.
NOTE: A direct call of super.__init__ is not endorsed!

: PYTHONIOENCODING now has priority over locale in setting the
error handler for stdin and stdout.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fixed crash on iterating exhausting iterators. Affected classes
are generic sequence iterators, iterators of str, bytes, bytearray, list,
tuple, set, frozenset, dict, OrderedDict, corresponding views and
os.scandir() iterator.

: If coding cookie is specified multiple times on a line in
Python source code file, only the first one is taken to account.

: Fix str.translate() when string is ASCII and first replacements
removes character, but next replacement uses a non-ASCII character or a
string longer than 1 character. Regression introduced in Python 3.5.0.

: Ensure exception reports from PyErr_Display() and
PyErr_WriteUnraisable() are sensible even when formatting them produces
secondary errors.  This affects the reports produced by
sys.__excepthook__() and when __del__() raises an exception.

: Correct behavior to reject comma as a legal character for
cookie names.

: Avoid masking the original TypeError exception when using star
() unpacking in function calls.  Based on patch by Hagen FÃ¼rstenau
and Daniel Urban.

: Fix the doc comment for FileFinder.find_spec().

================================================================================

# Changelog - Core and Builtins (Part 4)

: Add a new private _PyThreadState_UncheckedGet() function to get
the current Python thread state, but donât issue a fatal error if it is
NULL. This new function must be used instead of accessing directly the
_PyThreadState_Current variable.  The variable is no more exposed since
Python 3.5.1 to hide the exact implementation of atomic C types, to avoid
compiler issues.

: Deque.insert() gave odd results for bounded deques that had
reached their maximum size.  Now an IndexError will be raised when
attempting to insert into a full deque.

: When compiling code, donât merge constants if they are equal
but have a different types. For example,      
 is now correctly compiled to two different functions: 
returns  () and  returns  (), even if
 and  are equal.

: [UPDATE] Comment out the one of the pickleability tests in
_PyObject_GetState() due to regressions observed in Cython-based projects.

: Disallowed null characters in the type name.

: Fix segfault when an invalid nonlocal statement binds a name
starting with two underscores.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Instances of extension types with a state that arenât
subclasses of list or dict and havenât implemented any pickle-related
methods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or
__getstate__), can no longer be pickled.  Including memoryview.

: Massive replacing unsafe attribute setting code with special
macro Py_SETREF.

: Special method __bytes__() now works in str subclasses.

: __sizeof__ methods of builtin types now use dynamic basic size.
This allows sys.getsize() to work correctly with their subclasses with
__slots__ defined.

: Fixed problem with in-place string concatenation and utf-8
cache.

: Mention  in the importlib docs.

: Fixed crash in object.__reduce__() if slot name is freed inside
__getattr__.

: Fixed crash on converting objects with special methods
__bytes__, __trunc__, and __float__ returning instances of subclasses of
bytes, int, and float to subclasses of bytes, int, and float
correspondingly.

: Fix semantic bugs when using binary operators with dictionary
views and tuples.

: Fix possible integer overflow and heap corruption in
zipimporter.get_data().

: Fix TAB key behaviour in REPL with readline.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Raise a RuntimeError when a coroutine object is awaited more
than once.

: Update the __aiter__ protocol: instead of returning an
awaitable that resolves to an asynchronous iterator, the asynchronous
iterator should be returned directly.  Doing the former will trigger a
PendingDeprecationWarning.

================================================================================

# Changelog - Library (Part 1)

List:
: Implement missing IPv4Address.is_global property.  It was
documented since 07a5610bae9d.  Initial patch by Roger Luethi.
: distutils register command now decodes HTTP responses
correctly.  Initial patch by ingrid.
A new version of typing.py provides several new classes and features:
@overload outside stubs, Reversible, DefaultDict, Text, ContextManager,
Type[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some
of the new features are not yet implemented in mypy or other static
analyzers). Also classes for  (Awaitable, AsyncIterable,
AsyncIterator) have been added (in fact they made it into 3.5.1 but were
never mentioned).
: Stop http.server.BaseHTTPRequestHandler.send_error() from
sending a message body for 205 Reset Content.  Also, donât send Content
header fields in responses that donât have a body.  Patch by Susumu
Koshiba.
: Fix the âplatformâ module to tolerate when sys.version contains
truncated build information.
: In the zlib module, allow decompressing raw Deflate streams
with a predefined zdict.  Based on patch by Xiang Zhang.
: Fix wsgiref.simple_server.WSGIRequestHandler to completely
write data to the client.  Previously it could do partial writes and
truncate data.  Also, wsgiref.handler.ServerHandler can now handle stdout
doing partial writes, but this is deprecated.
: Add  to .  Patch by Emanuel Barry.
: subprocess.Popen.communicate now correctly ignores
BrokenPipeError when the child process dies before .communicate() is
called in more/all circumstances.
: distutils.upload now correctly handles HTTPError. Initial patch
by Claudiu Popa.
: Fix SSLContext._load_windows_store_certs fails with
PermissionError
: Avoid creating duplicate filters when using filterwarnings and
simplefilter. Based on patch by Alex Shkop.
: Fix os.set_inheritable() on Android, ioctl() is blocked by
SELinux and fails with EACCESS. The function now falls back to fcntl().
Patch written by MichaÅ Bednarski.
: Fix infinite recursion using typing.py.  Thanks to Kalle Tuure!
: Fix urllib.request redirect handling when the target only has a
query string.  Original fix by JÃ¡n Janech.
: The âurllib.requestâ module now percent-encodes non-ASCII bytes
found in redirect target URLs.  Some servers send Location header fields
with non-ASCII bytes, but âhttp.clientâ requires the request target to be
ASCII-encodable, otherwise a UnicodeEncodeError is raised.  Based on patch
by Christian Heimes.
: Honor debuglevel flag in urllib.request.HTTPHandler. Patch
contributed by Chi Hsuan Yen.
: In the subprocess module, allow stderr to be redirected to
stdout even when stdout is not redirected.  Patch by Akira Li.
: mock_open âfilesâ no longer error on readline at end of file.
Patch from Yolanda Robla.
: Fixed leaking a userptr in curses panel destructor.
: Removed unnecessary, and ignored, call to sum of squares helper
in statistics.pvariance.
: The modulefinder module now supports extended opcode arguments.
: Fixed crashes related to directly created instances of types in
_tkinter and curses.panel modules.
: weakref.ref() no longer silently ignores keyword arguments.
Patch by Georg Brandl.
: xmlrpc now raises ResponseError on unsupported type tags
instead of silently return incorrect result.
: Fixed the comparison of plistlib.Data with other types.
: Fix an uninitialized variable in ctypes.util. The bug only
occurs on SunOS when the ctypes implementation searches for the 
program. Patch by Xiang Zhang.  Tested on SunOS by Kees Bos.
: In urllib.request, change the proxy bypass host checking
against no_proxy to be case-insensitive, and to not match unrelated host
names that happen to have a bypassed hostname as a suffix.  Patch by Xiang
Zhang.
: recursive_repr() now sets __qualname__ of wrapper.  Patch by
Xiang Zhang.
: urllib.request will prefer lower_case proxy environment
variables over UPPER_CASE or Mixed_Case ones. Patch contributed by
Hans-Peter Jansen.
: assertSequenceEqual() now correctly outputs non-stringified
differing items (like bytes in the -b mode).  This affects
assertListEqual() and assertTupleEqual().
: Remove âwill be removed in Python 3.7â from deprecation
messages of platform.dist() and platform.linux_distribution(). Patch by
Kumaripaba Miyurusara Athukorala.
: itemgetter, attrgetter and methodcaller objects no longer
silently ignore keyword arguments.
: Disassembling a class now disassembles class and static
methods. Patch by Xiang Zhang.
: Fix error handling in shutil.get_terminal_size(), catch
AttributeError instead of . Patch written by
Emanuel Barry.
: tarfileâs ustar and gnu formats now correctly calculate name
and link field limits for multibyte character encodings like utf-8.
: Stop encoding Latin-1-ized WSGI paths with UTF-8.  Patch by
Anthony Sottile.
: Fix os.urandom() on Solaris 11.3 and newer when reading
more than 1,024 bytes: call getrandom() multiple times with a limit of
1024 bytes per call.
: Add .webm to mimetypes.types_map.  Patch by Giampaolo Rodolaâ.
: Add .csv to mimetypes.types_map.  Patch by Geoff Wilson.
: Fixed Y2038 problem in loading binary PLists.
: Handle terminal resizing with Readline 6.3+ by installing our
own SIGWINCH handler.  Patch by Eric Price.
: In http.server, respond with â413 Request header fields too
largeâ if there are too many header fields to parse, rather than killing
the connection and raising an unhandled exception.  Patch by Xiang Zhang.
: Change BufferedReader.writable() and BufferedWriter.readable()
to always return False.
: Fix a regression in mock.MagicMock. _Call is a subclass of
tuple (changeset 3603bae63c13 only works for classes) so we need to
implement __ne__ ourselves.  Patch by Andrew Plummer.
: Raise ValueError rather than SystemError when a negative length
is passed to SSLSocket.recv() or read().
: Fix SSL recv(0) and read(0) methods to return zero bytes
instead of up to 1024.
: Fixed a bug in datetime.astimezone() method.
: warnings.formatwarning() now catches exceptions on
linecache.getline(...) to be able to log ResourceWarning
emitted late during the Python shutdown process.
: Ctrl+C during Readline history search now cancels the search
mode when compiled with Readline 7.
: Avoid potential ValueError in BaseHandler.start_response.
Initial patch by Peter Inglesby.
: Fix pyclbr.readmodule() and pyclbr.readmodule_ex()
to support importing packages.
: Account for remaining Content-Length in HTTPResponse.readline()
and read1(). Based on patch by Silent Ghost. Also document that
HTTPResponse now supports these methods.
: Handle sockets in directories unittest discovery is scanning.
Patch from Victor van den Elzen.
: cookiejar.http2time() now returns None if year is higher than
datetime.MAXYEAR.
: Fixes platform module detection of Windows Server
: Fixed parsing time in week 0 before Jan 1.  Original patch by
TamÃ¡s Bence Gedai.
: Invoking Path.owner() and Path.group() on Windows now raise
NotImplementedError instead of ImportError.
: Fixed the keys() method for Canvas and Scrollbar widgets.
: Got rid of excessive buffering in the fileinput module. The
bufsize parameter is no longer used.
: Fix UnboundLocalError in
AbstractDigestAuthHandler.get_algorithm_impls. Initial patch by Mathieu
Dupuy.
: Fixed pickling and copying the accumulate() iterator with total
is None.
: Fixed debugging output for regular expressions with the (?x)
flag.
: Fixed the subnets() methods in IP network classes for the case
when resulting prefix length is equal to maximal prefix length. Based on
patch by Xiang Zhang.
: Remove the file if the internal open() call in
NamedTemporaryFile() fails. Patch by Silent Ghost.
: Fix XML-RPC client to retry when the server shuts down a
persistent connection.  This was a regression related to the new
http.client.RemoteDisconnected exception in 3.5.0a4.
: Leading  is optional now in base64.a85decode() with
adobe=True.  Patch by Swati Jaiswal.
: Remove an invalid type check in importlib.util.LazyLoader.
: importlib.__import__() raises SystemError like
builtins.__import__() when  is specified but without an
accompanying package specified.
: In the âsocketserverâ module, shut down the request (closing
the connected socket) when verify_request() returns false.  Patch by Aviv
Palivoda.
: os.walk() no longer uses FDs proportional to the tree depth.
: The os.scandir() iterator now closes file descriptor not only
when the iteration is finished, but when it was failed with error.
: Restored support of bytes paths in os.walk() on Windows.
: Add UTF-8 suggestion to error message when posting a
non-Latin-1 string with http.client.
: Reset FancyURLopenerâs redirect counter even if there is an
exception. Based on patches by Brian Brazil and Daniel Rocco.
: Fixed a crash when unpickle the functools.partial object with
wrong state. Fixed a leak in failed functools.partial constructor. âargsâ
and âkeywordsâ attributes of functools.partial have now always types tuple
and dict correspondingly.
: copy.deepcopy() now correctly copies range() objects with
non-atomic attributes.
: Path.glob() now raises a ValueError if itâs called with an
invalid pattern. Patch by Thomas Nyberg.
: Fixed possible integer overflows in zipimport.
: On Windows, getnameinfo(), gethostbyaddr() and
gethostbyname_ex() functions of the socket module now decode the hostname
from the ANSI code page rather than UTF-8.
: xmlrpc now works with strings not encodable with used non-UTF-8
encoding.
: Garbage collector now breaks reference loops with OrderedDict.
: Fixed AttributeError in msilib.Directory.glob().
: Added compatibility with broken protocol 2 pickles created in
old Python 3 versions (3.4.3 and lower).
: Use cross-compilation by default for 64-bit Windows.
: Improve zipimportâs support for namespace packages.
: Fix sysconfig._parse_makefile not expanding ${} vars appearing
before $() vars.
: Fix mock.patch behavior when patching descriptors. Restore
original values after patching. Patch contributed by Sean McCully.
: In the ssl module, enable the SSL_MODE_RELEASE_BUFFERS mode
option if it is safe to do so.
: Donât traverse into symlinks for  pattern in
pathlib.Path.[r]glob().
: Ignore PermissionError when traversing a tree with
pathlib.Path.[r]glob(). Patch by Ulrich Petri.
: fileinput now uses sys.stdin as-is if it does not have a buffer
attribute (restores backward compatibility).
: Copying the lru_cache() wrapper object now always works,
independently from the type of the wrapped object (by returning the
original object unchanged).
: Fixed possible use after free in ElementTree.XMLPullParser.
: os.fwalk() no longer skips remaining directories when error
occurs. Original patch by Samson Lee.
: Fixed and simplified OrderedDict.__sizeof__.
: Fixed various refcount issues in ElementTree iteration.
: Restore the previous behaviour of tolerating most fstat()
errors when opening files.  This was a regression in 3.5a1, and stopped
anonymous temporary files from working in special cases.
: Fix regression in number of arguments compileall accepts when
â-dâ is specified.  The check on the number of arguments has been dropped
completely as it never worked correctly anyway.
: In the subprocess module, preserve any exception caused by
fork() failure when preexec_fn is used.
: _strptimeâs regexp cache now is reset after changing timezone
with time.tzset().
: When executing a package with the âpython -m packageâ option,
and package initialization fails, a proper traceback is now reported.  The
ârunpyâ module now lets exceptions from package initialization pass back
to the caller, rather than raising ImportError.
: Also in runpy and the â-mâ option, omit the irrelevant message
ââ¦ is a package and cannot be directly executedâ if the package could
not even be initialized (e.g. due to a bad  file).
: Fixed problem with the mean of very small and very large
numbers. As a side effect, statistics.mean and statistics.variance should
be significantly faster.
: Fixed copying object with state with boolean value is false.
: Fixed deep copying of minidom documents.  Based on patch by
Marian Ganisin.
: Fixed a reference leak in pickle.loads() when unpickling
invalid data including tuple instructions.
: In the Readline completer, avoid listing duplicate global
names, and search the global namespace before searching builtins.
: Fixed file leak in ElementTree.iterparse() raising an error.
: Fixed SystemError raised by unpickler on broken pickle data.
: Fixed crash on deleting ElementTree.Element attributes.
: ZipFile now always writes a ZIP_STORED header for directory
entries.  Patch by Dingyuan Wang.
Skip getaddrinfo if host is already resolved. Patch by A. Jesse Jiryu
Davis.
: Add asyncio.StreamReader.readuntil() method. Patch by ÐÐ°ÑÐº
ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³.
: Avoid unnecessary serialization of getaddrinfo(3) calls on OS X
versions 10.5 or higher.  Original patch by A. Jesse Jiryu Davis.
: Avoid unnecessary serialization of getaddrinfo(3) calls on
current versions of OpenBSD and NetBSD.  Patch by A. Jesse Jiryu Davis.
: Fix asyncio/subprocess.communicate() to handle empty input.
Patch by Jack OâConnor.
: Add loop.get_exception_handler method
: asyncio: Add loop.create_future method
: asyncio: Fix _read_ready and _write_ready to respect
_conn_lost. Patch by Åukasz Langa.
: asyncio: Fix inconsistency cancelling Condition.wait. Patch by
David Coles.

================================================================================

# Changelog - Library (Part 2)

: Implement missing IPv4Address.is_global property.  It was
documented since 07a5610bae9d.  Initial patch by Roger Luethi.

: distutils register command now decodes HTTP responses
correctly.  Initial patch by ingrid.

A new version of typing.py provides several new classes and features:
@overload outside stubs, Reversible, DefaultDict, Text, ContextManager,
Type[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some
of the new features are not yet implemented in mypy or other static
analyzers). Also classes for  (Awaitable, AsyncIterable,
AsyncIterator) have been added (in fact they made it into 3.5.1 but were
never mentioned).

: Stop http.server.BaseHTTPRequestHandler.send_error() from
sending a message body for 205 Reset Content.  Also, donât send Content
header fields in responses that donât have a body.  Patch by Susumu
Koshiba.

: Fix the âplatformâ module to tolerate when sys.version contains
truncated build information.

: In the zlib module, allow decompressing raw Deflate streams
with a predefined zdict.  Based on patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 3)

: Fix wsgiref.simple_server.WSGIRequestHandler to completely
write data to the client.  Previously it could do partial writes and
truncate data.  Also, wsgiref.handler.ServerHandler can now handle stdout
doing partial writes, but this is deprecated.

: Add  to .  Patch by Emanuel Barry.

: subprocess.Popen.communicate now correctly ignores
BrokenPipeError when the child process dies before .communicate() is
called in more/all circumstances.

: distutils.upload now correctly handles HTTPError. Initial patch
by Claudiu Popa.

: Fix SSLContext._load_windows_store_certs fails with
PermissionError

: Avoid creating duplicate filters when using filterwarnings and
simplefilter. Based on patch by Alex Shkop.

: Fix os.set_inheritable() on Android, ioctl() is blocked by
SELinux and fails with EACCESS. The function now falls back to fcntl().
Patch written by MichaÅ Bednarski.

: Fix infinite recursion using typing.py.  Thanks to Kalle Tuure!

: Fix urllib.request redirect handling when the target only has a
query string.  Original fix by JÃ¡n Janech.

================================================================================

# Changelog - Library (Part 4)

: The âurllib.requestâ module now percent-encodes non-ASCII bytes
found in redirect target URLs.  Some servers send Location header fields
with non-ASCII bytes, but âhttp.clientâ requires the request target to be
ASCII-encodable, otherwise a UnicodeEncodeError is raised.  Based on patch
by Christian Heimes.

: Honor debuglevel flag in urllib.request.HTTPHandler. Patch
contributed by Chi Hsuan Yen.

: In the subprocess module, allow stderr to be redirected to
stdout even when stdout is not redirected.  Patch by Akira Li.

: mock_open âfilesâ no longer error on readline at end of file.
Patch from Yolanda Robla.

: Fixed leaking a userptr in curses panel destructor.

: Removed unnecessary, and ignored, call to sum of squares helper
in statistics.pvariance.

: The modulefinder module now supports extended opcode arguments.

: Fixed crashes related to directly created instances of types in
_tkinter and curses.panel modules.

: weakref.ref() no longer silently ignores keyword arguments.
Patch by Georg Brandl.

: xmlrpc now raises ResponseError on unsupported type tags
instead of silently return incorrect result.

: Fixed the comparison of plistlib.Data with other types.

================================================================================

# Changelog - Library (Part 5)

: Fix an uninitialized variable in ctypes.util. The bug only
occurs on SunOS when the ctypes implementation searches for the 
program. Patch by Xiang Zhang.  Tested on SunOS by Kees Bos.

: In urllib.request, change the proxy bypass host checking
against no_proxy to be case-insensitive, and to not match unrelated host
names that happen to have a bypassed hostname as a suffix.  Patch by Xiang
Zhang.

: recursive_repr() now sets __qualname__ of wrapper.  Patch by
Xiang Zhang.

: urllib.request will prefer lower_case proxy environment
variables over UPPER_CASE or Mixed_Case ones. Patch contributed by
Hans-Peter Jansen.

: assertSequenceEqual() now correctly outputs non-stringified
differing items (like bytes in the -b mode).  This affects
assertListEqual() and assertTupleEqual().

: Remove âwill be removed in Python 3.7â from deprecation
messages of platform.dist() and platform.linux_distribution(). Patch by
Kumaripaba Miyurusara Athukorala.

: itemgetter, attrgetter and methodcaller objects no longer
silently ignore keyword arguments.

: Disassembling a class now disassembles class and static
methods. Patch by Xiang Zhang.

================================================================================

# Changelog - Library (Part 6)

: Fix error handling in shutil.get_terminal_size(), catch
AttributeError instead of . Patch written by
Emanuel Barry.

: tarfileâs ustar and gnu formats now correctly calculate name
and link field limits for multibyte character encodings like utf-8.

: Stop encoding Latin-1-ized WSGI paths with UTF-8.  Patch by
Anthony Sottile.

: Fix os.urandom() on Solaris 11.3 and newer when reading
more than 1,024 bytes: call getrandom() multiple times with a limit of
1024 bytes per call.

: Add .webm to mimetypes.types_map.  Patch by Giampaolo Rodolaâ.

: Add .csv to mimetypes.types_map.  Patch by Geoff Wilson.

: Fixed Y2038 problem in loading binary PLists.

: Handle terminal resizing with Readline 6.3+ by installing our
own SIGWINCH handler.  Patch by Eric Price.

: In http.server, respond with â413 Request header fields too
largeâ if there are too many header fields to parse, rather than killing
the connection and raising an unhandled exception.  Patch by Xiang Zhang.

: Change BufferedReader.writable() and BufferedWriter.readable()
to always return False.

================================================================================

# Changelog - Library (Part 7)

: Fix a regression in mock.MagicMock. _Call is a subclass of
tuple (changeset 3603bae63c13 only works for classes) so we need to
implement __ne__ ourselves.  Patch by Andrew Plummer.

: Raise ValueError rather than SystemError when a negative length
is passed to SSLSocket.recv() or read().

: Fix SSL recv(0) and read(0) methods to return zero bytes
instead of up to 1024.

: Fixed a bug in datetime.astimezone() method.

: warnings.formatwarning() now catches exceptions on
linecache.getline(...) to be able to log ResourceWarning
emitted late during the Python shutdown process.

: Ctrl+C during Readline history search now cancels the search
mode when compiled with Readline 7.

: Avoid potential ValueError in BaseHandler.start_response.
Initial patch by Peter Inglesby.

: Fix pyclbr.readmodule() and pyclbr.readmodule_ex()
to support importing packages.

: Account for remaining Content-Length in HTTPResponse.readline()
and read1(). Based on patch by Silent Ghost. Also document that
HTTPResponse now supports these methods.

: Handle sockets in directories unittest discovery is scanning.
Patch from Victor van den Elzen.

: cookiejar.http2time() now returns None if year is higher than
datetime.MAXYEAR.

================================================================================

# Changelog - Library (Part 8)

: Fixes platform module detection of Windows Server

: Fixed parsing time in week 0 before Jan 1.  Original patch by
TamÃ¡s Bence Gedai.

: Invoking Path.owner() and Path.group() on Windows now raise
NotImplementedError instead of ImportError.

: Fixed the keys() method for Canvas and Scrollbar widgets.

: Got rid of excessive buffering in the fileinput module. The
bufsize parameter is no longer used.

: Fix UnboundLocalError in
AbstractDigestAuthHandler.get_algorithm_impls. Initial patch by Mathieu
Dupuy.

: Fixed pickling and copying the accumulate() iterator with total
is None.

: Fixed debugging output for regular expressions with the (?x)
flag.

: Fixed the subnets() methods in IP network classes for the case
when resulting prefix length is equal to maximal prefix length. Based on
patch by Xiang Zhang.

: Remove the file if the internal open() call in
NamedTemporaryFile() fails. Patch by Silent Ghost.

: Fix XML-RPC client to retry when the server shuts down a
persistent connection.  This was a regression related to the new
http.client.RemoteDisconnected exception in 3.5.0a4.

: Leading  is optional now in base64.a85decode() with
adobe=True.  Patch by Swati Jaiswal.

================================================================================

# Changelog - Library (Part 9)

: Remove an invalid type check in importlib.util.LazyLoader.

: importlib.__import__() raises SystemError like
builtins.__import__() when  is specified but without an
accompanying package specified.

: In the âsocketserverâ module, shut down the request (closing
the connected socket) when verify_request() returns false.  Patch by Aviv
Palivoda.

: os.walk() no longer uses FDs proportional to the tree depth.

: The os.scandir() iterator now closes file descriptor not only
when the iteration is finished, but when it was failed with error.

: Restored support of bytes paths in os.walk() on Windows.

: Add UTF-8 suggestion to error message when posting a
non-Latin-1 string with http.client.

: Reset FancyURLopenerâs redirect counter even if there is an
exception. Based on patches by Brian Brazil and Daniel Rocco.

: Fixed a crash when unpickle the functools.partial object with
wrong state. Fixed a leak in failed functools.partial constructor. âargsâ
and âkeywordsâ attributes of functools.partial have now always types tuple
and dict correspondingly.

: copy.deepcopy() now correctly copies range() objects with
non-atomic attributes.

================================================================================

# Changelog - Library (Part 10)

: Path.glob() now raises a ValueError if itâs called with an
invalid pattern. Patch by Thomas Nyberg.

: Fixed possible integer overflows in zipimport.

: On Windows, getnameinfo(), gethostbyaddr() and
gethostbyname_ex() functions of the socket module now decode the hostname
from the ANSI code page rather than UTF-8.

: xmlrpc now works with strings not encodable with used non-UTF-8
encoding.

: Garbage collector now breaks reference loops with OrderedDict.

: Fixed AttributeError in msilib.Directory.glob().

: Added compatibility with broken protocol 2 pickles created in
old Python 3 versions (3.4.3 and lower).

: Use cross-compilation by default for 64-bit Windows.

: Improve zipimportâs support for namespace packages.

: Fix sysconfig._parse_makefile not expanding ${} vars appearing
before $() vars.

: Fix mock.patch behavior when patching descriptors. Restore
original values after patching. Patch contributed by Sean McCully.

: In the ssl module, enable the SSL_MODE_RELEASE_BUFFERS mode
option if it is safe to do so.

: Donât traverse into symlinks for  pattern in
pathlib.Path.[r]glob().

: Ignore PermissionError when traversing a tree with
pathlib.Path.[r]glob(). Patch by Ulrich Petri.

================================================================================

# Changelog - Library (Part 11)

: fileinput now uses sys.stdin as-is if it does not have a buffer
attribute (restores backward compatibility).

: Copying the lru_cache() wrapper object now always works,
independently from the type of the wrapped object (by returning the
original object unchanged).

: Fixed possible use after free in ElementTree.XMLPullParser.

: os.fwalk() no longer skips remaining directories when error
occurs. Original patch by Samson Lee.

: Fixed and simplified OrderedDict.__sizeof__.

: Fixed various refcount issues in ElementTree iteration.

: Restore the previous behaviour of tolerating most fstat()
errors when opening files.  This was a regression in 3.5a1, and stopped
anonymous temporary files from working in special cases.

: Fix regression in number of arguments compileall accepts when
â-dâ is specified.  The check on the number of arguments has been dropped
completely as it never worked correctly anyway.

: In the subprocess module, preserve any exception caused by
fork() failure when preexec_fn is used.

: _strptimeâs regexp cache now is reset after changing timezone
with time.tzset().

================================================================================

# Changelog - Library (Part 12)

: When executing a package with the âpython -m packageâ option,
and package initialization fails, a proper traceback is now reported.  The
ârunpyâ module now lets exceptions from package initialization pass back
to the caller, rather than raising ImportError.

: Also in runpy and the â-mâ option, omit the irrelevant message
ââ¦ is a package and cannot be directly executedâ if the package could
not even be initialized (e.g. due to a bad  file).

: Fixed problem with the mean of very small and very large
numbers. As a side effect, statistics.mean and statistics.variance should
be significantly faster.

: Fixed copying object with state with boolean value is false.

: Fixed deep copying of minidom documents.  Based on patch by
Marian Ganisin.

: Fixed a reference leak in pickle.loads() when unpickling
invalid data including tuple instructions.

: In the Readline completer, avoid listing duplicate global
names, and search the global namespace before searching builtins.

: Fixed file leak in ElementTree.iterparse() raising an error.

: Fixed SystemError raised by unpickler on broken pickle data.

: Fixed crash on deleting ElementTree.Element attributes.

================================================================================

# Changelog - Library (Part 13)

: ZipFile now always writes a ZIP_STORED header for directory
entries.  Patch by Dingyuan Wang.

Skip getaddrinfo if host is already resolved. Patch by A. Jesse Jiryu
Davis.

: Add asyncio.StreamReader.readuntil() method. Patch by ÐÐ°ÑÐº
ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³.

: Avoid unnecessary serialization of getaddrinfo(3) calls on OS X
versions 10.5 or higher.  Original patch by A. Jesse Jiryu Davis.

: Avoid unnecessary serialization of getaddrinfo(3) calls on
current versions of OpenBSD and NetBSD.  Patch by A. Jesse Jiryu Davis.

: Fix asyncio/subprocess.communicate() to handle empty input.
Patch by Jack OâConnor.

: Add loop.get_exception_handler method

: asyncio: Add loop.create_future method

: asyncio: Fix _read_ready and _write_ready to respect
_conn_lost. Patch by Åukasz Langa.

: asyncio: Fix inconsistency cancelling Condition.wait. Patch by
David Coles.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Paste with text selected now replaces the selection on X11. This
matches how paste works on Windows, Mac, most modern Linux apps, and ttk
widgets. Original patch by Serhiy Storchaka.
: Make clear in idlelib.idle_test.__init__ that the directory is
a private implementation of test.test_idle and tool for maintainers.
: Stop âThemeChangedâ warnings when running IDLE tests. These
persisted after other warnings were suppressed in #20567. Apply Serhiy
Storchakaâs update_idletasks solution to four test files. Record this
additional advice in idle_test/README.txt
: Revise idle_test/README.txt with advice about avoiding tk
warning messages from tests.  Apply advice to several IDLE tests.
: Make colorizer htest and turtledemo work with dark themes. Move
code for configuring text widget colors to a new function.
: When tk reports font size as 0, change to size 10. Such fonts
on Linux prevented the configuration dialog from opening.
: Add test for IDLEâs percolator. Original patch by Saimadhav
Heblikar.
: Add test for IDLEâs replace dialog. Original patch by Saimadhav
Heblikar.
: Add test for IDLEâs search dialog. Original patch by Westley
MartÃ­nez.
: Add test for IDLEâs undo delegator. Original patch by Saimadhav
Heblikar .
: Add ConfigDialog.remove_var_callbacks to stop memory leaks.
: Add more asserts to test_delegator.
: Add tests for idlelib.configHelpSourceEdit. Patch by Saimadhav
Heblikar.
In the âIDLE-console differencesâ section of the IDLE doc, clarify how
running with IDLE affects sys.modules and the standard streams.
: fix incorrect change in IOBinding that prevented printing.
Augment IOBinding htest to include all major IOBinding functions.
: Revert unwanted conversion of â to â RIGHT SINGLE QUOTATION
MARK in README.txt and open this and NEWS.txt with âasciiâ. Re-encode
CREDITS.txt to utf-8 and open it with âutf-8â.

================================================================================

# Changelog - IDLE (Part 2)

: Paste with text selected now replaces the selection on X11. This
matches how paste works on Windows, Mac, most modern Linux apps, and ttk
widgets. Original patch by Serhiy Storchaka.

: Make clear in idlelib.idle_test.__init__ that the directory is
a private implementation of test.test_idle and tool for maintainers.

: Stop âThemeChangedâ warnings when running IDLE tests. These
persisted after other warnings were suppressed in #20567. Apply Serhiy
Storchakaâs update_idletasks solution to four test files. Record this
additional advice in idle_test/README.txt

: Revise idle_test/README.txt with advice about avoiding tk
warning messages from tests.  Apply advice to several IDLE tests.

: Make colorizer htest and turtledemo work with dark themes. Move
code for configuring text widget colors to a new function.

: When tk reports font size as 0, change to size 10. Such fonts
on Linux prevented the configuration dialog from opening.

: Add test for IDLEâs percolator. Original patch by Saimadhav
Heblikar.

: Add test for IDLEâs replace dialog. Original patch by Saimadhav
Heblikar.

: Add test for IDLEâs search dialog. Original patch by Westley
MartÃ­nez.

================================================================================

# Changelog - IDLE (Part 3)

: Add test for IDLEâs undo delegator. Original patch by Saimadhav
Heblikar .

: Add ConfigDialog.remove_var_callbacks to stop memory leaks.

: Add more asserts to test_delegator.

: Add tests for idlelib.configHelpSourceEdit. Patch by Saimadhav
Heblikar.

In the âIDLE-console differencesâ section of the IDLE doc, clarify how
running with IDLE affects sys.modules and the standard streams.

: fix incorrect change in IOBinding that prevented printing.
Augment IOBinding htest to include all major IOBinding functions.

: Revert unwanted conversion of â to â RIGHT SINGLE QUOTATION
MARK in README.txt and open this and NEWS.txt with âasciiâ. Re-encode
CREDITS.txt to utf-8 and open it with âutf-8â.

================================================================================

# Changelog - Documentation (Part 1)

List:
: Moved the search box from the sidebar to the header and footer
of each page. Patch by Ammar Askar.
: Document the new  unpacking syntax of 3.5.
: Used HTTPS for external links in the documentation if possible.
: Rework the Readline module documentation to group related
functions together, and add more details such as what underlying Readline
functions and variables are accessed.
: Adds note to ctypes documentation regarding cdll.msvcrt.
: Fix documentation to not claim that __import__ is searched for
in the global scope.
: Update 3.x packaging documentation: * âSee alsoâ links to the
new docs are now provided in the legacy pages * links to setuptools
documentation have been updated

: Moved the search box from the sidebar to the header and footer
of each page. Patch by Ammar Askar.

: Document the new  unpacking syntax of 3.5.

: Used HTTPS for external links in the documentation if possible.

: Rework the Readline module documentation to group related
functions together, and add more details such as what underlying Readline
functions and variables are accessed.

: Adds note to ctypes documentation regarding cdll.msvcrt.

================================================================================

# Changelog - Documentation (Part 2)

: Fix documentation to not claim that __import__ is searched for
in the global scope.

: Update 3.x packaging documentation: * âSee alsoâ links to the
new docs are now provided in the legacy pages * links to setuptools
documentation have been updated

================================================================================

# Changelog - Tests (Part 1)

List:
: Added tests for the turtle module.  Patch by ingrid, Gregory
Loyse and Jelle Zijlstra.
: The multiprocessing thread pool (multiprocessing.dummy.Pool)
was untested.
: Added new tests for pickling iterators of mutable sequences.
: Added test.support.check_no_resource_warning() to check that no
ResourceWarning is emitted.
: Changed test_ssl to use self-signed.pythontest.net.  This
avoids relying on svn.python.org, which recently changed root certificate.
: Tests for OrderedDict are extracted from test_collections into
separate file test_ordered_dict.
: Skip test_timestamp_overflow in test_import if bytecode files
cannot be written.

: Added tests for the turtle module.  Patch by ingrid, Gregory
Loyse and Jelle Zijlstra.

: The multiprocessing thread pool (multiprocessing.dummy.Pool)
was untested.

: Added new tests for pickling iterators of mutable sequences.

: Added test.support.check_no_resource_warning() to check that no
ResourceWarning is emitted.

: Changed test_ssl to use self-signed.pythontest.net.  This
avoids relying on svn.python.org, which recently changed root certificate.

: Tests for OrderedDict are extracted from test_collections into
separate file test_ordered_dict.

================================================================================

# Changelog - Tests (Part 2)

: Skip test_timestamp_overflow in test_import if bytecode files
cannot be written.

================================================================================

# Changelog - Build (Part 1)

List:
: Fix linking extension modules for cross builds. Patch by Xavier
de Gaye.
: Disable the rules for running _freeze_importlib and pgen when
cross-compiling.  The output of these programs is normally saved with the
source code anyway, and is still regenerated when doing a native build.
Patch by Xavier de Gaye.
: Fix the cross-compiling pgen rule for in-tree builds.  Patch by
Xavier de Gaye.
: Link audioop, _datetime, _ctypes_test modules to libm, except
on Mac OS X. Patch written by Xavier de Gaye.
: A âwith-lto configure option has been added that will enable
link time optimizations at build time during a make profile-opt. Some
compilers and toolchains are known to not produce stable code when using
LTO, be sure to test things thoroughly before relying on it. It can
provide a few % speed up over profile-opt alone.
: Adds validation of ucrtbase[d].dll version with warning for old
versions.
: Avoid error about nonexistent fileblocks.o file by using a
lower-level check for st_blocks in struct stat.
: Fixing the build output folder for tix-8.4.3.6. Patch by Bjoern
Thiel.
: Update Windows builds to use OpenSSL 1.0.2g.
: Compile Modules/_math.c once, before building extensions.
Previously it could fail to compile properly if the math and cmath builds
were concurrent.
: Added  and  arguments to
PCbuild\build.bat for building with Profile-Guided Optimization.  The
old PCbuild\build_pgo.bat script is now deprecated, and simply calls
PCbuild\build.bat  .
: Add support for building with ICC to , including a
new --with-icc flag.
: Fix installation of Python on UNIX with make -j9.
: Update OS X 10.5+ 32-bit-only installer to build and link with
OpenSSL 1.0.2h.
: Update Windows builds to use OpenSSL 1.0.2f.
: Support Apple Xcode 7âs new textual SDK stub libraries.
: Do not enable unreachable code warnings when using gcc as the
option does not work correctly in older versions of gcc and has been
silently removed as of gcc-4.5.

================================================================================

# Changelog - Build (Part 2)

: Fix linking extension modules for cross builds. Patch by Xavier
de Gaye.

: Disable the rules for running _freeze_importlib and pgen when
cross-compiling.  The output of these programs is normally saved with the
source code anyway, and is still regenerated when doing a native build.
Patch by Xavier de Gaye.

: Fix the cross-compiling pgen rule for in-tree builds.  Patch by
Xavier de Gaye.

: Link audioop, _datetime, _ctypes_test modules to libm, except
on Mac OS X. Patch written by Xavier de Gaye.

: A âwith-lto configure option has been added that will enable
link time optimizations at build time during a make profile-opt. Some
compilers and toolchains are known to not produce stable code when using
LTO, be sure to test things thoroughly before relying on it. It can
provide a few % speed up over profile-opt alone.

: Adds validation of ucrtbase[d].dll version with warning for old
versions.

: Avoid error about nonexistent fileblocks.o file by using a
lower-level check for st_blocks in struct stat.

: Fixing the build output folder for tix-8.4.3.6. Patch by Bjoern
Thiel.

: Update Windows builds to use OpenSSL 1.0.2g.

================================================================================

# Changelog - Build (Part 3)

: Compile Modules/_math.c once, before building extensions.
Previously it could fail to compile properly if the math and cmath builds
were concurrent.

: Added  and  arguments to
PCbuild\build.bat for building with Profile-Guided Optimization.  The
old PCbuild\build_pgo.bat script is now deprecated, and simply calls
PCbuild\build.bat  .

: Add support for building with ICC to , including a
new --with-icc flag.

: Fix installation of Python on UNIX with make -j9.

: Update OS X 10.5+ 32-bit-only installer to build and link with
OpenSSL 1.0.2h.

: Update Windows builds to use OpenSSL 1.0.2f.

: Support Apple Xcode 7âs new textual SDK stub libraries.

: Do not enable unreachable code warnings when using gcc as the
option does not work correctly in older versions of gcc and has been
silently removed as of gcc-4.5.

================================================================================

# Changelog - Windows

List:
: Updates make_zip.py to correctly generate library ZIP file.
: Update the prepare_ssl.py script to handle OpenSSL releases
that donât include the contents of the include directory (that is, 1.0.2e
and later).
: bdist_wininst created binaries fail to start and find 32bit
Python
: Update the list of magic numbers in launcher
: Excludes venv from library when generating embeddable distro.
: Remove unused and outdated icons. (See also:
https://github.com/python/pythondotorg/issues/945)

: Updates make_zip.py to correctly generate library ZIP file.

: Update the prepare_ssl.py script to handle OpenSSL releases
that donât include the contents of the include directory (that is, 1.0.2e
and later).

: bdist_wininst created binaries fail to start and find 32bit
Python

: Update the list of magic numbers in launcher

: Excludes venv from library when generating embeddable distro.

: Remove unused and outdated icons. (See also:
https://github.com/python/pythondotorg/issues/945)

================================================================================

# Changelog - Tools/Demos

List:
: Fix python-gdb.py: donât get C types once when the Python code
is loaded, but get C types on demand. The C types can change if
python-gdb.py is loaded before the Python executable. Patch written by
Thomas Ilsche.
: Fix the Freeze tool to properly use flags passed through
configure. Patch by Daniel Shaulov.
: Add dictionary unpacking support to Tools/parser/unparse.py.
Patch by Guo Ci Teo.
: Fix variable name typo in Argument Clinic.

: Fix python-gdb.py: donât get C types once when the Python code
is loaded, but get C types on demand. The C types can change if
python-gdb.py is loaded before the Python executable. Patch written by
Thomas Ilsche.

: Fix the Freeze tool to properly use flags passed through
configure. Patch by Daniel Shaulov.

: Add dictionary unpacking support to Tools/parser/unparse.py.
Patch by Guo Ci Teo.

: Fix variable name typo in Argument Clinic.

================================================================================

# Changelog - Core and Builtins

List:
: Fixed problem with in-place string concatenation and utf-8
cache.

: Fixed problem with in-place string concatenation and utf-8
cache.

================================================================================

# Changelog - Windows

List:
: Python 3.5.1 installer shows wrong upgrade path and incorrect
logic for launcher detection.

: Python 3.5.1 installer shows wrong upgrade path and incorrect
logic for launcher detection.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fix a possible segfault during argument parsing in functions
that accept filesystem paths.
: Fixed a partially broken sanity check in the _posixsubprocess
internals regarding how fds_to_pass were passed to the child.  The bug had
no actual impact as subprocess.py already avoided it.
: Fixed tokenizer crash when processing undecodable source code
with a null byte.
: The hash of the key now is calculated only once in most
operations in C implementation of OrderedDict.
: Default implementation of __reduce__ and __reduce_ex__ now
rejects builtin types with not defined __new__.
: Fix parser and AST: fill lineno and col_offset of âargâ node
when compiling AST from Python objects.
: Avoid buffer overreads when int(), float(), compile(), exec()
and eval() are passed bytes-like objects.  These objects are not
necessarily terminated by a null byte, but the functions assumed they
were.
: Fixed a crash and leaking NULL in repr() of OrderedDict that
was mutated by direct calls of dict methods.
: Iterating OrderedDict with keys with unstable hash now raises
KeyError in C implementations as well as in Python implementation.
: Fixed crash when highly nested OrderedDict structures were
garbage collected.
: sys.setrecursionlimit() now raises a RecursionError if the new
recursion limit is too low depending at the current recursion depth.
Modify also the âlower-water markâ formula to make it monotonic. This mark
is used to decide when the overflowed flag of the thread state is reset.
: Fix input() to prompt to the redirected stdout when
sys.stdout.fileno() fails.
: Prevent builtin types that are not allowed to be subclassed
from being subclassed through multiple inheritance.
: Fixed a number of bugs in UTF-7 decoding of misformed data.
: Import trace messages emitted in verbose (-v) mode are no
longer formatted twice.
: On Solaris 11.3 or newer, os.urandom() now uses the getrandom()
function instead of the getentropy() function. The getentropy() function
is blocking to generate very good quality entropy, os.urandom() doesnât
need such high-quality entropy.
: The stdprinter (used as sys.stderr before the io module is
imported at startup) now uses the backslashreplace error handler.
: Make the line number and column offset of set/dict literals and
comprehensions correspond to the opening brace.
: Hide the private _Py_atomic_ symbols from the
public Python.h header to fix a compilation error with OpenMP.
PyThreadState_GET() becomes an alias to PyThreadState_Get() to avoid ABI
incompatibilities.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fix a possible segfault during argument parsing in functions
that accept filesystem paths.

: Fixed a partially broken sanity check in the _posixsubprocess
internals regarding how fds_to_pass were passed to the child.  The bug had
no actual impact as subprocess.py already avoided it.

: Fixed tokenizer crash when processing undecodable source code
with a null byte.

: The hash of the key now is calculated only once in most
operations in C implementation of OrderedDict.

: Default implementation of __reduce__ and __reduce_ex__ now
rejects builtin types with not defined __new__.

: Fix parser and AST: fill lineno and col_offset of âargâ node
when compiling AST from Python objects.

: Avoid buffer overreads when int(), float(), compile(), exec()
and eval() are passed bytes-like objects.  These objects are not
necessarily terminated by a null byte, but the functions assumed they
were.

: Fixed a crash and leaking NULL in repr() of OrderedDict that
was mutated by direct calls of dict methods.

: Iterating OrderedDict with keys with unstable hash now raises
KeyError in C implementations as well as in Python implementation.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Fixed crash when highly nested OrderedDict structures were
garbage collected.

: sys.setrecursionlimit() now raises a RecursionError if the new
recursion limit is too low depending at the current recursion depth.
Modify also the âlower-water markâ formula to make it monotonic. This mark
is used to decide when the overflowed flag of the thread state is reset.

: Fix input() to prompt to the redirected stdout when
sys.stdout.fileno() fails.

: Prevent builtin types that are not allowed to be subclassed
from being subclassed through multiple inheritance.

: Fixed a number of bugs in UTF-7 decoding of misformed data.

: Import trace messages emitted in verbose (-v) mode are no
longer formatted twice.

: On Solaris 11.3 or newer, os.urandom() now uses the getrandom()
function instead of the getentropy() function. The getentropy() function
is blocking to generate very good quality entropy, os.urandom() doesnât
need such high-quality entropy.

: The stdprinter (used as sys.stderr before the io module is
imported at startup) now uses the backslashreplace error handler.

: Make the line number and column offset of set/dict literals and
comprehensions correspond to the opening brace.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Hide the private _Py_atomic_ symbols from the
public Python.h header to fix a compilation error with OpenMP.
PyThreadState_GET() becomes an alias to PyThreadState_Get() to avoid ABI
incompatibilities.

================================================================================

# Changelog - Library (Part 1)

List:
: Change three zlib functions to accept sizes that fit in
Py_ssize_t, but internally cap those sizes to UINT_MAX.  This resolves a
regression in 3.5 where GzipFile.read() failed to read chunks larger than
2 or 4 GiB.  The change affects the zlib.Decompress.decompress()
max_length parameter, the zlib.decompress() bufsize parameter, and the
zlib.Decompress.flush() length parameter.
: Avoid incorrect errors raised by os.makedirs(exist_ok=True)
when the OS gives priority to errors such as EACCES over EEXIST.
: Change semantics of EventLoop.stop() in asyncio.
: When we know a subprocess.Popen process has died, do not allow
the send_signal(), terminate(), or kill() methods to do anything as they
could potentially signal a different process.
: In the Readline completer, only call getattr() once per
attribute.
: Fix a crash when garbage-collecting ctypes objects created by
wrapping a memoryview.  This was a regression made in 3.5a1.  Based on
patch by Eryksun.
: Added âescapeâ to the __all__ list in the glob module.
: Fixed recursive glob() with patterns starting with .
: Fix regression in smtplibâs AUTH LOGIN support.
: Fix the pydoc web serverâs module search function to handle
exceptions from importing packages.
: Got rid of circular references in regular expression parsing.
: fileinput.FileInput.readline() now returns bââ instead of ââ at
the end if the FileInput was opened with binary mode. Patch by Ryosuke
Ito.
: Fixed inspect.getdoc() for inherited docstrings of properties.
Original patch by John Mark Vandenberg.
: Always use os.urandom as a source of randomness in uuid.uuid4.
: Fixed textwrap.dedent() for the case when largest common
whitespace is a substring of smallest leading whitespace. Based on patch
by Robert Li.
: The lru_cache() wrapper objects now can be copied and pickled
(by returning the original object unchanged).
: typing: Donât crash on Union[str, Pattern].
: asyncio: Raise error from drain() when socket is closed.
: Cleaned up and fixed minor bugs in C implementation of
OrderedDict.
: Improved Unicode support in SMTPHandler through better use of
the email package. Thanks to user simon04 for the patch.
: Remove mentions of the formatter module being removed in Python
3.6.
: Fixed a bug in C implementation of OrderedDict.move_to_end()
that caused segmentation fault or hang in iterating after moving several
items to the start of ordered dict.
: zipfile now works in threads disabled builds.
: smtpdâs SMTPChannel now correctly raises a ValueError if both
decode_data and enable_SMTPUTF8 are set to true.
: distutils raises OSError instead of DistutilsPlatformError when
MSVC is not installed.
: Fixed protocol for the STACK_GLOBAL opcode in
pickletools.opcodes.
: Updates asyncio datagram create method allowing reuseport and
reuseaddr socket options to be set prior to binding the socket. Mirroring
the existing asyncio create_server method the reuseaddr option for
datagram sockets defaults to True if the O/S is âposixâ (except if the
platform is Cygwin). Patch by Chris Laws.
: Add asyncio.run_coroutine_threadsafe().  This lets you submit a
coroutine to a loop from another thread, returning a
concurrent.futures.Future.  By Vincent Michel.
: Fix CGIRequestHandler to split the query from the URL at the
first question mark (?) rather than the last. Patch from Xiang Zhang.
: Prevent CGIRequestHandler from collapsing slashes in the query
part of the URL as if it were a path. Patch from Xiang Zhang.
: C implementation of functools.lru_cache() now calculates keyâs
hash only once.
: Constructor and update method of weakref.WeakValueDictionary
now accept the self and the dict keyword arguments.
: Constructor of collections.UserDict now accepts the self
keyword argument.
: Fixed comparison of traceback.FrameSummary.
: Added support for BINBYTES8 opcode in Python implementation of
unpickler. Highest 32 bits of 64-bit size for BINUNICODE8 and BINBYTES8
opcodes no longer silently ignored on 32-bit platforms in C
implementation.
: Fix string.Formatter problem with auto-numbering and nested
format_specs. Patch by Anthon van der Neut.
: Rewrite the guts of asyncio.Queue and asyncio.Semaphore to be
more understandable and correct.
: Failed readline.set_completer_delims() no longer left the
module in inconsistent state.
: Default implementation of tzinfo.fromutc() was returning wrong
results in some cases.
: Allow the ssl module to be built with older versions of
LibreSSL.
Prevent overflow in _Unpickler_Read.
: The XML encoding declaration written by Element Tree now
respects the letter case given by the user. This restores the ability to
write encoding names in uppercase like âUTF-8â, which worked in Python 2.
: Make deque_clear() safer by emptying the deque before clearing.
This helps avoid possible reentrancy issues.
: platform module now reads Windows version from kernel32.dll to
avoid compatibility shims.
: Fix datetime.strftime() failure when errno was already set to
EINVAL.
: Fix rounding in fromtimestamp() and utcfromtimestamp() methods
of datetime.datetime: microseconds are now rounded to nearest with ties
going to nearest even integer (ROUND_HALF_EVEN), instead of being rounding
towards minus infinity (ROUND_FLOOR). Itâs important that these methods
use the same rounding mode than datetime.timedelta to keep the property:
(datetime(1970,1,1) + timedelta(seconds=t)) ==
datetime.utcfromtimestamp(t). It also the rounding mode used by
round(float) for example.
: Fix datetime.datetime.now() and datetime.datetime.utcnow() on
Windows to support date after year 2038. It was a regression introduced in
Python 3.5.0.
: Omitted internal frames in traceback functions print_stack(),
format_stack(), and extract_stack() called without arguments.
: Fix a regression of Python 3.5.0 in os.waitpid() on Windows.
: socket.socket.getaddrinfo() now calls
PyUnicode_AsEncodedString() instead of calling the encode() method of the
host, to handle correctly custom string with an encode() method which
doesnât return a byte string. The encoder of the IDNA codec is now called
directly instead of calling the encode() method of the string.
: Correctly compute stack usage of the BUILD_MAP opcode.
: Comparing call_args to a long sequence now correctly returns a
boolean result instead of raising an exception.  Patch by A Kaptur.
: Make sure that HTMLParser.feed() returns all the data, even
when convert_charrefs is True.
: shutil.make_archive() with the âzipâ format now adds entries
for directories (including empty directories) in ZIP file.
: Fixed a crash caused by setting non-string key of expat parser.
Based on patch by John Leitch.
: Exit pdb if file has syntax error, instead of trapping user in
an infinite loop.  Patch by Xavier de Gaye.
: Fix a race condition at Python startup if the file descriptor
of stdin (0), stdout (1) or stderr (2) is closed while Python is creating
sys.stdin, sys.stdout and sys.stderr objects. These attributes are now set
to None if the creation of the object failed, instead of raising an
OSError exception. Initial patch written by Marco Paolini.
: Fix error handling and a race condition (related to garbage
collection) in collections.OrderedDict constructor.
: Fixed setting binary mode in Python implementation of FileIO on
Windows and Cygwin.  Patch from Akira Li.
: Fix (another) memory leak in SSLSocket.getpeercer().
: Disable the vulnerable SSLv3 protocol by default when creating
ssl.SSLContext.
: Fix memory leak in SSLSocket.getpeercert().
: Sockets returned from accept() shouldnât appear to be
nonblocking.
: When threading.Event is reinitialized, the underlying condition
should use a regular lock rather than a recursive lock.
: Fix regression in unittest.expectedFailure on subclasses. Patch
from Berker Peksag.
: cgi.FieldStorage.read_multi() now ignores the Content-Length
header in part headers. Patch written by Peter Landry and reviewed by
Pierre Quentel.
: Fix overrun error in deque.index(). Found by John Leitch and
Bryce Darling.
: Fix docstring in http.server.test. Patch from Chiu-Hsiang Hsu.
: Improve message in
configparser.InterpolationMissingOptionError. Patch from Åukasz Langa.
: Honour TestCase.longMessage correctly in assertRegex. Patch
from Ilia Kurenkov.
: Fixed functools.singledispatch on classes with false
metaclasses.  Patch by Ethan Furman.
asyncio: ensure_future() now accepts awaitable objects.

================================================================================

# Changelog - Library (Part 2)

: Change three zlib functions to accept sizes that fit in
Py_ssize_t, but internally cap those sizes to UINT_MAX.  This resolves a
regression in 3.5 where GzipFile.read() failed to read chunks larger than
2 or 4 GiB.  The change affects the zlib.Decompress.decompress()
max_length parameter, the zlib.decompress() bufsize parameter, and the
zlib.Decompress.flush() length parameter.

: Avoid incorrect errors raised by os.makedirs(exist_ok=True)
when the OS gives priority to errors such as EACCES over EEXIST.

: Change semantics of EventLoop.stop() in asyncio.

: When we know a subprocess.Popen process has died, do not allow
the send_signal(), terminate(), or kill() methods to do anything as they
could potentially signal a different process.

: In the Readline completer, only call getattr() once per
attribute.

: Fix a crash when garbage-collecting ctypes objects created by
wrapping a memoryview.  This was a regression made in 3.5a1.  Based on
patch by Eryksun.

: Added âescapeâ to the __all__ list in the glob module.

: Fixed recursive glob() with patterns starting with .

: Fix regression in smtplibâs AUTH LOGIN support.

================================================================================

# Changelog - Library (Part 3)

: Fix the pydoc web serverâs module search function to handle
exceptions from importing packages.

: Got rid of circular references in regular expression parsing.

: fileinput.FileInput.readline() now returns bââ instead of ââ at
the end if the FileInput was opened with binary mode. Patch by Ryosuke
Ito.

: Fixed inspect.getdoc() for inherited docstrings of properties.
Original patch by John Mark Vandenberg.

: Always use os.urandom as a source of randomness in uuid.uuid4.

: Fixed textwrap.dedent() for the case when largest common
whitespace is a substring of smallest leading whitespace. Based on patch
by Robert Li.

: The lru_cache() wrapper objects now can be copied and pickled
(by returning the original object unchanged).

: typing: Donât crash on Union[str, Pattern].

: asyncio: Raise error from drain() when socket is closed.

: Cleaned up and fixed minor bugs in C implementation of
OrderedDict.

: Improved Unicode support in SMTPHandler through better use of
the email package. Thanks to user simon04 for the patch.

: Remove mentions of the formatter module being removed in Python
3.6.

================================================================================

# Changelog - Library (Part 4)

: Fixed a bug in C implementation of OrderedDict.move_to_end()
that caused segmentation fault or hang in iterating after moving several
items to the start of ordered dict.

: zipfile now works in threads disabled builds.

: smtpdâs SMTPChannel now correctly raises a ValueError if both
decode_data and enable_SMTPUTF8 are set to true.

: distutils raises OSError instead of DistutilsPlatformError when
MSVC is not installed.

: Fixed protocol for the STACK_GLOBAL opcode in
pickletools.opcodes.

: Updates asyncio datagram create method allowing reuseport and
reuseaddr socket options to be set prior to binding the socket. Mirroring
the existing asyncio create_server method the reuseaddr option for
datagram sockets defaults to True if the O/S is âposixâ (except if the
platform is Cygwin). Patch by Chris Laws.

: Add asyncio.run_coroutine_threadsafe().  This lets you submit a
coroutine to a loop from another thread, returning a
concurrent.futures.Future.  By Vincent Michel.

: Fix CGIRequestHandler to split the query from the URL at the
first question mark (?) rather than the last. Patch from Xiang Zhang.

================================================================================

# Changelog - Library (Part 5)

: Prevent CGIRequestHandler from collapsing slashes in the query
part of the URL as if it were a path. Patch from Xiang Zhang.

: C implementation of functools.lru_cache() now calculates keyâs
hash only once.

: Constructor and update method of weakref.WeakValueDictionary
now accept the self and the dict keyword arguments.

: Constructor of collections.UserDict now accepts the self
keyword argument.

: Fixed comparison of traceback.FrameSummary.

: Added support for BINBYTES8 opcode in Python implementation of
unpickler. Highest 32 bits of 64-bit size for BINUNICODE8 and BINBYTES8
opcodes no longer silently ignored on 32-bit platforms in C
implementation.

: Fix string.Formatter problem with auto-numbering and nested
format_specs. Patch by Anthon van der Neut.

: Rewrite the guts of asyncio.Queue and asyncio.Semaphore to be
more understandable and correct.

: Failed readline.set_completer_delims() no longer left the
module in inconsistent state.

: Default implementation of tzinfo.fromutc() was returning wrong
results in some cases.

: Allow the ssl module to be built with older versions of
LibreSSL.

Prevent overflow in _Unpickler_Read.

================================================================================

# Changelog - Library (Part 6)

: The XML encoding declaration written by Element Tree now
respects the letter case given by the user. This restores the ability to
write encoding names in uppercase like âUTF-8â, which worked in Python 2.

: Make deque_clear() safer by emptying the deque before clearing.
This helps avoid possible reentrancy issues.

: platform module now reads Windows version from kernel32.dll to
avoid compatibility shims.

: Fix datetime.strftime() failure when errno was already set to
EINVAL.

: Fix rounding in fromtimestamp() and utcfromtimestamp() methods
of datetime.datetime: microseconds are now rounded to nearest with ties
going to nearest even integer (ROUND_HALF_EVEN), instead of being rounding
towards minus infinity (ROUND_FLOOR). Itâs important that these methods
use the same rounding mode than datetime.timedelta to keep the property:
(datetime(1970,1,1) + timedelta(seconds=t)) ==
datetime.utcfromtimestamp(t). It also the rounding mode used by
round(float) for example.

: Fix datetime.datetime.now() and datetime.datetime.utcnow() on
Windows to support date after year 2038. It was a regression introduced in
Python 3.5.0.

================================================================================

# Changelog - Library (Part 7)

: Omitted internal frames in traceback functions print_stack(),
format_stack(), and extract_stack() called without arguments.

: Fix a regression of Python 3.5.0 in os.waitpid() on Windows.

: socket.socket.getaddrinfo() now calls
PyUnicode_AsEncodedString() instead of calling the encode() method of the
host, to handle correctly custom string with an encode() method which
doesnât return a byte string. The encoder of the IDNA codec is now called
directly instead of calling the encode() method of the string.

: Correctly compute stack usage of the BUILD_MAP opcode.

: Comparing call_args to a long sequence now correctly returns a
boolean result instead of raising an exception.  Patch by A Kaptur.

: Make sure that HTMLParser.feed() returns all the data, even
when convert_charrefs is True.

: shutil.make_archive() with the âzipâ format now adds entries
for directories (including empty directories) in ZIP file.

: Fixed a crash caused by setting non-string key of expat parser.
Based on patch by John Leitch.

: Exit pdb if file has syntax error, instead of trapping user in
an infinite loop.  Patch by Xavier de Gaye.

================================================================================

# Changelog - Library (Part 8)

: Fix a race condition at Python startup if the file descriptor
of stdin (0), stdout (1) or stderr (2) is closed while Python is creating
sys.stdin, sys.stdout and sys.stderr objects. These attributes are now set
to None if the creation of the object failed, instead of raising an
OSError exception. Initial patch written by Marco Paolini.

: Fix error handling and a race condition (related to garbage
collection) in collections.OrderedDict constructor.

: Fixed setting binary mode in Python implementation of FileIO on
Windows and Cygwin.  Patch from Akira Li.

: Fix (another) memory leak in SSLSocket.getpeercer().

: Disable the vulnerable SSLv3 protocol by default when creating
ssl.SSLContext.

: Fix memory leak in SSLSocket.getpeercert().

: Sockets returned from accept() shouldnât appear to be
nonblocking.

: When threading.Event is reinitialized, the underlying condition
should use a regular lock rather than a recursive lock.

: Fix regression in unittest.expectedFailure on subclasses. Patch
from Berker Peksag.

: cgi.FieldStorage.read_multi() now ignores the Content-Length
header in part headers. Patch written by Peter Landry and reviewed by
Pierre Quentel.

================================================================================

# Changelog - Library (Part 9)

: Fix overrun error in deque.index(). Found by John Leitch and
Bryce Darling.

: Fix docstring in http.server.test. Patch from Chiu-Hsiang Hsu.

: Improve message in
configparser.InterpolationMissingOptionError. Patch from Åukasz Langa.

: Honour TestCase.longMessage correctly in assertRegex. Patch
from Ilia Kurenkov.

: Fixed functools.singledispatch on classes with false
metaclasses.  Patch by Ethan Furman.

asyncio: ensure_future() now accepts awaitable objects.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Stop the debugger engine (normally in a user process) before
closing the debugger window (running in the IDLE process). This prevents
the RuntimeErrors that were being caught and ignored.
: Prevent IDLE from hanging when a) closing the shell while the
debugger is active (15347); b) closing the debugger with the [X] button
(15348); and c) activating the debugger when already active (24455). The
patch by Mark Roseman does this by making two changes. 1. Suspend and
resume the gui.interaction method with the tcl vwait mechanism intended
for this purpose (instead of root.mainloop & .quit). 2. In gui.run, allow
any existing interaction to terminate first.
Change âThe programâ to âYour programâ in an IDLE âkill program?â message
to make it clearer that the program referred to is the currently running
user program, not IDLE itself.
: Improve the appearance of the IDLE editor window status bar.
Patch by Mark Roseman.
: Change the handling of new built-in text color themes to better
address the compatibility problem introduced by the addition of IDLE Dark.
Consistently use the revised idleConf.CurrentTheme everywhere in idlelib.
: Extension configuration is now a tab in the IDLE Preferences
dialog rather than a separate dialog.  The former tabs are now a sorted
list.  Patch by Mark Roseman.
: Re-activate the config dialog help button with some content
about the other buttons and the new IDLE Dark theme.
: IDLE now has an âIDLE Darkâ built-in text color theme. It is
more or less IDLE Classic inverted, with a cobalt blue background.
Strings, comments, keywords, â¦ are still green, red, orange, â¦ . To
use it with IDLEs released before November 2015, hit the âSave as New
Custom Themeâ button and enter a new name, such as âCustom Darkâ.  The
custom theme will work with any IDLE release, and can be modified.
: README.txt is now an idlelib index for IDLE developers and
curious users. The previous user content is now in the IDLE doc chapter.
âIDLEâ now means âIntegrated Development and Learning Environmentâ.
: Users can now set breakpoint colors in Settings -> Custom
Highlighting. Original patch by Mark Roseman.
: Inactive selection background now matches active selection
background, as configured by users, on all systems.  Found items are now
always highlighted on Windows.  Initial patch by Mark Roseman.
: Idle: make calltip and completion boxes appear on Macs affected
by a tk regression.  Initial patch by Mark Roseman.
: Idle ScrolledList context menus (used in debugger) now work on
Mac Aqua. Patch by Mark Roseman.
: Make right-click for context menu work on Mac Aqua. Patch by
Mark Roseman.
: Associate tkinter messageboxes with a specific widget. For Mac
OSX, make them a âsheetâ.  Patch by Mark Roseman.
: Enhance the initial html viewer now used for Idle Help.
Properly indent fixed-pitch text (patch by Mark Roseman). Give code
snippet a very Sphinx-like light blueish-gray background. Re-use initial
width and height set by users for shell and editor. When the Table of
Contents (TOC) menu is used, put the section header at the top of the
screen.
: Condense and rewrite Idle doc section on text colors.
: Explain some differences between IDLE and console Python.
: Explain need for  when running file from Idle editor.
: Doc: augment Idle feature list and no-subprocess section.
: Update doc for Idle command line options. Some were missing and
notes were not correct.
: Most of idlelib is private and subject to change. Use
idleib.idle.* to start Idle. See idlelib.__init__.__doc__.
: Idle: add synchronization comments for future maintainers.
: Replace help.txt with help.html for Idle doc display. The new
idlelib/help.html is rstripped Doc/build/html/library/idle.html. It looks
better than help.txt and will better document Idle as released. The
tkinter html viewer that works for this file was written by Mark Roseman.
The now unused EditorWindow.HelpDialog class and helt.txt file are
deprecated.
: Deprecate unused idlelib.idlever with possible removal in 3.6.
: Remove extraneous code (which also create 2 & 3 conflicts).

================================================================================

# Changelog - IDLE (Part 2)

: Stop the debugger engine (normally in a user process) before
closing the debugger window (running in the IDLE process). This prevents
the RuntimeErrors that were being caught and ignored.

: Prevent IDLE from hanging when a) closing the shell while the
debugger is active (15347); b) closing the debugger with the [X] button
(15348); and c) activating the debugger when already active (24455). The
patch by Mark Roseman does this by making two changes. 1. Suspend and
resume the gui.interaction method with the tcl vwait mechanism intended
for this purpose (instead of root.mainloop & .quit). 2. In gui.run, allow
any existing interaction to terminate first.

Change âThe programâ to âYour programâ in an IDLE âkill program?â message
to make it clearer that the program referred to is the currently running
user program, not IDLE itself.

: Improve the appearance of the IDLE editor window status bar.
Patch by Mark Roseman.

: Change the handling of new built-in text color themes to better
address the compatibility problem introduced by the addition of IDLE Dark.
Consistently use the revised idleConf.CurrentTheme everywhere in idlelib.

================================================================================

# Changelog - IDLE (Part 3)

: Extension configuration is now a tab in the IDLE Preferences
dialog rather than a separate dialog.  The former tabs are now a sorted
list.  Patch by Mark Roseman.

: Re-activate the config dialog help button with some content
about the other buttons and the new IDLE Dark theme.

: IDLE now has an âIDLE Darkâ built-in text color theme. It is
more or less IDLE Classic inverted, with a cobalt blue background.
Strings, comments, keywords, â¦ are still green, red, orange, â¦ . To
use it with IDLEs released before November 2015, hit the âSave as New
Custom Themeâ button and enter a new name, such as âCustom Darkâ.  The
custom theme will work with any IDLE release, and can be modified.

: README.txt is now an idlelib index for IDLE developers and
curious users. The previous user content is now in the IDLE doc chapter.
âIDLEâ now means âIntegrated Development and Learning Environmentâ.

: Users can now set breakpoint colors in Settings -> Custom
Highlighting. Original patch by Mark Roseman.

================================================================================

# Changelog - IDLE (Part 4)

: Inactive selection background now matches active selection
background, as configured by users, on all systems.  Found items are now
always highlighted on Windows.  Initial patch by Mark Roseman.

: Idle: make calltip and completion boxes appear on Macs affected
by a tk regression.  Initial patch by Mark Roseman.

: Idle ScrolledList context menus (used in debugger) now work on
Mac Aqua. Patch by Mark Roseman.

: Make right-click for context menu work on Mac Aqua. Patch by
Mark Roseman.

: Associate tkinter messageboxes with a specific widget. For Mac
OSX, make them a âsheetâ.  Patch by Mark Roseman.

: Enhance the initial html viewer now used for Idle Help.
Properly indent fixed-pitch text (patch by Mark Roseman). Give code
snippet a very Sphinx-like light blueish-gray background. Re-use initial
width and height set by users for shell and editor. When the Table of
Contents (TOC) menu is used, put the section header at the top of the
screen.

: Condense and rewrite Idle doc section on text colors.

: Explain some differences between IDLE and console Python.

: Explain need for  when running file from Idle editor.

: Doc: augment Idle feature list and no-subprocess section.

================================================================================

# Changelog - IDLE (Part 5)

: Update doc for Idle command line options. Some were missing and
notes were not correct.

: Most of idlelib is private and subject to change. Use
idleib.idle.* to start Idle. See idlelib.__init__.__doc__.

: Idle: add synchronization comments for future maintainers.

: Replace help.txt with help.html for Idle doc display. The new
idlelib/help.html is rstripped Doc/build/html/library/idle.html. It looks
better than help.txt and will better document Idle as released. The
tkinter html viewer that works for this file was written by Mark Roseman.
The now unused EditorWindow.HelpDialog class and helt.txt file are
deprecated.

: Deprecate unused idlelib.idlever with possible removal in 3.6.

: Remove extraneous code (which also create 2 & 3 conflicts).

================================================================================

# Changelog - Documentation (Part 1)

List:
: Add remaining doc links to source code for Python-coded
modules. Patch by Yoni Lavi.
: Rewrite Comparisons section in the Expressions chapter of the
language reference. Some of the details of comparing mixed types were
incorrect or ambiguous. NotImplemented is only relevant at a lower level
than the Expressions chapter. Added details of comparing range() objects,
and default behaviour and consistency suggestions for user-defined
classes. Patch from Andy Maier.
: Clarify the default size argument of stack_size() in the
âthreadingâ and â_threadâ modules. Patch from Mattip.
: Overhaul tempfile docs. Note deprecated status of mktemp. Patch
from Zbigniew JÄdrzejewski-Szmek.
: Update the types of some PyTypeObject fields.  Patch by Joseph
Weston.
: Fix unittest discovery examples. Patch from Pam McAâNulty.

: Add remaining doc links to source code for Python-coded
modules. Patch by Yoni Lavi.

================================================================================

# Changelog - Documentation (Part 2)

: Rewrite Comparisons section in the Expressions chapter of the
language reference. Some of the details of comparing mixed types were
incorrect or ambiguous. NotImplemented is only relevant at a lower level
than the Expressions chapter. Added details of comparing range() objects,
and default behaviour and consistency suggestions for user-defined
classes. Patch from Andy Maier.

: Clarify the default size argument of stack_size() in the
âthreadingâ and â_threadâ modules. Patch from Mattip.

: Overhaul tempfile docs. Note deprecated status of mktemp. Patch
from Zbigniew JÄdrzejewski-Szmek.

: Update the types of some PyTypeObject fields.  Patch by Joseph
Weston.

: Fix unittest discovery examples. Patch from Pam McAâNulty.

================================================================================

# Changelog - Tests

List:
: Added tests for OrderedDict subclasses.
: Make test_compileall not fail when an entry on sys.path cannot
be written to (commonly seen in administrative installs on Windows).
: Prevents assert dialogs appearing in the test suite.
PCbuild\rt.bat now accepts an unlimited number of arguments to pass
along to regrtest.py.  Previously there was a limit of 9.

: Added tests for OrderedDict subclasses.

: Make test_compileall not fail when an entry on sys.path cannot
be written to (commonly seen in administrative installs on Windows).

: Prevents assert dialogs appearing in the test suite.

PCbuild\rt.bat now accepts an unlimited number of arguments to pass
along to regrtest.py.  Previously there was a limit of 9.

================================================================================

# Changelog - Build

List:
: Add LLVM support for PGO builds and use the test suite to
generate the profile data. Initial patch by Alecsandru Patrascu of Intel.
: Windows MSIs now have unique display names.
: It is now possible to build Python on Windows without errors
when external libraries are not available.

: Add LLVM support for PGO builds and use the test suite to
generate the profile data. Initial patch by Alecsandru Patrascu of Intel.

: Windows MSIs now have unique display names.

: It is now possible to build Python on Windows without errors
when external libraries are not available.

================================================================================

# Changelog - Windows (Part 1)

List:
: Updates shortcuts to start Python in installation directory.
: Changes default all-users install directory to match per-user
directory.
: Improves installer error messages for unsupported platforms.
: Display correct directory in installer when using non-default
settings.
: Disables use of SSE2 instructions in Windows 32-bit build
: Adds logging to installer for case where launcher is not
selected on upgrade.
: Windows uninstallation should not remove launcher if other
versions remain
: py.exe launcher is missing icons
: Windows installer does not precompile for -O or -OO.
: Makes Back button in installer go back to upgrade page when
upgrading.
: Increases font size of the installer.
: Clarifies that the non-web installer will download some
components.
: Restores requestedExecutionLevel to manifest to disable UAC
virtualization.
: Removed very outdated PC/example_nt/ directory.

: Updates shortcuts to start Python in installation directory.

: Changes default all-users install directory to match per-user
directory.

: Improves installer error messages for unsupported platforms.

: Display correct directory in installer when using non-default
settings.

================================================================================

# Changelog - Windows (Part 2)

: Disables use of SSE2 instructions in Windows 32-bit build

: Adds logging to installer for case where launcher is not
selected on upgrade.

: Windows uninstallation should not remove launcher if other
versions remain

: py.exe launcher is missing icons

: Windows installer does not precompile for -O or -OO.

: Makes Back button in installer go back to upgrade page when
upgrading.

: Increases font size of the installer.

: Clarifies that the non-web installer will download some
components.

: Restores requestedExecutionLevel to manifest to disable UAC
virtualization.

: Removed very outdated PC/example_nt/ directory.

================================================================================

# Changelog - Tools/Demos

List:
: Fix output of python-config âextension-suffix.

: Fix output of python-config âextension-suffix.

================================================================================

# Changelog - Build

List:
: Windows installer should not require TargetDir parameter when
installing quietly.

: Windows installer should not require TargetDir parameter when
installing quietly.

================================================================================

# Changelog - Library

List:
: Fixes MemoryError in test_strptime.

: Fixes MemoryError in test_strptime.

================================================================================

# Changelog - Build

List:
: Reverts partial-static build options and adds vcruntime140.dll
to Windows installation.

: Reverts partial-static build options and adds vcruntime140.dll
to Windows installation.

================================================================================

# Changelog - Core and Builtins

List:
: Prevent import subsystem stack frames from being counted by the
warnings.warn(stacklevel=) parameter.
: Prevent __class__ assignment to immutable built-in objects.
: Fix AST compilation for  syntax.

: Prevent import subsystem stack frames from being counted by the
warnings.warn(stacklevel=) parameter.

: Prevent __class__ assignment to immutable built-in objects.

: Fix AST compilation for  syntax.

================================================================================

# Changelog - Library

List:
: time_strftime() buffer over-read.
: To resolve a compatibility problem found with py2exe and
pywin32, imp.load_dynamic() once again ignores previously loaded modules
to support Python modules replacing themselves with extension modules.
Patch by Petr Viktorin.
: Fixed a bug in typing.py where isinstance([], typing.Iterable)
would return True once, then False on subsequent calls.
: Fixed buffer overread in BytesIO.readline() if a position is
set beyond size.  Based on patch by John Leitch.
: Fix overrun error in deque.index(). Found by John Leitch and
Bryce Darling.

: time_strftime() buffer over-read.

: To resolve a compatibility problem found with py2exe and
pywin32, imp.load_dynamic() once again ignores previously loaded modules
to support Python modules replacing themselves with extension modules.
Patch by Petr Viktorin.

: Fixed a bug in typing.py where isinstance([], typing.Iterable)
would return True once, then False on subsequent calls.

: Fixed buffer overread in BytesIO.readline() if a position is
set beyond size.  Based on patch by John Leitch.

: Fix overrun error in deque.index(). Found by John Leitch and
Bryce Darling.

================================================================================

# Changelog - Core and Builtins

List:
: Interpreter now starts properly when dynamic loading is
disabled.  Patch by Petr Viktorin.
: NAN operations are now handled correctly when python is
compiled with ICC even if -fp-model strict is not specified.
: A âpackageâ lacking a __name__ attribute when trying to perform
a     statement will trigger an ImportError instead of
an AttributeError.

: Interpreter now starts properly when dynamic loading is
disabled.  Patch by Petr Viktorin.

: NAN operations are now handled correctly when python is
compiled with ICC even if -fp-model strict is not specified.

: A âpackageâ lacking a __name__ attribute when trying to perform
a     statement will trigger an ImportError instead of
an AttributeError.

================================================================================

# Changelog - Library

List:
: Removes vcruntime140.dll dependency from Tcl/Tk.
: platform._syscmd_ver raises DeprecationWarning
: Fix Task.get_stack() for âasync defâ coroutines

: Removes vcruntime140.dll dependency from Tcl/Tk.

: platform._syscmd_ver raises DeprecationWarning

: Fix Task.get_stack() for âasync defâ coroutines

================================================================================

# Changelog - Core and Builtins

List:
: Resize odict in all cases that the underlying dict resizes.

: Resize odict in all cases that the underlying dict resizes.

================================================================================

# Changelog - Library (Part 1)

List:
: Signatures of codecs.encode() and codecs.decode() now are
compatible with pydoc.
: Importing uuid should not try to load libc on Windows
: _msvccompiler.py doesnât properly support manifests
: Better testing and documentation of binary operators. Patch by
Martin Panter.
: Update typing.py from GitHub repo.
: mock_open() now reads binary data correctly when the type of
read_data is bytes.  Initial patch by Aaron Hill.
: Handle fractional time in cookie expiry. Patch by ssh.
: Make it possible to compile the select module against the libc
headers from the Linux Standard Base, which do not include some EPOLL
macros.  Patch by Matt Frank.
: Fix timezones in email.utils.formatdate. Patch from Dmitry
Shachnev.
: imaplib raises TypeError if authenticator tries to abort. Patch
from Craig Holmquist.
: Fix ctypes.BigEndianStructure, swap correctly bytes. Patch
written by Matthieu Gautier.
: Document how to close the TCPServer listening socket. Patch
from Martin Panter.
: Update Windows and OS X installer builds to use SQLite 3.8.11.
: Add PATCH to wsgiref.validator. Patch from Luca Sbardella.
: Fix grammar regression for call syntax: âg(*a or b)â.

================================================================================

# Changelog - Library (Part 2)

: Signatures of codecs.encode() and codecs.decode() now are
compatible with pydoc.

: Importing uuid should not try to load libc on Windows

: _msvccompiler.py doesnât properly support manifests

: Better testing and documentation of binary operators. Patch by
Martin Panter.

: Update typing.py from GitHub repo.

: mock_open() now reads binary data correctly when the type of
read_data is bytes.  Initial patch by Aaron Hill.

: Handle fractional time in cookie expiry. Patch by ssh.

: Make it possible to compile the select module against the libc
headers from the Linux Standard Base, which do not include some EPOLL
macros.  Patch by Matt Frank.

: Fix timezones in email.utils.formatdate. Patch from Dmitry
Shachnev.

: imaplib raises TypeError if authenticator tries to abort. Patch
from Craig Holmquist.

: Fix ctypes.BigEndianStructure, swap correctly bytes. Patch
written by Matthieu Gautier.

: Document how to close the TCPServer listening socket. Patch
from Martin Panter.

: Update Windows and OS X installer builds to use SQLite 3.8.11.

: Add PATCH to wsgiref.validator. Patch from Luca Sbardella.

: Fix grammar regression for call syntax: âg(*a or b)â.

================================================================================

# Changelog - IDLE

List:
: Allow Idle to edit and run files with astral chars in name.
Patch by Mohd Sanad Zaki Rizvi.
: Idle editor default font. Switch from Courier to
platform-sensitive TkFixedFont.  This should not affect current customized
font selections.  If there is a problem, edit
$HOME/.idlerc/config-main.cfg and remove ââ entries from
[Editor Window].  Patch by Mark Roseman.
: Idle editor. When a file is run, put its name in the restart
bar. Do not print false prompts. Original patch by Adnan Umer.
: Idle menus. Remove tearoff lines. Patch by Roger Serwy.

: Allow Idle to edit and run files with astral chars in name.
Patch by Mohd Sanad Zaki Rizvi.

: Idle editor default font. Switch from Courier to
platform-sensitive TkFixedFont.  This should not affect current customized
font selections.  If there is a problem, edit
$HOME/.idlerc/config-main.cfg and remove ââ entries from
[Editor Window].  Patch by Mark Roseman.

: Idle editor. When a file is run, put its name in the restart
bar. Do not print false prompts. Original patch by Adnan Umer.

: Idle menus. Remove tearoff lines. Patch by Roger Serwy.

================================================================================

# Changelog - Documentation

List:
: Clarify the reference documentation for name resolution. This
includes removing the assumption that readers will be familiar with the
name resolution scheme Python used prior to the introduction of lexical
scoping for function namespaces. Patch by Ivan Levkivskyi.
: Improve reload() docs. Patch by Dorian Pula.
: Remove duplicate sentence from the FAQ.  Patch by Yongzhi Pan.
: Correct IO tutorial to match implementation regarding encoding
parameter to open function.

: Clarify the reference documentation for name resolution. This
includes removing the assumption that readers will be familiar with the
name resolution scheme Python used prior to the introduction of lexical
scoping for function namespaces. Patch by Ivan Levkivskyi.

: Improve reload() docs. Patch by Dorian Pula.

: Remove duplicate sentence from the FAQ.  Patch by Yongzhi Pan.

: Correct IO tutorial to match implementation regarding encoding
parameter to open function.

================================================================================

# Changelog - Tests

List:
: When running regrtest with the  command line option, a
test run is no longer marked as a failure if all tests succeed when
re-run.

: When running regrtest with the  command line option, a
test run is no longer marked as a failure if all tests succeed when
re-run.

================================================================================

# Changelog - Core and Builtins

List:
: Restored optimization of bytes.rfind() and bytearray.rfind()
for single-byte argument on Linux.
: Make  dictionary evaluation more consistent.
: Fix crash when set is mutated while being updated.
: Fix crash when dict is mutated while being updated.
: New approach for tokenizing async/await. As a consequence, it
is now possible to have one-line âasync def foo(): await ..â functions.
: Plug refleak on SyntaxError in function parameters annotations.
: memoryview: Allow arbitrary formats when casting to bytes.
Patch by Martin Panter.

: Restored optimization of bytes.rfind() and bytearray.rfind()
for single-byte argument on Linux.

: Make  dictionary evaluation more consistent.

: Fix crash when set is mutated while being updated.

: Fix crash when dict is mutated while being updated.

: New approach for tokenizing async/await. As a consequence, it
is now possible to have one-line âasync def foo(): await ..â functions.

: Plug refleak on SyntaxError in function parameters annotations.

: memoryview: Allow arbitrary formats when casting to bytes.
Patch by Martin Panter.

================================================================================

# Changelog - Library (Part 1)

List:
: rcompleter now prints a tab character instead of displaying
possible completions for an empty word.  Initial patch by Martin Sekera.
: Fixed crashes in _json functions called with arguments of
inappropriate type.
: shutil.copytree() now correctly handles symbolic links that
point to directories.  Patch by Eduardo Seabra and Thomas Kluyver.
: Fixed segmentation fault when gc.collect() is called during
constructing lru_cache (C implementation).
: Fix a regression in traceback.print_exception().  If
exc_traceback is None we shouldnât print a traceback header like described
in the documentation.
: Random.setstate() now validates the value of state last
element.
: Fixed an issue that caused inspect.getsource to return
incorrect results on nested functions.
: Improve unittest docs. Patch from Martin Panter and evilzero.
: Symbolic group references to open group in re patterns now are
explicitly forbidden as well as numeric group references.
: Fixed __eq__ and __ne__ methods of inspect classes.
: Fixed regression in the timeit module with multiline setup.
: unittest.mock.mock_open().reset_mock would recurse infinitely.
Patch from Nicola Palumbo and Laurent De Buyst.
: unittest.mock side_effects can now be exceptions again. This
was a regression vs Python 3.4. Patch from Ignacio Rossi
: chunk.Chunk.read() now always returns bytes, not str.
: Fixed reading out of the buffer in the re module.
: tarfile now raises a ReadError if an archive is truncated
inside a data segment.
: SMTP.auth() and SMTP.login() now support RFC 4954âs optional
initial-response argument to the SMTP AUTH command.
: Fix inspect.getsource() for âasync defâ functions. Patch by Kai
Groner.
: ast.get_docstring() for âasync defâ functions.

================================================================================

# Changelog - Library (Part 2)

: rcompleter now prints a tab character instead of displaying
possible completions for an empty word.  Initial patch by Martin Sekera.

: Fixed crashes in _json functions called with arguments of
inappropriate type.

: shutil.copytree() now correctly handles symbolic links that
point to directories.  Patch by Eduardo Seabra and Thomas Kluyver.

: Fixed segmentation fault when gc.collect() is called during
constructing lru_cache (C implementation).

: Fix a regression in traceback.print_exception().  If
exc_traceback is None we shouldnât print a traceback header like described
in the documentation.

: Random.setstate() now validates the value of state last
element.

: Fixed an issue that caused inspect.getsource to return
incorrect results on nested functions.

: Improve unittest docs. Patch from Martin Panter and evilzero.

: Symbolic group references to open group in re patterns now are
explicitly forbidden as well as numeric group references.

: Fixed __eq__ and __ne__ methods of inspect classes.

: Fixed regression in the timeit module with multiline setup.

: unittest.mock.mock_open().reset_mock would recurse infinitely.
Patch from Nicola Palumbo and Laurent De Buyst.

================================================================================

# Changelog - Library (Part 3)

: unittest.mock side_effects can now be exceptions again. This
was a regression vs Python 3.4. Patch from Ignacio Rossi

: chunk.Chunk.read() now always returns bytes, not str.

: Fixed reading out of the buffer in the re module.

: tarfile now raises a ReadError if an archive is truncated
inside a data segment.

: SMTP.auth() and SMTP.login() now support RFC 4954âs optional
initial-response argument to the SMTP AUTH command.

: Fix inspect.getsource() for âasync defâ functions. Patch by Kai
Groner.

: ast.get_docstring() for âasync defâ functions.

================================================================================

# Changelog - Build

List:
: Update Windows builds and OS X 10.5 installer to use OpenSSL
1.0.2d.

: Update Windows builds and OS X 10.5 installer to use OpenSSL
1.0.2d.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed possible buffer over-read in bytearray. The bytearray
object now always allocates place for trailing null byte and itâs buffer
now is always null-terminated.
Upgrade to Unicode 8.0.0.
: Add Py_tp_finalize slot for the stable ABI.
: Introduce a distinct type for  coroutines; add
types.CoroutineType, inspect.getcoroutinestate,
inspect.getcoroutinelocals; coroutines no longer use CO_GENERATOR flag;
sys.set_coroutine_wrapper works only for âasync defâ coroutines;
inspect.iscoroutine no longer uses collections.abc.Coroutine, itâs
intended to test for pure âasync defâ coroutines only; add new opcode:
GET_YIELD_FROM_ITER; fix generators wrapper used in types.coroutine to be
instance of collections.abc.Generator; collections.abc.Awaitable and
collections.abc.Coroutine can no longer be used to detect generator-based
coroutinesâuse inspect.isawaitable instead.
: Add gi_yieldfrom to generators and cr_await to coroutines.
Contributed by Benno Leslie and Yury Selivanov.
: Add new RecursionError exception. Patch by Georg Brandl.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed possible buffer over-read in bytearray. The bytearray
object now always allocates place for trailing null byte and itâs buffer
now is always null-terminated.

Upgrade to Unicode 8.0.0.

: Add Py_tp_finalize slot for the stable ABI.

: Introduce a distinct type for  coroutines; add
types.CoroutineType, inspect.getcoroutinestate,
inspect.getcoroutinelocals; coroutines no longer use CO_GENERATOR flag;
sys.set_coroutine_wrapper works only for âasync defâ coroutines;
inspect.iscoroutine no longer uses collections.abc.Coroutine, itâs
intended to test for pure âasync defâ coroutines only; add new opcode:
GET_YIELD_FROM_ITER; fix generators wrapper used in types.coroutine to be
instance of collections.abc.Generator; collections.abc.Awaitable and
collections.abc.Coroutine can no longer be used to detect generator-based
coroutinesâuse inspect.isawaitable instead.

: Add gi_yieldfrom to generators and cr_await to coroutines.
Contributed by Benno Leslie and Yury Selivanov.

: Add new RecursionError exception. Patch by Georg Brandl.

================================================================================

# Changelog - Library (Part 1)

List:
: mock_open.read_data can now be read from each instance, as it
could in Python 3.3.
: Fix use after free in an error case of the _pickle module.
: tarfile now tolerates number fields consisting of only
whitespace.
: Fixed doctype() related bugs in C implementation of
ElementTree. A deprecation warning no longer issued by XMLParser subclass
with default doctype() method.  Direct call of doctype() now issues a
warning.  Parserâs doctype() now is not called if targetâs doctype() is
called.  Based on patch by Martin Panter.
: Restore semantic round-trip correctness in tokenize/untokenize
for tab-indented blocks.
: Fixed possible buffer over-read in adpcm2lin() and lin2adpcm()
functions of the audioop module.
: The contextmanager decorator now works with functions with
keyword arguments called âfuncâ and âselfâ.  Patch by Martin Panter.
: Fix possible integer overflow in json accelerator module.
: ensure a previously set C errno doesnât disturb cmath.polar().
: Fixed AttributeError in measure() and metrics() methods of
tkinter.Font.
: C implementation of functools.lru_cache() now can be used with
methods.
: Set KeyError if PyDict_GetItemWithError returns NULL.
: Drop superfluous incref/decref.
: Check for changed OrderedDict size during iteration.
: Support keyword arguments in OrderedDict methods.
: Simplify the C OrderedDict fast nodes resize logic.
: Fix a ref leak in OrderedDict.__repr__.
: Defend against key-changes during iteration.

================================================================================

# Changelog - Library (Part 2)

: mock_open.read_data can now be read from each instance, as it
could in Python 3.3.

: Fix use after free in an error case of the _pickle module.

: tarfile now tolerates number fields consisting of only
whitespace.

: Fixed doctype() related bugs in C implementation of
ElementTree. A deprecation warning no longer issued by XMLParser subclass
with default doctype() method.  Direct call of doctype() now issues a
warning.  Parserâs doctype() now is not called if targetâs doctype() is
called.  Based on patch by Martin Panter.

: Restore semantic round-trip correctness in tokenize/untokenize
for tab-indented blocks.

: Fixed possible buffer over-read in adpcm2lin() and lin2adpcm()
functions of the audioop module.

: The contextmanager decorator now works with functions with
keyword arguments called âfuncâ and âselfâ.  Patch by Martin Panter.

: Fix possible integer overflow in json accelerator module.

: ensure a previously set C errno doesnât disturb cmath.polar().

: Fixed AttributeError in measure() and metrics() methods of
tkinter.Font.

: C implementation of functools.lru_cache() now can be used with
methods.

: Set KeyError if PyDict_GetItemWithError returns NULL.

================================================================================

# Changelog - Library (Part 3)

: Drop superfluous incref/decref.

: Check for changed OrderedDict size during iteration.

: Support keyword arguments in OrderedDict methods.

: Simplify the C OrderedDict fast nodes resize logic.

: Fix a ref leak in OrderedDict.__repr__.

: Defend against key-changes during iteration.

================================================================================

# Changelog - Tests

List:
: _testmultiphase and xxlimited now use tp_traverse and
tp_finalize to avoid reference leaks encountered when combining tp_dealloc
with PyType_FromSpec (see  for details)

: _testmultiphase and xxlimited now use tp_traverse and
tp_finalize to avoid reference leaks encountered when combining tp_dealloc
with PyType_FromSpec (see  for details)

================================================================================

# Changelog - Documentation

List:
: Update documentation to cover multi-phase initialization for
extension modules (PEP 489). Patch by Petr Viktorin.
: Clarify what is meant by âidentifierâ in the context of
string.Template instances.

: Update documentation to cover multi-phase initialization for
extension modules (PEP 489). Patch by Petr Viktorin.

: Clarify what is meant by âidentifierâ in the context of
string.Template instances.

================================================================================

# Changelog - Build

List:
: Update Windows builds and OS X 10.5 installer to use OpenSSL
1.0.2c.

: Update Windows builds and OS X 10.5 installer to use OpenSSL
1.0.2c.

================================================================================

# Changelog - Core and Builtins

List:
: The startswith and endswith methods of the str class no longer
return True when finding the empty string and the indexes are completely
out of range.
: Update uses of PyObject_IsTrue(), PyObject_Not(),
PyObject_IsInstance(), PyObject_RichCompareBool() and _PyDict_Contains()
to check for and handle errors correctly.
: Fix importing one character extension modules.
: In dictionary displays, evaluate the key before the value.
: Fixed regression that prevented importing extension modules
from inside packages. Patch by Petr Viktorin.

: The startswith and endswith methods of the str class no longer
return True when finding the empty string and the indexes are completely
out of range.

: Update uses of PyObject_IsTrue(), PyObject_Not(),
PyObject_IsInstance(), PyObject_RichCompareBool() and _PyDict_Contains()
to check for and handle errors correctly.

: Fix importing one character extension modules.

: In dictionary displays, evaluate the key before the value.

: Fixed regression that prevented importing extension modules
from inside packages. Patch by Petr Viktorin.

================================================================================

# Changelog - Library

List:
: Fix a crash in the StreamWriter.reset() of CJK codecs.
: Add math.isclose() and cmath.isclose() functions as per
. Contributed by Chris Barker and Tal Einat.
: Fixed timeit when the statement is a string and the setup is
not.
: Fixed audioop.ratecv() with non-default weightB argument.
Original patch by David Moore.
: Add a C implementation of OrderedDict.
: Fix inspect.signature to fail correctly for builtin types
lacking signature information.  Initial patch by James Powell.

: Fix a crash in the StreamWriter.reset() of CJK codecs.

: Add math.isclose() and cmath.isclose() functions as per
. Contributed by Chris Barker and Tal Einat.

: Fixed timeit when the statement is a string and the setup is
not.

: Fixed audioop.ratecv() with non-default weightB argument.
Original patch by David Moore.

: Add a C implementation of OrderedDict.

: Fix inspect.signature to fail correctly for builtin types
lacking signature information.  Initial patch by James Powell.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Fixed optimization of property descriptor getter.
: PEP 489: Multi-phase extension module initialization. Patch by
Petr Viktorin.
: Add pyvenv.cfg option to suppress registry/environment lookup
for generating sys.path on Windows.
: Fixed system error in the comparison of faked
types.SimpleNamespace.
: Fixed integer overflow in iterator object.  Patch by Clement
Rouault.
: Fix a possible buffer overrun when deleting a slice from the
front of a bytearray and then appending some other bytes data.
: Fixed exception type checking in standard error handlers.
: The UTF-32 encoder is now 3x to 7x faster.
: Optimize set_merge() for cases where the target is empty.
(Contributed by Serhiy Storchaka.)
: PEP 448: Additional Unpacking Generalizations.
: Make warnings.warn_explicit more robust against mutation of the
warnings.filters list.
: Avoid a crash when a delegated generator raises an unnormalized
StopIteration exception.  Patch by Stefan Behnel.
: Optimize property() getter calls.  Patch by Joe Jevnik.
: Move path-based importlib bootstrap code to a separate frozen
module.
: Fix namespace package imports.
: Fix tokenizer crash when processing undecodable source code.
: Added a hex() method to bytes, bytearray, and memoryview.
: PEP 479: Change StopIteration handling inside generators.
: PEP 492: Coroutines with async and await syntax.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Fixed optimization of property descriptor getter.

: PEP 489: Multi-phase extension module initialization. Patch by
Petr Viktorin.

: Add pyvenv.cfg option to suppress registry/environment lookup
for generating sys.path on Windows.

: Fixed system error in the comparison of faked
types.SimpleNamespace.

: Fixed integer overflow in iterator object.  Patch by Clement
Rouault.

: Fix a possible buffer overrun when deleting a slice from the
front of a bytearray and then appending some other bytes data.

: Fixed exception type checking in standard error handlers.

: The UTF-32 encoder is now 3x to 7x faster.

: Optimize set_merge() for cases where the target is empty.
(Contributed by Serhiy Storchaka.)

: PEP 448: Additional Unpacking Generalizations.

: Make warnings.warn_explicit more robust against mutation of the
warnings.filters list.

: Avoid a crash when a delegated generator raises an unnormalized
StopIteration exception.  Patch by Stefan Behnel.

: Optimize property() getter calls.  Patch by Joe Jevnik.

: Move path-based importlib bootstrap code to a separate frozen
module.

: Fix namespace package imports.

: Fix tokenizer crash when processing undecodable source code.

================================================================================

# Changelog - Core and Builtins (Part 3)

: Added a hex() method to bytes, bytearray, and memoryview.

: PEP 479: Change StopIteration handling inside generators.

: PEP 492: Coroutines with async and await syntax.

================================================================================

# Changelog - Library (Part 1)

List:
: Added C implementation of functools.lru_cache().  Based on
patches by Matt Joiner and Alexey Kachayev.
: The tempfile module now accepts bytes for prefix, suffix and
dir parameters and returns bytes in such situations (matching the os
module APIs).
: collections.UserString now supports __getnewargs__(),
__rmod__(), casefold(), format_map(), isprintable(), and maketrans().
Patch by Joe Jevnik.
: Prevents termination when an invalid format string is
encountered on Windows in strftime.
: PEP 484: Add the typing module.
: The collections.abc.Sequence() abstract base class added
 and  parameters to the index() mixin. Patch by Devin
Jeanpierre.
: Replaced the tkinter._fix module used for setting up the
Tcl/Tk environment on Windows with a private function in the 
module that makes no permanent changes to the environment.
: Fixed segmentation fault in sqlite3.Row constructor with faked
cursor type.
: assertRaises(), assertRaisesRegex(), assertWarns() and
assertWarnsRegex() assertments now check the type of the first argument to
prevent possible user error.  Based on patch by Daniel Wagner-Hall.
: Add missing method stubs to _io.RawIOBase.  Patch by Laura
Rupprecht.
: attrgetter, itemgetter and methodcaller objects in the operator
module now support pickling.  Added readable and evaluable repr for these
objects. Based on patch by Josh Rosenberg.
: tempfile.gettempdir() and tempfile.mkdtemp() now try again when
a directory with the chosen name already exists on Windows as well as on
Unix. tempfile.mkstemp() now fails early if parent directory is not valid
(not exists or is a file) on Windows.
: Improved error message in os.path.join() with single argument.
: Increased time precision and random number range in
email.utils.make_msgid() to strengthen the uniqueness of the message ID.
: Fixed various crashes in corner cases in C implementation of
ElementTree.
: msilib.FCICreate() now raises TypeError in the case of a bad
argument instead of a ValueError with a bogus FCI error number. Patch by
Jeffrey Armstrong.
:  argument added to urllib.parse.urlencode.
: New mangle_from policy option for email, default True for
compat32, but False for all other policies.
: The email library now supports RFC 6532: it can generate
headers using utf-8 instead of encoded words.
: Added support for the LZMA compression in distutils.
: poplib now supports RFC 6856 (UTF8).
: Optimized pprint functions for builtin scalar types.
: smtplib now supports RFC 6531 (SMTPUTF8).
: Random generator objects now consume 2x less memory on 64-bit.
: platform.dist() and platform.linux_distribution() functions are
now deprecated.  Initial patch by Vajrasky Kok.
: Added the math.gcd() function.  The fractions.gcd() function
now is deprecated.  Based on patch by Mark Dickinson.
: Property() docstrings are now writeable. (Patch by Berker
Peksag.)
: Added support for the koi8_t encoding.
: Added support for the kz1048 encoding.
: peek and read1 methods of BufferedReader now raise ValueError
if they called on a closed object. Patch by John Hergenroeder.
: smtpd now supports the 8BITMIME extension whenever the new
decode_data constructor argument is set to False.
: optimize heapq.heapify() for better cache performance when
heapifying large lists.
: imaplib now supports RFC 5161 (enable), RFC 6855
(utf8/internationalized email) and automatically encodes non-ASCII
usernames and passwords to UTF8.
: When calling a _sqlite.Connection, it now complains if passed
any keyword arguments.  Previously it silently ignored them.
: Remove ignored and erroneous âkwargsâ parameters from three
METH_VARARGS methods on _sqlite.Connection.
: assertRaises(), assertRaisesRegex(), assertWarns() and
assertWarnsRegex() checks now emits a deprecation warning when callable is
None or keyword arguments except msg is passed in the context manager
mode.
: Add a collections.abc.Generator abstract base class.
Contributed by Stefan Behnel.
: Tkinterâs getint() and getdouble() now support Tcl_Obj.
Tkinterâs getdouble() now supports any numbers (in particular int).
: Added negative limit support in the traceback module. Based on
patch by Dmitry Kazakov.
: Fix possible crash in json.encode with poorly behaved dict
subclasses.
: On POSIX, os.getcwd() now supports paths longer than 1025 bytes.
Patch written by William Orr.
: add difflib.diff_bytes() to support comparison of byte strings
(fixes a regression from Python 2).
: Fall back to sequential compilation when ProcessPoolExecutor
doesnât exist. Patch by Claudiu Popa.
: Fixed resolving attributes with boolean value is False in
pydoc.
Fix asyncio issue 235: LifoQueue and PriorityQueueâs put didnât increment
unfinished tasks (this bug was introduced when JoinableQueue was merged
with Queue).
: os functions now reject paths with embedded null character on
Windows instead of silently truncating them.
: binascii.crc_hqx() could return an integer outside of the range
0-0xffff for empty data.
: urllib.error.HTTPError now has a proper repr() representation.
Patch by Berker Peksag.
asyncio: New event loop APIs: set_task_factory() and get_task_factory().
asyncio: async() function is deprecated in favour of ensure_future().
: asyncio.Lock, Condition, Semaphore, and BoundedSemaphore
support new âasync withâ syntax.  Contributed by Yury Selivanov.
: Support âasync forâ for asyncio.StreamReader. Contributed by
Yury Selivanov.
: Add AsyncIterator and AsyncIterable ABCs to collections.abc.
Contributed by Yury Selivanov.
: Implement informative __repr__ for inspect.BoundArguments.
Contributed by Yury Selivanov.
: Implement inspect.BoundArgument.apply_defaults() method.
Contributed by Yury Selivanov.
: Add âfollow_wrappedâ argument to
inspect.Signature.from_callable() and inspect.signature(). Contributed by
Yury Selivanov.
: Deprecate inspect.Signature.from_function() and
inspect.Signature.from_builtin().
: Fix inspect.classify_class_attrs() to support attributes with
overloaded __eq__ and __bool__.  Patch by Mike Bayer.
: Fix inspect.signature() to correctly unwrap wrappers around
bound methods.

================================================================================

# Changelog - Library (Part 2)

: Added C implementation of functools.lru_cache().  Based on
patches by Matt Joiner and Alexey Kachayev.

: The tempfile module now accepts bytes for prefix, suffix and
dir parameters and returns bytes in such situations (matching the os
module APIs).

: collections.UserString now supports __getnewargs__(),
__rmod__(), casefold(), format_map(), isprintable(), and maketrans().
Patch by Joe Jevnik.

: Prevents termination when an invalid format string is
encountered on Windows in strftime.

: PEP 484: Add the typing module.

: The collections.abc.Sequence() abstract base class added
 and  parameters to the index() mixin. Patch by Devin
Jeanpierre.

: Replaced the tkinter._fix module used for setting up the
Tcl/Tk environment on Windows with a private function in the 
module that makes no permanent changes to the environment.

: Fixed segmentation fault in sqlite3.Row constructor with faked
cursor type.

: assertRaises(), assertRaisesRegex(), assertWarns() and
assertWarnsRegex() assertments now check the type of the first argument to
prevent possible user error.  Based on patch by Daniel Wagner-Hall.

: Add missing method stubs to _io.RawIOBase.  Patch by Laura
Rupprecht.

================================================================================

# Changelog - Library (Part 3)

: attrgetter, itemgetter and methodcaller objects in the operator
module now support pickling.  Added readable and evaluable repr for these
objects. Based on patch by Josh Rosenberg.

: tempfile.gettempdir() and tempfile.mkdtemp() now try again when
a directory with the chosen name already exists on Windows as well as on
Unix. tempfile.mkstemp() now fails early if parent directory is not valid
(not exists or is a file) on Windows.

: Improved error message in os.path.join() with single argument.

: Increased time precision and random number range in
email.utils.make_msgid() to strengthen the uniqueness of the message ID.

: Fixed various crashes in corner cases in C implementation of
ElementTree.

: msilib.FCICreate() now raises TypeError in the case of a bad
argument instead of a ValueError with a bogus FCI error number. Patch by
Jeffrey Armstrong.

:  argument added to urllib.parse.urlencode.

: New mangle_from policy option for email, default True for
compat32, but False for all other policies.

: The email library now supports RFC 6532: it can generate
headers using utf-8 instead of encoded words.

: Added support for the LZMA compression in distutils.

: poplib now supports RFC 6856 (UTF8).

================================================================================

# Changelog - Library (Part 4)

: Optimized pprint functions for builtin scalar types.

: smtplib now supports RFC 6531 (SMTPUTF8).

: Random generator objects now consume 2x less memory on 64-bit.

: platform.dist() and platform.linux_distribution() functions are
now deprecated.  Initial patch by Vajrasky Kok.

: Added the math.gcd() function.  The fractions.gcd() function
now is deprecated.  Based on patch by Mark Dickinson.

: Property() docstrings are now writeable. (Patch by Berker
Peksag.)

: Added support for the koi8_t encoding.

: Added support for the kz1048 encoding.

: peek and read1 methods of BufferedReader now raise ValueError
if they called on a closed object. Patch by John Hergenroeder.

: smtpd now supports the 8BITMIME extension whenever the new
decode_data constructor argument is set to False.

: optimize heapq.heapify() for better cache performance when
heapifying large lists.

: imaplib now supports RFC 5161 (enable), RFC 6855
(utf8/internationalized email) and automatically encodes non-ASCII
usernames and passwords to UTF8.

: When calling a _sqlite.Connection, it now complains if passed
any keyword arguments.  Previously it silently ignored them.

================================================================================

# Changelog - Library (Part 5)

: Remove ignored and erroneous âkwargsâ parameters from three
METH_VARARGS methods on _sqlite.Connection.

: assertRaises(), assertRaisesRegex(), assertWarns() and
assertWarnsRegex() checks now emits a deprecation warning when callable is
None or keyword arguments except msg is passed in the context manager
mode.

: Add a collections.abc.Generator abstract base class.
Contributed by Stefan Behnel.

: Tkinterâs getint() and getdouble() now support Tcl_Obj.
Tkinterâs getdouble() now supports any numbers (in particular int).

: Added negative limit support in the traceback module. Based on
patch by Dmitry Kazakov.

: Fix possible crash in json.encode with poorly behaved dict
subclasses.

: On POSIX, os.getcwd() now supports paths longer than 1025 bytes.
Patch written by William Orr.

: add difflib.diff_bytes() to support comparison of byte strings
(fixes a regression from Python 2).

: Fall back to sequential compilation when ProcessPoolExecutor
doesnât exist. Patch by Claudiu Popa.

: Fixed resolving attributes with boolean value is False in
pydoc.

================================================================================

# Changelog - Library (Part 6)

Fix asyncio issue 235: LifoQueue and PriorityQueueâs put didnât increment
unfinished tasks (this bug was introduced when JoinableQueue was merged
with Queue).

: os functions now reject paths with embedded null character on
Windows instead of silently truncating them.

: binascii.crc_hqx() could return an integer outside of the range
0-0xffff for empty data.

: urllib.error.HTTPError now has a proper repr() representation.
Patch by Berker Peksag.

asyncio: New event loop APIs: set_task_factory() and get_task_factory().

asyncio: async() function is deprecated in favour of ensure_future().

: asyncio.Lock, Condition, Semaphore, and BoundedSemaphore
support new âasync withâ syntax.  Contributed by Yury Selivanov.

: Support âasync forâ for asyncio.StreamReader. Contributed by
Yury Selivanov.

: Add AsyncIterator and AsyncIterable ABCs to collections.abc.
Contributed by Yury Selivanov.

: Implement informative __repr__ for inspect.BoundArguments.
Contributed by Yury Selivanov.

: Implement inspect.BoundArgument.apply_defaults() method.
Contributed by Yury Selivanov.

: Add âfollow_wrappedâ argument to
inspect.Signature.from_callable() and inspect.signature(). Contributed by
Yury Selivanov.

================================================================================

# Changelog - Library (Part 7)

: Deprecate inspect.Signature.from_function() and
inspect.Signature.from_builtin().

: Fix inspect.classify_class_attrs() to support attributes with
overloaded __eq__ and __bool__.  Patch by Mike Bayer.

: Fix inspect.signature() to correctly unwrap wrappers around
bound methods.

================================================================================

# Changelog - IDLE

List:
: remove unused names and imports in idlelib. Initial patch by Al
Sweigart.

: remove unused names and imports in idlelib. Initial patch by Al
Sweigart.

================================================================================

# Changelog - Tests

List:
: test_zipfile no longer fails if the word âbadâ appears anywhere
in the name of the current directory.
: Move script_helper into the support package. Patch by Christie
Wilson.

: test_zipfile no longer fails if the word âbadâ appears anywhere
in the name of the current directory.

: Move script_helper into the support package. Patch by Christie
Wilson.

================================================================================

# Changelog - Documentation

List:
: Add File Handlers subsection with createfilehandler to tkinter
doc.  Remove obsolete example from FAQ.  Patch by Martin Panter.
: Document the name binding behavior for submodule imports.
: Fix typo in man page for -I command option: -s, not -S

: Add File Handlers subsection with createfilehandler to tkinter
doc.  Remove obsolete example from FAQ.  Patch by Martin Panter.

: Document the name binding behavior for submodule imports.

: Fix typo in man page for -I command option: -s, not -S

================================================================================

# Changelog - Tools/Demos

List:
: Improved Argument Clinicâs mapping of converters to legacy
âformat unitsâ. Updated the documentation to match.
: Argument Clinic converters now use accept={type} instead of
types={âtypeâ} to specify the types the converter accepts.
: h2py now supports arbitrary filenames in #include.
: make patchcheck now supports git checkouts, too.

: Improved Argument Clinicâs mapping of converters to legacy
âformat unitsâ. Updated the documentation to match.

: Argument Clinic converters now use accept={type} instead of
types={âtypeâ} to specify the types the converter accepts.

: h2py now supports arbitrary filenames in #include.

: make patchcheck now supports git checkouts, too.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: Under Linux, GNU/KFreeBSD and the Hurd, C extensions now
include the architecture triplet in the extension name, to make it easy to
test builds for different ABIs in the same working tree.  Under OS X, the
extension name now includes -style information.
: Added Linux-specific socket constant CAN_RAW_FD_FRAMES. Patch
courtesy of Joe Jevnik.
: Implement : removal of .pyo files.
: Donât enable GC for user subclasses of non-GC types that donât
add any new fields.  Patch by Eugene Toder.
: Avoid a deadlock at shutdown if a daemon thread is aborted
while it is holding a lock to a buffered I/O object, and the main thread
tries to use the same I/O object (typically stdout or stderr).  A fatal
error is emitted instead.
: Fixed formatting Windows error messages on Wine. Patch by
Martin Panter.
: %c, %o, %x, and %X in bytes formatting now raise TypeError on
non-integer input.
: Fix possible null pointer dereference in list.sort in out of
memory conditions.
: PyCFunction_New function is exposed by python DLL again.

================================================================================

# Changelog - Core and Builtins (Part 2)

: Under Linux, GNU/KFreeBSD and the Hurd, C extensions now
include the architecture triplet in the extension name, to make it easy to
test builds for different ABIs in the same working tree.  Under OS X, the
extension name now includes -style information.

: Added Linux-specific socket constant CAN_RAW_FD_FRAMES. Patch
courtesy of Joe Jevnik.

: Implement : removal of .pyo files.

: Donât enable GC for user subclasses of non-GC types that donât
add any new fields.  Patch by Eugene Toder.

: Avoid a deadlock at shutdown if a daemon thread is aborted
while it is holding a lock to a buffered I/O object, and the main thread
tries to use the same I/O object (typically stdout or stderr).  A fatal
error is emitted instead.

: Fixed formatting Windows error messages on Wine. Patch by
Martin Panter.

: %c, %o, %x, and %X in bytes formatting now raise TypeError on
non-integer input.

: Fix possible null pointer dereference in list.sort in out of
memory conditions.

: PyCFunction_New function is exposed by python DLL again.

================================================================================

# Changelog - Library (Part 1)

List:
: tokenize.open() now closes the temporary binary file on error
to fix a resource warning.
: new debuglevel 2 in smtplib adds timestamps to debug output.
: urllib.request now supports sending auth credentials
automatically after the first 401.  This enhancement is a superset of the
enhancement from  and supersedes that change.
: Fix a regression in urljoin() introduced in 901e4e52b20a. Patch
by Demian Brecht.
: Adds _curses.update_lines_cols().  Patch by Arnon Yaari
: Provide default argument for ndigits in round. Patch by
Vajrasky Kok.
: Add a numeric_owner parameter to tarfile.TarFile.extract and
tarfile.TarFile.extractall. Patch by Michael Vogt and Eric Smith.
: Add a subprocess.run() function than returns a CalledProcess
instance for a more consistent API than the existing call* functions.
: inspect.getsourcelines() now tries to compute the start and end
lines from the code object, fixing an issue when a lambda function is used
as decorator argument. Patch by Thomas Ballinger and Allison Kaptur.
: Fix possible integer overflows in the pickle module.
: Allow â[â and â]â in cookie values.
The keywords attribute of functools.partial is now always a dictionary.
: Add missing newline to the PyCompileError error message. Patch
by Alex Shkop.
: Avoid blowing memory when allocating a multiprocessing shared
array thatâs larger than 50% of the available RAM.  Patch by MÃ©dÃ©ric
Boquien.
: Improve BOM handling when seeking to multiple positions of a
writable text file.
: Removed deprecated asyncio JoinableQueue.
: Limit the size of decompressed data when reading from GzipFile,
BZ2File or LZMAFile.  This defeats denial of service attacks using
compressed bombs (i.e. compressed payloads which decompress to a huge
size).  Patch by Martin Panter and Nikolaus Rath.
: Added Python implementation of io.FileIO.
: close() methods in multiple modules now are idempotent and more
robust at shutdown. If they need to release multiple resources, all are
released even if errors occur.
: Raise same exception on both Python 2 and 3 if sem_open is not
available. Patch by Davin Potts.
: The subprocess now module includes SubprocessError and
TimeoutError in its list of exported names for the users wild enough to
use  subprocess  .
: Added DefragResult, ParseResult, SplitResult,
DefragResultBytes, ParseResultBytes, and SplitResultBytes to
urllib.parse.__all__. Patch by Martin Panter.
: urllib.request.ftpwrapper constructor now closes the socket if
the FTP connection failed to fix a ResourceWarning.
: socket.socket.sendall() does no more reset the socket
timeout each time data is sent successfully. The socket timeout is now the
maximum total duration to send all data.
: An order of multiline pprint output of set or dict containing
orderable and non-orderable elements no longer depends on iteration order
of set or dict.
: _tkinter.tkapp.getboolean() now supports Tcl_Obj and always
returns bool. tkinter.BooleanVar now validates input values (accepted
bool, int, str, and Tcl_Obj).  tkinter.BooleanVar.get() now always returns
bool.
: xml.sax.parseString() now supports string argument.
: Fixed formatting ctypes error messages on Cygwin. Patch by
Makoto Kato.
: inspect.getdoc() now follows inheritance chains.
: SAX parsers now support a character stream of InputSource
object.
: Tkinter now supports 64-bit integers added in Tcl 8.4 and
arbitrary precision integers added in Tcl 8.5.
: Fix socket.sendto(), use the C Py_ssize_t type to store the
result of sendto() instead of the C int type.
: socket.socket.connect() now waits until the connection
completes instead of raising InterruptedError if the connection is
interrupted by signals, signal handlers donât raise an exception and the
socket is blocking or has a timeout. socket.socket.connect() still
raise InterruptedError for non-blocking sockets.
: Tkinter now supports new boolean type in Tcl 8.5.
: Fix the faulthandler module to handle reentrant calls to its
signal handlers.
: linecache now clears the cache and returns an empty result on
MemoryError.
: Added os.path.commonpath(). Implemented in posixpath and
ntpath. Based on patch by Rafik Draoui.
: Serializing more âlookupableâ objects (such as unbound methods
or nested classes) now are supported with pickle protocols < 4.
: sqlite3.Row now supports slice indexing.
: Fixed 2to3 and 3to2 compatible pickle mappings.  Fixed
ambiguous reverse mappings.  Added many new mappings.  Import mapping is
no longer applied to modules already mapped with full name mapping.
: select.select() is now retried automatically with the
recomputed timeout when interrupted by a signal, except if the signal
handler raises an exception. This change is part of the .
: When built from an existing file descriptor, io.FileIO() now
only calls fstat() once. Before fstat() was called twice, which was not
necessary.
: collections.deque() objects now support __add__, __mul__, and
__imul__().
: csv.Writer.writerow() now supports arbitrary iterables.
: The new email header parser now handles duplicate MIME
parameter names without error, similar to how get_param behaves.
: Fix os.utime(), it now rounds the timestamp towards minus
infinity (-inf) instead of rounding towards zero.
: Fix MagicMockâs initializer to work with __methods__, just like
configure_mock().  Patch by Kasia Jachim.

================================================================================

# Changelog - Library (Part 2)

: tokenize.open() now closes the temporary binary file on error
to fix a resource warning.

: new debuglevel 2 in smtplib adds timestamps to debug output.

: urllib.request now supports sending auth credentials
automatically after the first 401.  This enhancement is a superset of the
enhancement from  and supersedes that change.

: Fix a regression in urljoin() introduced in 901e4e52b20a. Patch
by Demian Brecht.

: Adds _curses.update_lines_cols().  Patch by Arnon Yaari

: Provide default argument for ndigits in round. Patch by
Vajrasky Kok.

: Add a numeric_owner parameter to tarfile.TarFile.extract and
tarfile.TarFile.extractall. Patch by Michael Vogt and Eric Smith.

: Add a subprocess.run() function than returns a CalledProcess
instance for a more consistent API than the existing call* functions.

: inspect.getsourcelines() now tries to compute the start and end
lines from the code object, fixing an issue when a lambda function is used
as decorator argument. Patch by Thomas Ballinger and Allison Kaptur.

: Fix possible integer overflows in the pickle module.

: Allow â[â and â]â in cookie values.

The keywords attribute of functools.partial is now always a dictionary.

================================================================================

# Changelog - Library (Part 3)

: Add missing newline to the PyCompileError error message. Patch
by Alex Shkop.

: Avoid blowing memory when allocating a multiprocessing shared
array thatâs larger than 50% of the available RAM.  Patch by MÃ©dÃ©ric
Boquien.

: Improve BOM handling when seeking to multiple positions of a
writable text file.

: Removed deprecated asyncio JoinableQueue.

: Limit the size of decompressed data when reading from GzipFile,
BZ2File or LZMAFile.  This defeats denial of service attacks using
compressed bombs (i.e. compressed payloads which decompress to a huge
size).  Patch by Martin Panter and Nikolaus Rath.

: Added Python implementation of io.FileIO.

: close() methods in multiple modules now are idempotent and more
robust at shutdown. If they need to release multiple resources, all are
released even if errors occur.

: Raise same exception on both Python 2 and 3 if sem_open is not
available. Patch by Davin Potts.

: The subprocess now module includes SubprocessError and
TimeoutError in its list of exported names for the users wild enough to
use  subprocess  .

================================================================================

# Changelog - Library (Part 4)

: Added DefragResult, ParseResult, SplitResult,
DefragResultBytes, ParseResultBytes, and SplitResultBytes to
urllib.parse.__all__. Patch by Martin Panter.

: urllib.request.ftpwrapper constructor now closes the socket if
the FTP connection failed to fix a ResourceWarning.

: socket.socket.sendall() does no more reset the socket
timeout each time data is sent successfully. The socket timeout is now the
maximum total duration to send all data.

: An order of multiline pprint output of set or dict containing
orderable and non-orderable elements no longer depends on iteration order
of set or dict.

: _tkinter.tkapp.getboolean() now supports Tcl_Obj and always
returns bool. tkinter.BooleanVar now validates input values (accepted
bool, int, str, and Tcl_Obj).  tkinter.BooleanVar.get() now always returns
bool.

: xml.sax.parseString() now supports string argument.

: Fixed formatting ctypes error messages on Cygwin. Patch by
Makoto Kato.

: inspect.getdoc() now follows inheritance chains.

: SAX parsers now support a character stream of InputSource
object.

: Tkinter now supports 64-bit integers added in Tcl 8.4 and
arbitrary precision integers added in Tcl 8.5.

================================================================================

# Changelog - Library (Part 5)

: Fix socket.sendto(), use the C Py_ssize_t type to store the
result of sendto() instead of the C int type.

: socket.socket.connect() now waits until the connection
completes instead of raising InterruptedError if the connection is
interrupted by signals, signal handlers donât raise an exception and the
socket is blocking or has a timeout. socket.socket.connect() still
raise InterruptedError for non-blocking sockets.

: Tkinter now supports new boolean type in Tcl 8.5.

: Fix the faulthandler module to handle reentrant calls to its
signal handlers.

: linecache now clears the cache and returns an empty result on
MemoryError.

: Added os.path.commonpath(). Implemented in posixpath and
ntpath. Based on patch by Rafik Draoui.

: Serializing more âlookupableâ objects (such as unbound methods
or nested classes) now are supported with pickle protocols < 4.

: sqlite3.Row now supports slice indexing.

: Fixed 2to3 and 3to2 compatible pickle mappings.  Fixed
ambiguous reverse mappings.  Added many new mappings.  Import mapping is
no longer applied to modules already mapped with full name mapping.

================================================================================

# Changelog - Library (Part 6)

: select.select() is now retried automatically with the
recomputed timeout when interrupted by a signal, except if the signal
handler raises an exception. This change is part of the .

: When built from an existing file descriptor, io.FileIO() now
only calls fstat() once. Before fstat() was called twice, which was not
necessary.

: collections.deque() objects now support __add__, __mul__, and
__imul__().

: csv.Writer.writerow() now supports arbitrary iterables.

: The new email header parser now handles duplicate MIME
parameter names without error, similar to how get_param behaves.

: Fix os.utime(), it now rounds the timestamp towards minus
infinity (-inf) instead of rounding towards zero.

: Fix MagicMockâs initializer to work with __methods__, just like
configure_mock().  Patch by Kasia Jachim.

================================================================================

# Changelog - Build

List:
: FreeBSD now uses â1.0â in the SOVERSION as other operating
systems, instead of just â1â.
: Argument Clinic now generates code into separate files by
default.

: FreeBSD now uses â1.0â in the SOVERSION as other operating
systems, instead of just â1â.

: Argument Clinic now generates code into separate files by
default.

================================================================================

# Changelog - Tests

List:
: Added test.support.start_threads() for running and cleaning up
multiple threads.
: test.regrtest now emits a warning if temporary files or
directories are left after running a test.

: Added test.support.start_threads() for running and cleaning up
multiple threads.

: test.regrtest now emits a warning if temporary files or
directories are left after running a test.

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: pygettext now uses standard +NNNN format in the
POT-Creation-Date header.
: Argument Clinicâs understanding of format units accepting
bytes, bytearrays, and buffers is now consistent with both the
documentation and the implementation.
: Argument Clinic now wraps long impl prototypes at column 78.
: Argument Clinic now ensures that functions without docstrings
have signatures.
: Argument Clinic now generates argument parsing code with
PyArg_Parse instead of PyArg_ParseTuple if possible.
: Argument Clinic is now smarter about generating the â#ifndefâ
(empty) definition of the methoddef macro: itâs only generated once, even
if Argument Clinic processes the same symbol multiple times, and itâs
emitted at the end of all processing rather than immediately after the
first use.

: pygettext now uses standard +NNNN format in the
POT-Creation-Date header.

: Argument Clinicâs understanding of format units accepting
bytes, bytearrays, and buffers is now consistent with both the
documentation and the implementation.

: Argument Clinic now wraps long impl prototypes at column 78.

: Argument Clinic now ensures that functions without docstrings
have signatures.

================================================================================

# Changelog - Tools/Demos (Part 2)

: Argument Clinic now generates argument parsing code with
PyArg_Parse instead of PyArg_ParseTuple if possible.

: Argument Clinic is now smarter about generating the â#ifndefâ
(empty) definition of the methoddef macro: itâs only generated once, even
if Argument Clinic processes the same symbol multiple times, and itâs
emitted at the end of all processing rather than immediately after the
first use.

================================================================================

# Changelog - C API

List:
: PyImport_ReInitLock() now checks for lock allocation error

: PyImport_ReInitLock() now checks for lock allocation error

================================================================================

# Changelog - Core and Builtins

List:
: Increased performance of string search operations (str.find,
str.index, str.count, the in operator, str.split, str.partition) with
arguments of different kinds (UCS1, UCS2, UCS4).
: Python doesnât support anymore platforms without stat() or
fstat(), these functions are always required.
: The -b option now affects comparisons of bytes with int.
: Memoryviews now allow tuple indexing (including for
multi-dimensional memoryviews).
: Fixed generator lambdas.  Patch by Bruno Cauet.
: Fix the default __sizeof__ implementation for variable-sized
objects.

: Increased performance of string search operations (str.find,
str.index, str.count, the in operator, str.split, str.partition) with
arguments of different kinds (UCS1, UCS2, UCS4).

: Python doesnât support anymore platforms without stat() or
fstat(), these functions are always required.

: The -b option now affects comparisons of bytes with int.

: Memoryviews now allow tuple indexing (including for
multi-dimensional memoryviews).

: Fixed generator lambdas.  Patch by Bruno Cauet.

: Fix the default __sizeof__ implementation for variable-sized
objects.

================================================================================

# Changelog - Library (Part 1)

List:
: The groupindex attribute of regular expression pattern object
now is non-modifiable mapping.
: Ignore KeyboardInterrupt when the pydoc pager is active. This
mimics the behavior of the standard unix pagers, and prevents pipepager
from shutting down while the pager itself is still running.
: pprint() of OrderedDict now outputs the same representation as
repr().
: Removed IsBadStringPtr calls in ctypes
: Improved some re error messages using regex for hints.
: ntpath.expandvars() no longer loses unbalanced single quotes.
: The zipfile.ZipFile.open function now supports âxâ (exclusive
creation) mode.
: The reader in BufferedRWPair now is closed even when closing
writer failed in BufferedRWPair.close().
: Unknown escapes in regular expressions that consist of 
and ASCII letter now raise a deprecation warning and will be forbidden in
Python 3.6.
: string.Template now allows specifying the âselfâ parameter as a
keyword argument.  string.Formatter now allows specifying the âselfâ and
the âformat_stringâ parameters as keyword arguments.
: The pprint module now supports mapping proxies.
: pprint now wraps long bytes objects and bytearrays.
: Fixed some corner cases in breaking words in tetxtwrap. Got rid
of quadratic complexity in breaking long words.
: The copy module now uses pickle protocol 4 (PEP 3154) and
supports copying of instances of classes whose __new__ method takes
keyword-only arguments.
: Added a zipapp module to support creating executable zip file
archives of Python code. Registered â.pyzâ and â.pyzwâ extensions on
Windows for these archives (PEP 441).
: Avoid explicit checks for str in zipapp, adding support for
pathlib.Path objects as arguments.
: Added support of arbitrary bytes-like objects and avoided
unnecessary copying of memoryview in gzip.GzipFile.write(). Original patch
by Wolfgang Maier.
: Added support for writing ZIP files to unseekable streams.
: Increase imaplibâs MAXLINE to accommodate modern mailbox sizes.
: If body is None, http.client.HTTPConnection.request now sets
Content-Length to 0 for PUT, POST, and PATCH headers to avoid 411 errors
from some web servers.
: The nntplib.NNTP constructor no longer leaves the connection
and socket open until the garbage collector cleans them up.  Patch by
Martin Panter.
: collections.deque() objects now support methods for index(),
insert(), and copy().  This allows deques to be registered as a
MutableSequence and it improves their substitutability for lists.
: signal.sigwaitinfo() and signal.sigtimedwait() are
now retried when interrupted by a signal not in the  parameter, if
the signal handler does not raise an exception. signal.sigtimedwait()
recomputes the timeout with a monotonic clock when it is retried.
: Few functions in modules mmap, ossaudiodev, socket, ssl, and
codecs, that accepted only read-only bytes-like object now accept writable
bytes-like object too.
: If time.sleep() is interrupted by a signal, the sleep is now
retried with the recomputed delay, except if the signal handler raises an
exception (PEP 475).
: _strptime now uniformly handles all days in week 0, including
Dec 30 of previous year.  Based on patch by Jim Carroll.
: Iterator of NamedTemporaryFile now keeps a reference to
NamedTemporaryFile instance.  Patch by Bohuslav Kabrda.
: The fake test case created by unittest.loader when it fails
importing a test module is now picklable.
: On Linux, os.urandom() now uses the new getrandom() syscall if
available, syscall introduced in the Linux kernel 3.17. It is more
reliable and more secure, because it avoids the need of a file descriptor
and waits until the kernel has enough entropy.
: Updated the implementation of the http.cookies.Morsel class.
Setting attributes key, value and coded_value directly now is deprecated.
update() and setdefault() now transform and check keys.  Comparing for
equality now takes into account attributes key, value and coded_value.
copy() now returns a Morsel, not a dict.  repr() now contains all
attributes. Optimized checking keys and quoting values.  Added new tests.
Original patch by Demian Brecht.
: Allow selection of output units in timeit. Patch by Julian
Gindi.
: Fix traceback.format_list when a traceback has been mutated.
: Add rdivmod support to MagicMock() objects. Patch by HÃ¥kan
LÃ¶vdahl.
: Add charset parameter to HtmlDiff.make_file().
: Support os.truncate and os.ftruncate on Windows.
: Fixed parsing cookies with absent keys or values in cookiejar.
Patch by Demian Brecht.
: multiprocessing.Pool methods imap() and imap_unordered() now
handle exceptions raised by an iterator.  Patch by Alon Diamant and Davin
Potts.
: Add matmul support to MagicMock. Patch by HÃ¥kan LÃ¶vdahl.
: enable(), register(), dump_traceback() and
dump_traceback_later() functions of faulthandler now accept file
descriptors. Patch by Wei Wu.
: Disabled HTTP header injections in http.client. Original patch
by Demian Brecht.
: Modules bz2, tarfile and tokenize now can be reloaded with
imp.reload(). Patch by Thomas Kluyver.
: os.walk() now calls os.scandir() instead of os.listdir(). The
usage of os.scandir() reduces the number of calls to os.stat(). Initial
patch written by Ben Hoyt.

================================================================================

# Changelog - Library (Part 2)

: The groupindex attribute of regular expression pattern object
now is non-modifiable mapping.

: Ignore KeyboardInterrupt when the pydoc pager is active. This
mimics the behavior of the standard unix pagers, and prevents pipepager
from shutting down while the pager itself is still running.

: pprint() of OrderedDict now outputs the same representation as
repr().

: Removed IsBadStringPtr calls in ctypes

: Improved some re error messages using regex for hints.

: ntpath.expandvars() no longer loses unbalanced single quotes.

: The zipfile.ZipFile.open function now supports âxâ (exclusive
creation) mode.

: The reader in BufferedRWPair now is closed even when closing
writer failed in BufferedRWPair.close().

: Unknown escapes in regular expressions that consist of 
and ASCII letter now raise a deprecation warning and will be forbidden in
Python 3.6.

: string.Template now allows specifying the âselfâ parameter as a
keyword argument.  string.Formatter now allows specifying the âselfâ and
the âformat_stringâ parameters as keyword arguments.

: The pprint module now supports mapping proxies.

: pprint now wraps long bytes objects and bytearrays.

================================================================================

# Changelog - Library (Part 3)

: Fixed some corner cases in breaking words in tetxtwrap. Got rid
of quadratic complexity in breaking long words.

: The copy module now uses pickle protocol 4 (PEP 3154) and
supports copying of instances of classes whose __new__ method takes
keyword-only arguments.

: Added a zipapp module to support creating executable zip file
archives of Python code. Registered â.pyzâ and â.pyzwâ extensions on
Windows for these archives (PEP 441).

: Avoid explicit checks for str in zipapp, adding support for
pathlib.Path objects as arguments.

: Added support of arbitrary bytes-like objects and avoided
unnecessary copying of memoryview in gzip.GzipFile.write(). Original patch
by Wolfgang Maier.

: Added support for writing ZIP files to unseekable streams.

: Increase imaplibâs MAXLINE to accommodate modern mailbox sizes.

: If body is None, http.client.HTTPConnection.request now sets
Content-Length to 0 for PUT, POST, and PATCH headers to avoid 411 errors
from some web servers.

: The nntplib.NNTP constructor no longer leaves the connection
and socket open until the garbage collector cleans them up.  Patch by
Martin Panter.

================================================================================

# Changelog - Library (Part 4)

: collections.deque() objects now support methods for index(),
insert(), and copy().  This allows deques to be registered as a
MutableSequence and it improves their substitutability for lists.

: signal.sigwaitinfo() and signal.sigtimedwait() are
now retried when interrupted by a signal not in the  parameter, if
the signal handler does not raise an exception. signal.sigtimedwait()
recomputes the timeout with a monotonic clock when it is retried.

: Few functions in modules mmap, ossaudiodev, socket, ssl, and
codecs, that accepted only read-only bytes-like object now accept writable
bytes-like object too.

: If time.sleep() is interrupted by a signal, the sleep is now
retried with the recomputed delay, except if the signal handler raises an
exception (PEP 475).

: _strptime now uniformly handles all days in week 0, including
Dec 30 of previous year.  Based on patch by Jim Carroll.

: Iterator of NamedTemporaryFile now keeps a reference to
NamedTemporaryFile instance.  Patch by Bohuslav Kabrda.

: The fake test case created by unittest.loader when it fails
importing a test module is now picklable.

================================================================================

# Changelog - Library (Part 5)

: On Linux, os.urandom() now uses the new getrandom() syscall if
available, syscall introduced in the Linux kernel 3.17. It is more
reliable and more secure, because it avoids the need of a file descriptor
and waits until the kernel has enough entropy.

: Updated the implementation of the http.cookies.Morsel class.
Setting attributes key, value and coded_value directly now is deprecated.
update() and setdefault() now transform and check keys.  Comparing for
equality now takes into account attributes key, value and coded_value.
copy() now returns a Morsel, not a dict.  repr() now contains all
attributes. Optimized checking keys and quoting values.  Added new tests.
Original patch by Demian Brecht.

: Allow selection of output units in timeit. Patch by Julian
Gindi.

: Fix traceback.format_list when a traceback has been mutated.

: Add rdivmod support to MagicMock() objects. Patch by HÃ¥kan
LÃ¶vdahl.

: Add charset parameter to HtmlDiff.make_file().

: Support os.truncate and os.ftruncate on Windows.

: Fixed parsing cookies with absent keys or values in cookiejar.
Patch by Demian Brecht.

================================================================================

# Changelog - Library (Part 6)

: multiprocessing.Pool methods imap() and imap_unordered() now
handle exceptions raised by an iterator.  Patch by Alon Diamant and Davin
Potts.

: Add matmul support to MagicMock. Patch by HÃ¥kan LÃ¶vdahl.

: enable(), register(), dump_traceback() and
dump_traceback_later() functions of faulthandler now accept file
descriptors. Patch by Wei Wu.

: Disabled HTTP header injections in http.client. Original patch
by Demian Brecht.

: Modules bz2, tarfile and tokenize now can be reloaded with
imp.reload(). Patch by Thomas Kluyver.

: os.walk() now calls os.scandir() instead of os.listdir(). The
usage of os.scandir() reduces the number of calls to os.stat(). Initial
patch written by Ben Hoyt.

================================================================================

# Changelog - Build

List:
: make patchcheck will ensure the interpreter is built.

: make patchcheck will ensure the interpreter is built.

================================================================================

# Changelog - Tests

List:
: Added tests for standard IO streams in IDLE.
: Prevent test_urllib2net failures due to ftp connection timeout.

: Added tests for standard IO streams in IDLE.

: Prevent test_urllib2net failures due to ftp connection timeout.

================================================================================

# Changelog - Tools/Demos

List:
: The result of open() in Tools/freeze/bkfile.py is now better
compatible with regular files (in particular it now supports the context
management protocol).

: The result of open() in Tools/freeze/bkfile.py is now better
compatible with regular files (in particular it now supports the context
management protocol).

================================================================================

# Changelog - Core and Builtins

List:
: PyObject_Call() and PyCFunction_Call() now raise a SystemError
if a function returns a result and raises an exception. The SystemError is
chained to the previous exception.

: PyObject_Call() and PyCFunction_Call() now raise a SystemError
if a function returns a result and raises an exception. The SystemError is
chained to the previous exception.

================================================================================

# Changelog - Library (Part 1)

List:
: New os.scandir() function, part of the :
âos.scandir() function â a better and faster directory iteratorâ. Patch
written by Ben Hoyt.
: Reduced the memory consumption of IPv4Address and IPv6Address.
: BaseHTTPRequestHandler again logs response code as numeric, not
as stringified enum.  Patch by Demian Brecht.
: In the ssl module, enable OpenSSLâs X509_V_FLAG_TRUSTED_FIRST
flag on certificate stores when it is available.
: Avoid stalling in SSL reads when EOF has been reached in the
SSL layer but the underlying connection hasnât been closed.
: Added an __all__ to the types module.
: Optimized utility functions in urllib.parse.
: Flatten nested functools.partial.
: Added the __module__ attribute to _tkinter classes.
: Improved help() for non-recognized strings.  help(ââ) now shows
the help on str.  help(âhelpâ) now shows the help on help(). Original
patch by Mark Lawrence.
: Corrected pure python implementation of timedelta division.
Eliminated OverflowError from    for some floats;
Corrected rounding in timedelta true division.
: Popen objects no longer leave a zombie after exit in the with
statement if the pipe was broken.  Patch by Martin Panter.
: Make it possible to show local variables in tracebacks for both
the traceback module and unittest.
: Add an option to limit the output size in bz2.decompress().
Patch by Nikolaus Rath.
: Module-level turtle functions no longer raise TclError after
closing the window.
bpo-814253: Group references and conditional group references now work in
lookbehind assertions in regular expressions. (See also: )
: Multibyte codecs with custom error handlers that ignores errors
consumed too much memory and raised SystemError or MemoryError. Original
patch by Aleksi Torhamo.
: io.FileIO() called flush() after closing the file. flush() was
not called in close() if closefd=False.
: Fixed pydoc failure with non-ASCII files when stdout encoding
differs from file system encoding (e.g. on Mac OS).
: Remove RC4 from the SSL moduleâs default cipher list.
: Fix pydoc.synopsis() and pydoc.apropos() on modules with empty
docstrings.
: Fixed arbitrary code execution vulnerability in the dbm.dumb
module. Original patch by Claudiu Popa.
: ssl.match_hostname() now supports matching of IP addresses.
: Fix mishandling of absolute Windows paths with forward slashes
in pathlib.
: Pickle representation of floats with protocol 0 now is the same
for both Python and C implementations.
: pprint now more efficiently uses free space at the right.
: Add allow_abbrev parameter to argparse.ArgumentParser. Patch by
Jonathan Paugh, Steven Bethard, paul j3 and Daniel Eriksson.
: tarfile.open() now supports âxâ (exclusive creation) mode.
: marshal.dumps() is now 20-25% faster on average.
: marshal.dumps() with protocols 3 and 4 is now 40-50% faster on
average.
: Fixed compression in tarfile CLI.  Patch by wdv4758h.
: Fix possible overflows in the unicodedata module.
: Fix possible overflow in Windows subprocess creation code.
logging.handlers.QueueListener now takes a respect_handler_level keyword
argument which, if set to True, will pass messages to handlers taking
handler levels into account.
: turtledemo now has a visual sorting algorithm demo.  Original
patch from Jason Yeo.
: Fix issue where cgi.FieldStorage did not always ignore the
entire preamble to a multipart body.

================================================================================

# Changelog - Library (Part 2)

: New os.scandir() function, part of the :
âos.scandir() function â a better and faster directory iteratorâ. Patch
written by Ben Hoyt.

: Reduced the memory consumption of IPv4Address and IPv6Address.

: BaseHTTPRequestHandler again logs response code as numeric, not
as stringified enum.  Patch by Demian Brecht.

: In the ssl module, enable OpenSSLâs X509_V_FLAG_TRUSTED_FIRST
flag on certificate stores when it is available.

: Avoid stalling in SSL reads when EOF has been reached in the
SSL layer but the underlying connection hasnât been closed.

: Added an __all__ to the types module.

: Optimized utility functions in urllib.parse.

: Flatten nested functools.partial.

: Added the __module__ attribute to _tkinter classes.

: Improved help() for non-recognized strings.  help(ââ) now shows
the help on str.  help(âhelpâ) now shows the help on help(). Original
patch by Mark Lawrence.

: Corrected pure python implementation of timedelta division.
Eliminated OverflowError from    for some floats;
Corrected rounding in timedelta true division.

: Popen objects no longer leave a zombie after exit in the with
statement if the pipe was broken.  Patch by Martin Panter.

================================================================================

# Changelog - Library (Part 3)

: Make it possible to show local variables in tracebacks for both
the traceback module and unittest.

: Add an option to limit the output size in bz2.decompress().
Patch by Nikolaus Rath.

: Module-level turtle functions no longer raise TclError after
closing the window.

bpo-814253: Group references and conditional group references now work in
lookbehind assertions in regular expressions. (See also: )

: Multibyte codecs with custom error handlers that ignores errors
consumed too much memory and raised SystemError or MemoryError. Original
patch by Aleksi Torhamo.

: io.FileIO() called flush() after closing the file. flush() was
not called in close() if closefd=False.

: Fixed pydoc failure with non-ASCII files when stdout encoding
differs from file system encoding (e.g. on Mac OS).

: Remove RC4 from the SSL moduleâs default cipher list.

: Fix pydoc.synopsis() and pydoc.apropos() on modules with empty
docstrings.

: Fixed arbitrary code execution vulnerability in the dbm.dumb
module. Original patch by Claudiu Popa.

: ssl.match_hostname() now supports matching of IP addresses.

: Fix mishandling of absolute Windows paths with forward slashes
in pathlib.

================================================================================

# Changelog - Library (Part 4)

: Pickle representation of floats with protocol 0 now is the same
for both Python and C implementations.

: pprint now more efficiently uses free space at the right.

: Add allow_abbrev parameter to argparse.ArgumentParser. Patch by
Jonathan Paugh, Steven Bethard, paul j3 and Daniel Eriksson.

: tarfile.open() now supports âxâ (exclusive creation) mode.

: marshal.dumps() is now 20-25% faster on average.

: marshal.dumps() with protocols 3 and 4 is now 40-50% faster on
average.

: Fixed compression in tarfile CLI.  Patch by wdv4758h.

: Fix possible overflows in the unicodedata module.

: Fix possible overflow in Windows subprocess creation code.

logging.handlers.QueueListener now takes a respect_handler_level keyword
argument which, if set to True, will pass messages to handlers taking
handler levels into account.

: turtledemo now has a visual sorting algorithm demo.  Original
patch from Jason Yeo.

: Fix issue where cgi.FieldStorage did not always ignore the
entire preamble to a multipart body.

================================================================================

# Changelog - Build

List:
: pydebug builds now use âgcc -Ogâ where possible, to make the
resulting executable faster.
: Update OS X 10.5 installer build to use OpenSSL 1.0.2a.

: pydebug builds now use âgcc -Ogâ where possible, to make the
resulting executable faster.

: Update OS X 10.5 installer build to use OpenSSL 1.0.2a.

================================================================================

# Changelog - C API

List:
: Deprecation warning is now raised for builtin types without the
__module__ attribute.

: Deprecation warning is now raised for builtin types without the
__module__ attribute.

================================================================================

# Changelog - Windows

List:
: Implement  - Make the Python Launcher aware of
virtual environments. Patch by Paul Moore.
: Make user scripts directory versioned on Windows. Patch by Paul
Moore.

: Implement  - Make the Python Launcher aware of
virtual environments. Patch by Paul Moore.

: Make user scripts directory versioned on Windows. Patch by Paul
Moore.

================================================================================

# Changelog - Core and Builtins (Part 1)

List:
: PEP 475 - EINTR handling.
: Fix many edge cases (including crashes) involving custom mro()
implementations.
: Avoid using PyObject_AsCharBuffer(), PyObject_AsReadBuffer()
and PyObject_AsWriteBuffer().
: Revert some changes () to AST line numbers and
column offsets that constituted a regression.
: Allow changing an objectâs __class__ between a dynamic type and
static type in some cases.
: PyUnicode_EncodeFSDefault(), PyUnicode_EncodeMBCS() and
PyUnicode_EncodeCodePage() now raise an exception if the object is not a
Unicode object. For PyUnicode_EncodeFSDefault(), it was already the case
on platforms other than Windows. Patch written by Campbell Barton.
: The default __ne__() now returns NotImplemented if __eq__()
returned NotImplemented.  Original patch by Martin Panter.
: Fixed a crash in str.decode() when error handler returned
replacement string longer than malformed input data.
: The âbackslashreplaceâ error handlers now works with decoding
and translating.
: Delay-load ShellExecute[AW] in os.startfile for reduced startup
overhead on Windows.
: pyatomic.h now uses stdatomic.h or GCC built-in functions for
atomic memory access if available. Patch written by Vitor de Lima and
Gustavo Temple.
: %-interpolation (aka printf) formatting added for bytes and
bytearray.
: Fix jumping out of an infinite while loop in the pdb.
: bytes constructor now raises TypeError when encoding or errors
is specified with non-string argument.  Based on patch by Renaud Blanch.
: If the current working directory ends up being set to a
non-existent directory then import will no longer raise FileNotFoundError.
: Move the interpreter startup & shutdown code to a new dedicated
pylifecycle.c module
: Improve method cache efficiency.
: Fix crash when trying to enlarge a bytearray to 0x7fffffff
bytes on a 32-bit platform.
: Fix an assertion failure in debug mode when doing a reentrant
dict insertion in debug mode.
: Fix integer overflow in Unicode case operations (upper, lower,
title, swapcase, casefold).
: Circular imports involving relative imports are now supported.
: Fix assertion error in debug mode when dividing a complex
number by (nan+0j).
: Do not raise ImportWarning when sys.path_hooks or sys.meta_path
are set to None.
: Use âbytes-like object requiredâ in error messages that
previously used the far more cryptic ââxâ does not support the buffer
protocol.
: Fixed integer overflow issues in âbackslashreplaceâ,
âxmlcharrefreplaceâ, and âsurrogatepassâ error handlers.
: speed up PyObject_IsInstance and PyObject_IsSubclass in
the common case that the second argument has metaclass .
: Add a new PyErr_FormatV function, similar to
PyErr_Format but accepting a  argument.
: Fix overflow checking when generating the repr of a unicode
object.
: Fix overflow checking in PyBytes_Repr.
: Fix integer overflow issues in latin-1 encoding.
: _charset parameter of MIMEText now also accepts
email.charset.Charset instances. Initial patch by Claude Paroz.
bpo-1764286: Fix inspect.getsource() to support decorated functions. Patch
by Claudiu Popa.
: os.__all__ includes posix functions.
: Use os.path.abspath in the shutil module.
: avoid generating a JUMP_FORWARD instruction at the end of an
if-block if there is no else-clause.  Original patch by Eugene Toder.
: Now ValueError is raised instead of TypeError when str or bytes
argument contains not permitted null character or byte.
: Fix the internal function set_inheritable() on Illumos. This
platform exposes the function ioctl(FIOCLEX), but calling it fails
with errno is ENOTTY: âInappropriate ioctl for deviceâ. set_inheritable()
now falls back to the slower  ( and then
).
: Displaying the __qualname__ of the underlying function in the
repr of a bound method.
: Using pthread, PyThread_create_key() now sets errno to ENOMEM
and returns -1 (error) on integer overflow.
: Argument Clinic based signature introspection added for 30 of
the builtin functions.
: C functions and methods (of the âbuiltin_function_or_methodâ
type) can now be weakrefâed.  Patch by Wei Wu.
: Improve index error messages for bytearrays, bytes, lists, and
tuples by adding âor slicesâ. Added â, not <typename>â for bytearrays.
Original patch by Claudiu Popa.
: Apply Argument Clinic to bytes and bytearray. Patch by Tal
Einat.
: Clear interned strings in slotdefs.
Upgrade Unicode database to Unicode 7.0.0.
: Fix a crash with the f_locals attribute with closure variables
when frame.clear() has been called.
: Add a new __qualname__ attribute to generator, the
qualified name, and use it in the representation of a generator
(). The default name of the generator (
attribute) is now get from the function instead of the code. Use
gen.gi_code.co_name to get the name of the code.
: With the aid of heuristics in SyntaxError.__init__, the parser
now attempts to generate more meaningful (or at least more search engine
friendly) error messages when âexecâ and âprintâ are used as statements.
: In the conditional if-else expression, allow an integer written
with no space between itself and the  keyword (e.g.  
 ) to be valid syntax.
: Fix over-pessimistic computation of the stack effect of some
opcodes in the compiler.  This also fixes a quadratic compilation time
issue noticeable when compiling code with a large number of âandâ and âorâ
operators.
: Fix a crash in the builtin function super() when called without
argument and without current frame (ex: embedded Python).
: Fix flushing of standard streams in the interactive
interpreter.
: In rare cases, when running finalizers on objects in cyclic
trash a bad pointer dereference could occur due to a subtle flaw in
internal iteration logic.
: PyBytes_Concat() now tries to concatenate in-place when the
first argument has a reference count of 1.  Patch by Nikolaus Rath.
: -W command line options now have higher priority than the
PYTHONWARNINGS environment variable.  Patch by Arfrever.
: Define PATH_MAX for GNU/Hurd in Python/pythonrun.c.
: Support setting FPU precision on m68k.
: Fix sending tuples to custom generator objects with the yield
from syntax.
: pow(a, b, c) now raises ValueError rather than TypeError when b
is negative. Patch by Josh Rosenberg.
: PEP 465: Add the â@â operator for matrix multiplication.
: Fix segfault when str is called on an uninitialized
UnicodeEncodeError, UnicodeDecodeError, or UnicodeTranslateError object.
: Fix PyUnicode_DATA() alignment under m68k.  Patch by Andreas
Schwab.
: Add a type cast to avoid shifting a negative number.
: Properly position in source code files even if they are opened
in text mode. Patch by Serhiy Storchaka.
: Key-sharing now also works for instance dictionaries of
subclasses.  Patch by Peter Ingebretson.
: Attributes missing from modules now include the module name in
the error text.  Original patch by ysj.ray.
: %c, %o, %x, and %X now raise TypeError on non-integer input.
: The ASDL parser - used by the build process to generate code
for managing the Python AST in C - was rewritten. The new parser is self
contained and does not require to carry long the spark.py parser-generator
library; spark.py was removed from the source base.
: Allow  to be used as a fill character when using str,
int, float, and complex __format__ methods.
: Add ipaddress.reverse_pointer. Patch by Leon Weber.
: Modify string.Formatter to support auto-numbering of
replacement fields. It now matches the behavior of str.format() in this
regard. Patches by Phil Elson and Ramchandra Apte.
: Make alternate formatting (â#â) for type âcâ raise an exception.
In versions prior to 3.5, â#â with âcâ had no effect. Now specifying it is
an error. Patch by Torsten Landschoff.
: Perform overflow checks before allocating memory in the
_Py_char2wchar function.

================================================================================

# Changelog - Core and Builtins (Part 2)

: PEP 475 - EINTR handling.

: Fix many edge cases (including crashes) involving custom mro()
implementations.

: Avoid using PyObject_AsCharBuffer(), PyObject_AsReadBuffer()
and PyObject_AsWriteBuffer().

: Revert some changes () to AST line numbers and
column offsets that constituted a regression.

: Allow changing an objectâs __class__ between a dynamic type and
static type in some cases.

: PyUnicode_EncodeFSDefault(), PyUnicode_EncodeMBCS() and
PyUnicode_EncodeCodePage() now raise an exception if the object is not a
Unicode object. For PyUnicode_EncodeFSDefault(), it was already the case
on platforms other than Windows. Patch written by Campbell Barton.

: The default __ne__() now returns NotImplemented if __eq__()
returned NotImplemented.  Original patch by Martin Panter.

: Fixed a crash in str.decode() when error handler returned
replacement string longer than malformed input data.

: The âbackslashreplaceâ error handlers now works with decoding
and translating.

: Delay-load ShellExecute[AW] in os.startfile for reduced startup
overhead on Windows.

================================================================================

# Changelog - Core and Builtins (Part 3)

: pyatomic.h now uses stdatomic.h or GCC built-in functions for
atomic memory access if available. Patch written by Vitor de Lima and
Gustavo Temple.

: %-interpolation (aka printf) formatting added for bytes and
bytearray.

: Fix jumping out of an infinite while loop in the pdb.

: bytes constructor now raises TypeError when encoding or errors
is specified with non-string argument.  Based on patch by Renaud Blanch.

: If the current working directory ends up being set to a
non-existent directory then import will no longer raise FileNotFoundError.

: Move the interpreter startup & shutdown code to a new dedicated
pylifecycle.c module

: Improve method cache efficiency.

: Fix crash when trying to enlarge a bytearray to 0x7fffffff
bytes on a 32-bit platform.

: Fix an assertion failure in debug mode when doing a reentrant
dict insertion in debug mode.

: Fix integer overflow in Unicode case operations (upper, lower,
title, swapcase, casefold).

: Circular imports involving relative imports are now supported.

: Fix assertion error in debug mode when dividing a complex
number by (nan+0j).

: Do not raise ImportWarning when sys.path_hooks or sys.meta_path
are set to None.

================================================================================

# Changelog - Core and Builtins (Part 4)

: Use âbytes-like object requiredâ in error messages that
previously used the far more cryptic ââxâ does not support the buffer
protocol.

: Fixed integer overflow issues in âbackslashreplaceâ,
âxmlcharrefreplaceâ, and âsurrogatepassâ error handlers.

: speed up PyObject_IsInstance and PyObject_IsSubclass in
the common case that the second argument has metaclass .

: Add a new PyErr_FormatV function, similar to
PyErr_Format but accepting a  argument.

: Fix overflow checking when generating the repr of a unicode
object.

: Fix overflow checking in PyBytes_Repr.

: Fix integer overflow issues in latin-1 encoding.

: _charset parameter of MIMEText now also accepts
email.charset.Charset instances. Initial patch by Claude Paroz.

bpo-1764286: Fix inspect.getsource() to support decorated functions. Patch
by Claudiu Popa.

: os.__all__ includes posix functions.

: Use os.path.abspath in the shutil module.

: avoid generating a JUMP_FORWARD instruction at the end of an
if-block if there is no else-clause.  Original patch by Eugene Toder.

: Now ValueError is raised instead of TypeError when str or bytes
argument contains not permitted null character or byte.

================================================================================

# Changelog - Core and Builtins (Part 5)

: Fix the internal function set_inheritable() on Illumos. This
platform exposes the function ioctl(FIOCLEX), but calling it fails
with errno is ENOTTY: âInappropriate ioctl for deviceâ. set_inheritable()
now falls back to the slower  ( and then
).

: Displaying the __qualname__ of the underlying function in the
repr of a bound method.

: Using pthread, PyThread_create_key() now sets errno to ENOMEM
and returns -1 (error) on integer overflow.

: Argument Clinic based signature introspection added for 30 of
the builtin functions.

: C functions and methods (of the âbuiltin_function_or_methodâ
type) can now be weakrefâed.  Patch by Wei Wu.

: Improve index error messages for bytearrays, bytes, lists, and
tuples by adding âor slicesâ. Added â, not <typename>â for bytearrays.
Original patch by Claudiu Popa.

: Apply Argument Clinic to bytes and bytearray. Patch by Tal
Einat.

: Clear interned strings in slotdefs.

Upgrade Unicode database to Unicode 7.0.0.

: Fix a crash with the f_locals attribute with closure variables
when frame.clear() has been called.

================================================================================

# Changelog - Core and Builtins (Part 6)

: Add a new __qualname__ attribute to generator, the
qualified name, and use it in the representation of a generator
(). The default name of the generator (
attribute) is now get from the function instead of the code. Use
gen.gi_code.co_name to get the name of the code.

: With the aid of heuristics in SyntaxError.__init__, the parser
now attempts to generate more meaningful (or at least more search engine
friendly) error messages when âexecâ and âprintâ are used as statements.

: In the conditional if-else expression, allow an integer written
with no space between itself and the  keyword (e.g.  
 ) to be valid syntax.

: Fix over-pessimistic computation of the stack effect of some
opcodes in the compiler.  This also fixes a quadratic compilation time
issue noticeable when compiling code with a large number of âandâ and âorâ
operators.

: Fix a crash in the builtin function super() when called without
argument and without current frame (ex: embedded Python).

: Fix flushing of standard streams in the interactive
interpreter.

================================================================================

# Changelog - Core and Builtins (Part 7)

: In rare cases, when running finalizers on objects in cyclic
trash a bad pointer dereference could occur due to a subtle flaw in
internal iteration logic.

: PyBytes_Concat() now tries to concatenate in-place when the
first argument has a reference count of 1.  Patch by Nikolaus Rath.

: -W command line options now have higher priority than the
PYTHONWARNINGS environment variable.  Patch by Arfrever.

: Define PATH_MAX for GNU/Hurd in Python/pythonrun.c.

: Support setting FPU precision on m68k.

: Fix sending tuples to custom generator objects with the yield
from syntax.

: pow(a, b, c) now raises ValueError rather than TypeError when b
is negative. Patch by Josh Rosenberg.

: PEP 465: Add the â@â operator for matrix multiplication.

: Fix segfault when str is called on an uninitialized
UnicodeEncodeError, UnicodeDecodeError, or UnicodeTranslateError object.

: Fix PyUnicode_DATA() alignment under m68k.  Patch by Andreas
Schwab.

: Add a type cast to avoid shifting a negative number.

: Properly position in source code files even if they are opened
in text mode. Patch by Serhiy Storchaka.

: Key-sharing now also works for instance dictionaries of
subclasses.  Patch by Peter Ingebretson.

================================================================================

# Changelog - Core and Builtins (Part 8)

: Attributes missing from modules now include the module name in
the error text.  Original patch by ysj.ray.

: %c, %o, %x, and %X now raise TypeError on non-integer input.

: The ASDL parser - used by the build process to generate code
for managing the Python AST in C - was rewritten. The new parser is self
contained and does not require to carry long the spark.py parser-generator
library; spark.py was removed from the source base.

: Allow  to be used as a fill character when using str,
int, float, and complex __format__ methods.

: Add ipaddress.reverse_pointer. Patch by Leon Weber.

: Modify string.Formatter to support auto-numbering of
replacement fields. It now matches the behavior of str.format() in this
regard. Patches by Phil Elson and Ramchandra Apte.

: Make alternate formatting (â#â) for type âcâ raise an exception.
In versions prior to 3.5, â#â with âcâ had no effect. Now specifying it is
an error. Patch by Torsten Landschoff.

: Perform overflow checks before allocating memory in the
_Py_char2wchar function.

================================================================================

# Changelog - Library (Part 1)

List:
: pyvenv creates relative symlinks where possible.
: cgi.FieldStorage() now supports the context management
protocol.
: Print response headers for CONNECT requests when debuglevel >
0. Patch by Demian Brecht.
: Optimized io.BytesIO to make less allocations and copyings.
: Splitting on a pattern that could match an empty string now
raises a warning.  Patterns that can only match empty strings are now
rejected.
: Closing io.BytesIO with exported buffer is rejected now to
prevent corrupting exported buffer.
: Removed __ne__ implementations.  Since fixing default __ne__
implementation in  they are redundant.
: Fix possible overflow in itertools.permutations.
: Fix possible overflow in itertools.product.
: Fixed possible integer overflow in itertools.combinations.
: Fixed possible integer overflow in
_json.encode_basestring_ascii.
: Fix the exception handling of generators in
PyEval_EvalFrameEx(). At entry, save or swap the exception state even if
PyEval_EvalFrameEx() is called with throwflag=0. At exit, the exception
state is now always restored or swapped, not only if why is WHY_YIELD or
WHY_RETURN. Patch co-written with Antoine Pitrou.
: Restored support of writing ZIP files to tellable but
non-seekable streams.
: Writing to ZipFile and reading multiple ZipExtFiles is
threadsafe now.
: JSON decoder now raises JSONDecodeError instead of ValueError.
: timeit now rejects statements which canât be compiled outside a
function or a loop (e.g. âreturnâ or âbreakâ).
: Fixed readline with frames in Python implementation of pickle.
: Fixed bugs in the comparison of ipaddress classes.
: Removed incorrect implementations of __ne__() which didnât
returned NotImplemented if __eq__() returned NotImplemented.  The default
__ne__() now works correctly.
: email.feedparser.FeedParser now handles (malformed)
headers with no key rather than assuming the body has started.
: Support Application-Layer Protocol Negotiation (ALPN) in the
ssl module.
: Pickling of ipaddress objects now produces more compact and
portable representation.
: Update ssl error codes from latest OpenSSL git master.
: Much faster implementation of ipaddress.collapse_addresses()
when there are many non-consecutive addresses.
: 64-bit dev_t is now supported in the os module.
: When an exception is raised in a task submitted to a
ProcessPoolExecutor, the remote traceback is now displayed in the parent
process.  Patch by Claudiu Popa.
: Add an option to limit output size when decompressing LZMA
data.  Patch by Nikolaus Rath and Martin Panter.
: In the http.cookies module, capitalize âHttpOnlyâ and âSecureâ
as they are written in the standard.
: In the distutilsâ check command, fix parsing of reST with code
or code-block directives.
: selectors.BaseSelector.get_key() now raises a RuntimeError if
the selector is closed. And selectors.BaseSelector.close() now clears its
internal reference to the selector mapping to break a reference cycle.
Initial patch written by Martin Richard. (See also: )
: Provide a way to seed the linecache for a PEP-302 module
without actually loading the code.
: Provide a new object API for traceback, including the ability
to not lookup lines at all until the traceback is actually rendered,
without any trace of the original objects being kept alive.
: Provide a home() classmethod on Path objects.  Contributed by
Victor Salgado and Mayank Tripathi.
: Make json.dumps(..., ensure_ascii=False) as fast as the
default case of ensure_ascii=True.  Patch by Naoki Inada.
: Add math.inf and math.nan constants.
: Add ssl.SSLObject.shared_ciphers() and
ssl.SSLSocket.shared_ciphers() to fetch the clientâs list ciphers sent at
handshake.
: Remove compatibility with OpenSSLs older than 0.9.8.
: Improve performance and introspection support of comparison
methods created by functool.total_ordering.
: Add an expanduser() method on Path objects.
: Fix SimpleHTTPServer to correctly carry the query string and
fragment when it redirects to add a trailing slash.
: Added http.HTTPStatus enums (i.e. HTTPStatus.OK,
HTTPStatus.NOT_FOUND). Patch by Demian Brecht.
: In the io, module allow more operations to work on detached
streams.
: In the ftplib, make ssl.PROTOCOL_SSLv23 the default protocol
version.
: On OpenBSD 5.6 and newer, os.urandom() now calls getentropy(),
instead of reading /dev/urandom, to get pseudo-random bytes.
: pprint now produces evaluable output for wrapped strings.
: Added missing names to codecs.__all__.  Patch by Martin Panter.
: Pickling now uses the NEWOBJ opcode instead of the NEWOBJ_EX
opcode if possible.
: Added a __sizeof__ implementation for pickle classes.
: pickletools.optimize() now aware of the MEMOIZE opcode, can
produce more compact result and no longer produces invalid output if input
data contains MEMOIZE opcodes together with PUT or BINPUT opcodes.
: Fixed HTTPConnection.set_tunnel with default port.  The port
value in the host header was set to âNoneâ.  Patch by Demian Brecht.
: A warning no longer produces an AttributeError when the program
is run with pythonw.exe.
: shutil.copytree(): fix crash when copying to VFAT. An exception
handler assumed that OSError objects always have a âwinerrorâ attribute.
That is not the case, so the exception handler itself raised
AttributeError when run on Linux (and, presumably, any other non-Windows
OS). Patch by Greg Ward.
bpo-1218234: Fix inspect.getsource() to load updated source of reloaded
module. Initial patch by Berker Peksag.
: Support wrapped callables in doctest. Patch by Claudiu Popa.
: Make sure selectors.EpollSelector.select() works when no FD is
registered.
: In the constructor of http.client.HTTPSConnection, prefer the
contextâs check_hostname attribute over the check_hostname parameter.
: Add function sys.is_finalizing() to know about
interpreter shutdown.
: Add a default limit for the amount of data
xmlrpclib.gzip_decode will return. This resolves CVE 2013-1753.
: ZipFile.open() no longer reopen the underlying file.  Objects
returned by ZipFile.open() can now operate independently of the ZipFile
even if the ZipFile was created by passing in a file-like object as the
first argument to the constructor.
: Fix __pycache__ pyc file name clobber when pyc_compile is asked
to compile a source file containing multiple dots in the source file name.
: Update turtledemo doc and add module to the index.
: Fixed socket leak if HTTPConnection.getresponse() fails.
Original patch by Martin Panter.
: Deprecated the use of re.LOCALE flag with str patterns or
re.ASCII. It was newer worked.
: The âipâ command is now used on Linux to determine MAC address
in uuid.getnode().  Pach by Bruno Cauet.
: Add a context argument to xmlrpclib.ServerProxy constructor.
: Add contextlib.redirect_stderr().
: Make ssl.RAND_egd() optional to support LibreSSL. The
availability of the function is checked during the compilation. Patch
written by Bernard Spil.
: SAX parser now supports files opened with file descriptor or
bytes path.
: Constructors and update methods of mapping classes in the
collections module now accept the self keyword argument.
: Add readline.append_history_file.
: Added the ânamereplaceâ error handler.
: Add  parameter to logging.handlers.HTTPHandler.
: Allow SSLContext to take the  parameter even if
OpenSSL doesnât support SNI.
: TestCase.subTest() would cause the test suite to be stopped
when in failfast mode, even in the absence of failures.
: HTTP cookie parsing is now stricter, in order to protect
against potential injection attacks.
: Windows detection in pathlib is now more robust.
: Reject coroutines in asyncio add_signal_handler(). Patch by
Ludovic.Gasc.
: Added urllib.request.HTTPBasicPriorAuthHandler. Patch by Matej
Cepl.
: Added attributes to the re.error class.
: Fix possible double free in the io.TextIOWrapper constructor.
: Different Unicode characters having the same uppercase but
different lowercase are now matched in case-insensitive regular
expressions.
: Fixed fcntl() with integer argument on 64-bit big-endian
platforms.
: Add an --sort-keys option to  CLI.
: Updated reprlib output format for sets to use set literals.
Patch contributed by Berker Peksag.
: Updated reprlib output format for arrays to display empty
arrays without an unnecessary empty list.  Suggested by Serhiy Storchaka.
: Fixed the uu_codec codec incorrectly ported to 3.x. Based on
patch by Martin Panter.
: uuid.getnode() now determines MAC address on AIX using netstat.
Based on patch by Aivars KalvÄns.
: Fixed ttk.Treeview.tag_has() when called without arguments.
: Verify certificates by default in httplib (PEP 476).
: Fixed unpickling of http.cookies.SimpleCookie with protocol 2
and above. Patch by Tim Graham.
: Brought excluded code into the scope of a try block in
SysLogHandler.emit().
: Add missing get_terminal_size and SameFileError to
shutil.__all__.
: Remove deprecated Netrc class in the ftplib module. Patch by
Matt Chaput.
: Fixed handling of case-insensitive ranges in regular
expressions.
: Module level functions in the re module now cache compiled
locale-dependent regular expressions taking into account the locale.
: Query methods on pathlib.Path() (exists(), is_dir(), etc.) now
return False when the underlying stat call raises NotADirectoryError.
: distutils now falls back to copying files when hard linking
doesnât work. This allows use with special filesystems such as VirtualBox
shared folders.
: Implemented reprs of classes in the zipfile module.
: Honour load_tests in the start_dir of discovery.
: gettext now raises an error when a .mo file has an unsupported
major version number.  Patch by Aaron Hill.
: Provide a locale.delocalize() function which can remove
locale-specific number formatting from a string representing a number,
without then converting it to a specific type.  Patch by CÃ©dric Krier.
: Make the pickling of global objects which donât have a
__module__ attribute less slow.
: Fixed ResourceWarning in shlex.__nain__.
: Defaults set with set_defaults on an argparse subparser are no
longer ignored when also set on the parent parser.
: unittest test loading ImportErrors are reported as import errors
with their import exception rather than as attribute errors after the
import has already failed.
: Make it possible to examine the errors from unittest discovery
without executing the test suite. The new  attribute on
TestLoader exposes these non-fatal errors encountered during
discovery.
: Make email.headerregistryâs header âparamsâ attributes be
read-only (MappingProxyType).  Previously the dictionary was modifiable
but a new one was created on each access of the attribute.
: SSLv3 is now disabled throughout the standard library. It can
still be enabled by instantiating a SSLContext manually.
: In asyncio, the default SSL context for client connections is
now created using ssl.create_default_context(), for stronger security.
: Include closefd in io.FileIO repr.
: Add silent mode for compileall. quiet parameters of
compile_{dir, file, path} functions now have a multilevel value. Also, -q
option of the CLI now have a multilevel value. Patch by Thomas Kluyver.
: Convert the array and cmath modules to Argument Clinic.
: Add socket.socketpair() on Windows.
: Fix a file descriptor leak when socketserver bind fails.
: Fixed segfault in CTypes POINTER handling of large values.
: Raise ConversionError in xdrlib as documented.  Patch by Filip
GruszczyÅski and Claudiu Popa.
: Optimized parsing of regular expressions.
bpo-1519638: Now unmatched groups are replaced with empty strings in
re.sub() and re.subn().
: sndhdr.what/whathdr now return a namedtuple.
: Fix pyexpatâs creation of a dummy frame to make it appear in
exception tracebacks.
: Add support for in-memory SSL to the ssl module.  Patch by
Geert Jansen.
: Fix len() on a WeakKeyDictionary when .clear() was called with
an iterator alive.
: Eliminated race condition in the computation of names for new
threads.
: Avoid RuntimeError in pickle.whichmodule() when sys.modules is
mutated while iterating.  Patch by Olivier Grisel.
: concurrent.futures.Executor.map() now takes a 
argument to allow batching of tasks in child processes and improve
performance of ProcessPoolExecutor.  Patch by Dan OâReilly.
: os.path.join() and os.path.relpath() now raise a TypeError with
more helpful error message for unsupported or mismatched types of
arguments.
: The zipfile module CLI now adds entries for directories
(including empty directories) in ZIP file.
: In the ssl.SSLContext.load_default_certs, consult the
environmental variables SSL_CERT_DIR and SSL_CERT_FILE on Windows.
: The email.__version__ variable has been removed; the email code
is no longer shipped separately from the stdlib, and __version__ hasnât
been updated in several releases.
: Added non derived UTF-8 aliases to locale aliases table.
: Added locales supported in glibc 2.18 to locale alias table.
: Added convenience methods read_text/write_text and read_bytes/
write_bytes to pathlib.Path objects.
: On 32-bit AIX platform, donât expose os.posix_fadvise() nor
os.posix_fallocate() because their prototypes in system headers are wrong.
: When an io.BufferedRWPair object is deallocated, clear its
weakrefs.
: Number of capturing groups in regular expression is no longer
limited by 100.
: InteractiveInterpreter now displays the full chained traceback
in its showtraceback method, to match the built in interactive
interpreter.
: Added tests for marshal C API that works with FILE*.
: distutils register and upload methods now use HTML standards
compliant CRLF line endings.
: Fixed macpath.join() for empty first component.  Patch by Oleg
Oshmyan.
: distutilsâ build and build_ext commands now accept a 
option to enable parallel building of extension modules.
: Improve canceled timer handles cleanup to prevent unbound
memory usage. Patch by Joshua Moore-Oliva.
: TemporaryDirectory no longer attempts to clean up twice when
used in the with statement in generator.
: Forbidden ambiguous octal escapes out of range 0-0o377 in
regular expressions.
: Now directories added to ZIP file have correct Unix and MS-DOS
directory attributes.
: ZipFile.close() no longer writes ZIP64 central directory
records if allowZip64 is false.
: Fix urljoin problem with relative urls, a regression observed
after changes to issue22118 were submitted.
: Fixed debugging output of the GROUPREF_EXISTS opcode in the re
module. Removed trailing spaces in debugging output.
: Unhandled exception in thread no longer causes unhandled
AttributeError when sys.stderr is None.
: Ensure that  in subprocess.Popen() selects line
buffering, rather than block buffering.  Patch by Akira Li.
: Fix API bug: email.message.EmailMessage.is_attachment is now a
method.
: Fix email.message.EmailMessage.is_attachment to return the
correct result when the header has parameters as well as a value.
: Add NNTPError to nntplib.__all__.
: urllib.request.urlopen will accept a context object
(SSLContext) as an argument which will then be used for HTTPS connection.
Patch by Alex Gaynor.
: The warnings registries are now reset when the filters are
modified.
: Limit the length of incoming HTTP request in wsgiref server to
65536 bytes and send a 414 error code for higher lengths. Patch
contributed by Devin Cook.
Lax cookie parsing in http.cookies could be a security issue when combined
with non-standard cookie handling in some web browsers.  Reported by
Sergey Bobrov.
: logging methods now accept an exception instance as well as a
Boolean value or exception tuple. Thanks to Yury Selivanov for the patch.
: An exception in Tkinter callback no longer crashes the program
when it is run with pythonw.exe.
: Prevent turtle AttributeError with non-default Canvas on OS X.
: sqlite3 now raises an exception if the request contains a null
character instead of truncating it.  Based on patch by Victor Stinner.
: The glob module now supports recursive search in subdirectories
using the  pattern.
: Fixed a crash in Tkinter on AIX when called Tcl command with
empty string or tuple argument.
: Tkinter now most likely raises MemoryError instead of crash if
the memory allocation fails.
: Fix a crash in the json module on memory allocation failure.
: imaplib.IMAP4 now supports the context management protocol.
Original patch by Tarek ZiadÃ©.
: We now override tuple methods in mock.call objects so that they
can be used as normal call attributes.
: load_tests() is now unconditionally run when it is present
in a packageâs __init__.py.  TestLoader.loadTestsFromModule()
still accepts use_load_tests, but it is deprecated and ignored.  A new
keyword-only attribute  is added and documented.  Patch given
by Robert Collins, tweaked by Barry Warsaw.
: First letter no longer is stripped from the âstatusâ key in the
result of Treeview.heading().
: Fixed resource leak in the HTTP connection when an invalid
response is received.  Patch by Martin Panter.
: Add a .version() method to SSL sockets exposing the actual
protocol version in use.
: configparser exceptions no longer expose implementation
details. Chained KeyErrors are removed, which leads to cleaner tracebacks.
Patch by Claudiu Popa.
: turtledemo no longer reloads examples to re-run them.
Initialization of variables and gui setup should be done in main(), which
is called each time a demo is run, but not on import.
: Turtledemo users can change the code font size with a menu
selection or control(command) â-â or â+â or control-mousewheel. Original
patch by Lita Cho.
: The separator between the turtledemo text pane and the drawing
canvas can now be grabbed and dragged with a mouse.  The code text pane
can be widened to easily view or copy the full width of the text.  The
canvas can be widened on small screens.  Original patches by Jan Kanis and
Lita Cho.
: Turtledemo buttons no longer disappear when the window is
shrunk.  Original patches by Jan Kanis and Lita Cho.
: time.monotonic() is now always available.
threading.Lock.acquire(), threading.RLock.acquire() and socket
operations now use a monotonic clock, instead of the system clock, when a
timeout is used.
: Add a default number of workers to ThreadPoolExecutor equal to
5 times the number of CPUs.  Patch by Claudiu Popa.
: smtplib now resets its state more completely after a quit.  The
most obvious consequence of the previous behavior was a STARTTLS failure
during a connect/starttls/quit/connect/starttls sequence.
: ctypesâ BigEndianStructure and LittleEndianStructure now define
an empty __slots__ so that subclasses donât always get an instance dict.
Patch by Claudiu Popa.
: Fix an occasional RuntimeError in threading.Condition.wait()
caused by mutation of the waiters queue without holding the lock.  Patch
by Doug Zongker.
: On UNIX, _PyTime_gettimeofday() now uses
clock_gettime(CLOCK_REALTIME) if available. As a side effect, Python now
depends on the librt library on Solaris and on Linux (only with glibc
older than 2.17).
: Use e.args to unpack exceptions correctly in
distutils.file_util.move_file. Patch by Claudiu Popa.
The webbrowser module now uses subprocessâs start_new_session=True rather
than a potentially risky preexec_fn=os.setsid call.
: signal.set_wakeup_fd(fd) now raises an exception if the file
descriptor is in blocking mode.
: inspect.stack() now returns a named tuple instead of a tuple.
Patch by Daniel Shahaf.
: Fixed Tkinter images copying operations in NoDefaultRoot mode.
: Add a  argument to timeit functions, in order to
override the globals namespace in which the timed code is executed. Patch
by Ben Roberts.
: Switch urllib.parse to use RFC 3986 semantics for the
resolution of relative URLs, rather than RFCs 1808 and 2396. Patch by
Demian Brecht.
: Added the âmembersâ parameter to TarFile.list().
: Allow compileall recursion depth to be specified with a -r
option.
: Add a __sizeof__ implementation for mmap objects on Windows.
: Avoided reference loops with Variables and Fonts in Tkinter.
: SimpleHTTPRequestHandler now supports undecodable file names.
: Optimized line reading in io.BytesIO.
: Raise HTTPError on failed Basic Authentication immediately.
Initial patch by Sam Bull.
: Restored the use of lazy iterkeys()/itervalues()/iteritems() in
the mailbox module.
: Changed FeedParser feed() to avoid ()
behavior when parsing long line. Original patch by Raymond Hettinger.
: The functools LRU Cache decorator factory now gives an earlier
and clearer error message when the user forgets the required parameters.
: glob() patterns ending with a slash no longer match non-dirs on
AIX.  Based on patch by Delhallt.
: Added support for RFC 6531 (SMTPUTF8) in smtpd.
: Update the ctypes moduleâs libffi to v3.1.  This release adds
support for the Linux AArch64 and POWERPC ELF ABIv2 little endian
architectures.
: Added support for the âxztarâ format in the shutil module.
: Donât force 3rd party C extensions to be built with
-Werror=declaration-after-statement.
: Fixed crash when using uninitialized sqlite3.Row (in particular
when unpickling pickled sqlite3.Row).  sqlite3.Row is now initialized in
the __new__() method.
: Convert posixmodule to use Argument Clinic.
: Add an  argument to Pathlib.mkdir() to mimic
  and os.makedirs() functionality.  When true, ignore
FileExistsErrors. Patch by Berker Peksag.
: Bypass IDNA for pure-ASCII host names in the socket module (in
particular for numeric IPs).
: set the default value for the convert_charrefs argument of
HTMLParser to True.  Patch by Berker Peksag.
Add an __all__ to html.entities.
: the strict mode and argument of HTMLParser, HTMLParser.error,
and the HTMLParserError exception have been removed.
: Dropped support of Tk 8.3 in Tkinter.
: Now Tkinter correctly handles bytes arguments passed to Tk. In
particular this allows initializing images from binary data.
: When initialized from a bytes object, io.BytesIO() now defers
making a copy until it is mutated, improving performance and memory use on
some use cases. Patch by David Wilson.
: On Windows, signal.set_wakeup_fd() now also supports sockets. A
side effect is that Python depends to the WinSock library.
: Add os.get_blocking() and os.set_blocking() functions to get
and set the blocking mode of a file descriptor (False if the O_NONBLOCK
flag is set, True otherwise). These functions are not available on
Windows.
: Make turtledemo start as active on OS X even when run with
subprocess. Patch by Lita Cho.
: Fix build error for _multiprocessing when semaphores are not
available. Patch by Arfrever Frehtes Taifersar Arahesis.
: Convert sha1, sha256, sha512 and md5 to ArgumentClinic. Patch
by Vajrasky Kok.
Fix repr(_socket.socket) on Windows 64-bit: donât fail with OverflowError
on closed socket. repr(socket.socket) already works fine.
: Reprs of most Python implemented classes now contain actual
class name instead of hardcoded one.
: The dis module can now disassemble generator-iterator objects
based on their gi_code attribute. Patch by Clement Rouault.
: The asynchat.async_chat.handle_read() method now ignores
BlockingIOError exceptions.
: Fixed premature DECREF in call_tzinfo_method. Patch by Tom
Flanagan.
: readline: Disable the meta modifier key if stdout is not a
terminal to not write the ANSI sequence "\033[1034h" into stdout. This
sequence is used on some terminal (ex: TERM=xterm-256colorâ) to enable
support of 8 bit characters.
: Removed a number of out-of-dated and non-working for a long time
Tkinter methods.
: Scrollbar.activate() now returns the name of active element if
the argument is not specified.  Scrollbar.set() now always accepts only 2
arguments.
: Clean up and speed up the ntpath module.
: plistlibâs load() and loads() now work if the fmt parameter is
specified.
: __qualname__ instead of __name__ is now always used to format
fully qualified class names of Python implemented classes.
: Reprs now always use hexadecimal format with the â0xâ prefix
when contain an id in form â at 0xâ¦â.
: signal.set_wakeup_fd() now raises an OSError instead of a
ValueError on  failure.
: tarfile.open() now handles fileobj with an integer ânameâ
attribute.  Based on patch by Antoine Pietri.
: Respect -q command-line option when code module is ran.
: Donât pass the redundant âfileâ argument to self.error().
: Improve exception message of warnings.warn() for bad category.
Initial patch by Phil Elson.
: os.read() now uses a Py_ssize_t() type instead of
 for the size to support reading more than 2 GB at once. On
Windows, the size is truncated to INT_MAX. As any call to os.read(), the
OS may read less bytes than the number of requested bytes.
: Fixed source file viewing in pydocâs server mode on Windows.
: asynchat.async_chat().set_terminator() now raises a ValueError
if the number of received bytes is negative.
: asynchat.async_chat.push() now raises a TypeError if it doesnât
get a bytes string
: Add missing kwonlyargcount argument to
ModuleFinder.replace_paths_in_code().
: calling Path.with_suffix(ââ) allows removing the suffix again.
Patch by July Tikhonov.
: Disallow the construction of invalid paths using
Path.with_name().  Original patch by Antony Lee.
: Added âauthâ method to smtplib to make implementing auth
mechanisms simpler, and used it internally in the login method.
: Fixed a segfault in the winreg module when  is passed
as a REG_BINARY value to SetValueEx.  Patch by John Ehresman.
: io.FileIO.readall() does not ignore I/O errors anymore. Before,
it ignored I/O errors if at least the first C call read() succeed.
: headers parameter of wsgiref.headers.Headers is now optional.
Initial patch by Pablo Torres Navarrete and SilentGhost.
: ssl.RAND_add() now supports strings longer than 2 GB.
: Prevent extraneous fstat() calls during open().  Patch by
Bohuslav Kabrda.
: cProfile now displays the module name of C extension functions,
in addition to their own name.
: asyncore: emit a ResourceWarning when an unclosed file_wrapper
object is destroyed. The destructor now closes the file if needed. The
close() method can now be called twice: the second call does nothing.
: Better handling of Python exceptions in the sqlite3 module.
: Make sure the email.parser.BytesParser TextIOWrapper is
discarded after parsing, so the input file isnât unexpectedly closed.
: imghdr now recognizes OpenEXR format images.
: Used the âwithâ statement in the dbm.dumb module to ensure
files closing. Patch by Claudiu Popa.
: socketserver: Fix a race condition in child processes reaping.
: Added the st_file_attributes field to os.stat_result on
Windows.
: Require named tuple inputs to be exact strings.
: The distutils âuploadâ command now exits with a non-zero return
code when uploading fails.  Patch by Martin Dengler.
: asyncio.Queue: support any type of number (ex: float) for the
maximum size. Patch written by Vajrasky Kok.
: support for âsite-pythonâ directories has now been removed from
the site module (it was deprecated in 3.4).
: new socket.sendfile() method allowing a file to be sent over a
socket by using high-performance os.sendfile() on UNIX. Patch by Giampaolo
Rodolaâ.
: dbm.dump.open() now always creates a new database when the flag
has the value ânâ.  Patch by Claudiu Popa.
: Add a new is_closed() method to asyncio.BaseEventLoop.
run_forever() and run_until_complete() methods of asyncio.BaseEventLoop
now raise an exception if the event loop was closed.
: Prevent a security hole in CGIHTTPServer by URL unquoting paths
before checking for a CGI script at that path.
: Fixed possible resource leak in failed open().
: Printout of keyword args should be in deterministic order in a
mock function call. This will help to write better doctests.
: Fixed chaining nonnormalized exceptions in io close() methods.
: Fix the pydoc.help function to not fail when sys.stdin is not a
valid file.
: tempfile.TemporaryFile now uses os.O_TMPFILE flag is available.
: Fix pydoc.writedoc so that the HTML documentation for methods
that use âselfâ in the example code is generated correctly.
: In urllib.request, fix pruning of the FTP cache.
: The subprocess module could fail to close open fds that were
inherited by the calling process and already higher than POSIX resource
limits would otherwise allow.  On systems with a functioning /proc/self/fd
or /dev/fd interface the max is now ignored and all fds are closed.
: Introduce importlib.util.module_from_spec() as the preferred
way to create a new module.
: Fixed possible integer overflow of too long string lengths in
the tkinter module on 64-bit platforms.
: The zipfile module now ignores extra fields in the central
directory that are too short to be parsed instead of letting a
struct.unpack error bubble up as this âbad dataâ appears in many real
world zip files in the wild and is ignored by other zip tools.
: Added âkeyâ and âreverseâ parameters to heapq.merge(). (First
draft of patch contributed by Simon Sapin.)
: tkinter.ttk now works when default root window is not set.
: _tkinter.create() now creates  object with
wantobjects=1 by default.
: sqlite3.Row now truly supports sequence protocol.  In
particular it supports reverse() and negative indices.  Original patch by
Claudiu Popa.
: If copying (no symlinks) specified for a venv, then the python
interpreter aliases (python, python3) are now created by copying rather
than symlinking.
: Added support for the WebP image type in the imghdr module.
Patch by Fabrice Aneche and Claudiu Popa.
: Speedup some properties of IP addresses (IPv4Address,
IPv6Address) such as .is_private or .is_multicast.
: Improve the repr for threading.Lock() and its variants by
showing the âlockedâ or âunlockedâ status.  Patch by Berker Peksag.
: The plistlib module now supports loading of binary plist files
when reference or offset size is not a power of two.
: Add a default backlog to socket.listen().
: Most Tkinter methods which accepted tuples now accept lists
too.
: With the assistance of a new internal _codecs._forget_codec
helping function, test_codecs now clears the encoding caches to avoid the
appearance of a reference leak
: Tkinter tests now donât reuse default root window.  New root
window is created for every test class.
: Fix  format strings on ctypes objects with a
nontrivial shape.
: Optimize ipaddress.collapse_addresses().
: Optimize ipaddress.summarize_address_range() and
ipaddress.{IPv4Network,IPv6Network}.subnets().
: Optimize parsing of netmasks in ipaddress.IPv4Network and
ipaddress.IPv6Network.
: Disallowed the surrogatepass error handler for non UTF-*
encodings.
: Fixed re.fullmatch() of repeated single character pattern with
ignore case. Original patch by Matthew Barnett.
: fileinput.FileInput now reads bytes from standard stream if
binary mode is specified.  Patch by Sam Kimbrel.
: Add a samefile() method to pathlib Path objects.  Initial patch
by Vajrasky Kok.
: Set up modules properly in PyImport_ExecCodeModuleObject (and
friends).
: Fix a unicode error in the pydoc pager when the documentation
contains characters not encodable to the stdout encoding.
: ipaddress.IPv4Network and ipaddress.IPv6Network now accept an
(address, netmask) tuple argument, so as to easily construct network
objects from existing addresses.
: importlib.abc.InspectLoader.source_to_code() is now a
staticmethod.
: Simplified and optimized heaqp.nlargest() and nmsmallest() to
make fewer tuple comparisons.
: Fix TextIOWrapper(â¦, write_through=True) to not force a
flush() on the underlying binary stream.  Patch by akira.
: Unlink now removes junctions on Windows. Patch by Kim GrÃ¤sman
: Bugfix for curses.window.addch() regression in 3.4.0. In
porting to Argument Clinic, the first two arguments were reversed.
: _decimal: The module now supports function signatures.
: Remove the non-standard âwatchexpâ parameter from the
Decimal.quantize() method in the Python version.  It had never been
present in the C version.
: Reduced the risk of false positives in robotparser by checking
to make sure that robots.txt has been read or does not exist prior to
returning True in can_fetch().
: Have the OrderedDict mark deleted links as unusable. This gives
an early failure if the link is deleted during iteration.
: Add __slots__ to the MappingViews ABC. Patch by Josh Rosenberg.
: Eliminate double hashing in the C speed-up code for
collections.Counter().
: itertools.islice() now releases the reference to the source
iterator when the slice is exhausted.  Patch by Anton Afanasyev.
: TextIOWrapper now allows the underlying binary streamâs read()
or read1() method to return an arbitrary bytes-like object (such as a
memoryview). Patch by Nikolaus Rath.
: SSLSocket.send() now raises either SSLWantReadError or
SSLWantWriteError on a non-blocking socket if the operation would block.
Previously, it would return 0.  Patch by Nikolaus Rath.
: removed previously deprecated asyncore.dispatcher __getattr__
cheap inheritance hack.
: assertRaises now tries to clear references to local variables in
the exceptionâs traceback.
: ssl.cert_time_to_seconds() now interprets the given time string
in the UTC timezone (as specified in RFC 5280), not the local timezone.
: Calling sys.flags.__new__ would crash the interpreter, now it
raises a TypeError.
: Make operations on a closed dbm.dumb database always raise the
same exception.
: Detect when the os.urandom cached fd has been closed or
replaced, and open it anew.
: subprocessâs Popen.wait() is now thread safe so that multiple
threads may be calling wait() or poll() on a Popen instance at the same
time without losing the Popen.returncode value.
: Path objects can now be instantiated from str subclass
instances (such as numpy.str_).
: urllib.response object to use _TemporaryFileWrapper (and
_TemporaryFileCloser) facility. Provides a better way to handle file
descriptor close. Patch contributed by Christian Theune.
: mindom now raises a custom ValueError indicating it doesnât
support spaces in URIs instead of letting a âsplitâ ValueError bubble up.
: The ssl.PROTOCOL* constants are now enum members.
: posixmodule: Donât define USE_XATTRS on KFreeBSD and the Hurd.
: New method assert_not_called for Mock. It raises AssertionError
if the mock has been called.
: New keyword argument  to Mock. It raises
AttributeError incase of an attribute startswith assert or assret.
: ssl.get_server_certificate() now uses PROTOCOL_SSLv23, not
PROTOCOL_SSLv3, for maximum compatibility.
: patch.stopall() didnât work deterministically when the same
name was patched more than once.
: Updated fileConfig and dictConfig to remove inconsistencies.
Thanks to Jure Koren for the patch.
: Passing name keyword argument to mock.create_autospec now
works.
: Add lib64 -> lib symlink in venvs on 64-bit non-OS X POSIX.
: Some SMTP servers disconnect after certain errors, violating
strict RFC conformance.  Instead of losing the error code when we issue
the subsequent RSET, smtplib now returns the error code and defers raising
the SMTPServerDisconnected error until the next command is issued.
: setting an iterable side_effect on a mock function created by
create_autospec now works. Patch by Kushal Das.
: Fix  header and reconnection when using
http.client.HTTPConnection.set_tunnel(). Patch by Nikolaus Rath.
: unittest.mock.MagicMock now supports division. Patch by
Johannes Baiter.
: Fix arbitrary memory access in JSONDecoder.raw_decode with a
negative second parameter. Bug reported by Guido Vranken. (See also:
CVE 2014-4616)
: getpass now handles non-ascii characters that the input stream
encoding cannot encode by re-encoding using the replace error handler.
: Fixed undocumented filter API of the rot13 codec. Patch by
Berker Peksag.
: Improved math.factorial error message for large positive inputs
and changed exception type (OverflowError -> ValueError) for large
negative inputs.
: isinstance check relaxed from dict to collections.Mapping.
: asyncio.EventLoop.create_unix_server() now raises a ValueError
if path and sock are specified at the same time.
: Avoid unnecessary normalization of Fractions resulting from
power and other operations.  Patch by Raymond Hettinger.
: Introduce importlib.util.LazyLoader.
: signal module constants were turned into enums. Patch by
Giampaolo Rodolaâ.
: Improved the repr of Tkinter widgets.
: The items, keys, and values views of OrderedDict now support
reverse iteration using reversed().
: Improved thread-safety in logging cleanup during interpreter
shutdown. Thanks to Devin Jeanpierre for the patch.
: Fix a leak of file descriptor in
tempfile.NamedTemporaryFile(), close the file descriptor if
 fails
: Return None from pkgutil.get_loader() when __spec__ is missing.
: Enhance ssl.create_default_context() when used for server side
sockets to provide better security by default.
: assertRaisesRegex and assertWarnsRegex now raise a
 if the second argument is not a string or compiled regex.
: Replace relative import by absolute import.
: Stop wrapping exception when using ThreadPool.
: In os.makedirs, do not set the process-wide umask. Note this
changes behavior of makedirs when exist_ok=True.
: Fix issues found by pyflakes for multiprocessing.
: SSL contexts will now automatically select an elliptic curve
for ECDH key exchange on OpenSSL 1.0.2 and later, and otherwise default to
âprime256v1â.
: Improve the command-line interface of json.tool.
: Enhance default ciphers used by the ssl module to enable better
security and prioritize perfect forward secrecy.
: Donât assume that __file__ is defined on importlib.__init__.
: Ignore __builtins__ in several test_importlib.test_api tests.
: xmlrpc.client.ServerProxy is now a context manager.
: The formatter module now raises DeprecationWarning instead of
PendingDeprecationWarning.
: Remove the ability of datetime.time instances to be considered
false in boolean contexts.
: selectors module now supports /dev/poll on Solaris. Patch by
Giampaolo Rodolaâ.
: When the  locale is the POSIX locale ( locale),
 and sys.stdout are now using the
surrogateescape error handler, instead of the  error
handler.
: Implement incremental decoder for cp65001 code (Windows code
page 65001, Microsoft UTF-8).
: Delay the initialization of encoding and decoding tables for
base32, ascii85 and base85 codecs in the base64 module, and delay the
initialization of the unquote_to_bytes() table of the urllib.parse module,
to not waste memory if these modules are not used.
: Include the broadcast address in the usuable hosts for IPv6 in
ipaddress.
: When an external command (e.g. compiler) fails, distutils now
prints out the whole command line (instead of just the command name) if
the environment variable DISTUTILS_DEBUG is set.
: distutils should not produce unhelpful âerror: Noneâ messages
anymore. distutils.util.grok_environment_error is kept but doc-deprecated.
: Prevent possible gzip ââreadâ is not definedâ NameError. Patch
by Claudiu Popa.
: email.message.Message.attach now returns a more useful
error message if  is called on a message for which
is_multipart is False.
: RE pattern methods now accept the string keyword parameters as
documented. The pattern and source keyword parameters are left as
deprecated aliases.
: Fix modulefinder to work with bytecode-only modules.
: copy.copy() now doesnât make a copy when the input is a bytes
object. Initial patch by Peter Otten.
: On AIX, time.mktime() now raises an OverflowError for year
outsize range [1902; 2037].
: inspect.signature: Use enum for parameter kind constants.
: inspect.signature: Make Signature and Parameter picklable.
: Add inspect.Signature.from_callable method.
: Improve repr of inspect.Signature and inspect.Parameter.
: Fix inspect.getcallargs() to raise correct TypeError for
missing keyword-only arguments. Patch by Jeremiah Lowin.
: Fix inspect.getcallargs() to fail correctly if more than 3
arguments are missing. Patch by Jeremiah Lowin.
: Ensure a meaningful exception is raised when attempting to parse
more than one XML document per pyexpat xmlparser instance. (Original
patches by Hirokazu Yamamoto and Amaury Forgeot dâArc, with suggested
wording by David Gutteridge)
: Fix inspect.signature to better support functools.partial. Due
to the specifics of functools.partial implementation,
positional-or-keyword arguments passed as keyword arguments become
keyword-only.
: inspect.Signature and inspect.Parameter are now hashable.
Thanks to Antony Lee for bug reports and suggestions.
: doctest.DocTestSuite returns an empty unittest.TestSuite
instead of raising ValueError if it finds no tests
: Fix asyncio.tasks.CoroWrapper to workaround a bug in yield-from
implementation in CPythons prior to 3.4.1.
asyncio: Add gi_{frame,running,code} properties to CoroWrapper (upstream
).
: Avoid exception in _osx_support with non-standard compiler
configurations. Patch by John Szakmeister.
: Ensure that the turtle window becomes the topmost window when
launched on OS X.
: Validate that __signature__ is None or an instance of
Signature.
: Prevent AttributeError in
distutils.sysconfig.customize_compiler due to possible uninitialized
_config_vars.
: Fix http.server to again handle scripts in CGI subdirectories,
broken by the fix for security .  Patch by Zach Byrne.
: Fix ffi_prep_args not zero-extending argument values correctly
on 64-bit Windows.
: Default to TCP_NODELAY=1 upon establishing an HTTPConnection.
Removed use of hard-coded MSS as itâs an optimization thatâs no longer
needed with Nagle disabled.

================================================================================

# Changelog - Library (Part 2)

: pyvenv creates relative symlinks where possible.

: cgi.FieldStorage() now supports the context management
protocol.

: Print response headers for CONNECT requests when debuglevel >
0. Patch by Demian Brecht.

: Optimized io.BytesIO to make less allocations and copyings.

: Splitting on a pattern that could match an empty string now
raises a warning.  Patterns that can only match empty strings are now
rejected.

: Closing io.BytesIO with exported buffer is rejected now to
prevent corrupting exported buffer.

: Removed __ne__ implementations.  Since fixing default __ne__
implementation in  they are redundant.

: Fix possible overflow in itertools.permutations.

: Fix possible overflow in itertools.product.

: Fixed possible integer overflow in itertools.combinations.

: Fixed possible integer overflow in
_json.encode_basestring_ascii.

: Fix the exception handling of generators in
PyEval_EvalFrameEx(). At entry, save or swap the exception state even if
PyEval_EvalFrameEx() is called with throwflag=0. At exit, the exception
state is now always restored or swapped, not only if why is WHY_YIELD or
WHY_RETURN. Patch co-written with Antoine Pitrou.

================================================================================

# Changelog - Library (Part 3)

: Restored support of writing ZIP files to tellable but
non-seekable streams.

: Writing to ZipFile and reading multiple ZipExtFiles is
threadsafe now.

: JSON decoder now raises JSONDecodeError instead of ValueError.

: timeit now rejects statements which canât be compiled outside a
function or a loop (e.g. âreturnâ or âbreakâ).

: Fixed readline with frames in Python implementation of pickle.

: Fixed bugs in the comparison of ipaddress classes.

: Removed incorrect implementations of __ne__() which didnât
returned NotImplemented if __eq__() returned NotImplemented.  The default
__ne__() now works correctly.

: email.feedparser.FeedParser now handles (malformed)
headers with no key rather than assuming the body has started.

: Support Application-Layer Protocol Negotiation (ALPN) in the
ssl module.

: Pickling of ipaddress objects now produces more compact and
portable representation.

: Update ssl error codes from latest OpenSSL git master.

: Much faster implementation of ipaddress.collapse_addresses()
when there are many non-consecutive addresses.

: 64-bit dev_t is now supported in the os module.

================================================================================

# Changelog - Library (Part 4)

: When an exception is raised in a task submitted to a
ProcessPoolExecutor, the remote traceback is now displayed in the parent
process.  Patch by Claudiu Popa.

: Add an option to limit output size when decompressing LZMA
data.  Patch by Nikolaus Rath and Martin Panter.

: In the http.cookies module, capitalize âHttpOnlyâ and âSecureâ
as they are written in the standard.

: In the distutilsâ check command, fix parsing of reST with code
or code-block directives.

: selectors.BaseSelector.get_key() now raises a RuntimeError if
the selector is closed. And selectors.BaseSelector.close() now clears its
internal reference to the selector mapping to break a reference cycle.
Initial patch written by Martin Richard. (See also: )

: Provide a way to seed the linecache for a PEP-302 module
without actually loading the code.

: Provide a new object API for traceback, including the ability
to not lookup lines at all until the traceback is actually rendered,
without any trace of the original objects being kept alive.

: Provide a home() classmethod on Path objects.  Contributed by
Victor Salgado and Mayank Tripathi.

================================================================================

# Changelog - Library (Part 5)

: Make json.dumps(..., ensure_ascii=False) as fast as the
default case of ensure_ascii=True.  Patch by Naoki Inada.

: Add math.inf and math.nan constants.

: Add ssl.SSLObject.shared_ciphers() and
ssl.SSLSocket.shared_ciphers() to fetch the clientâs list ciphers sent at
handshake.

: Remove compatibility with OpenSSLs older than 0.9.8.

: Improve performance and introspection support of comparison
methods created by functool.total_ordering.

: Add an expanduser() method on Path objects.

: Fix SimpleHTTPServer to correctly carry the query string and
fragment when it redirects to add a trailing slash.

: Added http.HTTPStatus enums (i.e. HTTPStatus.OK,
HTTPStatus.NOT_FOUND). Patch by Demian Brecht.

: In the io, module allow more operations to work on detached
streams.

: In the ftplib, make ssl.PROTOCOL_SSLv23 the default protocol
version.

: On OpenBSD 5.6 and newer, os.urandom() now calls getentropy(),
instead of reading /dev/urandom, to get pseudo-random bytes.

: pprint now produces evaluable output for wrapped strings.

: Added missing names to codecs.__all__.  Patch by Martin Panter.

: Pickling now uses the NEWOBJ opcode instead of the NEWOBJ_EX
opcode if possible.

================================================================================

# Changelog - Library (Part 6)

: Added a __sizeof__ implementation for pickle classes.

: pickletools.optimize() now aware of the MEMOIZE opcode, can
produce more compact result and no longer produces invalid output if input
data contains MEMOIZE opcodes together with PUT or BINPUT opcodes.

: Fixed HTTPConnection.set_tunnel with default port.  The port
value in the host header was set to âNoneâ.  Patch by Demian Brecht.

: A warning no longer produces an AttributeError when the program
is run with pythonw.exe.

: shutil.copytree(): fix crash when copying to VFAT. An exception
handler assumed that OSError objects always have a âwinerrorâ attribute.
That is not the case, so the exception handler itself raised
AttributeError when run on Linux (and, presumably, any other non-Windows
OS). Patch by Greg Ward.

bpo-1218234: Fix inspect.getsource() to load updated source of reloaded
module. Initial patch by Berker Peksag.

: Support wrapped callables in doctest. Patch by Claudiu Popa.

: Make sure selectors.EpollSelector.select() works when no FD is
registered.

: In the constructor of http.client.HTTPSConnection, prefer the
contextâs check_hostname attribute over the check_hostname parameter.

================================================================================

# Changelog - Library (Part 7)

: Add function sys.is_finalizing() to know about
interpreter shutdown.

: Add a default limit for the amount of data
xmlrpclib.gzip_decode will return. This resolves CVE 2013-1753.

: ZipFile.open() no longer reopen the underlying file.  Objects
returned by ZipFile.open() can now operate independently of the ZipFile
even if the ZipFile was created by passing in a file-like object as the
first argument to the constructor.

: Fix __pycache__ pyc file name clobber when pyc_compile is asked
to compile a source file containing multiple dots in the source file name.

: Update turtledemo doc and add module to the index.

: Fixed socket leak if HTTPConnection.getresponse() fails.
Original patch by Martin Panter.

: Deprecated the use of re.LOCALE flag with str patterns or
re.ASCII. It was newer worked.

: The âipâ command is now used on Linux to determine MAC address
in uuid.getnode().  Pach by Bruno Cauet.

: Add a context argument to xmlrpclib.ServerProxy constructor.

: Add contextlib.redirect_stderr().

: Make ssl.RAND_egd() optional to support LibreSSL. The
availability of the function is checked during the compilation. Patch
written by Bernard Spil.

================================================================================

# Changelog - Library (Part 8)

: SAX parser now supports files opened with file descriptor or
bytes path.

: Constructors and update methods of mapping classes in the
collections module now accept the self keyword argument.

: Add readline.append_history_file.

: Added the ânamereplaceâ error handler.

: Add  parameter to logging.handlers.HTTPHandler.

: Allow SSLContext to take the  parameter even if
OpenSSL doesnât support SNI.

: TestCase.subTest() would cause the test suite to be stopped
when in failfast mode, even in the absence of failures.

: HTTP cookie parsing is now stricter, in order to protect
against potential injection attacks.

: Windows detection in pathlib is now more robust.

: Reject coroutines in asyncio add_signal_handler(). Patch by
Ludovic.Gasc.

: Added urllib.request.HTTPBasicPriorAuthHandler. Patch by Matej
Cepl.

: Added attributes to the re.error class.

: Fix possible double free in the io.TextIOWrapper constructor.

: Different Unicode characters having the same uppercase but
different lowercase are now matched in case-insensitive regular
expressions.

: Fixed fcntl() with integer argument on 64-bit big-endian
platforms.

: Add an --sort-keys option to  CLI.

================================================================================

# Changelog - Library (Part 9)

: Updated reprlib output format for sets to use set literals.
Patch contributed by Berker Peksag.

: Updated reprlib output format for arrays to display empty
arrays without an unnecessary empty list.  Suggested by Serhiy Storchaka.

: Fixed the uu_codec codec incorrectly ported to 3.x. Based on
patch by Martin Panter.

: uuid.getnode() now determines MAC address on AIX using netstat.
Based on patch by Aivars KalvÄns.

: Fixed ttk.Treeview.tag_has() when called without arguments.

: Verify certificates by default in httplib (PEP 476).

: Fixed unpickling of http.cookies.SimpleCookie with protocol 2
and above. Patch by Tim Graham.

: Brought excluded code into the scope of a try block in
SysLogHandler.emit().

: Add missing get_terminal_size and SameFileError to
shutil.__all__.

: Remove deprecated Netrc class in the ftplib module. Patch by
Matt Chaput.

: Fixed handling of case-insensitive ranges in regular
expressions.

: Module level functions in the re module now cache compiled
locale-dependent regular expressions taking into account the locale.

: Query methods on pathlib.Path() (exists(), is_dir(), etc.) now
return False when the underlying stat call raises NotADirectoryError.

================================================================================

# Changelog - Library (Part 10)

: distutils now falls back to copying files when hard linking
doesnât work. This allows use with special filesystems such as VirtualBox
shared folders.

: Implemented reprs of classes in the zipfile module.

: Honour load_tests in the start_dir of discovery.

: gettext now raises an error when a .mo file has an unsupported
major version number.  Patch by Aaron Hill.

: Provide a locale.delocalize() function which can remove
locale-specific number formatting from a string representing a number,
without then converting it to a specific type.  Patch by CÃ©dric Krier.

: Make the pickling of global objects which donât have a
__module__ attribute less slow.

: Fixed ResourceWarning in shlex.__nain__.

: Defaults set with set_defaults on an argparse subparser are no
longer ignored when also set on the parent parser.

: unittest test loading ImportErrors are reported as import errors
with their import exception rather than as attribute errors after the
import has already failed.

: Make it possible to examine the errors from unittest discovery
without executing the test suite. The new  attribute on
TestLoader exposes these non-fatal errors encountered during
discovery.

================================================================================

# Changelog - Library (Part 11)

: Make email.headerregistryâs header âparamsâ attributes be
read-only (MappingProxyType).  Previously the dictionary was modifiable
but a new one was created on each access of the attribute.

: SSLv3 is now disabled throughout the standard library. It can
still be enabled by instantiating a SSLContext manually.

: In asyncio, the default SSL context for client connections is
now created using ssl.create_default_context(), for stronger security.

: Include closefd in io.FileIO repr.

: Add silent mode for compileall. quiet parameters of
compile_{dir, file, path} functions now have a multilevel value. Also, -q
option of the CLI now have a multilevel value. Patch by Thomas Kluyver.

: Convert the array and cmath modules to Argument Clinic.

: Add socket.socketpair() on Windows.

: Fix a file descriptor leak when socketserver bind fails.

: Fixed segfault in CTypes POINTER handling of large values.

: Raise ConversionError in xdrlib as documented.  Patch by Filip
GruszczyÅski and Claudiu Popa.

: Optimized parsing of regular expressions.

bpo-1519638: Now unmatched groups are replaced with empty strings in
re.sub() and re.subn().

: sndhdr.what/whathdr now return a namedtuple.

================================================================================

# Changelog - Library (Part 12)

: Fix pyexpatâs creation of a dummy frame to make it appear in
exception tracebacks.

: Add support for in-memory SSL to the ssl module.  Patch by
Geert Jansen.

: Fix len() on a WeakKeyDictionary when .clear() was called with
an iterator alive.

: Eliminated race condition in the computation of names for new
threads.

: Avoid RuntimeError in pickle.whichmodule() when sys.modules is
mutated while iterating.  Patch by Olivier Grisel.

: concurrent.futures.Executor.map() now takes a 
argument to allow batching of tasks in child processes and improve
performance of ProcessPoolExecutor.  Patch by Dan OâReilly.

: os.path.join() and os.path.relpath() now raise a TypeError with
more helpful error message for unsupported or mismatched types of
arguments.

: The zipfile module CLI now adds entries for directories
(including empty directories) in ZIP file.

: In the ssl.SSLContext.load_default_certs, consult the
environmental variables SSL_CERT_DIR and SSL_CERT_FILE on Windows.

: The email.__version__ variable has been removed; the email code
is no longer shipped separately from the stdlib, and __version__ hasnât
been updated in several releases.

================================================================================

# Changelog - Library (Part 13)

: Added non derived UTF-8 aliases to locale aliases table.

: Added locales supported in glibc 2.18 to locale alias table.

: Added convenience methods read_text/write_text and read_bytes/
write_bytes to pathlib.Path objects.

: On 32-bit AIX platform, donât expose os.posix_fadvise() nor
os.posix_fallocate() because their prototypes in system headers are wrong.

: When an io.BufferedRWPair object is deallocated, clear its
weakrefs.

: Number of capturing groups in regular expression is no longer
limited by 100.

: InteractiveInterpreter now displays the full chained traceback
in its showtraceback method, to match the built in interactive
interpreter.

: Added tests for marshal C API that works with FILE*.

: distutils register and upload methods now use HTML standards
compliant CRLF line endings.

: Fixed macpath.join() for empty first component.  Patch by Oleg
Oshmyan.

: distutilsâ build and build_ext commands now accept a 
option to enable parallel building of extension modules.

: Improve canceled timer handles cleanup to prevent unbound
memory usage. Patch by Joshua Moore-Oliva.

: TemporaryDirectory no longer attempts to clean up twice when
used in the with statement in generator.

================================================================================

# Changelog - Library (Part 14)

: Forbidden ambiguous octal escapes out of range 0-0o377 in
regular expressions.

: Now directories added to ZIP file have correct Unix and MS-DOS
directory attributes.

: ZipFile.close() no longer writes ZIP64 central directory
records if allowZip64 is false.

: Fix urljoin problem with relative urls, a regression observed
after changes to issue22118 were submitted.

: Fixed debugging output of the GROUPREF_EXISTS opcode in the re
module. Removed trailing spaces in debugging output.

: Unhandled exception in thread no longer causes unhandled
AttributeError when sys.stderr is None.

: Ensure that  in subprocess.Popen() selects line
buffering, rather than block buffering.  Patch by Akira Li.

: Fix API bug: email.message.EmailMessage.is_attachment is now a
method.

: Fix email.message.EmailMessage.is_attachment to return the
correct result when the header has parameters as well as a value.

: Add NNTPError to nntplib.__all__.

: urllib.request.urlopen will accept a context object
(SSLContext) as an argument which will then be used for HTTPS connection.
Patch by Alex Gaynor.

: The warnings registries are now reset when the filters are
modified.

================================================================================

# Changelog - Library (Part 15)

: Limit the length of incoming HTTP request in wsgiref server to
65536 bytes and send a 414 error code for higher lengths. Patch
contributed by Devin Cook.

Lax cookie parsing in http.cookies could be a security issue when combined
with non-standard cookie handling in some web browsers.  Reported by
Sergey Bobrov.

: logging methods now accept an exception instance as well as a
Boolean value or exception tuple. Thanks to Yury Selivanov for the patch.

: An exception in Tkinter callback no longer crashes the program
when it is run with pythonw.exe.

: Prevent turtle AttributeError with non-default Canvas on OS X.

: sqlite3 now raises an exception if the request contains a null
character instead of truncating it.  Based on patch by Victor Stinner.

: The glob module now supports recursive search in subdirectories
using the  pattern.

: Fixed a crash in Tkinter on AIX when called Tcl command with
empty string or tuple argument.

: Tkinter now most likely raises MemoryError instead of crash if
the memory allocation fails.

: Fix a crash in the json module on memory allocation failure.

: imaplib.IMAP4 now supports the context management protocol.
Original patch by Tarek ZiadÃ©.

================================================================================

# Changelog - Library (Part 16)

: We now override tuple methods in mock.call objects so that they
can be used as normal call attributes.

: load_tests() is now unconditionally run when it is present
in a packageâs __init__.py.  TestLoader.loadTestsFromModule()
still accepts use_load_tests, but it is deprecated and ignored.  A new
keyword-only attribute  is added and documented.  Patch given
by Robert Collins, tweaked by Barry Warsaw.

: First letter no longer is stripped from the âstatusâ key in the
result of Treeview.heading().

: Fixed resource leak in the HTTP connection when an invalid
response is received.  Patch by Martin Panter.

: Add a .version() method to SSL sockets exposing the actual
protocol version in use.

: configparser exceptions no longer expose implementation
details. Chained KeyErrors are removed, which leads to cleaner tracebacks.
Patch by Claudiu Popa.

: turtledemo no longer reloads examples to re-run them.
Initialization of variables and gui setup should be done in main(), which
is called each time a demo is run, but not on import.

: Turtledemo users can change the code font size with a menu
selection or control(command) â-â or â+â or control-mousewheel. Original
patch by Lita Cho.

================================================================================

# Changelog - Library (Part 17)

: The separator between the turtledemo text pane and the drawing
canvas can now be grabbed and dragged with a mouse.  The code text pane
can be widened to easily view or copy the full width of the text.  The
canvas can be widened on small screens.  Original patches by Jan Kanis and
Lita Cho.

: Turtledemo buttons no longer disappear when the window is
shrunk.  Original patches by Jan Kanis and Lita Cho.

: time.monotonic() is now always available.
threading.Lock.acquire(), threading.RLock.acquire() and socket
operations now use a monotonic clock, instead of the system clock, when a
timeout is used.

: Add a default number of workers to ThreadPoolExecutor equal to
5 times the number of CPUs.  Patch by Claudiu Popa.

: smtplib now resets its state more completely after a quit.  The
most obvious consequence of the previous behavior was a STARTTLS failure
during a connect/starttls/quit/connect/starttls sequence.

: ctypesâ BigEndianStructure and LittleEndianStructure now define
an empty __slots__ so that subclasses donât always get an instance dict.
Patch by Claudiu Popa.

================================================================================

# Changelog - Library (Part 18)

: Fix an occasional RuntimeError in threading.Condition.wait()
caused by mutation of the waiters queue without holding the lock.  Patch
by Doug Zongker.

: On UNIX, _PyTime_gettimeofday() now uses
clock_gettime(CLOCK_REALTIME) if available. As a side effect, Python now
depends on the librt library on Solaris and on Linux (only with glibc
older than 2.17).

: Use e.args to unpack exceptions correctly in
distutils.file_util.move_file. Patch by Claudiu Popa.

The webbrowser module now uses subprocessâs start_new_session=True rather
than a potentially risky preexec_fn=os.setsid call.

: signal.set_wakeup_fd(fd) now raises an exception if the file
descriptor is in blocking mode.

: inspect.stack() now returns a named tuple instead of a tuple.
Patch by Daniel Shahaf.

: Fixed Tkinter images copying operations in NoDefaultRoot mode.

: Add a  argument to timeit functions, in order to
override the globals namespace in which the timed code is executed. Patch
by Ben Roberts.

: Switch urllib.parse to use RFC 3986 semantics for the
resolution of relative URLs, rather than RFCs 1808 and 2396. Patch by
Demian Brecht.

: Added the âmembersâ parameter to TarFile.list().

================================================================================

# Changelog - Library (Part 19)

: Allow compileall recursion depth to be specified with a -r
option.

: Add a __sizeof__ implementation for mmap objects on Windows.

: Avoided reference loops with Variables and Fonts in Tkinter.

: SimpleHTTPRequestHandler now supports undecodable file names.

: Optimized line reading in io.BytesIO.

: Raise HTTPError on failed Basic Authentication immediately.
Initial patch by Sam Bull.

: Restored the use of lazy iterkeys()/itervalues()/iteritems() in
the mailbox module.

: Changed FeedParser feed() to avoid ()
behavior when parsing long line. Original patch by Raymond Hettinger.

: The functools LRU Cache decorator factory now gives an earlier
and clearer error message when the user forgets the required parameters.

: glob() patterns ending with a slash no longer match non-dirs on
AIX.  Based on patch by Delhallt.

: Added support for RFC 6531 (SMTPUTF8) in smtpd.

: Update the ctypes moduleâs libffi to v3.1.  This release adds
support for the Linux AArch64 and POWERPC ELF ABIv2 little endian
architectures.

: Added support for the âxztarâ format in the shutil module.

: Donât force 3rd party C extensions to be built with
-Werror=declaration-after-statement.

================================================================================

# Changelog - Library (Part 20)

: Fixed crash when using uninitialized sqlite3.Row (in particular
when unpickling pickled sqlite3.Row).  sqlite3.Row is now initialized in
the __new__() method.

: Convert posixmodule to use Argument Clinic.

: Add an  argument to Pathlib.mkdir() to mimic
  and os.makedirs() functionality.  When true, ignore
FileExistsErrors. Patch by Berker Peksag.

: Bypass IDNA for pure-ASCII host names in the socket module (in
particular for numeric IPs).

: set the default value for the convert_charrefs argument of
HTMLParser to True.  Patch by Berker Peksag.

Add an __all__ to html.entities.

: the strict mode and argument of HTMLParser, HTMLParser.error,
and the HTMLParserError exception have been removed.

: Dropped support of Tk 8.3 in Tkinter.

: Now Tkinter correctly handles bytes arguments passed to Tk. In
particular this allows initializing images from binary data.

: When initialized from a bytes object, io.BytesIO() now defers
making a copy until it is mutated, improving performance and memory use on
some use cases. Patch by David Wilson.

: On Windows, signal.set_wakeup_fd() now also supports sockets. A
side effect is that Python depends to the WinSock library.

================================================================================

# Changelog - Library (Part 21)

: Add os.get_blocking() and os.set_blocking() functions to get
and set the blocking mode of a file descriptor (False if the O_NONBLOCK
flag is set, True otherwise). These functions are not available on
Windows.

: Make turtledemo start as active on OS X even when run with
subprocess. Patch by Lita Cho.

: Fix build error for _multiprocessing when semaphores are not
available. Patch by Arfrever Frehtes Taifersar Arahesis.

: Convert sha1, sha256, sha512 and md5 to ArgumentClinic. Patch
by Vajrasky Kok.

Fix repr(_socket.socket) on Windows 64-bit: donât fail with OverflowError
on closed socket. repr(socket.socket) already works fine.

: Reprs of most Python implemented classes now contain actual
class name instead of hardcoded one.

: The dis module can now disassemble generator-iterator objects
based on their gi_code attribute. Patch by Clement Rouault.

: The asynchat.async_chat.handle_read() method now ignores
BlockingIOError exceptions.

: Fixed premature DECREF in call_tzinfo_method. Patch by Tom
Flanagan.

================================================================================

# Changelog - Library (Part 22)

: readline: Disable the meta modifier key if stdout is not a
terminal to not write the ANSI sequence "\033[1034h" into stdout. This
sequence is used on some terminal (ex: TERM=xterm-256colorâ) to enable
support of 8 bit characters.

: Removed a number of out-of-dated and non-working for a long time
Tkinter methods.

: Scrollbar.activate() now returns the name of active element if
the argument is not specified.  Scrollbar.set() now always accepts only 2
arguments.

: Clean up and speed up the ntpath module.

: plistlibâs load() and loads() now work if the fmt parameter is
specified.

: __qualname__ instead of __name__ is now always used to format
fully qualified class names of Python implemented classes.

: Reprs now always use hexadecimal format with the â0xâ prefix
when contain an id in form â at 0xâ¦â.

: signal.set_wakeup_fd() now raises an OSError instead of a
ValueError on  failure.

: tarfile.open() now handles fileobj with an integer ânameâ
attribute.  Based on patch by Antoine Pietri.

: Respect -q command-line option when code module is ran.

: Donât pass the redundant âfileâ argument to self.error().

================================================================================

# Changelog - Library (Part 23)

: Improve exception message of warnings.warn() for bad category.
Initial patch by Phil Elson.

: os.read() now uses a Py_ssize_t() type instead of
 for the size to support reading more than 2 GB at once. On
Windows, the size is truncated to INT_MAX. As any call to os.read(), the
OS may read less bytes than the number of requested bytes.

: Fixed source file viewing in pydocâs server mode on Windows.

: asynchat.async_chat().set_terminator() now raises a ValueError
if the number of received bytes is negative.

: asynchat.async_chat.push() now raises a TypeError if it doesnât
get a bytes string

: Add missing kwonlyargcount argument to
ModuleFinder.replace_paths_in_code().

: calling Path.with_suffix(ââ) allows removing the suffix again.
Patch by July Tikhonov.

: Disallow the construction of invalid paths using
Path.with_name().  Original patch by Antony Lee.

: Added âauthâ method to smtplib to make implementing auth
mechanisms simpler, and used it internally in the login method.

: Fixed a segfault in the winreg module when  is passed
as a REG_BINARY value to SetValueEx.  Patch by John Ehresman.

================================================================================

# Changelog - Library (Part 24)

: io.FileIO.readall() does not ignore I/O errors anymore. Before,
it ignored I/O errors if at least the first C call read() succeed.

: headers parameter of wsgiref.headers.Headers is now optional.
Initial patch by Pablo Torres Navarrete and SilentGhost.

: ssl.RAND_add() now supports strings longer than 2 GB.

: Prevent extraneous fstat() calls during open().  Patch by
Bohuslav Kabrda.

: cProfile now displays the module name of C extension functions,
in addition to their own name.

: asyncore: emit a ResourceWarning when an unclosed file_wrapper
object is destroyed. The destructor now closes the file if needed. The
close() method can now be called twice: the second call does nothing.

: Better handling of Python exceptions in the sqlite3 module.

: Make sure the email.parser.BytesParser TextIOWrapper is
discarded after parsing, so the input file isnât unexpectedly closed.

: imghdr now recognizes OpenEXR format images.

: Used the âwithâ statement in the dbm.dumb module to ensure
files closing. Patch by Claudiu Popa.

: socketserver: Fix a race condition in child processes reaping.

: Added the st_file_attributes field to os.stat_result on
Windows.

================================================================================

# Changelog - Library (Part 25)

: Require named tuple inputs to be exact strings.

: The distutils âuploadâ command now exits with a non-zero return
code when uploading fails.  Patch by Martin Dengler.

: asyncio.Queue: support any type of number (ex: float) for the
maximum size. Patch written by Vajrasky Kok.

: support for âsite-pythonâ directories has now been removed from
the site module (it was deprecated in 3.4).

: new socket.sendfile() method allowing a file to be sent over a
socket by using high-performance os.sendfile() on UNIX. Patch by Giampaolo
Rodolaâ.

: dbm.dump.open() now always creates a new database when the flag
has the value ânâ.  Patch by Claudiu Popa.

: Add a new is_closed() method to asyncio.BaseEventLoop.
run_forever() and run_until_complete() methods of asyncio.BaseEventLoop
now raise an exception if the event loop was closed.

: Prevent a security hole in CGIHTTPServer by URL unquoting paths
before checking for a CGI script at that path.

: Fixed possible resource leak in failed open().

: Printout of keyword args should be in deterministic order in a
mock function call. This will help to write better doctests.

: Fixed chaining nonnormalized exceptions in io close() methods.

================================================================================

# Changelog - Library (Part 26)

: Fix the pydoc.help function to not fail when sys.stdin is not a
valid file.

: tempfile.TemporaryFile now uses os.O_TMPFILE flag is available.

: Fix pydoc.writedoc so that the HTML documentation for methods
that use âselfâ in the example code is generated correctly.

: In urllib.request, fix pruning of the FTP cache.

: The subprocess module could fail to close open fds that were
inherited by the calling process and already higher than POSIX resource
limits would otherwise allow.  On systems with a functioning /proc/self/fd
or /dev/fd interface the max is now ignored and all fds are closed.

: Introduce importlib.util.module_from_spec() as the preferred
way to create a new module.

: Fixed possible integer overflow of too long string lengths in
the tkinter module on 64-bit platforms.

: The zipfile module now ignores extra fields in the central
directory that are too short to be parsed instead of letting a
struct.unpack error bubble up as this âbad dataâ appears in many real
world zip files in the wild and is ignored by other zip tools.

: Added âkeyâ and âreverseâ parameters to heapq.merge(). (First
draft of patch contributed by Simon Sapin.)

================================================================================

# Changelog - Library (Part 27)

: tkinter.ttk now works when default root window is not set.

: _tkinter.create() now creates  object with
wantobjects=1 by default.

: sqlite3.Row now truly supports sequence protocol.  In
particular it supports reverse() and negative indices.  Original patch by
Claudiu Popa.

: If copying (no symlinks) specified for a venv, then the python
interpreter aliases (python, python3) are now created by copying rather
than symlinking.

: Added support for the WebP image type in the imghdr module.
Patch by Fabrice Aneche and Claudiu Popa.

: Speedup some properties of IP addresses (IPv4Address,
IPv6Address) such as .is_private or .is_multicast.

: Improve the repr for threading.Lock() and its variants by
showing the âlockedâ or âunlockedâ status.  Patch by Berker Peksag.

: The plistlib module now supports loading of binary plist files
when reference or offset size is not a power of two.

: Add a default backlog to socket.listen().

: Most Tkinter methods which accepted tuples now accept lists
too.

: With the assistance of a new internal _codecs._forget_codec
helping function, test_codecs now clears the encoding caches to avoid the
appearance of a reference leak

================================================================================

# Changelog - Library (Part 28)

: Tkinter tests now donât reuse default root window.  New root
window is created for every test class.

: Fix  format strings on ctypes objects with a
nontrivial shape.

: Optimize ipaddress.collapse_addresses().

: Optimize ipaddress.summarize_address_range() and
ipaddress.{IPv4Network,IPv6Network}.subnets().

: Optimize parsing of netmasks in ipaddress.IPv4Network and
ipaddress.IPv6Network.

: Disallowed the surrogatepass error handler for non UTF-*
encodings.

: Fixed re.fullmatch() of repeated single character pattern with
ignore case. Original patch by Matthew Barnett.

: fileinput.FileInput now reads bytes from standard stream if
binary mode is specified.  Patch by Sam Kimbrel.

: Add a samefile() method to pathlib Path objects.  Initial patch
by Vajrasky Kok.

: Set up modules properly in PyImport_ExecCodeModuleObject (and
friends).

: Fix a unicode error in the pydoc pager when the documentation
contains characters not encodable to the stdout encoding.

: ipaddress.IPv4Network and ipaddress.IPv6Network now accept an
(address, netmask) tuple argument, so as to easily construct network
objects from existing addresses.

: importlib.abc.InspectLoader.source_to_code() is now a
staticmethod.

================================================================================

# Changelog - Library (Part 29)

: Simplified and optimized heaqp.nlargest() and nmsmallest() to
make fewer tuple comparisons.

: Fix TextIOWrapper(â¦, write_through=True) to not force a
flush() on the underlying binary stream.  Patch by akira.

: Unlink now removes junctions on Windows. Patch by Kim GrÃ¤sman

: Bugfix for curses.window.addch() regression in 3.4.0. In
porting to Argument Clinic, the first two arguments were reversed.

: _decimal: The module now supports function signatures.

: Remove the non-standard âwatchexpâ parameter from the
Decimal.quantize() method in the Python version.  It had never been
present in the C version.

: Reduced the risk of false positives in robotparser by checking
to make sure that robots.txt has been read or does not exist prior to
returning True in can_fetch().

: Have the OrderedDict mark deleted links as unusable. This gives
an early failure if the link is deleted during iteration.

: Add __slots__ to the MappingViews ABC. Patch by Josh Rosenberg.

: Eliminate double hashing in the C speed-up code for
collections.Counter().

: itertools.islice() now releases the reference to the source
iterator when the slice is exhausted.  Patch by Anton Afanasyev.

================================================================================

# Changelog - Library (Part 30)

: TextIOWrapper now allows the underlying binary streamâs read()
or read1() method to return an arbitrary bytes-like object (such as a
memoryview). Patch by Nikolaus Rath.

: SSLSocket.send() now raises either SSLWantReadError or
SSLWantWriteError on a non-blocking socket if the operation would block.
Previously, it would return 0.  Patch by Nikolaus Rath.

: removed previously deprecated asyncore.dispatcher __getattr__
cheap inheritance hack.

: assertRaises now tries to clear references to local variables in
the exceptionâs traceback.

: ssl.cert_time_to_seconds() now interprets the given time string
in the UTC timezone (as specified in RFC 5280), not the local timezone.

: Calling sys.flags.__new__ would crash the interpreter, now it
raises a TypeError.

: Make operations on a closed dbm.dumb database always raise the
same exception.

: Detect when the os.urandom cached fd has been closed or
replaced, and open it anew.

: subprocessâs Popen.wait() is now thread safe so that multiple
threads may be calling wait() or poll() on a Popen instance at the same
time without losing the Popen.returncode value.

: Path objects can now be instantiated from str subclass
instances (such as numpy.str_).

================================================================================

# Changelog - Library (Part 31)

: urllib.response object to use _TemporaryFileWrapper (and
_TemporaryFileCloser) facility. Provides a better way to handle file
descriptor close. Patch contributed by Christian Theune.

: mindom now raises a custom ValueError indicating it doesnât
support spaces in URIs instead of letting a âsplitâ ValueError bubble up.

: The ssl.PROTOCOL* constants are now enum members.

: posixmodule: Donât define USE_XATTRS on KFreeBSD and the Hurd.

: New method assert_not_called for Mock. It raises AssertionError
if the mock has been called.

: New keyword argument  to Mock. It raises
AttributeError incase of an attribute startswith assert or assret.

: ssl.get_server_certificate() now uses PROTOCOL_SSLv23, not
PROTOCOL_SSLv3, for maximum compatibility.

: patch.stopall() didnât work deterministically when the same
name was patched more than once.

: Updated fileConfig and dictConfig to remove inconsistencies.
Thanks to Jure Koren for the patch.

: Passing name keyword argument to mock.create_autospec now
works.

: Add lib64 -> lib symlink in venvs on 64-bit non-OS X POSIX.

================================================================================

# Changelog - Library (Part 32)

: Some SMTP servers disconnect after certain errors, violating
strict RFC conformance.  Instead of losing the error code when we issue
the subsequent RSET, smtplib now returns the error code and defers raising
the SMTPServerDisconnected error until the next command is issued.

: setting an iterable side_effect on a mock function created by
create_autospec now works. Patch by Kushal Das.

: Fix  header and reconnection when using
http.client.HTTPConnection.set_tunnel(). Patch by Nikolaus Rath.

: unittest.mock.MagicMock now supports division. Patch by
Johannes Baiter.

: Fix arbitrary memory access in JSONDecoder.raw_decode with a
negative second parameter. Bug reported by Guido Vranken. (See also:
CVE 2014-4616)

: getpass now handles non-ascii characters that the input stream
encoding cannot encode by re-encoding using the replace error handler.

: Fixed undocumented filter API of the rot13 codec. Patch by
Berker Peksag.

: Improved math.factorial error message for large positive inputs
and changed exception type (OverflowError -> ValueError) for large
negative inputs.

: isinstance check relaxed from dict to collections.Mapping.

================================================================================

# Changelog - Library (Part 33)

: asyncio.EventLoop.create_unix_server() now raises a ValueError
if path and sock are specified at the same time.

: Avoid unnecessary normalization of Fractions resulting from
power and other operations.  Patch by Raymond Hettinger.

: Introduce importlib.util.LazyLoader.

: signal module constants were turned into enums. Patch by
Giampaolo Rodolaâ.

: Improved the repr of Tkinter widgets.

: The items, keys, and values views of OrderedDict now support
reverse iteration using reversed().

: Improved thread-safety in logging cleanup during interpreter
shutdown. Thanks to Devin Jeanpierre for the patch.

: Fix a leak of file descriptor in
tempfile.NamedTemporaryFile(), close the file descriptor if
 fails

: Return None from pkgutil.get_loader() when __spec__ is missing.

: Enhance ssl.create_default_context() when used for server side
sockets to provide better security by default.

: assertRaisesRegex and assertWarnsRegex now raise a
 if the second argument is not a string or compiled regex.

: Replace relative import by absolute import.

: Stop wrapping exception when using ThreadPool.

: In os.makedirs, do not set the process-wide umask. Note this
changes behavior of makedirs when exist_ok=True.

================================================================================

# Changelog - Library (Part 34)

: Fix issues found by pyflakes for multiprocessing.

: SSL contexts will now automatically select an elliptic curve
for ECDH key exchange on OpenSSL 1.0.2 and later, and otherwise default to
âprime256v1â.

: Improve the command-line interface of json.tool.

: Enhance default ciphers used by the ssl module to enable better
security and prioritize perfect forward secrecy.

: Donât assume that __file__ is defined on importlib.__init__.

: Ignore __builtins__ in several test_importlib.test_api tests.

: xmlrpc.client.ServerProxy is now a context manager.

: The formatter module now raises DeprecationWarning instead of
PendingDeprecationWarning.

: Remove the ability of datetime.time instances to be considered
false in boolean contexts.

: selectors module now supports /dev/poll on Solaris. Patch by
Giampaolo Rodolaâ.

: When the  locale is the POSIX locale ( locale),
 and sys.stdout are now using the
surrogateescape error handler, instead of the  error
handler.

: Implement incremental decoder for cp65001 code (Windows code
page 65001, Microsoft UTF-8).

================================================================================

# Changelog - Library (Part 35)

: Delay the initialization of encoding and decoding tables for
base32, ascii85 and base85 codecs in the base64 module, and delay the
initialization of the unquote_to_bytes() table of the urllib.parse module,
to not waste memory if these modules are not used.

: Include the broadcast address in the usuable hosts for IPv6 in
ipaddress.

: When an external command (e.g. compiler) fails, distutils now
prints out the whole command line (instead of just the command name) if
the environment variable DISTUTILS_DEBUG is set.

: distutils should not produce unhelpful âerror: Noneâ messages
anymore. distutils.util.grok_environment_error is kept but doc-deprecated.

: Prevent possible gzip ââreadâ is not definedâ NameError. Patch
by Claudiu Popa.

: email.message.Message.attach now returns a more useful
error message if  is called on a message for which
is_multipart is False.

: RE pattern methods now accept the string keyword parameters as
documented. The pattern and source keyword parameters are left as
deprecated aliases.

: Fix modulefinder to work with bytecode-only modules.

: copy.copy() now doesnât make a copy when the input is a bytes
object. Initial patch by Peter Otten.

================================================================================

# Changelog - Library (Part 36)

: On AIX, time.mktime() now raises an OverflowError for year
outsize range [1902; 2037].

: inspect.signature: Use enum for parameter kind constants.

: inspect.signature: Make Signature and Parameter picklable.

: Add inspect.Signature.from_callable method.

: Improve repr of inspect.Signature and inspect.Parameter.

: Fix inspect.getcallargs() to raise correct TypeError for
missing keyword-only arguments. Patch by Jeremiah Lowin.

: Fix inspect.getcallargs() to fail correctly if more than 3
arguments are missing. Patch by Jeremiah Lowin.

: Ensure a meaningful exception is raised when attempting to parse
more than one XML document per pyexpat xmlparser instance. (Original
patches by Hirokazu Yamamoto and Amaury Forgeot dâArc, with suggested
wording by David Gutteridge)

: Fix inspect.signature to better support functools.partial. Due
to the specifics of functools.partial implementation,
positional-or-keyword arguments passed as keyword arguments become
keyword-only.

: inspect.Signature and inspect.Parameter are now hashable.
Thanks to Antony Lee for bug reports and suggestions.

: doctest.DocTestSuite returns an empty unittest.TestSuite
instead of raising ValueError if it finds no tests

================================================================================

# Changelog - Library (Part 37)

: Fix asyncio.tasks.CoroWrapper to workaround a bug in yield-from
implementation in CPythons prior to 3.4.1.

asyncio: Add gi_{frame,running,code} properties to CoroWrapper (upstream
).

: Avoid exception in _osx_support with non-standard compiler
configurations. Patch by John Szakmeister.

: Ensure that the turtle window becomes the topmost window when
launched on OS X.

: Validate that __signature__ is None or an instance of
Signature.

: Prevent AttributeError in
distutils.sysconfig.customize_compiler due to possible uninitialized
_config_vars.

: Fix http.server to again handle scripts in CGI subdirectories,
broken by the fix for security .  Patch by Zach Byrne.

: Fix ffi_prep_args not zero-extending argument values correctly
on 64-bit Windows.

: Default to TCP_NODELAY=1 upon establishing an HTTPConnection.
Removed use of hard-coded MSS as itâs an optimization thatâs no longer
needed with Nagle disabled.

================================================================================

# Changelog - IDLE (Part 1)

List:
: Configuration of the max line length for the FormatParagraph
extension has been moved from the General tab of the Idle preferences
dialog to the FormatParagraph tab of the Config Extensions dialog. Patch
by Tal Einat.
: Update Idle doc chapter to match current Idle and add new
information.
: Add Idle extension configuration dialog to Options menu. Changes
are written to HOME/.idlerc/config-extensions.cfg. Original patch by Tal
Einat.
: A module browser (File : Class Browser, Alt+C) requires an
editor window with a filename.  When Class Browser is requested otherwise,
from a shell, output window, or âUntitledâ editor, Idle no longer displays
an error box. It now pops up an Open Module box (Alt+M). If a valid name
is entered and a module is opened, a corresponding browser is also opened.
: Save As to type Python files automatically adds .py to the name
you enter (even if your system does not display it).  Some systems
automatically add .txt when type is Text files.
: Code objects are not normally pickled by the pickle module. To
match this, they are no longer pickled when running under Idle.
: Adjust Editor window title; remove âPythonâ, move version to
end.
: Idle debugger breakpoints no longer disappear when inserting or
deleting lines.
: Turtledemo can now be run from Idle. Currently, the entry is on
the Help menu, but it may move to Run. Patch by Ramchandra Apt and Lita
Cho.
: Add support for non-ascii identifiers to HyperParser.
: Add unittest for WidgetRedirector. Initial patch by Saimadhav
Heblikar.
: Add unittest for SearchDialogBase. Patch by Phil Webster.
: Add unittest for ParenMatch. Patch by Saimadhav Heblikar.
: add unittest for HyperParser. Original patch by Saimadhav
Heblikar.
: Add missing upper(lower)case versions of default Windows key
bindings for Idle so Caps Lock does not disable them. Patch by Roger
Serwy.
: Closing a Find-in-files output window while the search is still
in progress no longer closes Idle.
: Add unittest for textView. Patch by Phil Webster.
: Add unittest for AutoExpand. Patch by Saihadhav Heblikar.
: Add unittest for AutoComplete. Patch by Phil Webster.
: htest.py - Improve framework, complete set of tests. Patches by
Saimadhav Heblikar
: Add idlelib/idle_test/htest.py with a few sample tests to begin
consolidating and improving human-validated tests of Idle. Change other
files as needed to work with htest.  Running the module as __main__ runs
all tests.
: Change default paragraph width to 72, the 
recommendation.
: Paragraph reformat test passes after user changes reformat
width.
: Ensure IDLE menus are customized properly on OS X for
non-framework builds and for all variants of Tk.
: Rename IDLE âWindowsâ menu item to âWindowâ. Patch by Al
Sweigart.

================================================================================

# Changelog - IDLE (Part 2)

: Configuration of the max line length for the FormatParagraph
extension has been moved from the General tab of the Idle preferences
dialog to the FormatParagraph tab of the Config Extensions dialog. Patch
by Tal Einat.

: Update Idle doc chapter to match current Idle and add new
information.

: Add Idle extension configuration dialog to Options menu. Changes
are written to HOME/.idlerc/config-extensions.cfg. Original patch by Tal
Einat.

: A module browser (File : Class Browser, Alt+C) requires an
editor window with a filename.  When Class Browser is requested otherwise,
from a shell, output window, or âUntitledâ editor, Idle no longer displays
an error box. It now pops up an Open Module box (Alt+M). If a valid name
is entered and a module is opened, a corresponding browser is also opened.

: Save As to type Python files automatically adds .py to the name
you enter (even if your system does not display it).  Some systems
automatically add .txt when type is Text files.

: Code objects are not normally pickled by the pickle module. To
match this, they are no longer pickled when running under Idle.

: Adjust Editor window title; remove âPythonâ, move version to
end.

================================================================================

# Changelog - IDLE (Part 3)

: Idle debugger breakpoints no longer disappear when inserting or
deleting lines.

: Turtledemo can now be run from Idle. Currently, the entry is on
the Help menu, but it may move to Run. Patch by Ramchandra Apt and Lita
Cho.

: Add support for non-ascii identifiers to HyperParser.

: Add unittest for WidgetRedirector. Initial patch by Saimadhav
Heblikar.

: Add unittest for SearchDialogBase. Patch by Phil Webster.

: Add unittest for ParenMatch. Patch by Saimadhav Heblikar.

: add unittest for HyperParser. Original patch by Saimadhav
Heblikar.

: Add missing upper(lower)case versions of default Windows key
bindings for Idle so Caps Lock does not disable them. Patch by Roger
Serwy.

: Closing a Find-in-files output window while the search is still
in progress no longer closes Idle.

: Add unittest for textView. Patch by Phil Webster.

: Add unittest for AutoExpand. Patch by Saihadhav Heblikar.

: Add unittest for AutoComplete. Patch by Phil Webster.

: htest.py - Improve framework, complete set of tests. Patches by
Saimadhav Heblikar

================================================================================

# Changelog - IDLE (Part 4)

: Add idlelib/idle_test/htest.py with a few sample tests to begin
consolidating and improving human-validated tests of Idle. Change other
files as needed to work with htest.  Running the module as __main__ runs
all tests.

: Change default paragraph width to 72, the 
recommendation.

: Paragraph reformat test passes after user changes reformat
width.

: Ensure IDLE menus are customized properly on OS X for
non-framework builds and for all variants of Tk.

: Rename IDLE âWindowsâ menu item to âWindowâ. Patch by Al
Sweigart.

================================================================================

# Changelog - Build (Part 1)

List:
: Use standard PKG_PROG_PKG_CONFIG autoconf macro in the
configure script.
: Allow the ssl module to be compiled if openssl doesnât support
SSL 3.
: Drop support of the Borland C compiler to build Python. The
distutils module still supports it to build extensions.
: Drop support of MS-DOS, especially of the DJGPP compiler
(MS-DOS port of GCC).
: Check whether self.extensions is empty in setup.py. Patch by
Jonathan Hosmer.
: Remove incorrect uses of recursive make.  Patch by Jonas
Wagner.
: Define HAVE_ROUND when building with Visual Studio 2013 and
above.  Patch by Zachary Turner.
: the programs that embed the CPython runtime are now in a
separate âProgramsâ directory, rather than being kept in the Modules
directory.
: âmake suspiciousâ, âmake linkcheckâ and âmake doctestâ in Doc/
now display special message when and only when there are failures.
: The Windows build process no longer attempts to find Perl,
instead relying on OpenSSL source being configured and ready to build.
The PCbuild\build_ssl.py script has been re-written and re-named to
PCbuild\prepare_ssl.py, and takes care of configuring OpenSSL source
for both 32 and 64 bit platforms.  OpenSSL sources obtained from
svn.python.org will always be pre-configured and ready to build.
: Add a build option to enable AddressSanitizer support.
: The Windows build process now creates âpython.batâ in the root
of the source tree, which passes all arguments through to the most
recently built interpreter.
: Refactor and fix curses configure check to always search in a
ncursesw directory.
: For BerkeleyDB and Sqlite, only add the found library and
include directories if they arenât already being searched. This avoids an
explicit runtime library dependency.
: Tools/scripts/generate_opcode_h.py automatically regenerates
Include/opcode.h from Lib/opcode.py if the latter gets any change.
: OS X installer build support for documentation build changes in
3.4.1: assume externally supplied sphinx-build is available in /usr/bin.
: Eliminate use of deprecated bundlebuilder in OS X builds.
: Incorporated Tcl, Tk, and Tix builds into the Windows build
solution.
: Fix Modules/Setup  support.
: Anticipated fixes to support OS X versions > 10.9.
: Prevent possible segfaults and other random failures of python
âgenerate-posix-vars in pybuilddir.txt build target.
: Fix library order returned by python-config.
: Add library build dir for Python extension cross-builds.
: Windows build updated to support VC 14.0 (Visual Studio 2015),
which will be used for the official release.
: Build _msi.pyd with cabinet.lib instead of fci.lib
: Use private version of OpenSSL for OS X 10.5+ installer.

================================================================================

# Changelog - Build (Part 2)

: Use standard PKG_PROG_PKG_CONFIG autoconf macro in the
configure script.

: Allow the ssl module to be compiled if openssl doesnât support
SSL 3.

: Drop support of the Borland C compiler to build Python. The
distutils module still supports it to build extensions.

: Drop support of MS-DOS, especially of the DJGPP compiler
(MS-DOS port of GCC).

: Check whether self.extensions is empty in setup.py. Patch by
Jonathan Hosmer.

: Remove incorrect uses of recursive make.  Patch by Jonas
Wagner.

: Define HAVE_ROUND when building with Visual Studio 2013 and
above.  Patch by Zachary Turner.

: the programs that embed the CPython runtime are now in a
separate âProgramsâ directory, rather than being kept in the Modules
directory.

: âmake suspiciousâ, âmake linkcheckâ and âmake doctestâ in Doc/
now display special message when and only when there are failures.

================================================================================

# Changelog - Build (Part 3)

: The Windows build process no longer attempts to find Perl,
instead relying on OpenSSL source being configured and ready to build.
The PCbuild\build_ssl.py script has been re-written and re-named to
PCbuild\prepare_ssl.py, and takes care of configuring OpenSSL source
for both 32 and 64 bit platforms.  OpenSSL sources obtained from
svn.python.org will always be pre-configured and ready to build.

: Add a build option to enable AddressSanitizer support.

: The Windows build process now creates âpython.batâ in the root
of the source tree, which passes all arguments through to the most
recently built interpreter.

: Refactor and fix curses configure check to always search in a
ncursesw directory.

: For BerkeleyDB and Sqlite, only add the found library and
include directories if they arenât already being searched. This avoids an
explicit runtime library dependency.

: Tools/scripts/generate_opcode_h.py automatically regenerates
Include/opcode.h from Lib/opcode.py if the latter gets any change.

: OS X installer build support for documentation build changes in
3.4.1: assume externally supplied sphinx-build is available in /usr/bin.

: Eliminate use of deprecated bundlebuilder in OS X builds.

================================================================================

# Changelog - Build (Part 4)

: Incorporated Tcl, Tk, and Tix builds into the Windows build
solution.

: Fix Modules/Setup  support.

: Anticipated fixes to support OS X versions > 10.9.

: Prevent possible segfaults and other random failures of python
âgenerate-posix-vars in pybuilddir.txt build target.

: Fix library order returned by python-config.

: Add library build dir for Python extension cross-builds.

: Windows build updated to support VC 14.0 (Visual Studio 2015),
which will be used for the official release.

: Build _msi.pyd with cabinet.lib instead of fci.lib

: Use private version of OpenSSL for OS X 10.5+ installer.

================================================================================

# Changelog - C API (Part 1)

List:
: Remove obsolete support for view==NULL in PyBuffer_FillInfo(),
bytearray_getbuffer(), bytesiobuf_getbuffer() and array_buffer_getbuf().
All functions now raise BufferError in that case.
: PyBuffer_IsContiguous() now implements precise contiguity
tests, compatible with NumPyâs NPY_RELAXED_STRIDES_CHECKING compilation
flag.  Previously the function reported false negatives for corner cases.
: PyType_Ready() now checks that statically allocated type has no
dynamically allocated bases.
: Removed non-documented macro PyObject_REPR().
: Rename _Py_char2wchar() to Py_DecodeLocale(),
rename _Py_wchar2char() to Py_EncodeLocale(), and document
these functions.
: Add new C functions: PyMem_RawCalloc(), PyMem_Calloc(),
PyObject_Calloc(), _PyObject_GC_Calloc(). bytes(int) is now using
 instead of  for large objects which is faster and
use less memory.
: PyImport_ImportFrozenModuleObject() no longer sets __file__ to
match what importlib does; this affects _frozen_importlib as well as any
module loaded using imp.init_frozen().

================================================================================

# Changelog - C API (Part 2)

: Remove obsolete support for view==NULL in PyBuffer_FillInfo(),
bytearray_getbuffer(), bytesiobuf_getbuffer() and array_buffer_getbuf().
All functions now raise BufferError in that case.

: PyBuffer_IsContiguous() now implements precise contiguity
tests, compatible with NumPyâs NPY_RELAXED_STRIDES_CHECKING compilation
flag.  Previously the function reported false negatives for corner cases.

: PyType_Ready() now checks that statically allocated type has no
dynamically allocated bases.

: Removed non-documented macro PyObject_REPR().

: Rename _Py_char2wchar() to Py_DecodeLocale(),
rename _Py_wchar2char() to Py_EncodeLocale(), and document
these functions.

: Add new C functions: PyMem_RawCalloc(), PyMem_Calloc(),
PyObject_Calloc(), _PyObject_GC_Calloc(). bytes(int) is now using
 instead of  for large objects which is faster and
use less memory.

: PyImport_ImportFrozenModuleObject() no longer sets __file__ to
match what importlib does; this affects _frozen_importlib as well as any
module loaded using imp.init_frozen().

================================================================================

# Changelog - Documentation (Part 1)

List:
: Update the codecs module documentation to better cover the
distinction between text encodings and other codecs, together with other
clarifications. Patch by Martin Panter.
: Doc/Makefile now supports   PYTHON=../python to
create a venv for generating the documentation, e.g.,  
PYTHON=venv/bin/python3.
: The documentation of the json module now refers to new JSON RFC
7159 instead of obsoleted RFC 4627.
: The binary sequence methods on bytes and bytearray are now
documented explicitly, rather than assuming users will be able to derive
the expected behaviour from the behaviour of the corresponding str
methods.
: undocument deprecated asynchat.fifo class.
: Expanded functionality of the Doc/make.bat script to make
it much more comparable to Doc/Makefile.
: Update the thread_foobar.h template file to include newer
threading APIs. Patch by Jack McCracken.
: Remove the recommendation for specific CA organizations and to
mention the ability to load the OS certificates.
: Add missing documentation for PurePath.with_name() and
PurePath.with_suffix().
: New package installation and distribution guides based on the
Python Packaging Authority tools. Existing guides have been retained as
legacy links from the distutils docs, as they still contain some required
reference material for tool developers that isnât recorded anywhere else.
: Document cases where __main__.__spec__ is None.

================================================================================

# Changelog - Documentation (Part 2)

: Update the codecs module documentation to better cover the
distinction between text encodings and other codecs, together with other
clarifications. Patch by Martin Panter.

: Doc/Makefile now supports   PYTHON=../python to
create a venv for generating the documentation, e.g.,  
PYTHON=venv/bin/python3.

: The documentation of the json module now refers to new JSON RFC
7159 instead of obsoleted RFC 4627.

: The binary sequence methods on bytes and bytearray are now
documented explicitly, rather than assuming users will be able to derive
the expected behaviour from the behaviour of the corresponding str
methods.

: undocument deprecated asynchat.fifo class.

: Expanded functionality of the Doc/make.bat script to make
it much more comparable to Doc/Makefile.

: Update the thread_foobar.h template file to include newer
threading APIs. Patch by Jack McCracken.

: Remove the recommendation for specific CA organizations and to
mention the ability to load the OS certificates.

: Add missing documentation for PurePath.with_name() and
PurePath.with_suffix().

================================================================================

# Changelog - Documentation (Part 3)

: New package installation and distribution guides based on the
Python Packaging Authority tools. Existing guides have been retained as
legacy links from the distutils docs, as they still contain some required
reference material for tool developers that isnât recorded anywhere else.

: Document cases where __main__.__spec__ is None.

================================================================================

# Changelog - Tests (Part 1)

List:
: Add tests for CLI of the calendar module.
: Added some additional checks to test_codecs to ensure that
statements in the updated documentation remain accurate. Patch by Martin
Panter.
: All test_re tests now work with unittest test discovery.
: Update lib2to3 tests to use unittest test discovery.
: Convert test_curses to use unittest.
: Skip two tests in test_urllib2net.py if _ssl module not
present. Patch by Remi Pointel.
: Fix test_pdb to run in refleak mode (-R).  Patch by Xavier de
Gaye.
: test_ctypes has been somewhat cleaned up and simplified; it now
uses unittest test discovery to find its tests.
: regrtest.py no longer holds a reference to the suite of tests
loaded from test modules that donât define test_main().
: Assorted cleanups in test_imaplib.  Patch by Milan Oberkirch.
: Added load_package_tests function to test.support and used
it to implement/augment test discovery in test_asyncio, test_email,
test_importlib, test_json, and test_tools.
: Fix test_ssl to accept LibreSSL version strings.  Thanks to
William Orr.
: Converted test_tools from a module to a package containing
separate test files for each tested script.
: Use modern unittest features in test_argparse. Initial patch by
Denver Coneybeare and Radu Voicilas.
: Changed HTTP method names in failing tests in test_httpservers
so that packet filtering software (specifically Windows Base Filtering
Engine) does not interfere with the transaction semantics expected by the
tests.
: Refactored the ctypes test package to skip tests explicitly
rather than silently.
: All resources are now allowed when tests are not run by
regrtest.py.
: Fix pystone micro-benchmark: use floor division instead of true
division to benchmark integers instead of floating-point numbers. Set
pystone version to 1.2. Patch written by Lennart Regebro.
: Added tests for Tkinter images.
: Added test for ntpath.expanduser().  Original patch by Claudiu
Popa.
: Added tests for the spwd module. Original patch by Vajrasky
Kok.
: Added Tkinter tests for Listbox.itemconfigure(),
PanedWindow.paneconfigure(), and Menu.entryconfigure().
: Fix test_code test when run from the installed location.
: Fix distutils tests when run from the installed location.
: Consolidated checks for GUI availability.  All platforms now at
least check whether Tk can be instantiated when the GUI resource is
requested.
: Fix a socket test on KFreeBSD.
: Pass test_site/test_startup_imports when some of the extensions
are built as builtins.
: Added tests for Tk geometry managers.
Add test case for freeze.
: Fix a reference leak in test_tcl.
: Move test_namespace_pkgs into test_importlib.
: Use test_both() consistently in test_importlib.
: Avoid various network test failures due to new redirect of
http://www.python.org/ to https://www.python.org: use
http://www.example.com instead.
: asyncio tests no longer rely on tests.txt file. (Patch by
Vajrasky Kok)
: Prevent failures of ctypes test_macholib on OS X if a copy of
libz exists in $HOME/lib or /usr/local/lib.
: Prevent some Tk segfaults on OS X when running gui tests.
: Workaround test_logging failure on some OS X 10.6 systems.
: Prevent test_ssl failures with large OpenSSL patch level values
(like 0.9.8zc).

================================================================================

# Changelog - Tests (Part 2)

: Add tests for CLI of the calendar module.

: Added some additional checks to test_codecs to ensure that
statements in the updated documentation remain accurate. Patch by Martin
Panter.

: All test_re tests now work with unittest test discovery.

: Update lib2to3 tests to use unittest test discovery.

: Convert test_curses to use unittest.

: Skip two tests in test_urllib2net.py if _ssl module not
present. Patch by Remi Pointel.

: Fix test_pdb to run in refleak mode (-R).  Patch by Xavier de
Gaye.

: test_ctypes has been somewhat cleaned up and simplified; it now
uses unittest test discovery to find its tests.

: regrtest.py no longer holds a reference to the suite of tests
loaded from test modules that donât define test_main().

: Assorted cleanups in test_imaplib.  Patch by Milan Oberkirch.

: Added load_package_tests function to test.support and used
it to implement/augment test discovery in test_asyncio, test_email,
test_importlib, test_json, and test_tools.

: Fix test_ssl to accept LibreSSL version strings.  Thanks to
William Orr.

: Converted test_tools from a module to a package containing
separate test files for each tested script.

================================================================================

# Changelog - Tests (Part 3)

: Use modern unittest features in test_argparse. Initial patch by
Denver Coneybeare and Radu Voicilas.

: Changed HTTP method names in failing tests in test_httpservers
so that packet filtering software (specifically Windows Base Filtering
Engine) does not interfere with the transaction semantics expected by the
tests.

: Refactored the ctypes test package to skip tests explicitly
rather than silently.

: All resources are now allowed when tests are not run by
regrtest.py.

: Fix pystone micro-benchmark: use floor division instead of true
division to benchmark integers instead of floating-point numbers. Set
pystone version to 1.2. Patch written by Lennart Regebro.

: Added tests for Tkinter images.

: Added test for ntpath.expanduser().  Original patch by Claudiu
Popa.

: Added tests for the spwd module. Original patch by Vajrasky
Kok.

: Added Tkinter tests for Listbox.itemconfigure(),
PanedWindow.paneconfigure(), and Menu.entryconfigure().

: Fix test_code test when run from the installed location.

: Fix distutils tests when run from the installed location.

: Consolidated checks for GUI availability.  All platforms now at
least check whether Tk can be instantiated when the GUI resource is
requested.

================================================================================

# Changelog - Tests (Part 4)

: Fix a socket test on KFreeBSD.

: Pass test_site/test_startup_imports when some of the extensions
are built as builtins.

: Added tests for Tk geometry managers.

Add test case for freeze.

: Fix a reference leak in test_tcl.

: Move test_namespace_pkgs into test_importlib.

: Use test_both() consistently in test_importlib.

: Avoid various network test failures due to new redirect of
http://www.python.org/ to https://www.python.org: use
http://www.example.com instead.

: asyncio tests no longer rely on tests.txt file. (Patch by
Vajrasky Kok)

: Prevent failures of ctypes test_macholib on OS X if a copy of
libz exists in $HOME/lib or /usr/local/lib.

: Prevent some Tk segfaults on OS X when running gui tests.

: Workaround test_logging failure on some OS X 10.6 systems.

: Prevent test_ssl failures with large OpenSSL patch level values
(like 0.9.8zc).

================================================================================

# Changelog - Tools/Demos (Part 1)

List:
: pydoc now works when the LINES environment variable is set.
: Argument Clinic now supports the âtypeâ argument for the int
converter. This permits using the int converter with enums and typedefs.
: The makelocalealias.py script no longer ignores UTF-8 mapping.
: The makelocalealias.py script now can parse the SUPPORTED file
from glibc sources and supports command line options for source paths.
: Command-line interface of the zipfile module now correctly
extracts ZIP files with directory entries.  Patch by Ryan Wilson.
: For functions using an unsigned integer return converter,
Argument Clinic now generates a cast to that type for the comparison to -1
in the generated code.  (This suppresses a compilation warning.)
: Tools/scripts/diff.py now uses argparse instead of optparse.
: Make Tools/scripts/md5sum.py work in Python 3. Patch by Zachary
Ware.
: Fix Argument Clinicâs ââconvertersâ feature.
Add support for   to 2to3.
Add support for the  matrix multiplication operator to 2to3.
: Fix module exception list and __file__ handling in freeze.
Patch by Meador Inge.
: Consider ABI tags in freeze. Patch by Meador Inge.
: PYTHONWARNING no longer affects the run_tests.py script. Patch
by Arfrever Frehtes Taifersar Arahesis.

================================================================================

# Changelog - Tools/Demos (Part 2)

: pydoc now works when the LINES environment variable is set.

: Argument Clinic now supports the âtypeâ argument for the int
converter. This permits using the int converter with enums and typedefs.

: The makelocalealias.py script no longer ignores UTF-8 mapping.

: The makelocalealias.py script now can parse the SUPPORTED file
from glibc sources and supports command line options for source paths.

: Command-line interface of the zipfile module now correctly
extracts ZIP files with directory entries.  Patch by Ryan Wilson.

: For functions using an unsigned integer return converter,
Argument Clinic now generates a cast to that type for the comparison to -1
in the generated code.  (This suppresses a compilation warning.)

: Tools/scripts/diff.py now uses argparse instead of optparse.

: Make Tools/scripts/md5sum.py work in Python 3. Patch by Zachary
Ware.

: Fix Argument Clinicâs ââconvertersâ feature.

Add support for   to 2to3.

Add support for the  matrix multiplication operator to 2to3.

: Fix module exception list and __file__ handling in freeze.
Patch by Meador Inge.

: Consider ABI tags in freeze. Patch by Meador Inge.

================================================================================

# Changelog - Tools/Demos (Part 3)

: PYTHONWARNING no longer affects the run_tests.py script. Patch
by Arfrever Frehtes Taifersar Arahesis.

================================================================================

# Changelog - Windows (Part 1)

List:
: Update Windows installer
The bundled version of Tcl/Tk has been updated to 8.6.3.  The most visible
result of this change is the addition of new native file dialogs when
running on Windows Vista or newer.  See Tcl/Tkâs TIP 432 for more
information.  Also, this version of Tcl/Tk includes support for Windows
10.
: The Windows build scripts now expect external library sources
to be in PCbuild\..\externals rather than PCbuild\..\...
: The Windows build scripts now use a copy of NASM pulled from
svn.python.org to build OpenSSL.
: Improved the batch scripts provided for building Python.
: The bundled version of OpenSSL has been updated to 1.0.1j.
: Use versioned labels in the Windows start menu. Patch by Olive
Kilburn.
: .pyd files with a version and platform tag (for example,
â.cp35-win32.pydâ) will now be loaded in preference to those without tags.

: Update Windows installer

The bundled version of Tcl/Tk has been updated to 8.6.3.  The most visible
result of this change is the addition of new native file dialogs when
running on Windows Vista or newer.  See Tcl/Tkâs TIP 432 for more
information.  Also, this version of Tcl/Tk includes support for Windows
10.

================================================================================

# Changelog - Windows (Part 2)

: The Windows build scripts now expect external library sources
to be in PCbuild\..\externals rather than PCbuild\..\...

: The Windows build scripts now use a copy of NASM pulled from
svn.python.org to build OpenSSL.

: Improved the batch scripts provided for building Python.

: The bundled version of OpenSSL has been updated to 1.0.1j.

: Use versioned labels in the Windows start menu. Patch by Olive
Kilburn.

: .pyd files with a version and platform tag (for example,
â.cp35-win32.pydâ) will now be loaded in preference to those without tags.

(For information about older versions, consult the HISTORY file.)

================================================================================

# Whetting Your Appetite (Part 1)

If you do much work on computers, eventually you find that thereâs some task
youâd like to automate.  For example, you may wish to perform a
search-and-replace over a large number of text files, or rename and rearrange a
bunch of photo files in a complicated way. Perhaps youâd like to write a small
custom database, or a specialized GUI application, or a simple game.

If youâre a professional software developer, you may have to work with several
C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is
too slow.  Perhaps youâre writing a test suite for such a library and find
writing the testing code a tedious task.  Or maybe youâve written a program that
could use an extension language, and you donât want to design and implement a
whole new language for your application.

Python is just the language for you.

================================================================================

# Whetting Your Appetite (Part 2)

You could write a Unix shell script or Windows batch files for some of these
tasks, but shell scripts are best at moving around files and changing text data,
not well-suited for GUI applications or games. You could write a C/C++/Java
program, but it can take a lot of development time to get even a first-draft
program.  Python is simpler to use, available on Windows, macOS, and Unix
operating systems, and will help you get the job done more quickly.

Python is simple to use, but it is a real programming language, offering much
more structure and support for large programs than shell scripts or batch files
can offer.  On the other hand, Python also offers much more error checking than
C, and, being a very-high-level language, it has high-level data types built
in, such as flexible arrays and dictionaries.  Because of its more general data
types Python is applicable to a much larger problem domain than Awk or even
Perl, yet many things are at least as easy in Python as in those languages.

================================================================================

# Whetting Your Appetite (Part 3)

Python allows you to split your program into modules that can be reused in other
Python programs.  It comes with a large collection of standard modules that you
can use as the basis of your programs â or as examples to start learning to
program in Python.  Some of these modules provide things like file I/O, system
calls, sockets, and even interfaces to graphical user interface toolkits like
Tk.

Python is an interpreted language, which can save you considerable time during
program development because no compilation and linking is necessary.  The
interpreter can be used interactively, which makes it easy to experiment with
features of the language, to write throw-away programs, or to test functions
during bottom-up program development. It is also a handy desk calculator.

Python enables programs to be written compactly and readably.  Programs written
in Python are typically much shorter than equivalent C,  C++, or Java programs,
for several reasons:

List:
the high-level data types allow you to express complex operations in a single
statement;
statement grouping is done by indentation instead of beginning and ending
brackets;
no variable or argument declarations are necessary.

================================================================================

# Whetting Your Appetite (Part 4)

the high-level data types allow you to express complex operations in a single
statement;

statement grouping is done by indentation instead of beginning and ending
brackets;

no variable or argument declarations are necessary.

Python is extensible: if you know how to program in C it is easy to add a new
built-in function or module to the interpreter, either to perform critical
operations at maximum speed, or to link Python programs to libraries that may
only be available in binary form (such as a vendor-specific graphics library).
Once you are really hooked, you can link the Python interpreter into an
application written in C and use it as an extension or command language for that
application.

By the way, the language is named after the BBC show âMonty Pythonâs Flying
Circusâ and has nothing to do with reptiles.  Making references to Monty
Python skits in documentation is not only allowed, it is encouraged!

Now that you are all excited about Python, youâll want to examine it in some
more detail.  Since the best way to learn a language is to use it, the tutorial
invites you to play with the Python interpreter as you read.

================================================================================

# Whetting Your Appetite (Part 5)

In the next chapter, the mechanics of using the interpreter are explained.  This
is rather mundane information, but essential for trying out the examples shown
later.

The rest of the tutorial introduces various features of the Python language and
system through examples, beginning with simple expressions, statements and data
types, through functions and modules, and finally touching upon advanced
concepts like exceptions and user-defined classes.

================================================================================

# Dealing with Bugs

Python is a mature programming language which has established a reputation for
stability.  In order to maintain this reputation, the developers would like to
know of any deficiencies you find in Python.

It can be sometimes faster to fix bugs yourself and contribute patches to
Python as it streamlines the process and involves less people. Learn how to
contribute.

================================================================================

# Dealing with Bugs - Documentation bugs (Part 1)

If you find a bug in this documentation or would like to propose an improvement,
please submit a bug report on the .  If you
have a suggestion on how to fix it, include that as well.

You can also open a discussion item on our
Documentation Discourse forum.

If you find a bug in the theme (HTML / CSS / JavaScript) of the
documentation, please submit a bug report on the python-doc-theme bug
tracker.

If youâre short on time, you can also email documentation bug reports to
docspythonorg (behavioral bugs can be sent to python-listpythonorg).
âdocs@â is a mailing list run by volunteers; your request will be noticed,
though it may take a while to be processed.

Documentation bugsA list of documentation bugs that have been submitted to the Python issue tracker.

Issue TrackingOverview of the process involved in reporting an improvement on the tracker.

Helping with DocumentationComprehensive guide for individuals that are interested in contributing to Python documentation.

Documentation TranslationsA list of GitHub pages for documentation translation and their primary contacts.

A list of documentation bugs that have been submitted to the Python issue tracker.

================================================================================

# Dealing with Bugs - Documentation bugs (Part 2)

Overview of the process involved in reporting an improvement on the tracker.

Comprehensive guide for individuals that are interested in contributing to Python documentation.

A list of GitHub pages for documentation translation and their primary contacts.

================================================================================

# Dealing with Bugs - Using the Python issue tracker (Part 1)

Issue reports for Python itself should be submitted via the GitHub issues
tracker (https://github.com/python/cpython/issues).
The GitHub issues tracker offers a web form which allows pertinent information
to be entered and submitted to the developers.

The first step in filing a report is to determine whether the problem has
already been reported.  The advantage in doing so, aside from saving the
developersâ time, is that you learn what has been done to fix it; it may be that
the problem has already been fixed for the next release, or additional
information is needed (in which case you are welcome to provide it if you can!).
To do this, search the tracker using the search box at the top of the page.

If the problem youâre reporting is not already in the list, log in to GitHub.
If you donât already have a GitHub account, create a new account using the
âSign upâ link.
It is not possible to submit a bug report anonymously.

Being now logged in, you can submit an issue.
Click on the âNew issueâ button in the top bar to report a new issue.

The submission form has two fields, âTitleâ and âCommentâ.

================================================================================

# Dealing with Bugs - Using the Python issue tracker (Part 2)

For the âTitleâ field, enter a  short description of the problem;
fewer than ten words is good.

In the âCommentâ field, describe the problem in detail, including what you
expected to happen and what did happen.  Be sure to include whether any
extension modules were involved, and what hardware and software platform you
were using (including version information as appropriate).

Each issue report will be reviewed by a developer who will determine what needs to
be done to correct the problem. You will receive an update each time an action is
taken on the issue.

How to Report Bugs EffectivelyArticle which goes into some detail about how to create a useful bug report.
This describes what kind of information is useful and why it is useful.

Bug Writing GuidelinesInformation about writing a good bug report.  Some of this is specific to the
Mozilla project, but describes general good practices.

Article which goes into some detail about how to create a useful bug report.
This describes what kind of information is useful and why it is useful.

Information about writing a good bug report.  Some of this is specific to the
Mozilla project, but describes general good practices.

================================================================================

# Dealing with Bugs - Getting started contributing to Python yourself

Beyond just reporting bugs that you find, you are also welcome to submit
patches to fix them.  You can find more information on how to get started
patching Python in the Python Developerâs Guide.  If you have questions,
the core-mentorship mailing list is a friendly place to get answers to
any and all questions pertaining to the process of fixing issues in Python.

================================================================================

# Index

Index pages by letter:

| 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     | 
     |

Full index on one page
                                               (can be huge)

================================================================================

