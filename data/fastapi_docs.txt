# FastAPI

FastAPI framework, high performance, easy to learn, fast to code, ready for production

Documentation: https://fastapi.tiangolo.com

Source Code: https://github.com/fastapi/fastapi

FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.

The key features are:

List:
: Very high performance, on par with  and  (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.
Fast to code: Increase the speed to develop features by about 200% to 300%. *
Fewer bugs: Reduce about 40% of human (developer) induced errors. *
: Great editor support. Completion everywhere. Less time debugging.
: Designed to be easy to use and learn. Less time reading docs.
: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.
: Get production-ready code. With automatic interactive documentation.
Standards-based: Based on (and fully compatible with) the open standards for APIs:  (previously known as Swagger) and JSON Schema.

* estimation based on tests on an internal development team, building production applications.

================================================================================

# FastAPI - Opinions

"[...] I'm using  a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft. Some of them are getting integrated into the core  product and some  products."

"We adopted the  library to spawn a  server that can be queried to obtain predictions. [for Ludwig]"

" is pleased to announce the open-source release of our crisis management orchestration framework: ! [built with ]"

"I’m over the moon excited about . It’s so fun!"

"Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted  to be - it's really inspiring to see someone build that."

"If you're looking to learn one modern framework for building REST APIs, check out  [...] It's fast, easy to use and easy to learn [...]"

"We've switched over to  for our  [...] I think you'll like it [...]"

"If anyone is looking to build a production Python API, I would highly recommend . It is beautifully designed, simple to use and highly scalable, it has become a key component in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer."

================================================================================

# FastAPI - , the FastAPI of CLIs

If you are building a  app to be used in the terminal instead of a web API, check out .

is FastAPI's little sibling. And it's intended to be the FastAPI of CLIs. ⌨️ 🚀

================================================================================

# FastAPI - Requirements

FastAPI stands on the shoulders of giants:

List:
for the web parts.
 for the data parts.

================================================================================

# FastAPI - Installation

Create and activate a virtual environment and then install FastAPI:

Code example:
pipinstall"fastapi[standard]"

: Make sure you put "fastapi[standard]" in quotes to ensure it works in all terminals.

================================================================================

# FastAPI - Create it

If your code uses  / , use :

If you don't know, check the "In a hurry?" section about  and  in the docs.

================================================================================

# FastAPI - Run it (Part 1)

Code example:
fastapidevmain.py
 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯
INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

The command fastapi dev reads your  file, detects the  app in it, and starts a server using .

By default, fastapi dev will start with auto-reload enabled for local development.

================================================================================

# FastAPI - Run it (Part 2)

You can read more about it in the FastAPI CLI docs.

================================================================================

# FastAPI - Check it

Open your browser at http://127.0.0.1:8000/items/5?q=somequery.

You will see the JSON response as:

You already created an API that:

List:
Receives HTTP requests in the   and /items/{item_id}.
Both  take  operations (also known as HTTP ).
The  /items/{item_id} has a path parameter  that should be an .
The  /items/{item_id} has an optional  query parameter .

================================================================================

# FastAPI - Interactive API docs

Now go to http://127.0.0.1:8000/docs.

You will see the automatic interactive API documentation (provided by Swagger UI):

================================================================================

# FastAPI - Alternative API docs

And now, go to http://127.0.0.1:8000/redoc.

You will see the alternative automatic documentation (provided by ):

================================================================================

# FastAPI - Example upgrade

Now modify the file  to receive a body from a  request.

Declare the body using standard Python types, thanks to Pydantic.

Code example:
update_item   
     "item_name"

The fastapi dev server should reload automatically.

================================================================================

# FastAPI - Interactive API docs upgrade

Now go to http://127.0.0.1:8000/docs.

List:
The interactive API documentation will be automatically updated, including the new body:

List:
Click on the button "Try it out", it allows you to fill the parameters and directly interact with the API:

List:
Then click on the "Execute" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:

================================================================================

# FastAPI - Alternative API docs upgrade

And now, go to http://127.0.0.1:8000/redoc.

List:
The alternative documentation will also reflect the new query parameter and body:

================================================================================

# FastAPI - Recap (Part 1)

In summary, you declare  the types of parameters, body, etc. as function parameters.

You do that with standard modern Python types.

You don't have to learn a new syntax, the methods or classes of a specific library, etc.

For example, for an :

or for a more complex  model:

...and with that single declaration you get:

List:
Editor support, including:
Completion.
Type checks.


Validation of data:
Automatic and clear errors when the data is invalid.
Validation even for deeply nested JSON objects.


Conversion of input data: coming from the network to Python data and types. Reading from:

Path parameters.
Query parameters.






Conversion of output data: converting from Python data and types to network data (as JSON):
Convert Python types (, , , , , etc).
 objects.
 objects.
Database models.
...and many more.


Automatic interactive API documentation, including 2 alternative user interfaces:
Swagger UI.

List:
Completion.
Type checks.

List:
Automatic and clear errors when the data is invalid.
Validation even for deeply nested JSON objects.

List:
Path parameters.
Query parameters.

List:
Convert Python types (, , , , , etc).
 objects.
 objects.
Database models.
...and many more.

================================================================================

# FastAPI - Recap (Part 2)

Coming back to the previous code example,  will:

List:
Validate that there is an  in the path for  and  requests.
Validate that the  is of type  for  and  requests.
If it is not, the client will see a useful, clear error.


Check if there is an optional query parameter named  (as in http://127.0.0.1:8000/items/foo?q=somequery) for  requests.
As the  parameter is declared with , it is optional.
Without the  it would be required (as is the body in the case with ).


For  requests to /items/{item_id}, read the body as JSON:
Check that it has a required attribute  that should be a .
Check that it has a required attribute  that has to be a .
Check that it has an optional attribute , that should be a , if present.
All this would also work for deeply nested JSON objects.


Convert from and to JSON automatically.
Document everything with OpenAPI, that can be used by:
Interactive documentation systems.
Automatic client code generation systems, for many languages.


Provide 2 interactive documentation web interfaces directly.

List:
If it is not, the client will see a useful, clear error.

================================================================================

# FastAPI - Recap (Part 3)

List:
As the  parameter is declared with , it is optional.
Without the  it would be required (as is the body in the case with ).

List:
Check that it has a required attribute  that should be a .
Check that it has a required attribute  that has to be a .
Check that it has an optional attribute , that should be a , if present.
All this would also work for deeply nested JSON objects.

List:
Interactive documentation systems.
Automatic client code generation systems, for many languages.

We just scratched the surface, but you already get the idea of how it all works.

Try changing the line with:

...and see how your editor will auto-complete the attributes and know their types:

For a more complete example including more features, see the Tutorial - User Guide.

Spoiler alert: the tutorial - user guide includes:

================================================================================

# FastAPI - Recap (Part 4)

List:
Declaration of parameters from other different places as: , , form fields and .
How to set validation constraints as maximum_length or .
A very powerful and easy to use Dependency Injection system.
Security and authentication, including support for  with JWT tokens and HTTP Basic auth.
More advanced (but equally easy) techniques for declaring deeply nested JSON models (thanks to Pydantic).
 integration with Strawberry and other libraries.
Many extra features (thanks to Starlette) as:
WebSockets
extremely easy tests based on HTTPX and 

Cookie Sessions
...and more.

List:
WebSockets
extremely easy tests based on HTTPX and 

Cookie Sessions
...and more.

================================================================================

# FastAPI - Performance

Independent TechEmpower benchmarks show  applications running under Uvicorn as one of the fastest Python frameworks available, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)

To understand more about it, see the section Benchmarks.

================================================================================

# FastAPI - Dependencies

FastAPI depends on Pydantic and Starlette.

================================================================================

# FastAPI - Dependencies

When you install FastAPI with pip install "fastapi[standard]" it comes with the  group of optional dependencies:

List:
email-validator - for email validation.

List:
- Required if you want to use the TestClient.
 - Required if you want to use the default template configuration.
python-multipart - Required if you want to support form , with request.form().

List:
- for the server that loads and serves your application. This includes uvicorn[standard], which includes some dependencies (e.g. ) needed for high performance serving.
fastapi-cli[standard] - to provide the  command.
This includes fastapi-cloud-cli, which allows you to deploy your FastAPI application to FastAPI Cloud.

List:
This includes fastapi-cloud-cli, which allows you to deploy your FastAPI application to FastAPI Cloud.

================================================================================

# FastAPI - Without  Dependencies

If you don't want to include the  optional dependencies, you can install with pip install fastapi instead of pip install "fastapi[standard]".

================================================================================

# FastAPI - Without fastapi-cloud-cli

If you want to install FastAPI with the standard dependencies but without the fastapi-cloud-cli, you can install with pip install "fastapi[standard-no-fastapi-cloud-cli]".

================================================================================

# FastAPI - Additional Optional Dependencies

There are some additional dependencies you might want to install.

Additional optional Pydantic dependencies:

List:
pydantic-settings - for settings management.
pydantic-extra-types - for extra types to be used with Pydantic.

Additional optional FastAPI dependencies:

List:
- Required if you want to use ORJSONResponse.
 - Required if you want to use UJSONResponse.

================================================================================

# FastAPI - License

This project is licensed under the terms of the MIT license.

================================================================================

# FastAPI (Part 1)

FastAPI framework, yüksək məshuldarlı, öyrənməsi asan, çevik kodlama, istifadəyə hazırdır

: https://fastapi.tiangolo.com

Qaynaq Kodu: https://github.com/fastapi/fastapi

FastAPI Python ilə API yaratmaq üçün standart Python tip məsləhətlərinə əsaslanan, müasir, sürətli (yüksək performanslı) framework-dür.

Əsas xüsusiyyətləri bunlardır:

================================================================================

# FastAPI (Part 2)

List:
: Çox yüksək performans,  və  səviyyəsində (Starlette və Pydantic-ə təşəkkürlər). Ən sürətli Python frameworklərindən biridir.
Çevik kodlama: Funksiyanallıqları inkişaf etdirmək sürətini təxminən 200%-dən 300%-ə qədər artırın. *
Daha az xəta: İnsan (developer) tərəfindən törədilən səhvlərin təxminən 40% -ni azaldın. *
: Əla redaktor dəstəyi. Hər yerdə otomatik tamamlama. Xətaları müəyyənləşdirməyə daha az vaxt sərf edəcəksiniz.
: İstifadəsi və öyrənilməsi asan olması üçün nəzərdə tutulmuşdur. Sənədləri oxumaq üçün daha az vaxt ayıracaqsınız.
: Kod təkrarlanmasını minimuma endirin. Hər bir parametr tərifində birdən çox xüsusiyyət ilə və daha az səhvlə qarşılaşacaqsınız.
: Avtomatik və interaktiv sənədlərlə birlikdə istifadəyə hazır kod əldə edə bilərsiniz.
Standartlara əsaslanan: API-lar üçün açıq standartlara əsaslanır (və tam uyğun gəlir):  (əvvəlki adı ilə Swagger) və JSON Schema.

* Bu fikirlər daxili development komandasının hazırladıqları məhsulların sınaqlarına əsaslanır.

================================================================================

# FastAPI - Rəylər

"[...] Son günlərdə -ı çox istifadə edirəm. [...]  Əslində onu komandamın bütün Microsoftda ML sevislərində istifadə etməyi planlayıram. Onların bəziləri -un əsas məhsuluna və bəzi  məhsullarına inteqrasiya olunurlar."

" kitabxanasını Proqnozlar əldə etmək üçün sorğulana bilən  serverini yaratmaqda istifadə etdik."

" böhran idarəçiliyi orkestrləşmə framework-nün açıq qaynaqlı buraxılışını elan etməkdən məmnundur: ! [ ilə quruldu]"

" üçün həyəcanlıyam. Çox əyləncəlidir!"

"Düzünü desəm, sizin qurduğunuz şey həqiqətən möhkəm və peşəkar görünür. Bir çox cəhətdən -un olmasını istədiyim kimdir - kiminsə belə bir şey qurduğunu görmək həqiqətən ruhlandırıcıdır."

"Əgər REST API-lər yaratmaq üçün müasir framework öyrənmək istəyirsinizsə, -a baxın [...] Sürətli, istifadəsi və öyrənməsi asandır. [...]"

" xidmətlərimizi -a köçürdük [...] Sizin də bəyənəcəyinizi düşünürük."

"Python ilə istifadəyə hazır API qurmaq istəyən hər kəsə -ı tövsiyə edirəm. Möhtəşəm şəkildə dizayn edilmiş, istifadəsi asan və yüksək dərəcədə genişlənə bilən-dir, API əsaslı inkişaf strategiyamızın əsas komponentinə çevrilib və Virtual TAC Engineer kimi bir çox avtomatlaşdırma və servisləri idarə edir."

================================================================================

# FastAPI - , CLI-ların FastAPI-ı

Əgər siz veb API əvəzinə terminalda istifadə ediləcək  proqramı qurursunuzsa, -a baxa bilərsiniz.

FastAPI-ın kiçik qardaşıdır. Və o, CLI-lərin -ı olmaq üçün nəzərdə tutulub. ⌨️ 🚀

================================================================================

# FastAPI - Tələblər

FastAPI nəhənglərin çiyinlərində dayanır:

List:
Web tərəfi üçün .
Data tərəfi üçün .

================================================================================

# FastAPI - Quraşdırma

Tətbiqimizi əlçatan etmək üçün bizə  və ya  kimi ASGI server lazımdır.

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - Kodu yaradaq

List:
adlı fayl yaradaq və ona aşağıdakı kodu yerləşdirək:

Əgər kodunuzda  və ya  vardırsa  istifadə edə bilərik:

Əgər bu mövzu haqqında məlumatınız yoxdursa  və  sənədindəki "Tələsirsən?" bölməsinə baxa bilərsiniz.

================================================================================

# FastAPI - Kodu işə salaq

Serveri aşağıdakı əmr ilə işə salaq:

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

uvicorn main:app əmri aşağıdakılara instinad edir:

List:
:  faylı (yəni Python "modulu").
:  faylında app = FastAPI() sətrində yaratdığımız  obyektidir.
: kod dəyişikliyindən sonra avtomatik olaraq serveri yenidən işə salır. Bu parametrdən yalnız development mərhələsində istifadə etməliyik.

================================================================================

# FastAPI - İndi yoxlayaq

Bu linki brauzerimizdə açaq http://127.0.0.1:8000/items/5?q=somequery.

Aşağıdakı kimi bir JSON cavabı görəcəksiniz:

Siz artıq bir API yaratmısınız, hansı ki:

List:
və /items/{item_id} yollarında HTTP sorğularını qəbul edir.
Hər iki   əməliyyatlarını (həmçinin HTTP  kimi bilinir) aparır.
/items/{item_id}   adlı  qiyməti almalı olan yol parametrinə sahibdir.
/items/{item_id}   adlı yol parametri var və bu parametr istəyə bağlı olsa da,  qiymətini almalıdır.

================================================================================

# FastAPI - İnteraktiv API Sənədləri

İndi http://127.0.0.1:8000/docs ünvanına daxil olun.

Avtomatik interaktiv API sənədlərini görəcəksiniz (Swagger UI tərəfindən təmin edilir):

================================================================================

# FastAPI - Alternativ API sənədləri

İndi isə http://127.0.0.1:8000/redoc ünvanına daxil olun.

tərəfindən təqdim edilən avtomatik sənədləri görəcəksiniz:

================================================================================

# FastAPI - Nümunəni Yeniləyək

İndi gəlin  faylını  sorğusu ilə birlikdə  qəbul edəcək şəkildə dəyişdirək.

Pydantic sayəsində standart Python tiplərindən istifadə edərək ni müəyyən edək.

update_item   
     "item_name"   

Server avtomatik olaraq yenidən işə salınmalı idi (çünki biz yuxarıda  əmri ilə  parametrindən istifadə etmişik).

Code example:
update_item   
     "item_name"

================================================================================

# FastAPI - İnteraktiv API sənədlərindəki dəyişikliyə baxaq

Yenidən http://127.0.0.1:8000/docs ünvanına daxil olun.

List:
İnteraktiv API sənədləri yeni gövdə də daxil olmaq ilə avtomatik olaraq yenilənəcək:

List:
"Try it out" düyməsini klikləyin, bu, parametrləri doldurmağa və API ilə birbaşa əlaqə saxlamağa imkan verir:

List:
Sonra "Execute" düyməsini klikləyin, istifadəçi interfeysi API ilə əlaqə quracaq, parametrləri göndərəcək, nəticələri əldə edəcək və onları ekranda göstərəcək:

================================================================================

# FastAPI - Alternativ API Sənədlərindəki Dəyişikliyə Baxaq

İndi isə yenidən http://127.0.0.1:8000/redoc ünvanına daxil olun.

List:
Alternativ sənədlər həm də yeni sorğu parametri və gövdəsini əks etdirəcək:

================================================================================

# FastAPI - Xülasə (Part 1)

Ümumiləşdirsək, parametrlər, gövdə və s. Biz məlumat növlərini  funksiya parametrləri kimi təyin edirik.

Bunu standart müasir Python tipləri ilə edirsiniz.

Yeni sintaksis, müəyyən bir kitabxananın metodlarını və ya siniflərini və s. öyrənmək məcburiyyətində deyilsiniz.

və ya daha mürəkkəb  modeli üçün:

...və yalnız parametr tipini təyin etməklə bunları əldə edirsiniz:

List:
Redaktor dəstəyi ilə:
Avtomatik tamamlama.
Tip yoxlanması.


Məlumatların Təsdiqlənməsi:
Məlumat etibarsız olduqda avtomatik olaraq aydın xətalar göstərir.
Hətta çox dərin JSON obyektlərində belə doğrulama aparır.


Daxil olan məlumatları  üçün aşağıdakı məlumat növlərindən istifadə edilir:

 parametrləri.
 parametrləri.
.
.
.



Daxil olan məlumatları  üçün aşağıdakı məlumat növlərindən istifadə edilir (JSON olaraq):
Python tiplərinin (, , , , , və s) çevrilməsi.
 obyektləri.
 obyektləri.
Verilənlər bazası modelləri.
və daha çoxu...


2 alternativ istifadəçi interfeysi daxil olmaqla avtomatik interaktiv API sənədlərini təmin edir:
Swagger UI.

List:
Avtomatik tamamlama.
Tip yoxlanması.

List:
Məlumat etibarsız olduqda avtomatik olaraq aydın xətalar göstərir.
Hətta çox dərin JSON obyektlərində belə doğrulama aparır.

================================================================================

# FastAPI - Xülasə (Part 2)

List:
parametrləri.
 parametrləri.
.
.
.

List:
Python tiplərinin (, , , , , və s) çevrilməsi.
 obyektləri.
 obyektləri.
Verilənlər bazası modelləri.
və daha çoxu...

Gəlin əvvəlki nümunəyə qayıdaq və -nin nələr edəcəyinə nəzər salaq:

List:
və  sorğuları üçün -nin  olub-olmadığını yoxlayacaq.
-nin  və  sorğuları üçün növünün  olduğunu yoxlayacaq.
Əgər  deyilsə, səbəbini göstərən bir xəta mesajı göstərəcəkdir.


məcburi olmayan  parametrinin  (http://127.0.0.1:8000/items/foo?q=somequery burdakı kimi) sorğusu içərisində olub olmadığını yoxlayacaq.
 parametrini  ilə yaratdığımız üçün, məcburi olmayan parametr olacaq.
Əgər  olmasaydı, bu məcburi parametr olardı ( metodunun gövdəsində olduğu kimi).


 sorğusu üçün, /items/{item_id} gövdəsini JSON olaraq oxuyacaq:
 adında məcburi bir parametr olub olmadığını və əgər varsa, tipinin  olub olmadığını yoxlayacaq.
 adında məcburi bir parametr olub olmadığını və əgər varsa, tipinin  olub olmadığını yoxlayacaq.
 adında məcburi olmayan bir parametr olub olmadığını və əgər varsa, tipinin  olub olmadığını yoxlayacaq.
Bütün bunlar ən dərin JSON obyektlərində belə işləyəcək.

================================================================================

# FastAPI - Xülasə (Part 3)


Məlumatların JSON-a və JSON-un Python obyektinə çevrilməsi avtomatik həyata keçiriləcək.
Hər şeyi OpenAPI ilə uyğun olacaq şəkildə avtomatik olaraq sənədləşdirəcək və onları aşağıdakı kimi istifadə edə biləcək:
İnteraktiv sənədləşmə sistemləri.
Bir çox proqramlaşdırma dilləri üçün avtomatlaşdırılmış  kodu yaratma sistemləri.


2 interaktiv sənədləşmə veb interfeysini birbaşa təmin edəcək.

List:
Əgər  deyilsə, səbəbini göstərən bir xəta mesajı göstərəcəkdir.

List:
parametrini  ilə yaratdığımız üçün, məcburi olmayan parametr olacaq.
Əgər  olmasaydı, bu məcburi parametr olardı ( metodunun gövdəsində olduğu kimi).

List:
adında məcburi bir parametr olub olmadığını və əgər varsa, tipinin  olub olmadığını yoxlayacaq.
 adında məcburi bir parametr olub olmadığını və əgər varsa, tipinin  olub olmadığını yoxlayacaq.
 adında məcburi olmayan bir parametr olub olmadığını və əgər varsa, tipinin  olub olmadığını yoxlayacaq.
Bütün bunlar ən dərin JSON obyektlərində belə işləyəcək.

List:
İnteraktiv sənədləşmə sistemləri.
Bir çox proqramlaşdırma dilləri üçün avtomatlaşdırılmış  kodu yaratma sistemləri.

Yeni başlamışıq, amma siz artıq işin məntiqini başa düşmüsünüz.

İndi aşağıdakı sətri dəyişdirməyə çalışın:

================================================================================

# FastAPI - Xülasə (Part 4)

...və redaktorun məlumat tiplərini bildiyini və avtomatik tamaladığını görəcəksiniz:

Daha çox funksiyaya malik daha dolğun nümunə üçün Öyrədici - İstifadəçi Təlimatı səhifəsinə baxa bilərsiniz.

Spoiler xəbərdarlığı: Öyrədici - istifadəçi təlimatına bunlar daxildir:

List:
Parametrlərin, , , forma sahələri və  olaraq müəyyən edilməsi.
maximum_length və ya  kimi doğrulama məhdudiyyətlərinin necə təyin ediləcəyi.
Çox güclü və istifadəsi asan Dependency Injection sistemi.
Təhlükəsizlik və autentifikasiya, JWT tokenləri ilə  dəstəyi və HTTP Basic autentifikasiyası.
çox dərin JSON modellərini müəyyən etmək üçün daha irəli səviyyə (lakin eyni dərəcədə asan) üsullar (Pydantic sayəsində).
Strawberry və digər kitabxanalar ilə  inteqrasiyası.
Digər əlavə xüsusiyyətlər (Starlette sayəsində):
WebSockets
HTTPX və  sayəsində çox asan testlər

Cookie Sessions
...və daha çoxu.

List:
WebSockets
HTTPX və  sayəsində çox asan testlər

Cookie Sessions
...və daha çoxu.

================================================================================

# FastAPI - Performans

Müstəqil TechEmpower meyarları göstərir ki, Uvicorn üzərində işləyən  proqramları ən sürətli Python kitabxanalarından biridir, yalnız Starlette və Uvicorn-un özündən yavaşdır, ki FastAPI bunların üzərinə qurulmuş bir framework-dür. (*)

Ətraflı məlumat üçün bu bölməyə nəzər salın Müqayisələr.

================================================================================

# FastAPI - Məcburi Olmayan Tələblər

Pydantic tərəfindən istifadə olunanlar:

List:
email-validator - e-poçtun yoxlanılması üçün.
pydantic-settings - parametrlərin idarə edilməsi üçün.
pydantic-extra-types - Pydantic ilə istifadə edilə bilən əlavə tiplər üçün.

Starlette tərəfindən istifadə olunanlar:

List:
- Əgər TestClient strukturundan istifadə edəcəksinizsə, tələb olunur.
 - Standart  konfiqurasiyasından istifadə etmək istəyirsinizsə, tələb olunur.
python-multipart - request.form() ilə forma  dəstəyindən istifadə etmək istəyirsinizsə, tələb olunur.
itsdangerous - SessionMiddleware dəstəyi üçün tələb olunur.
 - SchemaGenerator dəstəyi üçün tələb olunur (Çox güman ki, FastAPI istifadə edərkən buna ehtiyacınız olmayacaq).
 - UJSONResponse istifadə etmək istəyirsinizsə, tələb olunur.

Həm FastAPI, həm də Starlette tərəfindən istifadə olunur:

List:
- Yaratdığımız proqramı servis edəcək veb server kimi fəaliyyət göstərir.
 - ORJSONResponse istifadə edəcəksinizsə tələb olunur.

Bütün bunları pip install fastapi[all] ilə quraşdıra bilərsiniz.

================================================================================

# FastAPI - Lisenziya

Bu layihə MIT lisenziyasının şərtlərinə əsasən lisenziyalaşdırılıb.

================================================================================

# FastAPI (Part 1)

FastAPI উচ্চক্ষমতা সম্পন্ন, সহজে শেখার এবং দ্রুত কোড করে প্রোডাকশনের জন্য ফ্রামওয়ার্ক।

নির্দেশিকা নথি: https://fastapi.tiangolo.com

: https://github.com/fastapi/fastapi

FastAPI একটি আধুনিক, দ্রুত ( বেশি ক্ষমতা ) সম্পন্ন, Python 3.6+ দিয়ে API তৈরির জন্য স্ট্যান্ডার্ড পাইথন টাইপ ইঙ্গিত ভিত্তিক ওয়েব ফ্রেমওয়ার্ক।

এর মূল বৈশিষ্ট্য গুলো হলঃ

List:
: এটি  এবং  এর মত কার্যক্ষমতা সম্পন্ন (Starlette এবং Pydantic এর সাহায্যে)। পাইথন এর দ্রুততম ফ্রেমওয়ার্ক গুলোর মধ্যে এটি একটি।
দ্রুত কোড করা:বৈশিষ্ট্য তৈরির গতি ২০০% থেকে ৩০০% বৃদ্ধি করে৷ *
স্বল্প bugs: মানুব (ডেভেলপার) সৃষ্ট ত্রুটির প্রায় ৪০% হ্রাস করে। *

: দুর্দান্ত এডিটর সাহায্য Completion নামেও পরিচিত। দ্রুত ডিবাগ করা যায়।


: এটি এমন ভাবে সজানো হয়েছে যেন নির্দেশিকা নথি পড়ে সহজে শেখা এবং ব্যবহার করা যায়।

: কোড পুনরাবৃত্তি কমানোর পাশাপাশি, bug কমায় এবং প্রতিটি প্যারামিটার ঘোষণা থেকে একাধিক ফিচার পাওয়া যায় ।
: স্বয়ংক্রিয় ভাবে তৈরি ক্রিয়াশীল নির্দেশনা নথি (documentation) সহ উৎপাদন উপযোগি (Production-ready) কোড পাওয়া যায়।
মান-ভিত্তিক: এর ভিত্তি  (যা পুর্বে Swagger নামে পরিচিত ছিল) এবং JSON Schema এর আদর্শের মানের ওপর

: দুর্দান্ত এডিটর সাহায্য Completion নামেও পরিচিত। দ্রুত ডিবাগ করা যায়।

================================================================================

# FastAPI (Part 2)

: এটি এমন ভাবে সজানো হয়েছে যেন নির্দেশিকা নথি পড়ে সহজে শেখা এবং ব্যবহার করা যায়।

* উৎপাদনমুখি এপ্লিকেশন বানানোর এক দল ডেভেলপার এর মতামত ভিত্তিক ফলাফল।

================================================================================

# FastAPI - মতামত সমূহ

"আমি আজকাল  ব্যবহার করছি। [...] আমরা ভাবছি মাইক্রোসফ্টে ML সার্ভিস এ সকল দলের জন্য এটি ব্যবহার করব। যার মধ্যে কিছু পণ্য  এ সংযোযন হয় এবং কিছু  এর সাথে সংযোযন হচ্ছে।"

"আমরা  লাইব্রেরি গ্রহণ করেছি একটি  সার্ভার তৈরি করতে, যা ভবিষ্যদ্বাণী পাওয়ার জন্য কুয়েরি করা যেতে পারে। [লুডউইগের জন্য]"

" আমাদের ক্রাইসিস ম্যানেজমেন্ট অর্কেস্ট্রেশন ফ্রেমওয়ার্ক:  এর ওপেন সোর্স রিলিজ ঘোষণা করতে পেরে আনন্দিত! [যাকিনা  দিয়ে নির্মিত]"

"আমি  নিয়ে চাঁদের সমান উৎসাহিত। এটি খুবই মজার!"

"_সত্যিই, আপনি যা তৈরি করেছেন তা খুব মজবুত এবং পরিপূর্ন৷ অনেক উপায়ে, আমি যা  এ করতে চেয়েছিলাম - তা কাউকে তৈরি করতে দেখে আমি সত্যিই অনুপ্রানিত৷_"

"আপনি যদি REST API তৈরির জন্য একটি আধুনিক ফ্রেমওয়ার্ক শিখতে চান, তাহলে  দেখুন [...] এটি দ্রুত, ব্যবহার করা সহজ এবং শিখতেও সহজ [...]_"

"আমরা আমাদের  [...] এর জন্য - তে এসেছি [...] আমি মনে করি আপনিও এটি পছন্দ করবেন [...]"

================================================================================

# FastAPI - , CLI এর জন্য FastAPI

আপনি যদি  অ্যাপ বানাতে চান, যা কিনা ওয়েব API এর পরিবর্তে টার্মিনালে ব্যবহার হবে, তাহলে দেখুন.

হল FastAPI এর ছোট ভাইয়ের মত। এবং এটির উদ্দেশ্য ছিল CLIs এর FastAPI হওয়া। ⌨️ 🚀

================================================================================

# FastAPI - প্রয়োজনীয়তা গুলো

FastAPI কিছু দানবেদের কাঁধে দাঁড়িয়ে আছে:

List:
ওয়েব অংশের জন্য.
 ডেটা অংশগুলির জন্য.

================================================================================

# FastAPI - ইনস্টলেশন প্রক্রিয়া

আপনার একটি ASGI সার্ভারেরও প্রয়োজন হবে, প্রোডাকশনের জন্য  অথবা .

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - তৈরি

List:
নামে একটি ফাইল তৈরি করুন:

যদি আপনার কোড  / , ব্যবহার করে তাহলে  ব্যবহার করুন:

আপনি যদি না জানেন, "তাড়াহুড়ো?" বিভাগটি দেখুন  এবং  নথির মধ্যে দেখুন .

================================================================================

# FastAPI - এটি চালান

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

uvicorn main:app নির্দেশনাটি দ্বারা বোঝায়:

List:
: ফাইল  (পাইথন "মডিউল")।
: app = FastAPI() লাইন দিয়ে  এর ভিতরে তৈরি করা অবজেক্ট।
: কোড পরিবর্তনের পরে সার্ভার পুনরায় চালু করুন। এটি শুধুমাত্র ডেভেলপমেন্ট এর সময় ব্যবহার করুন।

================================================================================

# FastAPI - এটা চেক করুন

আপনার ব্রাউজার খুলুন http://127.0.0.1:8000/items/5?q=somequery এ।

আপনি JSON রেসপন্স দেখতে পাবেন:

আপনি ইতিমধ্যে একটি API তৈরি করেছেন যা:

List:
এবং /items/{item_id}  এ HTTP অনুরোধ গ্রহণ করে।
উভয় ই   নেয় ( যা HTTP  নামেও পরিচিত)।
 /items/{item_id}-এ একটি path প্যারামিটার  আছে যা কিনা  হতে হবে।
 /items/{item_id}-এর একটি ঐচ্ছিক  query প্যারামিটার  আছে।

================================================================================

# FastAPI - ক্রিয়াশীল API নির্দেশিকা নথি

এখন যান http://127.0.0.1:8000/docs.

আপনি স্বয়ংক্রিয় ভাবে প্রস্তুত ক্রিয়াশীল API নির্দেশিকা নথি দেখতে পাবেন (Swagger UI প্রদত্ত):

================================================================================

# FastAPI - বিকল্প API নির্দেশিকা নথি

এবং এখন http://127.0.0.1:8000/redoc এ যান.

আপনি স্বয়ংক্রিয় ভাবে প্রস্তুত বিকল্প নির্দেশিকা নথি দেখতে পাবেন ( প্রদত্ত):

================================================================================

# FastAPI - উদাহরণস্বরূপ আপগ্রেড

এখন  ফাইলটি পরিবর্তন করুন যেন এটি  রিকুয়েস্ট থেকে বডি পেতে পারে।

Python স্ট্যান্ডার্ড লাইব্রেরি, Pydantic এর সাহায্যে বডি ঘোষণা করুন।

Code example:
update_item   
     "item_name"

সার্ভারটি স্বয়ংক্রিয়ভাবে পুনরায় লোড হওয়া উচিত (কারণ আপনি উপরের  কমান্ডে  যোগ করেছেন)।

================================================================================

# FastAPI - ক্রিয়াশীল API নির্দেশিকা নথি উন্নীতকরণ

এখন http://127.0.0.1:8000/docs এডড্রেসে যান.

List:
ক্রিয়াশীল API নির্দেশিকা নথিটি স্বয়ংক্রিয়ভাবে উন্নীত হযে যাবে, নতুন বডি সহ:

List:
"Try it out" বাটনে চাপুন, এটি আপনাকে পেরামিটারগুলো পূরণ করতে এবং API এর সাথে সরাসরি ক্রিয়া-কলাপ করতে দিবে:

List:
তারপরে "Execute" বাটনে চাপুন, ব্যবহারকারীর ইন্টারফেস আপনার API এর সাথে যোগাযোগ করবে, পেরামিটার পাঠাবে, ফলাফলগুলি পাবে এবং সেগুলি পর্রদায় দেখাবে:

================================================================================

# FastAPI - বিকল্প API নির্দেশিকা নথি আপগ্রেড

এবং এখন http://127.0.0.1:8000/redoc এ যান।

List:
বিকল্প নির্দেশিকা নথিতেও নতুন কুয়েরি প্যারামিটার এবং বডি প্রতিফলিত হবে:

================================================================================

# FastAPI - সংক্ষিপ্তকরণ (Part 1)

সংক্ষেপে, আপনি শুধু একবার প্যারামিটারের ধরন, বডি ইত্যাদি ফাংশন প্যারামিটার হিসেবে ঘোষণা করেন।

আপনি সেটি আধুনিক পাইথনের সাথে করেন।

আপনাকে নতুন করে নির্দিষ্ট কোন লাইব্রেরির বাক্য গঠন, ফাংশন বা ক্লাস কিছুই শিখতে হচ্ছে না।

শুধুই আধুনিক Python 3.6+

উদাহরণস্বরূপ,  এর জন্য:

অথবা আরও জটিল  মডেলের জন্য:

...এবং সেই একই ঘোষণার সাথে আপনি পাবেন:

List:
এডিটর সাহায্য, যেমন


তথ্য যাচাইকরণ:
ডেটা অবৈধ হলে স্বয়ংক্রিয় এবং পরিষ্কার ত্রুটির নির্দেশনা।
এমনকি গভীরভাবে নেস্ট করা JSON অবজেক্টের জন্য বৈধতা।

প্রেরিত তথ্য : যা নেটওয়ার্ক থেকে পাইথনের তথ্য এবং ধরনে আসে, এবং সেখান থেকে পড়া:




পাথ প্যারামিটার।
কুয়েরি প্যারামিটার।







আউটপুট ডেটার : পাইথন ডেটা এবং টাইপ থেকে নেটওয়ার্ক ডেটাতে রূপান্তর করা (JSON হিসাবে):
  -পাইথন টাইপে রূপান্তর করুন (, , , , , ইত্যাদি)।

 অবজেক্ট।
 objeঅবজেক্টcts।
ডাটাবেস মডেল।
...এবং আরো অনেক।
স্বয়ংক্রিয় ক্রিয়াশীল API নির্দেশিকা নথি, 2টি বিকল্প ব্যবহারকারীর ইন্টারফেস সহ:
সোয়াগার ইউ আই (Swagger UI)।
রিডক (ReDoc)।

প্রেরিত তথ্য : যা নেটওয়ার্ক থেকে পাইথনের তথ্য এবং ধরনে আসে, এবং সেখান থেকে পড়া:

আউটপুট ডেটার : পাইথন ডেটা এবং টাইপ থেকে নেটওয়ার্ক ডেটাতে রূপান্তর করা (JSON হিসাবে):
  -পাইথন টাইপে রূপান্তর করুন (, , , , , ইত্যাদি)।

পূর্ববর্তী কোড উদাহরণে ফিরে আসা যাক,  যা করবে:

================================================================================

# FastAPI - সংক্ষিপ্তকরণ (Part 2)

List:
এবং  অনুরোধের জন্য পথে  আছে কিনা তা যাচাই করবে।
 এবং  অনুরোধের জন্য  টাইপ  এর হতে হবে তা যাচাই করবে।
যদি না হয় তবে ক্লায়েন্ট একটি উপযুক্ত, পরিষ্কার ত্রুটি দেখতে পাবেন।
 অনুরোধের জন্য একটি ঐচ্ছিক ক্যুয়েরি প্যারামিটার নামক  (যেমন http://127.0.0.1:8000/items/foo?q=somequery) আছে কি তা চেক করবে।
যেহেতু  প্যারামিটারটি  দিয়ে ঘোষণা করা হয়েছে, তাই এটি ঐচ্ছিক।
 ছাড়া এটি প্রয়োজনীয় হতো (যেমন  এর ক্ষেত্রে হয়েছে)।
/items/{item_id} এর জন্য  অনুরোধের বডি JSON হিসাবে পড়ুন:
লক্ষ করুন,  একটি প্রয়োজনীয় অ্যাট্রিবিউট হিসাবে বিবেচনা করেছে এবং এটি  হতে হবে।
লক্ষ করুন এখানে,  অ্যাট্রিবিউটটি আবশ্যক এবং এটি  হতে হবে।
লক্ষ করুন  একটি ঐচ্ছিক অ্যাট্রিবিউট এবং এটি  হতে হবে যদি উপস্থিত থাকে।
এই সবটি গভীরভাবে অবস্থানরত JSON অবজেক্টগুলিতেও কাজ করবে।
স্বয়ংক্রিয়ভাবে JSON হতে এবং JSON থেকে কনভার্ট করুন।
OpenAPI দিয়ে সবকিছু ডকুমেন্ট করুন, যা ব্যবহার করা যেতে পারে:
ক্রিয়াশীল নির্দেশিকা নথি।
অনেক ভাষার জন্য স্বয়ংক্রিয় ক্লায়েন্ট কোড তৈরির ব্যবস্থা।
সরাসরি 2টি ক্রিয়াশীল নির্দেশিকা নথি ওয়েব পৃষ্ঠ প্রদান করা হয়েছে।

আমরা এতক্ষন শুধু এর পৃষ্ঠ তৈরি করেছি, কিন্তু আপনি ইতমধ্যেই এটি কিভাবে কাজ করে তার ধারণাও পেয়ে গিয়েছেন।

নিম্নোক্ত লাইন গুলো পরিবর্তন করার চেষ্টা করুন:

================================================================================

# FastAPI - সংক্ষিপ্তকরণ (Part 3)

...এবং দেখুন কিভাবে আপনার এডিটর উপাদানগুলোকে সয়ংক্রিয়ভাবে-সম্পন্ন করবে এবং তাদের ধরন জানতে পারবে:

আরও বৈশিষ্ট্য সম্পন্ন উদাহরণের জন্য, দেখুন টিউটোরিয়াল - ব্যবহারকারীর গাইড.

স্পয়লার সতর্কতা: টিউটোরিয়াল - ব্যবহারকারীর গাইড নিম্নোক্ত বিষয়গুলি অন্তর্ভুক্ত করে:

List:
, , ফর্ম ফিল্ড এবং  এমন অন্যান্য জায়গা থেকে প্যারামিটার ঘোষণা করা।
maximum_length বা  এর মতো যাচাইকরণ বাধামুক্তি সেট করা হয় কিভাবে, তা নিয়ে আলোচনা করা হবে।
একটি খুব শক্তিশালী এবং ব্যবহার করা সহজ ডিপেন্ডেন্সি ইনজেকশন পদ্ধতি
 এবং  এবং HTTP Basic auth সহ নিরাপত্তা এবং অনুমোদনপ্রাপ্তি সম্পর্কিত বিষয়সমূহের উপর।
গভীরভাবে অবস্থানরত JSON মডেল ঘোষণা করার জন্য আরও উন্নত (কিন্তু সমান সহজ) কৌশল (Pydantic কে ধন্যবাদ)।
আরো অতিরিক্ত বৈশিষ্ট্য (স্টারলেটকে ধন্যবাদ) হিসাবে:
WebSockets

HTTPX এবং  ভিত্তিক অত্যন্ত সহজ পরীক্ষা

Cookie Sessions
...এবং আরো।

================================================================================

# FastAPI - কর্মক্ষমতা

স্বাধীন TechEmpower Benchmarks দেখায় যে  অ্যাপ্লিকেশনগুলি Uvicorn-এর অধীনে চলমান দ্রুততমপাইথন ফ্রেমওয়ার্কগুলির মধ্যে একটি, শুধুমাত্র Starlette এবং Uvicorn-এর পর (FastAPI দ্বারা অভ্যন্তরীণভাবে ব্যবহৃত)। (*)

এটি সম্পর্কে আরও বুঝতে, দেখুন Benchmarks.

================================================================================

# FastAPI - ঐচ্ছিক নির্ভরশীলতা

Pydantic দ্বারা ব্যবহৃত:

List:
email-validator - ইমেল যাচাইকরণের জন্য।

স্টারলেট দ্বারা ব্যবহৃত:

List:
- আপনি যদি TestClient ব্যবহার করতে চান তাহলে আবশ্যক।
 - আপনি যদি প্রদত্ত টেমপ্লেট রূপরেখা ব্যবহার করতে চান তাহলে প্রয়োজন।
python-multipart - আপনি যদি ফর্ম সহায়তা করতে চান তাহলে প্রয়োজন , request.form() সহ।
itsdangerous - SessionMiddleware সহায়তার জন্য প্রয়োজন।
 - স্টারলেটের SchemaGenerator সাপোর্ট এর জন্য প্রয়োজন (আপনার সম্ভাবত FastAPI প্রয়োজন নেই)।
 - GraphQLApp সহায়তার জন্য প্রয়োজন।

FastAPI / Starlette দ্বারা ব্যবহৃত:

List:
- সার্ভারের জন্য যা আপনার অ্যাপ্লিকেশন লোড করে এবং পরিবেশন করে।
 - আপনি ORJSONResponse ব্যবহার করতে চাইলে প্রয়োজন।
 - আপনি UJSONResponse ব্যবহার করতে চাইলে প্রয়োজন।

আপনি এই সব ইনস্টল করতে পারেন pip install fastapi[all] দিয়ে.

================================================================================

# FastAPI - লাইসেন্স

এই প্রজেক্ট MIT লাইসেন্স নীতিমালার অধীনে শর্তায়িত।

================================================================================

# FastAPI (Part 1)

FastAPI-Framework, hohe Performanz, leicht zu lernen, schnell zu entwickeln, produktionsreif

Dokumentation: https://fastapi.tiangolo.com/de

: https://github.com/fastapi/fastapi

FastAPI ist ein modernes, schnelles (hoch performantes) Webframework zur Erstellung von APIs mit Python auf Basis von Standard-Python-Typhinweisen.

Seine Schlüssel-Merkmale sind:

================================================================================

# FastAPI (Part 2)

List:
: Sehr hohe Performanz, auf Augenhöhe mit  und  (dank Starlette und Pydantic). Eines der schnellsten verfügbaren Python-Frameworks.
Schnell zu entwickeln: Erhöhen Sie die Geschwindigkeit bei der Entwicklung von Features um etwa 200 % bis 300 %. *
Weniger Bugs: Verringern Sie die von Menschen (Entwicklern) verursachten Fehler um etwa 40 %. *
: Hervorragende Editor-Unterstützung. Code-Vervollständigung überall. Weniger Zeit mit Debuggen verbringen.
: So konzipiert, dass es einfach zu benutzen und zu erlernen ist. Weniger Zeit mit dem Lesen von Dokumentation verbringen.
: Minimieren Sie die Verdoppelung von Code. Mehrere Features aus jeder Parameterdeklaration. Weniger Bugs.
: Erhalten Sie produktionsreifen Code. Mit automatischer, interaktiver Dokumentation.
Standards-basiert: Basierend auf (und vollständig kompatibel mit) den offenen Standards für APIs:  (früher bekannt als Swagger) und JSON Schema.

* Schätzung basierend auf Tests in einem internen Entwicklungsteam, das Produktionsanwendungen erstellt.

================================================================================

# FastAPI - Meinungen (Part 1)

„[...] Ich verwende  heutzutage sehr oft. [...] Ich habe tatsächlich vor, es für alle ML-Services meines Teams bei Microsoft zu verwenden. Einige davon werden in das Kernprodukt  und einige -Produkte integriert.“

„Wir haben die -Bibliothek übernommen, um einen -Server zu erstellen, der für Vorhersagen abgefragt werden kann. [für Ludwig]“

„ freut sich, die Open-Source-Veröffentlichung unseres Krisenmanagement-Orchestrierung-Frameworks bekannt zu geben: ! [erstellt mit ]“

„Ich bin hellauf begeistert von . Es macht so viel Spaß!“

„Ehrlich, was Du gebaut hast, sieht super solide und poliert aus. In vielerlei Hinsicht ist es so, wie ich  haben wollte – es ist wirklich inspirierend, jemanden so etwas bauen zu sehen.“

„Wenn Sie ein modernes Framework zum Erstellen von REST-APIs erlernen möchten, schauen Sie sich  an. [...] Es ist schnell, einfach zu verwenden und leicht zu lernen [...]“

„Wir haben zu  für unsere  gewechselt [...] Ich denke, es wird Ihnen gefallen [...]“

================================================================================

# FastAPI - Meinungen (Part 2)

„Falls irgendjemand eine Produktions-Python-API erstellen möchte, kann ich  wärmstens empfehlen. Es ist wunderschön konzipiert, einfach zu verwenden und hoch skalierbar; es ist zu einer Schlüsselkomponente unserer API-First-Entwicklungsstrategie geworden und treibt viele Automatisierungen und Services an, wie etwa unseren Virtual TAC Engineer.“

================================================================================

# FastAPI - , das FastAPI der CLIs

Wenn Sie eine -Anwendung für das Terminal erstellen, anstelle einer Web-API, schauen Sie sich  an.

ist die kleine Schwester von FastAPI. Und es soll das FastAPI der CLIs sein. ⌨️ 🚀

================================================================================

# FastAPI - Anforderungen

FastAPI steht auf den Schultern von Giganten:

List:
für die Webanteile.
 für die Datenanteile.

================================================================================

# FastAPI - Installation

Erstellen und aktivieren Sie eine virtuelle Umgebung und installieren Sie dann FastAPI:

Code example:
pipinstall"fastapi[standard]"

: Stellen Sie sicher, dass Sie "fastapi[standard]" in Anführungszeichen setzen, damit es in allen Terminals funktioniert.

================================================================================

# FastAPI - Erstellung

Erstellen Sie eine Datei  mit:

Wenn Ihr Code  /  verwendet, benutzen Sie :

Wenn Sie das nicht kennen, schauen Sie sich den Abschnitt „In Eile?“ über  und  in der Dokumentation an.

================================================================================

# FastAPI - Starten (Part 1)

Starten Sie den Server mit:

Code example:
fastapidevmain.py
 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯
INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

Der Befehl fastapi dev liest Ihre -Datei, erkennt die -App darin und startet einen Server mit .

================================================================================

# FastAPI - Starten (Part 2)

Standardmäßig wird fastapi dev mit aktiviertem Auto-Reload für die lokale Entwicklung gestartet.

Sie können mehr darüber in der FastAPI CLI Dokumentation lesen.

================================================================================

# FastAPI - Es testen

Öffnen Sie Ihren Browser unter http://127.0.0.1:8000/items/5?q=somequery.

Sie sehen die JSON- als:

Sie haben bereits eine API erstellt, welche:

List:
HTTP- auf den   und /items/{item_id} entgegennimmt.
Beide  nehmen  Operationen (auch bekannt als HTTP-) entgegen.
Der  /items/{item_id} hat einen Pfad-Parameter , der ein  sein sollte.
Der  /items/{item_id} hat einen optionalen -Query-Parameter .

================================================================================

# FastAPI - Interaktive API-Dokumentation

Gehen Sie nun auf http://127.0.0.1:8000/docs.

Sie sehen die automatische interaktive API-Dokumentation (bereitgestellt von Swagger UI):

================================================================================

# FastAPI - Alternative API-Dokumentation

Und jetzt gehen Sie auf http://127.0.0.1:8000/redoc.

Sie sehen die alternative automatische Dokumentation (bereitgestellt von ):

================================================================================

# FastAPI - Beispiel Aktualisierung

Ändern Sie jetzt die Datei , um den  eines -Requests zu empfangen.

Deklarieren Sie den Body mit Standard-Python-Typen, dank Pydantic.

Code example:
update_item   
     "item_name"

Der fastapi dev-Server sollte automatisch neu laden.

================================================================================

# FastAPI - Interaktive API-Dokumentation aktualisieren

Gehen Sie jetzt auf http://127.0.0.1:8000/docs.

List:
Die interaktive API-Dokumentation wird automatisch aktualisiert, einschließlich des neuen Bodys:

List:
Klicken Sie auf den Button „Try it out“, damit können Sie die Parameter ausfüllen und direkt mit der API interagieren:

List:
Klicken Sie dann auf den Button „Execute“, die Benutzeroberfläche wird mit Ihrer API kommunizieren, sendet die Parameter, holt die Ergebnisse und zeigt sie auf dem Bildschirm an:

================================================================================

# FastAPI - Alternative API-Dokumentation aktualisieren

Und jetzt gehen Sie auf http://127.0.0.1:8000/redoc.

List:
Die alternative Dokumentation wird ebenfalls den neuen Query-Parameter und Body widerspiegeln:

================================================================================

# FastAPI - Zusammenfassung (Part 1)

Zusammengefasst deklarieren Sie  die Typen von Parametern, Body, usw. als Funktionsparameter.

Das machen Sie mit modernen Standard-Python-Typen.

Sie müssen keine neue Syntax, Methoden oder Klassen einer bestimmten Bibliothek usw. lernen.

Zum Beispiel für ein :

oder für ein komplexeres -Modell:

... und mit dieser einen Deklaration erhalten Sie:

List:
Editor-Unterstützung, einschließlich:
Code-Vervollständigung.
Typprüfungen.


Validierung von Daten:
Automatische und eindeutige Fehler, wenn die Daten ungültig sind.
Validierung sogar für tief verschachtelte JSON-Objekte.


Konvertierung von Eingabedaten: Aus dem Netzwerk kommend, zu Python-Daten und -Typen. Lesen von:

Pfad-Parametern.
Query-Parametern.


Formularen.



Konvertierung von Ausgabedaten: Konvertierung von Python-Daten und -Typen zu Netzwerkdaten (als JSON):
Konvertieren von Python-Typen (, , , , , usw.).
-Objekte.
-Objekte.
Datenbankmodelle.
... und viele mehr.


Automatische interaktive API-Dokumentation, einschließlich zwei alternativer Benutzeroberflächen:
Swagger UI.

List:
Code-Vervollständigung.
Typprüfungen.

List:
Automatische und eindeutige Fehler, wenn die Daten ungültig sind.
Validierung sogar für tief verschachtelte JSON-Objekte.

================================================================================

# FastAPI - Zusammenfassung (Part 2)

List:
Pfad-Parametern.
Query-Parametern.


Formularen.

List:
Konvertieren von Python-Typen (, , , , , usw.).
-Objekte.
-Objekte.
Datenbankmodelle.
... und viele mehr.

Um auf das vorherige Codebeispiel zurückzukommen,  wird:

List:
Validieren, dass es eine  im Pfad für - und -Requests gibt.
Validieren, ob die  vom Typ  für - und -Requests ist.
Falls nicht, sieht der Client einen hilfreichen, klaren Fehler.


Prüfen, ob es einen optionalen Query-Parameter namens  (wie in http://127.0.0.1:8000/items/foo?q=somequery) für -Requests gibt.
Da der -Parameter mit  deklariert ist, ist er optional.
Ohne das  wäre er erforderlich (wie der Body im Fall von ).


Bei -Requests an /items/{item_id} den Body als JSON lesen:
Prüfen, ob er ein erforderliches Attribut  hat, das ein  sein muss.
Prüfen, ob er ein erforderliches Attribut  hat, das ein  sein muss.
Prüfen, ob er ein optionales Attribut  hat, das ein  sein muss, falls vorhanden.
All dies würde auch für tief verschachtelte JSON-Objekte funktionieren.

================================================================================

# FastAPI - Zusammenfassung (Part 3)


Automatisch von und nach JSON konvertieren.
Alles mit OpenAPI dokumentieren, welches verwendet werden kann von:
Interaktiven Dokumentationssystemen.
Automatisch Client-Code generierenden Systemen für viele Sprachen.


Zwei interaktive Dokumentations-Weboberflächen direkt bereitstellen.

List:
Falls nicht, sieht der Client einen hilfreichen, klaren Fehler.

List:
Da der -Parameter mit  deklariert ist, ist er optional.
Ohne das  wäre er erforderlich (wie der Body im Fall von ).

List:
Prüfen, ob er ein erforderliches Attribut  hat, das ein  sein muss.
Prüfen, ob er ein erforderliches Attribut  hat, das ein  sein muss.
Prüfen, ob er ein optionales Attribut  hat, das ein  sein muss, falls vorhanden.
All dies würde auch für tief verschachtelte JSON-Objekte funktionieren.

List:
Interaktiven Dokumentationssystemen.
Automatisch Client-Code generierenden Systemen für viele Sprachen.

Wir haben nur an der Oberfläche gekratzt, aber Sie bekommen schon eine Vorstellung davon, wie das Ganze funktioniert.

Versuchen Sie, diese Zeile zu ändern:

... und sehen Sie, wie Ihr Editor die Attribute automatisch vervollständigt und ihre Typen kennt:

================================================================================

# FastAPI - Zusammenfassung (Part 4)

Für ein vollständigeres Beispiel, mit weiteren Funktionen, siehe das Tutorial – Benutzerhandbuch.

Spoiler-Alarm: Das Tutorial – Benutzerhandbuch enthält:

List:
Deklaration von Parametern von anderen verschiedenen Stellen wie: , , Formularfelder und .
Wie man Validierungs-Constraints wie maximum_length oder  setzt.
Ein sehr leistungsfähiges und einfach zu bedienendes System für Dependency Injection.
Sicherheit und Authentifizierung, einschließlich Unterstützung für  mit JWT-Tokens und HTTP Basic Authentifizierung.
Fortgeschrittenere (aber ebenso einfache) Techniken zur Deklaration tief verschachtelter JSON-Modelle (dank Pydantic).
-Integration mit Strawberry und anderen Bibliotheken.
Viele zusätzliche Features (dank Starlette) wie:
WebSockets
extrem einfache Tests auf Basis von HTTPX und 

Cookie-Sessions
... und mehr.

List:
WebSockets
extrem einfache Tests auf Basis von HTTPX und 

Cookie-Sessions
... und mehr.

================================================================================

# FastAPI - Performanz

Unabhängige TechEmpower-Benchmarks zeigen -Anwendungen, die unter Uvicorn laufen, als eines der schnellsten verfügbaren Python-Frameworks, nur hinter Starlette und Uvicorn selbst (intern von FastAPI verwendet). (*)

Um mehr darüber zu erfahren, siehe den Abschnitt Benchmarks.

================================================================================

# FastAPI - Abhängigkeiten

FastAPI hängt von Pydantic und Starlette ab.

================================================================================

# FastAPI - -Abhängigkeiten

Wenn Sie FastAPI mit pip install "fastapi[standard]" installieren, kommt es mit der -Gruppe optionaler Abhängigkeiten:

Verwendet von Pydantic:

List:
email-validator – für E-Mail-Validierung.

Verwendet von Starlette:

List:
– erforderlich, wenn Sie den TestClient verwenden möchten.
 – erforderlich, wenn Sie die Default-Template-Konfiguration verwenden möchten.
python-multipart – erforderlich, wenn Sie Formulare mittels request.form()  möchten.

Verwendet von FastAPI:

List:
– für den Server, der Ihre Anwendung lädt und bereitstellt. Dies umfasst uvicorn[standard], das einige Abhängigkeiten (z. B. ) beinhaltet, die für eine Bereitstellung mit hoher Performanz benötigt werden.
fastapi-cli[standard] – um den -Befehl bereitzustellen.
Dies beinhaltet fastapi-cloud-cli, das es Ihnen ermöglicht, Ihre FastAPI-Anwendung auf FastAPI Cloud bereitzustellen.

List:
Dies beinhaltet fastapi-cloud-cli, das es Ihnen ermöglicht, Ihre FastAPI-Anwendung auf FastAPI Cloud bereitzustellen.

================================================================================

# FastAPI - Ohne -Abhängigkeiten

Wenn Sie die  optionalen Abhängigkeiten nicht einschließen möchten, können Sie mit pip install fastapi statt pip install "fastapi[standard]" installieren.

================================================================================

# FastAPI - Ohne fastapi-cloud-cli

Wenn Sie FastAPI mit den Standardabhängigkeiten, aber ohne das fastapi-cloud-cli installieren möchten, können Sie mit pip install "fastapi[standard-no-fastapi-cloud-cli]" installieren.

================================================================================

# FastAPI - Zusätzliche optionale Abhängigkeiten

Es gibt einige zusätzliche Abhängigkeiten, die Sie installieren möchten.

Zusätzliche optionale Pydantic-Abhängigkeiten:

List:
pydantic-settings – für die Verwaltung von Einstellungen.
pydantic-extra-types – für zusätzliche Typen zur Verwendung mit Pydantic.

Zusätzliche optionale FastAPI-Abhängigkeiten:

List:
– erforderlich, wenn Sie ORJSONResponse verwenden möchten.
 – erforderlich, wenn Sie UJSONResponse verwenden möchten.

================================================================================

# FastAPI - Lizenz

Dieses Projekt ist unter den Bedingungen der MIT-Lizenz lizenziert.

================================================================================

# FastAPI (Part 1)

FastAPI framework, alto rendimiento, fácil de aprender, rápido de programar, listo para producción

Documentación: https://fastapi.tiangolo.com

Código Fuente: https://github.com/fastapi/fastapi

FastAPI es un framework web moderno, rápido (de alto rendimiento), para construir APIs con Python basado en las anotaciones de tipos estándar de Python.

Las características clave son:

================================================================================

# FastAPI (Part 2)

List:
: Muy alto rendimiento, a la par con  y  (gracias a Starlette y Pydantic). Uno de los frameworks Python más rápidos disponibles.
Rápido de programar: Aumenta la velocidad para desarrollar funcionalidades en aproximadamente un 200% a 300%. *
Menos bugs: Reduce en aproximadamente un 40% los errores inducidos por humanos (desarrolladores). *
: Gran soporte para editores. Autocompletado en todas partes. Menos tiempo depurando.
: Diseñado para ser fácil de usar y aprender. Menos tiempo leyendo documentación.
: Minimiza la duplicación de código. Múltiples funcionalidades desde cada declaración de parámetro. Menos bugs.
: Obtén código listo para producción. Con documentación interactiva automática.
Basado en estándares: Basado (y completamente compatible) con los estándares abiertos para APIs:  (anteriormente conocido como Swagger) y JSON Schema.

* estimación basada en pruebas con un equipo de desarrollo interno, construyendo aplicaciones de producción.

================================================================================

# FastAPI - Opiniones (Part 1)

"[...] Estoy usando  un montón estos días. [...] De hecho, estoy planeando usarlo para todos los servicios de ML de mi equipo en Microsoft. Algunos de ellos se están integrando en el núcleo del producto  y algunos productos de ."

"Adoptamos el paquete  para crear un servidor  que pueda ser consultado para obtener predicciones. [para Ludwig]"

" se complace en anunciar el lanzamiento de código abierto de nuestro framework de orquestación de gestión de crisis: ! [construido con ]"

"Estoy súper emocionado con . ¡Es tan divertido!"

"Honestamente, lo que has construido parece súper sólido y pulido. En muchos aspectos, es lo que quería que  fuera; es realmente inspirador ver a alguien construir eso."

"Si estás buscando aprender un framework moderno para construir APIs REST, échale un vistazo a  [...] Es rápido, fácil de usar y fácil de aprender [...]"

"Nos hemos cambiado a  para nuestras  [...] Creo que te gustará [...]"

================================================================================

# FastAPI - Opiniones (Part 2)

"Si alguien está buscando construir una API de Python para producción, altamente recomendaría . Está hermosamente diseñado, es simple de usar y altamente escalable, se ha convertido en un componente clave en nuestra estrategia de desarrollo API primero y está impulsando muchas automatizaciones y servicios como nuestro Ingeniero Virtual TAC."

================================================================================

# FastAPI - , el FastAPI de las CLIs

Si estás construyendo una aplicación de  para ser usada en el terminal en lugar de una API web, revisa .

es el hermano pequeño de FastAPI. Y está destinado a ser el FastAPI de las CLIs. ⌨️ 🚀

================================================================================

# FastAPI - Requisitos

FastAPI se apoya en hombros de gigantes:

List:
para las partes web.
 para las partes de datos.

================================================================================

# FastAPI - Instalación

Crea y activa un entorno virtual y luego instala FastAPI:

Code example:
pipinstall"fastapi[standard]"

: Asegúrate de poner "fastapi[standard]" entre comillas para asegurar que funcione en todas las terminales.

================================================================================

# FastAPI - Créalo

List:
Crea un archivo  con:

Si tu código usa  / , usa :

Si no lo sabes, revisa la sección "¿Con prisa?" sobre  y  en la documentación.

================================================================================

# FastAPI - Córrelo (Part 1)

Corre el servidor con:

Code example:
fastapidevmain.py
 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯
INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

El comando fastapi dev lee tu archivo , detecta la app  en él y arranca un servidor usando .

================================================================================

# FastAPI - Córrelo (Part 2)

Por defecto, fastapi dev comenzará con auto-recarga habilitada para el desarrollo local.

Puedes leer más sobre esto en la documentación del CLI de FastAPI.

================================================================================

# FastAPI - Revísalo

Abre tu navegador en http://127.0.0.1:8000/items/5?q=somequery.

Verás el response JSON como:

Ya creaste una API que:

List:
Recibe requests HTTP en los   y /items/{item_id}.
Ambos  toman operaciones  (también conocidas como métodos HTTP).
El  /items/{item_id} tiene un parámetro de path  que debe ser un .
El  /items/{item_id} tiene un parámetro de query  opcional que es un .

================================================================================

# FastAPI - Documentación interactiva de la API

Ahora ve a http://127.0.0.1:8000/docs.

Verás la documentación interactiva automática de la API (proporcionada por Swagger UI):

================================================================================

# FastAPI - Documentación de API Alternativa

Y ahora, ve a http://127.0.0.1:8000/redoc.

Verás la documentación alternativa automática (proporcionada por ):

================================================================================

# FastAPI - Actualización del Ejemplo

Ahora modifica el archivo  para recibir un body desde un request .

Declara el body usando tipos estándar de Python, gracias a Pydantic.

Code example:
update_item   
     "item_name"

El servidor fastapi dev debería recargarse automáticamente.

================================================================================

# FastAPI - Actualización de la Documentación Interactiva de la API

Ahora ve a http://127.0.0.1:8000/docs.

List:
La documentación interactiva de la API se actualizará automáticamente, incluyendo el nuevo body:

List:
Haz clic en el botón "Try it out", te permite llenar los parámetros e interactuar directamente con la API:

List:
Luego haz clic en el botón "Execute", la interfaz de usuario se comunicará con tu API, enviará los parámetros, obtendrá los resultados y los mostrará en la pantalla:

================================================================================

# FastAPI - Actualización de la Documentación Alternativa de la API

Y ahora, ve a http://127.0.0.1:8000/redoc.

List:
La documentación alternativa también reflejará el nuevo parámetro de query y body:

================================================================================

# FastAPI - Resumen (Part 1)

En resumen, declaras  los tipos de parámetros, body, etc. como parámetros de función.

Lo haces con tipos estándar modernos de Python.

No tienes que aprender una nueva sintaxis, los métodos o clases de un paquete específico, etc.

Por ejemplo, para un :

o para un modelo  más complejo:

...y con esa única declaración obtienes:

List:
Soporte para editores, incluyendo:
Autocompletado.
Chequeo de tipos.


Validación de datos:
Errores automáticos y claros cuando los datos son inválidos.
Validación incluso para objetos JSON profundamente anidados.


Conversión de datos de entrada: de la red a los datos y tipos de Python. Leyendo desde:

Parámetros de path.
Parámetros de query.






Conversión de datos de salida: convirtiendo de datos y tipos de Python a datos de red (como JSON):
Convertir tipos de Python (, , , , , etc).
Objetos .
Objetos .
Modelos de base de datos.
...y muchos más.


Documentación interactiva automática de la API, incluyendo 2 interfaces de usuario alternativas:
Swagger UI.

List:
Autocompletado.
Chequeo de tipos.

List:
Errores automáticos y claros cuando los datos son inválidos.
Validación incluso para objetos JSON profundamente anidados.

List:
Parámetros de path.
Parámetros de query.

================================================================================

# FastAPI - Resumen (Part 2)

List:
Convertir tipos de Python (, , , , , etc).
Objetos .
Objetos .
Modelos de base de datos.
...y muchos más.

Volviendo al ejemplo de código anterior, :

List:
Validará que haya un  en el path para requests  y .
Validará que el  sea del tipo  para requests  y .
Si no lo es, el cliente verá un error útil y claro.


Comprobará si hay un parámetro de query opcional llamado  (como en http://127.0.0.1:8000/items/foo?q=somequery) para requests .
Como el parámetro  está declarado con , es opcional.
Sin el  sería requerido (como lo es el body en el caso con ).


Para requests  a /items/{item_id}, leerá el body como JSON:
Comprobará que tiene un atributo requerido  que debe ser un .
Comprobará que tiene un atributo requerido  que debe ser un .
Comprobará que tiene un atributo opcional , que debe ser un , si está presente.
Todo esto también funcionaría para objetos JSON profundamente anidados.


Convertirá de y a JSON automáticamente.
Documentará todo con OpenAPI, que puede ser usado por:
Sistemas de documentación interactiva.
Sistemas de generación automática de código cliente, para muchos lenguajes.


Proporcionará 2 interfaces web de documentación interactiva directamente.

================================================================================

# FastAPI - Resumen (Part 3)

List:
Si no lo es, el cliente verá un error útil y claro.

List:
Como el parámetro  está declarado con , es opcional.
Sin el  sería requerido (como lo es el body en el caso con ).

List:
Comprobará que tiene un atributo requerido  que debe ser un .
Comprobará que tiene un atributo requerido  que debe ser un .
Comprobará que tiene un atributo opcional , que debe ser un , si está presente.
Todo esto también funcionaría para objetos JSON profundamente anidados.

List:
Sistemas de documentación interactiva.
Sistemas de generación automática de código cliente, para muchos lenguajes.

Solo tocamos los conceptos básicos, pero ya te haces una idea de cómo funciona todo.

Intenta cambiar la línea con:

...y observa cómo tu editor autocompleta los atributos y conoce sus tipos:

Para un ejemplo más completo incluyendo más funcionalidades, ve al Tutorial - Guía del Usuario.

Alerta de spoilers: el tutorial - guía del usuario incluye:

================================================================================

# FastAPI - Resumen (Part 4)

List:
Declaración de parámetros desde otros lugares diferentes como: , , campos de formulario y .
Cómo establecer restricciones de validación como maximum_length o .
Un sistema de Inyección de Dependencias muy poderoso y fácil de usar.
Seguridad y autenticación, incluyendo soporte para  con tokens JWT y autenticación HTTP Basic.
Técnicas más avanzadas (pero igualmente fáciles) para declarar modelos JSON profundamente anidados (gracias a Pydantic).
Integración con  usando Strawberry y otros paquetes.
Muchas funcionalidades extra (gracias a Starlette) como:
WebSockets
pruebas extremadamente fáciles basadas en HTTPX y 

Sesiones de Cookies

List:
WebSockets
pruebas extremadamente fáciles basadas en HTTPX y 

Sesiones de Cookies

================================================================================

# FastAPI - Rendimiento

Benchmarks independientes de TechEmpower muestran aplicaciones  ejecutándose bajo Uvicorn como uno de los frameworks Python más rápidos disponibles, solo por debajo de Starlette y Uvicorn (usados internamente por FastAPI). (*)

Para entender más sobre esto, ve la sección Benchmarks.

================================================================================

# FastAPI - Dependencias

FastAPI depende de Pydantic y Starlette.

================================================================================

# FastAPI - Dependencias

Cuando instalas FastAPI con pip install "fastapi[standard]" viene con el grupo  de dependencias opcionales:

List:
email-validator - para validación de correos electrónicos.

Usadas por Starlette:

List:
- Requerido si deseas usar el TestClient.
 - Requerido si deseas usar la configuración de plantilla predeterminada.
python-multipart - Requerido si deseas soportar  de forms, con request.form().

Usadas por FastAPI / Starlette:

List:
- para el servidor que carga y sirve tu aplicación. Esto incluye uvicorn[standard], que incluye algunas dependencias (por ejemplo, ) necesarias para servir con alto rendimiento.
fastapi-cli - para proporcionar el comando .

================================================================================

# FastAPI - Sin Dependencias

Si no deseas incluir las dependencias opcionales , puedes instalar con pip install fastapi en lugar de pip install "fastapi[standard]".

================================================================================

# FastAPI - Dependencias Opcionales Adicionales

Existen algunas dependencias adicionales que podrías querer instalar.

Dependencias opcionales adicionales de Pydantic:

List:
pydantic-settings - para la gestión de configuraciones.
pydantic-extra-types - para tipos extra para ser usados con Pydantic.

Dependencias opcionales adicionales de FastAPI:

List:
- Requerido si deseas usar ORJSONResponse.
 - Requerido si deseas usar UJSONResponse.

================================================================================

# FastAPI - Licencia

Este proyecto tiene licencia bajo los términos de la licencia MIT.

================================================================================

# FastAPI (Part 1)

فریم‌ورک FastAPI، کارایی بالا، یادگیری آسان، کدنویسی سریع، آماده برای استفاده در محیط پروداکشن

: https://fastapi.tiangolo.com

: https://github.com/fastapi/fastapi

FastAPI یک وب فریم‌ورک مدرن و سریع (با کارایی بالا) برای ایجاد APIهای متنوع (وب، وب‌سوکت و غبره) با زبان پایتون نسخه +۳.۶ است. این فریم‌ورک با رعایت کامل راهنمای نوع داده (Type Hint) ایجاد شده است.

ویژگی‌های کلیدی این فریم‌ورک عبارتند از:

List:
: کارایی بسیار بالا و قابل مقایسه با   و  (با تشکر از Starlette و Pydantic). یکی از سریع‌ترین فریم‌ورک‌های پایتونی موجود.


کدنویسی سریع: افزایش ۲۰۰ تا ۳۰۰ درصدی سرعت توسعه قابلیت‌های جدید. *

: کاهش ۴۰ درصدی خطاهای انسانی (برنامه‌نویسی). *
: پشتیبانی فوق‌العاده در محیط‌های توسعه یکپارچه (IDE).  در همه بخش‌های کد. کاهش زمان رفع باگ.
: طراحی شده برای یادگیری و استفاده آسان. کاهش زمان مورد نیاز برای مراجعه به مستندات.
: کاهش تکرار در کد. چندین قابلیت برای هر پارامتر (منظور پارامترهای ورودی تابع هندلر می‌باشد، به بخش  در همین صفحه مراجعه شود). باگ کمتر.
: ایجاد کدی آماده برای استفاده در محیط پروداکشن و تولید خودکار مستندات تعاملی
مبتنی بر استانداردها: مبتنی بر (و منطبق با) استانداردهای متن باز مربوط به API:  (سوگر سابق) و JSON Schema.

================================================================================

# FastAPI (Part 2)

: کارایی بسیار بالا و قابل مقایسه با   و  (با تشکر از Starlette و Pydantic). یکی از سریع‌ترین فریم‌ورک‌های پایتونی موجود.

کدنویسی سریع: افزایش ۲۰۰ تا ۳۰۰ درصدی سرعت توسعه قابلیت‌های جدید. *

* تخمین‌ها بر اساس تست‌های انجام شده در یک تیم توسعه داخلی که مشغول ایجاد برنامه‌های کاربردی واقعی بودند صورت گرفته است.

================================================================================

# FastAPI - , فریم‌ورکی معادل FastAPI برای کار با واسط خط فرمان

اگر در حال ساختن برنامه‌ای برای استفاده در  (به جای استفاده در وب) هستید، می‌توانید از . استفاده کنید.

دوقلوی کوچکتر FastAPI است و قرار است معادلی برای FastAPI در برنامه‌های CLI باشد.️ 🚀

================================================================================

# FastAPI - نیازمندی‌ها

FastAPI مبتنی بر ابزارهای قدرتمند زیر است:

List:
فریم‌ورک  برای بخش وب.
کتابخانه  برای بخش داده‌.

================================================================================

# FastAPI - نصب

نصب یک سرور پروداکشن نظیر  یا  نیز جزء نیازمندی‌هاست.

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - ایجاد کنید

List:
فایلی به نام  با محتوای زیر ایجاد کنید:

اگر در کدتان از  /  استفاده می‌کنید، از  برای تعریف تابع خود استفاده کنید:

اگر با async / await آشنا نیستید، به بخش "عجله‌ دارید?" در صفحه درباره  و  در مستندات مراجعه کنید.

================================================================================

# FastAPI - اجرا کنید

با استفاده از دستور زیر سرور را اجرا کنید:

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

دستور uvicorn main:app شامل موارد زیر است:

List:
: فایل  (ماژول پایتون ایجاد شده).
: شیء ایجاد شده در فایل  در خط app = FastAPI().
: ریستارت کردن سرور با تغییر کد. تنها در هنگام توسعه از این گزینه استفاده شود..

================================================================================

# FastAPI - بررسی کنید

آدرس http://127.0.0.1:8000/items/5?q=somequery را در مرورگر خود باز کنید.

پاسخ JSON زیر را مشاهده خواهید کرد:

تا اینجا شما APIای ساختید که:

List:
درخواست‌های HTTP به   و /items/{item_id} را دریافت می‌کند.
هردو    (یا HTTP )  را پشتیبانی می‌کند.
 /items/{item_id} شامل  پارامتر مسیر  از نوع  است.
 /items/{item_id} شامل  پارامتر پرسمان اختیاری  از نوع  است.

================================================================================

# FastAPI - مستندات API تعاملی

حال به آدرس  http://127.0.0.1:8000/docs بروید.

مستندات API تعاملی (ایجاد شده به کمک Swagger UI) را مشاهده خواهید کرد:

================================================================================

# FastAPI - مستندات API جایگزین

حال به آدرس  http://127.0.0.1:8000/redoc بروید.

مستندات خودکار دیگری را مشاهده خواهید کرد که به کمک  ایجاد می‌شود:

================================================================================

# FastAPI - تغییر مثال

حال فایل  را مطابق زیر ویرایش کنید تا بتوانید  یک درخواست  را دریافت کنید.

به کمک Pydantic بدنه درخواست را با  استاندارد پایتون تعریف کنید.

Code example:
update_item   
     "item_name"

سرور به صورت خودکار ری‌استارت می‌شود (زیرا پیشتر از گزینه  در دستور    استفاده کردیم).

================================================================================

# FastAPI - تغییر مستندات API تعاملی

مجددا به آدرس  http://127.0.0.1:8000/docs بروید.

List:
مستندات API تعاملی به صورت خودکار به‌روز شده است و شامل بدنه تعریف شده در مرحله قبل است:

List:
روی دکمه "Try it out" کلیک کنید، اکنون می‌توانید پارامترهای مورد نیاز هر API را مشخص کرده و به صورت مستقیم با آنها تعامل کنید:

List:
سپس روی دکمه "Execute" کلیک کنید، خواهید دید که واسط کاربری با APIهای تعریف شده ارتباط برقرار کرده، پارامترهای مورد نیاز را به آن‌ها ارسال می‌کند، سپس نتایج را دریافت کرده و در صفحه نشان می‌دهد:

================================================================================

# FastAPI - تغییر مستندات API جایگزین

حال به آدرس http://127.0.0.1:8000/redoc بروید.

List:
خواهید دید که مستندات جایگزین نیز به‌روزرسانی شده و شامل پارامتر پرسمان و بدنه تعریف شده می‌باشد:

================================================================================

# FastAPI - خلاصه (Part 1)

به طور خلاصه شما  انواع پارامترها، بدنه و غیره را به عنوان پارامترهای ورودی تابع خود تعریف می‌کنید.

این کار را با استفاده از انواع استاندارد و مدرن موجود در پایتون انجام می‌دهید.

نیازی به یادگیری  جدید یا متدها و کلاس‌های یک کتابخانه بخصوص و غیره نیست.

به عنوان مثال برای یک پارامتر از نوع :

یا برای یک مدل پیچیده‌تر مثل :

...و با همین اعلان تمامی قابلیت‌های زیر در دسترس قرار می‌گیرد:

List:
پشتیبانی ویرایشگر متنی شامل:

بررسی انواع داده.


اعتبارسنجی داده:
خطاهای خودکار و مشخص در هنگام نامعتبر بودن داده.
اعتبارسنجی، حتی برای اشیاء JSON تو در تو.


 داده ورودی: که از شبکه رسیده به انواع و داد‌ه‌ پایتونی. این داده‌ شامل:

پارامترهای مسیر.
پارامترهای پرسمان.
.
سرآیند‌ها (هدرها).
.
.


 داده خروجی: تبدیل از انواع و داده‌ پایتون به داده شبکه  (مانند JSON):
تبدیل انواع داده پایتونی (, , , ,  و غیره).
اشیاء .
اشیاء .
qمدل‌های پایگاه‌داده.
و موارد بیشمار دیگر.


دو مدل مستند API تعاملی خودکار :
Swagger UI.

List:
خطاهای خودکار و مشخص در هنگام نامعتبر بودن داده.
اعتبارسنجی، حتی برای اشیاء JSON تو در تو.

List:
پارامترهای مسیر.
پارامترهای پرسمان.
.
سرآیند‌ها (هدرها).
.
.

List:
تبدیل انواع داده پایتونی (, , , ,  و غیره).
اشیاء .
اشیاء .
qمدل‌های پایگاه‌داده.
و موارد بیشمار دیگر.

================================================================================

# FastAPI - خلاصه (Part 2)

به مثال قبلی باز می‌گردیم، در این مثال  موارد زیر را انجام می‌دهد:

List:
اعتبارسنجی اینکه پارامتر  در مسیر درخواست‌های  و  موجود است.
اعتبارسنجی اینکه پارامتر  در درخواست‌های  و  از نوع  است.
اگر غیر از این موارد باشد، سرویس‌گیرنده خطای مفید و مشخصی دریافت خواهد کرد.


بررسی وجود پارامتر پرسمان اختیاری  (مانند http://127.0.0.1:8000/items/foo?q=somequery) در درخواست‌های .
از آنجا که پارامتر  با   مقداردهی شده است، این پارامتر اختیاری است.
اگر از مقدار اولیه  استفاده نکنیم، این پارامتر الزامی خواهد بود (همانند بدنه درخواست در درخواست ).


برای درخواست‌های  به آدرس /items/{item_id}، بدنه درخواست باید از نوع JSON تعریف شده باشد:
بررسی اینکه بدنه شامل فیلدی با نام  و از نوع  است.
بررسی اینکه بدنه شامل فیلدی با نام  و از نوع  است.
بررسی اینکه بدنه شامل فیلدی اختیاری با نام  است، که در صورت وجود باید از نوع  باشد.
تمامی این موارد برای اشیاء JSON در هر عمقی قابل بررسی می‌باشد.


تبدیل از/به JSON به صورت خودکار.
مستندسازی همه چیز با استفاده از OpenAPI، که می‌توان از آن برای موارد زیر استفاده کرد:
سیستم مستندات تعاملی.
تولید خودکار کد سرویس‌گیرنده‌ در زبان‌های برنامه‌نویسی بیشمار.


فراهم سازی ۲ مستند تعاملی مبتنی بر وب به صورت پیش‌فرض.

================================================================================

# FastAPI - خلاصه (Part 3)

List:
اگر غیر از این موارد باشد، سرویس‌گیرنده خطای مفید و مشخصی دریافت خواهد کرد.

List:
از آنجا که پارامتر  با   مقداردهی شده است، این پارامتر اختیاری است.
اگر از مقدار اولیه  استفاده نکنیم، این پارامتر الزامی خواهد بود (همانند بدنه درخواست در درخواست ).

List:
بررسی اینکه بدنه شامل فیلدی با نام  و از نوع  است.
بررسی اینکه بدنه شامل فیلدی با نام  و از نوع  است.
بررسی اینکه بدنه شامل فیلدی اختیاری با نام  است، که در صورت وجود باید از نوع  باشد.
تمامی این موارد برای اشیاء JSON در هر عمقی قابل بررسی می‌باشد.

List:
سیستم مستندات تعاملی.
تولید خودکار کد سرویس‌گیرنده‌ در زبان‌های برنامه‌نویسی بیشمار.

موارد ذکر شده تنها پاره‌ای از ویژگی‌های بیشمار FastAPI است اما ایده‌ای کلی از طرز کار آن در اختیار قرار می‌دهد.

خط زیر را به این صورت تغییر دهید:

در حین تایپ کردن توجه کنید که چگونه ویرایش‌گر، ویژگی‌های کلاس   را تشخیص داده و به تکمیل خودکار آنها کمک می‌کند:

برای مشاهده مثال‌های کامل‌تر که شامل قابلیت‌های بیشتری از FastAPI باشد به بخش آموزش - راهنمای کاربر مراجعه کنید.

هشدار اسپویل: بخش آموزش - راهنمای کاربر شامل موارد زیر است:

================================================================================

# FastAPI - خلاصه (Part 4)

List:
اعلان پارامترهای موجود در بخش‌های دیگر درخواست، شامل: سرآیند‌ (هدر)ها، ، فیلد‌های فرم و .
چگونگی تنظیم محدودیت‌های اعتبارسنجی به عنوان مثال maximum_length یا .
سیستم Dependency Injection قوی و کاربردی.
امنیت و تایید هویت, شامل پشتیبانی از  مبتنی بر JWT tokens و HTTP Basic.
تکنیک پیشرفته برای تعریف مدل‌های چند سطحی JSON (بر اساس Pydantic).
قابلیت‌های اضافی دیگر (بر اساس Starlette) شامل:


تست‌های خودکار آسان مبتنی بر HTTPX و 

Cookie Sessions
و موارد بیشمار دیگر.

List:
تست‌های خودکار آسان مبتنی بر HTTPX و 

Cookie Sessions
و موارد بیشمار دیگر.

================================================================================

# FastAPI - کارایی

معیار (بنچمارک‌)های مستقل TechEmpower حاکی از آن است که برنامه‌های  که تحت Uvicorn اجرا می‌شود، یکی از سریع‌ترین فریم‌ورک‌های مبتنی بر پایتون، است که کمی ضعیف‌تر از Starlette و Uvicorn عمل می‌کند (فریم‌ورک و سروری که FastAPI بر اساس آنها ایجاد شده است) (*)

برای درک بهتری از این موضوع به بخش بنچ‌مارک‌ها مراجعه کنید.

================================================================================

# FastAPI - نیازمندی‌های اختیاری

استفاده شده توسط Pydantic:

List:
email-validator - برای اعتبارسنجی آدرس‌های ایمیل.

استفاده شده توسط Starlette:

List:
- در صورتی که می‌خواهید از TestClient استفاده کنید.
 - در صورتی که می‌خواهید از FileResponse و StaticFiles استفاده کنید.
 - در صورتی که بخواهید از پیکربندی پیش‌فرض برای قالب‌ها استفاده کنید.
python-multipart - در صورتی که بخواهید با استفاده از request.form() از قابلیت "تجزیه (parse)" فرم استفاده کنید.
itsdangerous - در صورتی که بخواید از SessionMiddleware پشتیبانی کنید.
 - برای پشتیبانی SchemaGenerator در Starlet (به احتمال زیاد برای کار کردن با FastAPI به آن نیازی پیدا نمی‌کنید).
 - در صورتی که از  GraphQLApp پشتیبانی می‌کنید.

استفاده شده توسط FastAPI / Starlette:

List:
- برای سرور اجرا کننده برنامه وب.
 - در صورتی که بخواهید از ORJSONResponse استفاده کنید.
 - در صورتی که بخواهید از UJSONResponse استفاده کنید.

می‌توان همه این موارد را با استفاده از دستور pip install fastapi[all]. به صورت یکجا نصب کرد.

================================================================================

# FastAPI - لایسنس

این پروژه مشمول قوانین و مقررات لایسنس MIT است.

================================================================================

# FastAPI (Part 1)

Framework FastAPI, haute performance, facile à apprendre, rapide à coder, prêt pour la production

Documentation : https://fastapi.tiangolo.com

Code Source : https://github.com/fastapi/fastapi

FastAPI est un framework web moderne et rapide (haute performance) pour la création d'API avec Python, basé sur les annotations de type standard de Python.

Les principales fonctionnalités sont :

================================================================================

# FastAPI (Part 2)

List:
: De très hautes performances, au niveau de  et  (grâce à Starlette et Pydantic). L'un des frameworks Python les plus rapides.
Rapide à coder : Augmente la vitesse de développement des fonctionnalités d'environ 200 % à 300 %. *
Moins de bugs : Réduit d'environ 40 % les erreurs induites par le développeur. *
 : Excellente compatibilité avec les IDE. Complétion complète. Moins de temps passé à déboguer.
 : Conçu pour être facile à utiliser et à apprendre. Moins de temps passé à lire la documentation.
 : Diminue la duplication de code. De nombreuses fonctionnalités liées à la déclaration de chaque paramètre. Moins de bugs.
 : Obtenez un code prêt pour la production. Avec une documentation interactive automatique.
Basé sur des normes : Basé sur (et entièrement compatible avec) les standards ouverts pour les APIs :  (précédemment connu sous le nom de Swagger) et JSON Schema.

* estimation basée sur des tests d'une équipe de développement interne, construisant des applications de production.

================================================================================

# FastAPI - Opinions (Part 1)

"[...] J'utilise beaucoup  ces derniers temps. [...] Je prévois de l'utiliser dans mon équipe pour tous les services de ML chez Microsoft. Certains d'entre eux seront intégrés dans le coeur de  et dans certains produits ."

"Nous avons adopté la bibliothèque  pour créer un serveur  qui peut être interrogé pour obtenir des prédictions. [pour Ludwig]"

" a le plaisir d'annoncer la sortie en open-source de notre framework d'orchestration de gestion de crise :  ! [construit avec ]"

"Je suis très enthousiaste à propos de . C'est un bonheur !"

"Honnêtement, ce que vous avez construit a l'air super solide et élégant. A bien des égards, c'est comme ça que je voulais que  soit - c'est vraiment inspirant de voir quelqu'un construire ça."

"Si vous cherchez à apprendre un framework moderne pour créer des APIs REST, regardez  [...] C'est rapide, facile à utiliser et à apprendre [...]"

"Nous sommes passés à  pour nos  [...] Je pense que vous l'aimerez [...]"

================================================================================

# FastAPI - Opinions (Part 2)

"Si quelqu'un cherche à construire une API Python de production, je recommande vivement . Il est bien conçu, simple à utiliser et très évolutif. Il est devenu un composant clé dans notre stratégie de développement API first et il est à l'origine de nombreux automatismes et services tels que notre ingénieur virtuel TAC."

================================================================================

# FastAPI - , le FastAPI des

Si vous souhaitez construire une application  utilisable dans un terminal au lieu d'une API web, regardez .

est le petit frère de FastAPI. Et il est destiné à être le FastAPI des . ⌨️ 🚀

================================================================================

# FastAPI - Prérequis

FastAPI repose sur les épaules de géants :

List:
pour les parties web.
 pour les parties données.

================================================================================

# FastAPI - Installation

Vous aurez également besoin d'un serveur ASGI pour la production tel que  ou .

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - Créez

List:
Créez un fichier  avec :

Si votre code utilise  / , utilisez  :

Si vous n'êtes pas familier avec cette notion, consultez la section "Vous êtes pressés ?" à propos de  et  dans la documentation.

================================================================================

# FastAPI - Lancez

Lancez le serveur avec :

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

La commande uvicorn main:app fait référence à :

List:
: le fichier  (le "module" Python).
 : l'objet créé à l'intérieur de  avec la ligne app = FastAPI().
 : fait redémarrer le serveur après des changements de code. À n'utiliser que pour le développement.

================================================================================

# FastAPI - Vérifiez

Ouvrez votre navigateur à l'adresse http://127.0.0.1:8000/items/5?q=somequery.

Vous obtenez alors cette réponse  :

Vous venez de créer une API qui :

List:
Reçoit les requêtes HTTP pour les   et /items/{item_id}.
Les deux  acceptent des opérations  (également connu sous le nom de  HTTP).
Le  /items/{item_id} a un    qui doit être un .
Le  /items/{item_id} a un paramètre de requête optionnel  de type .

================================================================================

# FastAPI - Documentation API interactive

Maintenant, rendez-vous sur http://127.0.0.1:8000/docs.

Vous verrez la documentation interactive automatique de l'API (fournie par Swagger UI) :

================================================================================

# FastAPI - Documentation API alternative

Et maintenant, rendez-vous sur http://127.0.0.1:8000/redoc.

Vous verrez la documentation interactive automatique de l'API (fournie par ) :

================================================================================

# FastAPI - Exemple plus poussé

Maintenant, modifiez le fichier  pour recevoir  d'une requête .

Déclarez ce corps en utilisant les types Python standards, grâce à Pydantic.

Code example:
update_item   
     "item_name"

Le serveur se recharge normalement automatiquement (car vous avez pensé à  dans la commande  ci-dessus).

================================================================================

# FastAPI - Plus loin avec la documentation API interactive

Maintenant, rendez-vous sur http://127.0.0.1:8000/docs.

List:
La documentation interactive de l'API sera automatiquement mise à jour, y compris le nouveau corps de la requête :

List:
Cliquez sur le bouton "Try it out", il vous permet de renseigner les paramètres et d'interagir directement avec l'API :

List:
Cliquez ensuite sur le bouton "Execute", l'interface utilisateur communiquera avec votre API, enverra les paramètres, obtiendra les résultats et les affichera à l'écran :

================================================================================

# FastAPI - Plus loin avec la documentation API alternative

Et maintenant, rendez-vous sur http://127.0.0.1:8000/redoc.

List:
La documentation alternative reflétera également le nouveau paramètre de requête et le nouveau corps :

================================================================================

# FastAPI - En résumé (Part 1)

En résumé, vous déclarez  les types de paramètres,   de la requête, etc. en tant que paramètres de fonction.

Vous faites cela avec les types Python standard modernes.

Vous n'avez pas à apprendre une nouvelle syntaxe, les méthodes ou les classes d'une bibliothèque spécifique, etc.

Par exemple, pour un :

ou pour un modèle  plus complexe :

... et avec cette déclaration unique, vous obtenez :

List:
Une assistance dans votre IDE, notamment :
la complétion.
la vérification des types.


La validation des données :
des erreurs automatiques et claires lorsque les données ne sont pas valides.
une validation même pour les objets  profondément imbriqués.


Une conversion des données d'entrée : venant du réseau et allant vers les données et types de Python, permettant de lire :
le .
les paramètres du chemin.
les paramètres de la requête.
les cookies.
les en-têtes.
les formulaires.
les fichiers.


La conversion des données de sortie : conversion des données et types Python en données réseau (au format ), permettant de convertir :
les types Python (, , , , , etc).
les objets .
les objets .
les modèles de base de données.
... et beaucoup plus.

================================================================================

# FastAPI - En résumé (Part 2)


La documentation API interactive automatique, avec 2 interfaces utilisateur au choix :
Swagger UI.

List:
la complétion.
la vérification des types.

List:
des erreurs automatiques et claires lorsque les données ne sont pas valides.
une validation même pour les objets  profondément imbriqués.

List:
le .
les paramètres du chemin.
les paramètres de la requête.
les cookies.
les en-têtes.
les formulaires.
les fichiers.

List:
les types Python (, , , , , etc).
les objets .
les objets .
les modèles de base de données.
... et beaucoup plus.

Pour revenir à l'exemple de code précédent,  permet de :

List:
Valider que  existe dans le chemin des requêtes  et .
Valider que  est de type  pour les requêtes  et .
Si ce n'est pas le cas, le client voit une erreur utile et claire.


Vérifier qu'il existe un paramètre de requête facultatif nommé  (comme dans http://127.0.0.1:8000/items/foo?q=somequery) pour les requêtes .
Puisque le paramètre  est déclaré avec , il est facultatif.
Sans le , il serait nécessaire (comme l'est  de la requête dans le cas du ).

================================================================================

# FastAPI - En résumé (Part 3)


Pour les requêtes  vers /items/{item_id}, de lire   en  :
Vérifier qu'il a un attribut obligatoire  qui devrait être un .
Vérifier qu'il a un attribut obligatoire  qui doit être un .
Vérifier qu'il a un attribut facultatif , qui devrait être un , s'il est présent.
Tout cela fonctionnerait également pour les objets  profondément imbriqués.


Convertir de et vers  automatiquement.
Documenter tout avec OpenAPI, qui peut être utilisé par :
Les systèmes de documentation interactifs.
Les systèmes de génération automatique de code client, pour de nombreuses langues.


Fournir directement 2 interfaces web de documentation interactive.

List:
Si ce n'est pas le cas, le client voit une erreur utile et claire.

List:
Puisque le paramètre  est déclaré avec , il est facultatif.
Sans le , il serait nécessaire (comme l'est  de la requête dans le cas du ).

List:
Vérifier qu'il a un attribut obligatoire  qui devrait être un .
Vérifier qu'il a un attribut obligatoire  qui doit être un .
Vérifier qu'il a un attribut facultatif , qui devrait être un , s'il est présent.
Tout cela fonctionnerait également pour les objets  profondément imbriqués.

================================================================================

# FastAPI - En résumé (Part 4)

List:
Les systèmes de documentation interactifs.
Les systèmes de génération automatique de code client, pour de nombreuses langues.

Nous n'avons fait qu'effleurer la surface, mais vous avez déjà une idée de la façon dont tout cela fonctionne.

Essayez de changer la ligne contenant :

... et voyez comment votre éditeur complétera automatiquement les attributs et connaîtra leurs types :

Pour un exemple plus complet comprenant plus de fonctionnalités, voir le Tutoriel - Guide utilisateur.

Spoiler alert : le tutoriel - guide utilisateur inclut :

================================================================================

# FastAPI - En résumé (Part 5)

List:
Déclaration de paramètres provenant d'autres endroits différents comme : ., , champs de formulaire et .
L'utilisation de contraintes de validation comme maximum_length ou .
Un système d'injection de dépendance  très puissant et facile à utiliser .
Sécurité et authentification, y compris la prise en charge de  avec les jetons  et l'authentification HTTP Basic.
Des techniques plus avancées (mais tout aussi faciles) pour déclarer les modèles  profondément imbriqués (grâce à Pydantic).
Intégration de  avec Strawberry et d'autres bibliothèques.
D'obtenir de nombreuses fonctionnalités supplémentaires (grâce à  Starlette) comme :
WebSockets
de tester le code très facilement avec  et 

Cookie Sessions
... et plus encore.

List:
WebSockets
de tester le code très facilement avec  et 

Cookie Sessions
... et plus encore.

================================================================================

# FastAPI - Performance

Les benchmarks TechEmpower indépendants montrent que les applications  s'exécutant sous Uvicorn sont  parmi les frameworks existants en Python les plus rapides , juste derrière Starlette et Uvicorn (utilisés en interne par FastAPI). (*)

Pour en savoir plus, consultez la section Benchmarks.

================================================================================

# FastAPI - Dépendances facultatives

Utilisées par Pydantic:

List:
email-validator - pour la validation des adresses email.

Utilisées par Starlette :

List:
- Obligatoire si vous souhaitez utiliser TestClient.
 - Obligatoire si vous souhaitez utiliser la configuration de template par défaut.
python-multipart - Obligatoire si vous souhaitez supporter le "décodage" de formulaire avec request.form().
itsdangerous - Obligatoire pour la prise en charge de SessionMiddleware.
 - Obligatoire pour le support SchemaGenerator de Starlette (vous n'en avez probablement pas besoin avec FastAPI).

Utilisées par FastAPI / Starlette :

List:
- Pour le serveur qui charge et sert votre application.
 - Obligatoire si vous voulez utiliser ORJSONResponse.
 - Obligatoire si vous souhaitez utiliser UJSONResponse.

Vous pouvez tout installer avec pip install fastapi[all].

================================================================================

# FastAPI - Licence

Ce projet est soumis aux termes de la licence MIT.

================================================================================

# FastAPI

תשתית FastAPI, ביצועים גבוהים, קלה ללמידה, מהירה לתכנות, מוכנה לסביבת ייצור

: https://fastapi.tiangolo.com

: https://github.com/fastapi/fastapi

FastAPI היא תשתית רשת מודרנית ומהירה (ביצועים גבוהים) לבניית ממשקי תכנות יישומים (API) עם פייתון 3.6+ בהתבסס על רמזי טיפוסים סטנדרטיים.

List:
: ביצועים גבוהים מאוד, בקנה אחד עם NodeJS ו - Go (תודות ל - Starlette ו - Pydantic). אחת מתשתיות הפייתון המהירות ביותר.


מהירה לתכנות: הגבירו את מהירות פיתוח התכונות החדשות בכ - %200 עד %300. *

פחות שגיאות: מנעו כ - %40 משגיאות אנוש (מפתחים). *
אינטואיטיבית: תמיכת עורך מעולה.  בכל מקום. פחות זמן ניפוי שגיאות.
: מתוכננת להיות קלה לשימוש וללמידה. פחות זמן קריאת תיעוד.
: מזערו שכפול קוד. מספר תכונות מכל הכרזת פרמטר. פחות שגיאות.
: קבלו קוד מוכן לסביבת ייצור. עם תיעוד אינטרקטיבי אוטומטי.
מבוססת סטנדרטים: מבוססת על (ותואמת לחלוטין ל -) הסטדנרטים הפתוחים לממשקי תכנות יישומים:  (ידועים לשעבר כ - Swagger) ו - JSON Schema.

: ביצועים גבוהים מאוד, בקנה אחד עם NodeJS ו - Go (תודות ל - Starlette ו - Pydantic). אחת מתשתיות הפייתון המהירות ביותר.

מהירה לתכנות: הגבירו את מהירות פיתוח התכונות החדשות בכ - %200 עד %300. *

* הערכה מבוססת על בדיקות של צוות פיתוח פנימי שבונה אפליקציות בסביבת ייצור.

================================================================================

# FastAPI - דעות

"[...] I'm using  a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft. Some of them are getting integrated into the core  product and some  products."

"We adopted the  library to spawn a  server that can be queried to obtain predictions. [for Ludwig]"

" is pleased to announce the open-source release of our crisis management orchestration framework: ! [built with ]"

"I’m over the moon excited about . It’s so fun!"

"Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted  to be - it's really inspiring to see someone build that."

"If you're looking to learn one modern framework for building REST APIs, check out  [...] It's fast, easy to use and easy to learn [...]"

"We've switched over to  for our  [...] I think you'll like it [...]"

================================================================================

# FastAPI - , ה - FastAPI של ממשקי שורת פקודה (CLI).

אם אתם בונים אפליקציית  לשימוש במסוף במקום ממשק רשת, העיפו מבט על .

היא אחותה הקטנה של FastAPI. ומטרתה היא להיות ה - FastAPI של ממשקי שורת פקודה. ⌨️ 🚀

================================================================================

# FastAPI - תלויות

FastAPI עומדת על כתפי ענקיות:

List:
לחלקי הרשת.
 לחלקי המידע.

================================================================================

# FastAPI - התקנה

תצטרכו גם שרת ASGI כגון  או .

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - צרו אותה

אם הקוד שלכם משתמש ב -  / , השתמשו ב - :

אם אינכם יודעים, בדקו את פרק "ממהרים?" על  ו -  בתיעוד.

================================================================================

# FastAPI - הריצו אותה

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

הפקודה uvicorn main:app מתייחסת ל:

List:
: הקובץ  (מודול פייתון).
: האובייקט שנוצר בתוך  עם השורה app = FastAPI().
: גרמו לשרת להתאתחל לאחר שינויים בקוד. עשו זאת רק בסביבת פיתוח.

================================================================================

# FastAPI - בדקו אותה

פתחו את הדפדפן שלכם בכתובת http://127.0.0.1:8000/items/5?q=somequery.

List:
מקבל בקשות HTTP בנתיבים  ו - /items/{item_id}.
שני ה  מקבלים   (ידועות גם כ HTTP).
ה  /items/{item_id} כולל *פרמטר נתיב_  שאמור להיות .
ה  /items/{item_id} *פרמטר שאילתא_ אופציונלי .

================================================================================

# FastAPI - תיעוד API אינטרקטיבי

כעת פנו לכתובת http://127.0.0.1:8000/docs.

אתם תראו את התיעוד האוטומטי (מסופק על ידי Swagger UI):

================================================================================

# FastAPI - תיעוד אלטרנטיבי

כעת פנו לכתובת http://127.0.0.1:8000/redoc.

אתם תראו תיעוד אלטרנטיבי (מסופק על ידי ):

================================================================================

# FastAPI - שדרוג לדוגמא

כעת ערכו את הקובץ  כך שיוכל לקבל גוף מבקשת .

הגדירו את הגוף בעזרת רמזי טיפוסים סטנדרטיים, הודות ל - .

Code example:
update_item   
     "item_name"

השרת אמול להתאתחל אוטומטית (מאחר והוספתם  לפקודת  שלמעלה).

================================================================================

# FastAPI - שדרוג התיעוד האינטרקטיבי

כעת פנו לכתובת http://127.0.0.1:8000/docs.

List:
התיעוד האוטומטי יתעדכן, כולל הגוף החדש:

List:
לחצו על הכפתור "Try it out", הוא יאפשר לכם למלא את הפרמטרים ולעבוד ישירות מול ה - API.

List:
אחר כך לחצו על הכפתור "Execute", האתר יתקשר עם ה - API שלכם, ישלח את הפרמטרים, ישיג את התוצאות ואז יראה אותן על המסך:

================================================================================

# FastAPI - שדרוג התיעוד האלטרנטיבי

כעת פנו לכתובת http://127.0.0.1:8000/redoc.

List:
התיעוד האלטרנטיבי גם יראה את פרמטר השאילתא והגוף החדשים.

================================================================================

# FastAPI - סיכום (Part 1)

לסיכום, אתם מכריזים ** פעם אחת** על טיפוסי הפרמטרים, גוף וכו' כפרמטרים לפונקציה.

אתם עושים את זה עם טיפוסי פייתון מודרניים.

אתם לא צריכים ללמוד תחביר חדש, מתודות או מחלקות של ספרייה ספיציפית, וכו'

רק פייתון 3.6+ סטנדרטי.

או למודל  מורכב יותר:

...ועם הכרזת הטיפוס האחת הזו אתם מקבלים:

List:
תמיכת עורך, כולל:

בדיקת טיפוסים.


אימות מידע:
שגיאות ברורות ואטומטיות כאשר מוכנס מידע לא חוקי .
אימות אפילו לאובייקטי JSON מקוננים.


 של מידע קלט: המרה של מידע שמגיע מהרשת למידע וטיפוסים של פייתון. קורא מ:

פרמטרי נתיב.
פרמטרי שאילתא.






 של מידע פלט: המרה של מידע וטיפוסים מפייתון למידע רשת (כ - JSON):
המירו טיפוסי פייתון (, , , , , etc).
עצמי .
עצמי .
מודלי בסיסי נתונים.
...ורבים אחרים.


תיעוד API אוטומטי ואינטרקטיבית כולל שתי אלטרנטיבות לממשק המשתמש:
Swagger UI.

List:
שגיאות ברורות ואטומטיות כאשר מוכנס מידע לא חוקי .
אימות אפילו לאובייקטי JSON מקוננים.

List:
פרמטרי נתיב.
פרמטרי שאילתא.

List:
המירו טיפוסי פייתון (, , , , , etc).
עצמי .
עצמי .
מודלי בסיסי נתונים.
...ורבים אחרים.

בחזרה לדוגמאת הקוד הקודמת,  ידאג:

List:
לאמת שיש  בנתיב בבקשות  ו - .
לאמת שה -  הוא מטיפוס  בבקשות  ו - .
אם הוא לא, הלקוח יראה שגיאה ברורה ושימושית.

================================================================================

# FastAPI - סיכום (Part 2)


לבדוק האם קיים פרמטר שאילתא בשם  (קרי http://127.0.0.1:8000/items/foo?q=somequery) לבקשות .
מאחר והפרמטר  מוגדר עם , הוא אופציונלי.
לולא ה -  הוא היה חובה (כמו הגוף במקרה של ).


לבקשות  לנתיב /items/{item_id}, לקרוא את גוף הבקשה כ - JSON:
לאמת שהוא כולל את מאפיין החובה  שאמור להיות מטיפוס .
לאמת שהוא כולל את מאפיין החובה  שחייב להיות מטיפוס .
לבדוק האם הוא כולל את מאפיין הרשות  שאמור להיות מטיפוס , אם הוא נמצא.
כל זה יעבוד גם לאובייקט JSON מקונן.


להמיר מ - JSON ול- JSON אוטומטית.
לתעד הכל באמצעות OpenAPI, תיעוד שבו יוכלו להשתמש:
מערכות תיעוד אינטרקטיביות.
מערכות ייצור קוד אוטומטיות, להרבה שפות.


לספק ישירות שתי מערכות תיעוד רשתיות.

List:
אם הוא לא, הלקוח יראה שגיאה ברורה ושימושית.

List:
מאחר והפרמטר  מוגדר עם , הוא אופציונלי.
לולא ה -  הוא היה חובה (כמו הגוף במקרה של ).

List:
לאמת שהוא כולל את מאפיין החובה  שאמור להיות מטיפוס .
לאמת שהוא כולל את מאפיין החובה  שחייב להיות מטיפוס .
לבדוק האם הוא כולל את מאפיין הרשות  שאמור להיות מטיפוס , אם הוא נמצא.
כל זה יעבוד גם לאובייקט JSON מקונן.

List:
מערכות תיעוד אינטרקטיביות.
מערכות ייצור קוד אוטומטיות, להרבה שפות.

רק גרדנו את קצה הקרחון, אבל כבר יש לכם רעיון של איך הכל עובד.

...וראו איך העורך שלכם משלים את המאפיינים ויודע את הטיפוסים שלהם:

================================================================================

# FastAPI - סיכום (Part 3)

לדוגמא יותר שלמה שכוללת עוד תכונות, ראו את המדריך - למשתמש.

התראת ספוילרים: המדריך - למשתמש כולל:

List:
הכרזה על  ממקורות אחרים ושונים כגון: , ,  ו - .
איך לקבוע מגבלות אימות בעזרת maximum_length או .
דרך חזקה וקלה להשתמש בהזרקת תלויות.
אבטחה והתאמתות, כולל תמיכה ב -  עם  והתאמתות HTTP Basic.
טכניקות מתקדמות (אבל קלות באותה מידה) להכרזת אובייקטי JSON מקוננים (תודות ל - Pydantic).
אינטרקציה עם  דרך Strawberry וספריות אחרות.
תכונות נוספות רבות (תודות ל - Starlette) כגון:
WebSockets
בדיקות קלות במיוחד מבוססות על  ו - 

Cookie Sessions

List:
WebSockets
בדיקות קלות במיוחד מבוססות על  ו - 

Cookie Sessions

================================================================================

# FastAPI - ביצועים

בדיקות עצמאיות של TechEmpower הראו שאפליקציות  שרצות תחת Uvicorn הן מתשתיות הפייתון המהירות ביותר, רק מתחת ל - Starlette ו - Uvicorn עצמן (ש - FastAPI מבוססת עליהן). (*)

כדי להבין עוד על הנושא, ראו את הפרק Benchmarks.

================================================================================

# FastAPI - תלויות אופציונליות

List:
email-validator - לאימות כתובות אימייל.

List:
- דרוש אם ברצונכם להשתמש ב - TestClient.
 - דרוש אם ברצונכם להשתמש בברירת המחדל של תצורת הטמפלייטים.
python-multipart - דרוש אם ברצונכם לתמוך ב  טפסים, באצמעות request.form().
itsdangerous - דרוש אם ברצונכם להשתמש ב - SessionMiddleware.
 - דרוש אם ברצונכם להשתמש ב - SchemaGenerator של Starlette (כנראה שאתם לא צריכים את זה עם FastAPI).

בשימוש FastAPI / Starlette:

List:
- לשרת שטוען ומגיש את האפליקציה שלכם.
 - דרוש אם ברצונכם להשתמש ב - ORJSONResponse.
 - דרוש אם ברצונכם להשתמש ב - UJSONResponse.

תוכלו להתקין את כל אלו באמצעות pip install "fastapi[all]".

================================================================================

# FastAPI - רשיון

הפרויקט הזה הוא תחת התנאים של רשיון MIT.

================================================================================

# FastAPI (Part 1)

FastAPI keretrendszer, nagy teljesítmény, könnyen tanulható, gyorsan kódolható, productionre kész

Dokumentáció: https://fastapi.tiangolo.com

Forrás kód: https://github.com/fastapi/fastapi

A FastAPI egy modern, gyors (nagy teljesítményű), webes keretrendszer API-ok építéséhez Python -al, a Python szabványos típusjelöléseire építve.

List:
: Nagyon nagy teljesítmény, a -el és a -val egyenrangú (a Starlettenek és a Pydantic-nek köszönhetően). Az egyik leggyorsabb Python keretrendszer.
Gyorsan kódolható: A funkciók fejlesztési sebességét 200-300 százalékkal megnöveli. *
Kevesebb hiba: Körülbelül 40%-al csökkenti az emberi (fejlesztői) hibák számát. *
: Kiváló szerkesztő támogatás. Kiegészítés mindenhol. Kevesebb hibakereséssel töltött idő.
: Egyszerű tanulásra és használatra tervezve. Kevesebb dokumentáció olvasással töltött idő.
: Kód duplikáció minimalizálása. Több funkció minden paraméter deklarálásával. Kevesebb hiba.
: Production ready kód. Automatikus interaktív dokumentáció val.
Szabvány alapú: Az API-ok nyílt szabványaira alapuló (és azokkal teljesen kompatibilis):  (korábban Swagger néven ismert) és a JSON Schema.

================================================================================

# FastAPI (Part 2)

* Egy production alkalmazásokat építő belső fejlesztői csapat tesztjein alapuló becslés.

================================================================================

# FastAPI - Vélemények

"[...] I'm using  a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft. Some of them are getting integrated into the core  product and some  products."

"We adopted the  library to spawn a  server that can be queried to obtain predictions. [for Ludwig]"

" is pleased to announce the open-source release of our crisis management orchestration framework: ! [built with ]"

"I’m over the moon excited about . It’s so fun!"

"Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted  to be - it's really inspiring to see someone build that."

"If you're looking to learn one modern framework for building REST APIs, check out  [...] It's fast, easy to use and easy to learn [...]"

"We've switched over to  for our  [...] I think you'll like it [...]"

"If anyone is looking to build a production Python API, I would highly recommend . It is beautifully designed, simple to use and highly scalable, it has become a key component in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer."

================================================================================

# FastAPI - , a CLI-ok FastAPI-ja

Ha egy olyan CLI alkalmazást fejlesztesz amit a parancssorban kell használni webes API helyett, tekintsd meg: .

a FastAPI kistestvére. A CLI-k FastAPI-ja. ⌨️ 🚀

================================================================================

# FastAPI - Követelmények

A FastAPI óriások vállán áll:

List:
a webes részekhez.
 az adat részekhez.

================================================================================

# FastAPI - Telepítés

A production-höz egy ASGI szerverre is szükség lesz, mint például az  vagy a .

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - Hozd létre

List:
Hozz létre a  fájlt a következő tartalommal:

Ha a kódod  / -et, használ :

Ha nem tudod, tekintsd meg a  szekciót  és -ről dokumentációba.

================================================================================

# FastAPI - Futtasd le

Indítsd el a szervert a következő paranccsal:

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

A uvicorn main:app parancs a következőre utal:

List:
: fájl  (a Python "modul").
: a -ban a app = FastAPI() sorral létrehozott objektum.
: kód változtatás esetén újra indítja a szervert. Csak fejlesztés közben használandó.

================================================================================

# FastAPI - Ellenőrizd

Nyisd meg a böngésződ a következő címen: http://127.0.0.1:8000/items/5?q=somequery.

A következő JSON választ fogod látni:

Máris létrehoztál egy API-t ami:

List:
HTTP kéréseket fogad a   és /items/{item_id} útvonalakon.
Mindkét  a   használja (másik elnevezés: HTTP ).
A /items/{item_id} útvonalnak van egy path paramétere, az , aminek  típusúnak kell lennie.
A /items/{item_id} útvonalnak még van egy opcionális,  típusú query paramétere is, a .

================================================================================

# FastAPI - Interaktív API dokumentáció

Most nyisd meg a http://127.0.0.1:8000/docs címet.

Az automatikus interaktív API dokumentációt fogod látni (amit a Swagger UI-al hozunk létre):

================================================================================

# FastAPI - Alternatív API dokumentáció

És most menj el a http://127.0.0.1:8000/redoc címre.

Az alternatív automatikus dokumentációt fogod látni. (lásd ):

================================================================================

# FastAPI - Példa frissítése

Módosítsuk a  fájlt, hogy  kérések esetén tudjon body-t fogadni.

Deklaráld a body-t standard Python típusokkal, a Pydantic-nak köszönhetően.

Code example:
update_item   
     "item_name"

A szerver automatikusan újraindul (mert hozzáadtuk a --reload paramétert a fenti  parancshoz).

================================================================================

# FastAPI - Interaktív API dokumentáció frissítése

Most menj el a http://127.0.0.1:8000/docs címre.

List:
Az interaktív API dokumentáció automatikusan frissült így már benne van az új body.

List:
Kattints rá a "Try it out" gombra, ennek segítségével kitöltheted a paramétereket és közvetlen használhatod az API-t:

List:
Ezután kattints az "Execute" gompra, a felhasználói felület kommunikálni fog az API-oddal. Elküldi a paramétereket és a visszakapott választ megmutatja a képernyődön.

================================================================================

# FastAPI - Alternatív API dokumentáció frissítés

Most menj el a http://127.0.0.1:8000/redoc címre.

List:
Az alternatív dokumentáció szintúgy tükrözni fogja az új kérési paraméter és body-t.

================================================================================

# FastAPI - Összefoglalás (Part 1)

Összegzésül, deklarálod  a paraméterek, body, stb típusát funkciós paraméterekként.

Ezt standard modern Python típusokkal csinálod.

Nem kell új szintaxist, vagy specifikus könyvtár mert metódósait, stb. megtanulnod.

Egy komplexebb  modellnek:

... És csupán egy deklarációval megkapod a:

List:
Szerkesztő támogatást, beleértve:
Szövegkiegészítés.
Típus ellenőrzés.


Adatok validációja:
Automatikus és érthető hibák amikor az adatok hibásak.
Validáció mélyen ágyazott objektumok esetén is.


Bemeneti adatok : a hálózatról érkező Python adatokká és típusokká. Adatok olvasása következő forrásokból:

Cím paraméterek.
Query paraméterek.

Header-ök.




Kimeneti adatok : Python adatok is típusokról hálózati adatokká:
válts át Python típusokat (, , , , , etc).
 csak objektumokat.
 objektumokat.
Adatbázis modelleket.
...És sok mást.


Automatikus interaktív dokumentáció, beleértve két alternatív dokumentációt is:
Swagger UI.

List:
Szövegkiegészítés.
Típus ellenőrzés.

List:
Automatikus és érthető hibák amikor az adatok hibásak.
Validáció mélyen ágyazott objektumok esetén is.

List:
Cím paraméterek.
Query paraméterek.

Header-ök.

================================================================================

# FastAPI - Összefoglalás (Part 2)

List:
válts át Python típusokat (, , , , , etc).
 csak objektumokat.
 objektumokat.
Adatbázis modelleket.
...És sok mást.

Visszatérve az előző kód példához. A :

List:
Validálja hogy van egy  mező a  és  kérésekben.
Validálja hogy az   típusú a  és  kérésekben.
Ha nem akkor látni fogunk egy tiszta hibát ezzel kapcsolatban.


ellenőrzi hogyha van egy opcionális query paraméter  névvel (azaz http://127.0.0.1:8000/items/foo?q=somequery)  kérések esetén.
Mivel a  paraméter -al van deklarálva, ezért opcionális.
 nélkül ez a mező kötelező lenne (mint például a body  kérések esetén).


a /items/{item_id} címre érkező  kérések esetén, a JSON-t a következőképpen olvassa be:
Ellenőrzi hogy létezik a kötelező  nevű attribútum és .
Ellenőrzi hogy létezik a kötelező  nevű attribútum és .
Ellenőrzi hogy létezik a  nevű opcionális paraméter, ami ha létezik akkor 
Ez ágyazott JSON objektumokkal is működik


JSONről való automatikus konvertálás.
dokumentáljuk mindent OpenAPI-al amit használható:
Interaktív dokumentációs rendszerekkel.
Automatikus kliens kód generáló a rendszerekkel, több nyelven.


Hozzá tartozik kettő interaktív dokumentációs web felület.

================================================================================

# FastAPI - Összefoglalás (Part 3)

List:
Ha nem akkor látni fogunk egy tiszta hibát ezzel kapcsolatban.

List:
Mivel a  paraméter -al van deklarálva, ezért opcionális.
 nélkül ez a mező kötelező lenne (mint például a body  kérések esetén).

List:
Ellenőrzi hogy létezik a kötelező  nevű attribútum és .
Ellenőrzi hogy létezik a kötelező  nevű attribútum és .
Ellenőrzi hogy létezik a  nevű opcionális paraméter, ami ha létezik akkor 
Ez ágyazott JSON objektumokkal is működik

List:
Interaktív dokumentációs rendszerekkel.
Automatikus kliens kód generáló a rendszerekkel, több nyelven.

Eddig csak a felszínt kapargattuk, de a lényeg hogy most már könnyebben érthető hogyan működik.

Próbáld kicserélni a következő sorban:

... És figyeld meg hogy a szerkesztő automatikusan tudni fogja a típusokat és kiegészíti azokat:

Teljesebb példákért és funkciókért tekintsd meg a Tutorial - User Guide -t.

Spoiler veszély: a Tutorial - User Guidehoz tartozik:

================================================================================

# FastAPI - Összefoglalás (Part 4)

List:
Paraméterek deklarációja különböző helyekről: , , form mezők és .
Hogyan állíts be validációs feltételeket mint a maximum_length vagy a .
Nagyon hatékony és erős Függőség Injekció rendszerek.
Biztonság és autentikáció beleértve, , JWT tokens és HTTP Basic támogatást.
Több haladó (de ugyanannyira könnyű) technika mélyen ágyazott JSON modellek deklarációjára (Pydantic-nek köszönhetően).
 integráció Strawberry-vel és más könyvtárakkal.
több extra funkció (Starlette-nek köszönhetően) pl.:
WebSockets
rendkívül könnyű tesztek HTTPX és  alapokra építve

Cookie Sessions
...és több.

List:
WebSockets
rendkívül könnyű tesztek HTTPX és  alapokra építve

Cookie Sessions
...és több.

================================================================================

# FastAPI - Teljesítmény

A független TechEmpower benchmarkok szerint az Uvicorn alatt futó  alkalmazások az egyik leggyorsabb Python keretrendszerek közé tartoznak, éppen lemaradva a Starlette és az Uvicorn (melyeket a FastAPI belsőleg használ) mögött.(*)

Ezeknek a további megértéséhez: Benchmarks.

================================================================================

# FastAPI - Opcionális követelmények

Pydantic által használt:

List:
email-validator - e-mail validációkra.
pydantic-settings - Beállítások követésére.
pydantic-extra-types - Extra típusok Pydantic-hoz.

Starlette által használt:

List:
- Követelmény ha a TestClient-et akarod használni.
 - Követelmény ha az alap template konfigurációt akarod használni.
python-multipart - Követelmény ha -ot akarsz támogatni, request.form()-al.
itsdangerous - Követelmény SessionMiddleware támogatáshoz.
 - Követelmény a Starlette SchemaGenerator-ának támogatásához (valószínűleg erre nincs szükség FastAPI használása esetén).

FastAPI / Starlette által használt

List:
- Szerverekhez amíg betöltik és szolgáltatják az applikációdat.
 - Követelmény ha ORJSONResponse-t akarsz használni.
 - Követelmény ha UJSONResponse-t akarsz használni.

Ezeket mind telepítheted a pip install "fastapi[all]" paranccsal.

================================================================================

# FastAPI - Licensz

Ez a projekt az MIT license, licensz alatt fut

================================================================================

# FastAPI

FastAPI, framework performa tinggi, mudah dipelajari, cepat untuk coding, siap untuk pengembangan

Dokumentasi: https://fastapi.tiangolo.com

Kode Sumber: https://github.com/fastapi/fastapi

FastAPI adalah   moderen, cepat (performa-tinggi) untuk membangun API dengan Python berdasarkan tipe petunjuk Python.

List:
: Performa sangat tinggi, setara  dan  (berkat Starlette dan Pydantic). Salah satu  Python tercepat yang ada.
Cepat untuk coding: Meningkatkan kecepatan pengembangan fitur dari 200% sampai 300%. *
Sedikit bug: Mengurangi hingga 40% kesalahan dari manusia (pemrogram). *
: Dukungan editor hebat. Penyelesaian di mana pun. Lebih sedikit .
: Dibuat mudah digunakan dan dipelajari. Sedikit waktu membaca dokumentasi.
: Mengurasi duplikasi kode. Beragam fitur dari setiap deklarasi parameter. Lebih sedikit .
: Dapatkan kode siap-digunakan. Dengan dokumentasi otomatis interaktif.
Standar-resmi: Berdasarkan (kompatibel dengan ) standar umum untuk API:  (sebelumnya disebut Swagger) dan JSON Schema.

*  estimasi berdasarkan pengujian tim internal pengembangan applikasi siap pakai.

================================================================================

# FastAPI - Opini

"[...] Saya banyak menggunakan  sekarang ini. [...] Saya berencana menggunakannya di semua tim servis ML Microsoft. Beberapa dari mereka sudah mengintegrasikan dengan produk inti * dan sebagian produk ."

"Kami adopsi library  untuk membuat server  yang melakukan kueri untuk menghasilkan . [untuk Ludwig]"

" dengan bangga mengumumkan rilis open-source orkestrasi framework manajemen krisis : ! [dibuat dengan ]"

"Saya sangat senang dengan . Sangat menyenangkan!"

"Jujur, apa yang anda buat sangat solid dan berkualitas. Ini adalah yang saya inginkan di  - sangat menginspirasi melihat seseorang membuat ini."

"Jika anda ingin mempelajari framework moderen untuk membangun REST API, coba  [...] cepat, mudah digunakan dan dipelajari [...]"

"Kami sudah pindah ke  untuk  kami [...] Saya pikir kamu juga akan suka [...]"

"Jika anda ingin membuat API Python siap pakai, saya merekomendasikan . FastAPI didesain indah, mudah digunakan dan sangat scalable, FastAPI adalah komponen kunci di strategi pengembangan API pertama kami dan mengatur banyak otomatisasi dan service seperti TAC Engineer kami."

================================================================================

# FastAPI - , CLI FastAPI

Jika anda mengembangkan app  yang digunakan di terminal bukan sebagai API web, kunjungi .

adalah saudara kecil FastAPI. Dan ditujukan sebagai CLI FastAPI. ⌨️ 🚀

================================================================================

# FastAPI - Prayarat

FastAPI berdiri di pundak raksasa:

List:
untuk bagian web.
 untuk bagian data.

================================================================================

# FastAPI - Instalasi

Buat dan aktifkan virtual environment kemudian  FastAPI:

Code example:
pipinstall"fastapi[standard]"

: Pastikan anda menulis "fastapi[standard]" dengan tanda petik untuk memastikan bisa digunakan di semua .

================================================================================

# FastAPI - Buat app

Jika kode anda menggunakan  / , gunakan :

Jika anda tidak paham, kunjungi "Panduan cepat" bagian  dan  di dokumentasi.

================================================================================

# FastAPI - Jalankan (Part 1)

Code example:
fastapidevmain.py
 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯
INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

Perintah fastapi dev membaca file , memeriksa app  di dalamnya, dan menjalan server dengan .

Secara otomatis, fastapi dev akan mengaktifkan auto-reload untuk pengembangan lokal.

================================================================================

# FastAPI - Jalankan (Part 2)

Informasi lebih lanjut kunjungi Dokumen FastAPI CLI.

================================================================================

# FastAPI - Periksa

Buka  di http://127.0.0.1:8000/items/5?q=somequery.

Anda akan melihat respon JSON berikut:

Anda telah membuat API:

List:
Menerima permintaan HTTP di   dan /items/{item_id}.
Kedua  menerima   (juga disebut  HTTP).
 /items/{item_id} memiliki parameter path  yang harus berjenis .
 /items/{item_id} memiliki query parameter  berjenis .

================================================================================

# FastAPI - Dokumentasi API interaktif

Sekarang kunjungi http://127.0.0.1:8000/docs.

Anda akan melihat dokumentasi API interaktif otomatis (dibuat oleh Swagger UI):

================================================================================

# FastAPI - Dokumentasi API alternatif

Kemudian kunjungi http://127.0.0.1:8000/redoc.

Anda akan melihat dokumentasi alternatif otomatis (dibuat oleh ):

================================================================================

# FastAPI - Contoh upgrade

Sekarang ubah  untuk menerima struktur permintaan .

Deklarasikan struktur menggunakan tipe standar Python, berkat Pydantic.

Code example:
update_item   
     "item_name"

Server fastapi dev akan otomatis memuat kembali.

================================================================================

# FastAPI - Upgrade dokumentasi API interaktif

Kunjungi http://127.0.0.1:8000/docs.

List:
Dokumentasi API interaktif akan otomatis diperbarui, termasuk kode yang baru:

List:
Klik tombol "Try it out", anda dapat mengisi parameter dan langsung berinteraksi dengan API:

List:
Kemudian klik tombol "Execute", tampilan pengguna akan berkomunikasi dengan API, mengirim parameter, mendapatkan dan menampilkan hasil ke layar:

================================================================================

# FastAPI - Upgrade dokumentasi API alternatif

Kunjungi http://127.0.0.1:8000/redoc.

List:
Dokumentasi alternatif akan menampilkan parameter  dan struktur :

================================================================================

# FastAPI - Ringkasan (Part 1)

Singkatnya, anda mendeklarasikan  jenis parameter, struktur, dll. sebagai parameter fungsi.

Anda melakukannya dengan tipe standar moderen Python.

Anda tidak perlu belajar sintaksis, metode,  baru dari  tertentu, dll.

Sebagai contoh untuk :

atau untuk model lebih rumit :

...dengan sekali deklarasi anda mendapatkan:

List:
Dukungan editor, termasuk:
Pelengkapan kode.
Pengecekan tipe.


Validasi data:
Kesalahan otomatis dan jelas ketika data tidak sesuai.
Validasi hingga untuk object JSON bercabang mendalam.


 input data: berasal dari jaringan ke data dan tipe Python. Membaca dari:

Parameter path.
Parameter query.






 output data: konversi data Python ke tipe jaringan data (seperti JSON):
Konversi tipe Python (, , , , , dll).
Objek .
Objek .
Model database.
...dan banyak lagi.


Dokumentasi interaktif otomatis, termasuk 2 alternatif tampilan pengguna:
Swagger UI.

List:
Pelengkapan kode.
Pengecekan tipe.

List:
Kesalahan otomatis dan jelas ketika data tidak sesuai.
Validasi hingga untuk object JSON bercabang mendalam.

List:
Parameter path.
Parameter query.

List:
Konversi tipe Python (, , , , , dll).
Objek .
Objek .
Model database.
...dan banyak lagi.

Kembali ke kode contoh sebelumnya,  akan:

================================================================================

# FastAPI - Ringkasan (Part 2)

List:
Validasi apakah terdapat  di  untuk permintaan  dan  requests.
Validasi apakah  berjenit  untuk permintaan  dan .
Jika tidak, klien akan melihat pesan kesalahan jelas.


Periksa jika ada parameter  opsional bernama  (seperti http://127.0.0.1:8000/items/foo?q=somequery) untuk permintaan .
Karena parameter  dideklarasikan dengan , maka bersifat opsional.
Tanpa  maka akan menjadi wajib ada (seperti struktur di kondisi dengan ).


Untuk permintaan  /items/{item_id}, membaca struktur sebagai JSON:
Memeriksa terdapat atribut wajib  harus berjenis .
Memeriksa terdapat atribut wajib harus berjenis .
Memeriksa atribut opsional , harus berjenis , jika ada.
Semua ini juga sama untuk objek json yang bersarang mendalam.


Konversi dari dan ke JSON secara otomatis.
Dokumentasi segalanya dengan OpenAPI, dengan menggunakan:
Sistem dokumentasi interaktif.
Sistem otomatis penghasil kode, untuk banyak bahasa.


Menyediakan 2 tampilan dokumentasi web interaktif dengan langsung.

List:
Jika tidak, klien akan melihat pesan kesalahan jelas.

List:
Karena parameter  dideklarasikan dengan , maka bersifat opsional.
Tanpa  maka akan menjadi wajib ada (seperti struktur di kondisi dengan ).

================================================================================

# FastAPI - Ringkasan (Part 3)

List:
Memeriksa terdapat atribut wajib  harus berjenis .
Memeriksa terdapat atribut wajib harus berjenis .
Memeriksa atribut opsional , harus berjenis , jika ada.
Semua ini juga sama untuk objek json yang bersarang mendalam.

List:
Sistem dokumentasi interaktif.
Sistem otomatis penghasil kode, untuk banyak bahasa.

Kita baru menyentuh permukaannya saja, tetapi anda sudah mulai paham gambaran besar cara kerjanya.

...anda akan melihat kode editor secara otomatis melengkapi atributnya dan tahu tipe nya:

Untuk contoh lengkap termasuk fitur lainnya, kunjungi Tutorial - Panduan Pengguna.

Peringatan spoiler: tutorial - panduan pengguna termasuk:

List:
Deklarasi  dari tempat berbeda seperti: , , form field and .
Bagaimana mengatur batasan validasi seperti maximum_lengthatau .
Sistem Dependency Injection yang hebat dan mudah digunakan.
Keamanan dan autentikasi, termasuk dukungan ke  dengan  dan autentikasi HTTP Basic.
Teknik lebih aju (tetapi mudah dipakai untuk deklarasi model JSON bersarang ke dalam (berkat Pydantic).
Integrasi  dengan Strawberry dan library lainnya.
Fitur lainnya (berkat Starlette) seperti:

Test yang sangat mudah berdasarkan HTTPX dan 

Cookie Session
...dan lainnya.

================================================================================

# FastAPI - Ringkasan (Part 4)

List:
Test yang sangat mudah berdasarkan HTTPX dan 

Cookie Session
...dan lainnya.

================================================================================

# FastAPI - Performa

Tolok ukur Independent TechEmpower mendapati aplikasi  berjalan menggunakan Uvicorn sebagai salah satu framework Python tercepat yang ada, hanya di bawah Starlette dan Uvicorn itu sendiri (digunakan di internal FastAPI). (*)

Penjelasan lebih lanjut, lihat bagian Tolok ukur.

================================================================================

# FastAPI - Dependensi

FastAPI bergantung pada Pydantic dan Starlette.

================================================================================

# FastAPI - Dependensi

Ketika anda meng- FastAPI dengan pip install "fastapi[standard]", maka FastAPI akan menggunakan sekumpulan dependensi opsional :

Digunakan oleh Pydantic:

List:
email-validator - untuk validasi email.

Digunakan oleh Starlette:

List:
- Dibutuhkan jika anda menggunakan TestClient.
 - Dibutuhkan jika anda menggunakan konfigurasi template bawaan.
python-multipart - Dibutuhkan jika anda menggunakan form dukungan , dengan request.form().

Digunakan oleh FastAPI / Starlette:

List:
- untuk server yang memuat dan melayani aplikasi anda. Termasuk uvicorn[standard], yang memasukan sejumlah dependensi (misal ) untuk needed melayani dengan performa tinggi.
fastapi-cli - untuk menyediakan perintah .

================================================================================

# FastAPI - Tanpda dependensi

Jika anda tidak ingin menambahkan dependensi opsional , anda dapat menggunakan pip install fastapi daripada pip install "fastapi[standard]".

================================================================================

# FastAPI - Dependensi Opsional Tambahan

Ada beberapa dependensi opsional yang bisa anda install.

Dependensi opsional tambahan Pydantic:

List:
pydantic-settings - untuk manajemen setting.
pydantic-extra-types - untuk tipe tambahan yang digunakan dengan Pydantic.

Dependensi tambahan opsional FastAPI:

List:
- Diperlukan jika anda akan menggunakanORJSONResponse.
 - Diperlukan jika anda akan menggunakan UJSONResponse.

================================================================================

# FastAPI - Lisensi

Project terlisensi dengan lisensi MIT.

================================================================================

# FastAPI (Part 1)

FastAPI framework, alte prestazioni, facile da imparare, rapido da implementare, pronto per il rilascio in produzione

Documentazione: https://fastapi.tiangolo.com

Codice Sorgente: https://github.com/fastapi/fastapi

FastAPI è un web framework moderno e veloce (a prestazioni elevate) che serve a creare API con Python 3.6+ basato sulle annotazioni di tipo di Python.

Le sue caratteristiche principali sono:

================================================================================

# FastAPI (Part 2)

List:
: Prestazioni molto elevate, alla pari di  e  (grazie a Starlette e Pydantic). Uno dei framework Python più veloci in circolazione.
Veloce da programmare: Velocizza il lavoro consentendo il rilascio di nuove funzionalità tra il 200% e il 300% più rapidamente. *
: Riduce di circa il 40% gli errori che commettono gli sviluppatori durante la scrittura del codice. *
: Grande supporto per gli editor di testo con autocompletamento in ogni dove. In questo modo si può dedicare meno tempo al debugging.
: Progettato per essere facile da usare e imparare. Si riduce il tempo da dedicare alla lettura della documentazione.
Sintentico: Minimizza la duplicazione di codice. Molteplici funzionalità, ognuna con la propria dichiarazione dei parametri. Meno errori.
: Crea codice pronto per la produzione con documentazione automatica interattiva.
Basato sugli standard: Basato su (e completamente compatibile con) gli open standard per le API:  (precedentemente Swagger) e JSON Schema.

* Stima basata sull'esito di test eseguiti su codice sorgente di applicazioni rilasciate in produzione da un team interno di sviluppatori.

================================================================================

# FastAPI - Recensioni

"[...] I'm using  a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft. Some of them are getting integrated into the core  product and some  products."

"We adopted the  library to spawn a  server that can be queried to obtain predictions. [for Ludwig]"

" is pleased to announce the open-source release of our crisis management orchestration framework: ! [built with ]"

"I’m over the moon excited about . It’s so fun!"

"Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted  to be - it's really inspiring to see someone build that."

"If you're looking to learn one modern framework for building REST APIs, check out  [...] It's fast, easy to use and easy to learn [...]"

"We've switched over to  for our  [...] I think you'll like it [...]"

================================================================================

# FastAPI - , la FastAPI delle CLI

Se stai sviluppando un'app  da usare nel terminale invece che una web API, ti consigliamo .

è il fratello minore di FastAPI. Ed è stato ideato per essere la FastAPI delle CLI. ⌨️ 🚀

================================================================================

# FastAPI - Requisiti

FastAPI è basata su importanti librerie:

List:
per le parti web.
 per le parti dei dati.

================================================================================

# FastAPI - Installazione

Per il rilascio in produzione, sarà necessario un server ASGI come  oppure .

Code example:
pipinstalluvicornstandard

================================================================================

# FastAPI - Crea un file

Se il tuo codice usa  / , allora usa :

e vuoi approfondire, consulta la sezione  "In a hurry?" su  e  nella documentazione.

================================================================================

# FastAPI - Esegui il server

Puoi far partire il server così:

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

Vediamo il comando uvicorn main:app in dettaglio:

List:
: il file  (il "modulo" Python).
: l'oggetto creato dentro  con la riga di codice app = FastAPI().
: ricarica il server se vengono rilevati cambiamenti del codice. Usalo solo durante la fase di sviluppo.

================================================================================

# FastAPI - Testa l'API

Apri il browser all'indirizzo http://127.0.0.1:8000/items/5?q=somequery.

Vedrai la seguente risposta JSON:

Hai appena creato un'API che:

List:
Riceve richieste HTTP sui   and /items/{item_id}.
Entrambi i  accettano operations (conosciuti anche come HTTP ).
Il  /items/{item_id} ha un path parameter  che deve essere un .
Il  /items/{item_id} ha una  query parameter .

================================================================================

# FastAPI - Documentazione interattiva dell'API

Adesso vai all'indirizzo http://127.0.0.1:8000/docs.

Vedrai la documentazione interattiva dell'API (offerta da Swagger UI):

================================================================================

# FastAPI - Documentazione interattiva alternativa

Adesso accedi all'url http://127.0.0.1:8000/redoc.

Vedrai la documentazione interattiva dell'API (offerta da ):

================================================================================

# FastAPI - Esempio più avanzato

Adesso modifica il file  per ricevere un  da una richiesta .

Dichiara il  usando le annotazioni di tipo standard di Python, grazie a Pydantic.

Code example:
update_item   
     "item_name"

Il server dovrebbe ricaricarsi in automatico (perché hai specificato  al comando  lanciato precedentemente).

================================================================================

# FastAPI - Aggiornamento della documentazione interattiva

Adesso vai su http://127.0.0.1:8000/docs.

List:
La documentazione interattiva dell'API verrà automaticamente aggiornata, includendo il nuovo :

List:
Fai click sul pulsante "Try it out", che ti permette di inserire i parametri per interagire direttamente con l'API:

List:
Successivamente, premi sul pulsante "Execute". L'interfaccia utente comunicherà con la tua API, invierà i parametri, riceverà i risultati della richiesta, e li mostrerà sullo schermo:

================================================================================

# FastAPI - Aggiornamento della documentazione alternativa

Ora vai su http://127.0.0.1:8000/redoc.

List:
Anche la documentazione alternativa dell'API mostrerà il nuovo parametro della query e il :

================================================================================

# FastAPI - Riepilogo (Part 1)

Ricapitolando, è sufficiente dichiarare una sola volta i tipi dei parametri, del body, ecc. come parametri di funzioni.

Questo con le annotazioni per i tipi standard di Python.

Non c'è bisogno di imparare una nuova sintassi, metodi o classi specifici a una libreria, ecc.

È normalissimo Python 3.6+.

Per esempio, per un :

o per un modello  più complesso:

...e con quella singola dichiarazione hai in cambio:

List:
Supporto per gli editor di testo, incluso:
Autocompletamento.
Controllo sulle annotazioni di tipo.


Validazione dei dati:
Errori chiari e automatici quando i dati sono invalidi.
Validazione anche per gli oggetti JSON più complessi.


Conversione dei dati di input: da risorse esterne a dati e tipi di Python. È possibile leggere da:

Path parameters.
Query parameters.






Conversione dei dati di output: converte dati e tipi di Python a dati per la rete (come JSON):
Converte i tipi di Python (, , , , , ecc).
Oggetti .
Oggetti .
Modelli del database.
...e molto di più.


Generazione di una documentazione dell'API interattiva, con scelta dell'interfaccia grafica:
Swagger UI.

List:
Autocompletamento.
Controllo sulle annotazioni di tipo.

================================================================================

# FastAPI - Riepilogo (Part 2)

List:
Errori chiari e automatici quando i dati sono invalidi.
Validazione anche per gli oggetti JSON più complessi.

List:
Path parameters.
Query parameters.

List:
Converte i tipi di Python (, , , , , ecc).
Oggetti .
Oggetti .
Modelli del database.
...e molto di più.

Tornando al precedente esempio, :

List:
Validerà che esiste un  nel percorso delle richieste  e .
Validerà che  sia di tipo  per le richieste  e .
Se non lo è, il client vedrà un errore chiaro e utile.


Controllerà se ci sia un parametro opzionale chiamato  (per esempio http://127.0.0.1:8000/items/foo?q=somequery) per le richieste .
Siccome il parametro  è dichiarato con , è opzionale.
Senza il  sarebbe stato obbligatorio (come per il body della richiesta ).


Per le richieste  su /items/{item_id}, leggerà il body come JSON, questo comprende:
verifica che la richiesta abbia un attributo obbligatorio  e che sia di tipo .
verifica che la richiesta abbia un attributo obbligatorio  e che sia di tipo .
verifica che la richiesta abbia un attributo opzionale  e che sia di tipo , se presente.
Tutto questo funzionerebbe anche con oggetti JSON più complessi.

================================================================================

# FastAPI - Riepilogo (Part 3)


Convertirà  e  JSON automaticamente.
Documenterà tutto con OpenAPI, che può essere usato per:
Sistemi di documentazione interattivi.
Sistemi di generazione di codice dal lato client, per molti linguaggi.


Fornirà 2 interfacce di documentazione dell'API interattive.

List:
Se non lo è, il client vedrà un errore chiaro e utile.

List:
Siccome il parametro  è dichiarato con , è opzionale.
Senza il  sarebbe stato obbligatorio (come per il body della richiesta ).

List:
verifica che la richiesta abbia un attributo obbligatorio  e che sia di tipo .
verifica che la richiesta abbia un attributo obbligatorio  e che sia di tipo .
verifica che la richiesta abbia un attributo opzionale  e che sia di tipo , se presente.
Tutto questo funzionerebbe anche con oggetti JSON più complessi.

List:
Sistemi di documentazione interattivi.
Sistemi di generazione di codice dal lato client, per molti linguaggi.

Questa è solo la punta dell'iceberg, ma dovresti avere già un'idea di come il tutto funzioni.

Prova a cambiare questa riga di codice:

...e osserva come il tuo editor di testo autocompleterà gli attributi e sarà in grado di riconoscere i loro tipi:

================================================================================

# FastAPI - Riepilogo (Part 4)

Per un esempio più completo che mostra più funzionalità del framework, consulta Tutorial - Guida Utente.

Spoiler alert: il tutorial - Guida Utente include:

List:
Dichiarazione di parameters da altri posti diversi come: , , form fields e .
Come stabilire vincoli di validazione come maximum_length o .
Un sistema di Dependency Injection facile da usare e molto potente.
e potente.
Sicurezza e autenticazione, incluso il supporto per  con  e autenticazione HTTP Basic.
Tecniche più avanzate (ma ugualmente semplici) per dichiarare modelli JSON altamente nidificati (grazie a Pydantic).
E altre funzionalità (grazie a Starlette) come:
WebSockets

test molto facili basati su  e 

Cookie Sessions
...e altro ancora.

List:
WebSockets

test molto facili basati su  e 

Cookie Sessions
...e altro ancora.

================================================================================

# FastAPI - Prestazioni

Benchmark indipendenti di TechEmpower mostrano che  basato su Uvicorn è uno dei framework Python più veloci in circolazione, solamente dietro a Starlette e Uvicorn (usate internamente da FastAPI). (*)

Per approfondire, consulta la sezione Benchmarks.

================================================================================

# FastAPI - Dipendenze opzionali

List:
email-validator - per la validazione di email.

List:
- Richiesto se vuoi usare il TestClient.
 - Richiesto se vuoi usare FileResponse o StaticFiles.
 - Richiesto se vuoi usare la configurazione template di default.
python-multipart - Richiesto se vuoi supportare il  con request.form().
itsdangerous - Richiesto per usare SessionMiddleware.
 - Richiesto per il supporto dello SchemaGenerator di Starlette (probabilmente non ti serve con FastAPI).
 - Richiesto per il supporto di GraphQLApp.

Usate da FastAPI / Starlette:

List:
- per il server che carica e serve la tua applicazione.
 - ichiesto se vuoi usare ORJSONResponse.
 - Richiesto se vuoi usare UJSONResponse.

Puoi installarle tutte con pip install fastapi[all].

================================================================================

# FastAPI - Licenza

Questo progetto è concesso in licenza in base ai termini della licenza MIT.

================================================================================

# FastAPI

FastAPI framework, high performance, easy to learn, fast to code, ready for production

: https://fastapi.tiangolo.com

: https://github.com/fastapi/fastapi

FastAPI は、Pythonの標準である型ヒントに基づいてPython 以降でAPI を構築するための、モダンで、高速(高パフォーマンス)な、Web フレームワークです。

List:
:  や  並みのとても高いパフォーマンス (Starlette と Pydantic のおかげです)。 最も高速な Python フレームワークの一つです.


: 開発速度を約 200%~300%向上させます。 *

: 開発者起因のヒューマンエラーを約 40％削減します。 *
: 素晴らしいエディタのサポートや オートコンプリート。 デバッグ時間を削減します。
: 簡単に利用、習得できるようにデザインされています。ドキュメントを読む時間を削減します。
: コードの重複を最小限にしています。各パラメータからの複数の機能。少ないバグ。
: 自動対話ドキュメントを使用して、本番環境で使用できるコードを取得します。
Standards-based: API のオープンスタンダードに基づいており、完全に互換性があります:  (以前は Swagger として知られていました) や .

:  や  並みのとても高いパフォーマンス (Starlette と Pydantic のおかげです)。 最も高速な Python フレームワークの一つです.

: 開発速度を約 200%~300%向上させます。 *

* 本番アプリケーションを構築している開発チームのテストによる見積もり。

================================================================================

# FastAPI - 評価

"[...] 最近  を使っています。 [...] 実際に私のチームの全ての Microsoft の機械学習サービス で使用する予定です。 そのうちのいくつかのコアな製品と製品に統合されつつあります。"

"FastAPIライブラリを採用し、クエリでを取得できるサーバを構築しました。 [for Ludwig]"

" は、オーケストレーションフレームワーク、のオープンソースリリースを発表できることをうれしく思います。 [built with ]"

"私はにワクワクしています。 めちゃくちゃ楽しいです！"

"正直、超堅実で洗練されているように見えます。いろんな意味で、それは私がハグしたかったものです。"

"REST API を構築するためのモダンなフレームワークを学びたい方は、 [...] をチェックしてみてください。 [...] 高速で, 使用、習得が簡単です。[...]"

"私たちのはに切り替えました。[...] きっと気に入ると思います。 [...]"

================================================================================

# FastAPI - , the FastAPI of CLIs

もし Web API の代わりにターミナルで使用するアプリを構築する場合は、を確認してください。

は FastAPI の弟分です。そして、CLI 版 の FastAPIを意味しています。

================================================================================

# FastAPI - インストール

本番環境では、 または、 のような、 ASGI サーバーが必要になります。

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - アプリケーションの作成

わからない場合は、ドキュメントの と にある"In a hurry?"セクションをチェックしてください。

================================================================================

# FastAPI - 実行

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

uvicorn main:appコマンドは以下の項目を参照します:

List:
: ファイル (Python "モジュール")
:  のapp = FastAPI()の行で生成されたオブジェクト
: コードを変更したらサーバーを再起動します。このオプションは開発環境でのみ使用します

================================================================================

# FastAPI - 動作確認

ブラウザからhttp://127.0.0.1:8000/items/5?q=somequeryを開きます。

以下の JSON のレスポンスが確認できます:

もうすでに以下の API が作成されています:

List:
と /items/{item_id}のパスで HTTP リクエストを受けます。
どちらのパスも   を取ります。(HTTP メソッドとしても知られています。)
/items/{item_id} パスのパスパラメータ  は  でなければなりません。
パス /items/{item_id} はオプションの  クエリパラメータ  を持ちます。

================================================================================

# FastAPI - 自動対話型の API ドキュメント

http://127.0.0.1:8000/docsにアクセスしてみてください。

自動対話型の API ドキュメントが表示されます。 (Swagger UIが提供しています。):

================================================================================

# FastAPI - 代替の API ドキュメント

http://127.0.0.1:8000/redocにアクセスしてみてください。

代替の自動ドキュメントが表示されます。(が提供しています。):

================================================================================

# FastAPI - アップグレード例

リクエストからボディを受け取るためにを修正しましょう。

Pydantic によって、Python の標準的な型を使ってボディを宣言します。

Code example:
update_item   
     "item_name"

サーバーは自動でリロードされます。(上述のコマンドでオプションを追加しているからです。)

================================================================================

# FastAPI - 自動対話型の API ドキュメントのアップグレード

http://127.0.0.1:8000/docsにアクセスしましょう。

List:
自動対話型の API ドキュメントが新しいボディも含めて自動でアップデートされます:

List:
"Try it out"ボタンをクリックしてください。パラメータを入力して API と直接やりとりすることができます:

List:
それから、"Execute" ボタンをクリックしてください。 ユーザーインターフェースは API と通信し、パラメータを送信し、結果を取得して画面に表示します:

================================================================================

# FastAPI - 代替の API ドキュメントのアップグレード

http://127.0.0.1:8000/redocにアクセスしましょう。

List:
代替の API ドキュメントにも新しいクエリパラメータやボディが反映されます。

================================================================================

# FastAPI - まとめ (Part 1)

要約すると、関数のパラメータとして、パラメータやボディ などの型を宣言します。

標準的な最新の Python の型を使っています。

新しい構文や特定のライブラリのメソッドやクラスなどを覚える必要はありません。

単なる標準的な3.8 以降の Pythonです。

...そして、この一度の宣言で、以下のようになります:

List:
以下を含むエディタサポート:



データが無効な場合に自動でエラーをクリアします。
深い入れ子になった JSON オブジェクトでも検証が可能です。
入力データの: ネットワークから Python のデータや型に変換してから読み取ります:







出力データの: Python のデータや型からネットワークデータへ変換します (JSON として):
Convert Python types (, , , , , etc).
 オブジェクト
 オブジェクト


2 つの代替ユーザーインターフェースを含む自動インタラクティブ API ドキュメント:
Swagger UI.

コード例に戻りましょう、 は次のようになります:

List:
およびリクエストのパスに があることを検証します。
がおよびリクエストに対して 型であることを検証します。
そうでない場合は、クライアントは有用で明確なエラーが表示されます。
 リクエストに対してオプションのクエリパラメータ  (http://127.0.0.1:8000/items/foo?q=somequery のように) が存在するかどうかを調べます。
パラメータ  は  で宣言されているので、オプションです。
がなければ必須になります（の場合のボディと同様です）。
 リクエストを /items/{item_id} に送信する場合は、ボディを JSON として読み込みます:
必須の属性  を確認してください。 それは  であるべきです。
必須の属性  を確認してください。それは  でなければならないです。
オプションの属性  を確認してください。値がある場合は、 であるべきです。
これらはすべて、深くネストされた JSON オブジェクトに対しても動作します。
JSON から JSON に自動的に変換します。
OpenAPIですべてを文書化し、以下を使用することができます:
対話的なドキュメントシステム。
多くの言語に対応した自動クライアントコード生成システム。
2 つの対話的なドキュメントのWebインターフェイスを直接提供します。

まだ表面的な部分に触れただけですが、もう全ての仕組みは分かっているはずです。

...そして、エディタが属性を自動補完し、そのタイプを知る方法を確認してください。:

より多くの機能を含む、より完全な例については、チュートリアル - ユーザーガイドをご覧ください。

================================================================================

# FastAPI - まとめ (Part 2)

: チュートリアル - ユーザーガイドは以下の情報が含まれています:

List:
、、、などの他の場所からの  宣言。
maximum_lengthやのようなを設定する方法。
非常に強力で使いやすい システム。
を用いた  や HTTP Basic 認証 のサポートを含む、セキュリティと認証。
深くネストされた JSON モデルを宣言するためのより高度な（しかし同様に簡単な）技術（Pydantic のおかげです）。
以下のようなたくさんのおまけ機能(Starlette のおかげです):
WebSockets

 や をもとにした極限に簡単なテスト

================================================================================

# FastAPI - パフォーマンス

独立した TechEmpower のベンチマークでは、Uvicorn で動作するアプリケーションが、Python フレームワークの中で最も高速なものの 1 つであり、Starlette と Uvicorn（FastAPI で内部的に使用されています）にのみ下回っていると示されています。

================================================================================

# FastAPI - オプションの依存関係

Pydantic によって使用されるもの:

List:
email-validator - E メールの検証

Starlette によって使用されるもの:

List:
- TestClientを使用するために必要です。
 - デフォルトのテンプレート設定を使用する場合は必要です。
python-multipart - request.form()からの変換をサポートしたい場合は必要です。
itsdangerous - SessionMiddleware サポートのためには必要です。
 - Starlette の SchemaGenerator サポートのために必要です。 (FastAPI では必要ないでしょう。)
 - GraphQLApp サポートのためには必要です。

FastAPI / Starlette に使用されるもの:

List:
- アプリケーションをロードしてサーブするサーバーのため。
 - ORJSONResponseを使用したい場合は必要です。
 - UJSONResponseを使用する場合は必須です。

これらは全て pip install fastapi[all]でインストールできます。

================================================================================

# FastAPI

FastAPI 프레임워크, 고성능, 간편한 학습, 빠른 코드 작성, 준비된 프로덕션

: https://fastapi.tiangolo.com

: https://github.com/fastapi/fastapi

FastAPI는 현대적이고, 빠르며(고성능), 파이썬 표준 타입 힌트에 기초한 Python의 API를 빌드하기 위한 웹 프레임워크입니다.

List:
: (Starlette과 Pydantic 덕분에)  및 와 대등할 정도로 매우 높은 성능. 사용 가능한 가장 빠른 파이썬 프레임워크 중 하나.


: 약 200%에서 300%까지 기능 개발 속도 증가. *

: 사람(개발자)에 의한 에러 약 40% 감소. *
: 훌륭한 편집기 지원. 모든 곳에서 . 적은 디버깅 시간.
: 쉽게 사용하고 배우도록 설계. 적은 문서 읽기 시간.
: 코드 중복 최소화. 각 매개변수 선언의 여러 기능. 적은 버그.
: 준비된 프로덕션 용 코드를 얻으십시오. 자동 대화형 문서와 함께.
: API에 대한 (완전히 호환되는) 개방형 표준 기반:  (이전에 Swagger로 알려졌던) 및 .

: (Starlette과 Pydantic 덕분에)  및 와 대등할 정도로 매우 높은 성능. 사용 가능한 가장 빠른 파이썬 프레임워크 중 하나.

: 약 200%에서 300%까지 기능 개발 속도 증가. *

* 내부 개발팀의 프로덕션 애플리케이션을 빌드한 테스트에 근거한 측정

================================================================================

# FastAPI - 의견들

"[...] 저는 요즘 를 많이 사용하고 있습니다. [...] 사실 우리 팀의 마이크로소프트 ML 서비스 전부를 바꿀 계획입니다. 그중 일부는 핵심 와 몇몇의  제품들이 통합되고 있습니다."

" 라이브러리를 채택하여 을 얻기 위해 쿼리를 실행 할 수 있는  서버를 생성했습니다. [Ludwig을 위해]"

"는 우리의 오픈 소스 배포판인  오케스트레이션 프레임워크를 발표할 수 있어 기쁩니다: 바로 입니다! [로 빌드]"

"가 너무 좋아서 구름 위를 걷는듯 합니다. 정말 즐겁습니다!"

"솔직히, 당신이 만든 것은 매우 견고하고 세련되어 보입니다. 여러 면에서 가 이렇게 되었으면 합니다 - 그걸 만든 누군가를 보는 것은 많은 영감을 줍니다."

"REST API를 만들기 위해 현대적인 프레임워크를 찾고 있다면 를 확인해 보십시오. [...] 빠르고, 쓰기 쉽고, 배우기도 쉽습니다 [...]"

"우리 를 로 바꿨습니다  [...] 아마 여러분도 좋아하실 것입니다 [...]"

================================================================================

# FastAPI - , FastAPI의 CLI

웹 API 대신 터미널에서 사용할  앱을 만들고 있다면, 를 확인해 보십시오.

는 FastAPI의 동생입니다. 그리고 FastAPI의 CLI가 되기 위해 생겼습니다. ⌨️ 🚀

================================================================================

# FastAPI - 요구사항

FastAPI는 거인들의 어깨 위에 서 있습니다:

List:
웹 부분을 위한 .
데이터 부분을 위한 .

================================================================================

# FastAPI - 설치

프로덕션을 위해  또는 과 같은 ASGI 서버도 필요할 겁니다.

Code example:
pipinstall"uvicorn[standard]"

================================================================================

# FastAPI - 만들기

여러분의 코드가  / 을 사용한다면, 를 사용하십시오.

잘 모르겠다면, 문서에서 와 에 관한  섹션을 확인해 보십시오.

================================================================================

# FastAPI - 실행하기

Code example:
uvicornmain:app--reload
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

명령 uvicorn main:app은 다음을 나타냅니다:

List:
:  파일 (파이썬 "모듈").
: the object created inside of  with the line app = FastAPI().
: 코드가 변경된 후 서버 재시작하기. 개발환경에서만 사용하십시오.

================================================================================

# FastAPI - 확인하기

브라우저로 http://127.0.0.1:8000/items/5?q=somequery를 열어보십시오.

아래의 JSON 응답을 볼 수 있습니다:

List:
및 /items/{item_id}에서 HTTP 요청 받기.
두  모두  (HTTP  로 알려진)을 받습니다.
 /items/{item_id}는  형 이어야 하는 를 가지고 있습니다.
 /items/{item_id}는 선택적인 형 이어야 하는  를 가지고 있습니다.

================================================================================

# FastAPI - 대화형 API 문서

이제 http://127.0.0.1:8000/docs로 가보십시오.

자동 대화형 API 문서를 볼 수 있습니다 (Swagger UI 제공):

================================================================================

# FastAPI - 대안 API 문서

그리고 이제 http://127.0.0.1:8000/redoc로 가봅시다.

다른 자동 문서를 볼 수 있습니다( 제공):

================================================================================

# FastAPI - 예제 심화

이제  요청에 있는 본문(Body)을 받기 위해 를 수정해봅시다.

Pydantic을 이용해 파이썬 표준 타입으로 본문을 선언합니다.

Code example:
update_item   
     "item_name"

서버가 자동으로 리로딩 할 수 있어야 합니다 (위에서  명령에 을 추가 했기 때문입니다).

================================================================================

# FastAPI - 대화형 API 문서 업그레이드

이제 http://127.0.0.1:8000/docs로 이동합니다.

List:
대화형 API 문서가 새 본문과 함께 자동으로 업데이트 합니다:

List:
"Try it out" 버튼을 클릭하면, 매개변수를 채울 수 있게 해주고 직접 API와 상호작용 할 수 있습니다:

List:
그러고 나서 "Execute" 버튼을 누르면, 사용자 인터페이스는 API와 통신하고 매개변수를 전송하며 그 결과를 가져와서 화면에 표시합니다:

================================================================================

# FastAPI - 대안 API 문서 업그레이드

그리고 이제, http://127.0.0.1:8000/redoc로 이동합니다.

List:
대안 문서 역시 새 쿼리 매개변수와 본문을 반영합니다:

================================================================================

# FastAPI - 요약 (Part 1)

요약하면, 여러분은 매개변수의 타입, 본문 등을 함수 매개변수로서  선언했습니다.

여러분은 현대 표준 파이썬 타입으로 이를 행했습니다.

새로운 문법, 특정 라이브러리의 메소드나 클래스 등을 배울 필요가 없습니다.

...그리고 단 하나의 선언으로 여러분이 얻는 것은:

List:
다음을 포함한 편집기 지원:




데이터 검증:
데이터가 유효하지 않을 때 자동으로 생성하는 명확한 에러.
중첩된 JSON 객체에 대한 유효성 검사.


입력 데이터 : 네트워크에서 파이썬 데이터 및 타입으로 전송. 읽을 수 있는 것들:









출력 데이터 : 파이썬 데이터 및 타입을 네트워크 데이터로 전환(JSON 형식으로):
파이썬 타입 변환 (, , , , , 등).
 객체.
 객체.
데이터베이스 모델.
...더 많은 것들.


대안가능한 사용자 인터페이스를 2개 포함한 자동 대화형 API 문서:
Swagger UI.

List:
데이터가 유효하지 않을 때 자동으로 생성하는 명확한 에러.
중첩된 JSON 객체에 대한 유효성 검사.

List:
파이썬 타입 변환 (, , , , , 등).
 객체.
 객체.
데이터베이스 모델.
...더 많은 것들.

이전 코드 예제로 돌아가서, 는 다음처럼 처리합니다:

List:
및  요청에 가 경로에 있는지 검증.
 및  요청에 가  타입인지 검증.
그렇지 않다면 클라이언트는 유용하고 명확한 에러를 볼 수 있습니다.


 요청에 라는 선택적인 쿼리 매개변수가 검사(http://127.0.0.1:8000/items/foo?q=somequery처럼).
 매개변수는 으로 선언되었기 때문에 선택사항입니다.
이 없다면 필수사항입니다(의 경우와 마찬가지로).


/items/{item_id}으로의  요청은 본문을 JSON으로 읽음:
을 필수 속성으로 갖고  형인지 검사.
을 필수 속성으로 갖고  형인지 검사.
만약 주어진다면, 를 선택 속성으로 갖고  형인지 검사.
이 모든 것은 깊이 중첩된 JSON 객체에도 적용됩니다.


JSON을 변환하거나 JSON으로 변환하는 것을 자동화.
다음에서 사용할 수 있는 모든 것을 OpenAPI로 문서화:
대화형 문서 시스템.
여러 언어들에 대한 자동 클라이언트 코드 생성 시스템.


2개의 대화형 문서 웹 인터페이스를 직접 제공.

List:
그렇지 않다면 클라이언트는 유용하고 명확한 에러를 볼 수 있습니다.

List:
매개변수는 으로 선언되었기 때문에 선택사항입니다.
이 없다면 필수사항입니다(의 경우와 마찬가지로).

================================================================================

# FastAPI - 요약 (Part 2)

List:
을 필수 속성으로 갖고  형인지 검사.
을 필수 속성으로 갖고  형인지 검사.
만약 주어진다면, 를 선택 속성으로 갖고  형인지 검사.
이 모든 것은 깊이 중첩된 JSON 객체에도 적용됩니다.

List:
대화형 문서 시스템.
여러 언어들에 대한 자동 클라이언트 코드 생성 시스템.

우리는 그저 수박 겉 핥기만 했을 뿐인데 여러분은 벌써 어떻게 작동하는지 알고 있습니다.

...그러고 나서 여러분의 편집기가 속성과 타입을 알고 자동 완성하는지 보십시오:

더 많은 기능을 포함한 보다 완전한 예제의 경우, 튜토리얼 - 사용자 가이드를 보십시오.

List:
서로 다른 장소에서  선언: , ,  그리고 .
maximum_length 또는 처럼 하는 방법.
강력하고 사용하기 쉬운  시스템.
 지원을 포함한 JWT tokens 및 HTTP Basic을 갖는 보안과 인증.
(Pydantic 덕분에) 깊은 중첩 JSON 모델을 선언하는데 더 진보한 (하지만 마찬가지로 쉬운) 기술.
(Starlette 덕분에) 많은 추가 기능:


HTTPX 및 에 기반한 극히 쉬운 테스트

List:
HTTPX 및 에 기반한 극히 쉬운 테스트

================================================================================

# FastAPI - 성능

독립된 TechEmpower 벤치마크에서 Uvicorn에서 작동하는 FastAPI 어플리케이션이 사용 가능한 가장 빠른 프레임워크 중 하나로 Starlette와 Uvicorn(FastAPI에서 내부적으로 사용)에만 밑돌고 있습니다. (*)

================================================================================

# FastAPI - 선택가능한 의존성

List:
email-validator - 이메일 유효성 검사.

List:
- TestClient를 사용하려면 필요.
 - 기본 템플릿 설정을 사용하려면 필요.
python-multipart - request.form()과 함께 의 지원을 원하면 필요.
itsdangerous - SessionMiddleware 지원을 위해 필요.
 - Starlette의 SchemaGenerator 지원을 위해 필요 (FastAPI와 쓸때는 필요 없을 것입니다).
 - GraphQLApp 지원을 위해 필요.

FastAPI / Starlette이 사용하는:

List:
- 애플리케이션을 로드하고 제공하는 서버.
 - ORJSONResponse을 사용하려면 필요.
 - UJSONResponse를 사용하려면 필요.

pip install fastapi[all]를 통해 이 모두를 설치 할 수 있습니다.

================================================================================

# FastAPI - 라이센스

이 프로젝트는 MIT 라이센스 조약에 따라 라이센스가 부여됩니다.

================================================================================

# FastAPI (Part 1)

FastAPI framework, zeer goede prestaties, eenvoudig te leren, snel te programmeren, klaar voor productie

Documentatie: https://fastapi.tiangolo.com

: https://github.com/tiangolo/fastapi

FastAPI is een modern, snel (zeer goede prestaties), web framework voor het bouwen van API's in Python, gebruikmakend van standaard Python type-hints.

De belangrijkste kenmerken zijn:

================================================================================

# FastAPI (Part 2)

List:
: Zeer goede prestaties, vergelijkbaar met  en  (dankzij Starlette en Pydantic). Een van de snelste beschikbare Python frameworks.
Snel te programmeren: Verhoog de snelheid om functionaliteit te ontwikkelen met ongeveer 200% tot 300%. *
Minder bugs: Verminder ongeveer 40% van de door mensen (ontwikkelaars) veroorzaakte fouten. *
: Buitengewoon goede ondersteuning voor editors. Overal automische code aanvulling. Minder tijd kwijt aan debuggen.
: Ontworpen om gemakkelijk te gebruiken en te leren. Minder tijd nodig om documentatie te lezen.
: Minimaliseer codeduplicatie. Elke parameterdeclaratie ondersteunt meerdere functionaliteiten. Minder bugs.
: Code gereed voor productie. Met automatische interactieve documentatie.
Standards-based: Gebaseerd op (en volledig verenigbaar met) open standaarden voor API's:  (voorheen bekend als Swagger) en JSON Schema.

* schatting op basis van testen met een intern ontwikkelteam en bouwen van productieapplicaties.

================================================================================

# FastAPI - Meningen (Part 1)

"[...] Ik gebruik  heel vaak tegenwoordig. [...] Ik ben van plan om het te gebruiken voor alle ML-services van mijn team bij Microsoft. Sommige van deze worden geïntegreerd in het kernproduct van  en sommige -producten."

"We hebben de  library gebruikt om een  server te maken die bevraagd kan worden om voorspellingen te maken. [voor Ludwig]"

" is verheugd om een open-source release aan te kondigen van ons crisismanagement-orkestratieframework: ! [gebouwd met ]"

"Ik ben super enthousiast over . Het is zo leuk!"

"Wat je hebt gebouwd ziet er echt super solide en gepolijst uit. In veel opzichten is het wat ik wilde dat  kon zijn - het is echt inspirerend om iemand dit te zien bouwen."

"Wie geïnteresseerd is in een modern framework voor het bouwen van REST API's, bekijkt best eens  [...] Het is snel, gebruiksvriendelijk en gemakkelijk te leren [...]_"

"We zijn overgestapt naar  voor onze  [...] Het gaat jou vast ook bevallen [...]"

================================================================================

# FastAPI - Meningen (Part 2)

"Wie een Python API wil bouwen voor productie, kan ik ten stelligste  aanraden. Het is prachtig ontworpen, eenvoudig te gebruiken en gemakkelijk schaalbaar, het is een cruciale component geworden in onze strategie om API's centraal te zetten, en het vereenvoudigt automatisering en diensten zoals onze Virtual TAC Engineer."

================================================================================

# FastAPI - , de FastAPI van CLIs

Als je een -app bouwt die in de terminal moet worden gebruikt in plaats van een web-API, gebruik dan .

is het kleine broertje van FastAPI. En het is bedoeld als de FastAPI van CLI's. ️

================================================================================

# FastAPI - Vereisten

FastAPI staat op de schouders van reuzen:

List:
voor de webonderdelen.
 voor de datadelen.

================================================================================

# FastAPI - Installatie

Code example:
pipinstall"fastapi[standard]"

: Zet "fastapi[standard]" tussen aanhalingstekens om ervoor te zorgen dat het werkt in alle terminals.

================================================================================

# FastAPI - Creëer het

List:
Maak het bestand  aan met daarin:

Als je code gebruik maakt van  / , gebruik dan :

Als je het niet weet, kijk dan in het gedeelte "Heb je haast?" over  en  in de documentatie.

================================================================================

# FastAPI - Voer het uit (Part 1)

Code example:
fastapidevmain.py
 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯
INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2248755] using WatchFiles
INFO:     Started server process [2248757]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

Het commando fastapi dev leest het  bestand, detecteert de  app, en start een server met .

================================================================================

# FastAPI - Voer het uit (Part 2)

Standaard zal dit commando fastapi dev starten met "auto-reload" geactiveerd voor ontwikkeling op het lokale systeem.

Je kan hier meer over lezen in de FastAPI CLI documentatie.

================================================================================

# FastAPI - Controleer het

Open je browser op http://127.0.0.1:8000/items/5?q=somequery.

Je zult een JSON response zien:

Je hebt een API gemaakt die:

List:
HTTP verzoeken kan ontvangen op de   en /items/{item_id}.
Beide  hebben   (ook bekend als HTTP ).
Het  /items/{item_id} heeft een pad parameter  dat een  moet zijn.
Het  /items/{item_id} heeft een optionele  query parameter .

================================================================================

# FastAPI - Interactieve API documentatie

Ga naar http://127.0.0.1:8000/docs.

Je ziet de automatische interactieve API documentatie (verstrekt door Swagger UI):

================================================================================

# FastAPI - Alternatieve API documentatie

Ga vervolgens naar http://127.0.0.1:8000/redoc.

Je ziet de automatische interactieve API documentatie (verstrekt door ):

================================================================================

# FastAPI - Voorbeeld upgrade

Pas nu het bestand  aan om de body van een  request te ontvangen.

Dankzij Pydantic kunnen we de body declareren met standaard Python types.

Code example:
update_item   
     "item_name"

De fastapi dev server zou automatisch moeten herladen.

================================================================================

# FastAPI - Interactieve API documentatie upgrade

Ga nu naar http://127.0.0.1:8000/docs.

List:
De interactieve API-documentatie wordt automatisch bijgewerkt, inclusief de nieuwe body:

List:
Klik op de knop "Try it out", hiermee kan je de parameters invullen en direct met de API interacteren:

List:
Klik vervolgens op de knop "Execute", de gebruikersinterface zal communiceren met jouw API, de parameters verzenden, de resultaten ophalen en deze op het scherm tonen:

================================================================================

# FastAPI - Alternatieve API documentatie upgrade

Ga vervolgens naar http://127.0.0.1:8000/redoc.

List:
De alternatieve documentatie zal ook de nieuwe queryparameter en body weergeven:

================================================================================

# FastAPI - Samenvatting (Part 1)

Samengevat declareer je  de types van parameters, body, etc. als functieparameters.

Dat doe je met standaard moderne Python types.

Je hoeft geen nieuwe syntax te leren, de methods of klassen van een specifieke bibliotheek, etc.

Bijvoorbeeld, voor een :

of voor een complexer  model:

...en met die ene verklaring krijg je:

List:
Editor ondersteuning, inclusief:
Code aanvulling.
Type validatie.


Validatie van data:
Automatische en duidelijke foutboodschappen wanneer de data ongeldig is.
Validatie zelfs voor diep geneste JSON objecten.


 van invoergegevens: afkomstig van het netwerk naar Python-data en -types. Zoals:

Pad parameters.
Query parameters.


Formulieren.
Bestanden.


 van uitvoergegevens: converstie van Python-data en -types naar netwerkgegevens (zoals JSON):
Converteer Python types (, , , , , etc).
 objecten.
 objecten.
Database modellen.
...en nog veel meer.


Automatische interactieve API-documentatie, inclusief 2 alternatieve gebruikersinterfaces:
Swagger UI.

List:
Code aanvulling.
Type validatie.

List:
Automatische en duidelijke foutboodschappen wanneer de data ongeldig is.
Validatie zelfs voor diep geneste JSON objecten.

List:
Pad parameters.
Query parameters.


Formulieren.
Bestanden.

================================================================================

# FastAPI - Samenvatting (Part 2)

List:
Converteer Python types (, , , , , etc).
 objecten.
 objecten.
Database modellen.
...en nog veel meer.

Terugkomend op het vorige code voorbeeld,  zal:

List:
Valideren dat er een  bestaat in het pad voor  en  verzoeken.
Valideren dat het  van het type  is voor  en  verzoeken.
Wanneer dat niet het geval is, krijgt de cliënt een nuttige, duidelijke foutmelding.


Controleren of er een optionele query parameter is met de naam  (zoals in http://127.0.0.1:8000/items/foo?q=somequery) voor  verzoeken.
Aangezien de  parameter werd gedeclareerd met , is deze optioneel.
Zonder de  declaratie zou deze verplicht zijn (net als bij de body in het geval met ).


Voor  verzoeken naar /items/{item_id}, lees de body als JSON:
Controleer of het een verplicht attribuut  heeft en dat dat een  is.
Controleer of het een verplicht attribuut  heeft en dat dat een is.
Controleer of het een optioneel attribuut  heeft, dat een  is wanneer het aanwezig is.
Dit alles werkt ook voor diep geneste JSON objecten.


Converteer automatisch van en naar JSON.
Documenteer alles met OpenAPI, dat gebruikt kan worden door:
Interactieve documentatiesystemen.
Automatische client code generatie systemen, voor vele talen.

================================================================================

# FastAPI - Samenvatting (Part 3)


Biedt 2 interactieve documentatie-webinterfaces aan.

List:
Wanneer dat niet het geval is, krijgt de cliënt een nuttige, duidelijke foutmelding.

List:
Aangezien de  parameter werd gedeclareerd met , is deze optioneel.
Zonder de  declaratie zou deze verplicht zijn (net als bij de body in het geval met ).

List:
Controleer of het een verplicht attribuut  heeft en dat dat een  is.
Controleer of het een verplicht attribuut  heeft en dat dat een is.
Controleer of het een optioneel attribuut  heeft, dat een  is wanneer het aanwezig is.
Dit alles werkt ook voor diep geneste JSON objecten.

List:
Interactieve documentatiesystemen.
Automatische client code generatie systemen, voor vele talen.

Dit was nog maar een snel overzicht, maar je zou nu toch al een idee moeten hebben over hoe het allemaal werkt.

Probeer deze regel te veranderen:

...en zie hoe je editor de attributen automatisch invult en hun types herkent:

Voor een vollediger voorbeeld met meer mogelijkheden, zie de Tutorial - Gebruikershandleiding.

Spoiler alert: de tutorial - gebruikershandleiding bevat:

================================================================================

# FastAPI - Samenvatting (Part 4)

List:
Declaratie van parameters op andere plaatsen zoals: , , formuliervelden en .
Hoe stel je validatie restricties in zoals maximum_length of een .
Een zeer krachtig en eenvoudig te gebruiken Dependency Injection systeem.
Beveiliging en authenticatie, inclusief ondersteuning voor  met JWT-tokens en HTTP Basic auth.
Meer geavanceerde (maar even eenvoudige) technieken voor het declareren van diep geneste JSON modellen (dankzij Pydantic).
 integratie met Strawberry en andere packages.
Veel extra functies (dankzij Starlette) zoals:
WebSockets
uiterst gemakkelijke tests gebaseerd op HTTPX en 

Cookie Sessions
...en meer.

List:
WebSockets
uiterst gemakkelijke tests gebaseerd op HTTPX en 

Cookie Sessions
...en meer.

================================================================================

# FastAPI - Prestaties

Onafhankelijke TechEmpower benchmarks tonen  applicaties draaiend onder Uvicorn aan als een van de snelste Python frameworks beschikbaar, alleen onder Starlette en Uvicorn zelf (intern gebruikt door FastAPI). (*)

Zie de sectie Benchmarks om hier meer over te lezen.

================================================================================

# FastAPI - Afhankelijkheden

FastAPI maakt gebruik van Pydantic en Starlette.

================================================================================

# FastAPI - Afhankelijkheden

Wanneer je FastAPI installeert met pip install "fastapi[standard]", worden de volgende  optionele afhankelijkheden geïnstalleerd:

Gebruikt door Pydantic:

List:
email_validator - voor email validatie.

Gebruikt door Starlette:

List:
- Vereist indien je de TestClient wil gebruiken.
 - Vereist als je de standaard templateconfiguratie wil gebruiken.
python-multipart - Vereist indien je  van formulieren wil ondersteunen met requests.form().

Gebruikt door FastAPI / Starlette:

List:
- voor de server die jouw applicatie laadt en bedient.
fastapi-cli - om het  commando te voorzien.

================================================================================

# FastAPI - Zonder  Afhankelijkheden

Indien je de optionele  afhankelijkheden niet wenst te installeren, kan je installeren met pip install fastapi in plaats van pip install "fastapi[standard]".

================================================================================

# FastAPI - Bijkomende Optionele Afhankelijkheden

Er zijn nog een aantal bijkomende afhankelijkheden die je eventueel kan installeren.

Bijkomende optionele afhankelijkheden voor Pydantic:

List:
pydantic-settings - voor het beheren van settings.
pydantic-extra-types - voor extra data types die gebruikt kunnen worden met Pydantic.

Bijkomende optionele afhankelijkheden voor FastAPI:

List:
- Vereist indien je ORJSONResponse wil gebruiken.
 - Vereist indien je UJSONResponse wil gebruiken.

================================================================================

# FastAPI - Licentie

Dit project is gelicenseerd onder de voorwaarden van de MIT licentie.

================================================================================

